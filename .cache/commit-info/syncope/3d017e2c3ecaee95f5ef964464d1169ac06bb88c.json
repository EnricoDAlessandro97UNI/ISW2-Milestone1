{"sha":"3d017e2c3ecaee95f5ef964464d1169ac06bb88c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNkMDE3ZTJjM2VjYWVlOTVmNWVmOTY0NDY0ZDExNjlhYzA2YmI4OGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-18T14:35:35Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-09-18T14:35:35Z"},"message":"Refactoring to reduce ProvisioningManager methods and move as much as possible into AbstractPushResultHandler / bstractSyncResultHandler from respective children","tree":{"sha":"0e4a84978c80d8d57d672278dc5d226d1c038443","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0e4a84978c80d8d57d672278dc5d226d1c038443"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3d017e2c3ecaee95f5ef964464d1169ac06bb88c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d017e2c3ecaee95f5ef964464d1169ac06bb88c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3d017e2c3ecaee95f5ef964464d1169ac06bb88c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"9f73fa43555a47a455e121ee8d52b72925ac9b4f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9f73fa43555a47a455e121ee8d52b72925ac9b4f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9f73fa43555a47a455e121ee8d52b72925ac9b4f"}],"stats":{"total":1864,"additions":852,"deletions":1012},"files":[{"sha":"95e751ec4ff73971743b216196b918828c6d5ca5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/VirAttrHandler.java","status":"modified","additions":14,"deletions":8,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FVirAttrHandler.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.api;\n \n import java.util.Collection;\n-import java.util.Set;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n@@ -31,25 +30,32 @@\n \n public interface VirAttrHandler {\n \n-    PropagationByResource fillVirtual(Any any, Set<AttrPatch> vAttrs);\n-\n     /**\n-     * Add virtual attributes and specify values to be propagated.\n+     * Create and add virtual attributes to any.\n      *\n-     * @param any any.\n+     * @param any any\n      * @param vAttrs virtual attributes to be added.\n      */\n-    void fillVirtual(Any any, Collection<AttrTO> vAttrs);\n+    void createVirtual(Any any, Collection<AttrTO> vAttrs);\n+\n+    /**\n+     * Update virtual attributes to any.\n+     *\n+     * @param any\n+     * @param vAttrs virtual attributes to be updated.\n+     * @return operations to be performed on external resources for virtual attributes changes\n+     */\n+    PropagationByResource updateVirtual(Any any, Collection<AttrPatch> vAttrs);\n \n     /**\n-     * SYNCOPE-459: build virtual attribute changes in case no other changes were made.\n+     * Update virtual attributes to any identified by the given {@code key}.\n      *\n      * @param key any key\n      * @param anyTypeKind type kind\n      * @param vAttrs virtual attributes to be updated.\n      * @return operations to be performed on external resources for virtual attributes changes\n      */\n-    PropagationByResource fillVirtual(Long key, AnyTypeKind anyTypeKind, Set<AttrPatch> vAttrs);\n+    PropagationByResource updateVirtual(Long key, AnyTypeKind anyTypeKind, Collection<AttrPatch> vAttrs);\n \n     VirSchema getVirSchema(String virSchemaName);\n "},{"sha":"ef9baf22709f4ac9d4a3b8579d6b10cb97193dce","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/propagation/PropagationManager.java","status":"modified","additions":53,"deletions":123,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpropagation%2FPropagationManager.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -20,179 +20,109 @@\n \n import java.util.Collection;\n import java.util.List;\n-import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n \n public interface PropagationManager {\n \n     /**\n-     * Create the group on every associated resource.\n+     * Create the any object tasks for every associated resource, unless in {@code noPropResourceNames}.\n      *\n-     * @param wfResult group to be propagated (and info associated), as per result from workflow\n-     * @param vAttrs virtual attributes to be set\n-     * @param noPropResourceNames external resources performing not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupCreateTasks(\n-            WorkflowResult<Long> wfResult, Collection<AttrTO> vAttrs, Collection<String> noPropResourceNames);\n-\n-    /**\n-     * Create the group on every associated resource.\n-     *\n-     * @param key group id\n-     * @param vAttrs virtual attributes to be set\n+     * @param kind any object type kind\n+     * @param key any object key\n      * @param propByRes operation to be performed per resource\n+     * @param vAttrs virtual attributes to be set\n      * @param noPropResourceNames external resources performing not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getGroupCreateTasks(Long key, Collection<AttrTO> vAttrs, PropagationByResource propByRes,\n+    List<PropagationTask> getCreateTasks(\n+            AnyTypeKind kind,\n+            Long key,\n+            PropagationByResource propByRes,\n+            Collection<AttrTO> vAttrs,\n             Collection<String> noPropResourceNames);\n \n     /**\n-     * Performs update on each resource associated to the group.\n-     *\n-     * @param wfResult group to be propagated (and info associated), as per result from workflow\n-     * @param vAttrs virtual attributes patches\n-     * @param noPropResourceNames external resource names not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupUpdateTasks(\n-            WorkflowResult<Long> wfResult, Set<AttrPatch> vAttrs, Set<String> noPropResourceNames);\n-\n-    /**\n-     * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param groupKey to be deleted\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupDeleteTasks(Long groupKey);\n-\n-    /**\n-     * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n+     * Create the user tasks for every associated resource, unless in {@code noPropResourceNames}.\n      *\n-     * @param groupKey to be deleted\n-     * @param noPropResourceName name of external resource not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupDeleteTasks(Long groupKey, String noPropResourceName);\n-\n-    /**\n-     * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param groupKey to be deleted\n-     * @param noPropResourceNames name of external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupDeleteTasks(Long groupKey, Collection<String> noPropResourceNames);\n-\n-    /**\n-     * Perform delete on each resource associated to the group. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n-     *\n-     * @param groupKey to be deleted\n-     * @param resourceNames resource from which group is to be deleted\n-     * @param noPropResourceNames name of external resources not to be considered for propagation\n-     * @return list of propagation tasks\n-     */\n-    List<PropagationTask> getGroupDeleteTasks(\n-            Long groupKey, Set<String> resourceNames, Collection<String> noPropResourceNames);\n-\n-    List<PropagationTask> getAnyObjectCreateTasks(\n-            WorkflowResult<Long> wfResult, Collection<AttrTO> vAttrs, Collection<String> noPropResourceNames);\n-\n-    List<PropagationTask> getAnyObjectCreateTasks(Long anyObjectKey, Collection<AttrTO> vAttrs,\n-            PropagationByResource propByRes, Collection<String> noPropResourceNames);\n-\n-    List<PropagationTask> getAnyObjectUpdateTasks(\n-            WorkflowResult<Long> wfResult, Set<AttrPatch> vAttrs, Set<String> noPropResourceNames);\n-\n-    List<PropagationTask> getAnyObjectDeleteTasks(Long anyObjectKey);\n-\n-    List<PropagationTask> getAnyObjectDeleteTasks(Long anyObjectKey, String noPropResourceName);\n-\n-    List<PropagationTask> getAnyObjectDeleteTasks(Long anyObjectKey, Collection<String> noPropResourceNames);\n-\n-    List<PropagationTask> getAnyObjectDeleteTasks(\n-            Long groupKey, Set<String> resourceNames, Collection<String> noPropResourceNames);\n-\n-    /**\n-     * Create the user on every associated resource.\n-     *\n-     * @param key to be propagated\n+     * @param key user key\n+     * @param password to be set\n      * @param enable whether user must be enabled or not\n      * @param propByRes operation to be performed per resource\n-     * @param password to be set\n      * @param vAttrs virtual attributes to be set\n      * @param noPropResourceNames external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserCreateTasks(Long key, Boolean enable,\n-            PropagationByResource propByRes, String password, Collection<AttrTO> vAttrs,\n+    List<PropagationTask> getUserCreateTasks(\n+            Long key,\n+            String password,\n+            Boolean enable,\n+            PropagationByResource propByRes,\n+            Collection<AttrTO> vAttrs,\n             Collection<String> noPropResourceNames);\n \n     /**\n-     * Performs update on each resource associated to the user excluding the specified into 'resourceNames' parameter.\n+     * Create the update tasks for the any object on each resource associated, unless in {@code noPropResourceNames}.\n      *\n-     * @param key to be propagated\n-     * @param enable whether user must be enabled or not\n+     * @param kind any object type kind\n+     * @param key any object key\n+     * @param changePwd whether password should be included for propagation attributes or not\n+     * @param enable whether any object should be enabled or not, may be null to leave unchanged\n+     * @param propByRes operation to be performed per resource\n+     * @param vAttrs virtual attributes patches\n      * @param noPropResourceNames external resource names not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserUpdateTasks(Long key, Boolean enable, Collection<String> noPropResourceNames);\n+    List<PropagationTask> getUpdateTasks(\n+            AnyTypeKind kind,\n+            Long key,\n+            boolean changePwd,\n+            Boolean enable,\n+            PropagationByResource propByRes,\n+            Collection<AttrPatch> vAttrs,\n+            Collection<String> noPropResourceNames);\n \n     /**\n-     * Performs update on each resource associated to the user.\n+     * Create the update tasks for the user on each resource associated, unless in {@code noPropResourceNames}.\n      *\n      * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @param changePwd whether password should be included for propagation attributes or not\n      * @param noPropResourceNames external resources not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n-            boolean changePwd, Collection<String> noPropResourceNames);\n-\n-    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n-\n-    List<PropagationTask> getUpdateTasks(Any<?, ?, ?> any, String password, boolean changePwd,\n-            Boolean enable, Set<AttrPatch> vAttrs,\n-            PropagationByResource propByRes, Collection<String> noPropResourceNames);\n+    List<PropagationTask> getUserUpdateTasks(\n+            WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n+            boolean changePwd,\n+            Collection<String> noPropResourceNames);\n \n     /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n+     * Create the update tasks for the user on each resource associated; propagate password update only to requested\n+     * resources.\n      *\n-     * @param userKey to be deleted\n-     * @param noPropResourceNames name of external resources not to be considered for propagation\n+     * @param wfResult user to be propagated (and info associated), as per result from workflow\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserDeleteTasks(Long userKey, Collection<String> noPropResourceNames);\n+    List<PropagationTask> getUserUpdateTasks(WorkflowResult<Pair<UserPatch, Boolean>> wfResult);\n \n     /**\n-     * Perform delete on each resource associated to the user. It is possible to ask for a mandatory provisioning for\n-     * some resources specifying a set of resource names. Exceptions won't be ignored and the process will be stopped if\n-     * the creation fails onto a mandatory resource.\n+     * Create the delete tasks for the any object from each resource associated, unless in {@code noPropResourceNames}.\n      *\n-     * @param userKey to be deleted\n-     * @param resourceNames resources\n-     * @param noPropResourceNames name of external resources not to be considered for propagation\n+     * @param kind any object type kind\n+     * @param key any object key\n+     * @param propByRes operation to be performed per resource\n+     * @param noPropResourceNames external resource names not to be considered for propagation\n      * @return list of propagation tasks\n      */\n-    List<PropagationTask> getUserDeleteTasks(\n-            Long userKey, Set<String> resourceNames, Collection<String> noPropResourceNames);\n+    List<PropagationTask> getDeleteTasks(\n+            AnyTypeKind kind,\n+            Long key,\n+            PropagationByResource propByRes,\n+            Collection<String> noPropResourceNames);\n \n }"},{"sha":"bc1dbc2b8b4d24a4143d7aa36cd8f2c68e32b1cf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyObjectProvisioningManager.java","status":"modified","additions":47,"deletions":30,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultAnyObjectProvisioningManager.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -18,10 +18,8 @@\n  */\n package org.apache.syncope.core.provisioning.java;\n \n-import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -42,7 +40,6 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.slf4j.Logger;\n@@ -79,8 +76,12 @@ public Pair<Long, List<PropagationStatus>> create(\n \n         WorkflowResult<Long> created = awfAdapter.create(anyObjectTO);\n \n-        List<PropagationTask> tasks = propagationManager.getAnyObjectCreateTasks(\n-                created, anyObjectTO.getVirAttrs(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                created.getResult(),\n+                created.getPropByRes(),\n+                anyObjectTO.getVirAttrs(),\n+                excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -104,16 +105,29 @@ public Pair<Long, List<PropagationStatus>> update(\n \n         WorkflowResult<Long> updated = awfAdapter.update(anyObjectPatch);\n \n-        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(\n-                updated, anyObjectPatch.getVirAttrs(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                updated.getResult(),\n+                false,\n+                null,\n+                updated.getPropByRes(),\n+                anyObjectPatch.getVirAttrs(),\n+                excludedResources);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n                     updated.getResult(),\n                     AnyTypeKind.ANY_OBJECT,\n                     anyObjectPatch.getVirAttrs());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getAnyObjectUpdateTasks(updated, null, null)\n+                    ? propagationManager.getUpdateTasks(\n+                            AnyTypeKind.ANY_OBJECT,\n+                            updated.getResult(),\n+                            false,\n+                            null,\n+                            updated.getPropByRes(),\n+                            anyObjectPatch.getVirAttrs(),\n+                            null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n \n@@ -136,15 +150,13 @@ public List<PropagationStatus> delete(final Long key) {\n \n     @Override\n     public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n-        List<PropagationTask> tasks = new ArrayList<>();\n-\n-        AnyObject anyObject = anyObjectDAO.authFind(key);\n-        if (anyObject != null) {\n-            tasks.addAll(propagationManager.getAnyObjectDeleteTasks(anyObject.getKey()));\n-        }\n-\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n-                getBean(PropagationReporter.class);\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                key,\n+                null,\n+                excludedResources);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -170,13 +182,16 @@ public Long link(final AnyObjectPatch anyObjectPatch) {\n     @Override\n     public List<PropagationStatus> provision(final Long key, final Collection<String> resources) {\n         PropagationByResource propByRes = new PropagationByResource();\n-        for (String resource : resources) {\n-            propByRes.add(ResourceOperation.UPDATE, resource);\n-        }\n-\n-        WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n-\n-        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(wfResult, null, null);\n+        propByRes.addAll(ResourceOperation.UPDATE, resources);\n+\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                key,\n+                false,\n+                null,\n+                propByRes,\n+                null,\n+                null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -190,12 +205,14 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n \n     @Override\n     public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n-        AnyObject anyObject = anyObjectDAO.authFind(key);\n-\n-        Collection<String> noPropResourceName = CollectionUtils.removeAll(anyObject.getResourceNames(), resources);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getAnyObjectDeleteTasks(\n-                key, new HashSet<>(resources), noPropResourceName);\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                key,\n+                propByRes,\n+                CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(anyObjectDAO.authFind(key)), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"b933488ca3907e282b24587ea238a9b014c5119f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":72,"deletions":41,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -23,7 +23,6 @@\n import java.util.Map;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.slf4j.Logger;\n@@ -40,7 +39,6 @@\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -80,8 +78,12 @@ public Pair<Long, List<PropagationStatus>> create(final GroupTO group) {\n     public Pair<Long, List<PropagationStatus>> create(final GroupTO groupTO, final Set<String> excludedResources) {\n         WorkflowResult<Long> created = gwfAdapter.create(groupTO);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupCreateTasks(\n-                created, groupTO.getVirAttrs(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+                AnyTypeKind.GROUP,\n+                created.getResult(),\n+                created.getPropByRes(),\n+                groupTO.getVirAttrs(),\n+                excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -106,8 +108,12 @@ public Pair<Long, List<PropagationStatus>> create(\n             groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getGroupCreateTasks(\n-                created, groupTO.getVirAttrs(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+                AnyTypeKind.GROUP,\n+                created.getResult(),\n+                created.getPropByRes(),\n+                groupTO.getVirAttrs(),\n+                excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -131,16 +137,29 @@ public Pair<Long, List<PropagationStatus>> update(\n \n         WorkflowResult<Long> updated = gwfAdapter.update(groupPatch);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(\n-                updated, groupPatch.getVirAttrs(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.GROUP,\n+                updated.getResult(),\n+                false,\n+                null,\n+                updated.getPropByRes(),\n+                groupPatch.getVirAttrs(),\n+                excludedResources);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n                     updated.getResult(),\n                     AnyTypeKind.GROUP,\n                     groupPatch.getVirAttrs());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getGroupUpdateTasks(updated, null, null)\n+                    ? propagationManager.getUpdateTasks(\n+                            AnyTypeKind.GROUP,\n+                            updated.getResult(),\n+                            false,\n+                            null,\n+                            updated.getPropByRes(),\n+                            groupPatch.getVirAttrs(),\n+                            excludedResources)\n                     : Collections.<PropagationTask>emptyList());\n         }\n \n@@ -165,31 +184,36 @@ public List<PropagationStatus> delete(final Long key) {\n     public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n         List<PropagationTask> tasks = new ArrayList<>();\n \n-        Group group = groupDAO.authFind(key);\n-        if (group != null) {\n-            // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n-            // because of the reason being deleted (see SYNCOPE-357)\n-            for (Map.Entry<Long, PropagationByResource> entry\n-                    : groupDAO.findUsersWithTransitiveResources(group.getKey()).entrySet()) {\n-\n-                WorkflowResult<Long> wfResult =\n-                        new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n-                tasks.addAll(propagationManager.getUserDeleteTasks(wfResult.getResult(), excludedResources));\n-            }\n-            for (Map.Entry<Long, PropagationByResource> entry\n-                    : groupDAO.findAnyObjectsWithTransitiveResources(group.getKey()).entrySet()) {\n-\n-                WorkflowResult<Long> wfResult =\n-                        new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n-                tasks.addAll(propagationManager.getAnyObjectDeleteTasks(wfResult.getResult(), excludedResources));\n-            }\n-\n-            // Generate propagation tasks for deleting this group from resources\n-            tasks.addAll(propagationManager.getGroupDeleteTasks(group.getKey()));\n+        // Generate propagation tasks for deleting users and any objects from group resources, \n+        // if they are on those resources only because of the reason being deleted (see SYNCOPE-357)\n+        for (Map.Entry<Long, PropagationByResource> entry\n+                : groupDAO.findUsersWithTransitiveResources(key).entrySet()) {\n+\n+            tasks.addAll(propagationManager.getDeleteTasks(\n+                    AnyTypeKind.USER,\n+                    entry.getKey(),\n+                    entry.getValue(),\n+                    excludedResources));\n+        }\n+        for (Map.Entry<Long, PropagationByResource> entry\n+                : groupDAO.findAnyObjectsWithTransitiveResources(key).entrySet()) {\n+\n+            tasks.addAll(propagationManager.getDeleteTasks(\n+                    AnyTypeKind.ANY_OBJECT,\n+                    entry.getKey(),\n+                    entry.getValue(),\n+                    excludedResources));\n         }\n \n-        PropagationReporter propagationReporter = ApplicationContextProvider.getBeanFactory().\n-                getBean(PropagationReporter.class);\n+        // Generate propagation tasks for deleting this group from resources\n+        tasks.addAll(propagationManager.getDeleteTasks(\n+                AnyTypeKind.GROUP,\n+                key,\n+                null,\n+                null));\n+\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -213,9 +237,14 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n-\n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(wfResult, null, null);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.GROUP,\n+                key,\n+                false,\n+                null,\n+                propByRes,\n+                null,\n+                null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -229,12 +258,14 @@ public List<PropagationStatus> provision(final Long key, final Collection<String\n \n     @Override\n     public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n-        Group group = groupDAO.authFind(key);\n-\n-        Collection<String> noPropResourceName = CollectionUtils.removeAll(group.getResourceNames(), resources);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupDeleteTasks(\n-                key, new HashSet<>(resources), noPropResourceName);\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.GROUP,\n+                key,\n+                propByRes,\n+                CollectionUtils.removeAll(groupDAO.authFind(key).getResourceNames(), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"4a302f297601001085c0e4ba45166da9703ff251","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":24,"deletions":10,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -98,9 +98,9 @@ public Pair<Long, List<PropagationStatus>> create(final UserTO userTO, final boo\n \n         List<PropagationTask> tasks = propagationManager.getUserCreateTasks(\n                 created.getResult().getKey(),\n+                userTO.getPassword(),\n                 created.getResult().getValue(),\n                 created.getPropByRes(),\n-                userTO.getPassword(),\n                 userTO.getVirAttrs(),\n                 excludedResources);\n         PropagationReporter propagationReporter =\n@@ -122,7 +122,7 @@ public Pair<Long, List<PropagationStatus>> update(final UserPatch userPatch) {\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n                     updated.getResult().getKey().getKey(),\n                     AnyTypeKind.USER,\n                     userPatch.getVirAttrs());\n@@ -209,13 +209,19 @@ public List<PropagationStatus> delete(final Long key) {\n \n     @Override\n     public List<PropagationStatus> delete(final Long key, final Set<String> excludedResources) {\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(userDAO.authFind(key)));\n+\n         // Note here that we can only notify about \"delete\", not any other\n         // task defined in workflow process definition: this because this\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(key, excludedResources);\n-\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.USER,\n+                key,\n+                propByRes,\n+                excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -276,8 +282,14 @@ protected List<PropagationStatus> propagateStatus(final StatusPatch statusPatch)\n         Collection<String> noPropResourceNames = CollectionUtils.removeAll(\n                 userDAO.findAllResourceNames(userDAO.find(statusPatch.getKey())), statusPatch.getResources());\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                statusPatch.getKey(), statusPatch.getType() != StatusPatchType.SUSPEND, noPropResourceNames);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.USER,\n+                statusPatch.getKey(),\n+                false,\n+                statusPatch.getType() != StatusPatchType.SUSPEND,\n+                null,\n+                null,\n+                noPropResourceNames);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {\n@@ -352,12 +364,14 @@ public StringPatchItem transform(final String input) {\n \n     @Override\n     public List<PropagationStatus> deprovision(final Long key, final Collection<String> resources) {\n-        User user = userDAO.authFind(key);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.USER,\n                 key,\n-                new HashSet<>(resources),\n-                CollectionUtils.removeAll(userDAO.findAllResourceNames(user), resources));\n+                propByRes,\n+                CollectionUtils.removeAll(userDAO.findAllResourceNames(userDAO.authFind(key)), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"3907700c2200537723dd14195f63ec8687bf69a6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":52,"deletions":52,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -144,7 +144,55 @@ private Iterable<? extends ExternalResource> getAllResources(final Any<?, ?, ?>\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n     @Override\n-    public PropagationByResource fillVirtual(final Any any, final Set<AttrPatch> vAttrs) {\n+    public void createVirtual(final Any any, final Collection<AttrTO> vAttrs) {\n+        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n+\n+        for (AttrTO attrTO : vAttrs) {\n+            VirAttr virAttr = any.getVirAttr(attrTO.getSchema());\n+            if (virAttr == null) {\n+                VirSchema virSchema = getVirSchema(attrTO.getSchema());\n+                if (virSchema != null) {\n+                    virAttr = anyUtils.newVirAttr();\n+                    virAttr.setSchema(virSchema);\n+                    if (virAttr.getSchema() == null) {\n+                        LOG.debug(\"Ignoring {} because no valid schema was found\", attrTO);\n+                    } else {\n+                        virAttr.setOwner(any);\n+                        any.add(virAttr);\n+                        virAttr.getValues().clear();\n+                        virAttr.getValues().addAll(attrTO.getValues());\n+                    }\n+                }\n+            } else {\n+                virAttr.getValues().clear();\n+                virAttr.getValues().addAll(attrTO.getValues());\n+            }\n+        }\n+    }\n+\n+    private Any<?, ?, ?> find(final Long key, final AnyTypeKind anyTypeKind) {\n+        Any<?, ?, ?> result;\n+\n+        switch (anyTypeKind) {\n+            case USER:\n+                result = userDAO.authFind(key);\n+                break;\n+\n+            case GROUP:\n+                result = groupDAO.authFind(key);\n+                break;\n+\n+            case ANY_OBJECT:\n+            default:\n+                result = anyObjectDAO.authFind(key);\n+        }\n+\n+        return result;\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @Override\n+    public PropagationByResource updateVirtual(final Any any, final Collection<AttrPatch> vAttrs) {\n         AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n \n         PropagationByResource propByRes = new PropagationByResource();\n@@ -209,60 +257,12 @@ public PropagationByResource fillVirtual(final Any any, final Set<AttrPatch> vAt\n         return propByRes;\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    @Override\n-    public void fillVirtual(final Any any, final Collection<AttrTO> vAttrs) {\n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(any);\n-\n-        for (AttrTO attrTO : vAttrs) {\n-            VirAttr virAttr = any.getVirAttr(attrTO.getSchema());\n-            if (virAttr == null) {\n-                VirSchema virSchema = getVirSchema(attrTO.getSchema());\n-                if (virSchema != null) {\n-                    virAttr = anyUtils.newVirAttr();\n-                    virAttr.setSchema(virSchema);\n-                    if (virAttr.getSchema() == null) {\n-                        LOG.debug(\"Ignoring {} because no valid schema was found\", attrTO);\n-                    } else {\n-                        virAttr.setOwner(any);\n-                        any.add(virAttr);\n-                        virAttr.getValues().clear();\n-                        virAttr.getValues().addAll(attrTO.getValues());\n-                    }\n-                }\n-            } else {\n-                virAttr.getValues().clear();\n-                virAttr.getValues().addAll(attrTO.getValues());\n-            }\n-        }\n-    }\n-\n-    private Any<?, ?, ?> find(final Long key, final AnyTypeKind anyTypeKind) {\n-        Any<?, ?, ?> result;\n-\n-        switch (anyTypeKind) {\n-            case USER:\n-                result = userDAO.authFind(key);\n-                break;\n-\n-            case GROUP:\n-                result = groupDAO.authFind(key);\n-                break;\n-\n-            case ANY_OBJECT:\n-            default:\n-                result = anyObjectDAO.authFind(key);\n-        }\n-\n-        return result;\n-    }\n-\n     @Transactional\n     @Override\n-    public PropagationByResource fillVirtual(\n-            final Long key, final AnyTypeKind anyTypeKind, final Set<AttrPatch> vAttrs) {\n+    public PropagationByResource updateVirtual(\n+            final Long key, final AnyTypeKind anyTypeKind, final Collection<AttrPatch> vAttrs) {\n \n-        return fillVirtual(find(key, anyTypeKind), vAttrs);\n+        return updateVirtual(find(key, anyTypeKind), vAttrs);\n     }\n \n     @Override"},{"sha":"2568f45ead090a123991ac375d1da0174654bc46","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -591,7 +591,7 @@ protected void fill(\n             scce.addException(requiredValuesMissing);\n         }\n \n-        virAttrHander.fillVirtual(any, anyTO.getVirAttrs());\n+        virAttrHander.createVirtual(any, anyTO.getVirAttrs());\n \n         // 4. realm & resources\n         Realm realm = realmDAO.find(anyTO.getRealm());"},{"sha":"d656bac5ad2eb62fef93bbb96b0cedb18b87328a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":75,"deletions":148,"changes":223,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -41,7 +42,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -50,9 +50,9 @@\n import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.misc.MappingUtils;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -106,72 +106,62 @@ public class PropagationManagerImpl implements PropagationManager {\n     @Autowired\n     protected VirAttrHandler virAttrHandler;\n \n-    @Override\n-    public List<PropagationTask> getAnyObjectCreateTasks(\n-            final WorkflowResult<Long> wfResult,\n-            final Collection<AttrTO> vAttrs,\n-            final Collection<String> noPropResourceNames) {\n+    protected Any<?, ?, ?> find(final AnyTypeKind kind, final Long key) {\n+        AnyDAO<? extends Any<?, ?, ?>> dao;\n+        switch (kind) {\n+            case ANY_OBJECT:\n+                dao = anyObjectDAO;\n+                break;\n \n-        return getAnyObjectCreateTasks(wfResult.getResult(), vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getAnyObjectCreateTasks(\n-            final Long key,\n-            final Collection<AttrTO> vAttrs,\n-            final PropagationByResource propByRes,\n-            final Collection<String> noPropResourceNames) {\n+            case GROUP:\n+                dao = groupDAO;\n+                break;\n \n-        AnyObject anyObject = anyObjectDAO.authFind(key);\n-        if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.fillVirtual(anyObject, vAttrs);\n+            case USER:\n+            default:\n+                dao = userDAO;\n         }\n \n-        return getCreateTaskIds(anyObject, null, null, propByRes, noPropResourceNames);\n+        return dao.authFind(key);\n     }\n \n     @Override\n-    public List<PropagationTask> getUserCreateTasks(\n+    public List<PropagationTask> getCreateTasks(\n+            final AnyTypeKind kind,\n             final Long key,\n-            final Boolean enable,\n             final PropagationByResource propByRes,\n-            final String password,\n             final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        User user = userDAO.authFind(key);\n+        Any<?, ?, ?> any = find(kind, key);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.fillVirtual(user, vAttrs);\n+            virAttrHandler.createVirtual(any, vAttrs);\n         }\n-        return getCreateTaskIds(user, password, enable, propByRes, noPropResourceNames);\n-    }\n \n-    @Override\n-    public List<PropagationTask> getGroupCreateTasks(\n-            final WorkflowResult<Long> wfResult,\n-            final Collection<AttrTO> vAttrs,\n-            final Collection<String> noPropResourceNames) {\n-\n-        return getGroupCreateTasks(wfResult.getResult(), vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n+        return getCreateTasks(any, null, null, propByRes, noPropResourceNames);\n     }\n \n     @Override\n-    public List<PropagationTask> getGroupCreateTasks(\n+    public List<PropagationTask> getUserCreateTasks(\n             final Long key,\n-            final Collection<AttrTO> vAttrs,\n+            final String password,\n+            final Boolean enable,\n             final PropagationByResource propByRes,\n+            final Collection<AttrTO> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        Group group = groupDAO.authFind(key);\n+        User user = userDAO.authFind(key);\n         if (vAttrs != null && !vAttrs.isEmpty()) {\n-            virAttrHandler.fillVirtual(group, vAttrs);\n+            virAttrHandler.createVirtual(user, vAttrs);\n         }\n \n-        return getCreateTaskIds(group, null, null, propByRes, noPropResourceNames);\n+        return getCreateTasks(user, password, enable, propByRes, noPropResourceNames);\n     }\n \n-    protected List<PropagationTask> getCreateTaskIds(final Any<?, ?, ?> any,\n-            final String password, final Boolean enable,\n+    protected List<PropagationTask> getCreateTasks(\n+            final Any<?, ?, ?> any,\n+            final String password,\n+            final Boolean enable,\n             final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames) {\n \n@@ -187,43 +177,33 @@ protected List<PropagationTask> getCreateTaskIds(final Any<?, ?, ?> any,\n     }\n \n     @Override\n-    public List<PropagationTask> getAnyObjectUpdateTasks(\n-            final WorkflowResult<Long> wfResult,\n-            final Set<AttrPatch> vAttrs,\n-            final Set<String> noPropResourceNames) {\n-\n-        AnyObject anyObject = anyObjectDAO.authFind(wfResult.getResult());\n-        return getUpdateTasks(anyObject, null, false, null,\n-                vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getUserUpdateTasks(final Long key, final Boolean enable,\n+    public List<PropagationTask> getUpdateTasks(\n+            final AnyTypeKind kind,\n+            final Long key,\n+            final boolean changePwd,\n+            final Boolean enable,\n+            final PropagationByResource propByRes,\n+            final Collection<AttrPatch> vAttrs,\n             final Collection<String> noPropResourceNames) {\n \n-        return getUpdateTasks(\n-                userDAO.find(key), // user to be updated on external resources\n-                null, // no password\n-                false,\n-                enable, // status to be propagated\n-                Collections.<AttrPatch>emptySet(), // no virtual attributes to be managed\n-                null, // no propagation by resources\n-                noPropResourceNames);\n+        return getUpdateTasks(find(kind, key), null, changePwd, enable, propByRes, vAttrs, noPropResourceNames);\n     }\n \n     @Override\n-    public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n-            final boolean changePwd, final Collection<String> noPropResourceNames) {\n+    public List<PropagationTask> getUserUpdateTasks(\n+            final WorkflowResult<Pair<UserPatch, Boolean>> wfResult,\n+            final boolean changePwd,\n+            final Collection<String> noPropResourceNames) {\n \n-        User user = userDAO.authFind(wfResult.getResult().getKey().getKey());\n-        return getUpdateTasks(user,\n+        return getUpdateTasks(\n+                userDAO.authFind(wfResult.getResult().getKey().getKey()),\n                 wfResult.getResult().getKey().getPassword() == null\n                         ? null\n                         : wfResult.getResult().getKey().getPassword().getValue(),\n                 changePwd,\n                 wfResult.getResult().getValue(),\n-                wfResult.getResult().getKey().getVirAttrs(),\n                 wfResult.getPropByRes(),\n+                wfResult.getResult().getKey().getVirAttrs(),\n                 noPropResourceNames);\n     }\n \n@@ -274,24 +254,18 @@ public String transform(final StringPatchItem input) {\n         return tasks;\n     }\n \n-    @Override\n-    public List<PropagationTask> getGroupUpdateTasks(final WorkflowResult<Long> wfResult,\n-            final Set<AttrPatch> vAttrs, final Set<String> noPropResourceNames) {\n-\n-        Group group = groupDAO.authFind(wfResult.getResult());\n-        return getUpdateTasks(group, null, false, null,\n-                vAttrs, wfResult.getPropByRes(), noPropResourceNames);\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getUpdateTasks(final Any<?, ?, ?> any,\n-            final String password, final boolean changePwd, final Boolean enable, final Set<AttrPatch> vAttrs,\n-            final PropagationByResource propByRes, final Collection<String> noPropResourceNames) {\n+    protected List<PropagationTask> getUpdateTasks(\n+            final Any<?, ?, ?> any,\n+            final String password,\n+            final boolean changePwd,\n+            final Boolean enable,\n+            final PropagationByResource propByRes,\n+            final Collection<AttrPatch> vAttrs,\n+            final Collection<String> noPropResourceNames) {\n \n-        PropagationByResource localPropByRes = virAttrHandler.fillVirtual(\n-                any, vAttrs == null\n-                        ? Collections.<AttrPatch>emptySet()\n-                        : vAttrs);\n+        PropagationByResource localPropByRes = virAttrHandler.updateVirtual(\n+                any,\n+                vAttrs == null ? Collections.<AttrPatch>emptySet() : vAttrs);\n \n         if (propByRes == null || propByRes.isEmpty()) {\n             localPropByRes.addAll(ResourceOperation.UPDATE, any.getResourceNames());\n@@ -315,81 +289,34 @@ public List<PropagationTask> getUpdateTasks(final Any<?, ?, ?> any,\n     }\n \n     @Override\n-    public List<PropagationTask> getAnyObjectDeleteTasks(final Long anyObjectKey) {\n-        return getAnyObjectDeleteTasks(anyObjectKey, Collections.<String>emptySet());\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getAnyObjectDeleteTasks(final Long anyObjectKey, final String noPropResourceName) {\n-        return getAnyObjectDeleteTasks(anyObjectKey, Collections.<String>singleton(noPropResourceName));\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getAnyObjectDeleteTasks(\n-            final Long anyObjectKey, final Collection<String> noPropResourceNames) {\n-\n-        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n-        return getDeleteTaskIds(anyObject, anyObject.getResourceNames(), noPropResourceNames);\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getAnyObjectDeleteTasks(\n-            final Long groupKey, final Set<String> resourceNames, final Collection<String> noPropResourceNames) {\n-\n-        AnyObject anyObject = anyObjectDAO.authFind(groupKey);\n-        return getDeleteTaskIds(anyObject, resourceNames, noPropResourceNames);\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getUserDeleteTasks(final Long userKey, final Collection<String> noPropResourceNames) {\n-        User user = userDAO.authFind(userKey);\n-        return getDeleteTaskIds(user, userDAO.findAllResourceNames(user), noPropResourceNames);\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getUserDeleteTasks(\n-            final Long userKey, final Set<String> resourceNames, final Collection<String> noPropResourceNames) {\n-\n-        User user = userDAO.authFind(userKey);\n-        return getDeleteTaskIds(user, resourceNames, noPropResourceNames);\n-    }\n-\n-    @Override\n-    public List<PropagationTask> getGroupDeleteTasks(final Long groupKey) {\n-        return getGroupDeleteTasks(groupKey, Collections.<String>emptySet());\n-    }\n+    public List<PropagationTask> getDeleteTasks(\n+            final AnyTypeKind kind,\n+            final Long key,\n+            final PropagationByResource propByRes,\n+            final Collection<String> noPropResourceNames) {\n \n-    @Override\n-    public List<PropagationTask> getGroupDeleteTasks(final Long groupKey, final String noPropResourceName) {\n-        return getGroupDeleteTasks(groupKey, Collections.<String>singleton(noPropResourceName));\n-    }\n+        Any<?, ?, ?> any = find(kind, key);\n \n-    @Override\n-    public List<PropagationTask> getGroupDeleteTasks(\n-            final Long groupKey, final Collection<String> noPropResourceNames) {\n+        PropagationByResource localPropByRes = new PropagationByResource();\n \n-        Group group = groupDAO.authFind(groupKey);\n-        return getDeleteTaskIds(group, group.getResourceNames(), noPropResourceNames);\n-    }\n+        if (propByRes == null || propByRes.isEmpty()) {\n+            localPropByRes.addAll(ResourceOperation.DELETE, any.getResourceNames());\n+        } else {\n+            localPropByRes.merge(propByRes);\n+        }\n \n-    @Override\n-    public List<PropagationTask> getGroupDeleteTasks(\n-            final Long groupKey, final Set<String> resourceNames, final Collection<String> noPropResourceNames) {\n+        if (noPropResourceNames != null) {\n+            localPropByRes.removeAll(noPropResourceNames);\n+        }\n \n-        Group group = groupDAO.authFind(groupKey);\n-        return getDeleteTaskIds(group, resourceNames, noPropResourceNames);\n+        return getDeleteTasks(any, localPropByRes, noPropResourceNames);\n     }\n \n-    protected List<PropagationTask> getDeleteTaskIds(\n+    protected List<PropagationTask> getDeleteTasks(\n             final Any<?, ?, ?> any,\n-            final Collection<String> resourceNames,\n+            final PropagationByResource propByRes,\n             final Collection<String> noPropResourceNames) {\n \n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.DELETE, resourceNames);\n-        if (noPropResourceNames != null && !noPropResourceNames.isEmpty()) {\n-            propByRes.get(ResourceOperation.DELETE).removeAll(noPropResourceNames);\n-        }\n         return createTasks(any, null, false, null, false, true, propByRes);\n     }\n "},{"sha":"8aa37d3335ba1632da4c792c54833efd7af04a3a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":99,"deletions":19,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -20,11 +20,15 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n@@ -47,10 +51,12 @@\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.TimeoutException;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.sync.SyncopePushResultHandler;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n import org.quartz.JobExecutionException;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -60,19 +66,87 @@ public abstract class AbstractPushResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract String getName(Any<?, ?, ?> any);\n \n-    protected abstract Any<?, ?, ?> getAny(long key);\n+    protected void deprovision(final Any<?, ?, ?> any) {\n+        AnyTO before = getAnyTO(any.getKey());\n \n-    protected abstract Any<?, ?, ?> deprovision(Any<?, ?, ?> sbj);\n+        List<String> noPropResources = new ArrayList<>(before.getResources());\n+        noPropResources.remove(profile.getTask().getResource().getKey());\n \n-    protected abstract Any<?, ?, ?> provision(Any<?, ?, ?> sbj, Boolean enabled);\n+        taskExecutor.execute(propagationManager.getDeleteTasks(\n+                any.getType().getKind(),\n+                any.getKey(),\n+                null,\n+                noPropResources));\n+    }\n \n-    protected abstract Any<?, ?, ?> link(Any<?, ?, ?> sbj, Boolean unlink);\n+    protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n+        AnyTO before = getAnyTO(any.getKey());\n \n-    protected abstract Any<?, ?, ?> unassign(Any<?, ?, ?> sbj);\n+        List<String> noPropResources = new ArrayList<>(before.getResources());\n+        noPropResources.remove(profile.getTask().getResource().getKey());\n \n-    protected abstract Any<?, ?, ?> assign(Any<?, ?, ?> sbj, Boolean enabled);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n+\n+        taskExecutor.execute(propagationManager.getCreateTasks(\n+                any.getType().getKind(),\n+                any.getKey(),\n+                propByRes,\n+                before.getVirAttrs(),\n+                noPropResources));\n+    }\n \n-    protected abstract ConnectorObject getRemoteObject(String connObjectKey, ObjectClass objectClass);\n+    @SuppressWarnings(\"unchecked\")\n+    protected void link(final Any<?, ?, ?> any, final Boolean unlink) {\n+        AnyPatch patch = newPatch(any.getKey());\n+        patch.getResources().add(new StringPatchItem.Builder().\n+                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        update(patch);\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    protected void unassign(final Any<?, ?, ?> any) {\n+        AnyPatch patch = newPatch(any.getKey());\n+        patch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.DELETE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        update(patch);\n+\n+        deprovision(any);\n+    }\n+\n+    protected void assign(final Any<?, ?, ?> any, final Boolean enabled) {\n+        AnyPatch patch = newPatch(any.getKey());\n+        patch.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        update(patch);\n+\n+        provision(any, enabled);\n+    }\n+\n+    protected ConnectorObject getRemoteObject(final String connObjectKey, final ObjectClass objectClass) {\n+        ConnectorObject obj = null;\n+        try {\n+            Uid uid = new Uid(connObjectKey);\n+\n+            obj = profile.getConnector().getObject(\n+                    objectClass,\n+                    uid,\n+                    profile.getConnector().getOperationOptions(Collections.<MappingItem>emptySet()));\n+        } catch (TimeoutException toe) {\n+            LOG.debug(\"Request timeout\", toe);\n+            throw toe;\n+        } catch (RuntimeException ignore) {\n+            LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n+        }\n+\n+        return obj;\n+    }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW)\n     @Override\n@@ -328,11 +402,11 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         }\n     }\n \n-    protected Any<?, ?, ?> update(final Any<?, ?, ?> sbj, final Boolean enabled) {\n+    protected Any<?, ?, ?> update(final Any<?, ?, ?> any, final Boolean enabled) {\n         Set<AttrPatch> vattrs = new HashSet<>();\n \n         // Search for all mapped vattrs\n-        Mapping mapping = profile.getTask().getResource().getProvision(sbj.getType()).getMapping();\n+        Mapping mapping = profile.getTask().getResource().getProvision(any.getType()).getMapping();\n         for (MappingItem mappingItem : mapping.getItems()) {\n             if (mappingItem.getIntMappingType() == IntMappingType.UserVirtualSchema) {\n                 vattrs.add(new AttrPatch.Builder().\n@@ -345,7 +419,7 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         // Search for all user's vattrs and:\n         // 1. add mapped vattrs not owned by the user to the set of vattrs to be removed\n         // 2. add all vattrs owned by the user to the set of vattrs to be update\n-        for (VirAttr<?> vattr : sbj.getVirAttrs()) {\n+        for (VirAttr<?> vattr : any.getVirAttrs()) {\n             vattrs.add(new AttrPatch.Builder().\n                     operation(PatchOperation.ADD_REPLACE).\n                     attrTO(new AttrTO.Builder().\n@@ -357,15 +431,15 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n \n         boolean changepwd;\n         Collection<String> resourceNames;\n-        if (sbj instanceof User) {\n+        if (any instanceof User) {\n             changepwd = true;\n-            resourceNames = userDAO.findAllResourceNames((User) sbj);\n-        } else if (sbj instanceof AnyObject) {\n-            changepwd = true;\n-            resourceNames = anyObjectDAO.findAllResourceNames((AnyObject) sbj);\n+            resourceNames = userDAO.findAllResourceNames((User) any);\n+        } else if (any instanceof AnyObject) {\n+            changepwd = false;\n+            resourceNames = anyObjectDAO.findAllResourceNames((AnyObject) any);\n         } else {\n             changepwd = false;\n-            resourceNames = ((Group) sbj).getResourceNames();\n+            resourceNames = ((Group) any).getResourceNames();\n         }\n \n         List<String> noPropResources = new ArrayList<>(resourceNames);\n@@ -375,8 +449,14 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n         propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n \n         taskExecutor.execute(propagationManager.getUpdateTasks(\n-                sbj, null, changepwd, enabled, vattrs, propByRes, noPropResources));\n-\n-        return getAny(sbj.getKey());\n+                any.getType().getKind(),\n+                any.getKey(),\n+                changepwd,\n+                null,\n+                propByRes,\n+                vattrs,\n+                noPropResources));\n+\n+        return getAny(any.getKey());\n     }\n }"},{"sha":"30d287930868f67d2efc359c6d69f7179d604b09","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":66,"deletions":20,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -23,10 +23,14 @@\n import java.util.List;\n import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n@@ -36,6 +40,7 @@\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeSyncResultHandler;\n@@ -54,15 +59,56 @@ public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHan\n \n     protected abstract String getName(AnyTO anyTO);\n \n+    protected abstract ProvisioningManager<?, ?> getProvisioningManager();\n+\n     protected abstract AnyTO doCreate(AnyTO anyTO, SyncDelta delta, ProvisioningResult result);\n \n-    protected abstract AnyTO doLink(AnyTO before, ProvisioningResult result, boolean unlink);\n+    protected AnyTO doLink(final AnyTO before, final boolean unlink) {\n+        AnyPatch patch = newPatch(before.getKey());\n+        patch.setKey(before.getKey());\n+        patch.getResources().add(new StringPatchItem.Builder().\n+                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n+                value(profile.getTask().getResource().getKey()).build());\n+\n+        return getAnyTO(update(patch).getResult());\n+    }\n \n     protected abstract AnyTO doUpdate(AnyTO before, AnyPatch anyPatch, SyncDelta delta, ProvisioningResult result);\n \n-    protected abstract void doDeprovision(Long key, boolean unlink);\n+    protected void doDeprovision(final AnyTypeKind kind, final Long key, final boolean unlink) {\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n+        taskExecutor.execute(propagationManager.getDeleteTasks(\n+                kind,\n+                key,\n+                propByRes,\n+                null));\n+\n+        if (unlink) {\n+            AnyPatch anyObjectPatch = newPatch(key);\n+            anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.DELETE).\n+                    value(profile.getTask().getResource().getKey()).build());\n+        }\n+    }\n \n-    protected abstract void doDelete(Long key);\n+    protected void doDelete(final AnyTypeKind kind, final Long key) {\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.add(ResourceOperation.DELETE, profile.getTask().getResource().getKey());\n+        try {\n+            taskExecutor.execute(propagationManager.getDeleteTasks(\n+                    kind,\n+                    key,\n+                    propByRes,\n+                    null));\n+        } catch (Exception e) {\n+            // A propagation failure doesn't imply a synchronization failure.\n+            // The propagation exception status will be reported into the propagation task execution.\n+            LOG.error(\"Could not propagate anyObject \" + key, e);\n+        }\n+\n+        getProvisioningManager().delete(key);\n+    }\n \n     @Override\n     public boolean handle(final SyncDelta delta) {\n@@ -313,8 +359,8 @@ protected List<ProvisioningResult> deprovision(\n \n         final List<ProvisioningResult> updResults = new ArrayList<>();\n \n-        for (Long id : anys) {\n-            LOG.debug(\"About to unassign resource {}\", id);\n+        for (Long key : anys) {\n+            LOG.debug(\"About to unassign resource {}\", key);\n \n             Object output;\n             Result resultStatus;\n@@ -323,13 +369,13 @@ protected List<ProvisioningResult> deprovision(\n             result.setOperation(ResourceOperation.DELETE);\n             result.setAnyType(provision.getAnyType().getKey());\n             result.setStatus(ProvisioningResult.Status.SUCCESS);\n-            result.setKey(id);\n+            result.setKey(key);\n \n-            AnyTO before = getAnyTO(id);\n+            AnyTO before = getAnyTO(key);\n \n             if (before == null) {\n                 result.setStatus(ProvisioningResult.Status.FAILURE);\n-                result.setMessage(String.format(\"Any '%s(%d)' not found\", provision.getAnyType().getKey(), id));\n+                result.setMessage(String.format(\"Any '%s(%d)' not found\", provision.getAnyType().getKey(), key));\n             }\n \n             if (!profile.isDryRun()) {\n@@ -350,15 +396,15 @@ protected List<ProvisioningResult> deprovision(\n                             }\n                         }\n \n-                        doDeprovision(id, unlink);\n-                        output = getAnyTO(id);\n+                        doDeprovision(provision.getAnyType().getKind(), key, unlink);\n+                        output = getAnyTO(key);\n \n                         for (SyncActions action : profile.getActions()) {\n                             action.after(this.getProfile(), delta, AnyTO.class.cast(output), result);\n                         }\n \n                         resultStatus = Result.SUCCESS;\n-                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType().getKey(), id);\n+                        LOG.debug(\"{} {} successfully updated\", provision.getAnyType().getKey(), key);\n                     } catch (IgnoreProvisionException e) {\n                         throw e;\n                     } catch (PropagationException e) {\n@@ -448,7 +494,7 @@ protected List<ProvisioningResult> link(\n                             }\n                         }\n \n-                        output = doLink(before, result, unlink);\n+                        output = doLink(before, unlink);\n \n                         for (SyncActions action : profile.getActions()) {\n                             action.after(this.getProfile(), delta, AnyTO.class.cast(output), result);\n@@ -507,16 +553,16 @@ protected List<ProvisioningResult> delete(\n         List<ProvisioningResult> delResults = new ArrayList<>();\n \n         SyncDelta workingDelta = delta;\n-        for (Long id : anys) {\n+        for (Long key : anys) {\n             Object output;\n             Result resultStatus = Result.FAILURE;\n \n             ProvisioningResult result = new ProvisioningResult();\n \n             try {\n-                AnyTO before = getAnyTO(id);\n+                AnyTO before = getAnyTO(key);\n \n-                result.setKey(id);\n+                result.setKey(key);\n                 result.setName(getName(before));\n                 result.setOperation(ResourceOperation.DELETE);\n                 result.setAnyType(provision.getAnyType().getKey());\n@@ -528,7 +574,7 @@ protected List<ProvisioningResult> delete(\n                     }\n \n                     try {\n-                        doDelete(id);\n+                        doDelete(provision.getAnyType().getKind(), key);\n                         output = null;\n                         resultStatus = Result.SUCCESS;\n \n@@ -540,7 +586,7 @@ protected List<ProvisioningResult> delete(\n                     } catch (Exception e) {\n                         result.setStatus(ProvisioningResult.Status.FAILURE);\n                         result.setMessage(ExceptionUtils.getRootCauseMessage(e));\n-                        LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), id, e);\n+                        LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), key, e);\n                         output = e;\n \n                         for (SyncActions action : profile.getActions()) {\n@@ -553,11 +599,11 @@ protected List<ProvisioningResult> delete(\n \n                 delResults.add(result);\n             } catch (NotFoundException e) {\n-                LOG.error(\"Could not find {} {}\", provision.getAnyType().getKey(), id, e);\n+                LOG.error(\"Could not find {} {}\", provision.getAnyType().getKey(), key, e);\n             } catch (DelegatedAdministrationException e) {\n-                LOG.error(\"Not allowed to read {} {}\", provision.getAnyType().getKey(), id, e);\n+                LOG.error(\"Not allowed to read {} {}\", provision.getAnyType().getKey(), key, e);\n             } catch (Exception e) {\n-                LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), id, e);\n+                LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), key, e);\n             }\n         }\n "},{"sha":"2527d5fa3699ad0edbfb933f4e247da4b9c07c1a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncopeResultHandler.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncopeResultHandler.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -33,9 +34,11 @@\n import org.apache.syncope.core.misc.AuditManager;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningActions;\n@@ -134,6 +137,12 @@\n \n     protected abstract AnyTO getAnyTO(long key);\n \n+    protected abstract Any<?, ?, ?> getAny(long key);\n+\n+    protected abstract AnyPatch newPatch(final long key);\n+\n+    protected abstract WorkflowResult<Long> update(AnyPatch patch);\n+\n     @Override\n     public void setProfile(final ProvisioningProfile<T, A> profile) {\n         this.profile = profile;"},{"sha":"755e818487fbe9e2d022fb64580f9dc02394c810","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectPushResultHandlerImpl.java","status":"modified","additions":16,"deletions":110,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectPushResultHandlerImpl.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -18,120 +18,28 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.provisioning.api.TimeoutException;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.sync.AnyObjectPushResultHandler;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.Uid;\n \n public class AnyObjectPushResultHandlerImpl extends AbstractPushResultHandler implements AnyObjectPushResultHandler {\n \n     @Override\n     protected AnyUtils getAnyUtils() {\n-        return anyUtilsFactory.getInstance(AnyTypeKind.GROUP);\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> deprovision(final Any<?, ?, ?> sbj) {\n-        AnyObjectTO before = anyObjectDataBinder.getAnyObjectTO(AnyObject.class.cast(sbj), true);\n-\n-        List<String> noPropResources = new ArrayList<>(before.getResources());\n-        noPropResources.remove(profile.getTask().getResource().getKey());\n-\n-        taskExecutor.execute(propagationManager.getAnyObjectDeleteTasks(before.getKey(), noPropResources));\n-\n-        return anyObjectDAO.authFind(before.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> provision(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        AnyObjectTO before = anyObjectDataBinder.getAnyObjectTO(AnyObject.class.cast(sbj), true);\n-\n-        List<String> noPropResources = new ArrayList<>(before.getResources());\n-        noPropResources.remove(profile.getTask().getResource().getKey());\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n-\n-        taskExecutor.execute(propagationManager.getAnyObjectCreateTasks(\n-                before.getKey(),\n-                Collections.unmodifiableCollection(before.getVirAttrs()),\n-                propByRes,\n-                noPropResources));\n-\n-        return anyObjectDAO.authFind(before.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> link(final Any<?, ?, ?> sbj, final Boolean unlink) {\n-        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n-        anyObjectPatch.setKey(sbj.getKey());\n-        anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        awfAdapter.update(anyObjectPatch);\n-\n-        return anyObjectDAO.authFind(sbj.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> unassign(final Any<?, ?, ?> sbj) {\n-        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n-        anyObjectPatch.setKey(sbj.getKey());\n-        anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.DELETE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        awfAdapter.update(anyObjectPatch);\n-\n-        return deprovision(sbj);\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> assign(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n-        anyObjectPatch.setKey(sbj.getKey());\n-        anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        awfAdapter.update(anyObjectPatch);\n-\n-        return provision(sbj, enabled);\n+        return anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT);\n     }\n \n     @Override\n     protected String getName(final Any<?, ?, ?> any) {\n         return StringUtils.EMPTY;\n     }\n \n-    @Override\n-    protected AnyTO getAnyTO(final long key) {\n-        try {\n-            return anyObjectDataBinder.getAnyObjectTO(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving user {}\", key, e);\n-            return null;\n-        }\n-    }\n-\n     @Override\n     protected Any<?, ?, ?> getAny(final long key) {\n         try {\n@@ -143,22 +51,20 @@ protected AnyTO getAnyTO(final long key) {\n     }\n \n     @Override\n-    protected ConnectorObject getRemoteObject(final String connObjectKey, final ObjectClass objectClass) {\n-        ConnectorObject obj = null;\n-        try {\n-            Uid uid = new Uid(connObjectKey);\n+    protected AnyTO getAnyTO(final long key) {\n+        return anyObjectDataBinder.getAnyObjectTO(key);\n+    }\n \n-            obj = profile.getConnector().getObject(\n-                    objectClass,\n-                    uid,\n-                    profile.getConnector().getOperationOptions(Collections.<MappingItem>emptySet()));\n-        } catch (TimeoutException toe) {\n-            LOG.debug(\"Request timeout\", toe);\n-            throw toe;\n-        } catch (RuntimeException ignore) {\n-            LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n-        }\n+    @Override\n+    protected AnyPatch newPatch(final long key) {\n+        AnyObjectPatch patch = new AnyObjectPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n \n-        return obj;\n+    @Override\n+    protected WorkflowResult<Long> update(final AnyPatch patch) {\n+        return awfAdapter.update((AnyObjectPatch) patch);\n     }\n+\n }"},{"sha":"02f0b6764b714bab6d1179e29a76e350bca8db71","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AnyObjectSyncResultHandlerImpl.java","status":"modified","additions":28,"deletions":50,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAnyObjectSyncResultHandlerImpl.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -24,13 +24,14 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.AnyObjectSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n@@ -48,43 +49,48 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected AnyTO getAnyTO(final long key) {\n+    protected ProvisioningManager<?, ?> getProvisioningManager() {\n+        return anyObjectProvisioningManager;\n+    }\n+\n+    @Override\n+    protected Any<?, ?, ?> getAny(final long key) {\n         try {\n-            return anyObjectDataBinder.getAnyObjectTO(key);\n+            return anyObjectDAO.authFind(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving anyObject {}\", key, e);\n             return null;\n         }\n     }\n \n+    @Override\n+    protected AnyTO getAnyTO(final long key) {\n+        return anyObjectDataBinder.getAnyObjectTO(key);\n+    }\n+\n+    @Override\n+    protected AnyPatch newPatch(final long key) {\n+        AnyObjectPatch patch = new AnyObjectPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n+\n+    @Override\n+    protected WorkflowResult<Long> update(final AnyPatch patch) {\n+        return awfAdapter.update((AnyObjectPatch) patch);\n+    }\n+\n     @Override\n     protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningResult result) {\n         AnyObjectTO anyObjectTO = AnyObjectTO.class.cast(anyTO);\n \n         Map.Entry<Long, List<PropagationStatus>> created = anyObjectProvisioningManager.create(\n                 anyObjectTO, Collections.singleton(profile.getTask().getResource().getKey()));\n \n-        anyObjectTO = anyObjectDataBinder.getAnyObjectTO(created.getKey());\n-\n         result.setKey(created.getKey());\n         result.setName(getName(anyTO));\n \n-        return anyObjectTO;\n-    }\n-\n-    @Override\n-    protected AnyTO doLink(\n-            final AnyTO before,\n-            final ProvisioningResult result,\n-            final boolean unlink) {\n-\n-        AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n-        anyObjectPatch.setKey(before.getKey());\n-        anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        return anyObjectDataBinder.getAnyObjectTO(awfAdapter.update(anyObjectPatch).getResult());\n+        return getAnyTO(created.getKey());\n     }\n \n     @Override\n@@ -102,32 +108,4 @@ protected AnyTO doUpdate(\n         result.setName(getName(after));\n         return after;\n     }\n-\n-    @Override\n-    protected void doDeprovision(final Long key, final boolean unlink) {\n-        taskExecutor.execute(propagationManager.getAnyObjectDeleteTasks(\n-                key, profile.getTask().getResource().getKey()));\n-\n-        if (unlink) {\n-            AnyObjectPatch anyObjectPatch = new AnyObjectPatch();\n-            anyObjectPatch.setKey(key);\n-            anyObjectPatch.getResources().add(new StringPatchItem.Builder().\n-                    operation(PatchOperation.DELETE).\n-                    value(profile.getTask().getResource().getKey()).build());\n-        }\n-    }\n-\n-    @Override\n-    protected void doDelete(final Long key) {\n-        try {\n-            taskExecutor.execute(propagationManager.getAnyObjectDeleteTasks(\n-                    key, profile.getTask().getResource().getKey()));\n-        } catch (Exception e) {\n-            // A propagation failure doesn't imply a synchronization failure.\n-            // The propagation exception status will be reported into the propagation task execution.\n-            LOG.error(\"Could not propagate anyObject \" + key, e);\n-        }\n-\n-        anyObjectProvisioningManager.delete(key);\n-    }\n }"},{"sha":"2fd1df711882a25b7dd6bcd5fb56ce67ad9499de","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupPushResultHandlerImpl.java","status":"modified","additions":15,"deletions":109,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupPushResultHandlerImpl.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -18,26 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.java.sync;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.List;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n-import org.apache.syncope.common.lib.types.PropagationByResource;\n-import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n-import org.apache.syncope.core.provisioning.api.TimeoutException;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.sync.GroupPushResultHandler;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.Uid;\n \n public class GroupPushResultHandlerImpl extends AbstractPushResultHandler implements GroupPushResultHandler {\n \n@@ -46,92 +35,11 @@ protected AnyUtils getAnyUtils() {\n         return anyUtilsFactory.getInstance(AnyTypeKind.GROUP);\n     }\n \n-    @Override\n-    protected Any<?, ?, ?> deprovision(final Any<?, ?, ?> sbj) {\n-        GroupTO before = groupDataBinder.getGroupTO(Group.class.cast(sbj), true);\n-\n-        List<String> noPropResources = new ArrayList<>(before.getResources());\n-        noPropResources.remove(profile.getTask().getResource().getKey());\n-\n-        taskExecutor.execute(propagationManager.getGroupDeleteTasks(before.getKey(), noPropResources));\n-\n-        return groupDAO.authFind(before.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> provision(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        GroupTO before = groupDataBinder.getGroupTO(Group.class.cast(sbj), true);\n-\n-        List<String> noPropResources = new ArrayList<>(before.getResources());\n-        noPropResources.remove(profile.getTask().getResource().getKey());\n-\n-        PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.add(ResourceOperation.CREATE, profile.getTask().getResource().getKey());\n-\n-        taskExecutor.execute(propagationManager.getGroupCreateTasks(\n-                before.getKey(),\n-                Collections.unmodifiableCollection(before.getVirAttrs()),\n-                propByRes,\n-                noPropResources));\n-\n-        return groupDAO.authFind(before.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> link(final Any<?, ?, ?> sbj, final Boolean unlink) {\n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(sbj.getKey());\n-\n-        groupPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        gwfAdapter.update(groupPatch);\n-\n-        return groupDAO.authFind(sbj.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> unassign(final Any<?, ?, ?> sbj) {\n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(sbj.getKey());\n-        groupPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.DELETE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        gwfAdapter.update(groupPatch);\n-\n-        return deprovision(sbj);\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> assign(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(sbj.getKey());\n-        groupPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        gwfAdapter.update(groupPatch);\n-\n-        return provision(sbj, enabled);\n-    }\n-\n     @Override\n     protected String getName(final Any<?, ?, ?> any) {\n         return Group.class.cast(any).getName();\n     }\n \n-    @Override\n-    protected AnyTO getAnyTO(final long key) {\n-        try {\n-            return groupDataBinder.getGroupTO(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving user {}\", key, e);\n-            return null;\n-        }\n-    }\n-\n     @Override\n     protected Any<?, ?, ?> getAny(final long key) {\n         try {\n@@ -143,22 +51,20 @@ protected AnyTO getAnyTO(final long key) {\n     }\n \n     @Override\n-    protected ConnectorObject getRemoteObject(final String connObjectKey, final ObjectClass objectClass) {\n-        ConnectorObject obj = null;\n-        try {\n-            Uid uid = new Uid(connObjectKey);\n+    protected AnyTO getAnyTO(final long key) {\n+        return groupDataBinder.getGroupTO(key);\n+    }\n \n-            obj = profile.getConnector().getObject(\n-                    objectClass,\n-                    uid,\n-                    profile.getConnector().getOperationOptions(Collections.<MappingItem>emptySet()));\n-        } catch (TimeoutException toe) {\n-            LOG.debug(\"Request timeout\", toe);\n-            throw toe;\n-        } catch (RuntimeException ignore) {\n-            LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n-        }\n+    @Override\n+    protected AnyPatch newPatch(final long key) {\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n \n-        return obj;\n+    @Override\n+    protected WorkflowResult<Long> update(final AnyPatch patch) {\n+        return gwfAdapter.update((GroupPatch) patch);\n     }\n+\n }"},{"sha":"2d803b25cf5c11d7d1ab86648ed2a4466d8f4b24","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/GroupSyncResultHandlerImpl.java","status":"modified","additions":30,"deletions":46,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FGroupSyncResultHandlerImpl.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -25,13 +25,15 @@\n import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.GroupSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n@@ -56,40 +58,48 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected AnyTO getAnyTO(final long key) {\n+    protected ProvisioningManager<?, ?> getProvisioningManager() {\n+        return groupProvisioningManager;\n+    }\n+\n+    @Override\n+    protected Any<?, ?, ?> getAny(final long key) {\n         try {\n-            return groupDataBinder.getGroupTO(key);\n+            return groupDAO.authFind(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving group {}\", key, e);\n             return null;\n         }\n     }\n \n     @Override\n-    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningResult result) {\n-        GroupTO groupTO = GroupTO.class.cast(anyTO);\n-\n-        Map.Entry<Long, List<PropagationStatus>> created = groupProvisioningManager.create(groupTO, groupOwnerMap,\n-                Collections.singleton(profile.getTask().getResource().getKey()));\n+    protected AnyTO getAnyTO(final long key) {\n+        return groupDataBinder.getGroupTO(key);\n+    }\n \n-        result.setKey(created.getKey());\n+    @Override\n+    protected AnyPatch newPatch(final long key) {\n+        GroupPatch patch = new GroupPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n \n-        return groupDataBinder.getGroupTO(created.getKey());\n+    @Override\n+    protected WorkflowResult<Long> update(final AnyPatch patch) {\n+        return gwfAdapter.update((GroupPatch) patch);\n     }\n \n     @Override\n-    protected AnyTO doLink(\n-            final AnyTO before,\n-            final ProvisioningResult result,\n-            final boolean unlink) {\n+    protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningResult result) {\n+        GroupTO groupTO = GroupTO.class.cast(anyTO);\n \n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(before.getKey());\n-        groupPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n+        Map.Entry<Long, List<PropagationStatus>> created = groupProvisioningManager.create(\n+                groupTO, groupOwnerMap, Collections.singleton(profile.getTask().getResource().getKey()));\n+\n+        result.setKey(created.getKey());\n+        result.setName(getName(anyTO));\n \n-        return groupDataBinder.getGroupTO(gwfAdapter.update(groupPatch).getResult());\n+        return getAnyTO(created.getKey());\n     }\n \n     @Override\n@@ -103,7 +113,6 @@ protected AnyTO doUpdate(\n \n         Map.Entry<Long, List<PropagationStatus>> updated = groupProvisioningManager.update(groupPatch);\n \n-        // moved after group provisioning manager\n         String groupOwner = null;\n         for (AttrPatch attrPatch : groupPatch.getPlainAttrs()) {\n             if (attrPatch.getOperation() == PatchOperation.ADD_REPLACE && attrPatch.getAttrTO() != null\n@@ -123,29 +132,4 @@ protected AnyTO doUpdate(\n         return after;\n     }\n \n-    @Override\n-    protected void doDeprovision(final Long key, final boolean unlink) {\n-        taskExecutor.execute(propagationManager.getGroupDeleteTasks(key, profile.getTask().getResource().getKey()));\n-\n-        if (unlink) {\n-            GroupPatch groupPatch = new GroupPatch();\n-            groupPatch.setKey(key);\n-            groupPatch.getResources().add(new StringPatchItem.Builder().\n-                    operation(PatchOperation.DELETE).\n-                    value(profile.getTask().getResource().getKey()).build());\n-        }\n-    }\n-\n-    @Override\n-    protected void doDelete(final Long key) {\n-        try {\n-            taskExecutor.execute(propagationManager.getGroupDeleteTasks(key, profile.getTask().getResource().getKey()));\n-        } catch (Exception e) {\n-            // A propagation failure doesn't imply a synchronization failure.\n-            // The propagation exception status will be reported into the propagation task execution.\n-            LOG.error(\"Could not propagate group \" + key, e);\n-        }\n-\n-        groupProvisioningManager.delete(key);\n-    }\n }"},{"sha":"5829216cd06f125db5e8f142832a862e4b7bec20","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserPushResultHandlerImpl.java","status":"modified","additions":22,"deletions":92,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserPushResultHandlerImpl.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -19,25 +19,19 @@\n package org.apache.syncope.core.provisioning.java.sync;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.TimeoutException;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.sync.UserPushResultHandler;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.Uid;\n \n public class UserPushResultHandlerImpl extends AbstractPushResultHandler implements UserPushResultHandler {\n \n@@ -47,21 +41,8 @@ protected AnyUtils getAnyUtils() {\n     }\n \n     @Override\n-    protected Any<?, ?, ?> deprovision(final Any<?, ?, ?> sbj) {\n-        UserTO before = userDataBinder.getUserTO(sbj.getKey());\n-\n-        List<String> noPropResources = new ArrayList<>(before.getResources());\n-        noPropResources.remove(profile.getTask().getResource().getKey());\n-\n-        taskExecutor.execute(propagationManager.getUserDeleteTasks(before.getKey(),\n-                Collections.singleton(profile.getTask().getResource().getKey()), noPropResources));\n-\n-        return userDAO.authFind(before.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> provision(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        UserTO before = userDataBinder.getUserTO(sbj.getKey());\n+    protected void provision(final Any<?, ?, ?> any, final Boolean enabled) {\n+        AnyTO before = getAnyTO(any.getKey());\n \n         List<String> noPropResources = new ArrayList<>(before.getResources());\n         noPropResources.remove(profile.getTask().getResource().getKey());\n@@ -71,68 +52,18 @@ protected AnyUtils getAnyUtils() {\n \n         taskExecutor.execute(propagationManager.getUserCreateTasks(\n                 before.getKey(),\n+                null,\n                 enabled,\n                 propByRes,\n-                null,\n-                Collections.unmodifiableCollection(before.getVirAttrs()),\n+                before.getVirAttrs(),\n                 noPropResources));\n-\n-        return userDAO.authFind(before.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> link(final Any<?, ?, ?> sbj, final Boolean unlink) {\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(sbj.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        uwfAdapter.update(userPatch);\n-\n-        return userDAO.authFind(userPatch.getKey());\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> unassign(final Any<?, ?, ?> sbj) {\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(sbj.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.DELETE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        uwfAdapter.update(userPatch);\n-\n-        return deprovision(sbj);\n-    }\n-\n-    @Override\n-    protected Any<?, ?, ?> assign(final Any<?, ?, ?> sbj, final Boolean enabled) {\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(sbj.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n-        uwfAdapter.update(userPatch);\n-\n-        return provision(sbj, enabled);\n     }\n \n     @Override\n     protected String getName(final Any<?, ?, ?> any) {\n         return User.class.cast(any).getUsername();\n     }\n \n-    @Override\n-    protected AnyTO getAnyTO(final long key) {\n-        try {\n-            return userDataBinder.getUserTO(key);\n-        } catch (Exception e) {\n-            LOG.warn(\"Error retrieving user {}\", key, e);\n-            return null;\n-        }\n-    }\n-\n     @Override\n     protected Any<?, ?, ?> getAny(final long key) {\n         try {\n@@ -144,23 +75,22 @@ protected AnyTO getAnyTO(final long key) {\n     }\n \n     @Override\n-    protected ConnectorObject getRemoteObject(final String connObjectKey, final ObjectClass objectClass) {\n-        ConnectorObject obj = null;\n-        try {\n-            Uid uid = new Uid(connObjectKey);\n-\n-            obj = profile.getConnector().getObject(\n-                    objectClass,\n-                    uid,\n-                    profile.getConnector().getOperationOptions(Collections.<MappingItem>emptySet()));\n+    protected AnyTO getAnyTO(final long key) {\n+        return userDataBinder.getUserTO(key);\n+    }\n \n-        } catch (TimeoutException toe) {\n-            LOG.debug(\"Request timeout\", toe);\n-            throw toe;\n-        } catch (RuntimeException ignore) {\n-            LOG.debug(\"While resolving {}\", connObjectKey, ignore);\n-        }\n+    @Override\n+    protected AnyPatch newPatch(final long key) {\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n \n-        return obj;\n+    @Override\n+    protected WorkflowResult<Long> update(final AnyPatch patch) {\n+        WorkflowResult<Pair<UserPatch, Boolean>> update = uwfAdapter.update((UserPatch) patch);\n+        return new WorkflowResult<>(\n+                update.getResult().getLeft().getKey(), update.getPropByRes(), update.getPerformedTasks());\n     }\n+\n }"},{"sha":"c5e918abfac376f24c20b434d2d338d5ebc9e17d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":39,"deletions":41,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -21,15 +21,17 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.AnyPatch;\n-import org.apache.syncope.common.lib.patch.StringPatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.provisioning.api.ProvisioningManager;\n+import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.UserSyncResultHandler;\n import org.identityconnectors.framework.common.objects.SyncDelta;\n@@ -47,15 +49,39 @@ protected String getName(final AnyTO anyTO) {\n     }\n \n     @Override\n-    protected AnyTO getAnyTO(final long key) {\n+    protected ProvisioningManager<?, ?> getProvisioningManager() {\n+        return userProvisioningManager;\n+    }\n+\n+    @Override\n+    protected Any<?, ?, ?> getAny(final long key) {\n         try {\n-            return userDataBinder.getUserTO(key);\n+            return userDAO.authFind(key);\n         } catch (Exception e) {\n             LOG.warn(\"Error retrieving user {}\", key, e);\n             return null;\n         }\n     }\n \n+    @Override\n+    protected AnyTO getAnyTO(final long key) {\n+        return userDataBinder.getUserTO(key);\n+    }\n+\n+    @Override\n+    protected AnyPatch newPatch(final long key) {\n+        UserPatch patch = new UserPatch();\n+        patch.setKey(key);\n+        return patch;\n+    }\n+\n+    @Override\n+    protected WorkflowResult<Long> update(final AnyPatch patch) {\n+        WorkflowResult<Pair<UserPatch, Boolean>> update = uwfAdapter.update((UserPatch) patch);\n+        return new WorkflowResult<>(\n+                update.getResult().getLeft().getKey(), update.getPropByRes(), update.getPerformedTasks());\n+    }\n+\n     @Override\n     protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final ProvisioningResult result) {\n         UserTO userTO = UserTO.class.cast(anyTO);\n@@ -66,23 +92,9 @@ protected AnyTO doCreate(final AnyTO anyTO, final SyncDelta delta, final Provisi\n                         Collections.singleton(profile.getTask().getResource().getKey()));\n \n         result.setKey(created.getKey());\n+        result.setName(getName(anyTO));\n \n-        return userDataBinder.getUserTO(created.getKey());\n-    }\n-\n-    @Override\n-    protected AnyTO doLink(\n-            final AnyTO before,\n-            final ProvisioningResult result,\n-            final boolean unlink) {\n-\n-        UserPatch userPatch = new UserPatch();\n-        userPatch.setKey(before.getKey());\n-        userPatch.getResources().add(new StringPatchItem.Builder().\n-                operation(unlink ? PatchOperation.DELETE : PatchOperation.ADD_REPLACE).\n-                value(profile.getTask().getResource().getKey()).build());\n-\n-        return userDataBinder.getUserTO(uwfAdapter.update(userPatch).getResult().getKey().getKey());\n+        return getAnyTO(created.getKey());\n     }\n \n     @Override\n@@ -95,31 +107,17 @@ protected AnyTO doUpdate(\n         UserPatch userPatch = UserPatch.class.cast(anyPatch);\n         Boolean enabled = syncUtilities.readEnabled(delta.getObject(), profile.getTask());\n \n-        Map.Entry<Long, List<PropagationStatus>> updated = userProvisioningManager.update(userPatch, before.getKey(),\n-                result, enabled, Collections.singleton(profile.getTask().getResource().getKey()));\n-\n-        return userDataBinder.getUserTO(updated.getKey());\n-    }\n+        Map.Entry<Long, List<PropagationStatus>> updated = userProvisioningManager.update(\n+                userPatch, before.getKey(),\n+                result,\n+                enabled,\n+                Collections.singleton(profile.getTask().getResource().getKey()));\n \n-    @Override\n-    protected void doDeprovision(\n-            final Long key,\n-            final boolean unlink) {\n-\n-        taskExecutor.execute(propagationManager.getUserDeleteTasks(\n-                key, Collections.singleton(profile.getTask().getResource().getKey())));\n-\n-        if (unlink) {\n-            UserPatch userPatch = new UserPatch();\n-            userPatch.setKey(key);\n-            userPatch.getResources().add(new StringPatchItem.Builder().\n-                    operation(PatchOperation.DELETE).\n-                    value(profile.getTask().getResource().getKey()).build());\n-        }\n+        return getAnyTO(updated.getKey());\n     }\n \n     @Override\n-    protected void doDelete(final Long key) {\n+    protected void doDelete(final AnyTypeKind kind, final Long key) {\n         try {\n             userProvisioningManager.\n                     delete(key, Collections.<String>singleton(profile.getTask().getResource().getKey()));"},{"sha":"1013d0720e4a24e3aeac4d583e6465f87a5ebaf4","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectCreateProcessor.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectCreateProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -24,6 +24,7 @@\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -52,10 +53,14 @@ public class AnyObjectCreateProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n         AnyObjectTO any = exchange.getProperty(\"any\", AnyObjectTO.class);\n-        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        List<PropagationTask> tasks =\n-                propagationManager.getAnyObjectCreateTasks(created, any.getVirAttrs(), excludedResource);\n+        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                created.getResult(),\n+                created.getPropByRes(),\n+                any.getVirAttrs(),\n+                excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"7826053b008328386fa860912b0278f5dd9392e9","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectDeleteProcessor.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeleteProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -18,14 +18,12 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -51,23 +49,17 @@ public class AnyObjectDeleteProcessor implements Processor {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n     @Override\n     public void process(final Exchange exchange) throws Exception {\n-        Long anyKey = exchange.getIn().getBody(Long.class);\n-        AnyObject anyObject = anyObjectDAO.find(anyKey);\n+        Long key = exchange.getIn().getBody(Long.class);\n         @SuppressWarnings(\"unchecked\")\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        List<PropagationTask> tasks = new ArrayList<>();\n-\n-        if (anyObject != null) {\n-            // Generate propagation tasks for deleting this anyObject from resources\n-            tasks.addAll(propagationManager.getAnyObjectDeleteTasks(anyObject.getKey(), excludedResources));\n-        }\n-\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                key,\n+                null,\n+                excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"f08b578717647d0a794657bd13c84a6b636320d5","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectDeprovisionProcessor.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectDeprovisionProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.Collection;\n-import java.util.HashSet;\n import java.util.List;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n-import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -54,15 +54,17 @@ public class AnyObjectDeprovisionProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n-        Long anyObjectKey = exchange.getIn().getBody(Long.class);\n+        Long key = exchange.getIn().getBody(Long.class);\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n \n-        AnyObject anyObject = anyObjectDAO.authFind(anyObjectKey);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.DELETE, resources);\n \n-        Collection<String> noPropResourceNames = CollectionUtils.removeAll(anyObject.getResourceNames(), resources);\n-\n-        List<PropagationTask> tasks =\n-                propagationManager.getAnyObjectDeleteTasks(anyObjectKey, new HashSet<>(resources), noPropResourceNames);\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                key,\n+                propByRes,\n+                CollectionUtils.removeAll(anyObjectDAO.findAllResourceNames(anyObjectDAO.authFind(key)), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"8170d348e9a3a5c152bb4558e15de3ea9ce2f061","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectProvisionProcessor.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectProvisionProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -21,12 +21,11 @@\n import java.util.List;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -47,9 +46,6 @@ public class AnyObjectProvisionProcessor implements Processor {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n@@ -59,9 +55,14 @@ public void process(final Exchange exchange) {\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n-\n-        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(wfResult, null, null);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                key,\n+                false,\n+                null,\n+                propByRes,\n+                null,\n+                null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"978388dc33f5e7f856459314cc2787560506d9e8","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/AnyObjectUpdateProcessor.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FAnyObjectUpdateProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -61,16 +61,29 @@ public void process(final Exchange exchange) {\n         AnyObjectPatch anyObjectPatch = exchange.getProperty(\"anyPatch\", AnyObjectPatch.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        List<PropagationTask> tasks = propagationManager.getAnyObjectUpdateTasks(\n-                updated, anyObjectPatch.getVirAttrs(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.ANY_OBJECT,\n+                updated.getResult(),\n+                false,\n+                null,\n+                updated.getPropByRes(),\n+                anyObjectPatch.getVirAttrs(),\n+                excludedResources);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n                     updated.getResult(),\n                     AnyTypeKind.ANY_OBJECT,\n                     anyObjectPatch.getVirAttrs());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getAnyObjectUpdateTasks(updated, null, null)\n+                    ? propagationManager.getUpdateTasks(\n+                            AnyTypeKind.ANY_OBJECT,\n+                            updated.getResult(),\n+                            false,\n+                            null,\n+                            updated.getPropByRes(),\n+                            anyObjectPatch.getVirAttrs(),\n+                            null)\n                     : Collections.<PropagationTask>emptyList());\n         }\n "},{"sha":"474a3f2b1f5e8f3c1bc80c6c7cd2ba605c774028","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupCreateInSyncProcessor.java","status":"modified","additions":24,"deletions":6,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateInSyncProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -28,15 +28,23 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n \n @Component\n public class GroupCreateInSyncProcessor implements Processor {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(GroupCreateInSyncProcessor.class);\n+\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -48,19 +56,29 @@ public class GroupCreateInSyncProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n \n-        GroupTO actual = exchange.getProperty(\"any\", GroupTO.class);\n+        GroupTO groupTO = exchange.getProperty(\"any\", GroupTO.class);\n         Map<Long, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        AttrTO groupOwner = actual.getPlainAttrMap().get(StringUtils.EMPTY);\n+        AttrTO groupOwner = groupTO.getPlainAttrMap().get(StringUtils.EMPTY);\n         if (groupOwner != null) {\n             groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next());\n         }\n \n-        List<PropagationTask> tasks = propagationManager.getGroupCreateTasks(\n-                created, actual.getVirAttrs(), excludedResources);\n-\n-        taskExecutor.execute(tasks);\n+        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+                AnyTypeKind.GROUP,\n+                created.getResult(),\n+                created.getPropByRes(),\n+                groupTO.getVirAttrs(),\n+                excludedResources);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n \n         exchange.getOut().setBody(new ImmutablePair<>(created.getResult(), null));\n     }"},{"sha":"b0bddef1763fbca879b551ccfd1da53377c25f27","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupCreateProcessor.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupCreateProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -24,6 +24,7 @@\n import org.apache.camel.Processor;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -52,10 +53,14 @@ public class GroupCreateProcessor implements Processor {\n     public void process(final Exchange exchange) {\n         WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n         GroupTO any = exchange.getProperty(\"any\", GroupTO.class);\n-        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        List<PropagationTask> tasks =\n-                propagationManager.getGroupCreateTasks(created, any.getVirAttrs(), excludedResource);\n+        List<PropagationTask> tasks = propagationManager.getCreateTasks(\n+                AnyTypeKind.GROUP,\n+                created.getResult(),\n+                created.getPropByRes(),\n+                any.getVirAttrs(),\n+                excludedResources);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"96b328e9a9b0a84ac6207fa006cde91420ba80d9","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeleteProcessor.java","status":"modified","additions":28,"deletions":25,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeleteProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -19,18 +19,16 @@\n package org.apache.syncope.core.provisioning.camel.processor;\n \n import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -60,35 +58,40 @@ public class GroupDeleteProcessor implements Processor {\n \n     @Override\n     public void process(final Exchange exchange) throws Exception {\n-        Long anyKey = exchange.getIn().getBody(Long.class);\n-        Group group = groupDAO.find(anyKey);\n+        Long key = exchange.getIn().getBody(Long.class);\n         @SuppressWarnings(\"unchecked\")\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n         List<PropagationTask> tasks = new ArrayList<>();\n \n-        if (group != null) {\n-            // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n-            // because of the reason being deleted (see SYNCOPE-357)\n-            for (Map.Entry<Long, PropagationByResource> entry\n-                    : groupDAO.findUsersWithTransitiveResources(group.getKey()).entrySet()) {\n-\n-                WorkflowResult<Long> wfResult =\n-                        new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n-                tasks.addAll(propagationManager.getUserDeleteTasks(wfResult.getResult(), excludedResources));\n-            }\n-            for (Map.Entry<Long, PropagationByResource> entry\n-                    : groupDAO.findAnyObjectsWithTransitiveResources(group.getKey()).entrySet()) {\n-\n-                WorkflowResult<Long> wfResult =\n-                        new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n-                tasks.addAll(propagationManager.getAnyObjectDeleteTasks(wfResult.getResult(), excludedResources));\n-            }\n-\n-            // Generate propagation tasks for deleting this group from resources\n-            tasks.addAll(propagationManager.getGroupDeleteTasks(group.getKey(), excludedResources));\n+        // Generate propagation tasks for deleting users from group resources, if they are on those resources only\n+        // because of the reason being deleted (see SYNCOPE-357)\n+        for (Map.Entry<Long, PropagationByResource> entry\n+                : groupDAO.findUsersWithTransitiveResources(key).entrySet()) {\n+\n+            tasks.addAll(propagationManager.getDeleteTasks(\n+                    AnyTypeKind.USER,\n+                    entry.getKey(),\n+                    entry.getValue(),\n+                    excludedResources));\n+        }\n+        for (Map.Entry<Long, PropagationByResource> entry\n+                : groupDAO.findAnyObjectsWithTransitiveResources(key).entrySet()) {\n+\n+            tasks.addAll(propagationManager.getDeleteTasks(\n+                    AnyTypeKind.ANY_OBJECT,\n+                    entry.getKey(),\n+                    entry.getValue(),\n+                    excludedResources));\n         }\n \n+        // Generate propagation tasks for deleting this group from resources\n+        tasks.addAll(propagationManager.getDeleteTasks(\n+                AnyTypeKind.GROUP,\n+                key,\n+                null,\n+                null));\n+\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"a5c08753f6d74de382c9816a245ab029bd3406ba","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupDeprovisionProcessor.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupDeprovisionProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.Collection;\n-import java.util.HashSet;\n import java.util.List;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -54,15 +54,17 @@ public class GroupDeprovisionProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n-        Long groupKey = exchange.getIn().getBody(Long.class);\n+        Long key = exchange.getIn().getBody(Long.class);\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n \n-        Group group = groupDAO.authFind(groupKey);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.addAll(ResourceOperation.DELETE, resources);\n \n-        Collection<String> noPropResourceNames = CollectionUtils.removeAll(group.getResourceNames(), resources);\n-\n-        List<PropagationTask> tasks =\n-                propagationManager.getGroupDeleteTasks(groupKey, new HashSet<>(resources), noPropResourceNames);\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.GROUP,\n+                key,\n+                propByRes,\n+                CollectionUtils.removeAll(groupDAO.authFind(key).getResourceNames(), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"b7ecc6f75224fdbfe70d5bcf1d19cdab40f32639","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupProvisionProcessor.java","status":"modified","additions":9,"deletions":8,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupProvisionProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -21,12 +21,11 @@\n import java.util.List;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -47,9 +46,6 @@ public class GroupProvisionProcessor implements Processor {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n@@ -59,9 +55,14 @@ public void process(final Exchange exchange) {\n         PropagationByResource propByRes = new PropagationByResource();\n         propByRes.addAll(ResourceOperation.UPDATE, resources);\n \n-        WorkflowResult<Long> wfResult = new WorkflowResult<>(key, propByRes, \"update\");\n-\n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(wfResult, null, null);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.GROUP,\n+                key,\n+                false,\n+                null,\n+                propByRes,\n+                null,\n+                null);\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"ad9ed637ea4ea0a32ba046f955aac9e45de0789d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/GroupUpdateProcessor.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FGroupUpdateProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -61,16 +61,29 @@ public void process(final Exchange exchange) {\n         GroupPatch groupPatch = exchange.getProperty(\"anyPatch\", GroupPatch.class);\n         Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n-        List<PropagationTask> tasks = propagationManager.getGroupUpdateTasks(\n-                updated, groupPatch.getVirAttrs(), excludedResources);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.GROUP,\n+                updated.getResult(),\n+                false,\n+                null,\n+                updated.getPropByRes(),\n+                groupPatch.getVirAttrs(),\n+                excludedResources);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n                     updated.getResult(),\n                     AnyTypeKind.GROUP,\n                     groupPatch.getVirAttrs());\n             tasks.addAll(!propByResVirAttr.isEmpty()\n-                    ? propagationManager.getGroupUpdateTasks(updated, null, null)\n+                    ? propagationManager.getUpdateTasks(\n+                            AnyTypeKind.GROUP,\n+                            updated.getResult(),\n+                            false,\n+                            null,\n+                            updated.getPropByRes(),\n+                            groupPatch.getVirAttrs(),\n+                            excludedResources)\n                     : Collections.<PropagationTask>emptyList());\n         }\n "},{"sha":"1a9dd723a3afbadb66e966832f83ced1489d7275","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserCreateProcessor.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -52,16 +52,15 @@ public class UserCreateProcessor implements Processor {\n     @Override\n     public void process(final Exchange exchange) {\n         if ((exchange.getIn().getBody() instanceof WorkflowResult)) {\n-\n             WorkflowResult<Pair<Long, Boolean>> created = (WorkflowResult) exchange.getIn().getBody();\n             UserTO actual = exchange.getProperty(\"actual\", UserTO.class);\n             Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n \n             List<PropagationTask> tasks = propagationManager.getUserCreateTasks(\n                     created.getResult().getKey(),\n+                    actual.getPassword(),\n                     created.getResult().getValue(),\n                     created.getPropByRes(),\n-                    actual.getPassword(),\n                     actual.getVirAttrs(),\n                     excludedResources);\n             PropagationReporter propagationReporter ="},{"sha":"5838e01714a4f4759d814b809d0d0666111ed2b2","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeleteProcessor.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -22,7 +22,11 @@\n import java.util.Set;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n@@ -38,6 +42,9 @@ public class UserDeleteProcessor implements Processor {\n \n     private static final Logger LOG = LoggerFactory.getLogger(UserDeleteProcessor.class);\n \n+    @Autowired\n+    protected UserDAO userDAO;\n+\n     @Autowired\n     protected PropagationManager propagationManager;\n \n@@ -47,15 +54,22 @@ public class UserDeleteProcessor implements Processor {\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) throws Exception {\n-        Long userKey = (Long) exchange.getIn().getBody();\n-        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+        Long key = (Long) exchange.getIn().getBody();\n+        Set<String> excludedResources = exchange.getProperty(\"excludedResources\", Set.class);\n+\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(userDAO.authFind(key)));\n \n         // Note here that we can only notify about \"delete\", not any other\n         // task defined in workflow process definition: this because this\n         // information could only be available after uwfAdapter.delete(), which\n         // will also effectively remove user from db, thus making virtually\n         // impossible by NotificationManager to fetch required user information\n-        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(userKey, excludedResource);\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.USER,\n+                key,\n+                propByRes,\n+                excludedResources);\n \n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);"},{"sha":"522af513d25b5d7ff1010d90a9ac797f286615fd","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeprovisionProcessor.java","status":"modified","additions":11,"deletions":8,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -18,15 +18,16 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.HashSet;\n import java.util.List;\n import org.apache.camel.Exchange;\n import org.apache.camel.Processor;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n-import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationReporter;\n@@ -52,16 +53,18 @@ public class UserDeprovisionProcessor implements Processor {\n \n     @Override\n     public void process(final Exchange exchange) {\n-        Long userKey = exchange.getIn().getBody(Long.class);\n+        Long key = exchange.getIn().getBody(Long.class);\n         @SuppressWarnings(\"unchecked\")\n         List<String> resources = exchange.getProperty(\"resources\", List.class);\n \n-        User user = userDAO.authFind(userKey);\n+        PropagationByResource propByRes = new PropagationByResource();\n+        propByRes.set(ResourceOperation.DELETE, resources);\n \n-        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(\n-                userKey,\n-                new HashSet<>(resources),\n-                CollectionUtils.removeAll(userDAO.findAllResourceNames(user), resources));\n+        List<PropagationTask> tasks = propagationManager.getDeleteTasks(\n+                AnyTypeKind.USER,\n+                key,\n+                propByRes,\n+                CollectionUtils.removeAll(userDAO.findAllResourceNames(userDAO.authFind(key)), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"da6e74553b0d0d94d6be3379adcd9632d77a1e95","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -25,6 +25,7 @@\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.StatusPatchType;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -61,11 +62,17 @@ public void process(final Exchange exchange) {\n         Long key = exchange.getProperty(\"userKey\", Long.class);\n         StatusPatch statusPatch = exchange.getProperty(\"statusPatch\", StatusPatch.class);\n \n-        Collection<String> resourcesToBeExcluded = CollectionUtils.removeAll(\n+        Collection<String> noPropResourceNames = CollectionUtils.removeAll(\n                 userDAO.findAllResourceNames(userDAO.find(key)), statusPatch.getResources());\n \n-        List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n-                key, statusPatch.getType() != StatusPatchType.SUSPEND, resourcesToBeExcluded);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTasks(\n+                AnyTypeKind.USER,\n+                statusPatch.getKey(),\n+                false,\n+                statusPatch.getType() != StatusPatchType.SUSPEND,\n+                null,\n+                null,\n+                noPropResourceNames);\n         PropagationReporter propReporter =\n                 ApplicationContextProvider.getBeanFactory().getBean(PropagationReporter.class);\n         try {"},{"sha":"c50240cd178df338492dc1afd665f0111e37f77f","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserUpdateProcessor.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -62,7 +62,7 @@ public void process(final Exchange exchange) {\n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(updated);\n         if (tasks.isEmpty()) {\n             // SYNCOPE-459: take care of user virtual attributes ...\n-            PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+            PropagationByResource propByResVirAttr = virtAttrHandler.updateVirtual(\n                     updated.getResult().getKey().getKey(),\n                     AnyTypeKind.USER,\n                     userPatch.getVirAttrs());"},{"sha":"336ed216d78ad860a33fda3dff76ae6bb3daa895","filename":"fit/core-reference/src/main/resources/all/provisioning.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d017e2c3ecaee95f5ef964464d1169ac06bb88c/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fprovisioning.properties?ref=3d017e2c3ecaee95f5ef964464d1169ac06bb88c","patch":"@@ -17,7 +17,7 @@\n camel.directory=${conf.directory}\n userProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelUserProvisioningManager\n groupProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelGroupProvisioningManager\n-anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.camel.CamelAnyObjectProvisioningManager\n virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n \n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate"}]}