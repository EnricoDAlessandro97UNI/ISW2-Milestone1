{"sha":"dee6705c448a612bf361173379428cdd23d8320a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRlZTY3MDVjNDQ4YTYxMmJmMzYxMTczMzc5NDI4Y2RkMjNkODMyMGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-07-23T14:54:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-07-23T14:54:06Z"},"message":"Some additional cleanup in preparation for JSON to work (hopefully)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1506085 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"95f78ca3ef18e26ead0c6e5f390818b73dc2e493","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/95f78ca3ef18e26ead0c6e5f390818b73dc2e493"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dee6705c448a612bf361173379428cdd23d8320a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dee6705c448a612bf361173379428cdd23d8320a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dee6705c448a612bf361173379428cdd23d8320a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dee6705c448a612bf361173379428cdd23d8320a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"24f20d350437d6a0cf6896fba97de5133a0e4a5f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/24f20d350437d6a0cf6896fba97de5133a0e4a5f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/24f20d350437d6a0cf6896fba97de5133a0e4a5f"}],"stats":{"total":421,"additions":207,"deletions":214},"files":[{"sha":"b73963135c65e44c28f36ede6905532c11a26a3c","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -28,7 +28,7 @@\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.core.Response;\r\n import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n-import org.apache.syncope.common.to.PolicyTO;\r\n+import org.apache.syncope.common.to.AbstractPolicyTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n \r\n @Path(\"policies/{type}\")\r\n@@ -42,7 +42,7 @@ public interface PolicyService {\n      * @return Response containing URI location for created resource\r\n      */\r\n     @POST\r\n-    <T extends PolicyTO> Response create(@PathParam(\"type\") PolicyType type, T policyTO);\r\n+    <T extends AbstractPolicyTO> Response create(@PathParam(\"type\") PolicyType type, T policyTO);\r\n \r\n     /**\r\n      * @param type Deletes policy with given type\r\n@@ -52,7 +52,7 @@ public interface PolicyService {\n      */\r\n     @DELETE\r\n     @Path(\"{policyId}\")\r\n-    <T extends PolicyTO> void delete(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n+    <T extends AbstractPolicyTO> void delete(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n \r\n     /**\r\n      * @param type Type selector for requested policies\r\n@@ -61,7 +61,7 @@ public interface PolicyService {\n      * @return List of policies with matching type.\r\n      */\r\n     @GET\r\n-    <T extends PolicyTO> List<T> list(@PathParam(\"type\") PolicyType type);\r\n+    <T extends AbstractPolicyTO> List<T> list(@PathParam(\"type\") PolicyType type);\r\n \r\n     /**\r\n      * @param type Request for policy with given type\r\n@@ -72,7 +72,7 @@ public interface PolicyService {\n      */\r\n     @GET\r\n     @Path(\"{policyId}\")\r\n-    <T extends PolicyTO> T read(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n+    <T extends AbstractPolicyTO> T read(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId);\r\n \r\n     /**\r\n      * @param type PolicyType to read global policy from\r\n@@ -82,7 +82,7 @@ public interface PolicyService {\n      */\r\n     @GET\r\n     @Path(\"0\")\r\n-    <T extends PolicyTO> T readGlobal(@PathParam(\"type\") PolicyType type);\r\n+    <T extends AbstractPolicyTO> T readGlobal(@PathParam(\"type\") PolicyType type);\r\n \r\n     /**\r\n      * @param type PolicyType to be updated.\r\n@@ -93,7 +93,7 @@ public interface PolicyService {\n      */\r\n     @PUT\r\n     @Path(\"{policyId}\")\r\n-    <T extends PolicyTO> void update(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId,\r\n+    <T extends AbstractPolicyTO> void update(@PathParam(\"type\") PolicyType type, @PathParam(\"policyId\") Long policyId,\r\n             T policyTO);\r\n \r\n     /**\r"},{"sha":"001711415d238bad9535afbc10bd9c6d818dd3c7","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.common.to.ReportExecTO;\r\n import org.apache.syncope.common.to.SyncActionClassTO;\r\n import org.apache.syncope.common.to.TaskExecTO;\r\n-import org.apache.syncope.common.to.TaskTO;\r\n+import org.apache.syncope.common.to.AbstractTaskTO;\r\n import org.apache.syncope.common.types.TaskType;\r\n \r\n @Path(\"tasks\")\r\n@@ -56,7 +56,7 @@ public interface TaskService {\n      * @return Response containing URI location for created resource\r\n      */\r\n     @POST\r\n-    Response create(TaskTO taskTO);\r\n+    Response create(AbstractTaskTO taskTO);\r\n \r\n     /**\r\n      * @param taskId Id of task to be deleted\r\n@@ -102,7 +102,7 @@ public interface TaskService {\n     @GET\r\n     @Path(\"{type}/list\")\r\n     // TODO '/list' path will be removed once CXF/JAX-B bug is solved\r\n-    <T extends TaskTO> List<T> list(@PathParam(\"type\") TaskType taskType);\r\n+    <T extends AbstractTaskTO> List<T> list(@PathParam(\"type\") TaskType taskType);\r\n \r\n     /**\r\n      * @param taskType Type of tasks to be listed\r\n@@ -112,7 +112,7 @@ public interface TaskService {\n      */\r\n     @GET\r\n     @Path(\"{type}\")\r\n-    <T extends TaskTO> List<T> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"page\") int page,\r\n+    <T extends AbstractTaskTO> List<T> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"page\") int page,\r\n             @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n     /**\r\n@@ -123,7 +123,7 @@ <T extends TaskTO> List<T> list(@PathParam(\"type\") TaskType taskType, @QueryPara\n     @GET\r\n     @Path(\"{type}/{taskId}\")\r\n     // TODO TaskType can be removed once CXF migration is done\r\n-    <T extends TaskTO> T read(@PathParam(\"type\") TaskType taskType, @PathParam(\"taskId\") Long taskId);\r\n+    <T extends AbstractTaskTO> T read(@PathParam(\"type\") TaskType taskType, @PathParam(\"taskId\") Long taskId);\r\n \r\n     /**\r\n      * @param executionId Id if task execution to be read\r\n@@ -147,7 +147,7 @@ <T extends TaskTO> List<T> list(@PathParam(\"type\") TaskType taskType, @QueryPara\n      */\r\n     @PUT\r\n     @Path(\"{taskId}\")\r\n-    void update(@PathParam(\"taskId\") Long taskId, TaskTO taskTO);\r\n+    void update(@PathParam(\"taskId\") Long taskId, AbstractTaskTO taskTO);\r\n     \r\n     @POST\r\n     @Path(\"bulk\")\r"},{"sha":"d7d1f2076f0a3d5f25a39ffd4f9c2ef5b957916e","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractPolicyTO.java","status":"renamed","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractPolicyTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -18,6 +18,9 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\r\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlSeeAlso;\r\n import javax.xml.bind.annotation.XmlType;\r\n@@ -28,8 +31,8 @@\n @XmlRootElement(name = \"policy\")\r\n @XmlType\r\n @XmlSeeAlso({AccountPolicyTO.class, PasswordPolicyTO.class, SyncPolicyTO.class})\r\n-//@JsonTypeInfo(use=Id.CLASS, include=As.PROPERTY, property=\"class\")\r\n-public abstract class PolicyTO extends AbstractBaseBean {\r\n+@JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY, property = \"@class\")\r\n+public abstract class AbstractPolicyTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = -2903888572649721035L;\r\n \r\n@@ -51,15 +54,15 @@ public String getDescription() {\n         return description;\r\n     }\r\n \r\n-    public void setDescription(String description) {\r\n+    public void setDescription(final String description) {\r\n         this.description = description;\r\n     }\r\n \r\n     public PolicyType getType() {\r\n         return type;\r\n     }\r\n \r\n-    public void setType(PolicyType type) {\r\n+    public void setType(final PolicyType type) {\r\n         this.type = type;\r\n     }\r\n }\r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/PolicyTO.java"},{"sha":"d6940177b5dfcc47b7b6b8d19bbcdf34036106a0","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSchemaTO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -18,6 +18,7 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlSeeAlso;\r\n import javax.xml.bind.annotation.XmlType;\r\n@@ -27,6 +28,7 @@\n @XmlRootElement(name = \"abstractSchema\")\r\n @XmlType\r\n @XmlSeeAlso({SchemaTO.class, DerSchemaTO.class, VirSchemaTO.class})\r\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n public abstract class AbstractSchemaTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 4088388951694301759L;\r"},{"sha":"e611e4fabe6306e6ee2adc34fdfdd5a23e8d376d","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractTaskTO.java","status":"renamed","additions":13,"deletions":20,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractTaskTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -18,6 +18,9 @@\n  */\r\n package org.apache.syncope.common.to;\r\n \r\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\r\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.As;\r\n+import com.fasterxml.jackson.annotation.JsonTypeInfo.Id;\r\n import java.util.ArrayList;\r\n import java.util.Date;\r\n import java.util.List;\r\n@@ -32,19 +35,9 @@\n \r\n @XmlRootElement(name = \"task\")\r\n @XmlType\r\n-@XmlSeeAlso({ SyncTaskTO.class, NotificationTaskTO.class, SyncTaskTO.class,\r\n-    SchedTaskTO.class, PropagationTaskTO.class })\r\n-\r\n-/* This will help CXF marshalling but is incompatible with spring services \r\n-@JsonTypeInfo(use=Id.NAME, include=As.PROPERTY, property=\"type\")\r\n-@JsonSubTypes({\r\n-    @JsonSubTypes.Type(value=NotificationTaskTO.class, name=\"notificationTask\"),\r\n-    @JsonSubTypes.Type(value=PropagationTaskTO.class, name=\"propagationTask\"),\r\n-    @JsonSubTypes.Type(value=SchedTaskTO.class, name=\"schedTask\"),\r\n-    @JsonSubTypes.Type(value=SyncTaskTO.class, name=\"syncTask\")\r\n-})\r\n-*/\r\n-public abstract class TaskTO extends AbstractBaseBean {\r\n+@XmlSeeAlso({SyncTaskTO.class, NotificationTaskTO.class, SyncTaskTO.class, SchedTaskTO.class, PropagationTaskTO.class})\r\n+@JsonTypeInfo(use = Id.CLASS, include = As.PROPERTY, property = \"@class\")\r\n+public abstract class AbstractTaskTO extends AbstractBaseBean {\r\n \r\n     private static final long serialVersionUID = 386450127003321197L;\r\n \r\n@@ -62,23 +55,23 @@ public long getId() {\n         return id;\r\n     }\r\n \r\n-    public void setId(long id) {\r\n+    public void setId(final long id) {\r\n         this.id = id;\r\n     }\r\n \r\n     public String getLatestExecStatus() {\r\n         return latestExecStatus;\r\n     }\r\n \r\n-    public void setLatestExecStatus(String latestExecStatus) {\r\n+    public void setLatestExecStatus(final String latestExecStatus) {\r\n         this.latestExecStatus = latestExecStatus;\r\n     }\r\n \r\n-    public boolean addExecution(TaskExecTO execution) {\r\n+    public boolean addExecution(final TaskExecTO execution) {\r\n         return executions.add(execution);\r\n     }\r\n \r\n-    public boolean removeExecution(TaskExecTO execution) {\r\n+    public boolean removeExecution(final TaskExecTO execution) {\r\n         return executions.remove(execution);\r\n     }\r\n \r\n@@ -88,7 +81,7 @@ public List<TaskExecTO> getExecutions() {\n         return executions;\r\n     }\r\n \r\n-    public void setExecutions(List<TaskExecTO> executions) {\r\n+    public void setExecutions(final List<TaskExecTO> executions) {\r\n         this.executions = executions;\r\n     }\r\n \r\n@@ -98,7 +91,7 @@ public Date getStartDate() {\n                 : new Date(startDate.getTime());\r\n     }\r\n \r\n-    public void setStartDate(Date startDate) {\r\n+    public void setStartDate(final Date startDate) {\r\n         if (startDate != null) {\r\n             this.startDate = new Date(startDate.getTime());\r\n         }\r\n@@ -110,7 +103,7 @@ public Date getEndDate() {\n                 : new Date(endDate.getTime());\r\n     }\r\n \r\n-    public void setEndDate(Date endDate) {\r\n+    public void setEndDate(final Date endDate) {\r\n         if (endDate != null) {\r\n             this.endDate = new Date(endDate.getTime());\r\n         }\r","previous_filename":"common/src/main/java/org/apache/syncope/common/to/TaskTO.java"},{"sha":"bea1a1073879e6c9f1ccf2866af86af721155a86","filename":"common/src/main/java/org/apache/syncope/common/to/AccountPolicyTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -26,7 +26,7 @@\n \r\n @XmlRootElement(name = \"accountPolicy\")\r\n @XmlType\r\n-public class AccountPolicyTO extends PolicyTO {\r\n+public class AccountPolicyTO extends AbstractPolicyTO {\r\n \r\n     private static final long serialVersionUID = -1557150042828800134L;\r\n \r"},{"sha":"58697741752941118dfd388578551375bbbf67cc","filename":"common/src/main/java/org/apache/syncope/common/to/NotificationTaskTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -30,7 +30,7 @@\n \r\n @XmlRootElement(name = \"notificationTask\")\r\n @XmlType\r\n-public class NotificationTaskTO extends TaskTO {\r\n+public class NotificationTaskTO extends AbstractTaskTO {\r\n \r\n     private static final long serialVersionUID = 371671242591093846L;\r\n \r"},{"sha":"6b034cbe11d2a1e910cbcc0cf406705016206908","filename":"common/src/main/java/org/apache/syncope/common/to/PasswordPolicyTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -26,7 +26,7 @@\n \r\n @XmlRootElement(name = \"passwordPolicy\")\r\n @XmlType\r\n-public class PasswordPolicyTO extends PolicyTO {\r\n+public class PasswordPolicyTO extends AbstractPolicyTO {\r\n \r\n     private static final long serialVersionUID = -5606086441294799690L;\r\n \r"},{"sha":"d5dc1e965bdb0ebe1a5c22b47032b040bb2e018c","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationTaskTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -27,7 +27,7 @@\n \r\n @XmlRootElement(name = \"propagationTask\")\r\n @XmlType\r\n-public class PropagationTaskTO extends TaskTO {\r\n+public class PropagationTaskTO extends AbstractTaskTO {\r\n \r\n     private static final long serialVersionUID = 386450127003321197L;\r\n \r"},{"sha":"3ca2257eeb563da196008e62dc244737671f7a87","filename":"common/src/main/java/org/apache/syncope/common/to/SchedTaskTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -25,7 +25,7 @@\n \r\n @XmlRootElement(name = \"schedTask\")\r\n @XmlType\r\n-public class SchedTaskTO extends TaskTO {\r\n+public class SchedTaskTO extends AbstractTaskTO {\r\n \r\n     private static final long serialVersionUID = -5722284116974636425L;\r\n \r"},{"sha":"c7b6ba7d5e1ae5243bd388cb425cd78d0fcf4b63","filename":"common/src/main/java/org/apache/syncope/common/to/SyncPolicyTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -26,7 +26,7 @@\n \r\n @XmlRootElement(name = \"syncPolicy\")\r\n @XmlType\r\n-public class SyncPolicyTO extends PolicyTO {\r\n+public class SyncPolicyTO extends AbstractPolicyTO {\r\n \r\n     private static final long serialVersionUID = 993024634238024242L;\r\n \r"},{"sha":"c5c8b6dbc05f327a24a608a8d8d8986591b7403e","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationTaskModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -20,7 +20,7 @@\n \n import java.util.ArrayList;\n import org.apache.syncope.common.to.NotificationTaskTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.markup.html.form.ListMultipleChoice;\n import org.apache.wicket.markup.html.form.TextArea;\n@@ -30,7 +30,7 @@ public class NotificationTaskModalPage extends TaskModalPage {\n \n     private static final long serialVersionUID = -4399606755452034216L;\n \n-    public NotificationTaskModalPage(final TaskTO taskTO) {\n+    public NotificationTaskModalPage(final AbstractTaskTO taskTO) {\n         super(taskTO);\n \n         final AjaxTextFieldPanel sender = new AjaxTextFieldPanel(\"sender\", getString(\"sender\"),"},{"sha":"ebb9c2c205662345f179541ae9975b720727d168","filename":"console/src/main/java/org/apache/syncope/console/pages/PolicyModalPage.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -21,7 +21,7 @@\n import java.util.Arrays;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.AbstractPolicySpec;\n import org.apache.syncope.common.types.AccountPolicySpec;\n@@ -46,7 +46,7 @@\n /**\n  * Modal window with Resource form.\n  */\n-public class PolicyModalPage<T extends PolicyTO> extends BaseModalPage {\n+public class PolicyModalPage<T extends AbstractPolicyTO> extends BaseModalPage {\n \n     private static final long serialVersionUID = -7325772767481076679L;\n \n@@ -152,7 +152,7 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n         form.add(cancel);\n     }\n \n-    private AbstractPolicySpec getPolicySpecification(final PolicyTO policyTO) {\n+    private AbstractPolicySpec getPolicySpecification(final AbstractPolicyTO policyTO) {\n         AbstractPolicySpec spec;\n \n         switch (policyTO.getType()) {\n@@ -181,7 +181,7 @@ private AbstractPolicySpec getPolicySpecification(final PolicyTO policyTO) {\n         return spec;\n     }\n \n-    private void setPolicySpecification(final PolicyTO policyTO, final AbstractPolicySpec specification) {\n+    private void setPolicySpecification(final AbstractPolicyTO policyTO, final AbstractPolicySpec specification) {\n \n         switch (policyTO.getType()) {\n             case GLOBAL_ACCOUNT:"},{"sha":"27fb2e421619c056c14e1b3b9055f34552926ed1","filename":"console/src/main/java/org/apache/syncope/console/pages/PropagationTaskModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.model.PropertyModel;\n \n@@ -29,7 +29,7 @@ public class PropagationTaskModalPage extends TaskModalPage {\n \n     private static final long serialVersionUID = 523379887023786151L;\n \n-    public PropagationTaskModalPage(final TaskTO taskTO) {\n+    public PropagationTaskModalPage(final AbstractTaskTO taskTO) {\n         super(taskTO);\n \n         final AjaxTextFieldPanel accountId = new AjaxTextFieldPanel(\"accountId\", getString(\"accountId\"),"},{"sha":"00f048cdaacadaf9793b1bb6c5a784738058cd1e","filename":"console/src/main/java/org/apache/syncope/console/pages/TaskModalPage.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n@@ -69,7 +69,7 @@ public abstract class TaskModalPage extends BaseModalPage {\n \n     protected Form form;\n \n-    public TaskModalPage(final TaskTO taskTO) {\n+    public TaskModalPage(final AbstractTaskTO taskTO) {\n         final ModalWindow taskExecMessageWin = new ModalWindow(\"taskExecMessageWin\");\n         taskExecMessageWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n         taskExecMessageWin.setCookieName(\"task-exec-message-win-modal\");\n@@ -199,9 +199,9 @@ protected static class TaskExecutionsProvider extends SortableDataProvider<TaskE\n \n         private SortableDataProviderComparator<TaskExecTO> comparator;\n \n-        private TaskTO taskTO;\n+        private AbstractTaskTO taskTO;\n \n-        public TaskExecutionsProvider(final TaskTO taskTO) {\n+        public TaskExecutionsProvider(final AbstractTaskTO taskTO) {\n             //Default sorting\n             this.taskTO = taskTO;\n             setSort(\"startDate\", SortOrder.DESCENDING);\n@@ -238,8 +238,8 @@ public TaskExecTO getObject() {\n         }\n     }\n \n-    private TaskTO getCurrentTaskExecution(final TaskTO taskTO) {\n-        final TaskTO currentTask = taskTO.getId() == 0\n+    private AbstractTaskTO getCurrentTaskExecution(final AbstractTaskTO taskTO) {\n+        final AbstractTaskTO currentTask = taskTO.getId() == 0\n                 ? taskTO\n                 : taskTO instanceof PropagationTaskTO\n                 ? taskRestClient.readPropagationTask(taskTO.getId())"},{"sha":"e2484ffdeac3f17561fb75aa7f524198e30f9c3c","filename":"console/src/main/java/org/apache/syncope/console/pages/Tasks.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -26,7 +26,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.console.pages.panels.AjaxDataTablePanel;\n import org.apache.syncope.console.pages.panels.NotificationTasks;\n@@ -74,9 +74,9 @@ public static class TaskExecutionsProvider extends SortableDataProvider<TaskExec\n \n         private SortableDataProviderComparator<TaskExecTO> comparator;\n \n-        private TaskTO taskTO;\n+        private AbstractTaskTO taskTO;\n \n-        public TaskExecutionsProvider(final TaskTO taskTO) {\n+        public TaskExecutionsProvider(final AbstractTaskTO taskTO) {\n             super();\n \n             //Default sorting\n@@ -119,7 +119,7 @@ public List<TaskExecTO> getTaskDB() {\n         }\n     }\n \n-    public static class TasksProvider<T extends TaskTO> extends SortableDataProvider<T, String> {\n+    public static class TasksProvider<T extends AbstractTaskTO> extends SortableDataProvider<T, String> {\n \n         private static final long serialVersionUID = -20112718133295756L;\n \n@@ -195,18 +195,18 @@ public IModel<T> model(final T object) {\n      * @param currentPage current page index.\n      * @return data table.\n      */\n-    public static AjaxDataTablePanel<TaskTO, String> updateTaskTable(\n-            final List<IColumn<TaskTO, String>> columns,\n+    public static AjaxDataTablePanel<AbstractTaskTO, String> updateTaskTable(\n+            final List<IColumn<AbstractTaskTO, String>> columns,\n             final TasksProvider dataProvider,\n             final WebMarkupContainer container,\n             final int currentPage,\n             final PageReference pageRef,\n             final BaseRestClient restClient) {\n \n-        final AjaxDataTablePanel<TaskTO, String> table = new AjaxDataTablePanel<TaskTO, String>(\n+        final AjaxDataTablePanel<AbstractTaskTO, String> table = new AjaxDataTablePanel<AbstractTaskTO, String>(\n                 \"datatable\",\n                 columns,\n-                (ISortableDataProvider<TaskTO, String>) dataProvider,\n+                (ISortableDataProvider<AbstractTaskTO, String>) dataProvider,\n                 dataProvider.paginatorRows,\n                 Arrays.asList(new ActionLink.ActionType[]{\n                     ActionLink.ActionType.DELETE, ActionLink.ActionType.DRYRUN, ActionLink.ActionType.EXECUTE}),"},{"sha":"4332e9ac2a57ff133462248bcac209810acdaf04","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/NotificationTasks.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.to.NotificationTaskTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.NotificationTaskModalPage;\n@@ -60,9 +60,9 @@ public class NotificationTasks extends AbstractTasks {\n \n     private ModalWindow window;\n \n-    private final List<IColumn<TaskTO, String>> columns;\n+    private final List<IColumn<AbstractTaskTO, String>> columns;\n \n-    private AjaxDataTablePanel<TaskTO, String> table;\n+    private AjaxDataTablePanel<AbstractTaskTO, String> table;\n \n     public NotificationTasks(final String id, final PageReference pageRef) {\n         super(id);\n@@ -75,29 +75,29 @@ public NotificationTasks(final String id, final PageReference pageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS);\n \n-        columns = new ArrayList<IColumn<TaskTO, String>>();\n+        columns = new ArrayList<IColumn<AbstractTaskTO, String>>();\n \n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"sender\", this, null), \"sender\", \"sender\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"recipients\", this, null), \"recipients\", \"recipients\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"subject\", this, null), \"subject\", \"subject\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"traceLevel\", this, null), \"traceLevel\", \"traceLevel\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"latestExecStatus\", this, null), \"latestExecStatus\", \"latestExecStatus\"));\n \n-        columns.add(new ActionColumn<TaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+        columns.add(new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n             @Override\n-            public ActionLinksPanel getActions(final String componentId, final IModel<TaskTO> model) {\n+            public ActionLinksPanel getActions(final String componentId, final IModel<AbstractTaskTO> model) {\n \n-                final TaskTO taskTO = model.getObject();\n+                final AbstractTaskTO taskTO = model.getObject();\n \n                 final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, pageRef);\n "},{"sha":"8989603303e5315aa7e07cc4ec9addd7079363d7","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PoliciesPanel.java","status":"modified","additions":20,"deletions":20,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -24,7 +24,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n@@ -114,26 +114,26 @@ public PoliciesPanel(final String id, final PageReference pageRef, final PolicyT\n \n         setWindowClosedCallback(mwindow, container);\n \n-        final List<IColumn<PolicyTO, String>> columns = new ArrayList<IColumn<PolicyTO, String>>();\n+        final List<IColumn<AbstractPolicyTO, String>> columns = new ArrayList<IColumn<AbstractPolicyTO, String>>();\n \n-        columns.add(new PropertyColumn<PolicyTO, String>(new ResourceModel(\"id\"), \"id\", \"id\"));\n+        columns.add(new PropertyColumn<AbstractPolicyTO, String>(new ResourceModel(\"id\"), \"id\", \"id\"));\n \n-        columns.add(new PropertyColumn<PolicyTO, String>(\n+        columns.add(new PropertyColumn<AbstractPolicyTO, String>(\n                 new ResourceModel(\"description\"), \"description\", \"description\"));\n \n-        columns.add(new AbstractColumn<PolicyTO, String>(new ResourceModel(\"type\")) {\n+        columns.add(new AbstractColumn<AbstractPolicyTO, String>(new ResourceModel(\"type\")) {\n \n             private static final long serialVersionUID = 8263694778917279290L;\n \n             @Override\n-            public void populateItem(final Item<ICellPopulator<PolicyTO>> cellItem, final String componentId,\n-                    final IModel<PolicyTO> model) {\n+            public void populateItem(final Item<ICellPopulator<AbstractPolicyTO>> cellItem, final String componentId,\n+                    final IModel<AbstractPolicyTO> model) {\n \n                 cellItem.add(new Label(componentId, getString(model.getObject().getType().name())));\n             }\n         });\n \n-        columns.add(new AbstractColumn<PolicyTO, String>(new ResourceModel(\"actions\", \"\")) {\n+        columns.add(new AbstractColumn<AbstractPolicyTO, String>(new ResourceModel(\"actions\", \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n@@ -143,10 +143,10 @@ public String getCssClass() {\n             }\n \n             @Override\n-            public void populateItem(final Item<ICellPopulator<PolicyTO>> cellItem, final String componentId,\n-                    final IModel<PolicyTO> model) {\n+            public void populateItem(final Item<ICellPopulator<AbstractPolicyTO>> cellItem, final String componentId,\n+                    final IModel<AbstractPolicyTO> model) {\n \n-                final PolicyTO accountPolicyTO = model.getObject();\n+                final AbstractPolicyTO accountPolicyTO = model.getObject();\n \n                 final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, pageRef);\n \n@@ -264,19 +264,19 @@ public void onClose(final AjaxRequestTarget target) {\n         });\n     }\n \n-    private class PolicyDataProvider extends SortableDataProvider<PolicyTO, String> {\n+    private class PolicyDataProvider extends SortableDataProvider<AbstractPolicyTO, String> {\n \n         private static final long serialVersionUID = -6976327453925166730L;\n \n-        private SortableDataProviderComparator<PolicyTO> comparator;\n+        private SortableDataProviderComparator<AbstractPolicyTO> comparator;\n \n         public PolicyDataProvider() {\n             super();\n \n             //Default sorting\n             setSort(\"description\", SortOrder.ASCENDING);\n \n-            comparator = new SortableDataProviderComparator<PolicyTO>(this);\n+            comparator = new SortableDataProviderComparator<AbstractPolicyTO>(this);\n         }\n \n         @Override\n@@ -285,23 +285,23 @@ public long size() {\n         }\n \n         @Override\n-        public Iterator<PolicyTO> iterator(final long first, final long count) {\n+        public Iterator<AbstractPolicyTO> iterator(final long first, final long count) {\n \n-            final List<PolicyTO> policies = policyRestClient.getPolicies(policyType, true);\n+            final List<AbstractPolicyTO> policies = policyRestClient.getPolicies(policyType, true);\n \n             Collections.sort(policies, comparator);\n \n             return policies.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n-        public IModel<PolicyTO> model(final PolicyTO object) {\n-            return new CompoundPropertyModel<PolicyTO>(object);\n+        public IModel<AbstractPolicyTO> model(final AbstractPolicyTO object) {\n+            return new CompoundPropertyModel<AbstractPolicyTO>(object);\n         }\n     }\n \n-    private PolicyTO getPolicyTOInstance(final PolicyType policyType) {\n-        PolicyTO policyTO;\n+    private AbstractPolicyTO getPolicyTOInstance(final PolicyType policyType) {\n+        AbstractPolicyTO policyTO;\n         switch (policyType) {\n             case GLOBAL_ACCOUNT:\n                 policyTO = new AccountPolicyTO(true);"},{"sha":"e49db81eeb8f8db99012e1d766861c10f14d5dc6","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PropagationTasks.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.to.PropagationTaskTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.PropagationTaskModalPage;\n@@ -65,9 +65,9 @@ public class PropagationTasks extends AbstractTasks {\n \n     private ModalWindow window;\n \n-    private final List<IColumn<TaskTO, String>> columns;\n+    private final List<IColumn<AbstractTaskTO, String>> columns;\n \n-    private AjaxDataTablePanel<TaskTO, String> table;\n+    private AjaxDataTablePanel<AbstractTaskTO, String> table;\n \n     public PropagationTasks(final String id, final PageReference pageRef) {\n         super(id);\n@@ -80,33 +80,33 @@ public PropagationTasks(final String id, final PageReference pageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_PROPAGATION_TASKS_PAGINATOR_ROWS);\n \n-        columns = new ArrayList<IColumn<TaskTO, String>>();\n+        columns = new ArrayList<IColumn<AbstractTaskTO, String>>();\n \n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n \n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"resource\", this, null), \"resource\", \"resource\"));\n \n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"accountId\", this, null), \"accountId\", \"accountId\"));\n \n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"propagationMode\", this, null), \"propagationMode\", \"propagationMode\"));\n \n-        columns.add(new PropertyColumn<TaskTO, String>(new StringResourceModel(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(new StringResourceModel(\n                 \"propagationOperation\", this, null), \"propagationOperation\", \"propagationOperation\"));\n \n-        columns.add(new DatePropertyColumn<TaskTO>(\n+        columns.add(new DatePropertyColumn<AbstractTaskTO>(\n                 new StringResourceModel(\"startDate\", this, null), \"startDate\", \"startDate\"));\n \n-        columns.add(new DatePropertyColumn<TaskTO>(\n+        columns.add(new DatePropertyColumn<AbstractTaskTO>(\n                 new StringResourceModel(\"endDate\", this, null), \"endDate\", \"endDate\"));\n \n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"latestExecStatus\", this, null), \"latestExecStatus\", \"latestExecStatus\"));\n \n-        columns.add(new ActionColumn<TaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+        columns.add(new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n@@ -116,9 +116,9 @@ public String getCssClass() {\n             }\n \n             @Override\n-            public ActionLinksPanel getActions(final String componentId, final IModel<TaskTO> model) {\n+            public ActionLinksPanel getActions(final String componentId, final IModel<AbstractTaskTO> model) {\n \n-                final TaskTO taskTO = model.getObject();\n+                final AbstractTaskTO taskTO = model.getObject();\n \n                 final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, pageRef);\n "},{"sha":"0fc782e0212ccd5262c62c19f7cb85299b47ade2","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceSecurityPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.console.rest.PolicyRestClient;\n@@ -62,7 +62,7 @@ public ResourceSecurityPanel(final String id, final ResourceTO resourceTO) {\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (PolicyTO policyTO : policyRestClient.getPolicies(PolicyType.PASSWORD, false)) {\n+                for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.PASSWORD, false)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;\n@@ -76,7 +76,7 @@ protected Map<Long, String> load() {\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (PolicyTO policyTO : policyRestClient.getPolicies(PolicyType.ACCOUNT, false)) {\n+                for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.ACCOUNT, false)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;\n@@ -90,7 +90,7 @@ protected Map<Long, String> load() {\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (PolicyTO policyTO : policyRestClient.getPolicies(PolicyType.SYNC, false)) {\n+                for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.SYNC, false)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;"},{"sha":"b934755da11b11076a320464fc161b393caf08c6","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSecurityPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -23,7 +23,7 @@\n import java.util.Map;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.console.rest.PolicyRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n@@ -69,7 +69,7 @@ public <T extends AbstractAttributableTO> RoleSecurityPanel(final String id, fin\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (PolicyTO policyTO : policyRestClient.getPolicies(PolicyType.PASSWORD, false)) {\n+                for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.PASSWORD, false)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;\n@@ -83,7 +83,7 @@ protected Map<Long, String> load() {\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (PolicyTO policyTO : policyRestClient.getPolicies(PolicyType.ACCOUNT, false)) {\n+                for (AbstractPolicyTO policyTO : policyRestClient.getPolicies(PolicyType.ACCOUNT, false)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;"},{"sha":"b259fbaf8aa6fbbffe5c92e0d16dda8038da3578","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SchedTasks.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.to.SchedTaskTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.SchedTaskModalPage;\n@@ -62,9 +62,9 @@ public class SchedTasks extends AbstractTasks {\n \n     private ModalWindow window;\n \n-    private final List<IColumn<TaskTO, String>> columns;\n+    private final List<IColumn<AbstractTaskTO, String>> columns;\n \n-    private AjaxDataTablePanel<TaskTO, String> table;\n+    private AjaxDataTablePanel<AbstractTaskTO, String> table;\n \n     public SchedTasks(final String id, final PageReference pageRef) {\n         super(id);\n@@ -84,29 +84,29 @@ public SchedTasks(final String id, final PageReference pageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_SCHED_TASKS_PAGINATOR_ROWS);\n \n-        columns = new ArrayList<IColumn<TaskTO, String>>();\n+        columns = new ArrayList<IColumn<AbstractTaskTO, String>>();\n \n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"name\", this, null), \"name\", \"name\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"description\", this, null), \"description\", \"description\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"class\", this, null), \"jobClassName\", \"jobClassName\"));\n-        columns.add(new DatePropertyColumn<TaskTO>(\n+        columns.add(new DatePropertyColumn<AbstractTaskTO>(\n                 new StringResourceModel(\"lastExec\", this, null), \"lastExec\", \"lastExec\"));\n-        columns.add(new DatePropertyColumn<TaskTO>(\n+        columns.add(new DatePropertyColumn<AbstractTaskTO>(\n                 new StringResourceModel(\"nextExec\", this, null), \"nextExec\", \"nextExec\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"latestExecStatus\", this, null), \"latestExecStatus\", \"latestExecStatus\"));\n \n-        columns.add(new ActionColumn<TaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+        columns.add(new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n             @Override\n-            public ActionLinksPanel getActions(final String componentId, final IModel<TaskTO> model) {\n+            public ActionLinksPanel getActions(final String componentId, final IModel<AbstractTaskTO> model) {\n \n                 final SchedTaskTO taskTO = (SchedTaskTO) model.getObject();\n "},{"sha":"60e1d3122e32f8bed5f777fef2893ee7b1b723da","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SyncTasks.java","status":"modified","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -21,7 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.syncope.common.to.SyncTaskTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.RoleTemplateModalPage;\n@@ -64,9 +64,9 @@ public class SyncTasks extends AbstractTasks {\n \n     private ModalWindow window;\n \n-    private final List<IColumn<TaskTO, String>> columns;\n+    private final List<IColumn<AbstractTaskTO, String>> columns;\n \n-    private AjaxDataTablePanel<TaskTO, String> table;\n+    private AjaxDataTablePanel<AbstractTaskTO, String> table;\n \n     public SyncTasks(final String id, final PageReference pageRef) {\n         super(id);\n@@ -86,28 +86,28 @@ public SyncTasks(final String id, final PageReference pageRef) {\n \n         paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS);\n \n-        columns = new ArrayList<IColumn<TaskTO, String>>();\n+        columns = new ArrayList<IColumn<AbstractTaskTO, String>>();\n \n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"name\", this, null), \"name\", \"name\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"description\", this, null), \"description\", \"description\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"resourceName\", this, null), \"resource\", \"resource\"));\n-        columns.add(new DatePropertyColumn<TaskTO>(\n+        columns.add(new DatePropertyColumn<AbstractTaskTO>(\n                 new StringResourceModel(\"lastExec\", this, null), \"lastExec\", \"lastExec\"));\n-        columns.add(new DatePropertyColumn<TaskTO>(\n+        columns.add(new DatePropertyColumn<AbstractTaskTO>(\n                 new StringResourceModel(\"nextExec\", this, null), \"nextExec\", \"nextExec\"));\n-        columns.add(new PropertyColumn<TaskTO, String>(\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n                 new StringResourceModel(\"latestExecStatus\", this, null), \"latestExecStatus\", \"latestExecStatus\"));\n-        columns.add(new ActionColumn<TaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+        columns.add(new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n             @Override\n-            public ActionLinksPanel getActions(final String componentId, final IModel<TaskTO> model) {\n+            public ActionLinksPanel getActions(final String componentId, final IModel<AbstractTaskTO> model) {\n \n                 final SyncTaskTO taskTO = (SyncTaskTO) model.getObject();\n "},{"sha":"9e449b637816771cd55bba67b7f0f4f5be384d96","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -23,7 +23,7 @@\n import org.apache.syncope.common.services.PolicyService;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.util.CollectionWrapper;\n@@ -37,7 +37,7 @@ public class PolicyRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1392090291817187902L;\n \n-    public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n+    public <T extends AbstractPolicyTO> T getGlobalPolicy(final PolicyType type) {\n         T policy = null;\n         try {\n             policy = getService(PolicyService.class).readGlobal(type);\n@@ -48,7 +48,7 @@ public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends PolicyTO> List<T> getPolicies(final PolicyType type, final boolean includeGlobal) {\n+    public <T extends AbstractPolicyTO> List<T> getPolicies(final PolicyType type, final boolean includeGlobal) {\n         final List<T> res = new ArrayList<T>();\n \n         try {\n@@ -59,7 +59,7 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type, final boo\n \n         if (includeGlobal) {\n             try {\n-                PolicyTO globalPolicy = getGlobalPolicy(type);\n+                AbstractPolicyTO globalPolicy = getGlobalPolicy(type);\n                 if (globalPolicy != null) {\n                     res.add(0, (T) globalPolicy);\n                 }\n@@ -71,15 +71,15 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type, final boo\n         return res;\n     }\n \n-    public <T extends PolicyTO> void createPolicy(final T policy) {\n+    public <T extends AbstractPolicyTO> void createPolicy(final T policy) {\n         getService(PolicyService.class).create(policy.getType(), policy);\n     }\n \n-    public <T extends PolicyTO> void updatePolicy(final T policy) {\n+    public <T extends AbstractPolicyTO> void updatePolicy(final T policy) {\n         getService(PolicyService.class).update(policy.getType(), policy.getId(), policy);\n     }\n \n-    public void delete(final Long id, final Class<? extends PolicyTO> policyClass) {\n+    public void delete(final Long id, final Class<? extends AbstractPolicyTO> policyClass) {\n         getService(PolicyService.class).delete(getPolicyType(policyClass), id);\n     }\n \n@@ -96,7 +96,7 @@ public List<String> getCorrelationRuleClasses() {\n         return rules;\n     }\n \n-    private PolicyType getPolicyType(final Class<? extends PolicyTO> clazz) {\n+    private PolicyType getPolicyType(final Class<? extends AbstractPolicyTO> clazz) {\n         PolicyType policyType;\n         if (AccountPolicyTO.class.equals(clazz)) {\n             policyType = PolicyType.ACCOUNT;"},{"sha":"a051a771e8ffb3704b638370cc528f28100ccfcd","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncActionClassTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n@@ -87,7 +87,7 @@ public Integer count(final String kind) {\n      * @param size per page.\n      * @return paginated list.\n      */\n-    public <T extends TaskTO> List<T> listTasks(final Class<T> reference, final int page, final int size) {\n+    public <T extends AbstractTaskTO> List<T> listTasks(final Class<T> reference, final int page, final int size) {\n         return getService(TaskService.class).list(getTaskType(reference), page, size);\n     }\n \n@@ -122,7 +122,7 @@ public <T extends SchedTaskTO> T readSchedTask(final Class<T> reference, final L\n      *\n      * @param taskId task to delete\n      */\n-    public void delete(final Long taskId, final Class<? extends TaskTO> taskToClass) {\n+    public void delete(final Long taskId, final Class<? extends AbstractTaskTO> taskToClass) {\n         getService(TaskService.class).delete(taskId);\n     }\n "},{"sha":"8ae3491ed61a0d34f01cf170f534f3a1850b0768","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -23,7 +23,7 @@\n import java.util.Set;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.AuditElements.Category;\n@@ -59,7 +59,7 @@ public class PolicyController extends AbstractController {\n     private PolicyDataBinder binder;\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n-    public <T extends PolicyTO> T create(final T policyTO) {\n+    public <T extends AbstractPolicyTO> T create(final T policyTO) {\n         LOG.debug(\"Creating policy \" + policyTO);\n \n         final Policy policy = binder.getPolicy(null, policyTO);\n@@ -70,7 +70,7 @@ public <T extends PolicyTO> T create(final T policyTO) {\n         return binder.getPolicyTO(policyDAO.save(policy));\n     }\n \n-    private <T extends PolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n+    private <T extends AbstractPolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n         LOG.debug(\"Updating policy \" + policyTO);\n \n         binder.getPolicy(policy, policyTO);\n@@ -114,7 +114,7 @@ public SyncPolicyTO update(final SyncPolicyTO policyTO) {\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends PolicyTO> List<T> list(final PolicyType type) {\n+    public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\n         LOG.debug(\"Listing policies\");\n \n         List<? extends Policy> policies = policyDAO.find(type);\n@@ -176,7 +176,7 @@ public SyncPolicyTO getGlobalSyncPolicy() {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n-    public <T extends PolicyTO> T read(final Long id) {\n+    public <T extends AbstractPolicyTO> T read(final Long id) {\n         LOG.debug(\"Reading policy with id {}\", id);\n \n         Policy policy = policyDAO.find(id);\n@@ -191,13 +191,13 @@ public <T extends PolicyTO> T read(final Long id) {\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n-    public PolicyTO delete(final Long id) {\n+    public AbstractPolicyTO delete(final Long id) {\n         Policy policy = policyDAO.find(id);\n         if (policy == null) {\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n         }\n \n-        PolicyTO policyToDelete = binder.getPolicyTO(policy);\n+        AbstractPolicyTO policyToDelete = binder.getPolicyTO(policy);\n         policyDAO.delete(id);\n \n         auditManager.audit(Category.policy, PolicySubCategory.delete, Result.success,"},{"sha":"c14a41cdc815a71eaf046a3924a659e80218bb88","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.TaskSubCategory;\n@@ -93,7 +93,7 @@ public class TaskController extends AbstractController {\n     private ImplementationClassNamesLoader classNamesLoader;\n \n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n-    public TaskTO createSchedTask(final SchedTaskTO taskTO) {\n+    public AbstractTaskTO createSchedTask(final SchedTaskTO taskTO) {\n         LOG.debug(\"Creating task \" + taskTO);\n \n         TaskUtil taskUtil = TaskUtil.getInstance(taskTO);\n@@ -121,12 +121,12 @@ public TaskTO createSchedTask(final SchedTaskTO taskTO) {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n-    public TaskTO updateSync(final SyncTaskTO taskTO) {\n+    public AbstractTaskTO updateSync(final SyncTaskTO taskTO) {\n         return updateSched(taskTO);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_UPDATE')\")\n-    public TaskTO updateSched(final SchedTaskTO taskTO) {\n+    public AbstractTaskTO updateSched(final SchedTaskTO taskTO) {\n         LOG.debug(\"Task update called with parameter {}\", taskTO);\n \n         SchedTask task = taskDAO.find(taskTO.getId());\n@@ -165,7 +165,7 @@ public int count(final TaskType taskType) {\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends TaskTO> List<T> list(final TaskType taskType) {\n+    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType) {\n         TaskUtil taskUtil = TaskUtil.getInstance(taskType);\n \n         List<Task> tasks = taskDAO.findAll(taskUtil.taskClass());\n@@ -182,7 +182,7 @@ public <T extends TaskTO> List<T> list(final TaskType taskType) {\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends TaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\n+    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\n         TaskUtil taskUtil = TaskUtil.getInstance(taskType);\n \n         List<Task> tasks = taskDAO.findAll(page, size, taskUtil.taskClass());\n@@ -219,7 +219,7 @@ public Set<String> getSyncActionsClasses() {\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n-    public TaskTO read(final Long taskId) {\n+    public AbstractTaskTO read(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n@@ -365,14 +365,14 @@ public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n-    public TaskTO delete(final Long taskId) {\n+    public AbstractTaskTO delete(final Long taskId) {\n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n         TaskUtil taskUtil = TaskUtil.getInstance(task);\n \n-        TaskTO taskToDelete = binder.getTaskTO(task, taskUtil);\n+        AbstractTaskTO taskToDelete = binder.getTaskTO(task, taskUtil);\n \n         if (TaskType.SCHEDULED == taskUtil.getType() || TaskType.SYNCHRONIZATION == taskUtil.getType()) {\n             jobInstanceLoader.unregisterJob(task);"},{"sha":"4efc94ae11e7d14ac29354b3164a0974008c452f","filename":"core/src/main/java/org/apache/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -23,7 +23,7 @@\n import static org.apache.syncope.common.types.PolicyType.GLOBAL_SYNC;\n import org.apache.syncope.common.to.AccountPolicyTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.AccountPolicySpec;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n@@ -61,8 +61,8 @@ private boolean isGlobalPolicy(final PolicyType policyType) {\n      * @return policy TO.\n      */\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n-        final PolicyTO policyTO;\n+    public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n+        final AbstractPolicyTO policyTO;\n \n         final boolean isGlobal = isGlobalPolicy(policy.getType());\n \n@@ -106,7 +106,7 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends Policy> T getPolicy(T policy, final PolicyTO policyTO) {\n+    public <T extends Policy> T getPolicy(T policy, final AbstractPolicyTO policyTO) {\n         if (policy != null && policy.getType() != policyTO.getType()) {\n             throw new IllegalArgumentException(\n                     String.format(\"Cannot update %s from %s\", policy.getType(), policyTO.getType()));"},{"sha":"55fc6d5957666a697d84cbd70b3070db32a51b3a","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.types.TaskType;\n@@ -226,8 +226,8 @@ private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n         }\n     }\n \n-    public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n-        TaskTO taskTO = taskUtil.newTaskTO();\n+    public AbstractTaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n+        AbstractTaskTO taskTO = taskUtil.newTaskTO();\n         BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n \n         TaskExec latestExec = taskExecDAO.findLatestStarted(task);"},{"sha":"72ad41751b7d37fe8db4d572e8dfce26265b7ba5","filename":"core/src/main/java/org/apache/syncope/core/services/PolicyServiceImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FPolicyServiceImpl.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.to.AccountPolicyTO;\r\n import org.apache.syncope.common.to.CorrelationRuleClassTO;\r\n import org.apache.syncope.common.to.PasswordPolicyTO;\r\n-import org.apache.syncope.common.to.PolicyTO;\r\n+import org.apache.syncope.common.to.AbstractPolicyTO;\r\n import org.apache.syncope.common.to.SyncPolicyTO;\r\n import org.apache.syncope.common.types.PolicyType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n@@ -43,8 +43,8 @@ public class PolicyServiceImpl extends AbstractServiceImpl implements PolicyServ\n     private PolicyController policyController;\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n-        PolicyTO policy = policyController.create(policyTO);\r\n+    public <T extends AbstractPolicyTO> Response create(final PolicyType type, final T policyTO) {\r\n+        AbstractPolicyTO policy = policyController.create(policyTO);\r\n         URI location = uriInfo.getAbsolutePathBuilder().path(policy.getId() + \"\").build();\r\n         return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, policy.getId()).build();\r\n     }\r\n@@ -55,18 +55,18 @@ public void delete(final PolicyType type, final Long policyId) {\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> List<T> list(final PolicyType type) {\r\n+    public <T extends AbstractPolicyTO> List<T> list(final PolicyType type) {\r\n         return policyController.list(type);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> T read(final PolicyType type, final Long policyId) {\r\n+    public <T extends AbstractPolicyTO> T read(final PolicyType type, final Long policyId) {\r\n         return policyController.read(policyId);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends PolicyTO> T readGlobal(final PolicyType type) {\r\n+    public <T extends AbstractPolicyTO> T readGlobal(final PolicyType type) {\r\n         T result = null;\r\n \r\n         switch (type) {\r\n@@ -93,7 +93,7 @@ public <T extends PolicyTO> T readGlobal(final PolicyType type) {\n     }\r\n \r\n     @Override\r\n-    public <T extends PolicyTO> void update(final PolicyType type, final Long policyId, final T policyTO) {\r\n+    public <T extends AbstractPolicyTO> void update(final PolicyType type, final Long policyId, final T policyTO) {\r\n         switch (type) {\r\n             case ACCOUNT:\r\n             case GLOBAL_ACCOUNT:\r"},{"sha":"7c9654fe5cb93791a2f999e3fcb75d12c65166ae","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.to.SyncActionClassTO;\r\n import org.apache.syncope.common.to.SyncTaskTO;\r\n import org.apache.syncope.common.to.TaskExecTO;\r\n-import org.apache.syncope.common.to.TaskTO;\r\n+import org.apache.syncope.common.to.AbstractTaskTO;\r\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n import org.apache.syncope.common.types.TaskType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n@@ -54,8 +54,8 @@ public int count(final TaskType taskType) {\n     }\r\n \r\n     @Override\r\n-    public Response create(final TaskTO taskTO) {\r\n-        TaskTO createdTask;\r\n+    public Response create(final AbstractTaskTO taskTO) {\r\n+        AbstractTaskTO createdTask;\r\n         if (taskTO instanceof SyncTaskTO || taskTO instanceof SchedTaskTO) {\r\n             createdTask = controller.createSchedTask((SchedTaskTO) taskTO);\r\n         } else {\r\n@@ -93,18 +93,18 @@ public Set<SyncActionClassTO> getSyncActionsClasses() {\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> List<T> list(final TaskType taskType) {\r\n+    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType) {\r\n         return controller.list(taskType);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends TaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\r\n+    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\r\n         return controller.list(taskType, page, size);\r\n     }\r\n \r\n     @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends TaskTO> T read(final TaskType taskType, final Long taskId) {\r\n+    public <T extends AbstractTaskTO> T read(final TaskType taskType, final Long taskId) {\r\n         return (T) controller.read(taskId);\r\n     }\r\n \r\n@@ -120,7 +120,7 @@ public void report(final Long executionId, final ReportExecTO report) {\n     }\r\n \r\n     @Override\r\n-    public void update(final Long taskId, final TaskTO taskTO) {\r\n+    public void update(final Long taskId, final AbstractTaskTO taskTO) {\r\n         if (taskTO instanceof SyncTaskTO) {\r\n             controller.updateSync((SyncTaskTO) taskTO);\r\n         } else if (taskTO instanceof SchedTaskTO) {\r"},{"sha":"91befabecbec4d4200e9158b08e6be79875eb329","filename":"core/src/main/java/org/apache/syncope/core/util/TaskUtil.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n@@ -56,7 +56,7 @@ public static TaskUtil getInstance(final Task task) {\n         return getInstance(type);\n     }\n \n-    public static TaskUtil getInstance(Class<? extends TaskTO> taskClass) {\n+    public static TaskUtil getInstance(Class<? extends AbstractTaskTO> taskClass) {\n         TaskType type;\n         if (taskClass == PropagationTaskTO.class) {\n             type = TaskType.PROPAGATION;\n@@ -73,7 +73,7 @@ public static TaskUtil getInstance(Class<? extends TaskTO> taskClass) {\n         return getInstance(type);\n     }\n \n-    public static TaskUtil getInstance(final TaskTO taskTO) {\n+    public static TaskUtil getInstance(final AbstractTaskTO taskTO) {\n         return getInstance(taskTO.getClass());\n     }\n \n@@ -137,7 +137,7 @@ public <T extends Task> T newTask() {\n         return result;\n     }\n \n-    public <T extends TaskTO> Class<T> taskTOClass() {\n+    public <T extends AbstractTaskTO> Class<T> taskTOClass() {\n         Class<T> result = null;\n \n         switch (type) {\n@@ -163,7 +163,7 @@ public <T extends TaskTO> Class<T> taskTOClass() {\n         return result;\n     }\n \n-    public <T extends TaskTO> T newTaskTO() {\n+    public <T extends AbstractTaskTO> T newTaskTO() {\n         T result = null;\n \n         switch (type) {"},{"sha":"ed3f0e7649cb919a81c75a5a3bc4ac1daf4832fd","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -50,7 +50,7 @@\n import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.AttributeTO;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -235,7 +235,7 @@ protected RoleTO createRole(final RoleService roleService, final RoleTO newRoleT\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    protected <T extends PolicyTO> T createPolicy(final PolicyType policyType, final T policy) {\n+    protected <T extends AbstractPolicyTO> T createPolicy(final PolicyType policyType, final T policy) {\n         Response response = policyService.create(policyType, policy);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n             Exception ex = clientExceptionMapper.fromResponse(response);"},{"sha":"f24651a2e1a957dd6b7b05e2b9ebee4c7b5fe3fe","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -50,7 +50,7 @@\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n-import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.PolicyType;\n@@ -148,7 +148,7 @@ public void list() {\n \n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n-        for (TaskTO task : tasks) {\n+        for (AbstractTaskTO task : tasks) {\n             assertNotNull(task);\n         }\n     }\n@@ -161,7 +161,7 @@ public void paginatedList() {\n         assertFalse(tasks.isEmpty());\n         assertEquals(2, tasks.size());\n \n-        for (TaskTO task : tasks) {\n+        for (AbstractTaskTO task : tasks) {\n             assertNotNull(task);\n         }\n \n@@ -170,7 +170,7 @@ public void paginatedList() {\n         assertNotNull(tasks);\n         assertFalse(tasks.isEmpty());\n \n-        for (TaskTO task : tasks) {\n+        for (AbstractTaskTO task : tasks) {\n             assertNotNull(task);\n         }\n \n@@ -693,7 +693,7 @@ public void issueSYNCOPE230() {\n     private TaskExecTO execSyncTask(final Long taskId, final int maxWaitSeconds,\n             final boolean dryRun) {\n \n-        TaskTO taskTO = taskService.read(TaskType.SYNCHRONIZATION, taskId);\n+        AbstractTaskTO taskTO = taskService.read(TaskType.SYNCHRONIZATION, taskId);\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n \n@@ -901,7 +901,7 @@ public void bulkAction() {\n         final BulkAction bulkAction = new BulkAction();\n         bulkAction.setOperation(BulkAction.Type.DELETE);\n \n-        for (TaskTO taskTO : after) {\n+        for (AbstractTaskTO taskTO : after) {\n             bulkAction.addTarget(String.valueOf(taskTO.getId()));\n         }\n "},{"sha":"53d2459c187fc02bd1bfbcf81b9ab1cf210ab206","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -55,7 +55,7 @@\n import org.apache.syncope.common.to.MappingTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.PropagationRequestTO;\n import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n@@ -198,7 +198,7 @@ public void issue172() {\n         } finally {\n             for (PasswordPolicyTO policyTO : policies) {\n                 Response response = policyService.create(PolicyType.GLOBAL_PASSWORD, policyTO);\n-                PolicyTO cPolicyTO = getObject(response, PasswordPolicyTO.class, policyService);\n+                AbstractPolicyTO cPolicyTO = getObject(response, PasswordPolicyTO.class, policyService);\n                 assertNotNull(cPolicyTO);\n             }\n         }"},{"sha":"23f6234a760570e2a8b26e8902c2ad0341aeeb60","filename":"pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dee6705c448a612bf361173379428cdd23d8320a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dee6705c448a612bf361173379428cdd23d8320a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=dee6705c448a612bf361173379428cdd23d8320a","patch":"@@ -632,11 +632,6 @@ under the License.\n         <artifactId>jackson-databind</artifactId>\n         <version>${jackson.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>com.fasterxml.jackson.module</groupId>\n-        <artifactId>jackson-module-jaxb-annotations</artifactId>\n-        <version>${jackson.version}</version>\n-      </dependency>\n       <dependency>\n         <groupId>com.fasterxml.jackson.jaxrs</groupId>\n         <artifactId>jackson-jaxrs-json-provider</artifactId>"}]}