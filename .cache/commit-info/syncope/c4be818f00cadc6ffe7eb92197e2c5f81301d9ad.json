{"sha":"c4be818f00cadc6ffe7eb92197e2c5f81301d9ad","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM0YmU4MThmMDBjYWRjNmZmZTdlYjkyMTk3ZTJjNWY4MTMwMWQ5YWQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-21T11:32:06Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-21T11:32:06Z"},"message":"Better name for console preference cookie","tree":{"sha":"7e37e7b1fa5140415d827a76eee59b1cc30fb037","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7e37e7b1fa5140415d827a76eee59b1cc30fb037"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c4be818f00cadc6ffe7eb92197e2c5f81301d9ad","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c4be818f00cadc6ffe7eb92197e2c5f81301d9ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c4be818f00cadc6ffe7eb92197e2c5f81301d9ad","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c4be818f00cadc6ffe7eb92197e2c5f81301d9ad/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"0d745d4341d6770e0a5d1c305d623f6799f872e3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0d745d4341d6770e0a5d1c305d623f6799f872e3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0d745d4341d6770e0a5d1c305d623f6799f872e3"}],"stats":{"total":26,"additions":12,"deletions":14},"files":[{"sha":"125be046ca0e963e85de5822494746519d26ca8d","filename":"client/console/src/main/java/org/apache/syncope/client/console/PreferenceManager.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c4be818f00cadc6ffe7eb92197e2c5f81301d9ad/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c4be818f00cadc6ffe7eb92197e2c5f81301d9ad/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java?ref=c4be818f00cadc6ffe7eb92197e2c5f81301d9ad","patch":"@@ -40,26 +40,24 @@\n \n public class PreferenceManager implements Serializable {\n \n+    private static final long serialVersionUID = 3581434664555284193L;\n+\n     private static final Logger LOG = LoggerFactory.getLogger(PreferenceManager.class);\n \n-    private static final String PREFMAN_KEY = \"prefMan\";\n+    private static final String COOKIE_NAME = \"syncope2ConsolePrefs\";\n \n     private static final int ONE_YEAR_TIME = 60 * 60 * 24 * 365;\n \n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n     private static final TypeReference<Map<String, String>> MAP_TYPE_REF = new TypeReference<Map<String, String>>() {\n     };\n \n     private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[] { 10, 25, 50 });\n \n-    private static final long serialVersionUID = 1L;\n-\n-    private final ObjectMapper mapper;\n-\n     private final transient CookieUtils cookieUtils;\n \n     public PreferenceManager() {\n-        this.mapper = new ObjectMapper();\n-\n         CookieDefaults cookieDefaults = new CookieDefaults();\n         cookieDefaults.setMaxAge(ONE_YEAR_TIME);\n         this.cookieUtils = new CookieUtils(cookieDefaults);\n@@ -73,7 +71,7 @@ private Map<String, String> getPrefs(final String value) {\n         Map<String, String> prefs;\n         try {\n             if (StringUtils.isNotBlank(value)) {\n-                prefs = mapper.readValue(value, MAP_TYPE_REF);\n+                prefs = MAPPER.readValue(value, MAP_TYPE_REF);\n             } else {\n                 throw new Exception(\"Invalid cookie value '\" + value + \"'\");\n             }\n@@ -87,15 +85,15 @@ private Map<String, String> getPrefs(final String value) {\n \n     private String setPrefs(final Map<String, String> prefs) throws IOException {\n         StringWriter writer = new StringWriter();\n-        mapper.writeValue(writer, prefs);\n+        MAPPER.writeValue(writer, prefs);\n \n         return writer.toString();\n     }\n \n     public String get(final Request request, final String key) {\n         String result = null;\n \n-        String prefString = cookieUtils.load(PREFMAN_KEY);\n+        String prefString = cookieUtils.load(COOKIE_NAME);\n         if (prefString != null) {\n             final Map<String, String> prefs = getPrefs(new String(Base64.decodeBase64(prefString.getBytes())));\n             result = prefs.get(key);\n@@ -131,7 +129,7 @@ public List<String> getList(final Request request, final String key) {\n     public void set(final Request request, final Response response, final Map<String, List<String>> prefs) {\n         Map<String, String> current = new HashMap<>();\n \n-        String prefString = cookieUtils.load(PREFMAN_KEY);\n+        String prefString = cookieUtils.load(COOKIE_NAME);\n         if (prefString != null) {\n             current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n         }\n@@ -142,14 +140,14 @@ public void set(final Request request, final Response response, final Map<String\n         }\n \n         try {\n-            cookieUtils.save(PREFMAN_KEY, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+            cookieUtils.save(COOKIE_NAME, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n         } catch (IOException e) {\n             LOG.error(\"Could not save {} info: {}\", getClass().getSimpleName(), current, e);\n         }\n     }\n \n     public void set(final Request request, final Response response, final String key, final String value) {\n-        String prefString = cookieUtils.load(PREFMAN_KEY);\n+        String prefString = cookieUtils.load(COOKIE_NAME);\n \n         final Map<String, String> current = new HashMap<>();\n         if (prefString != null) {\n@@ -160,7 +158,7 @@ public void set(final Request request, final Response response, final String key\n         current.put(key, value);\n \n         try {\n-            cookieUtils.save(PREFMAN_KEY, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+            cookieUtils.save(COOKIE_NAME, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n         } catch (IOException e) {\n             LOG.error(\"Could not save {} info: {}\", getClass().getSimpleName(), current, e);\n         }"}]}