{"sha":"8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhmZTNjN2MyMDEwNWRmNjExMmExZWU3YjAyMDZjYjAwZTljMWEwNTQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-17T14:54:18Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-08-17T14:54:18Z"},"message":"[SYNCOPE-685] Pre: re-organize SyncPoliySpec","tree":{"sha":"a3456a24e7d789e25d0d2145542e470401e56f8c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a3456a24e7d789e25d0d2145542e470401e56f8c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"dbeb620824677b8eb4cab59d811630a0992a3f42","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dbeb620824677b8eb4cab59d811630a0992a3f42","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dbeb620824677b8eb4cab59d811630a0992a3f42"}],"stats":{"total":882,"additions":193,"deletions":689},"files":[{"sha":"a6859e8edee68eb95e785734613d93df2d16e147","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/BeanReflectionModal.java","status":"removed","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbeb620824677b8eb4cab59d811630a0992a3f42/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanReflectionModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbeb620824677b8eb4cab59d811630a0992a3f42/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanReflectionModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanReflectionModal.java?ref=dbeb620824677b8eb4cab59d811630a0992a3f42","patch":"@@ -1,36 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import java.io.Serializable;\n-import org.apache.wicket.PageReference;\n-import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n-\n-/**\n- * Modal window with Resource form.\n- */\n-public abstract class BeanReflectionModal extends ModalContent {\n-\n-    private static final long serialVersionUID = 1734415311027284222L;\n-\n-    public BeanReflectionModal(final Serializable bean, final ModalWindow window, final PageReference pageRef) {\n-        super(window, pageRef);\n-        add(new BeanReflectionPanel(\"bean\", bean));\n-    }\n-}"},{"sha":"4f3f1d519b3f6e03cca3297f3504e7126b261440","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/BeanReflectionPanel.java","status":"removed","additions":0,"deletions":339,"changes":339,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbeb620824677b8eb4cab59d811630a0992a3f42/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanReflectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbeb620824677b8eb4cab59d811630a0992a3f42/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanReflectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanReflectionPanel.java?ref=dbeb620824677b8eb4cab59d811630a0992a3f42","patch":"@@ -1,339 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.console.panels;\n-\n-import java.beans.PropertyDescriptor;\n-import java.io.Serializable;\n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.util.ArrayList;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.List;\n-import org.apache.syncope.client.console.commons.Constants;\n-import org.apache.syncope.client.console.rest.PolicyRestClient;\n-import org.apache.syncope.client.console.rest.SchemaRestClient;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AbstractFieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.form.SpinnerFieldPanel;\n-import org.apache.syncope.client.console.wicket.markup.html.list.AltListView;\n-import org.apache.syncope.common.lib.annotation.ClassList;\n-import org.apache.syncope.common.lib.annotation.SchemaList;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.list.ListItem;\n-import org.apache.wicket.markup.html.list.ListView;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.LoadableDetachableModel;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.model.util.ListModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.BeanUtils;\n-import org.springframework.util.ClassUtils;\n-import org.springframework.util.ReflectionUtils;\n-import org.springframework.util.ReflectionUtils.FieldCallback;\n-import org.springframework.util.ReflectionUtils.FieldFilter;\n-\n-public class BeanReflectionPanel extends Panel {\n-\n-    private static final long serialVersionUID = -3035998190456928143L;\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(BeanReflectionPanel.class);\n-\n-    @SpringBean\n-    private SchemaRestClient schemaRestClient;\n-\n-    @SpringBean\n-    private PolicyRestClient policyRestClient;\n-\n-    private final IModel<List<String>> userSchemas = new LoadableDetachableModel<List<String>>() {\n-\n-        private static final long serialVersionUID = -2012833443695917883L;\n-\n-        @Override\n-        protected List<String> load() {\n-            return schemaRestClient.getPlainSchemaNames();\n-        }\n-    };\n-\n-    private final IModel<List<String>> groupSchemas = new LoadableDetachableModel<List<String>>() {\n-\n-        private static final long serialVersionUID = 5275935387613157437L;\n-\n-        @Override\n-        protected List<String> load() {\n-            return schemaRestClient.getPlainSchemaNames();\n-        }\n-    };\n-\n-    private final IModel<List<String>> correlationRules = new LoadableDetachableModel<List<String>>() {\n-\n-        private static final long serialVersionUID = 5275935387613157437L;\n-\n-        @Override\n-        protected List<String> load() {\n-            return policyRestClient.getCorrelationRuleClasses();\n-        }\n-    };\n-\n-    public BeanReflectionPanel(final String id, final Serializable bean) {\n-        super(id);\n-\n-        final List<FieldWrapper> items = new ArrayList<>();\n-        ReflectionUtils.doWithFields(bean.getClass(),\n-                new FieldCallback() {\n-\n-                    @Override\n-                    public void doWith(final Field field) throws IllegalArgumentException, IllegalAccessException {\n-                        FieldWrapper fieldWrapper = new FieldWrapper();\n-                        fieldWrapper.setName(field.getName());\n-                        fieldWrapper.setType(field.getType());\n-\n-                        final SchemaList schemaList = field.getAnnotation(SchemaList.class);\n-                        fieldWrapper.setSchemaList(schemaList);\n-\n-                        final ClassList classList = field.getAnnotation(ClassList.class);\n-                        fieldWrapper.setClassList(classList);\n-\n-                        items.add(fieldWrapper);\n-                    }\n-                },\n-                new FieldFilter() {\n-\n-                    @Override\n-                    public boolean matches(final Field field) {\n-                        return !Modifier.isStatic(field.getModifiers()) && !\"serialVersionUID\".equals(field.getName());\n-                    }\n-                });\n-\n-        final ListView<FieldWrapper> policies = new AltListView<FieldWrapper>(\"fields\", items) {\n-\n-            private static final long serialVersionUID = 9101744072914090143L;\n-\n-            @Override\n-            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-            protected void populateItem(final ListItem<FieldWrapper> item) {\n-                final FieldWrapper field = item.getModelObject();\n-\n-                final PropertyDescriptor propDesc = BeanUtils.getPropertyDescriptor(bean.getClass(), field.getName());\n-\n-                item.add(new Label(\"label\", new ResourceModel(field.getName())));\n-\n-                AbstractFieldPanel component;\n-                try {\n-                    if (field.getClassList() != null) {\n-                        component = new AjaxDropDownChoicePanel(\"field\", field.getName(), new PropertyModel(bean,\n-                                field.getName()));\n-\n-                        final List<String> rules = correlationRules.getObject();\n-\n-                        if (rules != null && !rules.isEmpty()) {\n-                            ((AjaxDropDownChoicePanel) component).setChoices(correlationRules.getObject());\n-                        }\n-\n-                        item.add(component);\n-\n-                        item.add(getActivationControl(\n-                                component,\n-                                propDesc.getReadMethod().invoke(bean, new Object[] {}) != null,\n-                                null,\n-                                null));\n-\n-                    } else if (field.getType().isEnum()) {\n-                        component = new AjaxDropDownChoicePanel(\"field\", field.getName(), new PropertyModel(bean,\n-                                field.getName()));\n-\n-                        final Serializable[] values = (Serializable[]) field.getType().getEnumConstants();\n-\n-                        if (values != null && values.length > 0) {\n-                            ((AjaxDropDownChoicePanel) component).setChoices(Arrays.asList(values));\n-                        }\n-\n-                        item.add(component);\n-\n-                        item.add(getActivationControl(\n-                                component,\n-                                (Enum<?>) propDesc.getReadMethod().invoke(bean, new Object[] {}) != null,\n-                                values[0],\n-                                values[0]));\n-\n-                    } else if (ClassUtils.isAssignable(Boolean.class, field.getType())) {\n-                        item.add(new AjaxCheckBoxPanel(\"check\", field.getName(),\n-                                new PropertyModel<Boolean>(bean, field.getName())));\n-\n-                        item.add(new Label(\"field\", new Model(null)));\n-                    } else if (Collection.class.isAssignableFrom(field.getType())) {\n-                        if (field.getSchemaList() != null) {\n-                            final List<String> values = new ArrayList<>();\n-                            if (field.getName().charAt(0) == 'r') {\n-                                values.addAll(groupSchemas.getObject());\n-\n-                                if (field.getSchemaList().extended()) {\n-                                    values.add(\"name\");\n-                                }\n-                            } else {\n-                                values.addAll(userSchemas.getObject());\n-\n-                                if (field.getSchemaList().extended()) {\n-                                    values.add(\"key\");\n-                                    values.add(\"username\");\n-                                }\n-                            }\n-\n-                            component = new AjaxPalettePanel(\"field\", new PropertyModel(bean, field.getName()),\n-                                    new ListModel<>(values));\n-                            item.add(component);\n-\n-                            Collection<?> collection = (Collection) propDesc.getReadMethod().invoke(bean);\n-                            item.add(getActivationControl(component,\n-                                    !collection.isEmpty(), new ArrayList<String>(), new ArrayList<String>()));\n-                        } else {\n-                            final FieldPanel panel = new AjaxTextFieldPanel(\"panel\", field.getName(),\n-                                    new Model<String>(null));\n-                            panel.setRequired(true);\n-\n-                            component = new MultiFieldPanel<String>(\"field\",\n-                                    new PropertyModel(bean, field.getName()), panel);\n-\n-                            item.add(component);\n-\n-                            final List<String> reinitializedValue = new ArrayList<String>();\n-\n-                            reinitializedValue.add(\"\");\n-\n-                            item.add(getActivationControl(component,\n-                                    !((Collection) propDesc.getReadMethod().invoke(bean, new Object[] {})).isEmpty(),\n-                                    new ArrayList<String>(), (Serializable) reinitializedValue));\n-                        }\n-                    } else if (ClassUtils.isAssignable(Number.class, field.getType())) {\n-                        component = new SpinnerFieldPanel<Number>(\"field\", field.getName(),\n-                                (Class<Number>) field.getType(), new PropertyModel<Number>(bean, field.getName()),\n-                                null, null);\n-                        item.add(component);\n-\n-                        item.add(getActivationControl(component,\n-                                (Integer) propDesc.getReadMethod().invoke(bean, new Object[] {}) > 0, 0, 0));\n-                    } else if (field.getType().equals(String.class)) {\n-                        component = new AjaxTextFieldPanel(\"field\", field.getName(),\n-                                new PropertyModel(bean, field.getName()));\n-\n-                        item.add(component);\n-\n-                        item.add(getActivationControl(component,\n-                                propDesc.getReadMethod().invoke(bean, new Object[] {}) != null, null, null));\n-                    } else {\n-                        item.add(new AjaxCheckBoxPanel(\"check\", field.getName(), new Model()));\n-                        item.add(new Label(\"field\", new Model(null)));\n-                    }\n-                } catch (Exception e) {\n-                    LOG.error(\"Error retrieving bean fields\", e);\n-                }\n-            }\n-        };\n-\n-        add(policies);\n-    }\n-\n-    private <T extends Serializable> AjaxCheckBoxPanel getActivationControl(final AbstractFieldPanel<T> panel,\n-            final Boolean checked, final T defaultModelObject, final T reinitializedValue) {\n-\n-        final AjaxCheckBoxPanel check = new AjaxCheckBoxPanel(\"check\", \"check\", new Model<Boolean>(checked));\n-\n-        panel.setEnabled(checked);\n-\n-        check.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n-\n-            private static final long serialVersionUID = -1107858522700306810L;\n-\n-            @Override\n-            protected void onUpdate(final AjaxRequestTarget target) {\n-                if (check.getModelObject()) {\n-                    panel.setEnabled(true);\n-                    panel.setModelObject(reinitializedValue);\n-                } else {\n-                    panel.setModelObject(defaultModelObject);\n-                    panel.setEnabled(false);\n-                }\n-\n-                target.add(panel);\n-            }\n-        });\n-\n-        return check;\n-    }\n-\n-    private static class FieldWrapper implements Serializable {\n-\n-        private static final long serialVersionUID = -6770429509752964215L;\n-\n-        private Class<?> type;\n-\n-        private String name;\n-\n-        private transient SchemaList schemaList;\n-\n-        private transient ClassList classList;\n-\n-        public String getName() {\n-            return name;\n-        }\n-\n-        public void setName(final String name) {\n-            this.name = name;\n-        }\n-\n-        public Class<?> getType() {\n-            return type;\n-        }\n-\n-        public void setType(final Class<?> type) {\n-            this.type = type;\n-        }\n-\n-        public SchemaList getSchemaList() {\n-            return schemaList;\n-        }\n-\n-        public void setSchemaList(final SchemaList schemaList) {\n-            this.schemaList = schemaList;\n-        }\n-\n-        public ClassList getClassList() {\n-            return classList;\n-        }\n-\n-        public void setClassList(final ClassList classList) {\n-            this.classList = classList;\n-        }\n-    }\n-}"},{"sha":"07528ea5286b187b66a72c50bc7067975381661e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/annotation/ClassList.java","status":"removed","additions":0,"deletions":26,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbeb620824677b8eb4cab59d811630a0992a3f42/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FClassList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbeb620824677b8eb4cab59d811630a0992a3f42/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FClassList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FClassList.java?ref=dbeb620824677b8eb4cab59d811630a0992a3f42","patch":"@@ -1,26 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.annotation;\n-\n-import java.lang.annotation.Retention;\n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\n-\n-@Retention(RUNTIME)\n-public @interface ClassList {\n-}"},{"sha":"74697312e81214abdd8c50bff06060b87614cc9e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/annotation/SchemaList.java","status":"removed","additions":0,"deletions":28,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbeb620824677b8eb4cab59d811630a0992a3f42/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbeb620824677b8eb4cab59d811630a0992a3f42/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fannotation%2FSchemaList.java?ref=dbeb620824677b8eb4cab59d811630a0992a3f42","patch":"@@ -1,28 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.annotation;\n-\n-import java.lang.annotation.Retention;\n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\n-\n-@Retention(RUNTIME)\n-public @interface SchemaList {\n-\n-    boolean extended() default false;\n-}"},{"sha":"33a0c62c68be1fa868c8cbdc30fb63352f791f9d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/AbstractPolicySpec.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAbstractPolicySpec.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -28,7 +28,6 @@\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n-import org.apache.syncope.common.lib.annotation.SchemaList;\n \n @XmlType\n public abstract class AbstractPolicySpec implements PolicySpec {\n@@ -43,7 +42,6 @@ public abstract class AbstractPolicySpec implements PolicySpec {\n     /**\n      * User attribute values not permitted.\n      */\n-    @SchemaList\n     protected final List<String> schemasNotPermitted = new ArrayList<>();\n \n     /**"},{"sha":"5a3d3097404e8c0f130d05f7de9b3a5665325107","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/SyncPolicySpec.java","status":"modified","additions":18,"deletions":24,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpec.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -18,26 +18,32 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n+import java.util.HashMap;\n+import java.util.Map;\n import javax.xml.bind.annotation.XmlType;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Predicate;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlType\n public class SyncPolicySpec implements PolicySpec {\n \n     private static final long serialVersionUID = -3144027171719498127L;\n \n-    private final List<SyncPolicySpecItem> items = new ArrayList<>();\n+    private ConflictResolutionAction conflictResolutionAction;\n \n     /**\n-     * Conflict resolution action.\n+     * Associates anyTypeKey to either:\n+     * <ol>\n+     * <li>Java class name, implementing {@code SyncCorrelationRule}</li>\n+     * <li>JSON array containing plain schema names - this will be used to feed\n+     * {@code PlainAttrsSyncCorrelationRule}</li>\n+     * </ol>\n      */\n-    private ConflictResolutionAction conflictResolutionAction;\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, String> correlationRules = new HashMap<>();\n \n     public ConflictResolutionAction getConflictResolutionAction() {\n         return conflictResolutionAction == null\n@@ -49,20 +55,8 @@ public void setConflictResolutionAction(final ConflictResolutionAction conflictR\n         this.conflictResolutionAction = conflictResolutionAction;\n     }\n \n-    public SyncPolicySpecItem getItem(final String anyTypeKey) {\n-        return CollectionUtils.find(items, new Predicate<SyncPolicySpecItem>() {\n-\n-            @Override\n-            public boolean evaluate(final SyncPolicySpecItem item) {\n-                return anyTypeKey != null && anyTypeKey.equals(item.getAnyTypeKey());\n-            }\n-        });\n-    }\n-\n-    @XmlElementWrapper(name = \"items\")\n-    @XmlElement(name = \"item\")\n-    @JsonProperty(\"items\")\n-    public List<SyncPolicySpecItem> getItems() {\n-        return items;\n+    @JsonProperty\n+    public Map<String, String> getCorrelationRules() {\n+        return correlationRules;\n     }\n }"},{"sha":"4acb61baf3dec8d4321a40c14e390a67dab0b0e4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/SyncPolicySpecItem.java","status":"removed","additions":0,"deletions":67,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dbeb620824677b8eb4cab59d811630a0992a3f42/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpecItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dbeb620824677b8eb4cab59d811630a0992a3f42/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpecItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSyncPolicySpecItem.java?ref=dbeb620824677b8eb4cab59d811630a0992a3f42","patch":"@@ -1,67 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.common.lib.types;\n-\n-import com.fasterxml.jackson.annotation.JsonProperty;\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlType;\n-import org.apache.syncope.common.lib.AbstractBaseBean;\n-import org.apache.syncope.common.lib.annotation.ClassList;\n-import org.apache.syncope.common.lib.annotation.SchemaList;\n-\n-@XmlType\n-public class SyncPolicySpecItem extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 692466729711976485L;\n-\n-    private String anyTypeKey;\n-\n-    @SchemaList(extended = true)\n-    private final List<String> altSearchSchemas = new ArrayList<>();\n-\n-    @ClassList\n-    private String javaRule;\n-\n-    public String getAnyTypeKey() {\n-        return anyTypeKey;\n-    }\n-\n-    public void setAnyTypeKey(final String anyTypeKey) {\n-        this.anyTypeKey = anyTypeKey;\n-    }\n-\n-    public String getJavaRule() {\n-        return javaRule;\n-    }\n-\n-    public void setJavaRule(final String javaRule) {\n-        this.javaRule = javaRule;\n-    }\n-\n-    @XmlElementWrapper(name = \"altSearchSchemas\")\n-    @XmlElement(name = \"altSearchSchema\")\n-    @JsonProperty(\"altSearchSchemas\")\n-    public List<String> getAltSearchSchemas() {\n-        return altSearchSchemas;\n-    }\n-\n-}"},{"sha":"d6432e2ce1c4c3447d89b315336a3a9015db1ec6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":10,"deletions":16,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import static org.apache.syncope.core.logic.init.ImplementationClassNamesLoader.Type;\n+\n import java.io.IOException;\n import java.lang.reflect.Method;\n import java.net.URI;\n@@ -128,22 +130,14 @@ public SyncopeTO info() {\n         syncopeTO.setGroupProvisioningManager(gProvisioningManager.getClass().getName());\n         syncopeTO.setVirAttrCache(virAttrCache.getClass().getName());\n \n-        syncopeTO.getReportlets().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.REPORTLET));\n-        syncopeTO.getTaskJobs().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.TASKJOBDELEGATE));\n-        syncopeTO.getPropagationActions().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.PROPAGATION_ACTIONS));\n-        syncopeTO.getSyncActions().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_ACTIONS));\n-        syncopeTO.getPushActions().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.PUSH_ACTIONS));\n-        syncopeTO.getSyncCorrelationRules().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.SYNC_CORRELATION_RULE));\n-        syncopeTO.getPushCorrelationRules().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.PUSH_CORRELATION_RULE));\n-        syncopeTO.getValidators().addAll(\n-                classNamesLoader.getClassNames(ImplementationClassNamesLoader.Type.VALIDATOR));\n+        syncopeTO.getReportlets().addAll(classNamesLoader.getClassNames(Type.REPORTLET));\n+        syncopeTO.getTaskJobs().addAll(classNamesLoader.getClassNames(Type.TASKJOBDELEGATE));\n+        syncopeTO.getPropagationActions().addAll(classNamesLoader.getClassNames(Type.PROPAGATION_ACTIONS));\n+        syncopeTO.getSyncActions().addAll(classNamesLoader.getClassNames(Type.SYNC_ACTIONS));\n+        syncopeTO.getPushActions().addAll(classNamesLoader.getClassNames(Type.PUSH_ACTIONS));\n+        syncopeTO.getSyncCorrelationRules().addAll(classNamesLoader.getClassNames(Type.SYNC_CORRELATION_RULE));\n+        syncopeTO.getPushCorrelationRules().addAll(classNamesLoader.getClassNames(Type.PUSH_CORRELATION_RULE));\n+        syncopeTO.getValidators().addAll(classNamesLoader.getClassNames(Type.VALIDATOR));\n \n         Set<String> htmlTemplates = new HashSet<>();\n         Set<String> textTemplates = new HashSet<>();"},{"sha":"1b53e5cb058735caf1a02e20d7f406fe025296eb","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ImplementationClassNamesLoader.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FImplementationClassNamesLoader.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -62,9 +62,6 @@ public enum Type {\n \n     }\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(ImplementationClassNamesLoader.class);\n \n     private Map<Type, Set<String>> classNames;\n@@ -87,7 +84,7 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncCorrelationRule.class));\n-        // Remove once SYNCOPE-631 is done\n+        // Remove once SYNCOPE-470 is done\n         //scanner.addIncludeFilter(new AssignableTypeFilter(PushCorrelationRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PropagationActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));\n@@ -121,7 +118,7 @@ public void load() {\n                     classNames.get(Type.SYNC_CORRELATION_RULE).add(bd.getBeanClassName());\n                 }\n \n-                // Uncomment when SYNCOPE-631 is done\n+                // Uncomment when SYNCOPE-470 is done\n                 /* if (PushCorrelationRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                  * classNames.get(Type.PUSH_CORRELATION_RULES).add(metadata.getClassName());\n                  * } */"},{"sha":"603cd019b4fd88b8b5aa809122a575babdc924b7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PolicyTest.java","status":"modified","additions":23,"deletions":16,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPolicyTest.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -22,12 +22,15 @@\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.util.List;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n-import org.apache.syncope.common.lib.types.SyncPolicySpecItem;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n@@ -55,9 +58,20 @@ public void findAll() {\n     }\n \n     @Test\n-    public void findById() {\n-        Policy policy = policyDAO.find(1L);\n+    public void findByKey() {\n+        SyncPolicy policy = policyDAO.find(3L);\n         assertNotNull(\"findById did not work\", policy);\n+\n+        SyncPolicySpec spec = policy.getSpecification(SyncPolicySpec.class);\n+        assertNotNull(spec);\n+\n+        String rule = spec.getCorrelationRules().get(AnyTypeKind.USER.name());\n+        assertNotNull(rule);\n+        String[] plainSchemas = POJOHelper.deserialize(rule, String[].class);\n+        assertNotNull(plainSchemas);\n+        assertEquals(2, plainSchemas.length);\n+        assertTrue(ArrayUtils.contains(plainSchemas, \"username\"));\n+        assertTrue(ArrayUtils.contains(plainSchemas, \"firstname\"));\n     }\n \n     @Test\n@@ -89,15 +103,8 @@ public void create() {\n \n         SyncPolicySpec syncPolicySpec = new SyncPolicySpec();\n \n-        SyncPolicySpecItem item = new SyncPolicySpecItem();\n-        item.setAnyTypeKey(anyTypeDAO.findUser().getKey());\n-        item.setJavaRule(syncURuleName);\n-        syncPolicySpec.getItems().add(item);\n-\n-        item = new SyncPolicySpecItem();\n-        item.setAnyTypeKey(anyTypeDAO.findGroup().getKey());\n-        item.setJavaRule(syncGRuleName);\n-        syncPolicySpec.getItems().add(item);\n+        syncPolicySpec.getCorrelationRules().put(anyTypeDAO.findUser().getKey(), syncURuleName);\n+        syncPolicySpec.getCorrelationRules().put(anyTypeDAO.findGroup().getKey(), syncGRuleName);\n \n         policy.setSpecification(syncPolicySpec);\n         policy.setDescription(\"Sync policy\");\n@@ -106,10 +113,10 @@ public void create() {\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.SYNC, policy.getType());\n-        assertEquals(syncURuleName,\n-                (policy.getSpecification(SyncPolicySpec.class)).getItem(anyTypeDAO.findUser().getKey()).getJavaRule());\n-        assertEquals(syncGRuleName,\n-                (policy.getSpecification(SyncPolicySpec.class)).getItem(anyTypeDAO.findGroup().getKey()).getJavaRule());\n+        assertEquals(syncURuleName, (policy.getSpecification(SyncPolicySpec.class)).\n+                getCorrelationRules().get(anyTypeDAO.findUser().getKey()));\n+        assertEquals(syncGRuleName, (policy.getSpecification(SyncPolicySpec.class)).\n+                getCorrelationRules().get(anyTypeDAO.findGroup().getKey()));\n     }\n \n     @Test"},{"sha":"5977c9a95addabb5284942ccff11f6128ade8451","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -101,23 +101,23 @@ under the License.\n   \n   <!-- sample policies -->\n   <Policy DTYPE=\"SyncPolicy\" id=\"1\" description=\"a sync policy\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\",\"items\":[]}'/>\n+          specification='{\"conflictResolutionAction\":\"IGNORE\"'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"2\" description=\"a password policy\" type=\"PASSWORD\" \n           specification='{\"historyLength\":1,\"maxLength\":0,\"minLength\":8,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":false,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":true}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"ALL\",\"items\":[{\"anyTypeKey\":\"USER\",\"javaRule\":null,\"altSearchSchemas\":[\"username\",\"firstname\"]}]}'/>\n+          specification='{\"conflictResolutionAction\":\"ALL\",\"correlationRules\":{\"USER\":\"[\\\"username\\\",\\\"firstname\\\"]\"}}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" \n           specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":false,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":false,\"uppercaseRequired\":false,\"mustStartWithDigit\":false,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":false,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[], \"allowNullPassword\":true}'/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"an account policy\" type=\"ACCOUNT\" \n           specification='{\"maxLength\":0,\"minLength\":0,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":0,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[],\"suffixesNotPermitted\":[]}'/>\n   <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" \n           specification='{\"maxLength\":0,\"minLength\":4,\"pattern\":null,\"allUpperCase\":false,\"allLowerCase\":false,\"propagateSuspension\":false,\"maxAuthenticationAttempts\":3,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[]}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"7\" description=\"sync policy 1\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\",\"items\":[]}'/>\n+          specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n   <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" \n           specification='{\"historyLength\":0,\"maxLength\":0,\"minLength\":10,\"nonAlphanumericRequired\":true,\"alphanumericRequired\":false,\"digitRequired\":true,\"lowercaseRequired\":true,\"uppercaseRequired\":true,\"mustStartWithDigit\":true,\"mustntStartWithDigit\":false,\"mustEndWithDigit\":true,\"mustntEndWithDigit\":false,\"mustStartWithNonAlpha\":false,\"mustStartWithAlpha\":false,\"mustntStartWithNonAlpha\":false,\"mustntStartWithAlpha\":false,\"mustEndWithNonAlpha\":false,\"mustEndWithAlpha\":false,\"mustntEndWithNonAlpha\":false,\"mustntEndWithAlpha\":false,\"wordsNotPermitted\":[],\"schemasNotPermitted\":[],\"prefixesNotPermitted\":[\"notpermitted1\",\"notpermitted2\"],\"suffixesNotPermitted\":[],\"allowNullPassword\":false}'/>\n   <Policy DTYPE=\"SyncPolicy\" id=\"9\" description=\"sync policy for java rule\" type=\"SYNC\" \n-          specification='{\"conflictResolutionAction\":\"IGNORE\",\"items\":[]}'/>\n+          specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n \n   <RelationshipType name=\"inclusion\" description=\"Models the act that an object is included in another\"/>\n   <RelationshipType name=\"neighborhood\"/>"},{"sha":"fa53bbd318222a07bc3054739d71bb464ff7469b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -45,9 +45,6 @@\n @Component\n public class PolicyDataBinderImpl implements PolicyDataBinder {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(PolicyDataBinder.class);\n \n     @Autowired"},{"sha":"1af195ece253b900c5f5fbe83aa7786f085a793f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/PlainAttrsSyncCorrelationRule.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPlainAttrsSyncCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPlainAttrsSyncCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FPlainAttrsSyncCorrelationRule.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.sync;\n+\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n+import org.apache.syncope.core.provisioning.api.sync.SyncCorrelationRule;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+\n+public class PlainAttrsSyncCorrelationRule implements SyncCorrelationRule {\n+\n+    private final List<String> plainSchemaNames;\n+\n+    private final Provision provision;\n+\n+    public PlainAttrsSyncCorrelationRule(final String[] plainSchemaNames, final Provision provision) {\n+        this.plainSchemaNames = Arrays.asList(plainSchemaNames);\n+        this.provision = provision;\n+    }\n+\n+    @Override\n+    public SearchCond getSearchCond(final ConnectorObject connObj) {\n+        // search for external attribute's name/value of each specified name\n+        Map<String, Attribute> extValues = new HashMap<>();\n+\n+        for (MappingItem item : MappingUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)) {\n+            extValues.put(item.getIntAttrName(), connObj.getAttributeByName(item.getExtAttrName()));\n+        }\n+\n+        // search for user/group by attribute(s) specified in the policy\n+        SearchCond searchCond = null;\n+\n+        for (String schema : plainSchemaNames) {\n+            Attribute value = extValues.get(schema);\n+\n+            if (value == null) {\n+                throw new IllegalArgumentException(\n+                        \"Connector object does not contains the attributes to perform the search: \" + schema);\n+            }\n+\n+            AttributeCond.Type type;\n+            String expression = null;\n+\n+            if (value.getValue() == null || value.getValue().isEmpty()\n+                    || (value.getValue().size() == 1 && value.getValue().get(0) == null)) {\n+\n+                type = AttributeCond.Type.ISNULL;\n+            } else {\n+                type = AttributeCond.Type.EQ;\n+                expression = value.getValue().size() > 1\n+                        ? value.getValue().toString()\n+                        : value.getValue().get(0).toString();\n+            }\n+\n+            SearchCond nodeCond;\n+            // users: just id or username can be selected to be used\n+            // groups: just id or name can be selected to be used\n+            if (\"key\".equalsIgnoreCase(schema)\n+                    || \"username\".equalsIgnoreCase(schema) || \"name\".equalsIgnoreCase(schema)) {\n+\n+                AnyCond cond = new AnyCond();\n+                cond.setSchema(schema);\n+                cond.setType(type);\n+                cond.setExpression(expression);\n+\n+                nodeCond = SearchCond.getLeafCond(cond);\n+            } else {\n+                AttributeCond cond = new AttributeCond();\n+                cond.setSchema(schema);\n+                cond.setType(type);\n+                cond.setExpression(expression);\n+\n+                nodeCond = SearchCond.getLeafCond(cond);\n+            }\n+\n+            searchCond = searchCond == null\n+                    ? nodeCond\n+                    : SearchCond.getAndCond(searchCond, nodeCond);\n+        }\n+\n+        return searchCond;\n+    }\n+\n+}"},{"sha":"7fd244b0eb416d63de4b879271cfbb7cecb0d789","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncUtils.java","status":"modified","additions":22,"deletions":104,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncUtils.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -20,26 +20,22 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashMap;\n import java.util.List;\n-import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -230,113 +226,40 @@ private List<Long> findByConnObjectKeyItem(\n         return result;\n     }\n \n-    private List<Long> search(final SearchCond searchCond, final AnyTypeKind type) {\n-        final List<Long> result = new ArrayList<>();\n+    private List<Long> findByCorrelationRule(\n+            final ConnectorObject connObj, final SyncCorrelationRule rule, final AnyTypeKind type) {\n+\n+        List<Long> result = new ArrayList<>();\n \n         List<Any<?, ?, ?>> anys = searchDAO.search(\n-                SyncopeConstants.FULL_ADMIN_REALMS, searchCond, Collections.<OrderByClause>emptyList(), type);\n+                SyncopeConstants.FULL_ADMIN_REALMS,\n+                rule.getSearchCond(connObj),\n+                Collections.<OrderByClause>emptyList(), type);\n         for (Any<?, ?, ?> any : anys) {\n             result.add(any.getKey());\n         }\n \n         return result;\n     }\n \n-    private List<Long> findByCorrelationRule(\n-            final ConnectorObject connObj, final SyncCorrelationRule rule, final AnyTypeKind type) {\n-\n-        return search(rule.getSearchCond(connObj), type);\n-    }\n-\n-    private List<Long> findByAnySearch(\n-            final ConnectorObject connObj,\n-            final List<String> altSearchSchemas,\n-            final Provision provision,\n-            final AnyTypeKind anyTypeKind) {\n-\n-        // search for external attribute's name/value of each specified name\n-        Map<String, Attribute> extValues = new HashMap<>();\n-\n-        for (MappingItem item : MappingUtils.getMappingItems(provision, MappingPurpose.SYNCHRONIZATION)) {\n-            extValues.put(item.getIntAttrName(), connObj.getAttributeByName(item.getExtAttrName()));\n-        }\n-\n-        // search for user/group by attribute(s) specified in the policy\n-        SearchCond searchCond = null;\n-\n-        for (String schema : altSearchSchemas) {\n-            Attribute value = extValues.get(schema);\n-\n-            if (value == null) {\n-                throw new IllegalArgumentException(\n-                        \"Connector object does not contains the attributes to perform the search: \" + schema);\n-            }\n-\n-            AttributeCond.Type type;\n-            String expression = null;\n-\n-            if (value.getValue() == null || value.getValue().isEmpty()\n-                    || (value.getValue().size() == 1 && value.getValue().get(0) == null)) {\n-\n-                type = AttributeCond.Type.ISNULL;\n-            } else {\n-                type = AttributeCond.Type.EQ;\n-                expression = value.getValue().size() > 1\n-                        ? value.getValue().toString()\n-                        : value.getValue().get(0).toString();\n-            }\n-\n-            SearchCond nodeCond;\n-            // users: just id or username can be selected to be used\n-            // groups: just id or name can be selected to be used\n-            if (\"key\".equalsIgnoreCase(schema)\n-                    || \"username\".equalsIgnoreCase(schema) || \"name\".equalsIgnoreCase(schema)) {\n-\n-                AnyCond cond = new AnyCond();\n-                cond.setSchema(schema);\n-                cond.setType(type);\n-                cond.setExpression(expression);\n-\n-                nodeCond = SearchCond.getLeafCond(cond);\n-            } else {\n-                AttributeCond cond = new AttributeCond();\n-                cond.setSchema(schema);\n-                cond.setType(type);\n-                cond.setExpression(expression);\n-\n-                nodeCond = SearchCond.getLeafCond(cond);\n-            }\n-\n-            searchCond = searchCond == null\n-                    ? nodeCond\n-                    : SearchCond.getAndCond(searchCond, nodeCond);\n-        }\n-\n-        return search(searchCond, anyTypeKind);\n-    }\n-\n     private SyncCorrelationRule getCorrelationRule(final Provision provision, final SyncPolicySpec policySpec) {\n-        String clazz = policySpec.getItem(provision.getAnyType().getKey()) == null\n-                ? null\n-                : policySpec.getItem(provision.getAnyType().getKey()).getJavaRule();\n-\n-        SyncCorrelationRule res = null;\n+        SyncCorrelationRule result = null;\n \n-        if (StringUtils.isNotBlank(clazz)) {\n-            try {\n-                res = (SyncCorrelationRule) Class.forName(clazz).newInstance();\n-            } catch (Exception e) {\n-                LOG.error(\"Failure instantiating correlation rule class '{}'\", clazz, e);\n+        String syncCorrelationRule = policySpec.getCorrelationRules().get(provision.getAnyType().getKey());\n+        if (StringUtils.isNotBlank(syncCorrelationRule)) {\n+            if (syncCorrelationRule.charAt(0) == '[') {\n+                result = new PlainAttrsSyncCorrelationRule(\n+                        POJOHelper.deserialize(syncCorrelationRule, String[].class), provision);\n+            } else {\n+                try {\n+                    result = (SyncCorrelationRule) Class.forName(syncCorrelationRule).newInstance();\n+                } catch (Exception e) {\n+                    LOG.error(\"Failure instantiating correlation rule class '{}'\", syncCorrelationRule, e);\n+                }\n             }\n         }\n \n-        return res;\n-    }\n-\n-    private List<String> getAltSearchSchemas(final Provision provision, final SyncPolicySpec policySpec) {\n-        return policySpec.getItem(provision.getAnyType().getKey()) == null\n-                ? Collections.<String>emptyList()\n-                : policySpec.getItem(provision.getAnyType().getKey()).getAltSearchSchemas();\n+        return result;\n     }\n \n     /**\n@@ -360,17 +283,12 @@ public List<Long> findExisting(\n         }\n \n         SyncCorrelationRule syncRule = null;\n-        List<String> altSearchSchemas = null;\n-\n         if (syncPolicySpec != null) {\n             syncRule = getCorrelationRule(provision, syncPolicySpec);\n-            altSearchSchemas = getAltSearchSchemas(provision, syncPolicySpec);\n         }\n \n         return syncRule == null\n-                ? altSearchSchemas == null || altSearchSchemas.isEmpty()\n-                        ? findByConnObjectKeyItem(uid, provision, anyUtils)\n-                        : findByAnySearch(connObj, altSearchSchemas, provision, anyUtils.getAnyTypeKind())\n+                ? findByConnObjectKeyItem(uid, provision, anyUtils)\n                 : findByCorrelationRule(connObj, syncRule, anyUtils.getAnyTypeKind());\n     }\n "},{"sha":"95701aeedbb2c85029b8aa9ec4b23df6be0a9aec","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PolicyITCase.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPolicyITCase.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.lib.types.SyncPolicySpec;\n-import org.apache.syncope.common.lib.types.SyncPolicySpecItem;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -47,12 +46,8 @@ public class PolicyITCase extends AbstractITCase {\n     private SyncPolicyTO buildSyncPolicyTO() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n \n-        SyncPolicySpecItem item = new SyncPolicySpecItem();\n-        item.setAnyTypeKey(AnyTypeKind.USER.name());\n-        item.setJavaRule(TestSyncRule.class.getName());\n-\n         SyncPolicySpec spec = new SyncPolicySpec();\n-        spec.getItems().add(item);\n+        spec.getCorrelationRules().put(AnyTypeKind.USER.name(), TestSyncRule.class.getName());\n \n         policy.setSpecification(spec);\n         policy.setDescription(\"Sync policy\");\n@@ -116,7 +111,7 @@ public void create() {\n         assertNotNull(policyTO);\n         assertEquals(PolicyType.SYNC, policyTO.getType());\n         assertEquals(TestSyncRule.class.getName(),\n-                policyTO.getSpecification().getItem(AnyTypeKind.USER.name()).getJavaRule());\n+                policyTO.getSpecification().getCorrelationRules().get(AnyTypeKind.USER.name()));\n     }\n \n     @Test\n@@ -169,7 +164,7 @@ public void delete() {\n \n     @Test\n     public void getCorrelationRules() {\n-        assertEquals(1, syncopeService.info().getSyncCorrelationRules().size());\n+        assertEquals(2, syncopeService.info().getSyncCorrelationRules().size());\n     }\n \n     @Test"},{"sha":"d97eaed88586791fcb3b925b6ff5483c4d06049e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":1,"deletions":11,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8fe3c7c20105df6112a1ee7b0206cb00e9c1a054/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=8fe3c7c20105df6112a1ee7b0206cb00e9c1a054","patch":"@@ -55,7 +55,6 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n-import org.apache.syncope.common.lib.types.SyncPolicySpecItem;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.wrap.ResourceKey;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n@@ -505,16 +504,7 @@ public void issueSYNCOPE258() {\n         // Add a custom correlation rule\n         // -----------------------------\n         SyncPolicyTO policyTO = policyService.read(9L);\n-\n-        SyncPolicySpecItem item = policyTO.getSpecification().getItem(AnyTypeKind.USER.name());\n-        if (item == null) {\n-            item = new SyncPolicySpecItem();\n-            item.setAnyTypeKey(AnyTypeKind.USER.name());\n-\n-            policyTO.getSpecification().getItems().add(item);\n-        }\n-        item.setJavaRule(TestSyncRule.class.getName());\n-\n+        policyTO.getSpecification().getCorrelationRules().put(AnyTypeKind.USER.name(), TestSyncRule.class.getName());\n         policyService.update(policyTO);\n         // -----------------------------\n "}]}