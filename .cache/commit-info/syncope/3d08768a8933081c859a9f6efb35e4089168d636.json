{"sha":"3d08768a8933081c859a9f6efb35e4089168d636","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjNkMDg3NjhhODkzMzA4MWM4NTlhOWY2ZWZiMzVlNDA4OTE2OGQ2MzY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-22T13:33:22Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-22T13:33:22Z"},"message":"Removing (or silencing when not possible) unchecked calls from everywhere but console - too much crowded\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1436910 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"cdbc07625bc09162c56231624749656b074c1375","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cdbc07625bc09162c56231624749656b074c1375"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3d08768a8933081c859a9f6efb35e4089168d636","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d08768a8933081c859a9f6efb35e4089168d636","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3d08768a8933081c859a9f6efb35e4089168d636","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3d08768a8933081c859a9f6efb35e4089168d636/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f28d8fc10bcdb01af18cd5f7dbdb4f7c5cea4a70"}],"stats":{"total":1123,"additions":596,"deletions":527},"files":[{"sha":"ac8f39f5449f070edf0583309f8c54774d8959eb","filename":"client/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -53,8 +53,8 @@ under the License.\n       <artifactId>javax.ws.rs-api</artifactId>\n     </dependency>\n \n-\t<dependency>\n-\t  <groupId>org.apache.cxf</groupId>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n     </dependency>\n "},{"sha":"ed1e228a705116df6cef29251624133282f389f4","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n@@ -28,7 +27,6 @@\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.core.Response;\r\n import javax.xml.bind.annotation.XmlEnum;\r\n-\r\n import org.apache.syncope.common.to.AbstractSchemaTO;\r\n import org.apache.syncope.common.types.AttributableType;\r\n \r"},{"sha":"6047681cc34382426017df0f5d5665fd970aa72c","filename":"common/src/main/java/org/apache/syncope/common/to/MappingTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\r\n import java.util.Collection;\r\n import java.util.List;\r\n-\r\n import org.apache.syncope.common.AbstractBaseBean;\r\n import org.apache.syncope.common.types.IntMappingType;\r\n \r\n@@ -47,6 +46,7 @@ public void setAccountLink(String accountLink) {\n         this.accountLink = accountLink;\r\n     }\r\n \r\n+    @SuppressWarnings(\"unchecked\")\r\n     public <T extends MappingItemTO> T getAccountIdItem() {\r\n         T accountIdItem = null;\r\n         for (MappingItemTO item : getItems()) {\r\n@@ -103,6 +103,7 @@ public boolean setPasswordItem(final MappingItemTO passwordItem) {\n         }\r\n     }\r\n \r\n+    @SuppressWarnings(\"unchecked\")\r\n     public <T extends MappingItemTO> List<T> getItems() {\r\n         return (List<T>) items;\r\n     }\r"},{"sha":"623b36695be616be335d68bdda2e5e605b9cce75","filename":"common/src/main/java/org/apache/syncope/common/to/MembershipTO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -58,7 +58,7 @@ public boolean removeResource(String resource) {\n \r\n     @Override\r\n     public Set<String> getResources() {\r\n-        return Collections.EMPTY_SET;\r\n+        return Collections.<String>emptySet();\r\n     }\r\n \r\n     @Override\r\n@@ -77,7 +77,7 @@ public boolean removePropagationTO(String resource) {\n \r\n     @Override\r\n     public List<PropagationTO> getPropagationTOs() {\r\n-        return Collections.EMPTY_LIST;\r\n+        return Collections.<PropagationTO>emptyList();\r\n     }\r\n \r\n     @Override\r"},{"sha":"2d215898826e0c87e9ed2b9f50b7feeb7022dfbd","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -52,6 +52,7 @@ public Class<? extends Enum> getSubCategory() {\n             return subCategory;\r\n         }\r\n \r\n+        @SuppressWarnings(\"unchecked\")\r\n         public EnumSet<? extends Enum<?>> getSubCategoryElements() {\r\n             return EnumSet.allOf(getSubCategory());\r\n         }\r\n@@ -232,7 +233,9 @@ public enum UserRequestSubCategory {\n         read,\r\n         update,\r\n         delete,\r\n-        isCreateAllowed,}\r\n+        isCreateAllowed\r\n+\r\n+    }\r\n \r\n     public enum WorkflowSubCategory {\r\n \r"},{"sha":"66edf0a6f9242357f68687ec29cc3cab5e05bb23","filename":"common/src/main/java/org/apache/syncope/common/types/AuditLoggerName.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -75,6 +75,7 @@ public String toLoggerName() {\n                 append(result.name()).toString();\r\n     }\r\n \r\n+    @SuppressWarnings(\"unchecked\")\r\n     public static AuditLoggerName fromLoggerName(final String loggerName)\r\n             throws IllegalArgumentException, ParseException {\r\n \r"},{"sha":"c99f58fa1306215e6fb4389d9f948d5a567236a8","filename":"common/src/main/java/org/apache/syncope/common/util/AttributableOperations.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -49,6 +49,7 @@ public final class AttributableOperations {\n     private AttributableOperations() {\r\n     }\r\n \r\n+    @SuppressWarnings(\"unchecked\")\r\n     public static <T extends AbstractAttributableTO> T clone(final T original) {\r\n         return (T) SerializationUtils.clone(original);\r\n     }\r\n@@ -69,7 +70,7 @@ private static void populate(final Map<String, AttributeTO> updatedAttrs,\n \r\n             Set<String> originalValues = originalAttrs.containsKey(entry.getKey())\r\n                     ? new HashSet<String>(originalAttrs.get(entry.getKey()).getValues())\r\n-                    : Collections.EMPTY_SET;\r\n+                    : Collections.<String>emptySet();\r\n \r\n             if (!updatedValues.equals(originalValues)) {\r\n                 // avoid unwanted inputs\r"},{"sha":"5511e0506aa2e7cc3d998796df132f514b844d7c","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -26,7 +26,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.mod.AbstractAttributableMod;\n@@ -186,7 +185,10 @@ public <T extends AbstractAttributableTO> T getAttributableTO(final ConnectorObj\n      * @param attrUtil AttributableUtil\n      * @param <T> user/role\n      * @return modifications for the user/role to be updated\n+     * @throws NotFoundException if given id does not correspond to a T instance\n+     * @throws UnauthorizedRoleException if there are no enough entitlements to access the T instance\n      */\n+    @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n     public <T extends AbstractAttributableMod> T getAttributableMod(final Long id, final ConnectorObject obj,\n             final AbstractAttributableTO original, final SyncTask syncTask, final AttributableUtil attrUtil)"},{"sha":"4dede13465a33d7417267645e8b832f0b27e3f64","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -24,7 +24,6 @@\n import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.core.notification.NotificationJob;\n import org.apache.syncope.core.persistence.beans.Report;\n@@ -214,6 +213,7 @@ public void unregisterJob(final Report report) {\n         unregisterJob(getJobName(report));\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n     public void load() {\n         // 1. jobs for SchedTasks"},{"sha":"225305edf264384d2b463c40d689b97dd64e6478","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,14 +21,12 @@\n import java.text.DateFormat;\n import java.text.DecimalFormat;\n import java.util.Date;\n-\n import javax.persistence.Basic;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n import org.apache.commons.lang.time.DateUtils;\n@@ -169,6 +167,7 @@ public <T extends AbstractAttrValue> void parseValue(final AbstractSchema schema\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T> T getValue() {\n         return (T) (booleanValue != null\n                 ? getBooleanValue()"},{"sha":"0be695ae05957d74ed3fd9003eb34b460840e6bb","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -29,6 +29,7 @@ public abstract class AbstractAttributable extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -4801685541488201119L;\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractAttr> T getAttribute(final String schemaName) {\n         T result = null;\n         for (Iterator<? extends AbstractAttr> itor = getAttributes().iterator(); result == null && itor.hasNext();) {\n@@ -40,6 +41,7 @@ public <T extends AbstractAttr> T getAttribute(final String schemaName) {\n         return result;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractDerAttr> T getDerivedAttribute(final String derivedSchemaName) {\n         T result = null;\n         for (Iterator<? extends AbstractDerAttr> itor = getDerivedAttributes().iterator();\n@@ -56,6 +58,7 @@ public <T extends AbstractDerAttr> T getDerivedAttribute(final String derivedSch\n         return result;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractVirAttr> T getVirtualAttribute(final String virtualSchemaName) {\n         T result = null;\n         for (Iterator<? extends AbstractVirAttr> itor = getVirtualAttributes().iterator();"},{"sha":"d53347d515dda30e7891c7e5cb8657654e10ce93","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractMapping.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.persistence.beans;\n \n import java.util.List;\n-\n import javax.persistence.Cacheable;\n import javax.persistence.MappedSuperclass;\n-\n import org.apache.syncope.common.types.IntMappingType;\n import org.identityconnectors.framework.common.objects.Uid;\n \n@@ -51,6 +49,7 @@ public void setAccountLink(final String accountLink) {\n         this.accountLink = accountLink;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractMappingItem> T getAccountIdItem() {\n         T accountIdItem = null;\n         for (AbstractMappingItem item : getItems()) {"},{"sha":"4ebb7f6957cc91b189d777ef66b13f92b86452bc","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MAttr.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -30,7 +29,6 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.validation.Valid;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -69,6 +67,7 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n@@ -82,6 +81,7 @@ public <T extends AbstractAttributable> void setOwner(final T owner) {\n         this.owner = (Membership) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;\n@@ -116,11 +116,13 @@ public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue)\n         return result;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> void setValues(final List<T> attributeValues) {\n \n@@ -133,6 +135,7 @@ public <T extends AbstractAttrValue> void setValues(final List<T> attributeValue\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> T getUniqueValue() {\n         return (T) uniqueValue;"},{"sha":"3156deabad21c4a0eb0cd98cc7b9189b30200731","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MAttrUniqueValue.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -23,7 +23,6 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrUniqueValue;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n@@ -48,6 +47,7 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n@@ -61,14 +61,15 @@ public <T extends AbstractAttr> void setAttribute(final T attribute) {\n         this.attribute = (MAttr) attribute;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;\n     }\n \n     @Override\n     public <T extends AbstractSchema> void setSchema(final T schema) {\n-                if (!(schema instanceof MSchema)) {\n+        if (!(schema instanceof MSchema)) {\n             throw new ClassCastException(\"expected type MSchema, found: \" + schema.getClass().getName());\n         }\n "},{"sha":"651444480ca0e22a444d29729b0d4eeb34194fed","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MAttrValue.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrValue.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -24,16 +24,18 @@\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.validation.constraints.NotNull;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n \n @Entity\n @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n public class MAttrValue extends AbstractAttrValue {\n \n+    private static final long serialVersionUID = -7188881172631198385L;\n+\n     @Id\n     private Long id;\n+\n     @ManyToOne\n     @NotNull\n     private MAttr attribute;\n@@ -43,11 +45,13 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> void setAttribute(T attribute) {\n         if (!(attribute instanceof MAttr)) {"},{"sha":"510b5dbfd76ea49b4c5ddae185430629d67fa70f","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MDerAttr.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMDerAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,7 +21,6 @@\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n@@ -30,31 +29,35 @@\n public class MDerAttr extends AbstractDerAttr {\n \n     private static final long serialVersionUID = -443509121923448129L;\n+\n     @ManyToOne\n     private Membership owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private MDerSchema derivedSchema;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> void setOwner(T owner) {\n+    public <T extends AbstractAttributable> void setOwner(final T owner) {\n         if (!(owner instanceof Membership)) {\n             throw new ClassCastException(\"expected type Membership, found: \" + owner.getClass().getName());\n         }\n         this.owner = (Membership) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractDerSchema> T getDerivedSchema() {\n         return (T) derivedSchema;\n     }\n \n     @Override\n-    public <T extends AbstractDerSchema> void setDerivedSchema(T derivedSchema) {\n+    public <T extends AbstractDerSchema> void setDerivedSchema(final T derivedSchema) {\n         if (!(derivedSchema instanceof MDerSchema)) {\n             throw new ClassCastException(\"expected type MDerSchema, found: \" + derivedSchema.getClass().getName());\n         }"},{"sha":"1d063fcb580e4fad4512a33ce028ad32b6ebcd86","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MVirAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMVirAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,11 +20,9 @@\n \n import java.util.Collections;\n import java.util.List;\n-\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n@@ -40,6 +38,7 @@ public class MVirAttr extends AbstractVirAttr {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private MVirSchema virtualSchema;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n@@ -54,6 +53,7 @@ public <T extends AbstractAttributable> void setOwner(final T owner) {\n         this.owner = (Membership) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractVirSchema> T getVirtualSchema() {\n         return (T) virtualSchema;"},{"sha":"ab850a8d2a1f23d9a85bfd6bbdf0ce87a19d5313","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/Membership.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMembership.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -22,7 +22,6 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n@@ -31,7 +30,6 @@\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.Valid;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -123,6 +121,7 @@ public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setAttributes(final List<? extends AbstractAttr> attributes) {\n         this.attributes.clear();\n@@ -153,6 +152,7 @@ public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAttributes) {\n         this.derivedAttributes.clear();\n@@ -184,6 +184,7 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n         return virtualAttributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n         this.virtualAttributes.clear();\n@@ -214,6 +215,7 @@ public Set<String> getResourceNames() {\n \n     @Override\n     public void setResources(final Set<ExternalResource> resources) {\n+        // Memberships cannot be directly associated to resources.\n     }\n \n     @Override"},{"sha":"48d9cd35a9ef8a3df5b7c832253bc53ca86653b4","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RAttr.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -30,7 +29,6 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.validation.Valid;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -69,6 +67,7 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n@@ -82,6 +81,7 @@ public <T extends AbstractAttributable> void setOwner(final T owner) {\n         this.owner = (SyncopeRole) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;\n@@ -113,11 +113,13 @@ public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue)\n         return values.remove((RAttrValue) attributeValue);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> void setValues(final List<T> attributeValues) {\n \n@@ -130,6 +132,7 @@ public <T extends AbstractAttrValue> void setValues(final List<T> attributeValue\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> T getUniqueValue() {\n         return (T) uniqueValue;"},{"sha":"4a78b9464c0fb0fd0e1be4dbef2f9397d8ae7791","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RAttrUniqueValue.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrUniqueValue.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -23,7 +23,6 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrUniqueValue;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n@@ -32,10 +31,13 @@\n public class RAttrUniqueValue extends AbstractAttrUniqueValue {\n \n     private static final long serialVersionUID = 4681561795607192855L;\n+\n     @Id\n     private Long id;\n+\n     @OneToOne(optional = false)\n     private RAttr attribute;\n+\n     @ManyToOne(optional = false)\n     @JoinColumn(name = \"schema_name\")\n     private RSchema schema;\n@@ -45,6 +47,7 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n@@ -58,6 +61,7 @@ public <T extends AbstractAttr> void setAttribute(final T attribute) {\n         this.attribute = (RAttr) attribute;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;"},{"sha":"3d3c8446c1507d9198544c40ace4d1bcf9424ff2","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RAttrValue.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttrValue.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -24,16 +24,18 @@\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.validation.constraints.NotNull;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n \n @Entity\n @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n public class RAttrValue extends AbstractAttrValue {\n \n+    private static final long serialVersionUID = -766808291128424707L;\n+\n     @Id\n     private Long id;\n+\n     @ManyToOne\n     @NotNull\n     private RAttr attribute;\n@@ -43,11 +45,13 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> void setAttribute(T attribute) {\n         if (!(attribute instanceof RAttr)) {"},{"sha":"96c65150abe0d12b9ab27b684202c80e5480d507","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RDerAttr.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRDerAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,7 +21,6 @@\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n@@ -30,32 +29,36 @@\n public class RDerAttr extends AbstractDerAttr {\n \n     private static final long serialVersionUID = 8007080005675899946L;\n+\n     @ManyToOne\n     private SyncopeRole owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER, optional = false)\n     private RDerSchema derivedSchema;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> void setOwner(T owner) {\n+    public <T extends AbstractAttributable> void setOwner(final T owner) {\n         if (!(owner instanceof SyncopeRole)) {\n             throw new ClassCastException(\"expected type SyncopeRole, found: \" + owner.getClass().getName());\n         }\n \n         this.owner = (SyncopeRole) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractDerSchema> T getDerivedSchema() {\n         return (T) derivedSchema;\n     }\n \n     @Override\n-    public <T extends AbstractDerSchema> void setDerivedSchema(T derivedSchema) {\n+    public <T extends AbstractDerSchema> void setDerivedSchema(final T derivedSchema) {\n         if (!(derivedSchema instanceof RDerSchema)) {\n             throw new ClassCastException(\"expected type RDerSchema, found: \" + derivedSchema.getClass().getName());\n         }"},{"sha":"63061718f737dda98902277ee7af0c531424c1a3","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RMapping.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMapping.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -82,6 +82,7 @@ public <T extends AbstractMappingItem> void setAccountIdItem(final T accountIdIt\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractMappingItem> List<T> getItems() {\n         return (List<T>) this.items;\n     }\n@@ -103,6 +104,7 @@ public <T extends AbstractMappingItem> boolean removeItem(final T item) {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractMappingItem> void setItems(final List<T> items) {\n         this.items.clear();\n         if (items != null && !items.isEmpty()) {"},{"sha":"d23f9c17b0375aa4fdc6670c15d3a57b32b8269c","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RMappingItem.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRMappingItem.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -41,6 +41,7 @@ public Long getId() {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractMapping> T getMapping() {\n         return (T) mapping;\n     }"},{"sha":"2280319c0a4abbe975dc1773f0715a17468d96f0","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RVirAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRVirAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,11 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n@@ -40,6 +38,7 @@ public class RVirAttr extends AbstractVirAttr {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private RVirSchema virtualSchema;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n@@ -53,6 +52,7 @@ public <T extends AbstractAttributable> void setOwner(final T owner) {\n         this.owner = (SyncopeRole) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractVirSchema> T getVirtualSchema() {\n         return (T) virtualSchema;"},{"sha":"0aec1a60e5d110bd6b15b37681bfb5e94d5f87e2","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -25,7 +25,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n@@ -43,7 +42,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n@@ -254,6 +252,7 @@ public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setAttributes(final List<? extends AbstractAttr> attributes) {\n         this.attributes.clear();\n@@ -283,11 +282,12 @@ public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAttributes) {\n-        this.attributes.clear();\n-        if (attributes != null && !attributes.isEmpty()) {\n-            this.attributes.addAll((List<RAttr>) attributes);\n+        this.derivedAttributes.clear();\n+        if (derivedAttributes != null && !derivedAttributes.isEmpty()) {\n+            this.derivedAttributes.addAll((List<RDerAttr>) derivedAttributes);\n         }\n     }\n \n@@ -312,6 +312,7 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n         return virtualAttributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n         this.virtualAttributes.clear();\n@@ -333,6 +334,7 @@ public void setInheritAttributes(final boolean inheritAttributes) {\n      *\n      * @return a list of inherited and only inherited attributes.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public List<RAttr> findInheritedAttributes() {\n         final Map<RSchema, RAttr> result = new HashMap<RSchema, RAttr>();\n \n@@ -371,6 +373,7 @@ public void setInheritDerivedAttributes(final boolean inheritDerivedAttributes)\n      *\n      * @return a list of inherited and only inherited attributes.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public List<RDerAttr> findInheritedDerivedAttributes() {\n         final Map<RDerSchema, RDerAttr> result = new HashMap<RDerSchema, RDerAttr>();\n \n@@ -410,6 +413,7 @@ public void setInheritVirtualAttributes(final boolean inheritVirtualAttributes)\n      *\n      * @return a list of inherited and only inherited attributes.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public List<RVirAttr> findInheritedVirtualAttributes() {\n         final Map<RVirSchema, RVirAttr> result = new HashMap<RVirSchema, RVirAttr>();\n "},{"sha":"49b4f0d73b809d887d42e3f492d1df5b870e5528","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -28,7 +28,6 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n-\n import javax.crypto.BadPaddingException;\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n@@ -54,7 +53,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n@@ -306,6 +304,7 @@ public List<? extends AbstractAttr> getAttributes() {\n         return attributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setAttributes(final List<? extends AbstractAttr> attributes) {\n         this.attributes.clear();\n@@ -336,6 +335,7 @@ public List<? extends AbstractDerAttr> getDerivedAttributes() {\n         return derivedAttributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setDerivedAttributes(final List<? extends AbstractDerAttr> derivedAttributes) {\n         this.derivedAttributes.clear();\n@@ -365,6 +365,7 @@ public List<? extends AbstractVirAttr> getVirtualAttributes() {\n         return virtualAttributes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public void setVirtualAttributes(final List<? extends AbstractVirAttr> virtualAttributes) {\n         this.virtualAttributes.clear();\n@@ -459,9 +460,7 @@ public void setCreationDate(final Date creationDate) {\n     }\n \n     public Integer getFailedLogins() {\n-        return failedLogins != null\n-                ? failedLogins\n-                : 0;\n+        return failedLogins == null ? 0 : failedLogins;\n     }\n \n     public void setFailedLogins(final Integer failedLogins) {"},{"sha":"7642ba95c5ef9f2174a9e66671b32b243fb51e87","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n@@ -30,7 +29,6 @@\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.validation.Valid;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -90,6 +88,7 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n@@ -103,6 +102,7 @@ public <T extends AbstractAttributable> void setOwner(final T owner) {\n         this.owner = (SyncopeUser) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;\n@@ -134,11 +134,13 @@ public <T extends AbstractAttrValue> boolean removeValue(final T attributeValue)\n         return values.remove((UAttrValue) attributeValue);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> void setValues(final List<T> attributeValues) {\n \n@@ -151,6 +153,7 @@ public <T extends AbstractAttrValue> void setValues(final List<T> attributeValue\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> T getUniqueValue() {\n         return (T) uniqueValue;"},{"sha":"bc7ffd86f797cc3362b442add75cea34a2afa0ab","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UAttrUniqueValue.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrUniqueValue.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -23,7 +23,6 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrUniqueValue;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n@@ -32,10 +31,13 @@\n public class UAttrUniqueValue extends AbstractAttrUniqueValue {\n \n     private static final long serialVersionUID = -64080804563305387L;\n+\n     @Id\n     private Long id;\n+\n     @OneToOne(optional = false)\n     private UAttr attribute;\n+\n     @ManyToOne(optional = false)\n     @JoinColumn(name = \"schema_name\")\n     private USchema schema;\n@@ -45,6 +47,7 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n@@ -58,6 +61,7 @@ public <T extends AbstractAttr> void setAttribute(final T attribute) {\n         this.attribute = (UAttr) attribute;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractSchema> T getSchema() {\n         return (T) schema;"},{"sha":"d8826a72ad89158e3365413015c15fec9bbc086b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UAttrValue.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttrValue.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -24,16 +24,18 @@\n import javax.persistence.InheritanceType;\n import javax.persistence.ManyToOne;\n import javax.validation.constraints.NotNull;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n \n @Entity\n @Inheritance(strategy = InheritanceType.TABLE_PER_CLASS)\n public class UAttrValue extends AbstractAttrValue {\n \n+    private static final long serialVersionUID = -6259576015647897446L;\n+\n     @Id\n     private Long id;\n+\n     @ManyToOne\n     @NotNull\n     private UAttr attribute;\n@@ -43,11 +45,13 @@ public Long getId() {\n         return id;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> T getAttribute() {\n         return (T) attribute;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttr> void setAttribute(final T attribute) {\n         if (!(attribute instanceof UAttr)) {"},{"sha":"b82738516657705269260af1a7bd922cf00143a0","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UDerAttr.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUDerAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,7 +21,6 @@\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n@@ -30,32 +29,36 @@\n public class UDerAttr extends AbstractDerAttr {\n \n     private static final long serialVersionUID = 4723044452807292060L;\n+\n     @ManyToOne\n     private SyncopeUser owner;\n+\n     @ManyToOne(fetch = FetchType.EAGER)\n     private UDerSchema derivedSchema;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> void setOwner(T owner) {\n+    public <T extends AbstractAttributable> void setOwner(final T owner) {\n         if (!(owner instanceof SyncopeUser)) {\n             throw new ClassCastException(\"expected type SyncopeUser, found: \" + owner.getClass().getName());\n         }\n \n         this.owner = (SyncopeUser) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractDerSchema> T getDerivedSchema() {\n         return (T) derivedSchema;\n     }\n \n     @Override\n-    public <T extends AbstractDerSchema> void setDerivedSchema(T derivedSchema) {\n+    public <T extends AbstractDerSchema> void setDerivedSchema(final T derivedSchema) {\n         if (!(derivedSchema instanceof UDerSchema)) {\n             throw new ClassCastException(\"expected type UDerSchema, found: \" + derivedSchema.getClass().getName());\n         }"},{"sha":"96ab641c12f0b3e5b3138fd760419ab882d47d1d","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UMapping.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMapping.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,14 +20,12 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.CascadeType;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n@@ -101,6 +99,7 @@ public boolean setPasswordItem(final UMappingItem passwordItem) {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractMappingItem> List<T> getItems() {\n         return (List<T>) this.items;\n     }\n@@ -122,6 +121,7 @@ public <T extends AbstractMappingItem> boolean removeItem(final T item) {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractMappingItem> void setItems(final List<T> items) {\n         this.items.clear();\n         if (items != null && !items.isEmpty()) {"},{"sha":"9e3109883be71416a67cd15b690a80eeff97dd57","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UMappingItem.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUMappingItem.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,7 +21,6 @@\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n \n@@ -42,6 +41,7 @@ public Long getId() {\n     }\n \n     @Override\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractMapping> T getMapping() {\n         return (T) mapping;\n     }"},{"sha":"342a08f333cd858a56409ec702f6ddfed1419bf7","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UVirAttr.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUVirAttr.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,11 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.ManyToOne;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n@@ -40,6 +38,7 @@ public class UVirAttr extends AbstractVirAttr {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private UVirSchema virtualSchema;\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttributable> T getOwner() {\n         return (T) owner;\n@@ -53,6 +52,7 @@ public <T extends AbstractAttributable> void setOwner(final T owner) {\n         this.owner = (SyncopeUser) owner;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractVirSchema> T getVirtualSchema() {\n         return (T) virtualSchema;"},{"sha":"fbe17956a1631fc3c7ffce65f8c7e12fefd79cf4","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/SchemaDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaDAO.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.dao;\n \n import java.util.List;\n-\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;"},{"sha":"c2d4a039e31bf79f775364322a445b0dd703cd00","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/VirSchemaDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FVirSchemaDAO.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.dao;\n \n import java.util.List;\n-\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;"},{"sha":"5874db5646fbcbee3e84e5c95d88939030fe9ce3","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AbstractAttributableDAOImpl.java","status":"modified","additions":16,"deletions":14,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -26,10 +26,9 @@\n import java.util.List;\n import java.util.Set;\n import java.util.regex.Pattern;\n-\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.commons.jexl2.parser.Parser;\n import org.apache.commons.jexl2.parser.ParserConstants;\n import org.apache.commons.jexl2.parser.Token;\n@@ -59,7 +58,7 @@ public abstract class AbstractAttributableDAOImpl extends AbstractDAOImpl implem\n      *\n      * @param attrValue value to be split\n      * @param literals literals/tokens\n-     * @return\n+     * @return splitted value\n      */\n     private List<String> split(final String attrValue, final List<String> literals) {\n         final List<String> attrValues = new ArrayList<String>();\n@@ -80,6 +79,7 @@ private List<String> split(final String attrValue, final List<String> literals)\n      *\n      * @param expression derived schema expression\n      * @param value derived attribute value\n+     * @param attrUtil USER / ROLE\n      * @return where clauses to use to build the query\n      * @throws InvalidSearchConditionException in case of errors retrieving identifiers\n      */\n@@ -97,7 +97,6 @@ private Set<String> getWhereClause(final String expression, final String value,\n         // Get schema names and literals\n         Token token;\n         while ((token = parser.getNextToken()) != null && StringUtils.hasText(token.toString())) {\n-\n             if (token.kind == ParserConstants.STRING_LITERAL) {\n                 literals.add(token.toString().substring(1, token.toString().length() - 1));\n             }\n@@ -111,7 +110,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n         Collections.sort(literals, new Comparator<String>() {\n \n             @Override\n-            public int compare(String t, String t1) {\n+            public int compare(final String t, final String t1) {\n                 if (t == null && t1 == null) {\n                     return 0;\n                 } else if (t != null && t1 == null) {\n@@ -203,7 +202,7 @@ public int compare(String t, String t1) {\n         return clauses;\n     }\n \n-    protected abstract <T extends AbstractAttributable> T find(final Long id);\n+    protected abstract <T extends AbstractAttributable> T findInternal(final Long id);\n \n     @Override\n     public <T extends AbstractAttributable> List<T> findByAttrValue(final String schemaName,\n@@ -212,19 +211,20 @@ public <T extends AbstractAttributable> List<T> findByAttrValue(final String sch\n         AbstractSchema schema = schemaDAO.find(schemaName, attrUtil.schemaClass());\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaName);\n-            return Collections.EMPTY_LIST;\n+            return Collections.<T>emptyList();\n         }\n \n         final String entityName = schema.isUniqueConstraint()\n                 ? attrUtil.attrUniqueValueClass().getName()\n                 : attrUtil.attrValueClass().getName();\n \n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + entityName + \" e\"\n+        TypedQuery<AbstractAttrValue> query = entityManager.createQuery(\"SELECT e FROM \" + entityName + \" e\"\n                 + \" WHERE e.attribute.schema.name = :schemaName \" + \" AND (e.stringValue IS NOT NULL\"\n                 + \" AND e.stringValue = :stringValue)\" + \" OR (e.booleanValue IS NOT NULL\"\n                 + \" AND e.booleanValue = :booleanValue)\" + \" OR (e.dateValue IS NOT NULL\"\n                 + \" AND e.dateValue = :dateValue)\" + \" OR (e.longValue IS NOT NULL\" + \" AND e.longValue = :longValue)\"\n-                + \" OR (e.doubleValue IS NOT NULL\" + \" AND e.doubleValue = :doubleValue)\");\n+                + \" OR (e.doubleValue IS NOT NULL\" + \" AND e.doubleValue = :doubleValue)\",\n+                AbstractAttrValue.class);\n \n         query.setParameter(\"schemaName\", schemaName);\n         query.setParameter(\"stringValue\", attrValue.getStringValue());\n@@ -240,7 +240,7 @@ public <T extends AbstractAttributable> List<T> findByAttrValue(final String sch\n         query.setParameter(\"doubleValue\", attrValue.getDoubleValue());\n \n         List<T> result = new ArrayList<T>();\n-        for (AbstractAttrValue value : (List<AbstractAttrValue>) query.getResultList()) {\n+        for (AbstractAttrValue value : query.getResultList()) {\n             T subject = value.getAttribute().getOwner();\n             if (!result.contains(subject)) {\n                 result.add(subject);\n@@ -276,8 +276,10 @@ public <T extends AbstractAttributable> AbstractAttributable findByAttrUniqueVal\n      * specify a derived attribute expression you must be quite sure that string literals used to build the expression\n      * cannot be found into the attribute values used to replace attribute schema names used as identifiers.\n      *\n+     * @param <T> user / role\n      * @param schemaName derived schema name\n      * @param value derived attribute value\n+     * @param attrUtil AttributableUtil\n      * @return list of users / roles\n      * @throws InvalidSearchConditionException in case of errors retrieving schema names used to buid the derived schema\n      * expression.\n@@ -290,7 +292,7 @@ public <T extends AbstractAttributable> List<T> findByDerAttrValue(final String\n         AbstractDerSchema schema = derSchemaDAO.find(schemaName, attrUtil.derSchemaClass());\n         if (schema == null) {\n             LOG.error(\"Invalid schema name '{}'\", schemaName);\n-            return Collections.EMPTY_LIST;\n+            return Collections.<T>emptyList();\n         }\n \n         // query string\n@@ -321,7 +323,7 @@ public <T extends AbstractAttributable> List<T> findByDerAttrValue(final String\n         final List<T> result = new ArrayList<T>();\n \n         for (Object userId : query.getResultList()) {\n-            T subject = find(Long.parseLong(userId.toString()));\n+            T subject = findInternal(Long.parseLong(userId.toString()));\n             if (!result.contains(subject)) {\n                 result.add(subject);\n             }\n@@ -334,8 +336,8 @@ public <T extends AbstractAttributable> List<T> findByDerAttrValue(final String\n     public <T extends AbstractAttributable> List<T> findByResource(final ExternalResource resource,\n             final Class<T> reference) {\n \n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e \"\n-                + \"WHERE :resource MEMBER OF e.resources\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e \"\n+                + \"WHERE :resource MEMBER OF e.resources\", reference);\n         query.setParameter(\"resource\", resource);\n \n         return query.getResultList();"},{"sha":"0867d0b16fddeaf09c524a9fb0d9391d8c55e903","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttrDAOImpl.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.dao.AttrDAO;\n import org.springframework.stereotype.Repository;\n@@ -37,7 +35,7 @@ public <T extends AbstractAttr> T find(final Long id, final Class<T> reference)\n \n     @Override\n     public <T extends AbstractAttr> List<T> findAll(final Class<T> reference) {\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n "},{"sha":"4ce43a16200d851bbeeb9f4a49fd073bd52c0c4a","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttrValueDAOImpl.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrValueDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrValueDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrValueDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.dao.AttrValueDAO;\n import org.springframework.stereotype.Repository;\n@@ -31,14 +29,12 @@ public class AttrValueDAOImpl extends AbstractDAOImpl implements AttrValueDAO {\n \n     @Override\n     public <T extends AbstractAttrValue> T find(final Long id, final Class<T> reference) {\n-\n         return entityManager.find(reference, id);\n     }\n \n     @Override\n     public <T extends AbstractAttrValue> List<T> findAll(final Class<T> reference) {\n-\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n@@ -49,7 +45,6 @@ public <T extends AbstractAttrValue> T save(final T attributeValue) {\n \n     @Override\n     public <T extends AbstractAttrValue> void delete(final Long id, final Class<T> reference) {\n-\n         T attributeValue = find(id, reference);\n         if (attributeValue == null) {\n             return;\n@@ -60,7 +55,6 @@ public <T extends AbstractAttrValue> void delete(final Long id, final Class<T> r\n \n     @Override\n     public <T extends AbstractAttrValue> void delete(final T attributeValue) {\n-\n         if (attributeValue.getAttribute() != null) {\n             attributeValue.getAttribute().removeValue(attributeValue);\n         }"},{"sha":"a37fe665033a37fd025c56c4c69969b4eccc4e25","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttributableSearchDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -26,14 +26,12 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import javax.persistence.Entity;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n import javax.validation.ValidationException;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-\n import org.apache.syncope.common.search.AttributableCond;\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.EntitlementCond;\n@@ -205,6 +203,7 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n         }\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private <T extends AbstractAttributable> List<T> doSearch(final Set<Long> adminRoles, final NodeCond nodeCond,\n             final int page, final int itemsPerPage, final AttributableUtil attrUtil) {\n \n@@ -532,6 +531,7 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n         return query.toString();\n     }\n \n+    @SuppressWarnings(\"rawtypes\")\n     private String getQuery(final AttributableCond cond, final boolean not, final List<Object> parameters,\n             final AttributableUtil attrUtil) {\n "},{"sha":"de0dec94601bf50feabba04e02d7cbb0aec35932","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ConfDAOImpl.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConfDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n@@ -32,7 +30,6 @@ public class ConfDAOImpl extends AbstractDAOImpl implements ConfDAO {\n \n     @Override\n     public SyncopeConf find(final String name) throws MissingConfKeyException {\n-\n         SyncopeConf result = find(name, null);\n         if (result == null) {\n             throw new MissingConfKeyException(name);\n@@ -56,13 +53,12 @@ public SyncopeConf find(final String name, final String defaultValue) {\n \n     @Override\n     public List<SyncopeConf> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM SyncopeConf e\");\n+        TypedQuery<SyncopeConf> query = entityManager.createQuery(\"SELECT e FROM SyncopeConf e\", SyncopeConf.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public SyncopeConf save(final SyncopeConf syncopeConfiguration) {\n-\n         return entityManager.merge(syncopeConfiguration);\n     }\n "},{"sha":"fdecb56d37846dbef6c09cfd1176818037327af7","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ConnInstanceDAOImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,9 +21,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n@@ -49,7 +47,8 @@ public ConnInstance find(final Long id) {\n \n     @Override\n     public List<ConnInstance> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e \" + \"FROM \" + ConnInstance.class.getSimpleName() + \" e\");\n+        TypedQuery<ConnInstance> query = entityManager.createQuery(\n+                \"SELECT e \" + \"FROM \" + ConnInstance.class.getSimpleName() + \" e\", ConnInstance.class);\n         return query.getResultList();\n     }\n "},{"sha":"ecfdd76c78d75af7986d5acbab10dd3e28717576","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ContentLoader.java","status":"modified","additions":73,"deletions":70,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FContentLoader.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -18,18 +18,16 @@\n  */\n package org.apache.syncope.core.persistence.dao.impl;\n \n-import java.io.Closeable;\n import java.io.InputStream;\n import java.sql.Connection;\n import java.sql.PreparedStatement;\n import java.sql.ResultSet;\n import java.sql.SQLException;\n import java.util.Properties;\n-\n import javax.sql.DataSource;\n import javax.xml.parsers.SAXParser;\n import javax.xml.parsers.SAXParserFactory;\n-\n+import org.apache.commons.io.IOUtils;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n import org.apache.syncope.core.util.ImportExport;\n import org.slf4j.Logger;\n@@ -40,13 +38,17 @@\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n- * Initialize Database with default content if no data is present already\n+ * Initialize Database with default content if no data is present already.\n  */\n @Component\n public class ContentLoader {\n+\n     private static final String VIEWS_FILE = \"/views.xml\";\n+\n     private static final String INDEXES_FILE = \"/indexes.xml\";\n+\n     private static final String CONTENT_FILE = \"/content.xml\";\n+\n     private static final String ACTIVITY_CONTENT_FILE = \"/activiticontent.xml\";\n \n     private static final Logger LOG = LoggerFactory.getLogger(ContentLoader.class);\n@@ -58,56 +60,74 @@ public class ContentLoader {\n     private ImportExport importExport;\n \n     @Transactional\n-    public void load(boolean activitiEnabledForUsers) {\n-        Connection conn = DataSourceUtils.getConnection(dataSource);\n-\n-        boolean existingData = isDataPresent(conn);\n-        if (existingData) {\n-            LOG.info(\"Data found in the database, leaving untouched\");\n-            closeConnection(conn);\n-            return;\n-        }\n-\n-        LOG.info(\"Empty database found, loading default content\");\n-\n-        createViews(conn);\n-        createIndexes(conn);\n-        if (activitiEnabledForUsers) {\n-            deleteActivitiProperties(conn);\n-        }\n-        closeConnection(conn);\n-        loadDefaultContent(CONTENT_FILE);\n-        if (activitiEnabledForUsers) {\n-            loadDefaultContent(ACTIVITY_CONTENT_FILE);\n+    public void load(final boolean activitiEnabledForUsers) {\n+        Connection conn = null;\n+        try {\n+            conn = DataSourceUtils.getConnection(dataSource);\n+\n+            boolean existingData = isDataPresent(conn);\n+            if (existingData) {\n+                LOG.info(\"Data found in the database, leaving untouched\");\n+            } else {\n+                LOG.info(\"Empty database found, loading default content\");\n+\n+                createViews(conn);\n+                createIndexes(conn);\n+                if (activitiEnabledForUsers) {\n+                    deleteActivitiProperties(conn);\n+                }\n+                loadDefaultContent(CONTENT_FILE);\n+                if (activitiEnabledForUsers) {\n+                    loadDefaultContent(ACTIVITY_CONTENT_FILE);\n+                }\n+            }\n+        } finally {\n+            DataSourceUtils.releaseConnection(conn, dataSource);\n+            if (conn != null) {\n+                try {\n+                    if (!conn.isClosed()) {\n+                        conn.close();\n+                    }\n+                } catch (SQLException e) {\n+                    LOG.error(\"While releasing connection\", e);\n+                }\n+            }\n         }\n     }\n \n-    private boolean isDataPresent(Connection conn) {\n-        ResultSet resultSet = null;\n+    private boolean isDataPresent(final Connection conn) {\n         PreparedStatement statement = null;\n+        ResultSet rs = null;\n         try {\n             final String queryContent = \"SELECT * FROM \" + SyncopeConf.class.getSimpleName();\n             statement = conn.prepareStatement(\n                     queryContent, ResultSet.TYPE_SCROLL_SENSITIVE, ResultSet.CONCUR_READ_ONLY);\n-            resultSet = statement.executeQuery();\n-            resultSet.last();\n-            return resultSet.getRow() > 0;\n+            rs = statement.executeQuery();\n+            rs.last();\n+            return rs.getRow() > 0;\n         } catch (SQLException e) {\n             LOG.error(\"Could not access to table \" + SyncopeConf.class.getSimpleName(), e);\n             return true;\n         } finally {\n-            closeResultSet(resultSet);\n+            if (rs != null) {\n+                try {\n+                    rs.close();\n+                } catch (SQLException e) {\n+                    LOG.error(\"While closing tables result set\", e);\n+                }\n+            }\n+\n             closeStatement(statement);\n         }\n     }\n \n-    private void createViews(Connection conn) {\n+    private void createViews(final Connection conn) {\n         LOG.debug(\"Creating views\");\n+        InputStream viewsStream = null;\n         try {\n-            InputStream viewsStream = getClass().getResourceAsStream(VIEWS_FILE);\n+            viewsStream = getClass().getResourceAsStream(VIEWS_FILE);\n             Properties views = new Properties();\n             views.loadFromXML(viewsStream);\n-            close(viewsStream);\n \n             for (String idx : views.stringPropertyNames()) {\n                 LOG.debug(\"Creating view {}\", views.get(idx).toString());\n@@ -128,20 +148,26 @@ private void createViews(Connection conn) {\n             LOG.debug(\"Views created, go for indexes\");\n         } catch (Exception e) {\n             LOG.error(\"While creating views\", e);\n+        } finally {\n+            if (viewsStream != null) {\n+                IOUtils.closeQuietly(viewsStream);\n+            }\n         }\n     }\n \n-    private void createIndexes(Connection conn) {\n+    private void createIndexes(final Connection conn) {\n         LOG.debug(\"Creating indexes\");\n \n-        InputStream indexesStream = getClass().getResourceAsStream(INDEXES_FILE);\n+        InputStream indexesStream = null;\n         Properties indexes = new Properties();\n         try {\n+            indexesStream = getClass().getResourceAsStream(INDEXES_FILE);\n             indexes.loadFromXML(indexesStream);\n         } catch (Exception e) {\n             throw new RuntimeException(\"Error loading properties from stream\", e);\n+        } finally {\n+            IOUtils.closeQuietly(indexesStream);\n         }\n-        close(indexesStream);\n \n         for (String idx : indexes.stringPropertyNames()) {\n             LOG.debug(\"Creating index {}\", indexes.get(idx).toString());\n@@ -158,7 +184,7 @@ private void createIndexes(Connection conn) {\n         }\n     }\n \n-    private void deleteActivitiProperties(Connection conn) {\n+    private void deleteActivitiProperties(final Connection conn) {\n         PreparedStatement statement = null;\n         try {\n             statement = conn.prepareStatement(\"DELETE FROM ACT_GE_PROPERTY\");\n@@ -170,28 +196,25 @@ private void deleteActivitiProperties(Connection conn) {\n         }\n     }\n \n-    private void loadDefaultContent(String contentPath) {\n+    private void loadDefaultContent(final String contentPath) {\n         SAXParserFactory factory = SAXParserFactory.newInstance();\n+        InputStream in = null;\n         try {\n+            in = getClass().getResourceAsStream(contentPath);\n+\n             SAXParser parser = factory.newSAXParser();\n-            parser.parse(getClass().getResourceAsStream(contentPath), importExport);\n+            parser.parse(in, importExport);\n             LOG.debug(\"Default content successfully loaded\");\n         } catch (Exception e) {\n             LOG.error(\"While loading default content\", e);\n-        }\n-    }\n-\n-    private void closeResultSet(ResultSet resultSet) {\n-        try {\n-            if (resultSet != null) {\n-                resultSet.close();\n+        } finally {\n+            if (in != null) {\n+                IOUtils.closeQuietly(in);\n             }\n-        } catch (SQLException e) {\n-            LOG.error(\"While closing SQL result set\", e);\n         }\n     }\n \n-    private void closeStatement(PreparedStatement statement) {\n+    private void closeStatement(final PreparedStatement statement) {\n         if (statement != null) {\n             try {\n                 statement.close();\n@@ -200,24 +223,4 @@ private void closeStatement(PreparedStatement statement) {\n             }\n         }\n     }\n-\n-    private void closeConnection(Connection conn) {\n-        try {\n-            conn.close();\n-        } catch (SQLException e) {\n-            LOG.error(\"Error closing SQL connection\", e);\n-        } finally {\n-            DataSourceUtils.releaseConnection(conn, dataSource);\n-        }\n-    }\n-    \n-    private void close(Closeable closeable) {\n-        if (closeable != null) {\n-            try {\n-                closeable.close();\n-            } catch (Throwable t) {\n-                LOG.error(\"Error closing closeable\", t);\n-            }\n-        }\n-    }\n }"},{"sha":"a304570da8fbc679b97f0d93813655915199c047","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/DerAttrDAOImpl.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerAttrDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.dao.DerAttrDAO;\n import org.springframework.stereotype.Repository;\n@@ -31,26 +29,23 @@ public class DerAttrDAOImpl extends AbstractDAOImpl implements DerAttrDAO {\n \n     @Override\n     public <T extends AbstractDerAttr> T find(final Long id, final Class<T> reference) {\n-\n         return entityManager.find(reference, id);\n     }\n \n     @Override\n     public <T extends AbstractDerAttr> List<T> findAll(final Class<T> reference) {\n-\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        TypedQuery<T> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + reference.getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n     @Override\n     public <T extends AbstractDerAttr> T save(final T derivedAttribute) {\n-\n         return entityManager.merge(derivedAttribute);\n     }\n \n     @Override\n     public <T extends AbstractDerAttr> void delete(final Long id, final Class<T> reference) {\n-\n         T derivedAttribute = find(id, reference);\n         if (derivedAttribute == null) {\n             return;\n@@ -61,7 +56,6 @@ public <T extends AbstractDerAttr> void delete(final Long id, final Class<T> ref\n \n     @Override\n     public <T extends AbstractDerAttr> void delete(final T derivedAttribute) {\n-\n         if (derivedAttribute.getOwner() != null) {\n             derivedAttribute.getOwner().removeDerivedAttribute(derivedAttribute);\n         }"},{"sha":"923d83161503d316a5d853e9ba9d1d425e90f921","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/DerSchemaDAOImpl.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FDerSchemaDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,9 +21,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n@@ -45,14 +43,12 @@ public class DerSchemaDAOImpl extends AbstractDAOImpl implements DerSchemaDAO {\n \n     @Override\n     public <T extends AbstractDerSchema> T find(final String name, final Class<T> reference) {\n-\n         return entityManager.find(reference, name);\n     }\n \n     @Override\n     public <T extends AbstractDerSchema> List<T> findAll(final Class<T> reference) {\n-\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n@@ -72,7 +68,7 @@ public void delete(final String name, final AttributableUtil attributableUtil) {\n \n         final Set<Long> derivedAttributeIds = new HashSet<Long>(attributes.size());\n \n-        Class attributeClass = null;\n+        Class<? extends AbstractDerAttr> attributeClass = null;\n         for (AbstractDerAttr attribute : attributes) {\n             derivedAttributeIds.add(attribute.getId());\n             attributeClass = attribute.getClass();\n@@ -91,9 +87,8 @@ public void delete(final String name, final AttributableUtil attributableUtil) {\n     public <T extends AbstractDerAttr> List<T> getAttributes(final AbstractDerSchema derivedSchema,\n             final Class<T> reference) {\n \n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n-                + \" WHERE e.derivedSchema=:schema\");\n-\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n+                + \" WHERE e.derivedSchema=:schema\", reference);\n         query.setParameter(\"schema\", derivedSchema);\n \n         return query.getResultList();"},{"sha":"6065c78f3eabde495eaf3fcb0b8fb6847083525b","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n@@ -43,7 +41,7 @@ public Entitlement find(final String name) {\n \n     @Override\n     public List<Entitlement> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM Entitlement e\");\n+        TypedQuery<Entitlement> query = entityManager.createQuery(\"SELECT e FROM Entitlement e\", Entitlement.class);\n \n         return query.getResultList();\n     }"},{"sha":"4425b8a2c40283bd0439f74d9c90fb777a610b4d","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/LoggerDAOImpl.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FLoggerDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.common.types.SyncopeLoggerLevel;\n import org.apache.syncope.common.types.SyncopeLoggerType;\n import org.apache.syncope.core.persistence.beans.SyncopeLogger;\n@@ -38,8 +36,8 @@ public SyncopeLogger find(final String name) {\n \n     @Override\n     public List<SyncopeLogger> findAll(final SyncopeLoggerType type) {\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + SyncopeLogger.class.getSimpleName() + \" e \"\n-                + \"WHERE e.type=:type\");\n+        TypedQuery<SyncopeLogger> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + SyncopeLogger.class.getSimpleName() + \" e WHERE e.type=:type\", SyncopeLogger.class);\n         query.setParameter(\"type\", type);\n         return query.getResultList();\n     }"},{"sha":"6c139eebca395731e702ac28bec6fe9f304526cb","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/MembershipDAOImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FMembershipDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,10 +19,9 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -68,7 +67,7 @@ public Membership find(final SyncopeUser user, final SyncopeRole role) {\n \n     @Override\n     public List<Membership> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM Membership e\");\n+        TypedQuery<Membership> query = entityManager.createQuery(\"SELECT e FROM Membership e\", Membership.class);\n         return query.getResultList();\n     }\n "},{"sha":"22e943e6e8f453dc89fa22c59ab1f3b861afa9e6","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/NotificationDAOImpl.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FNotificationDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FNotificationDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FNotificationDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n@@ -37,13 +35,13 @@ public Notification find(final Long id) {\n \n     @Override\n     public List<Notification> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e \" + \"FROM \" + Notification.class.getSimpleName() + \" e\");\n+        TypedQuery<Notification> query = entityManager.createQuery(\n+                \"SELECT e \" + \"FROM \" + Notification.class.getSimpleName() + \" e\", Notification.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public Notification save(final Notification notification) throws InvalidEntityException {\n-\n         return entityManager.merge(notification);\n     }\n "},{"sha":"c605d3503d0781fb4c004d0525a8481a20b366d8","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n@@ -40,7 +38,8 @@ public Policy find(final Long id) {\n \n     @Override\n     public List<? extends Policy> find(final PolicyType type) {\n-        final Query query = entityManager.createQuery(\"SELECT e FROM Policy e WHERE e.type=:type\");\n+        final TypedQuery<Policy> query = entityManager.createQuery(\"SELECT e FROM Policy e WHERE e.type=:type\",\n+                Policy.class);\n         query.setParameter(\"type\", type);\n \n         return query.getResultList();\n@@ -72,12 +71,12 @@ public SyncPolicy getGlobalSyncPolicy() {\n \n     @Override\n     public List<Policy> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM Policy e\");\n+        TypedQuery<Policy> query = entityManager.createQuery(\"SELECT e FROM Policy e\", Policy.class);\n         return query.getResultList();\n     }\n \n     @Override\n-    public Policy save(final Policy policy) {\n+    public <T extends Policy> T save(final T policy) {\n         return entityManager.merge(policy);\n     }\n "},{"sha":"ad2bca74a18c1b94bcd0d320904a4d6a8e37651e","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ReportDAOImpl.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n \n import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n \n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n@@ -44,7 +45,8 @@ public List<Report> findAll() {\n \n     @Override\n     public List<Report> findAll(final int page, final int itemsPerPage) {\n-        final Query query = entityManager.createQuery(\"SELECT e FROM \" + Report.class.getSimpleName() + \" e\");\n+        final TypedQuery<Report> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + Report.class.getSimpleName() + \" e\", Report.class);\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n                 ? 0"},{"sha":"596a69d59d4a95aa93fc69fbf273b298fd240f12","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ReportExecDAOImpl.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n import org.apache.syncope.core.persistence.dao.ReportExecDAO;\n@@ -38,9 +36,9 @@ public ReportExec find(final Long id) {\n     }\n \n     private ReportExec findLatest(final Report report, final String field) {\n-\n-        Query query = entityManager.createQuery(\"SELECT e \" + \"FROM \" + ReportExec.class.getSimpleName() + \" e \"\n-                + \"WHERE e.report=:report \" + \"ORDER BY e.\" + field + \" DESC\");\n+        TypedQuery<ReportExec> query = entityManager.createQuery(\n+                \"SELECT e \" + \"FROM \" + ReportExec.class.getSimpleName() + \" e \"\n+                + \"WHERE e.report=:report \" + \"ORDER BY e.\" + field + \" DESC\", ReportExec.class);\n         query.setParameter(\"report\", report);\n         query.setMaxResults(1);\n \n@@ -62,7 +60,8 @@ public ReportExec findLatestEnded(final Report report) {\n \n     @Override\n     public List<ReportExec> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + ReportExec.class.getSimpleName() + \" e\");\n+        TypedQuery<ReportExec> query = entityManager.createQuery(\n+                \"SELECT e FROM \" + ReportExec.class.getSimpleName() + \" e\", ReportExec.class);\n         return query.getResultList();\n     }\n "},{"sha":"6be066a6f6985595612a39cba266b6e85d4075e3","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,12 +21,10 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import javax.persistence.NoResultException;\n-import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-\n import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n@@ -68,21 +66,25 @@ public ExternalResource find(final String name) {\n         try {\n             result = query.getSingleResult();\n         } catch (NoResultException e) {\n+            LOG.error(\"No resource found with name {}\", name, e);\n         }\n \n         return result;\n     }\n \n     @Override\n     public List<ExternalResource> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e \" + \"FROM  \" + ExternalResource.class.getSimpleName() + \" e\");\n+        TypedQuery<ExternalResource> query =\n+                entityManager.createQuery(\"SELECT e \" + \"FROM  \" + ExternalResource.class.getSimpleName() + \" e\",\n+                ExternalResource.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public List<ExternalResource> findAllByPriority() {\n-        Query query = entityManager.createQuery(\"SELECT e \" + \"FROM  \" + ExternalResource.class.getSimpleName() + \" e \"\n-                + \"ORDER BY e.propagationPriority\");\n+        TypedQuery<ExternalResource> query =\n+                entityManager.createQuery(\"SELECT e \" + \"FROM  \" + ExternalResource.class.getSimpleName() + \" e \"\n+                + \"ORDER BY e.propagationPriority\", ExternalResource.class);\n         return query.getResultList();\n     }\n \n@@ -114,16 +116,16 @@ public <T extends AbstractMappingItem> void deleteMapping(final String intAttrNa\n             return;\n         }\n \n-        Query query = entityManager.createQuery(\"SELECT m FROM \" + reference.getSimpleName()\n-                + \" m WHERE m.intAttrName=:intAttrName AND m.intMappingType=:intMappingType\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT m FROM \" + reference.getSimpleName()\n+                + \" m WHERE m.intAttrName=:intAttrName AND m.intMappingType=:intMappingType\", reference);\n         query.setParameter(\"intAttrName\", intAttrName);\n         query.setParameter(\"intMappingType\", intMappingType);\n \n         Set<Long> itemIds = new HashSet<Long>();\n-        for (T item : (List<T>) query.getResultList()) {\n+        for (T item : query.getResultList()) {\n             itemIds.add(item.getId());\n         }\n-        Class mappingRef = null;\n+        Class<? extends AbstractMapping> mappingRef = null;\n         for (Long itemId : itemIds) {\n             T item = entityManager.find(reference, itemId);\n             if (item != null) {"},{"sha":"f6422feee57c57023dd9d563ad3d1583c0b88741","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":28,"deletions":18,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,12 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.NoResultException;\n-import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n@@ -51,6 +49,12 @@ public class RoleDAOImpl extends AbstractAttributableDAOImpl implements RoleDAO\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected <T extends AbstractAttributable> T findInternal(final Long id) {\n+        return (T) find(id);\n+    }\n+\n     @Override\n     public SyncopeRole find(final Long id) {\n         TypedQuery<SyncopeRole> query = entityManager.createQuery(\"SELECT e FROM SyncopeRole e WHERE e.id = :id\",\n@@ -61,29 +65,31 @@ public SyncopeRole find(final Long id) {\n         try {\n             result = query.getSingleResult();\n         } catch (NoResultException e) {\n+            LOG.error(\"No role found with id {}\", id, e);\n         }\n \n         return result;\n     }\n \n     @Override\n     public List<SyncopeRole> find(final String name) {\n-        Query query = entityManager.createQuery(\"SELECT e FROM SyncopeRole e WHERE e.name = :name\");\n+        TypedQuery<SyncopeRole> query =\n+                entityManager.createQuery(\"SELECT e FROM SyncopeRole e WHERE e.name = :name\", SyncopeRole.class);\n         query.setParameter(\"name\", name);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public SyncopeRole find(final String name, final Long parentId) {\n-        Query query;\n-        if (parentId != null) {\n+        TypedQuery<SyncopeRole> query;\n+        if (parentId == null) {\n             query = entityManager.createQuery(\"SELECT r FROM SyncopeRole r WHERE \"\n-                    + \"r.name=:name AND r.parent.id=:parentId\");\n-            query.setParameter(\"parentId\", parentId);\n+                    + \"r.name=:name AND r.parent IS NULL\", SyncopeRole.class);\n         } else {\n             query = entityManager.createQuery(\"SELECT r FROM SyncopeRole r WHERE \"\n-                    + \"r.name=:name AND r.parent IS NULL\");\n+                    + \"r.name=:name AND r.parent.id=:parentId\", SyncopeRole.class);\n+            query.setParameter(\"parentId\", parentId);\n         }\n         query.setParameter(\"name\", name);\n \n@@ -116,11 +122,11 @@ public List<SyncopeRole> findOwned(final SyncopeUser owner) {\n             queryString.append(\"OR e.roleOwner.id=\").append(roleId).append(' ');\n         }\n \n-        Query query = entityManager.createQuery(queryString.toString());\n+        TypedQuery<SyncopeRole> query = entityManager.createQuery(queryString.toString(), SyncopeRole.class);\n         query.setParameter(\"owner\", owner);\n \n         List<SyncopeRole> result = new ArrayList<SyncopeRole>();\n-        for (SyncopeRole role : (List<SyncopeRole>) query.getResultList()) {\n+        for (SyncopeRole role : query.getResultList()) {\n             findSameOwnerDescendants(result, role);\n         }\n \n@@ -129,8 +135,9 @@ public List<SyncopeRole> findOwned(final SyncopeUser owner) {\n \n     @Override\n     public List<SyncopeRole> findByEntitlement(final Entitlement entitlement) {\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + SyncopeRole.class.getSimpleName() + \" e \"\n-                + \"WHERE :entitlement MEMBER OF e.entitlements\");\n+        TypedQuery<SyncopeRole> query =\n+                entityManager.createQuery(\"SELECT e FROM \" + SyncopeRole.class.getSimpleName() + \" e \"\n+                + \"WHERE :entitlement MEMBER OF e.entitlements\", SyncopeRole.class);\n         query.setParameter(\"entitlement\", entitlement);\n \n         return query.getResultList();\n@@ -152,8 +159,10 @@ public List<SyncopeRole> findAncestors(final SyncopeRole role) {\n \n     @Override\n     public List<SyncopeRole> findChildren(final SyncopeRole role) {\n-        Query query = entityManager.createQuery(\"SELECT r FROM SyncopeRole r WHERE \" + \"r.parent=:role\");\n+        TypedQuery<SyncopeRole> query =\n+                entityManager.createQuery(\"SELECT r FROM SyncopeRole r WHERE \" + \"r.parent=:role\", SyncopeRole.class);\n         query.setParameter(\"role\", role);\n+\n         return query.getResultList();\n     }\n \n@@ -199,14 +208,15 @@ public List<SyncopeRole> findByResource(final ExternalResource resource) {\n \n     @Override\n     public List<SyncopeRole> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e FROM SyncopeRole e\");\n+        TypedQuery<SyncopeRole> query = entityManager.createQuery(\"SELECT e FROM SyncopeRole e\", SyncopeRole.class);\n         return query.getResultList();\n     }\n \n     @Override\n     public List<Membership> findMemberships(final SyncopeRole role) {\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + Membership.class.getSimpleName() + \" e\"\n-                + \" WHERE e.syncopeRole=:role\");\n+        TypedQuery<Membership> query =\n+                entityManager.createQuery(\"SELECT e FROM \" + Membership.class.getSimpleName() + \" e\"\n+                + \" WHERE e.syncopeRole=:role\", Membership.class);\n         query.setParameter(\"role\", role);\n \n         return query.getResultList();\n@@ -257,7 +267,7 @@ public void delete(final SyncopeRole role) {\n \n     @Override\n     public void delete(final Long id) {\n-        SyncopeRole role = find(id);\n+        SyncopeRole role = findInternal(id);\n         if (role == null) {\n             return;\n         }"},{"sha":"014095251241e2daaaa7aa6144609b0c0be338ab","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,9 +21,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractSchema;\n import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n@@ -51,17 +49,15 @@ public <T extends AbstractSchema> T find(final String name, final Class<T> refer\n \n     @Override\n     public <T extends AbstractSchema> List<T> findAll(final Class<T> reference) {\n-\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\", reference);\n \n         return query.getResultList();\n     }\n \n     @Override\n     public <T extends AbstractAttr> List<T> getAttributes(final AbstractSchema schema, final Class<T> reference) {\n-\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n-                + \" WHERE e.schema=:schema\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n+                + \" WHERE e.schema=:schema\", reference);\n         query.setParameter(\"schema\", schema);\n \n         return query.getResultList();"},{"sha":"6fb27ecf5eba167aff41d8e3b0d0f8c567445f3b","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,9 +20,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n@@ -35,8 +34,9 @@\n @Repository\n public class TaskDAOImpl extends AbstractDAOImpl implements TaskDAO {\n \n-    @Override\n     @Transactional(readOnly = true)\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n     public <T extends Task> T find(final Long id) {\n         return (T) entityManager.find(Task.class, id);\n     }\n@@ -68,13 +68,12 @@ public <T extends Task> List<T> findToExec(final Class<T> reference) {\n         }\n         queryString.append(\"ORDER BY e.id DESC\");\n \n-        final Query query = entityManager.createQuery(queryString.toString());\n+        final TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n         return query.getResultList();\n     }\n \n     @Override\n     public <T extends Task> List<T> findAll(final ExternalResource resource, final Class<T> reference) {\n-\n         StringBuilder queryString = buildfindAllQuery(reference);\n \n         if (SchedTask.class.equals(reference)) {\n@@ -86,7 +85,7 @@ public <T extends Task> List<T> findAll(final ExternalResource resource, final C\n         queryString.append(\"e.resource=:resource \");\n         queryString.append(\"ORDER BY e.id DESC\");\n \n-        final Query query = entityManager.createQuery(queryString.toString());\n+        final TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n         query.setParameter(\"resource\", resource);\n \n         return query.getResultList();\n@@ -99,11 +98,10 @@ public <T extends Task> List<T> findAll(final Class<T> reference) {\n \n     @Override\n     public <T extends Task> List<T> findAll(final int page, final int itemsPerPage, final Class<T> reference) {\n-\n         StringBuilder queryString = buildfindAllQuery(reference);\n         queryString.append(\"ORDER BY e.id DESC\");\n \n-        final Query query = entityManager.createQuery(queryString.toString());\n+        final TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n                 ? 0"},{"sha":"877a8cddbd9acc6e0d656a8388768b7aff11c534","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/TaskExecDAOImpl.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskExecDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n@@ -45,9 +43,9 @@ public TaskExec find(final Long id) {\n     }\n \n     private <T extends Task> TaskExec findLatest(final T task, final String field) {\n-\n-        Query query = entityManager.createQuery(\"SELECT e \" + \"FROM \" + TaskExec.class.getSimpleName() + \" e \"\n-                + \"WHERE e.task=:task \" + \"ORDER BY e.\" + field + \" DESC\");\n+        TypedQuery<TaskExec> query = entityManager.createQuery(\"SELECT e \" + \"FROM \" + TaskExec.class.getSimpleName()\n+                + \" e \"\n+                + \"WHERE e.task=:task \" + \"ORDER BY e.\" + field + \" DESC\", TaskExec.class);\n         query.setParameter(\"task\", task);\n         query.setMaxResults(1);\n \n@@ -68,7 +66,7 @@ public <T extends Task> TaskExec findLatestEnded(final T task) {\n     }\n \n     @Override\n-    public <T extends Task> List<TaskExec> findAll(Class<T> reference) {\n+    public <T extends Task> List<TaskExec> findAll(final Class<T> reference) {\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(TaskExec.class.getSimpleName()).append(\n                 \" e WHERE e.task IN (\").append(\"SELECT t FROM \").append(reference.getSimpleName()).append(\" t\");\n         if (SchedTask.class.equals(reference)) {\n@@ -77,7 +75,7 @@ public <T extends Task> List<TaskExec> findAll(Class<T> reference) {\n         }\n         queryString.append(')');\n \n-        Query query = entityManager.createQuery(queryString.toString());\n+        TypedQuery<TaskExec> query = entityManager.createQuery(queryString.toString(), TaskExec.class);\n         return query.getResultList();\n     }\n "},{"sha":"e4249f831bf24f9e831e7dc9a717ffea9a55e286","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":15,"deletions":7,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,12 +21,11 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Set;\n-\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-\n import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n@@ -45,6 +44,12 @@ public class UserDAOImpl extends AbstractAttributableDAOImpl implements UserDAO\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    protected <T extends AbstractAttributable> T findInternal(final Long id) {\n+        return (T) find(id);\n+    }\n+\n     @Override\n     public SyncopeUser find(final Long id) {\n         TypedQuery<SyncopeUser> query = entityManager.createQuery(\"SELECT e FROM \" + SyncopeUser.class.getSimpleName()\n@@ -53,8 +58,9 @@ public SyncopeUser find(final Long id) {\n \n         SyncopeUser result = null;\n         try {\n-            return query.getSingleResult();\n+            result = query.getSingleResult();\n         } catch (NoResultException e) {\n+            LOG.error(\"No user found with id {}\", id, e);\n         }\n \n         return result;\n@@ -68,8 +74,9 @@ public SyncopeUser find(final String username) {\n \n         SyncopeUser result = null;\n         try {\n-            return query.getSingleResult();\n+            result = query.getSingleResult();\n         } catch (NoResultException e) {\n+            LOG.error(\"No user found with username {}\", username, e);\n         }\n \n         return result;\n@@ -142,6 +149,7 @@ public final List<SyncopeUser> findAll(final Set<Long> adminRoles) {\n         return findAll(adminRoles, -1, -1);\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Override\n     public final List<SyncopeUser> findAll(final Set<Long> adminRoles, final int page, final int itemsPerPage) {\n         final Query query = entityManager.createNativeQuery(getFindAllQuery(adminRoles).toString());\n@@ -155,7 +163,7 @@ public final List<SyncopeUser> findAll(final Set<Long> adminRoles, final int pag\n         }\n \n         List<Number> userIds = new ArrayList<Number>();\n-        List resultList = query.getResultList();\n+        List<Object> resultList = query.getResultList();\n \n         //fix for HHH-5902 - bug hibernate\n         if (resultList != null) {\n@@ -172,7 +180,7 @@ public final List<SyncopeUser> findAll(final Set<Long> adminRoles, final int pag\n \n         SyncopeUser user;\n         for (Object userId : userIds) {\n-            user = find(((Number) userId).longValue());\n+            user = findInternal(((Number) userId).longValue());\n             if (user == null) {\n                 LOG.error(\"Could not find user with id {}, \" + \"even though returned by the native query\", userId);\n             } else {\n@@ -206,7 +214,7 @@ public SyncopeUser save(final SyncopeUser user) {\n \n     @Override\n     public void delete(final Long id) {\n-        SyncopeUser user = find(id);\n+        SyncopeUser user = findInternal(id);\n         if (user == null) {\n             return;\n         }"},{"sha":"9ba0c823af19c92cb71f85a02ca1e0e9a9184fec","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserRequestDAOImpl.java","status":"modified","additions":6,"deletions":8,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserRequestDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,17 +19,15 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.UserRequest;\n import org.apache.syncope.core.persistence.dao.UserRequestDAO;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n-@Transactional(noRollbackFor = { Throwable.class })\n+@Transactional(noRollbackFor = {Throwable.class})\n public class UserRequestDAOImpl extends AbstractDAOImpl implements UserRequestDAO {\n \n     @Override\n@@ -41,18 +39,18 @@ public UserRequest find(Long id) {\n     @Override\n     @Transactional(readOnly = true)\n     public List<UserRequest> findAll() {\n-        Query query = entityManager.createQuery(\"SELECT e \" + \"FROM \" + UserRequest.class.getSimpleName() + \" e\");\n+        TypedQuery<UserRequest> query = entityManager.createQuery(\n+                \"SELECT e \" + \"FROM \" + UserRequest.class.getSimpleName() + \" e\", UserRequest.class);\n         return query.getResultList();\n     }\n \n     @Override\n-    public UserRequest save(UserRequest userRequest) throws InvalidEntityException {\n-\n+    public UserRequest save(final UserRequest userRequest) throws InvalidEntityException {\n         return entityManager.merge(userRequest);\n     }\n \n     @Override\n-    public void delete(Long id) {\n+    public void delete(final Long id) {\n         entityManager.remove(find(id));\n     }\n }"},{"sha":"52a6e35e7ef7fbbead0987f231b45ce193e5f57b","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/VirAttrDAOImpl.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirAttrDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirAttrDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirAttrDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.List;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.dao.VirAttrDAO;\n import org.springframework.stereotype.Repository;\n@@ -37,20 +35,17 @@ public <T extends AbstractVirAttr> T find(final Long id, final Class<T> referenc\n \n     @Override\n     public <T extends AbstractVirAttr> List<T> findAll(final Class<T> reference) {\n-\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n     @Override\n     public <T extends AbstractVirAttr> T save(final T virtualAttribute) {\n-\n         return entityManager.merge(virtualAttribute);\n     }\n \n     @Override\n     public <T extends AbstractVirAttr> void delete(final Long id, final Class<T> reference) {\n-\n         T virtualAttribute = find(id, reference);\n         if (virtualAttribute == null) {\n             return;\n@@ -61,7 +56,6 @@ public <T extends AbstractVirAttr> void delete(final Long id, final Class<T> ref\n \n     @Override\n     public <T extends AbstractVirAttr> void delete(final T virtualAttribute) {\n-\n         if (virtualAttribute.getOwner() != null) {\n             virtualAttribute.getOwner().removeVirtualAttribute(virtualAttribute);\n         }"},{"sha":"e303234306eb5c6ee5cef93aac62e543160ea88f","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/VirSchemaDAOImpl.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FVirSchemaDAOImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,9 +21,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n-import javax.persistence.Query;\n-\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n import org.apache.syncope.core.persistence.beans.AbstractVirSchema;\n import org.apache.syncope.core.persistence.beans.user.UMappingItem;\n@@ -50,7 +48,7 @@ public <T extends AbstractVirSchema> T find(final String name, final Class<T> re\n \n     @Override\n     public <T extends AbstractVirSchema> List<T> findAll(final Class<T> reference) {\n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\", reference);\n         return query.getResultList();\n     }\n \n@@ -71,7 +69,7 @@ public void delete(final String name, final AttributableUtil attributableUtil) {\n \n         final Set<Long> virAttrIds = new HashSet<Long>(attributes.size());\n \n-        Class attributeClass = null;\n+        Class<? extends AbstractVirAttr> attributeClass = null;\n \n         for (AbstractVirAttr attribute : attributes) {\n             virAttrIds.add(attribute.getId());\n@@ -91,8 +89,8 @@ public void delete(final String name, final AttributableUtil attributableUtil) {\n     public <T extends AbstractVirAttr> List<T> getAttributes(final AbstractVirSchema virtualSchema,\n             final Class<T> reference) {\n \n-        Query query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n-                + \" WHERE e.virtualSchema=:schema\");\n+        TypedQuery<T> query = entityManager.createQuery(\"SELECT e FROM \" + reference.getSimpleName() + \" e\"\n+                + \" WHERE e.virtualSchema=:schema\", reference);\n         query.setParameter(\"schema\", virtualSchema);\n \n         return query.getResultList();"},{"sha":"73900784f7511f83bf7495e69bae52059a1547a1","filename":"core/src/main/java/org/apache/syncope/core/persistence/openjpa/JBossPersistenceMappingFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FJBossPersistenceMappingFactory.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -36,7 +36,6 @@\n import java.util.Set;\n import java.util.zip.ZipFile;\n import java.util.zip.ZipInputStream;\n-\n import org.apache.openjpa.conf.OpenJPAConfiguration;\n import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n import org.apache.openjpa.lib.meta.ClassArgParser;\n@@ -56,6 +55,7 @@\n /**\n  * Temporary class used while issue OPENJPA-2229 gets fixed and reaches mainstream distribution.\n  */\n+@SuppressWarnings(\"unchecked\")\n public class JBossPersistenceMappingFactory extends PersistenceMappingFactory {\n \n     private static final Localizer _loc = Localizer.forPackage(PersistenceMetaDataFactory.class);\n@@ -93,7 +93,7 @@ private void scan(MetaDataIterator mitr, ClassArgParser cparser, Set names,\n     @Override\n     protected Set<String> parsePersistentTypeNames(ClassLoader loader)\n             throws IOException {\n-        \n+\n         ClassArgParser cparser = newClassArgParser();\n         String[] clss;\n         Set<String> names = new HashSet<String>();"},{"sha":"73e9bb97c36656b17cdaca5b1b2ef8fe9bf48a9d","filename":"core/src/main/java/org/apache/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":52,"deletions":55,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.policy;\n \n import java.util.List;\n-\n import org.apache.syncope.common.types.AbstractPolicySpec;\n import org.apache.syncope.common.types.AccountPolicySpec;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n@@ -38,72 +37,70 @@ public class PolicyEvaluator {\n     /**\n      * Logger.\n      */\n-    protected static final Logger LOG = LoggerFactory.getLogger(PolicyEvaluator.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(PolicyEvaluator.class);\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T extends AbstractPolicySpec> T evaluate(final Policy policy, final AbstractAttributable attributable) {\n+        if (policy == null) {\n+            return null;\n+        }\n \n         T result = null;\n-\n-        if (policy != null) {\n-            AbstractAttr attribute;\n-            List<String> values;\n-\n-            switch (policy.getType()) {\n-                case PASSWORD:\n-                case GLOBAL_PASSWORD:\n-                    final PasswordPolicySpec ppSpec = policy.getSpecification();\n-                    final PasswordPolicySpec evaluatedPPSpec = new PasswordPolicySpec();\n-\n-                    BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[]{\"schemasNotPermitted\"});\n-\n-                    for (String schema : ppSpec.getSchemasNotPermitted()) {\n-                        attribute = attributable.getAttribute(schema);\n-                        if (attribute != null) {\n-                            values = attribute.getValuesAsStrings();\n-                            if (values != null && !values.isEmpty()) {\n-                                evaluatedPPSpec.getWordsNotPermitted().add(values.get(0));\n-                            }\n+        switch (policy.getType()) {\n+            case PASSWORD:\n+            case GLOBAL_PASSWORD:\n+                final PasswordPolicySpec ppSpec = policy.getSpecification();\n+                final PasswordPolicySpec evaluatedPPSpec = new PasswordPolicySpec();\n+\n+                BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[]{\"schemasNotPermitted\"});\n+\n+                for (String schema : ppSpec.getSchemasNotPermitted()) {\n+                    AbstractAttr attribute = attributable.getAttribute(schema);\n+                    if (attribute != null) {\n+                        List<String> values = attribute.getValuesAsStrings();\n+                        if (values != null && !values.isEmpty()) {\n+                            evaluatedPPSpec.getWordsNotPermitted().add(values.get(0));\n                         }\n                     }\n+                }\n \n-                    // Password history verification and update\n+                // Password history verification and update\n \n-                    if (!(attributable instanceof SyncopeUser)) {\n-                        LOG.error(\"Cannot check previous passwords. attributable is not a user object: {}\",\n-                                attributable.getClass().getName());\n-                        result = (T) evaluatedPPSpec;\n-                        break;\n-                    }\n-                    SyncopeUser user = (SyncopeUser) attributable;\n-                    if (user.verifyPasswordHistory(user.getClearPassword(), ppSpec.getHistoryLength())) {\n-                        evaluatedPPSpec.getWordsNotPermitted().add(user.getClearPassword());\n-                    }\n+                if (!(attributable instanceof SyncopeUser)) {\n+                    LOG.error(\"Cannot check previous passwords. attributable is not a user object: {}\",\n+                            attributable.getClass().getName());\n                     result = (T) evaluatedPPSpec;\n                     break;\n-                case ACCOUNT:\n-                case GLOBAL_ACCOUNT:\n-                    final AccountPolicySpec spec = policy.getSpecification();\n-                    final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n-\n-                    BeanUtils.copyProperties(spec, accountPolicy, new String[]{\"schemasNotPermitted\"});\n-\n-                    for (String schema : spec.getSchemasNotPermitted()) {\n-                        attribute = attributable.getAttribute(schema);\n-                        if (attribute != null) {\n-                            values = attribute.getValuesAsStrings();\n-                            if (values != null && !values.isEmpty()) {\n-                                accountPolicy.getWordsNotPermitted().add(values.get(0));\n-                            }\n+                }\n+                SyncopeUser user = (SyncopeUser) attributable;\n+                if (user.verifyPasswordHistory(user.getClearPassword(), ppSpec.getHistoryLength())) {\n+                    evaluatedPPSpec.getWordsNotPermitted().add(user.getClearPassword());\n+                }\n+                result = (T) evaluatedPPSpec;\n+                break;\n+            case ACCOUNT:\n+            case GLOBAL_ACCOUNT:\n+                final AccountPolicySpec spec = policy.getSpecification();\n+                final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n+\n+                BeanUtils.copyProperties(spec, accountPolicy, new String[]{\"schemasNotPermitted\"});\n+\n+                for (String schema : spec.getSchemasNotPermitted()) {\n+                    AbstractAttr attribute = attributable.getAttribute(schema);\n+                    if (attribute != null) {\n+                        List<String> values = attribute.getValuesAsStrings();\n+                        if (values != null && !values.isEmpty()) {\n+                            accountPolicy.getWordsNotPermitted().add(values.get(0));\n                         }\n                     }\n-\n-                    result = (T) accountPolicy;\n-                    break;\n-                case SYNC:\n-                case GLOBAL_SYNC:\n-                default:\n-                    result = null;\n-            }\n+                }\n+\n+                result = (T) accountPolicy;\n+                break;\n+            case SYNC:\n+            case GLOBAL_SYNC:\n+            default:\n+                result = null;\n         }\n \n         return result;"},{"sha":"2e2745f09eae0cb6ea2b201c1deb06ac4b12ebe8","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/ConnectorFacadeProxy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -25,7 +25,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n import org.apache.syncope.common.types.PropagationMode;"},{"sha":"6a359af9b4bbdb89445b96c5b08af416578d89d0","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -179,7 +179,7 @@ protected List<PropagationTask> getCreateTaskIds(final AbstractAttributable attr\n             final PropagationByResource propByRes, final Set<String> syncResourceNames) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n-            return Collections.EMPTY_LIST;\n+            return Collections.<PropagationTask>emptyList();\n         }\n \n         if (syncResourceNames != null) {\n@@ -318,9 +318,9 @@ protected List<PropagationTask> getUpdateTaskIds(final AbstractAttributable attr\n                 ? userDataBinder : roleDataBinder;\n \n         PropagationByResource localPropByRes = binder.fillVirtual(attributable, vAttrsToBeRemoved == null\n-                ? Collections.EMPTY_SET\n+                ? Collections.<String>emptySet()\n                 : vAttrsToBeRemoved, vAttrsToBeUpdated == null\n-                ? Collections.EMPTY_SET\n+                ? Collections.<AttributeMod>emptySet()\n                 : vAttrsToBeUpdated, AttributableUtil.getInstance(attributable));\n \n         if (propByRes == null || propByRes.isEmpty()) {"},{"sha":"3f8b3aa34b3f6985adc27a6689e29c5ea5ea184f","filename":"core/src/main/java/org/apache/syncope/core/report/ReportJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -30,13 +30,11 @@\n import java.util.zip.Deflater;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n-\n import javax.xml.transform.OutputKeys;\n import javax.xml.transform.Transformer;\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n-\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.types.ReportExecStatus;\n import org.apache.syncope.core.persistence.beans.Report;\n@@ -58,6 +56,7 @@\n /**\n  * Quartz job for executing a given report.\n  */\n+@SuppressWarnings(\"unchecked\")\n @DisallowConcurrentExecution\n public class ReportJob implements Job {\n \n@@ -98,6 +97,7 @@ public void setReportId(final Long reportId) {\n         this.reportId = reportId;\n     }\n \n+    @SuppressWarnings(\"rawtypes\")\n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n         Report report = reportDAO.find(reportId);"},{"sha":"6fea42b6e1f088637b2a11d5a4a5573dbb1fc152","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,9 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.syncope.common.to.DerivedSchemaTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n@@ -32,6 +30,7 @@\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n import org.apache.syncope.core.persistence.dao.DerSchemaDAO;\n import org.apache.syncope.core.rest.data.DerivedSchemaDataBinder;\n+import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.NotFoundException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -75,26 +74,26 @@ public DerivedSchemaTO create(final HttpServletResponse response,\n     public DerivedSchemaTO delete(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String derivedSchemaName) throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).derSchemaClass();\n+        Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n         AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n         }\n-        \n+\n         DerivedSchemaTO schemaToDelete = derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n \n         derivedSchemaDAO.delete(derivedSchemaName, getAttributableUtil(kind));\n \n         auditManager.audit(Category.schema, SchemaSubCategory.deleteDerived, Result.success,\n                 \"Successfully deleted derived schema: \" + kind + \"/\" + derivedSchema.getName());\n-        \n+\n         return schemaToDelete;\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n-        Class reference = getAttributableUtil(kind).derSchemaClass();\n-        List<AbstractDerSchema> derivedAttributeSchemas = derivedSchemaDAO.findAll(reference);\n+        AttributableUtil attributableUtil = getAttributableUtil(kind);\n+        List<AbstractDerSchema> derivedAttributeSchemas = derivedSchemaDAO.findAll(attributableUtil.derSchemaClass());\n \n         List<DerivedSchemaTO> derivedSchemaTOs = new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());\n         for (AbstractDerSchema derivedSchema : derivedAttributeSchemas) {\n@@ -112,7 +111,7 @@ public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n     public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"derivedSchema\") final String derivedSchemaName) throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).derSchemaClass();\n+        Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n         AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n             throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n@@ -129,7 +128,7 @@ public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n     public DerivedSchemaTO update(@RequestBody final DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") final String kind) throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).derSchemaClass();\n+        Class<? extends AbstractDerSchema> reference = getAttributableUtil(kind).derSchemaClass();\n         AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaTO.getName(), reference);\n         if (derivedSchema == null) {\n             throw new NotFoundException(\"Derived schema '\" + derivedSchemaTO.getName() + \"'\");"},{"sha":"1d5b6199fe9f29528ba93f216adab574d1b83d0c","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -22,9 +22,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.PropagationTO;\n@@ -133,7 +131,7 @@ public RoleTO selfRead(@PathVariable(\"roleId\") final Long roleId)\n         Set<Long> ownedRoleIds;\n         SyncopeUser authUser = userDAO.find(SecurityContextHolder.getContext().getAuthentication().getName());\n         if (authUser == null) {\n-            ownedRoleIds = Collections.EMPTY_SET;\n+            ownedRoleIds = Collections.<Long>emptySet();\n         } else {\n             ownedRoleIds = authUser.getRoleIds();\n         }"},{"sha":"e51ac491090e9d8106119a8ffa29b9e08ebfa372","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,9 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n@@ -75,7 +73,7 @@ public SchemaTO create(final HttpServletResponse response, @RequestBody final Sc\n     public SchemaTO delete(@PathVariable(\"kind\") final String kind, @PathVariable(\"schema\") final String schemaName)\n             throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).schemaClass();\n+        Class<? extends AbstractSchema> reference = getAttributableUtil(kind).schemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             throw new NotFoundException(\"Schema '\" + schemaName + \"'\");"},{"sha":"0ae671fd75d2d216fe47ed8f117f5e2a29a88493","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/VirtualSchemaController.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,9 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.syncope.common.to.VirtualSchemaTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n@@ -76,7 +74,7 @@ virtualSchemaTO, getAttributableUtil(kind).newVirSchema(),\n     public VirtualSchemaTO delete(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String virtualSchemaName) throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).virSchemaClass();\n+        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n         AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaName, reference);\n         if (virtualSchema == null) {\n             throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n@@ -92,8 +90,8 @@ public VirtualSchemaTO delete(@PathVariable(\"kind\") final String kind,\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public List<VirtualSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n-        Class reference = getAttributableUtil(kind).virSchemaClass();\n-        List<AbstractVirSchema> virtualAttributeSchemas = virtualSchemaDAO.findAll(reference);\n+        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n+        List<? extends AbstractVirSchema> virtualAttributeSchemas = virtualSchemaDAO.findAll(reference);\n \n         List<VirtualSchemaTO> virtualSchemaTOs = new ArrayList<VirtualSchemaTO>(virtualAttributeSchemas.size());\n         for (AbstractVirSchema virtualSchema : virtualAttributeSchemas) {\n@@ -111,7 +109,7 @@ public List<VirtualSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n     public VirtualSchemaTO read(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"virtualSchema\") final String virtualSchemaName) throws NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).virSchemaClass();\n+        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n         AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaName, reference);\n         if (virtualSchema == null) {\n             throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n@@ -128,7 +126,7 @@ public VirtualSchemaTO read(@PathVariable(\"kind\") final String kind,\n     public VirtualSchemaTO update(@RequestBody final VirtualSchemaTO virtualSchemaTO,\n             @PathVariable(\"kind\") final String kind) throws SyncopeClientCompositeErrorException, NotFoundException {\n \n-        Class reference = getAttributableUtil(kind).virSchemaClass();\n+        Class<? extends AbstractVirSchema> reference = getAttributableUtil(kind).virSchemaClass();\n         AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaTO.getName(), reference);\n         if (virtualSchema == null) {\n             throw new NotFoundException(\"Virtual schema is null\");"},{"sha":"8dccc7145fffc9164393a7a1e89fd729648f0046","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -25,9 +25,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n-\n import javax.validation.ValidationException;\n-\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang.StringUtils;\n@@ -183,7 +181,7 @@ protected void fillAttribute(final List<String> values, final AttributableUtil a\n         List<String> valuesProvided = schema.isMultivalue()\n                 ? values\n                 : (values.isEmpty()\n-                ? Collections.EMPTY_LIST\n+                ? Collections.<String>emptyList()\n                 : Collections.singletonList(values.iterator().next()));\n \n         for (String value : valuesProvided) {\n@@ -707,7 +705,8 @@ protected void fill(final AbstractAttributable attributable, final AbstractAttri\n     protected void fillTO(final AbstractAttributableTO abstractAttributableTO,\n             final Collection<? extends AbstractAttr> attributes,\n             final Collection<? extends AbstractDerAttr> derivedAttributes,\n-            final Collection<? extends AbstractVirAttr> virtualAttributes, final Collection<ExternalResource> resources) {\n+            final Collection<? extends AbstractVirAttr> virtualAttributes,\n+            final Collection<ExternalResource> resources) {\n \n         AttributeTO attributeTO;\n         for (AbstractAttr attribute : attributes) {"},{"sha":"54a6bbf6d5b1310f03545439082f9f4a9a73cf2d","filename":"core/src/main/java/org/apache/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":22,"deletions":9,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -36,9 +36,11 @@ public class PolicyDataBinder {\n \n     /**\n      * Get policy TO from policy bean.\n+     *\n      * @param policy bean.\n      * @return policy TO.\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n         final PolicyTO policyTO;\n \n@@ -48,14 +50,17 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             case GLOBAL_ACCOUNT:\n             case GLOBAL_SYNC:\n                 isGlobal = Boolean.TRUE;\n+                break;\n+\n             default:\n         }\n \n         switch (policy.getType()) {\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n                 if (!(policy.getSpecification() instanceof PasswordPolicySpec)) {\n-                    throw new ClassCastException(\"policy is expected to be typed PasswordPolicySpec: \" + policy.getSpecification().getClass().getName());\n+                    throw new ClassCastException(\"policy is expected to be typed PasswordPolicySpec: \" + policy.\n+                            getSpecification().getClass().getName());\n                 }\n                 policyTO = new PasswordPolicyTO(isGlobal);\n                 ((PasswordPolicyTO) policyTO).setSpecification((PasswordPolicySpec) policy.getSpecification());\n@@ -64,7 +69,8 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n                 if (!(policy.getSpecification() instanceof AccountPolicySpec)) {\n-                    throw new ClassCastException(\"policy is expected to be typed AccountPolicySpec: \" + policy.getSpecification().getClass().getName());\n+                    throw new ClassCastException(\"policy is expected to be typed AccountPolicySpec: \" + policy.\n+                            getSpecification().getClass().getName());\n                 }\n                 policyTO = new AccountPolicyTO(isGlobal);\n                 ((AccountPolicyTO) policyTO).setSpecification((AccountPolicySpec) policy.getSpecification());\n@@ -74,7 +80,8 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             case SYNC:\n             default:\n                 if (!(policy.getSpecification() instanceof SyncPolicySpec)) {\n-                    throw new ClassCastException(\"policy is expected to be typed SyncPolicySpec: \" + policy.getSpecification().getClass().getName());\n+                    throw new ClassCastException(\"policy is expected to be typed SyncPolicySpec: \" + policy.\n+                            getSpecification().getClass().getName());\n                 }\n                 policyTO = new SyncPolicyTO(isGlobal);\n                 ((SyncPolicyTO) policyTO).setSpecification((SyncPolicySpec) policy.getSpecification());\n@@ -86,26 +93,30 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n         return (T) policyTO;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     public <T extends Policy> T getPolicy(T policy, final PolicyTO policyTO) {\n-\n         if (policy != null && policy.getType() != policyTO.getType()) {\n-            throw new IllegalArgumentException(String.format(\"Cannot update %s from %s\", policy.getType(), policyTO.getType()));\n+            throw new IllegalArgumentException(String.format(\"Cannot update %s from %s\", policy.getType(), policyTO.\n+                    getType()));\n         }\n-        \n+\n         boolean isGlobal = Boolean.FALSE;\n         switch (policyTO.getType()) {\n             case GLOBAL_PASSWORD:\n             case GLOBAL_ACCOUNT:\n             case GLOBAL_SYNC:\n                 isGlobal = Boolean.TRUE;\n+                break;\n+\n             default:\n         }\n \n         switch (policyTO.getType()) {\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n                 if (!(policyTO instanceof PasswordPolicyTO)) {\n-                    throw new ClassCastException(\"policyTO is expected to be typed PasswordPolicyTO: \" + policyTO.getClass().getName());\n+                    throw new ClassCastException(\"policyTO is expected to be typed PasswordPolicyTO: \" + policyTO.\n+                            getClass().getName());\n                 }\n                 if (policy == null) {\n                     policy = (T) new PasswordPolicy(isGlobal);\n@@ -116,7 +127,8 @@ public <T extends Policy> T getPolicy(T policy, final PolicyTO policyTO) {\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n                 if (!(policyTO instanceof AccountPolicyTO)) {\n-                    throw new ClassCastException(\"policyTO is expected to be typed AccountPolicyTO: \" + policyTO.getClass().getName());\n+                    throw new ClassCastException(\"policyTO is expected to be typed AccountPolicyTO: \" + policyTO.\n+                            getClass().getName());\n                 }\n                 if (policy == null) {\n                     policy = (T) new AccountPolicy(isGlobal);\n@@ -128,7 +140,8 @@ public <T extends Policy> T getPolicy(T policy, final PolicyTO policyTO) {\n             case SYNC:\n             default:\n                 if (!(policyTO instanceof SyncPolicyTO)) {\n-                    throw new ClassCastException(\"policyTO is expected to be typed SyncPolicyTO: \" + policyTO.getClass().getName());\n+                    throw new ClassCastException(\"policyTO is expected to be typed SyncPolicyTO: \"\n+                            + policyTO.getClass().getName());\n                 }\n                 if (policy == null) {\n                     policy = (T) new SyncPolicy(isGlobal);"},{"sha":"6013e5497064ef6774767c6bf7d12b8c3ac637bb","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ReportDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,7 +20,6 @@\n \n import java.util.HashSet;\n import java.util.Set;\n-\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n@@ -64,6 +63,7 @@ public class ReportDataBinder {\n     @Autowired\n     private ImplementationClassNamesLoader classNamesLoader;\n \n+    @SuppressWarnings(\"unchecked\")\n     public Set<Class<Reportlet>> getAllReportletClasses() {\n         Set<Class<Reportlet>> reportletClasses = new HashSet<Class<Reportlet>>();\n "},{"sha":"3958ffb363641423e913e5153cdc0bff3fd719a5","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import java.util.Set;\n-\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n@@ -260,6 +259,7 @@ public PropagationByResource update(final SyncopeRole role, final RoleMod roleMo\n         return propByRes;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     @Transactional(readOnly = true)\n     public RoleTO getRoleTO(final SyncopeRole role) {\n         connObjectUtil.retrieveVirAttrValues(role, AttributableUtil.getInstance(AttributableType.ROLE));"},{"sha":"db68374ce69c59ac3fd4fde76555d1d10a6c4f21","filename":"core/src/main/java/org/apache/syncope/core/services/DummyHTTPServletResponse.java","status":"modified","additions":52,"deletions":28,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,15 +21,18 @@\n import java.io.IOException;\r\n import java.io.PrintWriter;\r\n import java.util.Locale;\r\n-\r\n import javax.servlet.ServletOutputStream;\r\n import javax.servlet.http.Cookie;\r\n import javax.servlet.http.HttpServletResponse;\r\n \r\n+/**\r\n+ * Dummy (empty) HttpServletResponse.\r\n+ */\r\n public class DummyHTTPServletResponse implements HttpServletResponse {\r\n \r\n     @Override\r\n     public void flushBuffer() throws IOException {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n@@ -69,103 +72,124 @@ public boolean isCommitted() {\n \r\n     @Override\r\n     public void reset() {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n     public void resetBuffer() {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setBufferSize(int arg0) {\r\n+    public void setBufferSize(final int arg0) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setCharacterEncoding(String arg0) {\r\n+    public void setCharacterEncoding(final String arg0) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setContentLength(int arg0) {\r\n+    public void setContentLength(final int arg0) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setContentType(String arg0) {\r\n+    public void setContentType(final String arg0) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setLocale(Locale arg0) {\r\n+    public void setLocale(final Locale arg0) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void addCookie(Cookie arg0) {\r\n+    public void addCookie(final Cookie arg0) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void addDateHeader(String arg0, long arg1) {\r\n+    public void addDateHeader(final String arg0, final long arg1) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void addHeader(String arg0, String arg1) {\r\n+    public void addHeader(final String arg0, final String arg1) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void addIntHeader(String arg0, int arg1) {\r\n+    public void addIntHeader(final String arg0, final int arg1) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public boolean containsHeader(String arg0) {\r\n+    public boolean containsHeader(final String arg0) {\r\n         return false;\r\n     }\r\n \r\n     @Override\r\n-    public String encodeRedirectURL(String arg0) {\r\n-        return null;\r\n+    public String encodeRedirectURL(final String arg0) {\r\n+        return arg0;\r\n     }\r\n \r\n     @Override\r\n-    public String encodeRedirectUrl(String arg0) {\r\n-        return null;\r\n+    @Deprecated\r\n+    public String encodeRedirectUrl(final String arg0) {\r\n+        return arg0;\r\n     }\r\n \r\n     @Override\r\n-    public String encodeURL(String arg0) {\r\n-        return null;\r\n+    public String encodeURL(final String arg0) {\r\n+        return arg0;\r\n     }\r\n \r\n     @Override\r\n-    public String encodeUrl(String arg0) {\r\n-        return null;\r\n+    @Deprecated\r\n+    public String encodeUrl(final String arg0) {\r\n+        return arg0;\r\n     }\r\n \r\n     @Override\r\n-    public void sendError(int arg0) throws IOException {\r\n+    public void sendError(final int arg0) throws IOException {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void sendError(int arg0, String arg1) throws IOException {\r\n+    public void sendError(final int arg0, final String arg1) throws IOException {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void sendRedirect(String arg0) throws IOException {\r\n+    public void sendRedirect(final String arg0) throws IOException {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setDateHeader(String arg0, long arg1) {\r\n+    public void setDateHeader(final String arg0, final long arg1) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setHeader(String arg0, String arg1) {\r\n+    public void setHeader(final String arg0, final String arg1) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setIntHeader(String arg0, int arg1) {\r\n+    public void setIntHeader(final String arg0, final int arg1) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setStatus(int arg0) {\r\n+    public void setStatus(final int arg0) {\r\n+        // No action.\r\n     }\r\n \r\n     @Override\r\n-    public void setStatus(int arg0, String arg1) {\r\n+    @Deprecated\r\n+    public void setStatus(final int arg0, final String arg1) {\r\n+        // No action.\r\n     }\r\n-\r\n }\r"},{"sha":"a25416dc3c81b7f00adcc512180488ed3977a49f","filename":"core/src/main/java/org/apache/syncope/core/services/SchemaServiceImpl.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FSchemaServiceImpl.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,11 +20,9 @@\n \r\n import java.net.URI;\r\n import java.util.List;\r\n-\r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n-\r\n import org.apache.syncope.common.services.SchemaService;\r\n import org.apache.syncope.common.to.AbstractSchemaTO;\r\n import org.apache.syncope.common.to.DerivedSchemaTO;\r\n@@ -85,12 +83,15 @@ public void delete(final AttributableType kind, final SchemaType type, final Str\n             switch (type) {\r\n                 case NORMAL:\r\n                     normalSchemaController.delete(kind.toString(), schemaName);\r\n+                    break;\r\n \r\n                 case DERIVED:\r\n                     derivedSchemaController.delete(kind.toString(), schemaName);\r\n+                    break;\r\n \r\n                 case VIRTUAL:\r\n                     virtualSchemaController.delete(kind.toString(), schemaName);\r\n+                    break;\r\n \r\n                 default:\r\n                     throw new BadRequestException();\r\n@@ -142,18 +143,21 @@ public <T extends AbstractSchemaTO> T read(final AttributableType kind, final Sc\n     }\r\n \r\n     @Override\r\n-    public  <T extends AbstractSchemaTO> void update(final AttributableType kind, final SchemaType type,\r\n+    public <T extends AbstractSchemaTO> void update(final AttributableType kind, final SchemaType type,\r\n             final String schemaName, final T schemaTO) {\r\n         try {\r\n             switch (type) {\r\n                 case NORMAL:\r\n                     normalSchemaController.update((SchemaTO) schemaTO, kind.toString());\r\n+                    break;\r\n \r\n                 case DERIVED:\r\n                     derivedSchemaController.update((DerivedSchemaTO) schemaTO, kind.toString());\r\n+                    break;\r\n \r\n                 case VIRTUAL:\r\n                     virtualSchemaController.update((VirtualSchemaTO) schemaTO, kind.toString());\r\n+                    break;\r\n \r\n                 default:\r\n                     throw new BadRequestException();\r"},{"sha":"12705fae1911fd375ffa70a04a33d1643c1f70e7","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -24,7 +24,6 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-\n import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.mod.UserMod;\n@@ -390,12 +389,12 @@ public List<Long> findExisting(final String uid, final ConnectorObject connObj,\n                 : findByAttributableSearch(connObj, policySpec, attrUtil);\n     }\n \n-    protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUtil,\n-            final boolean dryRun) throws JobExecutionException {\n+    protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUtil, final boolean dryRun)\n+            throws JobExecutionException {\n \n         if (!syncTask.isPerformCreate()) {\n             LOG.debug(\"SyncTask not configured for create\");\n-            return Collections.EMPTY_LIST;\n+            return Collections.<SyncResult>emptyList();\n         }\n \n         final SyncResult result = new SyncResult();\n@@ -486,7 +485,7 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n \n         if (!syncTask.isPerformUpdate()) {\n             LOG.debug(\"SyncTask not configured for update\");\n-            return Collections.EMPTY_LIST;\n+            return Collections.<SyncResult>emptyList();\n         }\n \n         LOG.debug(\"About to update {}\", subjects);\n@@ -568,7 +567,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n \n         if (!syncTask.isPerformDelete()) {\n             LOG.debug(\"SyncTask not configured for delete\");\n-            return Collections.EMPTY_LIST;\n+            return Collections.<SyncResult>emptyList();\n         }\n \n         LOG.debug(\"About to delete {}\", subjects);\n@@ -596,10 +595,10 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n \n                 if (!dryRun) {\n                     try {\n-                        List<PropagationTask> tasks = Collections.EMPTY_LIST;\n+                        List<PropagationTask> tasks = Collections.<PropagationTask>emptyList();\n                         if (AttributableType.USER == attrUtil.getType()) {\n                             tasks = propagationManager.getUserDeleteTaskIds(id, syncTask.getResource().getName());\n-                            notificationManager.createTasks(id, Collections.singleton(\"delete\"));\n+                            notificationManager.createTasks(id, Collections.<String>singleton(\"delete\"));\n                         }\n                         if (AttributableType.ROLE == attrUtil.getType()) {\n                             tasks = propagationManager.getRoleDeleteTaskIds(id, syncTask.getResource().getName());"},{"sha":"bb29640147eee192ae6021cafd8760f4768343d1","filename":"core/src/main/java/org/apache/syncope/core/util/AttributableUtil.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributableUtil.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Collections;\n import java.util.List;\n-\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.RoleTO;\n@@ -69,6 +68,7 @@\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n \n+@SuppressWarnings(\"unchecked\")\n public class AttributableUtil {\n \n     private final AttributableType type;\n@@ -127,12 +127,14 @@ public <T extends AbstractAttributable> Class<T> attributableClass() {\n             case ROLE:\n                 result = SyncopeRole.class;\n                 break;\n+\n             case MEMBERSHIP:\n                 result = Membership.class;\n+                break;\n+\n             case USER:\n             default:\n                 result = SyncopeUser.class;\n-                break;\n         }\n \n         return result;"},{"sha":"0920403df7db6e723902187e95afdf1325af4a56","filename":"core/src/main/java/org/apache/syncope/core/util/ImportExport.java","status":"modified","additions":28,"deletions":12,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -42,7 +42,6 @@\n import java.util.Properties;\n import java.util.Set;\n import java.util.TreeMap;\n-\n import javax.persistence.EntityManager;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n@@ -53,7 +52,6 @@\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n-\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang.time.DateUtils;\n import org.apache.syncope.common.SyncopeConstants;\n@@ -123,22 +121,23 @@ private String readSchema() {\n     }\n \n     private void setParameters(final String tableName, final Attributes attrs, final Query query) {\n-\n         Map<String, Integer> colTypes = new HashMap<String, Integer>();\n \n-        Connection conn = DataSourceUtils.getConnection(dataSource);\n+        Connection conn = null;\n         ResultSet rs = null;\n         PreparedStatement stmt = null;\n-\n         try {\n+            conn = DataSourceUtils.getConnection(dataSource);\n+\n             final String queryString = \"SELECT * FROM \" + tableName;\n             stmt = conn.prepareStatement(queryString);\n             rs = stmt.executeQuery();\n             for (int i = 0; i < rs.getMetaData().getColumnCount(); i++) {\n-                colTypes.put(rs.getMetaData().getColumnName(i + 1).toUpperCase(), rs.getMetaData().getColumnType(i + 1));\n+                colTypes.put(rs.getMetaData().getColumnName(i + 1).toUpperCase(),\n+                        rs.getMetaData().getColumnType(i + 1));\n             }\n         } catch (SQLException e) {\n-            LOG.error(\"While\", e);\n+            LOG.error(\"While setting column types\", e);\n         } finally {\n             if (stmt != null) {\n                 try {\n@@ -154,7 +153,17 @@ private void setParameters(final String tableName, final Attributes attrs, final\n                     LOG.error(\"While closing result set\", e);\n                 }\n             }\n+\n             DataSourceUtils.releaseConnection(conn, dataSource);\n+            if (conn != null) {\n+                try {\n+                    if (!conn.isClosed()) {\n+                        conn.close();\n+                    }\n+                } catch (SQLException e) {\n+                    LOG.error(\"While releasing connection\", e);\n+                }\n+            }\n         }\n \n         for (int i = 0; i < attrs.getLength(); i++) {\n@@ -392,7 +401,6 @@ private List<String> sortByForeignKeys(final Connection conn, final Set<String>\n                 while (rs.next()) {\n                     pkTableNames.add(rs.getString(\"PKTABLE_NAME\"));\n                 }\n-\n             } finally {\n                 if (rs != null) {\n                     try {\n@@ -404,7 +412,6 @@ private List<String> sortByForeignKeys(final Connection conn, final Set<String>\n             }\n \n             for (String pkTableName : pkTableNames) {\n-\n                 if (!tableName.equalsIgnoreCase(pkTableName)) {\n \n                     MultiParentNode<String> pkNode = exploited.get(pkTableName);\n@@ -445,11 +452,10 @@ public void export(final OutputStream os)\n         handler.startDocument();\n         handler.startElement(\"\", \"\", ROOT_ELEMENT, new AttributesImpl());\n \n-        final Connection conn = DataSourceUtils.getConnection(dataSource);\n-\n+        Connection conn = null;\n         ResultSet rs = null;\n-\n         try {\n+            conn = DataSourceUtils.getConnection(dataSource);\n             final DatabaseMetaData meta = conn.getMetaData();\n \n             final String schema = readSchema();\n@@ -481,7 +487,17 @@ public void export(final OutputStream os)\n                     LOG.error(\"While closing tables result set\", e);\n                 }\n             }\n+\n             DataSourceUtils.releaseConnection(conn, dataSource);\n+            if (conn != null) {\n+                try {\n+                    if (!conn.isClosed()) {\n+                        conn.close();\n+                    }\n+                } catch (SQLException e) {\n+                    LOG.error(\"While releasing connection\", e);\n+                }\n+            }\n         }\n \n         handler.endElement(\"\", \"\", ROOT_ELEMENT);"},{"sha":"b594f6c2c11222721d8111f7074a1488f8136c66","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -113,6 +113,7 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n      * @return account link + prepared attribute\n      * @throws ClassNotFoundException if schema type for given mapping does not exists in current class loader\n      */\n+    @SuppressWarnings(\"unchecked\")\n     public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n             final ExternalResource resource, final AbstractMappingItem mapItem,\n             final T subject, final String password,"},{"sha":"3263bdc79b7403ef71c968e74ffdfa37ea2b5fa5","filename":"core/src/main/java/org/apache/syncope/core/util/TaskUtil.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FTaskUtil.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n \n+@SuppressWarnings(\"unchecked\")\n public enum TaskUtil {\n \n     PROPAGATION,\n@@ -43,15 +44,20 @@ public <T extends Task> Class<T> taskClass() {\n             case PROPAGATION:\n                 result = PropagationTask.class;\n                 break;\n+\n             case SCHED:\n                 result = SchedTask.class;\n                 break;\n+\n             case SYNC:\n                 result = SyncTask.class;\n                 break;\n+\n             case NOTIFICATION:\n                 result = NotificationTask.class;\n                 break;\n+\n+            default:\n         }\n \n         return result;\n@@ -64,15 +70,20 @@ public <T extends Task> T newTask() {\n             case PROPAGATION:\n                 result = (T) new PropagationTask();\n                 break;\n+\n             case SCHED:\n                 result = (T) new SchedTask();\n                 break;\n+\n             case SYNC:\n                 result = (T) new SyncTask();\n                 break;\n+\n             case NOTIFICATION:\n                 result = (T) new NotificationTask();\n                 break;\n+\n+            default:\n         }\n \n         return result;\n@@ -85,15 +96,20 @@ public <T extends TaskTO> Class<T> taskTOClass() {\n             case PROPAGATION:\n                 result = PropagationTaskTO.class;\n                 break;\n+\n             case SCHED:\n                 result = SchedTaskTO.class;\n                 break;\n+\n             case SYNC:\n                 result = SyncTaskTO.class;\n                 break;\n+\n             case NOTIFICATION:\n                 result = NotificationTaskTO.class;\n                 break;\n+\n+            default:\n         }\n \n         return result;\n@@ -106,14 +122,20 @@ public <T extends TaskTO> T newTaskTO() {\n             case PROPAGATION:\n                 result = (T) new PropagationTaskTO();\n                 break;\n+\n             case SCHED:\n                 result = (T) new SchedTaskTO();\n                 break;\n+\n             case SYNC:\n                 result = (T) new SyncTaskTO();\n                 break;\n+\n             case NOTIFICATION:\n                 result = (T) new NotificationTaskTO();\n+                break;\n+\n+            default:\n         }\n \n         return result;"},{"sha":"636da3236a5142e86f937e73313efb7b0bf4e165","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -34,14 +34,12 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import javax.annotation.Resource;\n import javax.xml.parsers.DocumentBuilder;\n import javax.xml.parsers.DocumentBuilderFactory;\n import javax.xml.xpath.XPath;\n import javax.xml.xpath.XPathConstants;\n import javax.xml.xpath.XPathFactory;\n-\n import org.activiti.engine.ActivitiException;\n import org.activiti.engine.FormService;\n import org.activiti.engine.HistoryService;\n@@ -504,6 +502,7 @@ private WorkflowFormPropertyType fromActivitiFormType(final FormType activitiFor\n         return result;\n     }\n \n+    @SuppressWarnings(\"unchecked\")\n     private WorkflowFormTO getFormTO(final Task task, final TaskFormData formData) {\n         WorkflowFormTO formTO = new WorkflowFormTO();\n         formTO.setTaskId(task.getId());"},{"sha":"bdec182ce9575d44344530706b1fbff6fdbc1bff","filename":"core/src/main/resources/logback.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -90,10 +90,6 @@ under the License.\n     <level value=\"INFO\"/>\n     <appender-ref ref=\"persistence\"/>\n   </logger>\n-  <logger name=\"org.apache.syncope.core.persistence.propagation.ConnectorFacadeProxy\" additivity=\"false\">\n-    <level value=\"INFO\"/>\n-    <appender-ref ref=\"persistence\"/>\n-  </logger>\n     \n   <logger name=\"org.apache.syncope.core.security\" additivity=\"false\">\n     <level value=\"INFO\"/>"},{"sha":"3337dd32373d9431a43f9522527f7b1ba89d004c","filename":"core/src/main/resources/persistenceContextEMFactory.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -37,8 +37,8 @@ under the License.\n     <property name=\"jpaPropertyMap\">\n       <map>\n         <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>\n- <entry key=\"openjpa.ConnectionFactoryProperties\" \n-        value=\"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n+        <entry key=\"openjpa.ConnectionFactoryProperties\" \n+               value=\"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n                 \n         <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n         <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>"},{"sha":"0d20d076728c79ce6009862186487b064b5f0e45","filename":"core/src/test/java/org/apache/syncope/core/AbstractNonDAOTest.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractNonDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractNonDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractNonDAOTest.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core;\n+\n+import org.junit.runner.RunWith;\n+import org.springframework.test.context.ContextConfiguration;\n+import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n+\n+@RunWith(SpringJUnit4ClassRunner.class)\n+@ContextConfiguration(locations = {\"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n+    \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\"})\n+public abstract class AbstractNonDAOTest extends AbstractTest {\n+}"},{"sha":"ddcc50f91cfc399498e35defcb51afeb9556f73b","filename":"core/src/test/java/org/apache/syncope/core/AbstractTest.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -23,17 +23,10 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Properties;\n-\n import org.junit.BeforeClass;\n-import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.test.context.ContextConfiguration;\n-import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n-@RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n-    \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\"})\n public abstract class AbstractTest {\n \n     /**"},{"sha":"aa37824785e50a2bdd976e2c1a9dcfdbdb999566","filename":"core/src/test/java/org/apache/syncope/core/connid/PasswordGeneratorTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -24,10 +24,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n-import org.apache.syncope.core.AbstractTest;\n+import org.apache.syncope.core.AbstractNonDAOTest;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.policy.PolicyPattern;\n@@ -37,7 +36,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class PasswordGeneratorTest extends AbstractTest {\n+public class PasswordGeneratorTest extends AbstractNonDAOTest {\n \n     @Autowired\n     private PasswordGenerator passwordGenerator;"},{"sha":"b00dd8ee7652c65bd21481491637084edbae1ac4","filename":"core/src/test/java/org/apache/syncope/core/init/ConnInstanceLoaderTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -20,7 +20,7 @@\n \n import static org.junit.Assert.assertEquals;\n \n-import org.apache.syncope.core.AbstractTest;\n+import org.apache.syncope.core.AbstractNonDAOTest;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.propagation.SyncopeConnector;\n import org.apache.syncope.core.rest.data.ResourceDataBinder;\n@@ -33,7 +33,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class ConnInstanceLoaderTest extends AbstractTest {\n+public class ConnInstanceLoaderTest extends AbstractNonDAOTest {\n \n     private ConnInstanceLoader cil;\n "},{"sha":"07340ad6bdeec866ce21a9d15ffbe99dec20594e","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -21,17 +21,17 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n+import com.icegreen.greenmail.util.GreenMail;\n+import com.icegreen.greenmail.util.ServerSetup;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Random;\n-\n import javax.annotation.Resource;\n import javax.mail.Flags.Flag;\n import javax.mail.Folder;\n import javax.mail.Message;\n import javax.mail.Session;\n import javax.mail.Store;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.search.MembershipCond;\n import org.apache.syncope.common.search.NodeCond;\n@@ -71,9 +71,6 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.transaction.annotation.Transactional;\n \n-import com.icegreen.greenmail.util.GreenMail;\n-import com.icegreen.greenmail.util.ServerSetup;\n-\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n     \"classpath:syncopeContext.xml\","},{"sha":"5e9e94b00256e4f4be2a7a9b50325eca4b991655","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AbstractDAOTest.java","status":"modified","additions":2,"deletions":40,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAbstractDAOTest.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -18,50 +18,12 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n-import static org.junit.Assert.assertNotNull;\n-\n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Properties;\n-\n-import org.junit.BeforeClass;\n+import org.apache.syncope.core.AbstractTest;\n import org.junit.runner.RunWith;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\"classpath:persistenceTestEnv.xml\"})\n-public abstract class AbstractDAOTest {\n-\n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(AbstractDAOTest.class);\n-\n-    protected static String connidSoapVersion;\n-\n-    protected static String bundlesDirectory;\n-\n-    @BeforeClass\n-    public static void setUpIdentityConnectorsBundles() throws IOException {\n-        Properties props = new Properties();\n-        InputStream propStream = null;\n-        try {\n-            propStream = AbstractDAOTest.class.getResourceAsStream(\"/bundles.properties\");\n-            props.load(propStream);\n-            connidSoapVersion = props.getProperty(\"connid.soap.version\");\n-            bundlesDirectory = props.getProperty(\"bundles.directory\");\n-        } catch (Exception e) {\n-            LOG.error(\"Could not load bundles.properties\", e);\n-        } finally {\n-            if (propStream != null) {\n-                propStream.close();\n-            }\n-        }\n-        assertNotNull(connidSoapVersion);\n-        assertNotNull(bundlesDirectory);\n-    }\n+public abstract class AbstractDAOTest extends AbstractTest {\n }\n-"},{"sha":"6b5e49a2f511c5fa6857fb5d9cea3cb249dbb779","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/impl/TestDbInitializer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTestDbInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTestDbInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTestDbInitializer.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -19,17 +19,17 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import javax.servlet.ServletContext;\n-\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.web.context.ServletContextAware;\n \n /**\n- * Take care of all initializations needed by Syncope to run up and safe.\n+ * Take care of all initializations needed by Syncope to run up and safe for tests.\n  */\n @Component\n public class TestDbInitializer implements ServletContextAware, InitializingBean {\n+\n     @Autowired\n     private ContentLoader contentLoader;\n "},{"sha":"a84deb17e67418140134016e43642b232793f2e9","filename":"core/src/test/java/org/apache/syncope/core/rest/data/ResourceDataTest.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataTest.java?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -28,13 +28,12 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-\n import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MappingTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.PropagationMode;\n-import org.apache.syncope.core.AbstractTest;\n+import org.apache.syncope.core.AbstractNonDAOTest;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n@@ -46,7 +45,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class ResourceDataTest extends AbstractTest {\n+public class ResourceDataTest extends AbstractNonDAOTest {\n \n     @Autowired\n     private ResourceDAO resourceDAO;"},{"sha":"1ef9dc2793e82e67195e6867f306e407bae6b406","filename":"core/src/test/resources/persistenceTestEnv.xml","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3d08768a8933081c859a9f6efb35e4089168d636/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml?ref=3d08768a8933081c859a9f6efb35e4089168d636","patch":"@@ -33,10 +33,8 @@ under the License.\n                            http://www.springframework.org/schema/aop/spring-aop.xsd\">\n \n   <bean class=\"org.apache.syncope.core.persistence.dao.impl.TestDbInitializer\"/>\n-  <bean class=\"org.apache.syncope.core.persistence.dao.DummyConnectorRegistry\"> \n-  </bean>\n-  <bean class=\"org.apache.syncope.core.persistence.dao.impl.ContentLoader\">\n-  </bean>\n+  <bean class=\"org.apache.syncope.core.persistence.dao.DummyConnectorRegistry\"/> \n+  <bean class=\"org.apache.syncope.core.persistence.dao.impl.ContentLoader\"/>\n   \n   <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n     <property name=\"locations\">"}]}