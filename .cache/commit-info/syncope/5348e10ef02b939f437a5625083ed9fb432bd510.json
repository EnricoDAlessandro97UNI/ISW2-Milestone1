{"sha":"5348e10ef02b939f437a5625083ed9fb432bd510","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjUzNDhlMTBlZjAyYjkzOWY0MzdhNTYyNTA4M2VkOWZiNDMyYmQ1MTA=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-23T14:38:37Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-09-23T14:38:37Z"},"message":"Finally moving to JTA: weird...\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246528 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e447f2c520117a6f9bc3c6c2102c2758a61b602a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e447f2c520117a6f9bc3c6c2102c2758a61b602a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5348e10ef02b939f437a5625083ed9fb432bd510","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5348e10ef02b939f437a5625083ed9fb432bd510","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5348e10ef02b939f437a5625083ed9fb432bd510","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5348e10ef02b939f437a5625083ed9fb432bd510/comments","author":null,"committer":null,"parents":[{"sha":"523f1496368516e9e026115719e44edeb8b74482","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/523f1496368516e9e026115719e44edeb8b74482","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/523f1496368516e9e026115719e44edeb8b74482"}],"stats":{"total":298,"additions":270,"deletions":28},"files":[{"sha":"b3b24c7cdd284613a4ef5f30934a7a54f3726d02","filename":"client/src/main/java/org/syncope/client/to/SchemaTO.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSchemaTO.java?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -27,6 +27,7 @@ public class SchemaTO extends AbstractBaseBean {\n     private boolean mandatory;\n     private boolean multivalue;\n     private boolean uniquevalue;\n+    private boolean readonly;\n     private String conversionPattern;\n     private String validatorClass;\n     private Set<String> derivedSchemas;\n@@ -76,6 +77,14 @@ public void setUniquevalue(boolean uniquevalue) {\n         this.uniquevalue = uniquevalue;\n     }\n \n+    public boolean isReadonly() {\n+        return readonly;\n+    }\n+\n+    public void setReadonly(boolean readonly) {\n+        this.readonly = readonly;\n+    }\n+\n     public String getName() {\n         return name;\n     }"},{"sha":"2e752a13928da0ed367a1715a77331dd09452963","filename":"core/pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -423,7 +423,7 @@\n                         <containerId>tomcat6x</containerId>\n                         <zipUrlInstaller>\n                             <url>http://www.apache.org/dist/tomcat/tomcat-6/v6.0.29/bin/apache-tomcat-6.0.29.zip</url>\n-                            <installDir>${java.io.tmpdir}/tomcat</installDir>\n+                            <installDir>${java.io.tmpdir}/tomcat6x</installDir>\n                         </zipUrlInstaller>\n                         <log>${cargo.log}</log>\n                         <output>${cargo.output}</output>"},{"sha":"d3eb9829372723439d6ee47e42da694ddae9bb75","filename":"core/src/main/java/org/syncope/core/persistence/JTAPersistenceUnitPostProcessor.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FJTAPersistenceUnitPostProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FJTAPersistenceUnitPostProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FJTAPersistenceUnitPostProcessor.java?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -0,0 +1,85 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence;\n+\n+import java.util.Properties;\n+import javax.persistence.spi.PersistenceUnitTransactionType;\n+import javax.sql.DataSource;\n+import org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;\n+\n+public class JTAPersistenceUnitPostProcessor\n+        implements PersistenceUnitPostProcessor {\n+\n+    private boolean jtaMode = false;\n+    private DataSource jtaDataSource;\n+    private String transactionManagerLookupKey;\n+    private String transactionManagerLookupValue;\n+    private PersistenceUnitTransactionType transactionType =\n+            PersistenceUnitTransactionType.RESOURCE_LOCAL;\n+\n+    @Override\n+    public final void postProcessPersistenceUnitInfo(\n+            final MutablePersistenceUnitInfo mutablePersistenceUnitInfo) {\n+\n+        if (jtaMode) {\n+            transactionType = PersistenceUnitTransactionType.JTA;\n+            mutablePersistenceUnitInfo.setJtaDataSource(getJtaDataSource());\n+\n+            Properties persistenceUnitProps =\n+                    mutablePersistenceUnitInfo.getProperties();\n+            persistenceUnitProps.setProperty(transactionManagerLookupKey,\n+                    transactionManagerLookupValue);\n+            mutablePersistenceUnitInfo.setProperties(persistenceUnitProps);\n+        }\n+        mutablePersistenceUnitInfo.setTransactionType(transactionType);\n+    }\n+\n+    public final boolean isJtaMode() {\n+        return jtaMode;\n+    }\n+\n+    public final void setJtaMode(final boolean jtaMode) {\n+        this.jtaMode = jtaMode;\n+    }\n+\n+    public DataSource getJtaDataSource() {\n+        return jtaDataSource;\n+    }\n+\n+    public final void setJtaDataSource(final DataSource jtaDataSource) {\n+        this.jtaDataSource = jtaDataSource;\n+    }\n+\n+    public final String getTransactionManagerLookupKey() {\n+        return transactionManagerLookupKey;\n+    }\n+\n+    public final void setTransactionManagerLookupKey(\n+            final String transactionManagerLookupKey) {\n+\n+        this.transactionManagerLookupKey = transactionManagerLookupKey;\n+    }\n+\n+    public final String getTransactionManagerLookupValue() {\n+        return transactionManagerLookupValue;\n+    }\n+\n+    public final void setTransactionManagerLookupValue(\n+            final String transactionManagerLookupValue) {\n+\n+        this.transactionManagerLookupValue = transactionManagerLookupValue;\n+    }\n+}"},{"sha":"53efdfb099e5cb9c1d9d98d21c42312b79e20eb2","filename":"core/src/main/java/org/syncope/core/persistence/OmniTransactionManager.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FOmniTransactionManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FOmniTransactionManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FOmniTransactionManager.java?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -0,0 +1,116 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence;\n+\n+import java.io.Serializable;\n+import javax.transaction.NotSupportedException;\n+import javax.transaction.SystemException;\n+import javax.transaction.Transaction;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.orm.jpa.JpaTransactionManager;\n+import org.springframework.transaction.PlatformTransactionManager;\n+import org.springframework.transaction.TransactionDefinition;\n+import org.springframework.transaction.TransactionException;\n+import org.springframework.transaction.TransactionStatus;\n+import org.springframework.transaction.jta.JtaTransactionManager;\n+import org.springframework.transaction.jta.TransactionFactory;\n+\n+public class OmniTransactionManager implements PlatformTransactionManager,\n+        TransactionFactory, InitializingBean, Serializable {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            OmniTransactionManager.class);\n+    private JpaTransactionManager jpaTransactionManager;\n+    private JtaTransactionManager jtaTransactionManager;\n+\n+    public OmniTransactionManager() {\n+        jtaTransactionManager = new JtaTransactionManager();\n+    }\n+\n+    public OmniTransactionManager(JpaTransactionManager jpaTransactionManager) {\n+        super();\n+        setJpaTransactionManager(jpaTransactionManager);\n+    }\n+\n+    public JpaTransactionManager getJpaTransactionManager() {\n+        return jpaTransactionManager;\n+    }\n+\n+    public void setJpaTransactionManager(\n+            JpaTransactionManager jpaTransactionManager) {\n+\n+        this.jpaTransactionManager = jpaTransactionManager;\n+    }\n+\n+    private TransactionFactory getTransactionFactory() {\n+        return (TransactionFactory) (jtaTransactionManager != null\n+                ? jtaTransactionManager : jpaTransactionManager);\n+    }\n+\n+    private PlatformTransactionManager getPlatformTransactionManager() {\n+        return jtaTransactionManager != null\n+                ? jtaTransactionManager : jpaTransactionManager;\n+    }\n+\n+    @Override\n+    public TransactionStatus getTransaction(TransactionDefinition definition)\n+            throws TransactionException {\n+\n+        return getPlatformTransactionManager().getTransaction(definition);\n+    }\n+\n+    @Override\n+    public void commit(TransactionStatus status) throws TransactionException {\n+        getPlatformTransactionManager().commit(status);\n+    }\n+\n+    @Override\n+    public void rollback(TransactionStatus status) throws TransactionException {\n+        getPlatformTransactionManager().rollback(status);\n+    }\n+\n+    @Override\n+    public Transaction createTransaction(String name, int timeout)\n+            throws NotSupportedException, SystemException {\n+\n+        return getTransactionFactory().createTransaction(name, timeout);\n+    }\n+\n+    @Override\n+    public boolean supportsResourceAdapterManagedTransactions() {\n+        return getTransactionFactory().\n+                supportsResourceAdapterManagedTransactions();\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        try {\n+            jtaTransactionManager.afterPropertiesSet();\n+        } catch (Throwable t) {\n+            jtaTransactionManager = null;\n+\n+            LOG.error(\"Could not instantiate JtaTransactionManager, \"\n+                    + \"reverting to JpaTransactionManager\");\n+            if (LOG.isDebugEnabled()) {\n+                LOG.debug(\"Here's why\", t);\n+            }\n+        }\n+    }\n+}"},{"sha":"7b33874027b6b8a6d6256caae9cc78f398d7346e","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -31,13 +31,13 @@ public class SyncopeUserDAOImpl extends AbstractDAOImpl\n \n     @Override\n     @Transactional(readOnly = true)\n-    public SyncopeUser find(Long id) {\n+    public final SyncopeUser find(final Long id) {\n         return entityManager.find(SyncopeUser.class, id);\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public SyncopeUser findByWorkflowId(Long workflowId) {\n+    public final SyncopeUser findByWorkflowId(final Long workflowId) {\n         Query query = entityManager.createQuery(\"SELECT e FROM SyncopeUser e \"\n                 + \"WHERE e.workflowId = :workflowId\");\n         query.setParameter(\"workflowId\", workflowId);\n@@ -47,8 +47,8 @@ public SyncopeUser findByWorkflowId(Long workflowId) {\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<SyncopeUser> findByAttributeValue(\n-            UserAttributeValue attributeValue) {\n+    public final List<SyncopeUser> findByAttributeValue(\n+            final UserAttributeValue attributeValue) {\n \n         Query query = entityManager.createQuery(\n                 \"SELECT u\"\n@@ -75,14 +75,16 @@ public List<SyncopeUser> findByAttributeValue(\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<SyncopeUser> findAll() {\n+    public final List<SyncopeUser> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM SyncopeUser e\");\n         return query.getResultList();\n     }\n \n     @Override\n     @Transactional(readOnly = true)\n-    public List<SyncopeUser> search(NodeSearchCondition searchCondition) {\n+    public final List<SyncopeUser> search(\n+            final NodeSearchCondition searchCondition) {\n+        \n         String queryString = QueryUtils.getUserSearchQuery(searchCondition);\n         if (LOG.isDebugEnabled()) {\n             LOG.debug(\"About to execute query\\n\\t\" + queryString + \"\\n\");\n@@ -100,14 +102,14 @@ public List<SyncopeUser> search(NodeSearchCondition searchCondition) {\n     }\n \n     @Override\n-    public SyncopeUser save(SyncopeUser syncopeUser) {\n+    public final SyncopeUser save(final SyncopeUser syncopeUser) {\n         return entityManager.merge(syncopeUser);\n     }\n \n     @Override\n-    public void delete(Long id) {\n+    public final void delete(final Long id) {\n         SyncopeUser user = find(id);\n-        if (id == null) {\n+        if (user == null) {\n             return;\n         }\n "},{"sha":"5e45282170de32ff402be723079ccf85f0317972","filename":"core/src/main/java/org/syncope/core/persistence/propagation/PropagationManager.java","status":"modified","additions":9,"deletions":6,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fpropagation%2FPropagationManager.java?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -50,12 +50,14 @@ public class PropagationManager {\n     public enum PropagationMode {\n \n         SYNC, ASYNC\n+\n     }\n     /**\n      * Logger.\n      */\n     private static final Logger LOG =\n             LoggerFactory.getLogger(PropagationManager.class);\n+\n     /**\n      * Schema DAO.\n      */\n@@ -132,8 +134,9 @@ public Set<String> update(SyncopeUser user,\n      * @return provisioned resources\n      * @throws PropagationException\n      */\n-    private Set<String> provision(SyncopeUser user,\n-            ResourceOperations resourceOperations,\n+    private Set<String> provision(\n+            final SyncopeUser user,\n+            final ResourceOperations resourceOperations,\n             Set<String> syncResourceNames)\n             throws PropagationException {\n \n@@ -143,16 +146,16 @@ private Set<String> provision(SyncopeUser user,\n         }\n \n         // set of provisioned resources\n-        Set<String> provisioned = new HashSet<String>();\n+        final Set<String> provisioned = new HashSet<String>();\n \n         // Avoid duplicates - see javadoc\n         resourceOperations.purge();\n \n         // Resource to be provisioned synchronously\n-        ResourceOperations syncOperations = new ResourceOperations();\n+        final ResourceOperations syncOperations = new ResourceOperations();\n \n         // Resource to be provisioned asynchronously\n-        ResourceOperations asyncOperations = new ResourceOperations();\n+        final ResourceOperations asyncOperations = new ResourceOperations();\n \n         if (syncResourceNames == null) {\n             syncResourceNames = Collections.EMPTY_SET;\n@@ -389,7 +392,7 @@ private Map<String, Set<Attribute>> prepareAttributes(SyncopeUser user,\n                 }\n \n                 if (!mapping.isPassword() && !mapping.isAccountid()) {\n-                    if (schema.isMultivalue()) {\n+                    if (schema != null && schema.isMultivalue()) {\n                         attributes.add(AttributeBuilder.build(\n                                 field,\n                                 objValues));"},{"sha":"cbdb02a9248f099029788c25da63584739e1f614","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -222,6 +222,10 @@ protected ResourceOperations fill(\n             final SyncopeClientCompositeErrorException compositeErrorException)\n             throws SyncopeClientCompositeErrorException {\n \n+        Set<TargetResource> resources = new HashSet<TargetResource>();\n+        resources.addAll(attributable.getTargetResources());\n+        resources.addAll(attributable.getInheritedTargetResources());\n+\n         ResourceOperations resourceOperations = new ResourceOperations();\n \n         SyncopeClientException invalidValues = new SyncopeClientException(\n@@ -243,7 +247,8 @@ protected ResourceOperations fill(\n                         SchemaType.byClass(\n                         attributableUtil.getSchemaClass()))) {\n \n-                    if (mapping.getResource() != null) {\n+                    if (mapping.getResource() != null\n+                            && resources.contains(mapping.getResource())) {\n                         resourceOperations.add(Type.UPDATE,\n                                 mapping.getResource());\n                     }\n@@ -283,7 +288,8 @@ protected ResourceOperations fill(\n                         SchemaType.byClass(\n                         attributableUtil.getSchemaClass()))) {\n \n-                    if (mapping.getResource() != null) {\n+                    if (mapping.getResource() != null\n+                            && resources.contains(mapping.getResource())) {\n                         resourceOperations.add(Type.UPDATE,\n                                 mapping.getResource());\n                     }\n@@ -351,7 +357,8 @@ protected ResourceOperations fill(\n                     attributableUtil.getDerivedSchemaClass());\n             if (derivedSchema != null) {\n                 for (SchemaMapping mapping : derivedSchema.getMappings()) {\n-                    if (mapping.getResource() != null) {\n+                    if (mapping.getResource() != null\n+                            && resources.contains(mapping.getResource())) {\n                         resourceOperations.add(Type.UPDATE,\n                                 mapping.getResource());\n                     }\n@@ -383,7 +390,8 @@ protected ResourceOperations fill(\n                     attributableUtil.getDerivedSchemaClass());\n             if (derivedSchema != null) {\n                 for (SchemaMapping mapping : derivedSchema.getMappings()) {\n-                    if (mapping.getResource() != null) {\n+                    if (mapping.getResource() != null\n+                            && resources.contains(mapping.getResource())) {\n                         resourceOperations.add(Type.UPDATE,\n                                 mapping.getResource());\n                     }"},{"sha":"0d2b1b8302d0e72f526568bf1bdd78aef97a4636","filename":"core/src/main/resources/META-INF/persistence.xml","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fpersistence.xml?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -17,8 +17,6 @@\n              xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n              http://java.sun.com/xml/ns/persistence/persistence_1_0.xsd\"\n              version=\"1.0\">\n-    <persistence-unit name=\"syncopePersistenceUnit\">\n-        <properties>\n-        </properties>\n-    </persistence-unit>\n+    <!-- transaction-type is set to non-JTA by default, but changed by Spring, if configured -->\n+    <persistence-unit name=\"syncopePersistenceUnit\" transaction-type=\"RESOURCE_LOCAL\"/>\n </persistence>"},{"sha":"27a3d0510ad6c3571237a4acffd36d10ff43483d","filename":"core/src/main/resources/org/syncope/core/persistence/db.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -17,6 +17,7 @@ hibernate.connection.username=syncope\n hibernate.connection.password=syncope\n hibernate.dialect=org.hibernate.dialect.PostgreSQLDialect\n #hibernate.dialect=org.hibernate.dialect.Oracle10gDialect\n+jtaMode=true\n dbUnitDataTypeFactory=org.dbunit.ext.postgresql.PostgresqlDataTypeFactory\n #dbUnitDataTypeFactory=org.dbunit.ext.oracle.Oracle10DataTypeFactory\n #database.schema=SYNCOPE"},{"sha":"613b4ebcb121f4ef215562a98754ce3045d0eed6","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":19,"deletions":2,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -70,6 +70,19 @@\n                 <property name=\"databasePlatform\" value=\"${hibernate.dialect}\"/>\n             </bean>\n         </property>\n+        <property name=\"persistenceUnitPostProcessors\">\n+            <list>\n+                <bean class=\"org.syncope.core.persistence.JTAPersistenceUnitPostProcessor\">\n+                    <property name=\"jtaMode\" value=\"${jtaMode}\"/>\n+                    <property name=\"jtaDataSource\" ref=\"dataSource\"/>\n+                    <property name=\"transactionManagerLookupKey\"\n+                              value=\"hibernate.transaction.manager_lookup_class\"/>\n+                    <!-- Configure here as per your production J2EE container -->\n+                    <property name=\"transactionManagerLookupValue\"\n+                              value=\"org.hibernate.transaction.SunONETransactionManagerLookup\"/>\n+                </bean>\n+            </list>\n+        </property>\n     </bean>\n \n     <bean id=\"entityManager\"\n@@ -78,11 +91,15 @@\n     </bean>\n \n     <tx:annotation-driven/>\n-    <bean id=\"transactionManager\"\n+    <bean id=\"jpaTransactionManager\"\n           class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n         <property name=\"entityManagerFactory\" ref=\"entityManagerFactory\"/>\n     </bean>\n-\n+    <bean id=\"transactionManager\"\n+          class=\"org.syncope.core.persistence.OmniTransactionManager\">\n+        <property name=\"jpaTransactionManager\" ref=\"jpaTransactionManager\"/>\n+    </bean>\n+    \n     <bean id=\"propagationManager\"\n           class=\"org.syncope.core.persistence.propagation.PropagationManager\"/>\n </beans>"},{"sha":"0d1b85799a4fb4a42289666c9a03ed5b91d5562e","filename":"core/src/test/java/org/syncope/core/test/persistence/AbstractTest.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Fpersistence%2FAbstractTest.java?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -42,7 +42,9 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:persistenceContext.xml\"})\n+@ContextConfiguration(locations = {\n+    \"classpath:persistenceContext.xml\"\n+})\n public abstract class AbstractTest {\n \n     protected static final Logger LOG = LoggerFactory.getLogger("},{"sha":"9806590f231c30944270b566a0da8698d6ba9cc1","filename":"core/src/test/resources/org/syncope/core/persistence/db.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5348e10ef02b939f437a5625083ed9fb432bd510/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdb.properties?ref=5348e10ef02b939f437a5625083ed9fb432bd510","patch":"@@ -14,4 +14,5 @@ hibernate.connection.url=jdbc:hsqldb:mem:syncopedb\n hibernate.connection.username=sa\n hibernate.connection.password=\n hibernate.dialect=org.hibernate.dialect.HSQLDialect\n-dbUnitDataTypeFactory=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory\n\\ No newline at end of file\n+jtaMode=false\n+dbUnitDataTypeFactory=org.dbunit.ext.hsqldb.HsqldbDataTypeFactory"}]}