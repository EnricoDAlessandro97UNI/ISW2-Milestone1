{"sha":"02abafa83422c5b657129dd587610556a0d8623a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjAyYWJhZmE4MzQyMmM1YjY1NzEyOWRkNTg3NjEwNTU2YTBkODYyM2E=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-01-22T16:16:30Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-01-22T16:16:30Z"},"message":"[SYNCOPE-756] Fix","tree":{"sha":"539a9355af5bda1548164846828fb166c52cc105","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/539a9355af5bda1548164846828fb166c52cc105"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/02abafa83422c5b657129dd587610556a0d8623a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/02abafa83422c5b657129dd587610556a0d8623a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/02abafa83422c5b657129dd587610556a0d8623a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/02abafa83422c5b657129dd587610556a0d8623a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e684e61d6b9ef7a8be5971b23d043c6deec885d6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e684e61d6b9ef7a8be5971b23d043c6deec885d6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e684e61d6b9ef7a8be5971b23d043c6deec885d6"}],"stats":{"total":112,"additions":75,"deletions":37},"files":[{"sha":"fbd090ce7dc4be3c8aa27f83be6d4c645a4a184b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":60,"deletions":37,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02abafa83422c5b657129dd587610556a0d8623a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02abafa83422c5b657129dd587610556a0d8623a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=02abafa83422c5b657129dd587610556a0d8623a","patch":"@@ -26,6 +26,7 @@\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n@@ -152,28 +153,39 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n                     searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.ANY_OBJECT);\n \n             for (RelationshipTO relationshipTO : anyObjectTO.getRelationships()) {\n-                AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n-                if (otherEnd == null) {\n-                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                } else if (assignableAnyObjects.contains(otherEnd)) {\n-                    RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n-                    if (relationshipType == null) {\n-                        LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n+                if (StringUtils.isBlank(relationshipTO.getRightType())\n+                        || AnyTypeKind.USER.name().equals(relationshipTO.getRightType())\n+                        || AnyTypeKind.GROUP.name().equals(relationshipTO.getRightType())) {\n+\n+                    SyncopeClientException invalidAnyType =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n+                    invalidAnyType.getElements().add(AnyType.class.getSimpleName()\n+                            + \" not allowed for relationship: \" + relationshipTO.getRightType());\n+                    scce.addException(invalidAnyType);\n+                } else {\n+                    AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n+                    if (otherEnd == null) {\n+                        LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n+                    } else if (assignableAnyObjects.contains(otherEnd)) {\n+                        RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n+                        if (relationshipType == null) {\n+                            LOG.debug(\"Ignoring invalid relationship type {}\", relationshipTO.getType());\n+                        } else {\n+                            ARelationship relationship = entityFactory.newEntity(ARelationship.class);\n+                            relationship.setType(relationshipType);\n+                            relationship.setRightEnd(anyObject);\n+                            relationship.setLeftEnd(anyObject);\n+\n+                            anyObject.add(relationship);\n+                        }\n                     } else {\n-                        ARelationship relationship = entityFactory.newEntity(ARelationship.class);\n-                        relationship.setType(relationshipType);\n-                        relationship.setRightEnd(anyObject);\n-                        relationship.setLeftEnd(anyObject);\n+                        LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n \n-                        anyObject.add(relationship);\n+                        SyncopeClientException unassignabled =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                        unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                        scce.addException(unassignabled);\n                     }\n-                } else {\n-                    LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n-\n-                    SyncopeClientException unassignabled =\n-                            SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                    unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                    scce.addException(unassignabled);\n                 }\n             }\n \n@@ -249,25 +261,36 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                     }\n \n                     if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n-                        AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n-                        if (otherEnd == null) {\n-                            LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                        } else if (assignableAnyObjects.contains(otherEnd)) {\n-                            relationship = entityFactory.newEntity(ARelationship.class);\n-                            relationship.setType(relationshipType);\n-                            relationship.setRightEnd(otherEnd);\n-                            relationship.setLeftEnd(anyObject);\n-\n-                            anyObject.add(relationship);\n-\n-                            toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                        if (StringUtils.isBlank(patch.getRelationshipTO().getRightType())\n+                                || AnyTypeKind.USER.name().equals(patch.getRelationshipTO().getRightType())\n+                                || AnyTypeKind.GROUP.name().equals(patch.getRelationshipTO().getRightType())) {\n+\n+                            SyncopeClientException invalidAnyType =\n+                                    SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n+                            invalidAnyType.getElements().add(AnyType.class.getSimpleName()\n+                                    + \" not allowed for relationship: \" + patch.getRelationshipTO().getRightType());\n+                            scce.addException(invalidAnyType);\n                         } else {\n-                            LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n-\n-                            SyncopeClientException unassignabled =\n-                                    SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n-                            unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n-                            scce.addException(unassignabled);\n+                            AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n+                            if (otherEnd == null) {\n+                                LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n+                            } else if (assignableAnyObjects.contains(otherEnd)) {\n+                                relationship = entityFactory.newEntity(ARelationship.class);\n+                                relationship.setType(relationshipType);\n+                                relationship.setRightEnd(otherEnd);\n+                                relationship.setLeftEnd(anyObject);\n+\n+                                anyObject.add(relationship);\n+\n+                                toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                            } else {\n+                                LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n+\n+                                SyncopeClientException unassignabled =\n+                                        SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                                unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                                scce.addException(unassignabled);\n+                            }\n                         }\n                     }\n                 }"},{"sha":"6cbcf3920c1436dae1ddb2965ec8822b5d01e095","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyObjectITCase.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/02abafa83422c5b657129dd587610556a0d8623a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/02abafa83422c5b657129dd587610556a0d8623a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java?ref=02abafa83422c5b657129dd587610556a0d8623a","patch":"@@ -34,6 +34,8 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.AnyListQuery;\n@@ -191,4 +193,17 @@ public void deleteAttr() {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n     }\n+\n+    @Test\n+    public void issueSYNCOPE756() {\n+        AnyObjectTO anyObjectTO = getSampleTO(\"issueSYNCOPE756\");\n+        anyObjectTO.getRelationships().add(new RelationshipTO.Builder().right(AnyTypeKind.USER.name(), 1).build());\n+\n+        try {\n+            createAnyObject(anyObjectTO).getAny();\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidAnyType, e.getType());\n+        }\n+    }\n }"}]}