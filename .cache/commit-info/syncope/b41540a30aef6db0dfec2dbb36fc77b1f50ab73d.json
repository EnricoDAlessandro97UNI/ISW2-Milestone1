{"sha":"b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI0MTU0MGEzMGFlZjZkYjBkZmVjMmRiYjM2ZmM3N2IxZjUwYWI3M2Q=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-20T08:33:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-20T08:33:42Z"},"message":"[SYNCOPE-349] More input sanitizing\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1552532 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"360bfa2ef2b44a15aa64fa5a0f5bae5053bba4e4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/360bfa2ef2b44a15aa64fa5a0f5bae5053bba4e4"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d"}],"stats":{"total":24,"additions":15,"deletions":9},"files":[{"sha":"fa0b64059e350b0935de363fa61661e3466aac4b","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","patch":"@@ -33,6 +33,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.beans.factory.annotation.Value;\n+import org.springframework.util.ReflectionUtils;\n \n @Configurable\n public abstract class AbstractDAOImpl implements DAO {\n@@ -74,14 +75,19 @@ protected void setCacheStoreMode(final CacheStoreMode storeMode) {\n         }\n     }\n \n-    protected String toOrderByStatement(final String prefix, final List<OrderByClause> orderByClauses) {\n+    protected String toOrderByStatement(final Class<? extends AbstractBaseBean> beanClass, final String prefix,\n+            final List<OrderByClause> orderByClauses) {\n+\n         StringBuilder statement = new StringBuilder();\n \n         for (OrderByClause clause : orderByClauses) {\n-            if (StringUtils.isNotBlank(prefix)) {\n-                statement.append(prefix).append('.');\n+            String field = clause.getField().trim();\n+            if (ReflectionUtils.findField(beanClass, field) != null) {\n+                if (StringUtils.isNotBlank(prefix)) {\n+                    statement.append(prefix).append('.');\n+                }\n+                statement.append(field).append(' ').append(clause.getDirection().name());\n             }\n-            statement.append(clause.getField().trim()).append(' ').append(clause.getDirection().name());\n         }\n \n         if (statement.length() > 0) {"},{"sha":"8733de105ed7346b0975bd1669af9aea04ba5720","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ReportDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java?ref=b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","patch":"@@ -48,8 +48,8 @@ public List<Report> findAll() {\n     @Override\n     public List<Report> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n         final TypedQuery<Report> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + Report.class.getSimpleName() + \" e \" + toOrderByStatement(\"e\", orderByClauses),\n-                Report.class);\n+                \"SELECT e FROM \" + Report.class.getSimpleName() + \" e \"\n+                + toOrderByStatement(Report.class, \"e\", orderByClauses), Report.class);\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n                 ? 0"},{"sha":"e2a309e59b9c626a494aac565c61198b5e40b71f","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","patch":"@@ -284,8 +284,8 @@ public List<SyncopeRole> findAll() {\n     @Override\n     public List<SyncopeRole> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n         TypedQuery<SyncopeRole> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + SyncopeRole.class.getSimpleName() + \" e \" + toOrderByStatement(\"e\", orderBy),\n-                SyncopeRole.class);\n+                \"SELECT e FROM \" + SyncopeRole.class.getSimpleName() + \" e \"\n+                + toOrderByStatement(SyncopeRole.class, \"e\", orderBy), SyncopeRole.class);\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n                 ? 0"},{"sha":"f778238b87d55a8c53f9f704e135c73ac38be1e5","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b41540a30aef6db0dfec2dbb36fc77b1f50ab73d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=b41540a30aef6db0dfec2dbb36fc77b1f50ab73d","patch":"@@ -105,7 +105,7 @@ public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n         StringBuilder queryString = buildfindAllQuery(reference);\n         queryString.append(orderByClauses.isEmpty()\n                 ? \"ORDER BY e.id DESC\"\n-                : toOrderByStatement(\"e\", orderByClauses));\n+                : toOrderByStatement(reference, \"e\", orderByClauses));\n \n         final TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n "}]}