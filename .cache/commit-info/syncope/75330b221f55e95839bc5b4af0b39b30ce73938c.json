{"sha":"75330b221f55e95839bc5b4af0b39b30ce73938c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc1MzMwYjIyMWY1NWU5NTgzOWJjNWI0YWYwYjM5YjMwY2U3MzkzOGM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-07-02T14:37:23Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-07-02T14:37:23Z"},"message":"[SYNCOPE-524] Implementation provided, all code updated\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1607378 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"879efb17d5baa8cc799d4ef9a8b23a266d5c8f60","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/879efb17d5baa8cc799d4ef9a8b23a266d5c8f60"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/75330b221f55e95839bc5b4af0b39b30ce73938c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/75330b221f55e95839bc5b4af0b39b30ce73938c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/75330b221f55e95839bc5b4af0b39b30ce73938c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/75330b221f55e95839bc5b4af0b39b30ce73938c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"571f10977628ba56758d901f0ab2b46063ebbcc8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/571f10977628ba56758d901f0ab2b46063ebbcc8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/571f10977628ba56758d901f0ab2b46063ebbcc8"}],"stats":{"total":1303,"additions":645,"deletions":658},"files":[{"sha":"76e5f475497bb12857126e95698e1cdbb3203285","filename":"core/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -181,11 +181,6 @@ under the License.\n       <artifactId>jackson-jaxrs-json-provider</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>com.thoughtworks.xstream</groupId>\n-      <artifactId>xstream</artifactId>\n-    </dependency>\n-\n     <dependency>\n       <groupId>org.apache.velocity</groupId>\n       <artifactId>velocity</artifactId>"},{"sha":"6725ba5e871cb92117dd9d928c99bd7d27cd871e","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -165,25 +165,25 @@ public <T extends AbstractSubjectTO> T getSubjectTO(final ConnectorObject obj, f\n             List<PasswordPolicySpec> ppSpecs = new ArrayList<PasswordPolicySpec>();\n \n             PasswordPolicy globalPP = policyDAO.getGlobalPasswordPolicy();\n-            if (globalPP != null && globalPP.getSpecification() != null) {\n-                ppSpecs.add(globalPP.<PasswordPolicySpec>getSpecification());\n+            if (globalPP != null && globalPP.getSpecification(PasswordPolicySpec.class) != null) {\n+                ppSpecs.add(globalPP.getSpecification(PasswordPolicySpec.class));\n             }\n \n             for (MembershipTO memb : userTO.getMemberships()) {\n                 SyncopeRole role = roleDAO.find(memb.getRoleId());\n                 if (role != null && role.getPasswordPolicy() != null\n-                        && role.getPasswordPolicy().getSpecification() != null) {\n+                        && role.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n \n-                    ppSpecs.add(role.getPasswordPolicy().<PasswordPolicySpec>getSpecification());\n+                    ppSpecs.add(role.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n                 }\n             }\n \n             for (String resName : userTO.getResources()) {\n                 ExternalResource resource = resourceDAO.find(resName);\n                 if (resource != null && resource.getPasswordPolicy() != null\n-                        && resource.getPasswordPolicy().getSpecification() != null) {\n+                        && resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n \n-                    ppSpecs.add(resource.getPasswordPolicy().<PasswordPolicySpec>getSpecification());\n+                    ppSpecs.add(resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n                 }\n             }\n "},{"sha":"e92c8519e60a760348c92cf4fb869fbb5bbfbb88","filename":"core/src/main/java/org/apache/syncope/core/connid/PasswordGenerator.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -42,7 +42,7 @@\n @Component\n public class PasswordGenerator {\n \n-    private static final char[] SPECIAL_CHARS = {'!', '£', '%', '&', '(', ')', '?', '#', '$'};\n+    private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n \n     @Autowired\n     private PolicyDAO policyDAO;\n@@ -63,19 +63,23 @@ public String generate(final SyncopeUser user)\n         List<PasswordPolicySpec> ppSpecs = new ArrayList<PasswordPolicySpec>();\n \n         PasswordPolicy globalPP = policyDAO.getGlobalPasswordPolicy();\n-        if (globalPP != null && globalPP.getSpecification() != null) {\n-            ppSpecs.add(globalPP.<PasswordPolicySpec>getSpecification());\n+        if (globalPP != null && globalPP.getSpecification(PasswordPolicySpec.class) != null) {\n+            ppSpecs.add(globalPP.getSpecification(PasswordPolicySpec.class));\n         }\n \n         for (SyncopeRole role : user.getRoles()) {\n-            if (role.getPasswordPolicy() != null && role.getPasswordPolicy().getSpecification() != null) {\n-                ppSpecs.add(role.getPasswordPolicy().<PasswordPolicySpec>getSpecification());\n+            if (role.getPasswordPolicy() != null\n+                    && role.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n+\n+                ppSpecs.add(role.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n             }\n         }\n \n         for (ExternalResource resource : user.getResources()) {\n-            if (resource.getPasswordPolicy() != null && resource.getPasswordPolicy().getSpecification() != null) {\n-                ppSpecs.add(resource.getPasswordPolicy().<PasswordPolicySpec>getSpecification());\n+            if (resource.getPasswordPolicy() != null\n+                    && resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n+\n+                ppSpecs.add(resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class));\n             }\n         }\n \n@@ -296,8 +300,8 @@ private void checkRequired(final String[] generatedPassword, final PasswordPolic\n         if (policySpec.isNonAlphanumericRequired()\n                 && !PolicyPattern.NON_ALPHANUMERIC.matcher(StringUtils.join(generatedPassword)).matches()) {\n \n-            generatedPassword[firstEmptyChar(generatedPassword)] = \n-                SecureRandomUtil.generateRandomSpecialCharacter(SPECIAL_CHARS);\n+            generatedPassword[firstEmptyChar(generatedPassword)] =\n+                    SecureRandomUtil.generateRandomSpecialCharacter(SPECIAL_CHARS);\n         }\n     }\n \n@@ -314,5 +318,5 @@ private void checkPrefixAndSuffix(final String[] generatedPassword, final Passwo\n             }\n         }\n     }\n-    \n+\n }"},{"sha":"98684399be8af81916615e142519650fc4a5ff35","filename":"core/src/main/java/org/apache/syncope/core/init/ContentUpgrader.java","status":"removed","additions":0,"deletions":248,"changes":248,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/571f10977628ba56758d901f0ab2b46063ebbcc8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/571f10977628ba56758d901f0ab2b46063ebbcc8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FContentUpgrader.java?ref=571f10977628ba56758d901f0ab2b46063ebbcc8","patch":"@@ -1,248 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.init;\n-\n-import java.lang.reflect.Field;\n-import java.net.URI;\n-import java.sql.Connection;\n-import java.sql.SQLException;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.to.UserTO;\n-import org.apache.syncope.common.types.AbstractPolicySpec;\n-import org.apache.syncope.common.types.CipherAlgorithm;\n-import org.apache.syncope.common.types.ConnConfProperty;\n-import org.apache.syncope.core.persistence.beans.ConnInstance;\n-import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.Policy;\n-import org.apache.syncope.core.persistence.beans.SyncTask;\n-import org.apache.syncope.core.persistence.beans.conf.CAttr;\n-import org.apache.syncope.core.persistence.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n-import org.apache.syncope.core.persistence.dao.NotificationDAO;\n-import org.apache.syncope.core.persistence.dao.PolicyDAO;\n-import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.persistence.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.dao.impl.AbstractContentDealer;\n-import org.apache.syncope.core.util.ConnIdBundleManager;\n-import org.apache.syncope.core.util.XMLSerializer;\n-import org.apache.syncope.core.workflow.ActivitiDetector;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.jdbc.datasource.DataSourceUtils;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.ReflectionUtils;\n-\n-/**\n- * Upgrade internal storage content according to format expected by this Syncope release.\n- */\n-@Component\n-public class ContentUpgrader extends AbstractContentDealer {\n-\n-    @Autowired\n-    private ConfDAO confDAO;\n-\n-    @Autowired\n-    private ConnInstanceDAO connInstanceDAO;\n-\n-    @Autowired\n-    private ResourceDAO resourceDAO;\n-\n-    @Autowired\n-    private PolicyDAO policyDAO;\n-\n-    @Autowired\n-    private NotificationDAO notificationDAO;\n-\n-    @Autowired\n-    private TaskDAO taskDAO;\n-\n-    private void upgradeActiviti() {\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-\n-        List<Map<String, Object>> byteArrays =\n-                jdbcTemplate.queryForList(\"SELECT ID_, BYTES_ FROM ACT_GE_BYTEARRAY\");\n-        for (Map<String, Object> row : byteArrays) {\n-            byte[] updated = new String((byte[]) row.get(\"BYTES_\")).replaceAll(\n-                    \"org\\\\.apache.syncope\\\\.core\\\\.workflow\\\\.activiti\\\\.\",\n-                    \"org.apache.syncope.core.workflow.user.activiti.task.\").\n-                    replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n-                            \"org.apache.syncope.common.to\").\n-                    replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.\",\n-                            \"org.apache.syncope.common.types\").\n-                    replaceAll(\"org/apache/syncope/types/\",\n-                            \"org/apache/syncope/common/types/\").\n-                    getBytes();\n-            jdbcTemplate.update(\"UPDATE ACT_GE_BYTEARRAY SET BYTES_=? WHERE ID_=?\",\n-                    new Object[] { updated, row.get(\"ID_\") });\n-        }\n-    }\n-\n-    private String upgradeSyncopeConf() {\n-        confDAO.delete(\"connid.bundles.directory\");\n-\n-        URI localConnIdLocation = null;\n-        for (URI location : ConnIdBundleManager.getConnManagers().keySet()) {\n-            if (\"file\".equals(location.getScheme())) {\n-                localConnIdLocation = location;\n-            }\n-        }\n-        if (localConnIdLocation == null) {\n-            throw new IllegalArgumentException(\"No local ConnId location was found, aborting\");\n-        }\n-\n-        CAttr cipher = confDAO.find(\"password.cipher.algorithm\", CipherAlgorithm.AES.name());\n-        if (\"MD5\".equals(cipher.getValuesAsStrings().get(0))) {\n-            cipher.getValues().get(0).setStringValue(CipherAlgorithm.SMD5.name());\n-        }\n-\n-        return localConnIdLocation.toString();\n-    }\n-\n-    private void upgradeConnInstance(final String localConnIdLocation) {\n-        Field xmlConfiguration = ReflectionUtils.findField(ConnInstance.class, \"xmlConfiguration\");\n-        xmlConfiguration.setAccessible(true);\n-        for (ConnInstance connInstance : connInstanceDAO.findAll()) {\n-            connInstance.setLocation(localConnIdLocation);\n-\n-            try {\n-                String oldConf = (String) xmlConfiguration.get(connInstance);\n-                connInstance.setConfiguration(\n-                        XMLSerializer.<HashSet<ConnConfProperty>>deserialize(\n-                                oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.ConnConfProperty\",\n-                                        ConnConfProperty.class.getName())));\n-            } catch (Exception e) {\n-                LOG.error(\"While upgrading {}\", connInstance, e);\n-            }\n-        }\n-    }\n-\n-    private void upgradeExternalResource() {\n-        Field xmlConfiguration = ReflectionUtils.findField(ExternalResource.class, \"xmlConfiguration\");\n-        xmlConfiguration.setAccessible(true);\n-        for (ExternalResource resource : resourceDAO.findAll()) {\n-            try {\n-                String oldConf = (String) xmlConfiguration.get(resource);\n-                if (StringUtils.isNotBlank(oldConf)) {\n-                    resource.setConnInstanceConfiguration(\n-                            XMLSerializer.<HashSet<ConnConfProperty>>deserialize(\n-                                    oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.ConnConfProperty\",\n-                                            ConnConfProperty.class.getName())));\n-                }\n-            } catch (Exception e) {\n-                LOG.error(\"While upgrading {}\", resource, e);\n-            }\n-        }\n-    }\n-\n-    private void upgradePolicy() {\n-        Field specification = ReflectionUtils.findField(Policy.class, \"specification\");\n-        specification.setAccessible(true);\n-        for (Policy policy : policyDAO.findAll()) {\n-            try {\n-                String oldConf = (String) specification.get(policy);\n-                policy.setSpecification(\n-                        XMLSerializer.<AbstractPolicySpec>deserialize(\n-                                oldConf.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.types\\\\.\",\n-                                        \"org.apache.syncope.common.types.\").\n-                                replaceAll(\"alternativeSearchAttrs\", \"uAltSearchSchemas\")));\n-            } catch (Exception e) {\n-                LOG.error(\"While upgrading {}\", policy, e);\n-            }\n-        }\n-    }\n-\n-    private void upgradeSyncTask() {\n-        Field userTemplate = ReflectionUtils.findField(SyncTask.class, \"userTemplate\");\n-        userTemplate.setAccessible(true);\n-        for (SyncTask task : taskDAO.findAll(SyncTask.class)) {\n-            try {\n-                String oldUserTemplate = (String) userTemplate.get(task);\n-                if (oldUserTemplate != null) {\n-                    task.setUserTemplate(\n-                            XMLSerializer.<UserTO>deserialize(\n-                                    oldUserTemplate.replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.to\\\\.\",\n-                                            \"org.apache.syncope.common.to.\").\n-                                    replaceAll(\"propagationTOs\",\n-                                            \"propagationStatusTOs\")));\n-                }\n-            } catch (Exception e) {\n-                LOG.error(\"While upgrading {}\", task, e);\n-            }\n-        }\n-    }\n-\n-    private void upgradeReportletConf() {\n-        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-\n-        List<Map<String, Object>> rcInstances =\n-                jdbcTemplate.queryForList(\"SELECT id, serializedInstance FROM ReportletConfInstance\");\n-        for (Map<String, Object> row : rcInstances) {\n-            String updated = ((String) row.get(\"serializedInstance\")).\n-                    replaceAll(\"org\\\\.apache\\\\.syncope\\\\.client\\\\.report\\\\.\",\n-                            \"org.apache.syncope.common.report.\");\n-            jdbcTemplate.update(\"UPDATE ReportletConfInstance SET serializedInstance=? WHERE id=?\",\n-                    new Object[] { updated, row.get(\"id\") });\n-        }\n-    }\n-\n-    @Transactional\n-    public void upgrade() {\n-        // Currently working for 1.0.X -> 1.1.X upgrade, hence forcibly disabled.\n-        if (true) {\n-            return;\n-        }\n-\n-        if (ActivitiDetector.isActivitiEnabledForUsers()) {\n-            upgradeActiviti();\n-        }\n-\n-        final String localConnIdLocation = upgradeSyncopeConf();\n-\n-        upgradeConnInstance(localConnIdLocation);\n-\n-        upgradeExternalResource();\n-\n-        upgradePolicy();\n-\n-        upgradeSyncTask();\n-\n-        upgradeReportletConf();\n-\n-        Connection conn = DataSourceUtils.getConnection(dataSource);\n-        try {\n-            createIndexes();\n-            createViews();\n-        } finally {\n-            DataSourceUtils.releaseConnection(conn, dataSource);\n-            if (conn != null) {\n-                try {\n-                    if (!conn.isClosed()) {\n-                        conn.close();\n-                    }\n-                } catch (SQLException e) {\n-                    LOG.error(\"While releasing connection\", e);\n-                }\n-            }\n-        }\n-    }\n-}"},{"sha":"403fe960fa768221d4db7f84ca3f7c70a21520e9","filename":"core/src/main/java/org/apache/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -32,9 +32,6 @@\n @Configurable\n public class SpringContextInitializer implements InitializingBean {\n \n-    @Autowired\n-    private ContentUpgrader contentUpgrader;\n-\n     @Autowired\n     private ConnectorFactory connFactory;\n \n@@ -53,18 +50,8 @@ public class SpringContextInitializer implements InitializingBean {\n     @Autowired\n     private WorkflowAdapterLoader workflowAdapterLoader;\n \n-    private boolean upgrade = false;\n-\n-    public void setUpgrade(final boolean upgrade) {\n-        this.upgrade = upgrade;\n-    }\n-\n     @Override\n     public void afterPropertiesSet() throws Exception {\n-        if (upgrade) {\n-            contentUpgrader.upgrade();\n-        }\n-\n         workflowAdapterLoader.load();\n         contentLoader.load();\n         connFactory.load();"},{"sha":"dcc7c22e382864e722bc7e6cb110b452bcbdd34c","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ConnInstance.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.beans;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n@@ -33,10 +34,11 @@\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.validation.entity.ConnInstanceCheck;\n-import org.apache.syncope.core.util.XMLSerializer;\n+import org.apache.syncope.core.util.POJOHelper;\n \n @Entity\n @ConnInstanceCheck\n@@ -153,15 +155,14 @@ public void setVersion(final String version) {\n     }\n \n     public Set<ConnConfProperty> getConfiguration() {\n-        Set<ConnConfProperty> result = XMLSerializer.<HashSet<ConnConfProperty>>deserialize(xmlConfiguration);\n-        if (result == null) {\n-            result = Collections.emptySet();\n-        }\n-        return result;\n+        return StringUtils.isBlank(xmlConfiguration)\n+                ? Collections.<ConnConfProperty>emptySet()\n+                : new HashSet<ConnConfProperty>(\n+                        Arrays.asList(POJOHelper.deserialize(xmlConfiguration, ConnConfProperty[].class)));\n     }\n \n     public void setConfiguration(final Set<ConnConfProperty> configuration) {\n-        xmlConfiguration = XMLSerializer.serialize(new HashSet<ConnConfProperty>(configuration));\n+        xmlConfiguration = POJOHelper.serialize(new HashSet<ConnConfProperty>(configuration));\n     }\n \n     public Long getId() {"},{"sha":"2c42bcbea93387f9ff1b0d9307b0895998ad2e00","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":11,"deletions":23,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.beans;\n \n import java.util.ArrayList;\n+import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n@@ -45,7 +46,7 @@\n import org.apache.syncope.core.persistence.beans.role.RMapping;\n import org.apache.syncope.core.persistence.beans.user.UMapping;\n import org.apache.syncope.core.persistence.validation.entity.ExternalResourceCheck;\n-import org.apache.syncope.core.util.XMLSerializer;\n+import org.apache.syncope.core.util.POJOHelper;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n /**\n@@ -328,19 +329,14 @@ public void setPushPolicy(final PushPolicy pushPolicy) {\n     }\n \n     public Set<ConnConfProperty> getConnInstanceConfiguration() {\n-        Set<ConnConfProperty> result = null;\n-        if (StringUtils.isNotBlank(xmlConfiguration)) {\n-            result = XMLSerializer.<HashSet<ConnConfProperty>>deserialize(xmlConfiguration);\n-        }\n-        if (result == null) {\n-            result = Collections.emptySet();\n-        }\n-\n-        return result;\n+        return StringUtils.isBlank(xmlConfiguration)\n+                ? Collections.<ConnConfProperty>emptySet()\n+                : new HashSet<ConnConfProperty>(\n+                        Arrays.asList(POJOHelper.deserialize(xmlConfiguration, ConnConfProperty[].class)));\n     }\n \n     public void setConnInstanceConfiguration(final Set<ConnConfProperty> properties) {\n-        xmlConfiguration = XMLSerializer.serialize(new HashSet<ConnConfProperty>(properties));\n+        xmlConfiguration = POJOHelper.serialize(new HashSet<ConnConfProperty>(properties));\n     }\n \n     public String getUserializedSyncToken() {\n@@ -350,15 +346,11 @@ public String getUserializedSyncToken() {\n     public SyncToken getUsyncToken() {\n         return userializedSyncToken == null\n                 ? null\n-                : XMLSerializer.<SyncToken>deserialize(userializedSyncToken);\n-    }\n-\n-    public void setUserializedSyncToken(final String serializedSyncToken) {\n-        this.userializedSyncToken = serializedSyncToken;\n+                : POJOHelper.deserialize(userializedSyncToken, SyncToken.class);\n     }\n \n     public void setUsyncToken(final SyncToken syncToken) {\n-        this.userializedSyncToken = XMLSerializer.serialize(syncToken);\n+        this.userializedSyncToken = syncToken == null ? null : POJOHelper.serialize(syncToken);\n     }\n \n     public String getRserializedSyncToken() {\n@@ -368,15 +360,11 @@ public String getRserializedSyncToken() {\n     public SyncToken getRsyncToken() {\n         return rserializedSyncToken == null\n                 ? null\n-                : XMLSerializer.<SyncToken>deserialize(rserializedSyncToken);\n-    }\n-\n-    public void setRserializedSyncToken(final String serializedSyncToken) {\n-        this.rserializedSyncToken = serializedSyncToken;\n+                : POJOHelper.deserialize(rserializedSyncToken, SyncToken.class);\n     }\n \n     public void setRsyncToken(final SyncToken syncToken) {\n-        this.rserializedSyncToken = XMLSerializer.serialize(syncToken);\n+        this.rserializedSyncToken = syncToken == null ? null : POJOHelper.serialize(syncToken);\n     }\n \n     public List<String> getPropagationActionsClassNames() {"},{"sha":"785bae30b540a1393d0fb02a4580914de7b4d0bb","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Policy.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.types.AbstractPolicySpec;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.core.persistence.validation.entity.PolicyCheck;\n-import org.apache.syncope.core.util.XMLSerializer;\n+import org.apache.syncope.core.util.POJOHelper;\n \n @Entity\n @Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n@@ -67,11 +67,12 @@ public PolicyType getType() {\n         return type;\n     }\n \n-    public <T extends AbstractPolicySpec> T getSpecification() {\n-        return XMLSerializer.<T>deserialize(specification);\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends AbstractPolicySpec> T getSpecification(final Class<T> reference) {\n+        return POJOHelper.deserialize(specification, reference);\n     }\n \n     public <T extends AbstractPolicySpec> void setSpecification(final T policy) {\n-        this.specification = XMLSerializer.serialize(policy);\n+        this.specification = POJOHelper.serialize(policy);\n     }\n }"},{"sha":"473e33814cbc435959129542b933c8cca80c287b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PropagationTask.java","status":"modified","additions":18,"deletions":13,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -18,18 +18,21 @@\n  */\n package org.apache.syncope.core.persistence.beans;\n \n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.Set;\n-\n import javax.persistence.Entity;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.PropagationMode;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.persistence.validation.entity.PropagationTaskCheck;\n-import org.apache.syncope.core.util.XMLSerializer;\n+import org.apache.syncope.core.util.POJOHelper;\n import org.identityconnectors.framework.common.objects.Attribute;\n \n /**\n@@ -86,72 +89,74 @@ public String getAccountId() {\n         return accountId;\n     }\n \n-    public void setAccountId(String accountId) {\n+    public void setAccountId(final String accountId) {\n         this.accountId = accountId;\n     }\n \n     public String getOldAccountId() {\n         return oldAccountId;\n     }\n \n-    public void setOldAccountId(String oldAccountId) {\n+    public void setOldAccountId(final String oldAccountId) {\n         this.oldAccountId = oldAccountId;\n     }\n \n     public Set<Attribute> getAttributes() {\n-        return XMLSerializer.<Set<Attribute>>deserialize(xmlAttributes);\n+        return StringUtils.isBlank(xmlAttributes)\n+                ? Collections.<Attribute>emptySet()\n+                : new HashSet<Attribute>(\n+                        Arrays.asList(POJOHelper.deserialize(xmlAttributes, Attribute[].class)));\n     }\n \n     public void setAttributes(final Set<Attribute> attributes) {\n-        xmlAttributes = XMLSerializer.serialize(attributes);\n+        xmlAttributes = POJOHelper.serialize(attributes);\n     }\n \n     public PropagationMode getPropagationMode() {\n         return propagationMode;\n     }\n \n-    public void setPropagationMode(PropagationMode propagationMode) {\n+    public void setPropagationMode(final PropagationMode propagationMode) {\n         this.propagationMode = propagationMode;\n     }\n \n     public ResourceOperation getPropagationOperation() {\n         return propagationOperation;\n     }\n \n-    public void setPropagationOperation(ResourceOperation propagationOperation) {\n-\n+    public void setPropagationOperation(final ResourceOperation propagationOperation) {\n         this.propagationOperation = propagationOperation;\n     }\n \n     public ExternalResource getResource() {\n         return resource;\n     }\n \n-    public void setResource(ExternalResource resource) {\n+    public void setResource(final ExternalResource resource) {\n         this.resource = resource;\n     }\n \n     public String getObjectClassName() {\n         return objectClassName;\n     }\n \n-    public void setObjectClassName(String objectClassName) {\n+    public void setObjectClassName(final String objectClassName) {\n         this.objectClassName = objectClassName;\n     }\n \n     public AttributableType getSubjectType() {\n         return subjectType;\n     }\n \n-    public void setSubjectType(AttributableType subjectType) {\n+    public void setSubjectType(final AttributableType subjectType) {\n         this.subjectType = subjectType;\n     }\n \n     public Long getSubjectId() {\n         return subjectId;\n     }\n \n-    public void setSubjectId(Long subjectId) {\n+    public void setSubjectId(final Long subjectId) {\n         this.subjectId = subjectId;\n     }\n }"},{"sha":"27602d6a1ae6389e2fd28e7268fbd42dbbe53b9b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PushPolicy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushPolicy.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -37,4 +37,5 @@ public PushPolicy(boolean global) {\n                 ? PolicyType.GLOBAL_PUSH\n                 : PolicyType.PUSH;\n     }\n+\n }"},{"sha":"9c06275b9f5d19a1408c1b1e96beafc10553face","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ReportletConfInstance.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -24,7 +24,7 @@\n import javax.persistence.ManyToOne;\n \n import org.apache.syncope.common.report.ReportletConf;\n-import org.apache.syncope.core.util.XMLSerializer;\n+import org.apache.syncope.core.util.POJOHelper;\n \n @Entity\n public class ReportletConfInstance extends AbstractBaseBean {\n@@ -55,12 +55,12 @@ public void setReport(final Report report) {\n     public ReportletConf getInstance() {\n         return serializedInstance == null\n                 ? null\n-                : XMLSerializer.<ReportletConf> deserialize(serializedInstance);\n+                : POJOHelper.deserialize(serializedInstance, ReportletConf.class);\n     }\n \n     public void setInstance(final ReportletConf instance) {\n         this.serializedInstance = instance == null\n                 ? null\n-                : XMLSerializer.serialize(instance);\n+                : POJOHelper.serialize(instance);\n     }\n }"},{"sha":"e98fb0b8f66f31d572fa3aa96a505e6bbe0253b3","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.types.MatchingRule;\n import org.apache.syncope.common.types.UnmatchingRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n-import org.apache.syncope.core.util.XMLSerializer;\n+import org.apache.syncope.core.util.POJOHelper;\n \n @Entity\n public class SyncTask extends AbstractSyncTask {\n@@ -60,21 +60,21 @@ public SyncTask() {\n     public UserTO getUserTemplate() {\n         return userTemplate == null\n                 ? new UserTO()\n-                : XMLSerializer.<UserTO>deserialize(userTemplate);\n+                : POJOHelper.deserialize(userTemplate, UserTO.class);\n     }\n \n     public void setUserTemplate(final UserTO userTemplate) {\n-        this.userTemplate = XMLSerializer.serialize(userTemplate);\n+        this.userTemplate = POJOHelper.serialize(userTemplate);\n     }\n \n     public RoleTO getRoleTemplate() {\n         return userTemplate == null\n                 ? new RoleTO()\n-                : XMLSerializer.<RoleTO>deserialize(roleTemplate);\n+                : POJOHelper.deserialize(roleTemplate, RoleTO.class);\n     }\n \n     public void setRoleTemplate(final RoleTO roleTemplate) {\n-        this.roleTemplate = XMLSerializer.serialize(roleTemplate);\n+        this.roleTemplate = POJOHelper.serialize(roleTemplate);\n     }\n \n     public boolean isFullReconciliation() {"},{"sha":"b01b1194ef580cfbec1233651622b0d433a0d3fd","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":9,"deletions":12,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -27,26 +27,23 @@\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n-import org.apache.syncope.core.persistence.dao.PolicyDAO;\n-import org.springframework.beans.factory.annotation.Autowired;\n \n public class PolicyValidator extends AbstractValidator<PolicyCheck, Policy> {\n \n-    @Autowired\n-    private PolicyDAO policyDAO;\n-\n     @Override\n     public boolean isValid(final Policy object, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (object.getSpecification() != null\n-                && ((object instanceof PasswordPolicy && !(object.getSpecification() instanceof PasswordPolicySpec))\n-                || ((object instanceof AccountPolicy && !(object.getSpecification() instanceof AccountPolicySpec)))\n-                || ((object instanceof SyncPolicy && !(object.getSpecification() instanceof SyncPolicySpec))))) {\n+        if (((object instanceof PasswordPolicy\n+                && !(object.getSpecification(PasswordPolicySpec.class) instanceof PasswordPolicySpec))\n+                || ((object instanceof AccountPolicy\n+                && !(object.getSpecification(AccountPolicySpec.class) instanceof AccountPolicySpec)))\n+                || ((object instanceof SyncPolicy\n+                && !(object.getSpecification(SyncPolicySpec.class) instanceof SyncPolicySpec))))) {\n \n-            context.buildConstraintViolationWithTemplate(\n-                    getTemplate(EntityViolationType.valueOf(\"Invalid\" + object.getClass().getSimpleName()),\n-                            \"Invalid policy specification\")).addPropertyNode(\"specification\").\n+            context.buildConstraintViolationWithTemplate(getTemplate(\n+                    EntityViolationType.valueOf(\"Invalid\" + object.getClass().getSimpleName()),\n+                    \"Invalid policy specification\")).addPropertyNode(\"specification\").\n                     addConstraintViolation();\n \n             return false;"},{"sha":"e378794e3e17d265d31e49f0acf16758690dcda8","filename":"core/src/main/java/org/apache/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -49,7 +49,7 @@ public <T extends AbstractPolicySpec> T evaluate(final Policy policy, final Abst\n         switch (policy.getType()) {\n             case PASSWORD:\n             case GLOBAL_PASSWORD:\n-                final PasswordPolicySpec ppSpec = policy.getSpecification();\n+                final PasswordPolicySpec ppSpec = policy.getSpecification(PasswordPolicySpec.class);\n                 final PasswordPolicySpec evaluatedPPSpec = new PasswordPolicySpec();\n \n                 BeanUtils.copyProperties(ppSpec, evaluatedPPSpec, new String[]{\"schemasNotPermitted\"});\n@@ -80,7 +80,7 @@ public <T extends AbstractPolicySpec> T evaluate(final Policy policy, final Abst\n                 break;\n             case ACCOUNT:\n             case GLOBAL_ACCOUNT:\n-                final AccountPolicySpec spec = policy.getSpecification();\n+                final AccountPolicySpec spec = policy.getSpecification(AccountPolicySpec.class);\n                 final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n \n                 BeanUtils.copyProperties(spec, accountPolicy, new String[]{\"schemasNotPermitted\"});"},{"sha":"ce84e8849f77892a4f855ae32b36901851ed9a82","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/ConnectorFacadeProxy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -517,7 +517,6 @@ private void search(\n \n         if (activeConnInstance.getCapabilities().contains(ConnectorCapability.SEARCH)) {\n             connector.search(objectClass, filter, handler, options);\n-\n         } else {\n             LOG.info(\"Search was attempted, although the connector only has these capabilities: {}. No action.\",\n                     activeConnInstance.getCapabilities());"},{"sha":"ff5e82fa62e8b291798478742dc3b73317efe517","filename":"core/src/main/java/org/apache/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":3,"deletions":16,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -86,35 +86,22 @@ public <T extends AbstractPolicyTO> T getPolicyTO(final Policy policy) {\n         switch (policy.getType()) {\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n-                if (!(policy.getSpecification() instanceof PasswordPolicySpec)) {\n-                    throw new ClassCastException(\"Expected \" + PasswordPolicySpec.class.getName()\n-                            + \", found \" + policy.getSpecification().getClass().getName());\n-                }\n                 policyTO = (T) new PasswordPolicyTO(isGlobal);\n-                ((PasswordPolicyTO) policyTO).setSpecification((PasswordPolicySpec) policy.getSpecification());\n+                ((PasswordPolicyTO) policyTO).setSpecification(policy.getSpecification(PasswordPolicySpec.class));\n                 break;\n \n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n-                if (!(policy.getSpecification() instanceof AccountPolicySpec)) {\n-                    throw new ClassCastException(\"Expected \" + AccountPolicySpec.class.getName()\n-                            + \", found \" + policy.getSpecification().getClass().getName());\n-                }\n                 policyTO = (T) new AccountPolicyTO(isGlobal);\n-                ((AccountPolicyTO) policyTO).setSpecification((AccountPolicySpec) policy.getSpecification());\n+                ((AccountPolicyTO) policyTO).setSpecification(policy.getSpecification(AccountPolicySpec.class));\n                 ((AccountPolicyTO) policyTO).getResources().addAll(((AccountPolicy) policy).getResourceNames());\n                 break;\n \n             case GLOBAL_SYNC:\n             case SYNC:\n             default:\n-                if (!(policy.getSpecification() instanceof SyncPolicySpec)) {\n-                    throw new ClassCastException(\"Expected \" + SyncPolicySpec.class.getName()\n-                            + \", found \" + policy.getSpecification().getClass().getName());\n-\n-                }\n                 policyTO = (T) new SyncPolicyTO(isGlobal);\n-                ((SyncPolicyTO) policyTO).setSpecification((SyncPolicySpec) policy.getSpecification());\n+                ((SyncPolicyTO) policyTO).setSpecification(policy.getSpecification(SyncPolicySpec.class));\n         }\n \n         policyTO.setId(policy.getId());"},{"sha":"0de71a4ee49a663b9d27d367d5dce35e85f5f59e","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -135,10 +135,10 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         resource.setConnInstanceConfiguration(new HashSet<ConnConfProperty>(resourceTO.getConnConfProperties()));\n \n         if (resourceTO.getUsyncToken() == null) {\n-            resource.setUserializedSyncToken(null);\n+            resource.setUsyncToken(null);\n         }\n         if (resourceTO.getRsyncToken() == null) {\n-            resource.setRserializedSyncToken(null);\n+            resource.setRsyncToken(null);\n         }\n \n         resource.getPropagationActionsClassNames().clear();"},{"sha":"8f9aff27eb4d5772f9855941de180447f588a20d","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -202,8 +202,8 @@ private void setPassword(final SyncopeUser user, final String password,\n \n         int passwordHistorySize = 0;\n         PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n-        if (policy != null && policy.getSpecification() != null) {\n-            passwordHistorySize = policy.<PasswordPolicySpec>getSpecification().getHistoryLength();\n+        if (policy != null && policy.getSpecification(PasswordPolicySpec.class) != null) {\n+            passwordHistorySize = policy.getSpecification(PasswordPolicySpec.class).getHistoryLength();\n         }\n \n         try {"},{"sha":"4ec0223e15b5884c09351326f970173a6c015eda","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncProfile.java","status":"modified","additions":8,"deletions":9,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncProfile.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -29,7 +29,9 @@\n     /**\n      * Syncing connector.\n      */\n-    private Connector connector;\n+    private final Connector connector;\n+\n+    private final T syncTask;\n \n     private Collection<SyncResult> results;\n \n@@ -39,8 +41,6 @@\n \n     private List<A> actions;\n \n-    private T syncTask;\n-\n     public SyncProfile(final Connector connector, final T syncTask) {\n         this.connector = connector;\n         this.syncTask = syncTask;\n@@ -50,6 +50,10 @@ public Connector getConnector() {\n         return connector;\n     }\n \n+    public T getSyncTask() {\n+        return syncTask;\n+    }\n+\n     public Collection<SyncResult> getResults() {\n         return results;\n     }\n@@ -78,12 +82,7 @@ public List<A> getActions() {\n         return actions;\n     }\n \n-    public void setActions(\n-            List<A> actions) {\n+    public void setActions(final List<A> actions) {\n         this.actions = actions;\n     }\n-\n-    public T getSyncTask() {\n-        return syncTask;\n-    }\n }"},{"sha":"44190f29f05c6d48858486b0ae6d72136f42b594","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncUtilities.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncUtilities.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncUtilities.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncUtilities.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -116,7 +116,7 @@ public Long findMatchingAttributableId(\n \n         final List<ConnectorObject> found = connector.search(oclass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                attrUtil.getMappingItems(resource, MappingPurpose.SYNCHRONIZATION)));\n+                        attrUtil.getMappingItems(resource, MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", oclass, resource, name);\n@@ -267,8 +267,8 @@ public List<Long> findByAttributableSearch(\n             SearchCond nodeCond;\n             // users: just id or username can be selected to be used\n             // roles: just id or name can be selected to be used\n-            if (\"id\".equalsIgnoreCase(schema) || \"username\".equalsIgnoreCase(schema)\n-                    || \"name\".equalsIgnoreCase(schema)) {\n+            if (\"id\".equalsIgnoreCase(schema)\n+                    || \"username\".equalsIgnoreCase(schema) || \"name\".equalsIgnoreCase(schema)) {\n \n                 SubjectCond cond = new SubjectCond();\n                 cond.setSchema(schema);\n@@ -298,6 +298,7 @@ public List<Long> findByAttributableSearch(\n      *\n      * @param uid for finding by account id\n      * @param connObj for finding by attribute value\n+     * @param resource external resource\n      * @param attrUtil attributable util\n      * @return list of matching users / roles\n      */\n@@ -311,10 +312,10 @@ public List<Long> findExisting(\n         if (resource.getSyncPolicy() == null) {\n             SyncPolicy globalSP = policyDAO.getGlobalSyncPolicy();\n             if (globalSP != null) {\n-                syncPolicySpec = globalSP.<SyncPolicySpec>getSpecification();\n+                syncPolicySpec = globalSP.getSpecification(SyncPolicySpec.class);\n             }\n         } else {\n-            syncPolicySpec = resource.getSyncPolicy().<SyncPolicySpec>getSpecification();\n+            syncPolicySpec = resource.getSyncPolicy().getSpecification(SyncPolicySpec.class);\n         }\n \n         SyncCorrelationRule syncRule = null;"},{"sha":"4285cdfb05f2359aa7ceefd09f2760d3309905a1","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSubjectSyncResultHandler.java","status":"modified","additions":9,"deletions":21,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSubjectSyncResultHandler.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -61,36 +61,24 @@ public abstract class AbstractSubjectSyncResultHandler extends AbstractSyncopeRe\n \n     protected abstract AttributableUtil getAttributableUtil();\n \n-    protected abstract String getName(\n-            final AbstractSubjectTO subjectTO);\n+    protected abstract String getName(AbstractSubjectTO subjectTO);\n \n-    protected abstract AbstractSubjectTO getSubjectTO(\n-            final long id);\n+    protected abstract AbstractSubjectTO getSubjectTO(long id);\n \n-    protected abstract AbstractSubjectMod getSubjectMod(\n-            final AbstractSubjectTO subjectTO, final SyncDelta delta);\n+    protected abstract AbstractSubjectMod getSubjectMod(AbstractSubjectTO subjectTO, SyncDelta delta);\n \n-    protected abstract AbstractSubjectTO create(\n-            final AbstractSubjectTO subjectTO,\n-            final SyncDelta _delta,\n-            final SyncResult result);\n+    protected abstract AbstractSubjectTO create(AbstractSubjectTO subjectTO, SyncDelta _delta, SyncResult result);\n \n-    protected abstract AbstractSubjectTO link(\n-            final AbstractSubjectTO before,\n-            final SyncResult result,\n-            final boolean unlink)\n+    protected abstract AbstractSubjectTO link(AbstractSubjectTO before, SyncResult result, boolean unlink)\n             throws Exception;\n \n-    protected abstract AbstractSubjectTO update(\n-            final AbstractSubjectTO before,\n-            final AbstractSubjectMod subjectMod,\n-            final SyncDelta delta,\n-            final SyncResult result)\n+    protected abstract AbstractSubjectTO update(AbstractSubjectTO before, AbstractSubjectMod subjectMod,\n+            SyncDelta delta, SyncResult result)\n             throws Exception;\n \n-    protected abstract void deprovision(final Long id, final boolean unlink) throws Exception;\n+    protected abstract void deprovision(Long id, boolean unlink) throws Exception;\n \n-    protected abstract void delete(final Long id);\n+    protected abstract void delete(Long id);\n \n     @Override\n     public boolean handle(final SyncDelta delta) {"},{"sha":"230f65afbbf1dcce6b9c5b22b0e201367c3d885b","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncJob.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncJob.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -319,7 +319,7 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             } catch (Exception e) {\n                 final String msg = String.\n                         format(\"Connector instance bean for resource %s and connInstance %s not found\",\n-                        syncTask.getResource(), syncTask.getResource().getConnector());\n+                                syncTask.getResource(), syncTask.getResource().getConnector());\n \n                 throw new JobExecutionException(msg, e);\n             }\n@@ -378,13 +378,13 @@ private SyncPolicySpec getSyncPolicySpec(final AbstractSyncTask syncTask) {\n                     ? policyDAO.getGlobalSyncPolicy()\n                     : syncTask.getResource().getSyncPolicy();\n \n-            syncPolicySpec = syncPolicy == null ? null : (SyncPolicySpec) syncPolicy.getSpecification();\n+            syncPolicySpec = syncPolicy == null ? null : syncPolicy.getSpecification(SyncPolicySpec.class);\n         } else if (syncTask instanceof PushTask) {\n             final PushPolicy pushPolicy = syncTask.getResource().getPushPolicy() == null\n                     ? policyDAO.getGlobalPushPolicy()\n                     : syncTask.getResource().getPushPolicy();\n \n-            syncPolicySpec = pushPolicy == null ? null : (SyncPolicySpec) pushPolicy.getSpecification();\n+            syncPolicySpec = pushPolicy == null ? null : pushPolicy.getSpecification(SyncPolicySpec.class);\n         } else {\n             syncPolicySpec = null;\n         }"},{"sha":"a49fd94e8b381f4ab4f9cadc0b66198e7cf3aedb","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncopeResultHandler.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -76,7 +76,7 @@\n      */\n     @Autowired\n     protected PropagationManager propagationManager;\n-    \n+\n     /**\n      * task executor.\n      */\n@@ -100,8 +100,7 @@\n      */\n     protected SyncProfile<T, A> profile;\n \n-    public void setProfile(\n-            SyncProfile<T, A> profile) {\n+    public void setProfile(final SyncProfile<T, A> profile) {\n         this.profile = profile;\n     }\n "},{"sha":"138b0fec02589909cab1a68b3d0c9c2a2aa8505d","filename":"core/src/main/java/org/apache/syncope/core/util/AttributeDeserializer.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributeDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributeDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributeDeserializer.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.identityconnectors.common.Base64;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.Uid;\n+\n+class AttributeDeserializer extends JsonDeserializer<Attribute> {\n+\n+    @Override\n+    public Attribute deserialize(final JsonParser jp, final DeserializationContext ctx)\n+            throws IOException, JsonProcessingException {\n+\n+        ObjectNode tree = jp.readValueAsTree();\n+\n+        String name = tree.get(\"name\").asText();\n+\n+        List<Object> values = new ArrayList<Object>();\n+        for (Iterator<JsonNode> itor = tree.get(\"value\").iterator(); itor.hasNext();) {\n+            JsonNode node = itor.next();\n+            if (node.isNull()) {\n+                values.add(null);\n+            } else if (node.isObject()) {\n+                values.add(((ObjectNode) node).traverse(jp.getCodec()).readValueAs(GuardedString.class));\n+            } else if (node.isBoolean()) {\n+                values.add(node.asBoolean());\n+            } else if (node.isDouble()) {\n+                values.add(node.asDouble());\n+            } else if (node.isLong()) {\n+                values.add(node.asLong());\n+            } else if (node.isInt()) {\n+                values.add(node.asInt());\n+            } else {\n+                String text = node.asText();\n+                if (text.startsWith(AttributeSerializer.BYTE_ARRAY_PREFIX)\n+                        && text.endsWith(AttributeSerializer.BYTE_ARRAY_SUFFIX)) {\n+\n+                    values.add(Base64.decode(StringUtils.substringBetween(\n+                            text, AttributeSerializer.BYTE_ARRAY_PREFIX, AttributeSerializer.BYTE_ARRAY_SUFFIX)));\n+                } else {\n+                    values.add(text);\n+                }\n+            }\n+        }\n+\n+        return Uid.NAME.equals(name)\n+                ? new Uid(values.isEmpty() || values.get(0) == null ? null : values.get(0).toString())\n+                : Name.NAME.equals(name)\n+                ? new Name(values.isEmpty() || values.get(0) == null ? null : values.get(0).toString())\n+                : AttributeBuilder.build(name, values);\n+    }\n+\n+}"},{"sha":"2eed9c4a611618ca88f3cf815102e85a8f6b9601","filename":"core/src/main/java/org/apache/syncope/core/util/AttributeSerializer.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributeSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributeSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FAttributeSerializer.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.io.IOException;\n+import org.identityconnectors.common.Base64;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class AttributeSerializer extends JsonSerializer<Attribute> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AttributeSerializer.class);\n+\n+    public static final String BYTE_ARRAY_PREFIX = \"<binary>\";\n+\n+    public static final String BYTE_ARRAY_SUFFIX = \"</binary>\";\n+\n+    @Override\n+    public void serialize(final Attribute source, final JsonGenerator jgen, final SerializerProvider sp)\n+            throws IOException, JsonProcessingException {\n+\n+        jgen.writeStartObject();\n+\n+        jgen.writeStringField(\"name\", source.getName());\n+\n+        jgen.writeFieldName(\"value\");\n+        if (source.getValue() == null) {\n+            jgen.writeNull();\n+        } else {\n+            jgen.writeStartArray();\n+            for (Object value : source.getValue()) {\n+                if (value == null) {\n+                    jgen.writeNull();\n+                } else if (value instanceof GuardedString) {\n+                    jgen.writeObject(value);\n+                } else if (value instanceof Integer) {\n+                    jgen.writeNumber((Integer) value);\n+                } else if (value instanceof Long) {\n+                    jgen.writeNumber((Long) value);\n+                } else if (value instanceof Double) {\n+                    jgen.writeNumber((Double) value);\n+                } else if (value instanceof Boolean) {\n+                    jgen.writeBoolean((Boolean) value);\n+                } else if (value instanceof byte[]) {\n+                    jgen.writeString(BYTE_ARRAY_PREFIX + Base64.encode((byte[]) value) + BYTE_ARRAY_SUFFIX);\n+                } else {\n+                    jgen.writeString(value.toString());\n+                }\n+            }\n+            jgen.writeEndArray();\n+        }\n+\n+        jgen.writeEndObject();\n+    }\n+\n+}"},{"sha":"2927cbc6e68009ddb0ae7059c764f67c12c2406c","filename":"core/src/main/java/org/apache/syncope/core/util/GuardedStringConverter.java","status":"removed","additions":0,"deletions":128,"changes":128,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/571f10977628ba56758d901f0ab2b46063ebbcc8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/571f10977628ba56758d901f0ab2b46063ebbcc8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringConverter.java?ref=571f10977628ba56758d901f0ab2b46063ebbcc8","patch":"@@ -1,128 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.util;\n-\n-import java.lang.reflect.Field;\n-\n-import org.identityconnectors.common.Base64;\n-import org.identityconnectors.common.security.EncryptorFactory;\n-import org.identityconnectors.common.security.GuardedString;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-import com.thoughtworks.xstream.converters.Converter;\n-import com.thoughtworks.xstream.converters.MarshallingContext;\n-import com.thoughtworks.xstream.converters.UnmarshallingContext;\n-import com.thoughtworks.xstream.io.HierarchicalStreamReader;\n-import com.thoughtworks.xstream.io.HierarchicalStreamWriter;\n-\n-/**\n- * Help in XStream serialization of GuardedString by (de)serializing instances using the default Encryptor (which works\n- * consistently across class loading) instead of a random Encryptor instance.\n- *\n- * @see XMLSerializer\n- * @see GuardedString\n- */\n-public class GuardedStringConverter implements Converter {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(GuardedStringConverter.class);\n-\n-    @Override\n-    public void marshal(final Object source, final HierarchicalStreamWriter writer, final MarshallingContext context) {\n-        boolean readOnly = false;\n-        try {\n-            Field readOnlyField = GuardedString.class.getDeclaredField(\"_readOnly\");\n-            readOnlyField.setAccessible(true);\n-            readOnly = readOnlyField.getBoolean(source);\n-        } catch (Exception e) {\n-            LOG.error(\"Could not get field value\", e);\n-        }\n-        writer.startNode(\"readonly\");\n-        writer.setValue(Boolean.toString(readOnly));\n-        writer.endNode();\n-\n-        boolean disposed = false;\n-        try {\n-            Field disposedField = GuardedString.class.getDeclaredField(\"_disposed\");\n-            disposedField.setAccessible(true);\n-            disposed = disposedField.getBoolean(source);\n-        } catch (Exception e) {\n-            LOG.error(\"Could not get field value\", e);\n-        }\n-        writer.startNode(\"disposed\");\n-        writer.setValue(Boolean.toString(disposed));\n-        writer.endNode();\n-\n-        writer.startNode(\"encryptedBytes\");\n-        final StringBuilder cleartext = new StringBuilder();\n-        ((GuardedString) source).access(new GuardedString.Accessor() {\n-\n-            @Override\n-            public void access(final char[] clearChars) {\n-                cleartext.append(clearChars);\n-            }\n-        });\n-        final byte[] encryptedBytes =\n-                EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(cleartext.toString().getBytes());\n-        writer.setValue(Base64.encode(encryptedBytes));\n-        writer.endNode();\n-    }\n-\n-    @Override\n-    public Object unmarshal(final HierarchicalStreamReader reader, final UnmarshallingContext context) {\n-        reader.moveDown();\n-        final boolean readOnly = Boolean.valueOf(reader.getValue());\n-        reader.moveUp();\n-\n-        reader.moveDown();\n-        final boolean disposed = Boolean.valueOf(reader.getValue());\n-        reader.moveUp();\n-\n-        reader.moveDown();\n-        final byte[] encryptedBytes = Base64.decode(reader.getValue());\n-        reader.moveUp();\n-\n-        final byte[] clearBytes = EncryptorFactory.getInstance().getDefaultEncryptor().decrypt(encryptedBytes);\n-\n-        GuardedString dest = new GuardedString(new String(clearBytes).toCharArray());\n-\n-        try {\n-            Field readOnlyField = GuardedString.class.getDeclaredField(\"_readOnly\");\n-            readOnlyField.setAccessible(true);\n-            readOnlyField.setBoolean(dest, readOnly);\n-        } catch (Exception e) {\n-            LOG.error(\"Could not set field value to {}\", readOnly, e);\n-        }\n-\n-        try {\n-            Field readOnlyField = GuardedString.class.getDeclaredField(\"_disposed\");\n-            readOnlyField.setAccessible(true);\n-            readOnlyField.setBoolean(dest, disposed);\n-        } catch (Exception e) {\n-            LOG.error(\"Could not set field value to {}\", disposed, e);\n-        }\n-\n-        return dest;\n-    }\n-\n-    @Override\n-    public boolean canConvert(final Class type) {\n-        return type.equals(GuardedString.class);\n-    }\n-}"},{"sha":"ef21047d062e3dd4e297c9e484f1888a4697e048","filename":"core/src/main/java/org/apache/syncope/core/util/GuardedStringDeserializer.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringDeserializer.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -0,0 +1,94 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import org.identityconnectors.common.Base64;\n+import org.identityconnectors.common.security.EncryptorFactory;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class GuardedStringDeserializer extends JsonDeserializer<GuardedString> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GuardedStringDeserializer.class);\n+\n+    @Override\n+    public GuardedString deserialize(final JsonParser jp, final DeserializationContext ctx)\n+            throws IOException, JsonProcessingException {\n+\n+        ObjectNode tree = jp.readValueAsTree();\n+\n+        boolean readOnly = false;\n+        if (tree.has(\"readOnly\")) {\n+            readOnly = tree.get(\"readOnly\").asBoolean();\n+        }\n+        boolean disposed = false;\n+        if (tree.has(\"disposed\")) {\n+            disposed = tree.get(\"disposed\").asBoolean();\n+        }\n+        byte[] encryptedBytes = null;\n+        if (tree.has(\"encryptedBytes\")) {\n+            encryptedBytes = Base64.decode(tree.get(\"encryptedBytes\").asText());\n+        }\n+        String base64SHA1Hash = null;\n+        if (tree.has(\"base64SHA1Hash\")) {\n+            base64SHA1Hash = tree.get(\"base64SHA1Hash\").asText();\n+        }\n+\n+        final byte[] clearBytes = EncryptorFactory.getInstance().getDefaultEncryptor().decrypt(encryptedBytes);\n+\n+        GuardedString dest = new GuardedString(new String(clearBytes).toCharArray());\n+\n+        try {\n+            Field field = GuardedString.class.getDeclaredField(\"_readOnly\");\n+            field.setAccessible(true);\n+            field.setBoolean(dest, readOnly);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not set field value to {}\", readOnly, e);\n+        }\n+\n+        try {\n+            Field field = GuardedString.class.getDeclaredField(\"_disposed\");\n+            field.setAccessible(true);\n+            field.setBoolean(dest, disposed);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not set field value to {}\", disposed, e);\n+        }\n+\n+        if (base64SHA1Hash != null) {\n+            try {\n+                Field field = GuardedString.class.getDeclaredField(\"_base64SHA1Hash\");\n+                field.setAccessible(true);\n+                field.set(dest, base64SHA1Hash);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not set field value to {}\", base64SHA1Hash, e);\n+            }\n+        }\n+\n+        return dest;\n+    }\n+\n+}"},{"sha":"a76c3cd5b576902075686f87aa0429aed9611ca9","filename":"core/src/main/java/org/apache/syncope/core/util/GuardedStringSerializer.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FGuardedStringSerializer.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import com.fasterxml.jackson.core.JsonGenerator;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.JsonSerializer;\n+import com.fasterxml.jackson.databind.SerializerProvider;\n+import java.io.IOException;\n+import java.lang.reflect.Field;\n+import org.identityconnectors.common.Base64;\n+import org.identityconnectors.common.security.EncryptorFactory;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+class GuardedStringSerializer extends JsonSerializer<GuardedString> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(GuardedStringSerializer.class);\n+\n+    @Override\n+    public void serialize(final GuardedString source, final JsonGenerator jgen, final SerializerProvider sp)\n+            throws IOException, JsonProcessingException {\n+\n+        jgen.writeStartObject();\n+\n+        boolean readOnly = false;\n+        try {\n+            Field field = GuardedString.class.getDeclaredField(\"_readOnly\");\n+            field.setAccessible(true);\n+            readOnly = field.getBoolean(source);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not get field value\", e);\n+        }\n+        jgen.writeBooleanField(\"readOnly\", readOnly);\n+\n+        boolean disposed = false;\n+        try {\n+            Field field = GuardedString.class.getDeclaredField(\"_disposed\");\n+            field.setAccessible(true);\n+            disposed = field.getBoolean(source);\n+        } catch (Exception e) {\n+            LOG.error(\"Could not get field value\", e);\n+        }\n+        jgen.writeBooleanField(\"disposed\", disposed);\n+\n+        final StringBuilder cleartext = new StringBuilder();\n+        ((GuardedString) source).access(new GuardedString.Accessor() {\n+\n+            @Override\n+            public void access(final char[] clearChars) {\n+                cleartext.append(clearChars);\n+            }\n+        });\n+        final byte[] encryptedBytes =\n+                EncryptorFactory.getInstance().getDefaultEncryptor().encrypt(cleartext.toString().getBytes());\n+        jgen.writeStringField(\"encryptedBytes\", Base64.encode(encryptedBytes));\n+\n+        String base64SHA1Hash = null;\n+        try {\n+            Field field = GuardedString.class.getDeclaredField(\"_base64SHA1Hash\");\n+            field.setAccessible(true);\n+            base64SHA1Hash = field.get(source).toString();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not get field value\", e);\n+        }\n+        if (base64SHA1Hash != null) {\n+            jgen.writeStringField(\"base64SHA1Hash\", base64SHA1Hash);\n+        }\n+\n+        jgen.writeEndObject();\n+    }\n+\n+}"},{"sha":"22f835464465331102990ac725a95e97b075e92f","filename":"core/src/main/java/org/apache/syncope/core/util/POJOHelper.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPOJOHelper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPOJOHelper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPOJOHelper.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.databind.module.SimpleModule;\n+import org.identityconnectors.common.security.GuardedString;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+/**\n+ * Helper class for serialization and deserialization of configuration objects (POJOs) in JSON.\n+ */\n+public final class POJOHelper {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(POJOHelper.class);\n+\n+    private static final ObjectMapper MAPPER;\n+\n+    static {\n+        SimpleModule pojoModule = new SimpleModule(\"POJOModule\", new Version(1, 0, 0, null, null, null));\n+        pojoModule.addSerializer(GuardedString.class, new GuardedStringSerializer());\n+        pojoModule.addSerializer(Attribute.class, new AttributeSerializer());\n+        pojoModule.addDeserializer(GuardedString.class, new GuardedStringDeserializer());\n+        pojoModule.addDeserializer(Attribute.class, new AttributeDeserializer());\n+        pojoModule.addDeserializer(SyncToken.class, new SyncTokenDeserializer());\n+\n+        MAPPER = new ObjectMapper();\n+        MAPPER.registerModule(pojoModule);\n+    }\n+\n+    public static String serialize(final Object object) {\n+        String result = null;\n+\n+        try {\n+            result = MAPPER.writeValueAsString(object);\n+        } catch (Exception e) {\n+            LOG.error(\"During serialization\", e);\n+        }\n+\n+        return result;\n+    }\n+\n+    public static <T extends Object> T deserialize(final String serialized, final Class<T> reference) {\n+        T result = null;\n+\n+        try {\n+            result = MAPPER.readValue(serialized, reference);\n+        } catch (Exception e) {\n+            LOG.error(\"During deserialization\", e);\n+        }\n+\n+        return result;\n+    }\n+\n+    private POJOHelper() {\n+    }\n+}"},{"sha":"da0ca964755d2117ed8c26beb4159e1466748dab","filename":"core/src/main/java/org/apache/syncope/core/util/SyncTokenDeserializer.java","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSyncTokenDeserializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSyncTokenDeserializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSyncTokenDeserializer.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -0,0 +1,57 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.util;\n+\n+import com.fasterxml.jackson.core.JsonParser;\n+import com.fasterxml.jackson.core.JsonProcessingException;\n+import com.fasterxml.jackson.databind.DeserializationContext;\n+import com.fasterxml.jackson.databind.JsonDeserializer;\n+import com.fasterxml.jackson.databind.JsonNode;\n+import com.fasterxml.jackson.databind.node.ObjectNode;\n+import java.io.IOException;\n+import org.identityconnectors.framework.common.objects.SyncToken;\n+\n+class SyncTokenDeserializer extends JsonDeserializer<SyncToken> {\n+\n+    @Override\n+    public SyncToken deserialize(final JsonParser jp, final DeserializationContext ctx)\n+            throws IOException, JsonProcessingException {\n+\n+        ObjectNode tree = jp.readValueAsTree();\n+\n+        Object value = null;\n+        if (tree.has(\"value\")) {\n+            JsonNode node = tree.get(\"value\");\n+            value = node.isNull()\n+                    ? null\n+                    : node.isBoolean()\n+                    ? node.asBoolean()\n+                    : node.isDouble()\n+                    ? node.asDouble()\n+                    : node.isLong()\n+                    ? node.asLong()\n+                    : node.isInt()\n+                    ? node.asInt()\n+                    : node.asText();\n+        }\n+\n+        return new SyncToken(value);\n+    }\n+\n+}"},{"sha":"1e512b43aa87b72fde64ea3184c1773f8e11c565","filename":"core/src/main/java/org/apache/syncope/core/util/XMLSerializer.java","status":"removed","additions":0,"deletions":69,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/571f10977628ba56758d901f0ab2b46063ebbcc8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FXMLSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/571f10977628ba56758d901f0ab2b46063ebbcc8/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FXMLSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FXMLSerializer.java?ref=571f10977628ba56758d901f0ab2b46063ebbcc8","patch":"@@ -1,69 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.util;\n-\n-import com.thoughtworks.xstream.XStream;\n-import java.io.UnsupportedEncodingException;\n-import java.net.URLDecoder;\n-import java.net.URLEncoder;\n-import org.apache.syncope.common.SyncopeConstants;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-/**\n- * Helper class for serialization and deserialization of configuration objects, empowering XStream.\n- *\n- * @see http://xstream.codehaus.org/\n- */\n-public final class XMLSerializer {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(XMLSerializer.class);\n-\n-    public static String serialize(final Object object) {\n-        String result = null;\n-\n-        XStream xstream = new XStream();\n-        xstream.registerConverter(new GuardedStringConverter());\n-        try {\n-            result = URLEncoder.encode(xstream.toXML(object), SyncopeConstants.DEFAULT_ENCODING);\n-        } catch (UnsupportedEncodingException e) {\n-            LOG.error(\"During serialization\", e);\n-        }\n-\n-        return result;\n-    }\n-\n-    @SuppressWarnings(\"unchecked\")\n-    public static <T extends Object> T deserialize(final String serialized) {\n-        T result = null;\n-\n-        XStream xstream = new XStream();\n-        xstream.registerConverter(new GuardedStringConverter());\n-        try {\n-            result = (T) xstream.fromXML(URLDecoder.decode(serialized, SyncopeConstants.DEFAULT_ENCODING));\n-        } catch (UnsupportedEncodingException e) {\n-            LOG.error(\"During deserialization\", e);\n-        }\n-\n-        return result;\n-    }\n-\n-    private XMLSerializer() {\n-    }\n-}"},{"sha":"de58b5c3472772c3b95926ff516f8196f229808d","filename":"core/src/main/resources/syncopeContext.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -109,8 +109,6 @@ under the License.\n \n   <task:annotation-driven executor=\"connectorExecutor\"/>\n   <task:executor id=\"connectorExecutor\" pool-size=\"10\"/>\n-\n-  <bean id=\"xStream\" class=\"com.thoughtworks.xstream.XStream\"/>\n   \n   <bean id=\"virAttrCache\" class=\"org.apache.syncope.core.util.VirAttrCache\" scope=\"singleton\">\n     <constructor-arg value=\"60\"/>"},{"sha":"1589b39e105f66fa30565ffec3d44bea9bdc1a99","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -69,7 +69,7 @@ public void findGlobalPasswordPolicy() {\n \n         assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n \n-        assertEquals(\"invalid policy values\", 8, ((PasswordPolicySpec) policy.getSpecification()).getMinLength());\n+        assertEquals(\"invalid policy values\", 8, (policy.getSpecification(PasswordPolicySpec.class)).getMinLength());\n     }\n \n     @Test(expected = InvalidEntityException.class)\n@@ -116,8 +116,8 @@ public void create() {\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.SYNC, policy.getType());\n-        assertEquals(syncURuleName, ((SyncPolicySpec) policy.getSpecification()).getUserJavaRule());\n-        assertEquals(syncRRuleName, ((SyncPolicySpec) policy.getSpecification()).getRoleJavaRule());\n+        assertEquals(syncURuleName, (policy.getSpecification(SyncPolicySpec.class)).getUserJavaRule());\n+        assertEquals(syncRRuleName, (policy.getSpecification(SyncPolicySpec.class)).getRoleJavaRule());\n     }\n \n     @Test\n@@ -134,8 +134,8 @@ public void update() {\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n-        assertEquals(((PasswordPolicySpec) policy.getSpecification()).getMaxLength(), 8);\n-        assertEquals(((PasswordPolicySpec) policy.getSpecification()).getMinLength(), 6);\n+        assertEquals((policy.getSpecification(PasswordPolicySpec.class)).getMaxLength(), 8);\n+        assertEquals((policy.getSpecification(PasswordPolicySpec.class)).getMinLength(), 6);\n     }\n \n     @Test"},{"sha":"2914f1db91b17281c70138b7771ba5cbb139d15b","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -2358,7 +2358,7 @@ public void issueSYNCOPE505LDAP() throws Exception {\n         assertEquals(1, user.getResources().size());\n \n         // 4. Check that the LDAP resource has the correct password\n-        ConnObjectTO connObject = \n+        ConnObjectTO connObject =\n                 resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.USER, user.getId());\n \n         assertNotNull(getLdapRemoteObject("},{"sha":"74a857fc2def2b9d1ee3e46d105106a6981f4489","filename":"core/src/test/resources/content.xml","status":"modified","additions":42,"deletions":32,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=75330b221f55e95839bc5b4af0b39b30ce73938c"},{"sha":"dfe285a982ad16b59efc18158400311429f795e6","filename":"pom.xml","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/75330b221f55e95839bc5b4af0b39b30ce73938c/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/75330b221f55e95839bc5b4af0b39b30ce73938c/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=75330b221f55e95839bc5b4af0b39b30ce73938c","patch":"@@ -328,7 +328,6 @@ under the License.\n     <spring.version>4.0.5.RELEASE</spring.version>\n     <spring-security.version>3.2.4.RELEASE</spring-security.version>\n     <jackson.version>2.4.1</jackson.version>\n-    <xstream.version>1.4.7</xstream.version>\n     <velocity.version>1.7</velocity.version>\n     <velocitytools.version>2.0</velocitytools.version>\n     <quartz.version>2.2.1</quartz.version>\n@@ -701,12 +700,6 @@ under the License.\n         <artifactId>jackson-jaxrs-json-provider</artifactId>\n         <version>${jackson.version}</version>\n       </dependency>\n-\n-      <dependency>\n-        <groupId>com.thoughtworks.xstream</groupId>\n-        <artifactId>xstream</artifactId>\n-        <version>${xstream.version}</version>\n-      </dependency>\n             \n       <dependency>\n         <groupId>org.quartz-scheduler</groupId>\n@@ -1377,7 +1370,6 @@ under the License.\n             </goals>\n             <configuration>\n               <source>\n-                project.properties['urlencoded.csvdir.path'] = java.net.URLEncoder.encode(project.properties['test.csvdir.path'])\n                 project.properties['licenseUrl'] = project.parent.licenses[0].url\n               </source>\n             </configuration>"}]}