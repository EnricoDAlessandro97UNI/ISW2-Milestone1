{"sha":"133c6b04971522d2123e5a394089e3fdd8cd7495","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEzM2M2YjA0OTcxNTIyZDIxMjNlNWEzOTQwODllM2ZkZDhjZDc0OTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-07T15:12:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-11-07T15:12:44Z"},"message":"[SYNCOPE-433] Fixing UNION query for MySQL compatibility\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/branches/1_1_X@1539674 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7367b86b175c48fd6527009d67d3a8c2c4ca2565","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7367b86b175c48fd6527009d67d3a8c2c4ca2565"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/133c6b04971522d2123e5a394089e3fdd8cd7495","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/133c6b04971522d2123e5a394089e3fdd8cd7495","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/133c6b04971522d2123e5a394089e3fdd8cd7495","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/133c6b04971522d2123e5a394089e3fdd8cd7495/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"95b449081f306574823de95598e61db572992fb6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/95b449081f306574823de95598e61db572992fb6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/95b449081f306574823de95598e61db572992fb6"}],"stats":{"total":47,"additions":31,"deletions":16},"files":[{"sha":"6a537d01aa818e834d04140f95168486d4a484b8","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AttributableSearchDAOImpl.java","status":"modified","additions":8,"deletions":10,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/133c6b04971522d2123e5a394089e3fdd8cd7495/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/133c6b04971522d2123e5a394089e3fdd8cd7495/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttributableSearchDAOImpl.java?ref=133c6b04971522d2123e5a394089e3fdd8cd7495","patch":"@@ -109,7 +109,7 @@ public int count(final Set<Long> adminRoles, final NodeCond searchCondition, fin\n         // 2. take into account administrative roles\n         queryString.insert(0, \"SELECT u.subject_id FROM (\");\n         queryString.append(\") u WHERE subject_id NOT IN (\");\n-        queryString.append(getAdminRolesFilter(adminRoles, attrUtil)).append(\")\");\n+        queryString.append(getAdminRolesFilter(adminRoles, attrUtil)).append(')');\n \n         // 3. prepare the COUNT query\n         queryString.insert(0, \"SELECT COUNT(subject_id) FROM (\");\n@@ -165,10 +165,10 @@ public <T extends AbstractAttributable> boolean matches(final T user, final Node\n         // 1. get the query string from the search condition\n         StringBuilder queryString = getQuery(searchCondition, parameters, attrUtil);\n \n-        final boolean res;\n+        boolean matches;\n         if (queryString.length() == 0) {\n             // Could be empty: got into a role search with a single membership condition ...\n-            res = false;\n+            matches = false;\n         } else {\n             // 2. take into account the passed user\n             queryString.insert(0, \"SELECT u.subject_id FROM (\");\n@@ -181,10 +181,10 @@ public <T extends AbstractAttributable> boolean matches(final T user, final Node\n             fillWithParameters(query, parameters);\n \n             // 5. executes query\n-            res = !query.getResultList().isEmpty();\n+            matches = !query.getResultList().isEmpty();\n         }\n \n-        return res;\n+        return matches;\n     }\n \n     private int setParameter(final List<Object> parameters, final Object parameter) {\n@@ -316,15 +316,13 @@ private StringBuilder getQuery(final NodeCond nodeCond, final List<Object> param\n                 query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, attrUtil)).\n                         append(\" AND subject_id IN ( \").\n                         append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil).\n-                        append(\")\"));\n+                                append(\")\"));\n                 break;\n \n             case OR:\n-                query.append(\"(\").\n-                        append(getQuery(nodeCond.getLeftNodeCond(), parameters, attrUtil)).\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, attrUtil)).\n                         append(\" UNION \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil).\n-                        append(\")\"));\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, attrUtil));\n                 break;\n \n             default:"},{"sha":"751436cf74707e428facf2853ff4f2a9e08842f0","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttributableSearchTest.java","status":"modified","additions":23,"deletions":6,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/133c6b04971522d2123e5a394089e3fdd8cd7495/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/133c6b04971522d2123e5a394089e3fdd8cd7495/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttributableSearchTest.java?ref=133c6b04971522d2123e5a394089e3fdd8cd7495","patch":"@@ -45,7 +45,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:persistenceTestEnv.xml\"})\n+@ContextConfiguration(locations = { \"classpath:persistenceTestEnv.xml\" })\n @Transactional\n public class AttributableSearchTest {\n \n@@ -314,7 +314,7 @@ public void searchByUsernameAndFullname() {\n \n         final List<SyncopeUser> matchingUsers =\n                 searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n-                AttributableUtil.getInstance(AttributableType.USER));\n+                        AttributableUtil.getInstance(AttributableType.USER));\n \n         assertNotNull(matchingUsers);\n         assertEquals(2, matchingUsers.size());\n@@ -331,7 +331,7 @@ public void searchById() {\n \n         List<SyncopeUser> users =\n                 searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n-                AttributableUtil.getInstance(AttributableType.USER));\n+                        AttributableUtil.getInstance(AttributableType.USER));\n \n         assertNotNull(users);\n         assertEquals(1, users.size());\n@@ -400,16 +400,33 @@ public void issue242() {\n \n     @Test\n     public void issueSYNCOPE46() {\n-        final AttributableCond cond = new AttributableCond(AttributeCond.Type.LIKE);\n+        AttributableCond cond = new AttributableCond(AttributeCond.Type.LIKE);\n         cond.setSchema(\"username\");\n         cond.setExpression(\"%ossin%\");\n \n-        final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n+        NodeCond searchCondition = NodeCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n-        final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE433() {\n+        AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNULL);\n+        isNullCond.setSchema(\"loginDate\");\n+\n+        AttributableCond likeCond = new AttributableCond(AttributeCond.Type.LIKE);\n+        likeCond.setSchema(\"username\");\n+        likeCond.setExpression(\"%ossin%\");\n+\n+        NodeCond searchCond = NodeCond.getOrCond(NodeCond.getLeafCond(isNullCond), NodeCond.getLeafCond(likeCond));\n+\n+        Integer count = searchDAO.count(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCond,\n+                AttributableUtil.getInstance(AttributableType.USER));\n+        assertNotNull(count);\n+        assertTrue(count > 0);\n+    }\n }"}]}