{"sha":"4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRiNGI1NmQ0YWQ5OWQ1ZGYzOWRkNDBiNmRhYzZmYTM2ZTJiNWFlOWM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-17T15:49:45Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-17T15:49:45Z"},"message":"temporary solution to align the console with paginated search solution\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246702 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c35299eb826a44d55f8decbb5653d817c33d092f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c35299eb826a44d55f8decbb5653d817c33d092f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c/comments","author":null,"committer":null,"parents":[{"sha":"3316fd2447e5c4b7dc73106aaf35eef9a77baeca","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3316fd2447e5c4b7dc73106aaf35eef9a77baeca","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3316fd2447e5c4b7dc73106aaf35eef9a77baeca"}],"stats":{"total":82,"additions":49,"deletions":33},"files":[{"sha":"f4e6a601f50c655f12662dcf097294485edcdbea","filename":"console/src/main/java/org/syncope/console/rest/UsersRestClient.java","status":"modified","additions":23,"deletions":16,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUsersRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUsersRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FUsersRestClient.java?ref=4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c","patch":"@@ -21,6 +21,7 @@\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.ConfigurationTO;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n@@ -43,12 +44,16 @@ public List<UserTO> getAllUsers() {\n         return users;\n     }\n \n-    public List<UserTO> getPaginatedUsersList(int page,int size) {\n+    public List<UserTO> getPaginatedUsersList(int page, int size) {\n         List<UserTO> users = null;\n         try {\n-            users = Arrays.asList(restClient.getRestTemplate().getForObject(\n+            final PaginatedResult paginatedResult =\n+                    restClient.getRestTemplate().getForObject(\n                     restClient.getBaseURL() + \"user/paginatedList/{page}/{size}\",\n-                    UserTO[].class,page,size));\n+                    PaginatedResult.class, page, size);\n+\n+            users = paginatedResult.getRecords();\n+\n         } catch (SyncopeClientCompositeErrorException e) {\n             e.printStackTrace();\n         }\n@@ -65,7 +70,7 @@ public void createUser(UserTO userTO)\n \n         // Create user\n         newUserTO = restClient.getRestTemplate().postForObject(\n-            restClient.getBaseURL() + \"user/create\", userTO, UserTO.class);\n+                restClient.getBaseURL() + \"user/create\", userTO, UserTO.class);\n     }\n \n     /**\n@@ -74,19 +79,19 @@ public void createUser(UserTO userTO)\n      * @return true is the opertion ends succesfully, false otherwise\n      */\n     public boolean updateUser(UserMod userModTO) throws\n-            SyncopeClientCompositeErrorException{\n+            SyncopeClientCompositeErrorException {\n         UserTO newUserTO = null;\n \n         newUserTO = restClient.getRestTemplate().postForObject(\n-        restClient.getBaseURL() + \"user/update\", userModTO, UserTO.class);\n+                restClient.getBaseURL() + \"user/update\", userModTO, UserTO.class);\n \n         return userModTO.getId() == newUserTO.getId();\n     }\n \n     public void deleteUser(String id) {\n         try {\n             restClient.getRestTemplate().delete(restClient.getBaseURL()\n-            + \"user/delete/{userId}\", new Integer(id));\n+                    + \"user/delete/{userId}\", new Integer(id));\n         } catch (SyncopeClientCompositeErrorException e) {\n             e.printStackTrace();\n         }\n@@ -129,8 +134,7 @@ public boolean createConfigurationAttributes(\n     public boolean updateConfigurationAttributes(\n             ConfigurationTO configurationTO) {\n \n-        ConfigurationTO newConfigurationTO =  restClient.getRestTemplate()\n-                .postForObject(restClient.getBaseURL() + \"configuration/update\",\n+        ConfigurationTO newConfigurationTO = restClient.getRestTemplate().postForObject(restClient.getBaseURL() + \"configuration/update\",\n                 configurationTO, ConfigurationTO.class);\n \n         return configurationTO.equals(newConfigurationTO);\n@@ -162,13 +166,13 @@ public ConfigurationTO readConfigurationDisplayAttributes() {\n      * @param userTO\n      * @return UserTOs\n      */\n-    public List<UserTO> searchUsers(NodeCond nodeSearchCondition) \n+    public List<UserTO> searchUsers(NodeCond nodeSearchCondition)\n             throws HttpServerErrorException {\n         List<UserTO> matchedUsers = null;\n \n         matchedUsers = Arrays.asList(restClient.getRestTemplate().postForObject(\n-                    restClient.getBaseURL() + \"user/search\",\n-                    nodeSearchCondition, UserTO[].class));\n+                restClient.getBaseURL() + \"user/search\",\n+                nodeSearchCondition, UserTO[].class));\n \n         return matchedUsers;\n     }\n@@ -179,13 +183,16 @@ public List<UserTO> searchUsers(NodeCond nodeSearchCondition)\n      * @return UserTOs\n      */\n     public List<UserTO> paginatedSearchUsers(NodeCond nodeSearchCondition,\n-            int page,int size)\n+            int page, int size)\n             throws HttpServerErrorException {\n         List<UserTO> matchedUsers = null;\n \n-        matchedUsers = Arrays.asList(restClient.getRestTemplate().postForObject(\n-                    restClient.getBaseURL() + \"user/paginatedSearch/{page}/{size}\",\n-                    nodeSearchCondition, UserTO[].class,page,size));\n+        final PaginatedResult paginatedResult =\n+                restClient.getRestTemplate().postForObject(\n+                restClient.getBaseURL() + \"user/paginatedSearch/{page}/{size}\",\n+                nodeSearchCondition, PaginatedResult.class, page, size);\n+\n+        matchedUsers = paginatedResult.getRecords();\n \n         return matchedUsers;\n     }"},{"sha":"b20e1cfae72bfbe3716f453062b0f083cb526b2a","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c","patch":"@@ -201,11 +201,11 @@ public final void searchByPageAndSize() {\n \n         assertTrue(cond.checkValidity());\n \n-        List<SyncopeUser> users = syncopeUserDAO.search(cond, 1, 2);\n+        List<SyncopeUser> users = syncopeUserDAO.search(cond, 1, 2, null);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n-        users = syncopeUserDAO.search(cond, 2, 2);\n+        users = syncopeUserDAO.search(cond, 2, 2, null);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }"},{"sha":"a470e8c69235748a77f42be9a11dc42e71ff476c","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":24,"deletions":15,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=4b4b56d4ad99d5df39dd40b6dac6fa36e2b5ae9c","patch":"@@ -35,6 +35,7 @@\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.search.PaginatedResult;\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowActionsTO;\n@@ -393,10 +394,12 @@ public final void list() {\n \n     @Test\n     public final void paginatedList() {\n-        List<UserTO> users = Arrays.asList(\n-                restTemplate.getForObject(\n+\n+        PaginatedResult paginatedResult = restTemplate.getForObject(\n                 BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n-                UserTO[].class, 1, 2));\n+                PaginatedResult.class, 1, 2);\n+\n+        List<UserTO> users = paginatedResult.getRecords();\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n@@ -406,19 +409,21 @@ public final void paginatedList() {\n             assertNotNull(user);\n         }\n \n-        users = Arrays.asList(\n-                restTemplate.getForObject(\n+        paginatedResult = restTemplate.getForObject(\n                 BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n-                UserTO[].class, 2, 2));\n+                PaginatedResult.class, 2, 2);\n+\n+        users = paginatedResult.getRecords();\n \n         assertNotNull(users);\n         assertFalse(users.isEmpty());\n         assertEquals(2, users.size());\n \n-        users = Arrays.asList(\n-                restTemplate.getForObject(\n+        PaginatedResult result = restTemplate.getForObject(\n                 BASE_URL + \"user/paginatedList/{page}/{size}.json\",\n-                UserTO[].class, 100, 2));\n+                PaginatedResult.class, 100, 2);\n+\n+        users = result.getRecords();\n \n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n@@ -522,11 +527,13 @@ public final void paginatedSearch() {\n \n         assertTrue(searchCondition.checkValidity());\n \n-        List<UserTO> matchedUsers = Arrays.asList(\n-                restTemplate.postForObject(\n+        PaginatedResult result = restTemplate.postForObject(\n                 BASE_URL + \"user/paginatedSearch/{page}/{size}\",\n-                searchCondition, UserTO[].class, 1, 2));\n+                searchCondition, PaginatedResult.class, 1, 2);\n+\n+        List<UserTO> matchedUsers = result.getRecords();\n         assertNotNull(matchedUsers);\n+\n         assertFalse(matchedUsers.isEmpty());\n         for (UserTO user : matchedUsers) {\n             assertNotNull(user);\n@@ -537,10 +544,12 @@ public final void paginatedSearch() {\n         isNullCond.setSchema(\"loginDate\");\n         searchCondition = NodeCond.getLeafCond(isNullCond);\n \n-        matchedUsers = Arrays.asList(\n-                restTemplate.postForObject(\n+        PaginatedResult paginatedResult = restTemplate.postForObject(\n                 BASE_URL + \"user/paginatedSearch/{page}/{size}\",\n-                searchCondition, UserTO[].class, 1, 2));\n+                searchCondition, PaginatedResult.class, 1, 2);\n+\n+        matchedUsers = paginatedResult.getRecords();\n+\n         assertNotNull(matchedUsers);\n         assertFalse(matchedUsers.isEmpty());\n         Set<Long> userIds = new HashSet<Long>(matchedUsers.size());"}]}