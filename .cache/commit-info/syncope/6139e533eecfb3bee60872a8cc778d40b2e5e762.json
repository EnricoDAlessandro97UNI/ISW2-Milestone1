{"sha":"6139e533eecfb3bee60872a8cc778d40b2e5e762","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYxMzllNTMzZWVjZmIzYmVlNjA4NzJhOGNjNzc4ZDQwYjJlNWU3NjI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-23T14:43:20Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-23T14:43:20Z"},"message":"Cleaning up some stuff about policies\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247212 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"40f2b698d63237b8180a6bd4dc3243e84e346d66","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/40f2b698d63237b8180a6bd4dc3243e84e346d66"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6139e533eecfb3bee60872a8cc778d40b2e5e762","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6139e533eecfb3bee60872a8cc778d40b2e5e762","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6139e533eecfb3bee60872a8cc778d40b2e5e762","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6139e533eecfb3bee60872a8cc778d40b2e5e762/comments","author":null,"committer":null,"parents":[{"sha":"0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a"}],"stats":{"total":915,"additions":354,"deletions":561},"files":[{"sha":"9f9b2f79c720dd5621e7bc3c521618d2a86aa809","filename":"client/src/main/java/org/syncope/client/mod/AccountPolicyMod.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java?ref=0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a","patch":"@@ -1,35 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.mod;\n-\n-import org.syncope.types.AccountPolicySpec;\n-\n-public class AccountPolicyMod extends PolicyMod {\n-\n-    private static final long serialVersionUID = 5410030012094184828L;\n-\n-    private AccountPolicySpec specification;\n-\n-    public AccountPolicyMod() {\n-    }\n-\n-    public void setSpecification(AccountPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-    public AccountPolicySpec getSpecification() {\n-        return specification;\n-    }\n-}"},{"sha":"53ae33480a44d3d6a078430d25a5deb902dc3d83","filename":"client/src/main/java/org/syncope/client/mod/PasswordPolicyMod.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java?ref=0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a","patch":"@@ -1,35 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.mod;\n-\n-import org.syncope.types.PasswordPolicySpec;\n-\n-public class PasswordPolicyMod extends PolicyMod {\n-\n-    private static final long serialVersionUID = -7948423277026280828L;\n-\n-    private PasswordPolicySpec specification;\n-\n-    public PasswordPolicyMod() {\n-    }\n-\n-    public void setSpecification(PasswordPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-    public PasswordPolicySpec getSpecification() {\n-        return specification;\n-    }\n-}"},{"sha":"9cdf0e218eaacb7bef26f63a77ddef36f754ce51","filename":"client/src/main/java/org/syncope/client/mod/PolicyMod.java","status":"removed","additions":0,"deletions":56,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java?ref=0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a","patch":"@@ -1,56 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.mod;\n-\n-import org.syncope.client.AbstractBaseBean;\n-import org.syncope.types.PolicyType;\n-\n-public abstract class PolicyMod extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -4188817853738067677L;\n-\n-    private long id;\n-\n-    private PolicyType type;\n-\n-    private String description;\n-\n-    public PolicyMod() {\n-    }\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    public PolicyType getType() {\n-        return type;\n-    }\n-\n-    public void setType(PolicyType type) {\n-        this.type = type;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-}"},{"sha":"95ac4e06ea0a5d49c3c526c3d7ce4000f30c0b53","filename":"client/src/main/java/org/syncope/client/mod/SyncPolicyMod.java","status":"removed","additions":0,"deletions":35,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java?ref=0891b6404069ad7d7b48cd0ec6e0aabd2ef0183a","patch":"@@ -1,35 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.client.mod;\n-\n-import org.syncope.types.SyncPolicySpec;\n-\n-public class SyncPolicyMod extends PolicyMod {\n-\n-    private static final long serialVersionUID = 7438813240484903242L;\n-\n-    private SyncPolicySpec specification;\n-\n-    public SyncPolicyMod() {\n-    }\n-\n-    public void setSpecification(SyncPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-    public SyncPolicySpec getSpecification() {\n-        return specification;\n-    }\n-}"},{"sha":"863feefd89c532dc39847c07fe26a275193d8c91","filename":"client/src/main/java/org/syncope/client/to/AccountPolicyTO.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -24,7 +24,13 @@ public class AccountPolicyTO extends PolicyTO {\n     private AccountPolicySpec specification;\n \n     public AccountPolicyTO() {\n-        setType(PolicyType.ACCOUNT);\n+        this(false);\n+    }\n+\n+    public AccountPolicyTO(boolean global) {\n+        super();\n+\n+        this.type = global ? PolicyType.GLOBAL_ACCOUNT : PolicyType.ACCOUNT;\n     }\n \n     public void setSpecification(final AccountPolicySpec specification) {"},{"sha":"4f4d74fc89816e5be42fbadf6693fc9c3847407b","filename":"client/src/main/java/org/syncope/client/to/PasswordPolicyTO.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -24,7 +24,13 @@ public class PasswordPolicyTO extends PolicyTO {\n     private PasswordPolicySpec specification;\n \n     public PasswordPolicyTO() {\n-        setType(PolicyType.PASSWORD);\n+        this(false);\n+    }\n+\n+    public PasswordPolicyTO(boolean global) {\n+        super();\n+\n+        this.type = global ? PolicyType.GLOBAL_PASSWORD : PolicyType.PASSWORD;\n     }\n \n     public void setSpecification(final PasswordPolicySpec specification) {"},{"sha":"32d0f4b018c0961213a78e147126192d6f74f894","filename":"client/src/main/java/org/syncope/client/to/PolicyTO.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -25,7 +25,7 @@ public abstract class PolicyTO extends AbstractBaseBean {\n \n     private String description;\n \n-    private PolicyType type;\n+    protected PolicyType type;\n \n     public long getId() {\n         return id;\n@@ -46,8 +46,4 @@ public void setDescription(String description) {\n     public PolicyType getType() {\n         return type;\n     }\n-\n-    public void setType(PolicyType type) {\n-        this.type = type;\n-    }\n }"},{"sha":"b1268675517c21900ed49730995829f25b98a32a","filename":"client/src/main/java/org/syncope/client/to/SyncPolicyTO.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -24,7 +24,13 @@ public class SyncPolicyTO extends PolicyTO {\n     private SyncPolicySpec specification;\n \n     public SyncPolicyTO() {\n-        setType(PolicyType.SYNC);\n+        this(false);\n+    }\n+\n+    public SyncPolicyTO(boolean global) {\n+        super();\n+\n+        this.type = global ? PolicyType.GLOBAL_SYNC : PolicyType.SYNC;\n     }\n \n     public void setSpecification(final SyncPolicySpec specification) {"},{"sha":"940efe36ae42c9b402298989845ec261a63ece66","filename":"client/src/main/java/org/syncope/types/PasswordPolicySpec.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicySpec.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -23,7 +23,7 @@ public class PasswordPolicySpec extends AbstractPolicySpec {\n     private static final long serialVersionUID = -7988778083915548547L;\n \n     /**\n-     * History length\n+     * History length.\n      */\n     private int historyLength;\n "},{"sha":"3442ab348601a0e478b583b4c50c37f341037824","filename":"console/src/main/java/org/syncope/console/pages/PolicyModalPage.java","status":"modified","additions":11,"deletions":60,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -24,10 +24,6 @@\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.syncope.client.mod.AccountPolicyMod;\n-import org.syncope.client.mod.PasswordPolicyMod;\n-import org.syncope.client.mod.PolicyMod;\n-import org.syncope.client.mod.SyncPolicyMod;\n import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n@@ -120,14 +116,7 @@ protected void onSubmit(\n \n                 try {\n                     if (policyTO.getId() > 0) {\n-                        final PolicyMod policyMod =\n-                                getPolicyModInstance(policyTO.getType());\n-                        policyMod.setId(policyTO.getId());\n-                        policyMod.setType(policyTO.getType());\n-                        setPolicySpecification(policyMod, policy);\n-                        policyMod.setDescription(policyTO.getDescription());\n-\n-                        policyRestClient.updatePolicy(policyMod);\n+                        policyRestClient.updatePolicy(policyTO);\n                     } else {\n                         policyRestClient.createPolicy(policyTO);\n                     }\n@@ -142,7 +131,9 @@ protected void onSubmit(\n             }\n \n             @Override\n-            protected void onError(AjaxRequestTarget target, Form form) {\n+            protected void onError(final AjaxRequestTarget target,\n+                    final Form form) {\n+\n                 target.add(getPage().get(\"feedback\"));\n             }\n         };\n@@ -152,7 +143,7 @@ protected void onError(AjaxRequestTarget target, Form form) {\n \n     private AbstractPolicySpec getPolicySpecification(final PolicyTO policyTO) {\n \n-        AbstractPolicySpec spec = null;\n+        AbstractPolicySpec spec;\n \n         switch (policyTO.getType()) {\n             case GLOBAL_ACCOUNT:\n@@ -161,14 +152,17 @@ private AbstractPolicySpec getPolicySpecification(final PolicyTO policyTO) {\n                         ? ((AccountPolicyTO) policyTO).getSpecification()\n                         : new AccountPolicySpec();\n                 break;\n+\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n                 spec = ((PasswordPolicyTO) policyTO).getSpecification() != null\n                         ? ((PasswordPolicyTO) policyTO).getSpecification()\n                         : new PasswordPolicySpec();\n                 break;\n+\n             case GLOBAL_SYNC:\n             case SYNC:\n+            default:\n                 spec = ((SyncPolicyTO) policyTO).getSpecification() != null\n                         ? ((SyncPolicyTO) policyTO).getSpecification()\n                         : new SyncPolicySpec();\n@@ -180,68 +174,25 @@ private AbstractPolicySpec getPolicySpecification(final PolicyTO policyTO) {\n     private void setPolicySpecification(\n             final PolicyTO policyTO, final AbstractPolicySpec specification) {\n \n-        AbstractPolicySpec spec = null;\n-\n         switch (policyTO.getType()) {\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n                 ((AccountPolicyTO) policyTO).setSpecification(\n                         (AccountPolicySpec) specification);\n                 break;\n+\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n                 ((PasswordPolicyTO) policyTO).setSpecification(\n                         (PasswordPolicySpec) specification);\n                 break;\n-            case GLOBAL_SYNC:\n-            case SYNC:\n-                ((SyncPolicyTO) policyTO).setSpecification(\n-                        (SyncPolicySpec) specification);\n-        }\n-    }\n-\n-    private void setPolicySpecification(\n-            final PolicyMod policyMod, final AbstractPolicySpec specification) {\n \n-        AbstractPolicySpec spec = null;\n-\n-        switch (policyMod.getType()) {\n-            case GLOBAL_ACCOUNT:\n-            case ACCOUNT:\n-                ((AccountPolicyMod) policyMod).setSpecification(\n-                        (AccountPolicySpec) specification);\n-                break;\n-            case GLOBAL_PASSWORD:\n-            case PASSWORD:\n-                ((PasswordPolicyMod) policyMod).setSpecification(\n-                        (PasswordPolicySpec) specification);\n-                break;\n             case GLOBAL_SYNC:\n             case SYNC:\n-                ((SyncPolicyMod) policyMod).setSpecification(\n+                ((SyncPolicyTO) policyTO).setSpecification(\n                         (SyncPolicySpec) specification);\n-        }\n-    }\n \n-    private PolicyMod getPolicyModInstance(final PolicyType policyType) {\n-        PolicyMod policyMod = null;\n-        switch (policyType) {\n-            case ACCOUNT:\n-            case GLOBAL_ACCOUNT:\n-                policyMod = new AccountPolicyMod();\n-                policyMod.setType(policyType);\n-                break;\n-            case PASSWORD:\n-            case GLOBAL_PASSWORD:\n-                policyMod = new PasswordPolicyMod();\n-                policyMod.setType(policyType);\n-                break;\n-            case GLOBAL_SYNC:\n-            case SYNC:\n-                policyMod = new SyncPolicyMod();\n-                policyMod.setType(policyType);\n+            default:\n         }\n-\n-        return policyMod;\n     }\n }"},{"sha":"4b596644a3cbe16b555045605ccd0ae1fb80a43c","filename":"console/src/main/java/org/syncope/console/pages/panels/PoliciesPanel.java","status":"modified","additions":16,"deletions":6,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -354,22 +354,32 @@ public IModel<PolicyTO> model(final PolicyTO object) {\n     }\n \n     private PolicyTO getPolicyTOInstance(final PolicyType policyType) {\n-        PolicyTO policyTO = null;\n+        PolicyTO policyTO;\n         switch (policyType) {\n-            case ACCOUNT:\n             case GLOBAL_ACCOUNT:\n+                policyTO = new AccountPolicyTO(true);\n+                break;\n+\n+            case ACCOUNT:\n                 policyTO = new AccountPolicyTO();\n-                policyTO.setType(policyType);\n                 break;\n-            case PASSWORD:\n+\n             case GLOBAL_PASSWORD:\n+                policyTO = new PasswordPolicyTO(true);\n+                break;\n+\n+            case PASSWORD:\n                 policyTO = new PasswordPolicyTO();\n-                policyTO.setType(policyType);\n                 break;\n+\n+\n             case GLOBAL_SYNC:\n+                policyTO = new SyncPolicyTO(true);\n+                break;\n+\n             case SYNC:\n+            default:\n                 policyTO = new SyncPolicyTO();\n-                policyTO.setType(policyType);\n         }\n \n         return policyTO;"},{"sha":"51f7b5eae07030aa10092605d86bb4cd67842924","filename":"console/src/main/java/org/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -18,7 +18,6 @@\n import java.util.Arrays;\n import java.util.List;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.mod.PolicyMod;\n import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n@@ -28,7 +27,7 @@\n /**\n  * Console client for invoking Rest Policy services.\n  */\n- @Component\n+@Component\n public class PolicyRestClient extends AbstractBaseRestClient {\n \n     public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n@@ -167,24 +166,23 @@ public <T extends PolicyTO> T createPolicy(final T policy)\n         }\n     }\n \n-    public <T extends PolicyMod, E extends PolicyTO> E updatePolicy(\n-            final T policy)\n+    public <T extends PolicyTO> T updatePolicy(final T policy)\n             throws InvalidPolicyType {\n \n         switch (policy.getType()) {\n             case GLOBAL_ACCOUNT:\n             case ACCOUNT:\n-                return (E) restTemplate.postForObject(\n+                return (T) restTemplate.postForObject(\n                         baseURL + \"policy/account/update\",\n                         policy, AccountPolicyTO.class);\n             case GLOBAL_PASSWORD:\n             case PASSWORD:\n-                return (E) restTemplate.postForObject(\n+                return (T) restTemplate.postForObject(\n                         baseURL + \"policy/password/update\",\n                         policy, PasswordPolicyTO.class);\n             case GLOBAL_SYNC:\n             case SYNC:\n-                return (E) restTemplate.postForObject(\n+                return (T) restTemplate.postForObject(\n                         baseURL + \"policy/sync/update\",\n                         policy, SyncPolicyTO.class);\n             default:"},{"sha":"66f91d48859b69ade50584cb5f52750371e80a75","filename":"core/src/main/java/org/syncope/core/persistence/beans/AccountPolicy.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -15,9 +15,20 @@\n package org.syncope.core.persistence.beans;\n \n import javax.persistence.Entity;\n+import org.syncope.types.PolicyType;\n \n @Entity\n public class AccountPolicy extends Policy {\n \n-    private static final long serialVersionUID = 9138550910385232849L;\n+    private static final long serialVersionUID = -2767606675667839060L;\n+\n+    public AccountPolicy() {\n+        this(false);\n+    }\n+\n+    public AccountPolicy(boolean global) {\n+        super();\n+\n+        this.type = global ? PolicyType.GLOBAL_ACCOUNT : PolicyType.ACCOUNT;\n+    }\n }"},{"sha":"bef3f36b79e77693c8a6dbc9a24ab40fedb06e73","filename":"core/src/main/java/org/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -362,15 +362,15 @@ public void setSyncTraceLevel(TraceLevel syncTraceLevel) {\n         this.syncTraceLevel = syncTraceLevel;\n     }\n \n-    public Policy getAccountPolicy() {\n+    public AccountPolicy getAccountPolicy() {\n         return accountPolicy;\n     }\n \n     public void setAccountPolicy(AccountPolicy accountPolicy) {\n         this.accountPolicy = accountPolicy;\n     }\n \n-    public Policy getPasswordPolicy() {\n+    public PasswordPolicy getPasswordPolicy() {\n         return passwordPolicy;\n     }\n "},{"sha":"0324915165cf9837734a7c647d14bc6473ed9c89","filename":"core/src/main/java/org/syncope/core/persistence/beans/PasswordPolicy.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -15,9 +15,20 @@\n package org.syncope.core.persistence.beans;\n \n import javax.persistence.Entity;\n+import org.syncope.types.PolicyType;\n \n @Entity\n public class PasswordPolicy extends Policy {\n \n     private static final long serialVersionUID = 9138550910385232849L;\n+\n+    public PasswordPolicy() {\n+        this(false);\n+    }\n+\n+    public PasswordPolicy(boolean global) {\n+        super();\n+\n+        this.type = global ? PolicyType.GLOBAL_PASSWORD : PolicyType.PASSWORD;\n+    }\n }"},{"sha":"02af095e360a2f4703fe943f52a8f6af0d7ffdbc","filename":"core/src/main/java/org/syncope/core/persistence/beans/Policy.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -29,7 +29,7 @@\n \n @Entity\n @PolicyCheck\n-public class Policy extends AbstractBaseBean {\n+public abstract class Policy extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -5844833125843247458L;\n \n@@ -41,7 +41,7 @@ public class Policy extends AbstractBaseBean {\n \n     @Column(nullable = false)\n     @Enumerated(EnumType.STRING)\n-    private PolicyType type;\n+    protected PolicyType type;\n \n     @Lob\n     @Type(type = \"org.hibernate.type.StringClobType\")\n@@ -67,16 +67,14 @@ public PolicyType getType() {\n         return type;\n     }\n \n-    public void setType(PolicyType type) {\n-        this.type = type;\n-    }\n-\n     public <T extends AbstractPolicySpec> T getSpecification() {\n         T result = XmlSerializer.<T>deserialize(specification);\n         return result;\n     }\n \n-    public <T extends AbstractPolicySpec> void setSpecification(final T policy) {\n+    public <T extends AbstractPolicySpec> void setSpecification(\n+            final T policy) {\n+\n         specification = XmlSerializer.serialize(policy);\n     }\n }"},{"sha":"f43a8ebbcfddc5b9e03018c292ab36df30d2897b","filename":"core/src/main/java/org/syncope/core/persistence/beans/SyncPolicy.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -15,9 +15,20 @@\n package org.syncope.core.persistence.beans;\n \n import javax.persistence.Entity;\n+import org.syncope.types.PolicyType;\n \n @Entity\n public class SyncPolicy extends Policy {\n \n-    private static final long serialVersionUID = 9138550910385232849L;\n+    private static final long serialVersionUID = -6090413855809521279L;\n+\n+    public SyncPolicy() {\n+        this(false);\n+    }\n+\n+    public SyncPolicy(boolean global) {\n+        super();\n+\n+        this.type = global ? PolicyType.GLOBAL_SYNC : PolicyType.SYNC;\n+    }\n }"},{"sha":"6e69dee6339bce3f2c09a86a82df682dfd018f6c","filename":"core/src/main/java/org/syncope/core/persistence/beans/role/SyncopeRole.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FSyncopeRole.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -46,7 +46,6 @@\n import org.syncope.core.persistence.beans.AccountPolicy;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.PasswordPolicy;\n-import org.syncope.core.persistence.beans.Policy;\n \n @Entity\n @Table(uniqueConstraints =\n@@ -366,7 +365,7 @@ public List<RVirAttr> findInheritedVirtualAttributes() {\n      * @return parent password policy if isInheritPasswordPolicy is 'true' and\n      * parent is not null. Return local passowrd policy otherwise.\n      */\n-    public Policy getPasswordPolicy() {\n+    public PasswordPolicy getPasswordPolicy() {\n         return isInheritPasswordPolicy() && getParent() != null\n                 ? getParent().getPasswordPolicy() : passwordPolicy;\n     }\n@@ -388,7 +387,7 @@ public void setInheritPasswordPolicy(boolean inheritPasswordPolicy) {\n      * @return parent account policy if isInheritAccountPolicy is 'true' and \n      * parent is not null. Return local account policy otherwise.\n      */\n-    public Policy getAccountPolicy() {\n+    public AccountPolicy getAccountPolicy() {\n         return isInheritAccountPolicy() && getParent() != null\n                 ? getParent().getAccountPolicy() : accountPolicy;\n     }"},{"sha":"6587905c19bdb32532fa8f84bf11ce78280f5ef3","filename":"core/src/main/java/org/syncope/core/persistence/dao/PolicyDAO.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -15,24 +15,27 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.types.PolicyType;\n \n public interface PolicyDAO extends DAO {\n \n     Policy find(Long id);\n \n-    Policy getGlobalPasswordPolicy();\n+    PasswordPolicy getGlobalPasswordPolicy();\n \n-    List<Policy> find(PolicyType type);\n+    List<? extends Policy> find(PolicyType type);\n \n-    Policy getGlobalAccountPolicy();\n+    AccountPolicy getGlobalAccountPolicy();\n \n-    Policy getGlobalSyncPolicy();\n+    SyncPolicy getGlobalSyncPolicy();\n \n     List<Policy> findAll();\n \n-    Policy save(Policy policy);\n+     <T extends Policy> T save(T policy);\n \n     void delete(Long id);\n }"},{"sha":"94cd26d14861ea4e9fdcac8e66166cf6c6f9b804","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":16,"deletions":25,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -17,7 +17,10 @@\n import java.util.List;\n import javax.persistence.Query;\n import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.AccountPolicy;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.types.PolicyType;\n \n@@ -31,7 +34,7 @@ public Policy find(final Long id) {\n     }\n \n     @Override\n-    public List<Policy> find(final PolicyType type) {\n+    public List<? extends Policy> find(final PolicyType type) {\n         final Query query = entityManager.createQuery(\n                 \"SELECT e FROM Policy e WHERE type=:type\");\n \n@@ -41,36 +44,24 @@ public List<Policy> find(final PolicyType type) {\n     }\n \n     @Override\n-    public Policy getGlobalPasswordPolicy() {\n-\n-        List<Policy> policies = find(PolicyType.GLOBAL_PASSWORD);\n-        if (policies != null && !policies.isEmpty()) {\n-            return policies.get(0);\n-        } else {\n-            return null;\n-        }\n+    public PasswordPolicy getGlobalPasswordPolicy() {\n+        List<? extends Policy> policies = find(PolicyType.GLOBAL_PASSWORD);\n+        return policies == null || policies.isEmpty()\n+                ? null : (PasswordPolicy) policies.get(0);\n     }\n \n     @Override\n-    public Policy getGlobalAccountPolicy() {\n-        List<Policy> policies = find(PolicyType.GLOBAL_ACCOUNT);\n-        if (policies != null && !policies.isEmpty()) {\n-            return policies.get(0);\n-        } else {\n-            return null;\n-        }\n-\n+    public AccountPolicy getGlobalAccountPolicy() {\n+        List<? extends Policy> policies = find(PolicyType.GLOBAL_ACCOUNT);\n+        return policies == null || policies.isEmpty()\n+                ? null : (AccountPolicy) policies.get(0);\n     }\n \n     @Override\n-    public Policy getGlobalSyncPolicy() {\n-        List<Policy> policies = find(PolicyType.GLOBAL_SYNC);\n-        if (policies != null && !policies.isEmpty()) {\n-            return policies.get(0);\n-        } else {\n-            return null;\n-        }\n-\n+    public SyncPolicy getGlobalSyncPolicy() {\n+        List<? extends Policy> policies = find(PolicyType.GLOBAL_SYNC);\n+        return policies == null || policies.isEmpty()\n+                ? null : (SyncPolicy) policies.get(0);\n     }\n \n     @Override"},{"sha":"b1ae35a583cf82212f7e007357fca9f89fb5a010","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -25,7 +25,6 @@\n import org.syncope.types.AccountPolicySpec;\n import org.syncope.types.EntityViolationType;\n import org.syncope.types.PasswordPolicySpec;\n-import org.syncope.types.PolicyType;\n import org.syncope.types.SyncPolicySpec;\n \n public class PolicyValidator extends AbstractValidator\n@@ -46,21 +45,17 @@ public boolean isValid(\n         context.disableDefaultConstraintViolation();\n \n         if (object.getSpecification() != null\n-                && (((object.getType() == PolicyType.PASSWORD\n-                || object.getType() == PolicyType.GLOBAL_PASSWORD)\n+                && ((object instanceof PasswordPolicy\n                 && !(object.getSpecification() instanceof PasswordPolicySpec))\n-                || ((object.getType() == PolicyType.ACCOUNT\n-                || object.getType() == PolicyType.GLOBAL_ACCOUNT)\n-                && !(object.getSpecification() instanceof AccountPolicySpec))\n-                || ((object.getType() == PolicyType.SYNC\n-                || object.getType() == PolicyType.GLOBAL_SYNC)\n-                && !(object.getSpecification() instanceof SyncPolicySpec)))) {\n+                || ((object instanceof AccountPolicy\n+                && !(object.getSpecification() instanceof AccountPolicySpec)))\n+                || ((object instanceof SyncPolicy\n+                && !(object.getSpecification() instanceof SyncPolicySpec))))) {\n \n             context.buildConstraintViolationWithTemplate(\n-                    \"Invalid password specification or password type\").\n-                    addNode(\n-                    EntityViolationType.valueOf(\n-                    \"Invalid\" + object.getClass().getSimpleName()).toString()).\n+                    \"Invalid policy specification\").\n+                    addNode(EntityViolationType.valueOf(\n+                    \"Invalid\" + object.getClass().getSimpleName()).name()).\n                     addConstraintViolation();\n \n             return false;\n@@ -70,34 +65,35 @@ public boolean isValid(\n             case GLOBAL_PASSWORD:\n                 // just one policy with type PASSWORD\n                 final PasswordPolicy passwordPolicy =\n-                        (PasswordPolicy) policyDAO.getGlobalPasswordPolicy();\n+                        policyDAO.getGlobalPasswordPolicy();\n \n                 if (passwordPolicy != null\n                         && !passwordPolicy.getId().equals(object.getId())) {\n \n                     context.buildConstraintViolationWithTemplate(\n                             \"Password policy already exists\").addNode(\n-                            EntityViolationType.InvalidPasswordPolicy.toString()).\n+                            EntityViolationType.InvalidPasswordPolicy.name()).\n                             addConstraintViolation();\n \n                     return false;\n                 }\n                 break;\n+\n             case PASSWORD:\n                 break;\n \n             case GLOBAL_ACCOUNT:\n \n                 // just one GLOBAL_ACCOUNT policy\n                 final AccountPolicy accountPolicy =\n-                        (AccountPolicy) policyDAO.getGlobalAccountPolicy();\n+                        policyDAO.getGlobalAccountPolicy();\n \n                 if (accountPolicy != null\n                         && !accountPolicy.getId().equals(object.getId())) {\n \n                     context.buildConstraintViolationWithTemplate(\n                             \"Global Account policy already exists\").addNode(\n-                            EntityViolationType.InvalidAccountPolicy.toString()).\n+                            EntityViolationType.InvalidAccountPolicy.name()).\n                             addConstraintViolation();\n \n                     return false;\n@@ -111,14 +107,14 @@ public boolean isValid(\n \n                 // just one GLOBAL_SYNC policy\n                 final SyncPolicy syncPolicy =\n-                        (SyncPolicy) policyDAO.getGlobalSyncPolicy();\n+                        policyDAO.getGlobalSyncPolicy();\n \n                 if (syncPolicy != null\n                         && !syncPolicy.getId().equals(object.getId())) {\n \n                     context.buildConstraintViolationWithTemplate(\n                             \"Global Sync policy already exists\").addNode(\n-                            EntityViolationType.InvalidSyncPolicy.toString()).\n+                            EntityViolationType.InvalidSyncPolicy.name()).\n                             addConstraintViolation();\n \n                     return false;"},{"sha":"0300652cf15f21e95899402db4f720df58fc185f","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncopeUserCheck.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserCheck.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -30,7 +30,7 @@\n @Documented\n public @interface SyncopeUserCheck {\n \n-    String message() default \"{org.syncope.core.validation.attributable}\";\n+    String message() default \"{org.syncope.core.validation.syncopeuser}\";\n \n     Class<?>[] groups() default {};\n "},{"sha":"9b46adc7bcf0c86ad9ae414cbc0e5ff7de871bc0","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"modified","additions":13,"deletions":28,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -19,7 +19,6 @@\n import javax.validation.ConstraintValidator;\n import javax.validation.ConstraintValidatorContext;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.AccountPolicy;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.ExternalResource;\n@@ -35,7 +34,7 @@\n import org.syncope.types.PasswordPolicySpec;\n \n public class SyncopeUserValidator extends AbstractValidator\n-        implements ConstraintValidator<SyncopeUserCheck, AbstractAttributable> {\n+        implements ConstraintValidator<SyncopeUserCheck, SyncopeUser> {\n \n     @Autowired\n     private PolicyDAO policyDAO;\n@@ -54,8 +53,7 @@ public void initialize(final SyncopeUserCheck constraintAnnotation) {\n     }\n \n     @Override\n-    public boolean isValid(\n-            final AbstractAttributable object,\n+    public boolean isValid(final SyncopeUser object,\n             final ConstraintValidatorContext context) {\n \n         context.disableDefaultConstraintViolation();\n@@ -65,14 +63,10 @@ public boolean isValid(\n         // ------------------------------\n         LOG.debug(\"Password Policy enforcement\");\n \n-        final List<PasswordPolicy> passwordPolicies =\n-                getPasswordPolicies((SyncopeUser) object);\n-\n         try {\n-            for (Policy policy : passwordPolicies) {\n+            for (Policy policy : getPasswordPolicies(object)) {\n                 // clearPassword must exist during creation/password update\n-                final String password =\n-                        ((SyncopeUser) object).getClearPassword();\n+                final String password = object.getClearPassword();\n \n                 // evaluate/enforce only during creation or password update\n                 if (password != null) {\n@@ -97,7 +91,7 @@ public boolean isValid(\n         } finally {\n             // password has been validated, let's remove its\n             // clear version\n-            ((SyncopeUser) object).removeClearPassword();\n+            object.removeClearPassword();\n         }\n         // ------------------------------\n \n@@ -106,20 +100,15 @@ public boolean isValid(\n         // ------------------------------\n         LOG.debug(\"Account Policy enforcement\");\n \n-        final List<AccountPolicy> accountPolicies =\n-                getAccountPolicies((SyncopeUser) object);\n-\n         try {\n             // username missed\n-            for (Policy policy : accountPolicies) {\n-\n+            for (Policy policy : getAccountPolicies(object)) {\n                 // evaluate policy\n                 final AccountPolicySpec accountPolicy =\n                         evaluator.evaluate(policy, object);\n \n                 // enforce policy\n-                apEnforcer.enforce(\n-                        accountPolicy, policy.getType(), (SyncopeUser) object);\n+                apEnforcer.enforce(accountPolicy, policy.getType(), object);\n             }\n         } catch (Exception e) {\n             LOG.debug(\"Invalid username\");\n@@ -140,24 +129,22 @@ private List<PasswordPolicy> getPasswordPolicies(final SyncopeUser user) {\n         final List<PasswordPolicy> policies = new ArrayList<PasswordPolicy>();\n \n         // Add global policy\n-        PasswordPolicy policy =\n-                (PasswordPolicy) policyDAO.getGlobalPasswordPolicy();\n-\n+        PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n         if (policy != null) {\n             policies.add(policy);\n         }\n \n         // add resource policies\n         for (ExternalResource resource : user.getExternalResources()) {\n-            policy = (PasswordPolicy) resource.getPasswordPolicy();\n+            policy = resource.getPasswordPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n             }\n         }\n \n         // add role policies\n         for (SyncopeRole role : user.getRoles()) {\n-            policy = (PasswordPolicy) role.getPasswordPolicy();\n+            policy = role.getPasswordPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n             }\n@@ -170,24 +157,22 @@ private List<AccountPolicy> getAccountPolicies(final SyncopeUser user) {\n         final List<AccountPolicy> policies = new ArrayList<AccountPolicy>();\n \n         // Add global policy\n-        AccountPolicy policy =\n-                (AccountPolicy) policyDAO.getGlobalAccountPolicy();\n-\n+        AccountPolicy policy = policyDAO.getGlobalAccountPolicy();\n         if (policy != null) {\n             policies.add(policy);\n         }\n \n         // add resource policies\n         for (ExternalResource resource : user.getExternalResources()) {\n-            policy = (AccountPolicy) resource.getAccountPolicy();\n+            policy = resource.getAccountPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n             }\n         }\n \n         // add role policies\n         for (SyncopeRole role : user.getRoles()) {\n-            policy = (AccountPolicy) role.getAccountPolicy();\n+            policy = role.getAccountPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n             }"},{"sha":"33873f4464602786e2c46a7423c7efc16fd6e10e","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -25,9 +25,6 @@\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n-import org.syncope.client.mod.AccountPolicyMod;\n-import org.syncope.client.mod.PasswordPolicyMod;\n-import org.syncope.client.mod.SyncPolicyMod;\n import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n@@ -101,13 +98,13 @@ private PolicyTO create(final Policy policy, final PolicyTO policyTO)\n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/password/update\")\n     public PasswordPolicyTO update(final HttpServletResponse response,\n-            final @RequestBody PasswordPolicyMod policyMod)\n+            final @RequestBody PasswordPolicyTO policyTO)\n             throws NotFoundException {\n \n-        LOG.debug(\"Updating policy \" + policyMod);\n+        LOG.debug(\"Updating policy \" + policyTO);\n \n         final PasswordPolicy policy =\n-                (PasswordPolicy) policyDataBinder.getPolicy(policyMod);\n+                (PasswordPolicy) policyDataBinder.getPolicy(policyTO);\n \n         final Policy actual = update(policy);\n         return (PasswordPolicyTO) policyDataBinder.getPolicyTO(actual);\n@@ -116,13 +113,13 @@ public PasswordPolicyTO update(final HttpServletResponse response,\n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/account/update\")\n     public AccountPolicyTO update(final HttpServletResponse response,\n-            final @RequestBody AccountPolicyMod policyMod)\n+            final @RequestBody AccountPolicyTO policyTO)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n-        LOG.debug(\"Updating policy \" + policyMod);\n+        LOG.debug(\"Updating policy \" + policyTO);\n \n         final AccountPolicy policy =\n-                (AccountPolicy) policyDataBinder.getPolicy(policyMod);\n+                (AccountPolicy) policyDataBinder.getPolicy(policyTO);\n \n         final Policy actual = update(policy);\n         return (AccountPolicyTO) policyDataBinder.getPolicyTO(actual);\n@@ -131,13 +128,13 @@ public AccountPolicyTO update(final HttpServletResponse response,\n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/sync/update\")\n     public SyncPolicyTO update(final HttpServletResponse response,\n-            final @RequestBody SyncPolicyMod policyMod)\n+            final @RequestBody SyncPolicyTO policyTO)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n-        LOG.debug(\"Updating policy \" + policyMod);\n+        LOG.debug(\"Updating policy \" + policyTO);\n \n         final SyncPolicy policy =\n-                (SyncPolicy) policyDataBinder.getPolicy(policyMod);\n+                (SyncPolicy) policyDataBinder.getPolicy(policyTO);\n \n         final Policy actual = update(policy);\n         return (SyncPolicyTO) policyDataBinder.getPolicyTO(actual);\n@@ -162,7 +159,7 @@ public List<PolicyTO> listByType(\n             @PathVariable(\"kind\") final String kind) {\n \n         LOG.debug(\"Listing policies\");\n-        List<Policy> policies =\n+        List<? extends Policy> policies =\n                 policyDAO.find(PolicyType.valueOf(kind.toUpperCase()));\n \n         final List<PolicyTO> policyTOs = new ArrayList<PolicyTO>();\n@@ -181,8 +178,7 @@ public PasswordPolicyTO getGlobalPasswordPolicy(\n             throws NotFoundException {\n \n         LOG.debug(\"Reading password policy\");\n-        Policy policy = policyDAO.getGlobalPasswordPolicy();\n-\n+        PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No password policy found\");\n         }\n@@ -197,8 +193,7 @@ public AccountPolicyTO getGlobalAccountPolicy(\n             throws NotFoundException {\n \n         LOG.debug(\"Reading account policy\");\n-        Policy policy = policyDAO.getGlobalAccountPolicy();\n-\n+        AccountPolicy policy = policyDAO.getGlobalAccountPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No account policy found\");\n         }\n@@ -213,8 +208,7 @@ public SyncPolicyTO getGlobalSyncPolicy(\n             throws NotFoundException {\n \n         LOG.debug(\"Reading sync policy\");\n-        Policy policy = policyDAO.getGlobalSyncPolicy();\n-\n+        SyncPolicy policy = policyDAO.getGlobalSyncPolicy();\n         if (policy == null) {\n             throw new NotFoundException(\"No sync policy found\");\n         }"},{"sha":"bde2358715d7fb86cd8cd530e52263d96f52b20b","filename":"core/src/main/java/org/syncope/core/rest/data/PolicyDataBinder.java","status":"modified","additions":42,"deletions":59,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FPolicyDataBinder.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -14,13 +14,7 @@\n  */\n package org.syncope.core.rest.data;\n \n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.mod.AccountPolicyMod;\n-import org.syncope.client.mod.PasswordPolicyMod;\n-import org.syncope.client.mod.PolicyMod;\n-import org.syncope.client.mod.SyncPolicyMod;\n import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n@@ -36,35 +30,47 @@\n @Component\n public class PolicyDataBinder {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(\n-            PolicyDataBinder.class);\n-\n     /**\n      * Get policy TO from policy bean.\n      * @param policy bean.\n      * @return policy TO.\n      */\n-    public PolicyTO getPolicyTO(Policy policy) {\n-\n+    public PolicyTO getPolicyTO(final Policy policy) {\n         final PolicyTO policyTO;\n \n         if (policy != null) {\n             switch (policy.getType()) {\n                 case GLOBAL_PASSWORD:\n+                    policyTO = new PasswordPolicyTO(true);\n+                    ((PasswordPolicyTO) policyTO).setSpecification(\n+                            (PasswordPolicySpec) policy.getSpecification());\n+                    break;\n+\n                 case PASSWORD:\n                     policyTO = new PasswordPolicyTO();\n                     ((PasswordPolicyTO) policyTO).setSpecification(\n                             (PasswordPolicySpec) policy.getSpecification());\n                     break;\n+\n                 case GLOBAL_ACCOUNT:\n+                    policyTO = new AccountPolicyTO(true);\n+                    ((AccountPolicyTO) policyTO).setSpecification(\n+                            (AccountPolicySpec) policy.getSpecification());\n+                    break;\n+\n                 case ACCOUNT:\n                     policyTO = new AccountPolicyTO();\n                     ((AccountPolicyTO) policyTO).setSpecification(\n                             (AccountPolicySpec) policy.getSpecification());\n                     break;\n+\n+                case GLOBAL_SYNC:\n+                    policyTO = new SyncPolicyTO(true);\n+                    ((SyncPolicyTO) policyTO).setSpecification(\n+                            (SyncPolicySpec) policy.getSpecification());\n+                    break;\n+\n+                case SYNC:\n                 default:\n                     policyTO = new SyncPolicyTO();\n                     ((SyncPolicyTO) policyTO).setSpecification(\n@@ -73,7 +79,6 @@ public PolicyTO getPolicyTO(Policy policy) {\n             }\n \n             policyTO.setId(policy.getId());\n-            policyTO.setType(policy.getType());\n             policyTO.setDescription(policy.getDescription());\n         } else {\n             policyTO = null;\n@@ -84,75 +89,53 @@ public PolicyTO getPolicyTO(Policy policy) {\n \n     /**\n      * Get policy bean from policy TO.\n-     * @param policy TO.\n-     * @return policy bean.\n+     * @param policyTO TO\n+     * @return policy bean\n      */\n-    public Policy getPolicy(PolicyTO policyTO) {\n-\n+    public Policy getPolicy(final PolicyTO policyTO) {\n         final Policy policy;\n \n         if (policyTO != null) {\n             switch (policyTO.getType()) {\n                 case GLOBAL_PASSWORD:\n+                    policy = new PasswordPolicy(true);\n+                    policy.setSpecification(\n+                            ((PasswordPolicyTO) policyTO).getSpecification());\n+                    break;\n+\n                 case PASSWORD:\n                     policy = new PasswordPolicy();\n                     policy.setSpecification(\n                             ((PasswordPolicyTO) policyTO).getSpecification());\n                     break;\n+\n                 case GLOBAL_ACCOUNT:\n-                case ACCOUNT:\n-                    policy = new AccountPolicy();\n+                    policy = new AccountPolicy(true);\n                     policy.setSpecification(\n                             ((AccountPolicyTO) policyTO).getSpecification());\n                     break;\n-                default:\n-                    policy = new SyncPolicy();\n-                    policy.setSpecification(\n-                            ((SyncPolicyTO) policyTO).getSpecification());\n-            }\n-\n-            policy.setId(policyTO.getId());\n-            policy.setType(policyTO.getType());\n-            policy.setDescription(policyTO.getDescription());\n-        } else {\n-            policy = null;\n-        }\n-\n-        return policy;\n-    }\n-\n-    /**\n-     * Get policy bean from policy mod.\n-     * @param policy mod.\n-     * @return policy bean.\n-     */\n-    public Policy getPolicy(PolicyMod policyMod) {\n-\n-        final Policy policy;\n \n-        if (policyMod != null) {\n-            switch (policyMod.getType()) {\n-                case GLOBAL_PASSWORD:\n-                case PASSWORD:\n-                    policy = new PasswordPolicy();\n-                    policy.setSpecification(\n-                            ((PasswordPolicyMod) policyMod).getSpecification());\n-                    break;\n-                case GLOBAL_ACCOUNT:\n                 case ACCOUNT:\n                     policy = new AccountPolicy();\n                     policy.setSpecification(\n-                            ((AccountPolicyMod) policyMod).getSpecification());\n+                            ((AccountPolicyTO) policyTO).getSpecification());\n                     break;\n+\n+                case GLOBAL_SYNC:\n+                    policy = new SyncPolicy(true);\n+                    policy.setSpecification(\n+                            ((SyncPolicyTO) policyTO).getSpecification());\n+                    break;\n+\n+                case SYNC:\n                 default:\n                     policy = new SyncPolicy();\n                     policy.setSpecification(\n-                            ((SyncPolicyMod) policyMod).getSpecification());\n+                            ((SyncPolicyTO) policyTO).getSpecification());\n             }\n \n-            policy.setId(policyMod.getId());\n-            policy.setType(policyMod.getType());\n-            policy.setDescription(policyMod.getDescription());\n+            policy.setId(policyTO.getId());\n+            policy.setDescription(policyTO.getDescription());\n         } else {\n             policy = null;\n         }"},{"sha":"01878c412d2e2958cfae01a27015831b548a005f","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":106,"deletions":101,"changes":207,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -205,9 +205,6 @@ private UserTO getUserTO(final ConnectorObject obj) {\n                 attribute = obj.getAttributeByName(mapping.getExtAttrName());\n             }\n \n-            List<Object> values = attribute == null\n-                    ? Collections.EMPTY_LIST : attribute.getValue();\n-\n             AttributeTO attributeTO;\n             switch (mapping.getIntMappingType()) {\n                 case SyncopeUserId:\n@@ -227,7 +224,9 @@ private UserTO getUserTO(final ConnectorObject obj) {\n                 case UserSchema:\n                     attributeTO = new AttributeTO();\n                     attributeTO.setSchema(mapping.getIntAttrName());\n-                    for (Object value : values) {\n+                    for (Object value : attribute == null\n+                            ? Collections.EMPTY_LIST : attribute.getValue()) {\n+\n                         attributeTO.addValue(value.toString());\n                     }\n                     userTO.addAttribute(attributeTO);\n@@ -357,9 +356,6 @@ private List<SyncopeUser> findExistingUsers(final SyncDelta delta) {\n                 ? delta.getUid().getUidValue()\n                 : delta.getPreviousUid().getUidValue();\n \n-        final SchemaMapping accountIdMap =\n-                ((SyncTask) this.task).getResource().getAccountIdMapping();\n-\n         // ---------------------------------\n         // Get sync policy specification\n         // ---------------------------------\n@@ -372,123 +368,132 @@ private List<SyncopeUser> findExistingUsers(final SyncDelta delta) {\n \n         final List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n \n-        try {\n-            if (policySpec != null\n-                    && policySpec.getAlternativeSearchAttrs() != null\n-                    && !policySpec.getAlternativeSearchAttrs().isEmpty()) {\n+        if (policySpec != null\n+                && !policySpec.getAlternativeSearchAttrs().isEmpty()) {\n \n-                // search external attribute name/value \n-                // about each specified name\n-                final ConnectorObject object = delta.getObject();\n+            // search external attribute name/value \n+            // about each specified name\n+            final ConnectorObject object = delta.getObject();\n \n-                final Map<String, Attribute> extValues =\n-                        new HashMap<String, Attribute>();\n+            final Map<String, Attribute> extValues =\n+                    new HashMap<String, Attribute>();\n \n-                for (SchemaMapping mapping :\n-                        ((SyncTask) this.task).getResource().getMappings()) {\n+            for (SchemaMapping mapping :\n+                    ((SyncTask) this.task).getResource().getMappings()) {\n \n-                    String key;\n-                    switch (mapping.getIntMappingType()) {\n-                        case SyncopeUserId:\n-                            key = \"id\";\n-                            break;\n-                        case Username:\n-                            key = \"username\";\n-                            break;\n-                        case Password:\n-                            key = \"password\";\n-                            break;\n-                        default:\n-                            key = mapping.getIntAttrName();\n-                    }\n+                String key;\n+                switch (mapping.getIntMappingType()) {\n+                    case SyncopeUserId:\n+                        key = \"id\";\n+                        break;\n \n-                    extValues.put(key, object.getAttributeByName(\n-                            mapping.getExtAttrName()));\n+                    case Username:\n+                        key = \"username\";\n+                        break;\n+\n+                    case Password:\n+                        key = \"password\";\n+                        break;\n+\n+                    default:\n+                        key = mapping.getIntAttrName();\n                 }\n \n-                // search user by attributes specified into the policy\n-                NodeCond searchCondition = null;\n+                extValues.put(key, object.getAttributeByName(\n+                        mapping.getExtAttrName()));\n+            }\n+\n+            // search user by attributes specified into the policy\n+            NodeCond searchCondition = null;\n \n-                for (String schema : policySpec.getAlternativeSearchAttrs()) {\n-                    Attribute value = extValues.get(schema);\n+            for (String schema : policySpec.getAlternativeSearchAttrs()) {\n+                Attribute value = extValues.get(schema);\n \n-                    AttributeCond.Type type;\n-                    String expression = null;\n+                AttributeCond.Type type;\n+                String expression = null;\n \n-                    if (value == null\n-                            || value.getValue() == null\n-                            || value.getValue().isEmpty()) {\n-                        type = AttributeCond.Type.ISNULL;\n-                    } else {\n-                        type = AttributeCond.Type.EQ;\n-                        expression = value.getValue().size() > 1\n-                                ? value.getValue().toString()\n-                                : value.getValue().get(0).toString();\n-                    }\n+                if (value == null\n+                        || value.getValue() == null\n+                        || value.getValue().isEmpty()) {\n \n-                    NodeCond nodeCond;\n+                    type = AttributeCond.Type.ISNULL;\n+                } else {\n+                    type = AttributeCond.Type.EQ;\n+                    expression = value.getValue().size() > 1\n+                            ? value.getValue().toString()\n+                            : value.getValue().get(0).toString();\n+                }\n \n-                    // just Username or SyncopeUserId can be selected to be used\n-                    if (\"id\".equalsIgnoreCase(schema)\n-                            || \"username\".equalsIgnoreCase(schema)) {\n+                NodeCond nodeCond;\n \n-                        final SyncopeUserCond cond = new SyncopeUserCond();\n-                        cond.setSchema(schema);\n-                        cond.setType(type);\n-                        cond.setExpression(expression);\n+                // just Username or SyncopeUserId can be selected to be used\n+                if (\"id\".equalsIgnoreCase(schema)\n+                        || \"username\".equalsIgnoreCase(schema)) {\n \n-                        nodeCond = NodeCond.getLeafCond((SyncopeUserCond) cond);\n+                    final SyncopeUserCond cond = new SyncopeUserCond();\n+                    cond.setSchema(schema);\n+                    cond.setType(type);\n+                    cond.setExpression(expression);\n \n-                    } else {\n-                        final AttributeCond cond = new AttributeCond();\n-                        cond.setSchema(schema);\n-                        cond.setType(type);\n-                        cond.setExpression(expression);\n+                    nodeCond = NodeCond.getLeafCond(cond);\n \n-                        nodeCond = NodeCond.getLeafCond(cond);\n-                    }\n+                } else {\n+                    final AttributeCond cond = new AttributeCond();\n+                    cond.setSchema(schema);\n+                    cond.setType(type);\n+                    cond.setExpression(expression);\n \n-                    searchCondition = searchCondition != null\n-                            ? NodeCond.getAndCond(searchCondition, nodeCond)\n-                            : nodeCond;\n+                    nodeCond = NodeCond.getLeafCond(cond);\n                 }\n \n-                result.addAll(userSearchDAO.search(\n-                        EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n-                        searchCondition));\n-            } else {\n-                final SyncopeUser user;\n+                searchCondition = searchCondition != null\n+                        ? NodeCond.getAndCond(searchCondition, nodeCond)\n+                        : nodeCond;\n+            }\n \n-                switch (accountIdMap.getIntMappingType()) {\n-                    case Username:\n-                        user = userDAO.find(uid);\n-                        if (user != null) {\n-                            result.add(user);\n-                        }\n-                        break;\n-                    case SyncopeUserId:\n-                        user = userDAO.find(Long.parseLong(uid));\n-                        if (user != null) {\n-                            result.add(user);\n-                        }\n-                        break;\n-                    case UserSchema:\n-                        final UAttrValue value = new UAttrValue();\n-                        value.setStringValue(uid);\n-                        result.addAll(userDAO.findByAttrValue(\n-                                accountIdMap.getIntAttrName(), value));\n-                        break;\n-                    case UserDerivedSchema:\n+            result.addAll(userSearchDAO.search(\n+                    EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                    searchCondition));\n+        } else {\n+            final SyncopeUser user;\n+\n+            final SchemaMapping accountIdMap = ((SyncTask) this.task).\n+                    getResource().getAccountIdMapping();\n+            switch (accountIdMap.getIntMappingType()) {\n+                case Username:\n+                    user = userDAO.find(uid);\n+                    if (user != null) {\n+                        result.add(user);\n+                    }\n+                    break;\n+\n+                case SyncopeUserId:\n+                    user = userDAO.find(Long.parseLong(uid));\n+                    if (user != null) {\n+                        result.add(user);\n+                    }\n+                    break;\n+\n+                case UserSchema:\n+                    final UAttrValue value = new UAttrValue();\n+                    value.setStringValue(uid);\n+                    result.addAll(userDAO.findByAttrValue(\n+                            accountIdMap.getIntAttrName(), value));\n+                    break;\n+\n+                case UserDerivedSchema:\n+                    try {\n                         result.addAll(userDAO.findByDerAttrValue(\n                                 accountIdMap.getIntAttrName(), uid));\n-                        break;\n-                    default:\n-                        LOG.error(\"Invalid accountId type '{}'\",\n-                                accountIdMap.getIntMappingType());\n-                }\n+                    } catch (InvalidSearchConditionException e) {\n+                        LOG.error(\"Could not search for matching users\", e);\n+                    }\n+                    break;\n+\n+                default:\n+                    LOG.error(\"Invalid accountId type '{}'\",\n+                            accountIdMap.getIntMappingType());\n             }\n-        } catch (InvalidSearchConditionException e) {\n-            LOG.error(\"Could not search for matching users\", e);\n         }\n \n         return result;"},{"sha":"427eebb95bbdf60db48fe7cfc1da61c3af1260f6","filename":"core/src/test/java/org/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -14,14 +14,17 @@\n  */\n package org.syncope.core.persistence.dao;\n \n-import java.util.List;\n import static org.junit.Assert.*;\n+\n+import java.util.List;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.AbstractTest;\n+import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.PolicyType;\n import org.syncope.types.PasswordPolicySpec;\n@@ -48,20 +51,21 @@ public final void findById() {\n \n     @Test\n     public final void findByType() {\n-        List<Policy> policies = policyDAO.find(PolicyType.SYNC);\n+        List<? extends Policy> policies = policyDAO.find(PolicyType.SYNC);\n         assertNotNull(\"findById did not work\", policies);\n         assertFalse(policies.isEmpty());\n     }\n \n     @Test\n     public final void findGlobalPasswordPolicy() {\n-        Policy policy = policyDAO.getGlobalPasswordPolicy();\n+        PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n         assertNotNull(\"findById did not work\", policy);\n \n         assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n \n         assertEquals(\"invalid policy values\",\n-                8, ((PasswordPolicySpec) policy.getSpecification()).getMinLength());\n+                8,\n+                ((PasswordPolicySpec) policy.getSpecification()).getMinLength());\n     }\n \n     @Test\n@@ -72,9 +76,8 @@ public final void saveInvalidPolicy() {\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n \n-        Policy policy = new Policy();\n+        SyncPolicy policy = new SyncPolicy();\n         policy.setSpecification(passwordPolicy);\n-        policy.setType(PolicyType.SYNC);\n         policy.setDescription(\"sync policy\");\n \n         policyDAO.save(policy);\n@@ -83,23 +86,20 @@ public final void saveInvalidPolicy() {\n     @Test\n     @ExpectedException(value = InvalidEntityException.class)\n     public final void saveSecondPasswordPolicy() {\n-\n         PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n         passwordPolicy.setMaxLength(8);\n         passwordPolicy.setMinLength(6);\n \n-        Policy policy = new Policy();\n+        PasswordPolicy policy = new PasswordPolicy(true);\n         policy.setSpecification(passwordPolicy);\n-        policy.setType(PolicyType.GLOBAL_PASSWORD);\n         policy.setDescription(\"global password policy\");\n \n         policyDAO.save(policy);\n     }\n \n     @Test\n     public final void create() {\n-        Policy policy = new Policy();\n-        policy.setType(PolicyType.SYNC);\n+        SyncPolicy policy = new SyncPolicy();\n         policy.setSpecification(new SyncPolicySpec());\n         policy.setDescription(\"Sync policy\");\n \n@@ -124,9 +124,11 @@ public final void update() {\n         assertNotNull(policy);\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policy.getType());\n         assertEquals(\n-                ((PasswordPolicySpec) policy.getSpecification()).getMaxLength(), 8);\n+                ((PasswordPolicySpec) policy.getSpecification()).getMaxLength(),\n+                8);\n         assertEquals(\n-                ((PasswordPolicySpec) policy.getSpecification()).getMinLength(), 6);\n+                ((PasswordPolicySpec) policy.getSpecification()).getMinLength(),\n+                6);\n     }\n \n     @Test"},{"sha":"f6cdc559edf05a9567f184ab77e430787c3eca46","filename":"core/src/test/java/org/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":25,"deletions":33,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -14,13 +14,12 @@\n  */\n package org.syncope.core.rest;\n \n-import java.util.Arrays;\n import static org.junit.Assert.*;\n \n+import java.util.Arrays;\n import java.util.List;\n import org.junit.Test;\n import org.springframework.test.annotation.ExpectedException;\n-import org.syncope.client.mod.PasswordPolicyMod;\n import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n@@ -53,12 +52,13 @@ public final void read() {\n     @Test\n     public final void getGlobalPasswordPolicy() {\n         PasswordPolicyTO policyTO = restTemplate.getForObject(\n-                BASE_URL + \"policy/password/global/read\", PasswordPolicyTO.class);\n+                BASE_URL + \"policy/password/global/read\",\n+                PasswordPolicyTO.class);\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n-        assertEquals(8,\n-                ((PasswordPolicySpec) policyTO.getSpecification()).getMinLength());\n+        assertEquals(8, ((PasswordPolicySpec) policyTO.getSpecification()).\n+                getMinLength());\n     }\n \n     @Test\n@@ -74,9 +74,8 @@ public final void getGlobalAccountPolicy() {\n     @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public final void createWithException() {\n \n-        PasswordPolicyTO policy = new PasswordPolicyTO();\n+        PasswordPolicyTO policy = new PasswordPolicyTO(true);\n         policy.setSpecification(new PasswordPolicySpec());\n-        policy.setType(PolicyType.GLOBAL_PASSWORD);\n         policy.setDescription(\"global password policy\");\n \n         restTemplate.postForObject(\n@@ -90,7 +89,6 @@ public final void createMissingDescription() {\n \n         SyncPolicyTO policy = new SyncPolicyTO();\n         policy.setSpecification(new SyncPolicySpec());\n-        policy.setType(PolicyType.SYNC);\n \n         restTemplate.postForObject(\n                 BASE_URL + \"policy/sync/create\",\n@@ -101,7 +99,6 @@ public final void createMissingDescription() {\n     public final void create() {\n         SyncPolicyTO policy = new SyncPolicyTO();\n         policy.setSpecification(new SyncPolicySpec());\n-        policy.setType(PolicyType.SYNC);\n         policy.setDescription(\"Sync policy\");\n \n         SyncPolicyTO policyTO = restTemplate.postForObject(\n@@ -114,45 +111,40 @@ public final void create() {\n     @Test\n     public final void update() {\n         // get global password\n-        PasswordPolicyTO policyTO = restTemplate.getForObject(\n+        PasswordPolicyTO globalPolicy = restTemplate.getForObject(\n                 BASE_URL + \"policy/read/{id}\", PasswordPolicyTO.class, 2L);\n \n-        policyTO.setType(PolicyType.PASSWORD);\n-        policyTO.setId(0);\n+        PasswordPolicyTO policy = new PasswordPolicyTO();\n+        policy.setDescription(\"A simple password policy\");\n+        policy.setSpecification(globalPolicy.getSpecification());\n \n         // create a new password policy using global password as a template\n-        policyTO = restTemplate.postForObject(\n+        policy = restTemplate.postForObject(\n                 BASE_URL + \"policy/password/create\",\n-                policyTO, PasswordPolicyTO.class);\n+                policy, PasswordPolicyTO.class);\n \n         // read new password policy\n-        policyTO = restTemplate.getForObject(\n+        policy = restTemplate.getForObject(\n                 BASE_URL + \"policy/read/{id}\",\n-                PasswordPolicyTO.class, policyTO.getId());\n-\n-        assertNotNull(\"find to update did not work\", policyTO);\n+                PasswordPolicyTO.class, policy.getId());\n \n-        PasswordPolicySpec policy =\n-                ((PasswordPolicyTO) policyTO).getSpecification();\n-        policy.setMaxLength(22);\n+        assertNotNull(\"find to update did not work\", policy);\n \n-        PasswordPolicyMod policyMod = new PasswordPolicyMod();\n-        policyMod.setId(policyTO.getId());\n-        policyMod.setType(PolicyType.PASSWORD);\n-        policyMod.setSpecification(policy);\n-        policyMod.setDescription(policyTO.getDescription());\n+        PasswordPolicySpec policySpec =\n+                ((PasswordPolicyTO) policy).getSpecification();\n+        policySpec.setMaxLength(22);\n+        policy.setSpecification(policySpec);\n \n         // update new password policy\n-        policyTO = restTemplate.postForObject(\n-                BASE_URL + \"policy/password/update\",\n-                policyMod, PasswordPolicyTO.class);\n+        policy = restTemplate.postForObject(BASE_URL + \"policy/password/update\",\n+                policy, PasswordPolicyTO.class);\n \n-        assertNotNull(policyTO);\n-        assertEquals(PolicyType.PASSWORD, policyTO.getType());\n+        assertNotNull(policy);\n+        assertEquals(PolicyType.PASSWORD, policy.getType());\n         assertEquals(22,\n-                ((PasswordPolicyTO) policyTO).getSpecification().getMaxLength());\n+                ((PasswordPolicyTO) policy).getSpecification().getMaxLength());\n         assertEquals(8,\n-                ((PasswordPolicyTO) policyTO).getSpecification().getMinLength());\n+                ((PasswordPolicyTO) policy).getSpecification().getMinLength());\n     }\n \n     @Test"},{"sha":"24a0781d75b83143ac4cb4402c2962f7fc8a60db","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6139e533eecfb3bee60872a8cc778d40b2e5e762/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6139e533eecfb3bee60872a8cc778d40b2e5e762/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=6139e533eecfb3bee60872a8cc778d40b2e5e762","patch":"@@ -101,7 +101,7 @@\n         <hibernate-validator.version>4.2.0.Final</hibernate-validator.version>\n         <ehcache.version>2.4.6</ehcache.version>\n \n-        <wicket.version>1.5.2</wicket.version>\n+        <wicket.version>1.5.3</wicket.version>\n \n         <groovy.version>1.8.4</groovy.version>\n "}]}