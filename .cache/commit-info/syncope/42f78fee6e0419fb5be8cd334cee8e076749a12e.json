{"sha":"42f78fee6e0419fb5be8cd334cee8e076749a12e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQyZjc4ZmVlNmUwNDE5ZmI1YmU4Y2QzMzRjZWU4ZTA3Njc0OWExMmU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-03T11:06:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-03T11:06:14Z"},"message":"[SYNCOPE-620] IT for Camel: success","tree":{"sha":"0d881aceba7f8edb15debaa469c97c59c5c3d7ff","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0d881aceba7f8edb15debaa469c97c59c5c3d7ff"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/42f78fee6e0419fb5be8cd334cee8e076749a12e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/42f78fee6e0419fb5be8cd334cee8e076749a12e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/42f78fee6e0419fb5be8cd334cee8e076749a12e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/42f78fee6e0419fb5be8cd334cee8e076749a12e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c7e819311b287f47ed90852871dce6f01cee57f8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7e819311b287f47ed90852871dce6f01cee57f8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c7e819311b287f47ed90852871dce6f01cee57f8"}],"stats":{"total":1858,"additions":1580,"deletions":278},"files":[{"sha":"cdd6dbca8bf9cf3ffbc088eea6384478286818a0","filename":"syncope620/common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SyncopeService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fcommon%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSyncopeService.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -28,6 +28,6 @@\n public interface SyncopeService extends JAXRSService {\n \n     @GET\n-    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON, MediaType.APPLICATION_XHTML_XML })\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     SyncopeTO info();\n }"},{"sha":"1b131663835e413b4f6b526c3ef30be22245ac5a","filename":"syncope620/ext/camel/logic/src/main/java/org/apache/syncope/server/logic/CamelRouteLogic.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2FCamelRouteLogic.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -77,7 +77,12 @@ public void update(final CamelRouteTO routeTO) {\n         LOG.debug(\"Updating route {} with content {}\", routeTO.getKey(), routeTO.getContent());\n         binder.update(route, routeTO);\n \n-        context.reloadContext(routeTO.getKey());\n+        context.updateContext(routeTO.getKey());\n+    }\n+\n+    @PreAuthorize(\"hasRole('ROUTE_UPDATE')\")\n+    public void restartContext() {\n+        context.restartContext();\n     }\n \n     @Override"},{"sha":"a7f24a75b82975278c9992d987e77f03753ffa8b","filename":"syncope620/ext/camel/logic/src/main/java/org/apache/syncope/server/logic/init/CamelRouteLoader.java","status":"modified","additions":17,"deletions":25,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Flogic%2Finit%2FCamelRouteLoader.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -22,8 +22,6 @@\n import java.util.List;\n import java.util.Map;\n import javax.sql.DataSource;\n-import javax.xml.parsers.DocumentBuilderFactory;\n-import javax.xml.transform.TransformerFactory;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.server.persistence.api.SyncopeLoader;\n@@ -52,10 +50,6 @@ public class CamelRouteLoader implements SyncopeLoader {\n \n     private static final Logger LOG = LoggerFactory.getLogger(CamelRouteLoader.class);\n \n-    private static final DocumentBuilderFactory DOC_FACTORY = DocumentBuilderFactory.newInstance();\n-\n-    private static final TransformerFactory T_FACTORY = TransformerFactory.newInstance();\n-\n     @javax.annotation.Resource(name = \"userRoutes\")\n     private ResourceWithFallbackLoader userRoutesLoader;\n \n@@ -68,8 +62,6 @@ public class CamelRouteLoader implements SyncopeLoader {\n     @Autowired\n     private CamelEntityFactory entityFactory;\n \n-    private int size = 0;\n-\n     private boolean loaded = false;\n \n     @Override\n@@ -89,18 +81,19 @@ public void load() {\n         }\n     }\n \n-    private boolean routesAvailable(final SubjectType subject) {\n-        final String sql = String.format(\"SELECT * FROM %s WHERE SUBJECT = ?\", CamelRoute.class.getSimpleName());\n+    private boolean loadRoutesFor(final SubjectType subject) {\n+        final String sql = String.format(\"SELECT * FROM %s WHERE SUBJECTTYPE = ?\", CamelRoute.class.getSimpleName());\n         final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n         final List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql, new Object[] { subject.name() });\n-        return !rows.isEmpty();\n+        return rows.isEmpty();\n     }\n \n-    private String nodeToString(final Node content, final DOMImplementationLS impl) {\n+    private String nodeToString(final Node content, final DOMImplementationLS domImpl) {\n         StringWriter writer = new StringWriter();\n         try {\n-            LSSerializer serializer = impl.createLSSerializer();\n-            LSOutput lso = impl.createLSOutput();\n+            LSSerializer serializer = domImpl.createLSSerializer();\n+            serializer.getDomConfig().setParameter(\"xml-declaration\", false);\n+            LSOutput lso = domImpl.createLSOutput();\n             lso.setCharacterStream(writer);\n             serializer.write(content, lso);\n         } catch (Exception e) {\n@@ -110,8 +103,8 @@ private String nodeToString(final Node content, final DOMImplementationLS impl)\n     }\n \n     private void loadRoutes(final Resource resource, final SubjectType subjectType) {\n-        if (routesAvailable(subjectType)) {\n-            String query = String.format(\"INSERT INTO %s(NAME, SUBJECT, ROUTECONTENT) VALUES (?, ?, ?, ?)\",\n+        if (loadRoutesFor(subjectType)) {\n+            String query = String.format(\"INSERT INTO %s(NAME, SUBJECTTYPE, CONTENT) VALUES (?, ?, ?)\",\n                     CamelRoute.class.getSimpleName());\n             JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n \n@@ -123,20 +116,19 @@ private void loadRoutes(final Resource resource, final SubjectType subjectType)\n \n                 LSParser parser = domImpl.createLSParser(DOMImplementationLS.MODE_SYNCHRONOUS, null);\n \n-                NodeList routeNodes = parser.parse(lsinput).getElementsByTagName(\"route\");\n+                NodeList routeNodes = parser.parse(lsinput).getDocumentElement().getElementsByTagName(\"route\");\n                 for (int s = 0; s < routeNodes.getLength(); s++) {\n                     Node routeElement = routeNodes.item(s);\n                     String routeContent = nodeToString(routeNodes.item(s), domImpl);\n+                    String routeId = ((Element) routeElement).getAttribute(\"id\");\n \n-                    //crate an instance of CamelRoute Entity\n                     CamelRoute route = entityFactory.newCamelRoute();\n                     route.setSubjectType(subjectType);\n-                    route.setKey(((Element) routeElement).getAttribute(\"id\"));\n+                    route.setKey(routeId);\n                     route.setContent(routeContent);\n \n-                    jdbcTemplate.update(query, new Object[] {\n-                        ((Element) routeElement).getAttribute(\"id\"), subjectType.name(), routeContent });\n-                    LOG.debug(\"Route {} successfully loaded\", ((Element) routeElement).getAttribute(\"id\"));\n+                    jdbcTemplate.update(query, new Object[] { routeId, subjectType.name(), routeContent });\n+                    LOG.debug(\"Route {} successfully loaded\", routeId);\n                 }\n             } catch (DataAccessException e) {\n                 LOG.error(\"While trying to store queries {}\", e);\n@@ -148,8 +140,8 @@ private void loadRoutes(final Resource resource, final SubjectType subjectType)\n \n     private void loadEntitlements() {\n         final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-        jdbcTemplate.update(\"INSERT INTO Entitlement VALUES('ROUTE_READ')\");\n-        jdbcTemplate.update(\"INSERT INTO Entitlement VALUES('ROUTE_LIST')\");\n-        jdbcTemplate.update(\"INSERT INTO Entitlement VALUES('ROUTE_UPDATE')\");\n+        jdbcTemplate.update(\"INSERT INTO Entitlement(NAME) VALUES('ROUTE_READ')\");\n+        jdbcTemplate.update(\"INSERT INTO Entitlement(NAME) VALUES('ROUTE_LIST')\");\n+        jdbcTemplate.update(\"INSERT INTO Entitlement(NAME) VALUES('ROUTE_UPDATE')\");\n     }\n }"},{"sha":"6b5fcb271a272a217f564bd107f0a87cdbc84ece","filename":"syncope620/ext/camel/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/dao/JPACamelRouteDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fdao%2FJPACamelRouteDAO.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -33,7 +33,7 @@ public class JPACamelRouteDAO extends AbstractDAO<CamelRoute, String> implements\n \n     @Override\n     public CamelRoute find(final String key) {\n-        return entityManager.find(CamelRoute.class, key);\n+        return entityManager.find(JPACamelRoute.class, key);\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"2606305546cb496fb1d072035d7cafe5efe9457d","filename":"syncope620/ext/camel/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/entity/JPACamelRoute.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fentity%2FJPACamelRoute.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -41,7 +41,7 @@ public class JPACamelRoute extends AbstractEntity<String> implements CamelRoute\n \n     @NotNull\n     @Enumerated(EnumType.STRING)\n-    private SubjectType subject;\n+    private SubjectType subjectType;\n \n     @Lob\n     private String content;\n@@ -58,12 +58,12 @@ public void setKey(final String name) {\n \n     @Override\n     public SubjectType getSubjectType() {\n-        return subject;\n+        return subjectType;\n     }\n \n     @Override\n-    public void setSubjectType(final SubjectType subject) {\n-        this.subject = subject;\n+    public void setSubjectType(final SubjectType subjectType) {\n+        this.subjectType = subjectType;\n     }\n \n     @Override"},{"sha":"843e81754095c8b20a61497185b67948a203f63c","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/AbstractCamelProvisioningManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FAbstractCamelProvisioningManager.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -37,7 +37,7 @@\n \n abstract class AbstractCamelProvisioningManager {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(CamelUserProvisioningManager.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(AbstractCamelProvisioningManager.class);\n \n     @Autowired\n     protected CamelRouteDAO routeDAO;"},{"sha":"73703f14bcc31c2fb3133ee22b1c4b4b23ea8c55","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/CamelRoleProvisioningManager.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelRoleProvisioningManager.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -42,13 +42,13 @@ public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO subject) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO roleTO, final Set<String> excludedResources) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:createRolePort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n \n         sendMessage(\"direct:createRole\", roleTO, props);\n \n-        String uri = \"direct:createRolePort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -63,14 +63,14 @@ public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO roleTO, fina\n     public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO roleTO, final Map<Long, String> roleOwnerMap,\n             final Set<String> excludedResources) throws PropagationException {\n \n+        PollingConsumer pollingConsumer = getConsumer(\"direct:createRoleInSyncPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"roleOwnerMap\", roleOwnerMap);\n         props.put(\"excludedResources\", excludedResources);\n \n-        sendMessage(\"direct:createRoleSync\", roleTO, props);\n+        sendMessage(\"direct:createRoleInSync\", roleTO, props);\n \n-        String uri = \"direct:createRoleSyncPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -90,13 +90,13 @@ public Map.Entry<Long, List<PropagationStatus>> update(final RoleMod subjectMod)\n     public Map.Entry<Long, List<PropagationStatus>> update(\n             final RoleMod subjectMod, final Set<String> excludedResources) {\n \n+        PollingConsumer pollingConsumer = getConsumer(\"direct:updateRolePort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n \n         sendMessage(\"direct:updateRole\", subjectMod, props);\n \n-        String uri = \"direct:updateRolePort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -109,10 +109,10 @@ public Map.Entry<Long, List<PropagationStatus>> update(\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<PropagationStatus> delete(final Long roleKey) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:deleteRolePort\");\n+\n         sendMessage(\"direct:deleteRole\", roleKey);\n \n-        String uri = \"direct:deleteRolePort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -124,10 +124,10 @@ public List<PropagationStatus> delete(final Long roleKey) {\n \n     @Override\n     public Long unlink(final RoleMod roleMod) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkRolePort\");\n+\n         sendMessage(\"direct:unlinkRole\", roleMod);\n \n-        String uri = \"direct:unlinkRolePort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -139,10 +139,10 @@ public Long unlink(final RoleMod roleMod) {\n \n     @Override\n     public Long link(final RoleMod roleMod) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:linkRolePort\");\n+\n         sendMessage(\"direct:linkRole\", roleMod);\n \n-        String uri = \"direct:linkRolePort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -155,13 +155,13 @@ public Long link(final RoleMod roleMod) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<PropagationStatus> deprovision(final Long roleKey, Collection<String> resources) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionRolePort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"resources\", resources);\n \n         sendMessage(\"direct:deprovisionRole\", roleKey, props);\n \n-        String uri = \"direct:deprovisionRolePort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {"},{"sha":"2c5afc567355a3df85ecf89523e7610c918ad085","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/CamelUserProvisioningManager.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FCamelUserProvisioningManager.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -59,6 +59,8 @@ public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, bool\n     public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, final boolean storePassword,\n             boolean disablePwdPolicyCheck, Boolean enabled, Set<String> excludedResources) {\n \n+        PollingConsumer pollingConsumer = getConsumer(\"direct:createPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"storePassword\", storePassword);\n         props.put(\"disablePwdPolicyCheck\", disablePwdPolicyCheck);\n@@ -67,8 +69,6 @@ public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, fina\n \n         sendMessage(\"direct:createUser\", userTO, props);\n \n-        String uri = \"direct:createPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -86,13 +86,13 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map.Entry<Long, List<PropagationStatus>> update(UserMod userMod, boolean removeMemberships) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:updatePort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"removeMemberships\", removeMemberships);\n \n         sendMessage(\"direct:updateUser\", userMod, props);\n \n-        String uri = \"direct:updatePort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -110,13 +110,13 @@ public List<PropagationStatus> delete(final Long userKey) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<PropagationStatus> delete(final Long userKey, final Set<String> excludedResources) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:deletePort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"excludedResources\", excludedResources);\n \n         sendMessage(\"direct:deleteUser\", userKey, props);\n \n-        String uri = \"direct:deletePort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -128,10 +128,10 @@ public List<PropagationStatus> delete(final Long userKey, final Set<String> excl\n \n     @Override\n     public Long unlink(final UserMod userMod) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:unlinkPort\");\n+\n         sendMessage(\"direct:unlinkUser\", userMod);\n \n-        String uri = \"direct:unlinkPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -145,6 +145,8 @@ public Long unlink(final UserMod userMod) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map.Entry<Long, List<PropagationStatus>> activate(final User user, final StatusMod statusMod) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"token\", statusMod.getToken());\n         props.put(\"user\", user);\n@@ -155,11 +157,9 @@ public Map.Entry<Long, List<PropagationStatus>> activate(final User user, final\n         } else {\n             WorkflowResult<Long> updated =\n                     new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n-            sendMessage(\"direct:statusUser\", updated, props);\n+            sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n-        String uri = \"direct:statusPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -172,6 +172,8 @@ public Map.Entry<Long, List<PropagationStatus>> activate(final User user, final\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map.Entry<Long, List<PropagationStatus>> reactivate(final User user, final StatusMod statusMod) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"user\", user);\n         props.put(\"statusMod\", statusMod);\n@@ -181,11 +183,9 @@ public Map.Entry<Long, List<PropagationStatus>> reactivate(final User user, fina\n         } else {\n             WorkflowResult<Long> updated =\n                     new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n-            sendMessage(\"direct:statusUser\", updated, props);\n+            sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n-        String uri = \"direct:statusPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -198,6 +198,8 @@ public Map.Entry<Long, List<PropagationStatus>> reactivate(final User user, fina\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final StatusMod statusMod) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:statusPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"user\", user);\n         props.put(\"statusMod\", statusMod);\n@@ -207,11 +209,9 @@ public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final S\n         } else {\n             WorkflowResult<Long> updated =\n                     new WorkflowResult<>(user.getKey(), null, statusMod.getType().name().toLowerCase());\n-            sendMessage(\"direct:statusUser\", updated, props);\n+            sendMessage(\"direct:userStatusPropagation\", updated, props);\n         }\n \n-        String uri = \"direct:statusPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -223,10 +223,10 @@ public Map.Entry<Long, List<PropagationStatus>> suspend(final User user, final S\n \n     @Override\n     public Long link(final UserMod subjectMod) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:linkPort\");\n+\n         sendMessage(\"direct:linkUser\", subjectMod);\n \n-        String uri = \"direct:linkPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -240,13 +240,13 @@ public Long link(final UserMod subjectMod) {\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public List<PropagationStatus> deprovision(final Long user, final Collection<String> resources) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:deprovisionPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"resources\", resources);\n \n         sendMessage(\"direct:deprovisionUser\", user, props);\n \n-        String uri = \"direct:deprovisionPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -259,47 +259,47 @@ public List<PropagationStatus> deprovision(final Long user, final Collection<Str\n     @Override\n     @SuppressWarnings(\"unchecked\")\n     public Map.Entry<Long, List<PropagationStatus>> update(\n-            final UserMod userMod, Long id, final ProvisioningResult result,\n+            final UserMod userMod, final Long key, final ProvisioningResult result,\n             final Boolean enabled, final Set<String> excludedResources) {\n \n+        PollingConsumer pollingConsumer = getConsumer(\"direct:updateInSyncPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"id\", id);\n+        props.put(\"key\", key);\n         props.put(\"result\", result);\n         props.put(\"enabled\", enabled);\n         props.put(\"excludedResources\", excludedResources);\n \n-        sendMessage(\"direct:updateSyncUser\", userMod, props);\n+        sendMessage(\"direct:updateUserInSync\", userMod, props);\n \n-        String uri = \"direct:updateSyncPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         Exception e;\n         if ((e = (Exception) exchange.getProperty(Exchange.EXCEPTION_CAUGHT)) != null) {\n-            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", id, e);\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", key, e);\n \n             result.setStatus(ProvisioningResult.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n \n             WorkflowResult<Map.Entry<UserMod, Boolean>> updated = new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n                     new AbstractMap.SimpleEntry<>(userMod, false), new PropagationByResource(),\n                     new HashSet<String>());\n-            sendMessage(\"direct:syncUserStatus\", updated, props);\n+            sendMessage(\"direct:userInSync\", updated, props);\n             exchange = pollingConsumer.receive();\n         }\n \n         return exchange.getIn().getBody(Map.Entry.class);\n     }\n \n     @Override\n-    public void innerSuspend(final User user, final boolean suspend) {\n+    public void innerSuspend(final User user, final boolean propagate) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:innerSuspendUserPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n-        props.put(\"suspend\", suspend);\n+        props.put(\"propagate\", propagate);\n \n-        sendMessage(\"direct:suspendUserWF\", user, props);\n+        sendMessage(\"direct:innerSuspendUser\", user, props);\n \n-        String uri = \"direct:suspendWFPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -309,10 +309,10 @@ public void innerSuspend(final User user, final boolean suspend) {\n \n     @Override\n     public void requestPasswordReset(final Long userKey) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:requestPwdResetPort\");\n+\n         sendMessage(\"direct:requestPwdReset\", userKey);\n \n-        String uri = \"direct:requestPwdResetPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {\n@@ -322,16 +322,16 @@ public void requestPasswordReset(final Long userKey) {\n \n     @Override\n     public void confirmPasswordReset(final User user, final String token, final String password) {\n+        PollingConsumer pollingConsumer = getConsumer(\"direct:confirmPwdResetPort\");\n+\n         Map<String, Object> props = new HashMap<>();\n         props.put(\"user\", user);\n-        props.put(\"userId\", user.getKey());\n+        props.put(\"userKey\", user.getKey());\n         props.put(\"token\", token);\n         props.put(\"password\", password);\n \n         sendMessage(\"direct:confirmPwdReset\", user, props);\n \n-        String uri = \"direct:confirmPwdResetPort\";\n-        PollingConsumer pollingConsumer = getConsumer(uri);\n         Exchange exchange = pollingConsumer.receive();\n \n         if (exchange.getProperty(Exchange.EXCEPTION_CAUGHT) != null) {"},{"sha":"02c82cbe2896e9a1fb964f347c8199e28e4316a7","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/SyncopeCamelContext.java","status":"modified","additions":15,"deletions":10,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2FSyncopeCamelContext.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.server.provisioning.camel;\n \n-import java.io.ByteArrayInputStream;\n import java.io.InputStream;\n-import java.net.URLDecoder;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n@@ -30,7 +28,6 @@\n import org.apache.camel.model.RouteDefinition;\n import org.apache.camel.spring.SpringCamelContext;\n import org.apache.commons.io.IOUtils;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.server.persistence.api.dao.CamelRouteDAO;\n import org.apache.syncope.server.persistence.api.entity.CamelRoute;\n@@ -64,7 +61,7 @@ public SpringCamelContext getContext() {\n         if (camelContext.getRouteDefinitions().isEmpty()) {\n             List<CamelRoute> routes = routeDAO.findAll();\n             LOG.debug(\"{} route(s) are going to be loaded \", routes.size());\n-            loadContext(routeDAO, routes);\n+            loadContext(routes);\n             try {\n                 camelContext.start();\n             } catch (Exception e) {\n@@ -75,7 +72,7 @@ public SpringCamelContext getContext() {\n         return camelContext;\n     }\n \n-    public void loadContext(final CamelRouteDAO routeDAO, final List<CamelRoute> routes) {\n+    private void loadContext(final List<CamelRoute> routes) {\n         try {\n             DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n             DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n@@ -87,12 +84,11 @@ public void loadContext(final CamelRouteDAO routeDAO, final List<CamelRoute> rou\n             for (CamelRoute route : routes) {\n                 InputStream input = null;\n                 try {\n-                    input = new ByteArrayInputStream(\n-                            URLDecoder.decode(route.getContent(), SyncopeConstants.DEFAULT_ENCODING).getBytes());\n+                    input = IOUtils.toInputStream(route.getContent());\n                     LSInput lsinput = domImpl.createLSInput();\n                     lsinput.setByteStream(input);\n \n-                    Node routeElement = parser.parse(lsinput).getElementsByTagName(\"route\").item(0);\n+                    Node routeElement = parser.parse(lsinput).getDocumentElement();\n                     routeDefs.add(unmarshaller.unmarshal(routeElement, RouteDefinition.class).getValue());\n                 } finally {\n                     IOUtils.closeQuietly(input);\n@@ -104,15 +100,24 @@ public void loadContext(final CamelRouteDAO routeDAO, final List<CamelRoute> rou\n         }\n     }\n \n-    public void reloadContext(final String routeKey) {\n+    public void updateContext(final String routeKey) {\n         if (camelContext == null) {\n             getContext();\n         } else {\n             if (!camelContext.getRouteDefinitions().isEmpty()) {\n                 camelContext.getRouteDefinitions().remove(camelContext.getRouteDefinition(routeKey));\n-                loadContext(routeDAO, Collections.singletonList(routeDAO.find(routeKey)));\n+                loadContext(Collections.singletonList(routeDAO.find(routeKey)));\n             }\n         }\n     }\n \n+    public void restartContext() {\n+        try {\n+            camelContext.stop();\n+            camelContext.start();\n+        } catch (Exception e) {\n+            LOG.error(\"While restarting Camel context\", e);\n+        }\n+    }\n+\n }"},{"sha":"aaced428379e59fb6e22bc0627b8bac7191c47b3","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/RoleCreateInSyncProcessor.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleCreateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleCreateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleCreateInSyncProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,72 @@\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.server.misc.security.AuthContextUtil;\n+import org.apache.syncope.server.persistence.api.RoleEntitlementUtil;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RoleCreateInSyncProcessor implements Processor {\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void process(final Exchange exchange) {\n+        WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n+\n+        RoleTO actual = exchange.getProperty(\"subject\", RoleTO.class);\n+        Map<Long, String> roleOwnerMap = exchange.getProperty(\"roleOwnerMap\", Map.class);\n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+\n+        AttrTO roleOwner = actual.getPlainAttrMap().get(StringUtils.EMPTY);\n+        if (roleOwner != null) {\n+            roleOwnerMap.put(created.getResult(), roleOwner.getValues().iterator().next());\n+        }\n+\n+        AuthContextUtil.extendAuthContext(\n+                created.getResult(), RoleEntitlementUtil.getEntitlementNameFromRoleKey(created.getResult()));\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(\n+                created, actual.getVirAttrs(), excludedResource);\n+\n+        taskExecutor.execute(tasks);\n+\n+        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(created.getResult(), null));\n+    }\n+}"},{"sha":"d2219bacbccfd440ff9ee3f80c73df1616715bc6","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/RoleCreateProcessor.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleCreateProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.server.misc.security.AuthContextUtil;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.RoleEntitlementUtil;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RoleCreateProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RoleCreateProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        WorkflowResult<Long> created = (WorkflowResult) exchange.getIn().getBody();\n+        RoleTO subject = exchange.getProperty(\"subject\", RoleTO.class);\n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+\n+        AuthContextUtil.extendAuthContext(\n+                created.getResult(), RoleEntitlementUtil.getEntitlementNameFromRoleKey(created.getResult()));\n+\n+        List<PropagationTask> tasks =\n+                propagationManager.getRoleCreateTaskIds(created, subject.getVirAttrs(), excludedResource);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(\n+                created.getResult(), propagationReporter.getStatuses()));\n+    }\n+\n+}"},{"sha":"7c6e81635731ecb78b0f97e4148e6c7125a2e348","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/RoleDeleteProcessor.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleDeleteProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.server.persistence.api.entity.role.Role;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.server.workflow.api.RoleWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RoleDeleteProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RoleDeleteProcessor.class);\n+\n+    @Autowired\n+    protected RoleWorkflowAdapter rwfAdapter;\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected RoleDAO roleDAO;\n+\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        final List<Role> toBeDeprovisioned = new ArrayList<>();\n+\n+        Long subjectKey = exchange.getIn().getBody(Long.class);\n+        final Role syncopeRole = roleDAO.find(subjectKey);\n+\n+        if (syncopeRole != null) {\n+            toBeDeprovisioned.add(syncopeRole);\n+\n+            final List<Role> descendants = roleDAO.findDescendants(toBeDeprovisioned.get(0));\n+            if (descendants != null) {\n+                toBeDeprovisioned.addAll(descendants);\n+            }\n+        }\n+\n+        final List<PropagationTask> tasks = new ArrayList<>();\n+\n+        for (Role role : toBeDeprovisioned) {\n+            // Generate propagation tasks for deleting users from role resources, if they are on those resources only\n+            // because of the reason being deleted (see SYNCOPE-357)\n+            for (Map.Entry<Long, PropagationByResource> entry : roleDAO.findUsersWithIndirectResources(role.\n+                    getKey()).entrySet()) {\n+\n+                WorkflowResult<Long> wfResult =\n+                        new WorkflowResult<>(entry.getKey(), entry.getValue(), Collections.<String>emptySet());\n+                tasks.addAll(propagationManager.getUserDeleteTaskIds(wfResult));\n+            }\n+\n+            // Generate propagation tasks for deleting this role from resources\n+            tasks.addAll(propagationManager.getRoleDeleteTaskIds(role.getKey()));\n+        }\n+\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+    }\n+\n+}"},{"sha":"4753cd8a5c05a3225c295e9af97dc3048e8fd7cc","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/RoleDeprovisionProcessor.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleDeprovisionProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.server.persistence.api.entity.role.Role;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RoleDeprovisionProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserDeprovisionProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected RoleDAO roleDAO;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        Long roleKey = exchange.getIn().getBody(Long.class);\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+\n+        Role role = roleDAO.authFetch(roleKey);\n+\n+        Set<String> noPropResourceName = role.getResourceNames();\n+        noPropResourceName.removeAll(resources);\n+\n+        List<PropagationTask> tasks =\n+                propagationManager.getRoleDeleteTaskIds(roleKey, new HashSet<>(resources), noPropResourceName);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(propagationReporter.getStatuses());\n+    }\n+\n+}"},{"sha":"e91be21af48a23610be241b3a69425beb76ae9b7","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/RoleUpdateProcessor.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FRoleUpdateProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.mod.RoleMod;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class RoleUpdateProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserUpdateProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n+        RoleMod subjectMod = exchange.getProperty(\"subjectMod\", RoleMod.class);\n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n+                subjectMod.getVirAttrsToRemove(), subjectMod.getVirAttrsToUpdate(), excludedResource);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(updated.getResult(), propagationReporter.getStatuses()));\n+    }\n+\n+}"},{"sha":"3fb5ceda360d420ad1667e2e098679029cdf0de6","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserConfirmPwdResetProcessor.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserConfirmPwdResetProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.List;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserConfirmPwdResetProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserConfirmPwdResetProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Override\n+    public void process(final Exchange exchange) {\n+        User user = exchange.getProperty(\"user\", User.class);\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(user, null, null);\n+        PropagationReporter propReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propReporter.onPrimaryResourceFailure(tasks);\n+        }\n+    }\n+}"},{"sha":"bcca679b0aa6916e60943f895a4bc5cd0bd32ce7","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserCreateProcessor.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserCreateProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserCreateProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserCreateProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        if ((exchange.getIn().getBody() instanceof WorkflowResult)) {\n+\n+            WorkflowResult<Map.Entry<Long, Boolean>> created = (WorkflowResult) exchange.getIn().getBody();\n+            UserTO actual = exchange.getProperty(\"actual\", UserTO.class);\n+            Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+\n+            List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n+                    created, actual.getPassword(), actual.getVirAttrs(), excludedResource, actual.getMemberships());\n+            PropagationReporter propagationReporter =\n+                    ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+            try {\n+                taskExecutor.execute(tasks, propagationReporter);\n+            } catch (PropagationException e) {\n+                LOG.error(\"Error propagation primary resource {}\", e);\n+                propagationReporter.onPrimaryResourceFailure(tasks);\n+            }\n+\n+            exchange.getOut().setBody(\n+                    new AbstractMap.SimpleEntry<>(created.getResult().getKey(), propagationReporter.getStatuses()));\n+        }\n+    }\n+\n+}"},{"sha":"b9795ad4630ec26f62478cf209b4686194080ddd","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserDeleteProcessor.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeleteProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserDeleteProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserDeleteProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) throws Exception {\n+        Long userKey = (Long) exchange.getIn().getBody();\n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+\n+        // Note here that we can only notify about \"delete\", not any other\n+        // task defined in workflow process definition: this because this\n+        // information could only be available after uwfAdapter.delete(), which\n+        // will also effectively remove user from db, thus making virtually\n+        // impossible by NotificationManager to fetch required user information\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(userKey, excludedResource);\n+\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.setProperty(\"statuses\", propagationReporter.getStatuses());\n+    }\n+\n+}"},{"sha":"042c287b363a3218a73e1a0b3cbd367507199ac1","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserDeprovisionProcessor.java","status":"added","additions":78,"deletions":0,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,78 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.dao.UserDAO;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserDeprovisionProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserDeprovisionProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Override\n+    public void process(final Exchange exchange) {\n+        Long userKey = exchange.getIn().getBody(Long.class);\n+        @SuppressWarnings(\"unchecked\")\n+        List<String> resources = exchange.getProperty(\"resources\", List.class);\n+\n+        final User user = userDAO.authFetch(userKey);\n+\n+        final Set<String> noPropResourceName = user.getResourceNames();\n+        noPropResourceName.removeAll(resources);\n+\n+        final List<PropagationTask> tasks =\n+                propagationManager.getUserDeleteTaskIds(userKey, new HashSet<>(resources), noPropResourceName);\n+        final PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(propagationReporter.getStatuses());\n+    }\n+\n+}"},{"sha":"69760f86b53c0fe59d33edb2559cbe95a6bf4eff","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserInnerSuspendProcessor.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInnerSuspendProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInnerSuspendProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserInnerSuspendProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserInnerSuspendProcessor implements Processor {\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n+        Boolean propagate = exchange.getProperty(\"propagate\", Boolean.class);\n+\n+        if (propagate) {\n+            UserMod userMod = new UserMod();\n+            userMod.setKey(updated.getResult());\n+\n+            final List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                    new WorkflowResult<Map.Entry<UserMod, Boolean>>(\n+                            new SimpleEntry<>(userMod, Boolean.FALSE),\n+                            updated.getPropByRes(), updated.getPerformedTasks()));\n+            taskExecutor.execute(tasks);\n+        }\n+    }\n+\n+}"},{"sha":"11d0ff69ca503b0ffda4f51ed78c4c4e440baef2","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserSetStatusInSyncProcessor.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserSetStatusInSyncProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.Map;\n+import org.apache.camel.Processor;\n+import org.apache.camel.Exchange;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.server.persistence.api.dao.UserDAO;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.workflow.api.UserWorkflowAdapter;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserSetStatusInSyncProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserSetStatusInSyncProcessor.class);\n+\n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+\n+        Boolean enabled = exchange.getProperty(\"enabled\", Boolean.class);\n+        Long key = exchange.getProperty(\"key\", Long.class);\n+\n+        if (enabled != null) {\n+            User user = userDAO.find(key);\n+\n+            WorkflowResult<Long> enableUpdate = null;\n+            if (user.isSuspended() == null) {\n+                enableUpdate = uwfAdapter.activate(key, null);\n+            } else if (enabled && user.isSuspended()) {\n+                enableUpdate = uwfAdapter.reactivate(key);\n+            } else if (!enabled && !user.isSuspended()) {\n+                enableUpdate = uwfAdapter.suspend(key);\n+            }\n+\n+            if (enableUpdate != null) {\n+                if (enableUpdate.getPropByRes() != null) {\n+                    updated.getPropByRes().merge(enableUpdate.getPropByRes());\n+                    updated.getPropByRes().purge();\n+                }\n+                updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n+            }\n+        }\n+    }\n+}"},{"sha":"eb1452f2e88cdb6786a257d30b57a7b06751e347","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.AbstractMap;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.persistence.api.entity.user.User;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserStatusPropagationProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserStatusPropagationProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        WorkflowResult<Long> updated = (WorkflowResult) exchange.getIn().getBody();\n+\n+        User user = exchange.getProperty(\"user\", User.class);\n+        StatusMod statusMod = exchange.getProperty(\"statusMod\", StatusMod.class);\n+\n+        Set<String> resourcesToBeExcluded = new HashSet<>(user.getResourceNames());\n+        resourcesToBeExcluded.removeAll(statusMod.getResourceNames());\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(\n+                user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);\n+        PropagationReporter propReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        try {\n+            taskExecutor.execute(tasks, propReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(updated.getResult(), propReporter.getStatuses()));\n+    }\n+}"},{"sha":"23092e78af280fe0b3e93be783df753b7948c183","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserUpdateInSyncProcessor.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateInSyncProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.AbstractMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserUpdateInSyncProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserUpdateInSyncProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    @Override\n+    public void process(final Exchange exchange) {\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+        Set<String> excludedResource = exchange.getProperty(\"excludedResources\", Set.class);\n+\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated, updated.getResult().getKey().\n+                getPassword() != null, excludedResource);\n+\n+        try {\n+            taskExecutor.execute(tasks, propagationReporter);\n+        } catch (PropagationException e) {\n+            LOG.error(\"Error propagation primary resource\", e);\n+            propagationReporter.onPrimaryResourceFailure(tasks);\n+        }\n+\n+        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(\n+                updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));\n+    }\n+}"},{"sha":"e92184724d057b91e24e462e82efddfe236c9709","filename":"syncope620/ext/camel/provisioning-camel/src/main/java/org/apache/syncope/server/provisioning/camel/processor/UserUpdateProcessor.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fcamel%2Fprocessor%2FUserUpdateProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.provisioning.camel.processor;\n+\n+import java.util.AbstractMap;\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.camel.Exchange;\n+import org.apache.camel.Processor;\n+import org.apache.syncope.common.lib.mod.MembershipMod;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.server.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.server.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.server.provisioning.api.WorkflowResult;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationException;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationManager;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationReporter;\n+import org.apache.syncope.server.provisioning.api.propagation.PropagationTaskExecutor;\n+import org.apache.syncope.server.provisioning.java.VirAttrHandler;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class UserUpdateProcessor implements Processor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserUpdateProcessor.class);\n+\n+    @Autowired\n+    protected PropagationManager propagationManager;\n+\n+    @Autowired\n+    protected PropagationTaskExecutor taskExecutor;\n+\n+    @Autowired\n+    protected VirAttrHandler virtAttrHandler;\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void process(final Exchange exchange) {\n+        WorkflowResult<Map.Entry<UserMod, Boolean>> updated = (WorkflowResult) exchange.getIn().getBody();\n+        UserMod actual = exchange.getProperty(\"actual\", UserMod.class);\n+        boolean removeMemberships = exchange.getProperty(\"removeMemberships\", boolean.class);\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated);\n+        if (tasks.isEmpty()) {\n+            // SYNCOPE-459: take care of user virtual attributes ...\n+            final PropagationByResource propByResVirAttr = virtAttrHandler.fillVirtual(\n+                    updated.getResult().getKey().getKey(),\n+                    actual.getVirAttrsToRemove(),\n+                    actual.getVirAttrsToUpdate());\n+            // SYNCOPE-501: update only virtual attributes (if any of them changed), password propagation is\n+            // not required, take care also of membership virtual attributes\n+            boolean addOrUpdateMemberships = false;\n+            for (MembershipMod membershipMod : actual.getMembershipsToAdd()) {\n+                if (!virtAttrHandler.fillMembershipVirtual(\n+                        updated.getResult().getKey().getKey(),\n+                        membershipMod.getRole(),\n+                        null,\n+                        membershipMod.getVirAttrsToRemove(),\n+                        membershipMod.getVirAttrsToUpdate(),\n+                        false).isEmpty()) {\n+\n+                    addOrUpdateMemberships = true;\n+                }\n+            }\n+            tasks.addAll(!propByResVirAttr.isEmpty() || addOrUpdateMemberships || removeMemberships\n+                    ? propagationManager.getUserUpdateTaskIds(updated, false, null)\n+                    : Collections.<PropagationTask>emptyList());\n+        }\n+\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n+        if (!tasks.isEmpty()) {\n+            try {\n+                taskExecutor.execute(tasks, propagationReporter);\n+            } catch (PropagationException e) {\n+                LOG.error(\"Error propagation primary resource\", e);\n+                propagationReporter.onPrimaryResourceFailure(tasks);\n+            }\n+        }\n+\n+        exchange.getOut().setBody(new AbstractMap.SimpleEntry<>(\n+                updated.getResult().getKey().getKey(), propagationReporter.getStatuses()));\n+    }\n+}"},{"sha":"83631272663d26111f2bd7aba22c6d106fc1984e","filename":"syncope620/ext/camel/provisioning-camel/src/main/resources/provisioningCamelContext.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FprovisioningCamelContext.xml?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -19,8 +19,11 @@ under the License.\n -->\n <beans xmlns=\"http://www.springframework.org/schema/beans\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+       xmlns:context=\"http://www.springframework.org/schema/context\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\n+                           http://www.springframework.org/schema/context\n+                           http://www.springframework.org/schema/context/spring-context.xsd\">\n \n   <bean id=\"userRoutes\" class=\"org.apache.syncope.server.misc.spring.ResourceWithFallbackLoader\">\n     <property name=\"primary\" value=\"file:${camel.directory}/userWorkflow.bpmn20.xml\"/>\n@@ -31,4 +34,6 @@ under the License.\n     <property name=\"fallback\" value=\"classpath:roleRoutes.xml\"/>\n   </bean>\n     \n+  <context:component-scan base-package=\"org.apache.syncope.server.provisioning.camel\"/>\n+\n </beans>"},{"sha":"04c2dc4d1090cbfc0709edd1c4a397a1b2d1ae93","filename":"syncope620/ext/camel/provisioning-camel/src/main/resources/roleRoutes.xml","status":"modified","additions":11,"deletions":39,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FroleRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FroleRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FroleRoutes.xml?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -18,23 +18,15 @@ specific language governing permissions and limitations\n under the License.\n -->\n <routes>\n- \n-  <!--\n-      The default routes define each task involved in user creation:\n-      main operations consist in user workflow creation and its propagation.         \n-  -->\n-  <!--\n-      CREATE ROLE\n-  -->\n-        \n+     \n   <route id=\"createRole\">\n     <from uri=\"direct:createRole\"/>\n     <setProperty propertyName=\"subject\">\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>\n       <bean ref=\"rwfAdapter\" method=\"create(${body})\"/>\n-      <process ref=\"defaultRoleCreatePropagation\" />\n+      <process ref=\"roleCreateProcessor\"/>\n       <to uri=\"direct:createRolePort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -46,40 +38,33 @@ under the License.\n     </doTry>\n   </route> \n                \n-  <!--\n-      CREATE ROLE SYNC\n-  -->\n   <route id=\"createRoleSync\">\n-    <from uri=\"direct:createRoleSync\"/>\n+    <from uri=\"direct:createRoleInSync\"/>\n     <setProperty propertyName=\"subject\">\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>\n       <bean ref=\"rwfAdapter\" method=\"create(${body})\"/>\n-      <process ref=\"defaultRoleCreateSyncPropagation\" />\n-      <to uri=\"direct:createRoleSyncPort\"/>\n+      <process ref=\"roleCreateInSyncProcessor\"/>\n+      <to uri=\"direct:createRoleInSyncPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n         <handled>\n           <constant>false</constant>\n         </handled>\n-        <to uri=\"direct:createRoleSyncPort\"/>\n+        <to uri=\"direct:createRoleInSyncPort\"/>\n       </doCatch>\n     </doTry>\n   </route> \n-        \n          \n-  <!--\n-      UPDATE ROLE\n-  -->\n   <route id=\"updateRole\">\n     <from uri=\"direct:updateRole\"/>\n     <setProperty propertyName=\"subjectMod\">\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>\n       <bean ref=\"rwfAdapter\" method=\"update(${body})\"/>\n-      <process ref=\"defaultRoleUpdatePropagation\" />\n+      <process ref=\"roleUpdateProcessor\"/>\n       <to uri=\"direct:updateRolePort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -90,14 +75,11 @@ under the License.\n       </doCatch>\n     </doTry>\n   </route>\n-               \n-  <!--\n-      DELETE ROLE\n-  -->\n+\n   <route id=\"deleteRole\">\n     <from uri=\"direct:deleteRole\"/>\n     <doTry>\n-      <process ref=\"defaultRoleDeletePropagation\" />\n+      <process ref=\"roleDeleteProcessor\"/>\n       <bean ref=\"rwfAdapter\" method=\"delete(${body})\"/>\n       <setBody>\n         <simple>${property.statuses}</simple>\n@@ -112,10 +94,7 @@ under the License.\n       </doCatch>\n     </doTry>\n   </route>\n-        \n-  <!-- \n-      UNLINK USER\n-  -->\n+\n   <route id=\"unlinkRole\">\n     <from uri=\"direct:unlinkRole\"/>\n     <doTry>\n@@ -134,10 +113,6 @@ under the License.\n     </doTry>            \n   </route>\n         \n-  <!--\n-      LINK USER\n-  -->\n-        \n   <route id=\"linkRole\">\n     <from uri=\"direct:linkRole\"/>\n     <doTry>\n@@ -156,12 +131,9 @@ under the License.\n     </doTry>            \n   </route>\n         \n-  <!--\n-      DEPROVISION ROLE\n-  -->\n   <route id=\"deprovisionRole\">\n     <from uri=\"direct:deprovisionRole\"/>            \n-    <process ref=\"defaultRoleDeprovisionPropagation\" />\n+    <process ref=\"roleDeprovisionProcessor\"/>\n     <to uri=\"direct:deprovisionRolePort\"/>              \n   </route>\n     "},{"sha":"06e68d16d9f7b917b582f389e278b6ea332c27e9","filename":"syncope620/ext/camel/provisioning-camel/src/main/resources/userRoutes.xml","status":"modified","additions":34,"deletions":96,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fresources%2FuserRoutes.xml?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -18,30 +18,16 @@ specific language governing permissions and limitations\n under the License.\n -->\n <routes>\n- \n-  <!--\n-      The default routes define each task involved in user creation:\n-      main operations consist in user workflow creation and its propagation.         \n-  -->  \t\n-  <!--\n-      CREATE USER\n-      This is the entry point of the route and is involved in accepting\n-      the UserTO. When it arrives, the user workflow is created. If the\n-      creation is successfull, the result is sent to propagation, otherwise\n-      if an exception was raised, the exception has to be returned to the\n-      caller. The property actual allows to store the received UserTO in\n-      order to use it later.\n-  -->\n-        \n+  \n   <route id=\"createUser\">\n     <from uri=\"direct:createUser\"/>\n     <setProperty propertyName=\"actual\">\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"create(${body},${property.disablePwdPolicyCheck},\n-                                 ${property.enabled},${property.storePassword})\"/>\n-      <process ref=\"defaultUserCreatePropagation\" />\n+                                     ${property.enabled},${property.storePassword})\"/>\n+      <process ref=\"userCreateProcessor\"/>\n       <to uri=\"direct:createPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -52,24 +38,15 @@ under the License.\n       </doCatch>\n     </doTry>\n   </route> \n-        \n-  <!--\n-      The propagation route deals with propagation of created user. In this\n-      case we used a custom processor to perform this task: it means that\n-      a custom java class contains the propagation strategy.\n-  -->\n        \n-  <!--\n-      UPDATE USER\n-  -->\n   <route id=\"updateUser\">\n     <from uri=\"direct:updateUser\"/>\n     <setProperty propertyName=\"actual\">\n       <simple>${body}</simple>\n     </setProperty>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n-      <process ref=\"defaultUserUpdatePropagation\" />\n+      <process ref=\"userUpdateProcessor\"/>\n       <to uri=\"direct:updatePort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -80,40 +57,33 @@ under the License.\n       </doCatch>\n     </doTry>\n   </route>\n-        \n-\n                 \n-  <!--\n-      UPDATE SYNC USER\n-  -->\n-  <route id=\"updateSyncUser\">\n-    <from uri=\"direct:updateSyncUser\"/>            \n+  <route id=\"updateUserInSync\">\n+    <from uri=\"direct:updateUserInSync\"/>            \n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"update(${body})\"/>\n-      <to uri=\"direct:syncUserStatus\"/>\n+      <to uri=\"direct:userInSync\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n         <handled>\n           <constant>false</constant>\n         </handled>\n-        <to uri=\"direct:updateSyncPort\"/>\n+        <to uri=\"direct:updateInSyncPort\"/>\n       </doCatch>\n     </doTry>\n   </route>\n         \n-  <route id=\"syncUserStatus\">\n-    <from uri=\"direct:syncUserStatus\"/>\n-    <process ref=\"userStatusOnSync\" />\n-    <process ref=\"defaultUserUpdateInSyncPropagation\" />\n-    <to uri=\"direct:updateSyncPort\"/>\n+  <route id=\"userInSync\">\n+    <from uri=\"direct:userInSync\"/>\n+    <process ref=\"userSetStatusInSyncProcessor\"/>\n+    <process ref=\"userUpdateInSyncProcessor\"/>\n+    <to uri=\"direct:updateInSyncPort\"/>\n   </route>\n-  <!--\n-      DELETE USER\n-  -->\n+  \n   <route id=\"deleteUser\">\n     <from uri=\"direct:deleteUser\"/>\n     <doTry>\n-      <process ref=\"defaultUserDeletePropagation\" />\n+      <process ref=\"userDeleteProcessor\"/>\n       <bean ref=\"uwfAdapter\" method=\"delete(${body})\"/>\n       <setBody>\n         <simple>${property.statuses}</simple>\n@@ -129,9 +99,6 @@ under the License.\n     </doTry>\n   </route>\n         \n-  <!-- \n-      UNLINK USER\n-  -->\n   <route id=\"unlinkUser\">\n     <from uri=\"direct:unlinkUser\"/>\n     <doTry>\n@@ -150,10 +117,6 @@ under the License.\n     </doTry>            \n   </route>\n         \n-  <!--\n-      LINK USER\n-  -->\n-        \n   <route id=\"linkUser\">\n     <from uri=\"direct:linkUser\"/>\n     <doTry>\n@@ -172,14 +135,11 @@ under the License.\n     </doTry>            \n   </route>\n         \n-  <!-- \n-      ACTIVATE USER\n-  -->\n   <route id=\"activateUser\">\n     <from uri=\"direct:activateUser\"/>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"activate(${body}, ${property.token})\"/>\n-      <to uri=\"direct:statusUser\"/>\n+      <to uri=\"direct:userStatusPropagation\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n         <handled>\n@@ -189,14 +149,12 @@ under the License.\n       </doCatch>\n     </doTry>    \n   </route>\n-  <!-- \n-      REACTIVATE USER\n-  -->\n+  \n   <route id=\"reactivateUser\">\n     <from uri=\"direct:reactivateUser\"/>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"reactivate(${body})\"/>\n-      <to uri=\"direct:statusUser\"/>\n+      <to uri=\"direct:userStatusPropagation\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n         <handled>\n@@ -206,14 +164,12 @@ under the License.\n       </doCatch>\n     </doTry>    \n   </route>\n-  <!-- \n-      SUSPEND USER\n-  -->\n+  \n   <route id=\"suspendUser\">\n     <from uri=\"direct:suspendUser\"/>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n-      <to uri=\"direct:statusUser\"/>\n+      <to uri=\"direct:userStatusPropagation\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n         <handled>\n@@ -224,50 +180,34 @@ under the License.\n     </doTry>  \n   </route>\n         \n-  <!-- \n-      STATUS PROPAGATION\n-  -->\n-        \n-  <route id=\"statusUser\">\n-    <from uri=\"direct:statusUser\"/>            \n-    <process ref=\"defaultUserStatusPropagation\" />\n-    <to uri=\"direct:statusPort\"/>              \n+  <route id=\"userStatusPropagation\">\n+    <from uri=\"direct:userStatusPropagation\"/>            \n+    <process ref=\"userStatusPropagationProcessor\"/>\n+    <to uri=\"direct:statusPort\"/> \n   </route>\n         \n-        \n-  <!--\n-      DEPROVISION USER\n-  -->\n   <route id=\"deprovisionUser\">\n     <from uri=\"direct:deprovisionUser\"/>            \n-    <process ref=\"defaultUserDeprovisionPropagation\" />\n+    <process ref=\"userDeprovisionProcessor\"/>\n     <to uri=\"direct:deprovisionPort\"/>              \n   </route>\n     \n-  <!--\n-      SUSPEND USER AFTER POLICY VIOLATION\n-  -->\n-        \n-  <route id=\"suspendUserWF\">\n-    <from uri=\"direct:suspendUserWF\"/>\n+  <route id=\"innerSuspendUser\">\n+    <from uri=\"direct:innerSuspendUser\"/>\n     <doTry>\n       <bean ref=\"uwfAdapter\" method=\"suspend(${body})\"/>\n-      <process ref=\"defaultUserWFSuspendPropagation\"/>\n-      <to uri=\"direct:suspendWFPort\"/>\n+      <process ref=\"userInnerSuspendProcessor\"/>\n+      <to uri=\"direct:innerSuspendUserPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n         <handled>\n           <constant>false</constant>\n         </handled>\n-        <to uri=\"direct:suspendWFPort\"/>\n+        <to uri=\"direct:innerSuspendUserPort\"/>\n       </doCatch>\n     </doTry>  \n   </route>\n         \n-  <!--\n-      REQUEST PASSWORD RESET ROUTE\n-  -->\n-        \n   <route id=\"requestPwdReset\">\n     <from uri=\"direct:requestPwdReset\"/>\n     <doTry>\n@@ -282,14 +222,12 @@ under the License.\n       </doCatch>\n     </doTry>  \n   </route>\n-  <!--\n-      CONFIRM PASSWORD RESET\n-  -->\n+  \n   <route id=\"confirmPwdReset\">\n     <from uri=\"direct:confirmPwdReset\"/>\n     <doTry>\n-      <bean ref=\"uwfAdapter\" method=\"confirmPasswordReset(${property.userId},${property.token},${property.password})\"/>\n-      <process ref=\"defaultUserConfirmPwdResetPropagation\" />\n+      <bean ref=\"uwfAdapter\" method=\"confirmPasswordReset(${property.userKey},${property.token},${property.password})\"/>\n+      <process ref=\"userConfirmPwdResetProcessor\"/>\n       <to uri=\"direct:confirmPwdResetPort\"/>\n       <doCatch>        \n         <exception>java.lang.RuntimeException</exception>\n@@ -300,5 +238,5 @@ under the License.\n       </doCatch>\n     </doTry>\n   </route>\n-\n+  \n </routes>"},{"sha":"3a282b365b9c6884fc43ac20baff547263eda685","filename":"syncope620/ext/camel/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/CamelRouteService.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FCamelRouteService.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -22,6 +22,8 @@\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n+import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n@@ -34,18 +36,20 @@\n public interface CamelRouteService extends JAXRSService {\n \n     @GET\n-    @Path(\"{subjectType}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    List<CamelRouteTO> list(@NotNull @PathParam(\"subjectType\") SubjectType subjectType);\n+    List<CamelRouteTO> list(@NotNull @MatrixParam(\"subjectType\") SubjectType subjectType);\n \n     @GET\n     @Path(\"{key}\")\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    CamelRouteTO read(@PathParam(\"key\") String key);\n+    CamelRouteTO read(@NotNull @PathParam(\"key\") String key);\n \n     @PUT\n     @Path(\"{key}\")\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    void update(@PathParam(\"key\") String key, CamelRouteTO route);\n+    void update(@NotNull @PathParam(\"key\") String key, @NotNull CamelRouteTO route);\n \n+    @POST\n+    @Path(\"restartContext\")\n+    void restartContext();\n }"},{"sha":"bc3e89cd280abba9c045244365152558c2ef2b4d","filename":"syncope620/ext/camel/rest-cxf/src/main/java/org/apache/syncope/server/rest/cxf/service/CamelRouteServiceImpl.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fext%2Fcamel%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Frest%2Fcxf%2Fservice%2FCamelRouteServiceImpl.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -48,4 +48,9 @@ public void update(final String key, final CamelRouteTO route) {\n         logic.update(route);\n     }\n \n+    @Override\n+    public void restartContext() {\n+        logic.restartContext();\n+    }\n+\n }"},{"sha":"fd8583b809ca4982bfbd45ecf7902fc8a33f01e9","filename":"syncope620/fit/reference/pom.xml","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fpom.xml?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -134,6 +134,12 @@ under the License.\n     </dependency>\n     \n     <!-- TEST -->\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.camel</groupId>\n+      <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+      <scope>test</scope>          \n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope.client</groupId>\n       <artifactId>syncope-client-lib</artifactId>\n@@ -440,6 +446,22 @@ under the License.\n           <artifactId>syncope-server-workflow-activiti</artifactId>\n           <version>${project.version}</version>\n         </dependency>\n+\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.camel</groupId>\n+          <artifactId>syncope-ext-camel-rest-cxf</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.camel</groupId>\n+          <artifactId>syncope-ext-camel-persistence-jpa</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.camel</groupId>\n+          <artifactId>syncope-ext-camel-provisioning</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n       </dependencies>\n       \n       <build>"},{"sha":"0ed89039b6969429762846a388fd2e64e89e4d50","filename":"syncope620/fit/reference/src/main/resources/log4j2.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -113,10 +113,16 @@ under the License.\n       <appender-ref ref=\"connid\"/>\n     </asyncLogger>\n     \n+    <asyncLogger name=\"org.apache.syncope.server.provisioning\" additivity=\"false\" level=\"INFO\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n-     \n+    <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+         \n     <logger name=\"syncope.audit\" additivity=\"false\" level=\"DEBUG\">\n       <appender-ref ref=\"audit\"/>\n     </logger>"},{"sha":"b0c8917f3375138f4d45a835ec17abc207915787","filename":"syncope620/fit/reference/src/main/resources/provisioning.properties","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Fmain%2Fresources%2Fprovisioning.properties?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,19 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+camel.directory=${conf.directory}\n+userProvisioningManager=org.apache.syncope.server.provisioning.camel.CamelUserProvisioningManager\n+roleProvisioningManager=org.apache.syncope.server.provisioning.camel.CamelRoleProvisioningManager"},{"sha":"cf545a752462c3e08519a233d2c70d20f68962a0","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FAbstractITCase.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.CamelRouteService;\n import org.apache.syncope.common.rest.api.service.ConfigurationService;\n import org.apache.syncope.common.rest.api.service.ConnectorService;\n import org.apache.syncope.common.rest.api.service.EntitlementService;\n@@ -177,6 +178,8 @@ public abstract class AbstractITCase {\n     protected static PolicyService policyService;\n \n     protected static SecurityQuestionService securityQuestionService;\n+    \n+    protected static CamelRouteService camelRouteService;\n \n     @Autowired\n     protected DataSource testDataSource;\n@@ -228,6 +231,7 @@ public static void restSetup() {\n         notificationService = adminClient.getService(NotificationService.class);\n         schemaService = adminClient.getService(SchemaService.class);\n         securityQuestionService = adminClient.getService(SecurityQuestionService.class);\n+        camelRouteService = adminClient.getService(CamelRouteService.class);\n     }\n \n     protected static String getUUIDString() {"},{"sha":"f16dbe6ff7dcb74143642c3aaf3ca8937eb4ed72","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/ActivitiDetector.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FActivitiDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FActivitiDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FActivitiDetector.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -19,13 +19,9 @@\n package org.apache.syncope.fit.server.reference;\n \n import org.apache.syncope.common.rest.api.service.SyncopeService;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public class ActivitiDetector {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ActivitiDetector.class);\n-\n     public static boolean isActivitiEnabledForUsers(final SyncopeService syncopeService) {\n         return syncopeService.info().getUserWorkflowAdapter().indexOf(\"Activiti\") != -1;\n     }"},{"sha":"81eaa4e55239540877f72c8fa855ec1646bbd610","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/CamelDetector.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FCamelDetector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FCamelDetector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FCamelDetector.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+\n+public class CamelDetector {\n+\n+    public static boolean isCamelEnabledForUsers(final SyncopeService syncopeService) {\n+        return syncopeService.info().getUserProvisioningManager().indexOf(\"Camel\") != -1;\n+    }\n+\n+    public static boolean isCamelEnabledForRoles(final SyncopeService syncopeService) {\n+        return syncopeService.info().getRoleProvisioningManager().indexOf(\"Camel\") != -1;\n+    }\n+}"},{"sha":"46d813e8d83fab7bdf3e5068f92929038cf57980","filename":"syncope620/fit/reference/src/test/java/org/apache/syncope/fit/server/reference/CamelRouteITCase.java","status":"added","additions":164,"deletions":0,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FCamelRouteITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FCamelRouteITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Ffit%2Freference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fserver%2Freference%2FCamelRouteITCase.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,164 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.server.reference;\n+\n+import static org.apache.syncope.fit.server.reference.AbstractITCase.syncopeService;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.CamelRouteTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.junit.Assume;\n+import org.junit.FixMethodOrder;\n+import org.junit.Test;\n+import org.junit.runners.MethodSorters;\n+\n+@FixMethodOrder(MethodSorters.JVM)\n+public class CamelRouteITCase extends AbstractITCase {\n+\n+    @Test\n+    public void userRoutes() {\n+        Assume.assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n+\n+        List<CamelRouteTO> userRoutes = camelRouteService.list(SubjectType.USER);\n+        assertNotNull(userRoutes);\n+        assertEquals(15, userRoutes.size());\n+        for (CamelRouteTO route : userRoutes) {\n+            assertNotNull(route.getContent());\n+        }\n+    }\n+\n+    @Test\n+    public void roleRoutes() {\n+        Assume.assumeTrue(CamelDetector.isCamelEnabledForRoles(syncopeService));\n+\n+        List<CamelRouteTO> roleRoutes = camelRouteService.list(SubjectType.ROLE);\n+        assertNotNull(roleRoutes);\n+        assertEquals(7, roleRoutes.size());\n+        for (CamelRouteTO route : roleRoutes) {\n+            assertNotNull(route.getContent());\n+        }\n+    }\n+\n+    private CamelRouteTO doUpdate(final String key, String content) {\n+        CamelRouteTO route = camelRouteService.read(key);\n+        route.setContent(content);\n+        camelRouteService.update(route.getKey(), route);\n+        //getting new route definition\n+        return camelRouteService.read(key);\n+    }\n+\n+    @Test\n+    public void update() {\n+        Assume.assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n+\n+        CamelRouteTO oldRoute = camelRouteService.read(\"createUser\");\n+        assertNotNull(oldRoute);\n+        String routeContent = \"<route id=\\\"createUser\\\">\\n\"\n+                + \"  <from uri=\\\"direct:createUser\\\"/>\\n\"\n+                + \"  <setProperty propertyName=\\\"actual\\\">\\n\"\n+                + \"    <simple>${body}</simple>\\n\"\n+                + \"  </setProperty>\\n\"\n+                + \"  <doTry>\\n\"\n+                + \"    <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${property.disablePwdPolicyCheck},\\n\"\n+                + \"                             ${property.enabled},${property.storePassword})\\\"/>\\n\"\n+                + \"    <process ref=\\\"userCreateProcessor\\\" />\\n\"\n+                + \"    <to uri=\\\"direct:createPort\\\"/>\\n\"\n+                + \"    <to uri=\\\"log:myLog\\\"/>\\n\"\n+                + \"    <doCatch>        \\n\"\n+                + \"      <exception>java.lang.RuntimeException</exception>\\n\"\n+                + \"      <handled>\\n\"\n+                + \"        <constant>false</constant>\\n\"\n+                + \"      </handled>\\n\"\n+                + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n+                + \"    </doCatch>\\n\"\n+                + \"  </doTry>\\n\"\n+                + \"</route>\";\n+        try {\n+            CamelRouteTO route = doUpdate(\"createUser\", routeContent);\n+            assertEquals(routeContent, route.getContent());\n+        } finally {\n+            doUpdate(oldRoute.getKey(), oldRoute.getContent());\n+        }\n+    }\n+\n+    @Test\n+    public void scriptingUpdate() {\n+        Assume.assumeTrue(CamelDetector.isCamelEnabledForUsers(syncopeService));\n+\n+        CamelRouteTO oldRoute = camelRouteService.read(\"createUser\");\n+        //updating route content including new attribute management\n+        String routeContent = \"<route id=\\\"createUser\\\">\\n\"\n+                + \"  <from uri=\\\"direct:createUser\\\"/>\\n\"\n+                + \"  <setProperty propertyName=\\\"actual\\\">\\n\"\n+                + \"    <simple>${body}</simple>\\n\"\n+                + \"  </setProperty>\\n\"\n+                + \"  <setBody>\\n\"\n+                + \"   <groovy>\\n\"\n+                + \"       request.body.getPlainAttrs().get(3).getValues().set(0,\\\"true\\\")\\n\"\n+                + \"       return request.body\\n\"\n+                + \"   </groovy>\\n\"\n+                + \"  </setBody>\\n\"\n+                + \"  <doTry>\\n\"\n+                + \"      <bean ref=\\\"uwfAdapter\\\" method=\\\"create(${body},${property.disablePwdPolicyCheck},\\n\"\n+                + \"                            ${property.enabled},${property.storePassword})\\\"/>\\n\"\n+                + \"      <process ref=\\\"userCreateProcessor\\\" />\\n\"\n+                + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n+                + \"      <doCatch>        \\n\"\n+                + \"      <exception>java.lang.RuntimeException</exception>\\n\"\n+                + \"          <handled>\\n\"\n+                + \"           <constant>false</constant>\\n\"\n+                + \"          </handled>\\n\"\n+                + \"      <to uri=\\\"direct:createPort\\\"/>\\n\"\n+                + \"      </doCatch>\\n\"\n+                + \"   </doTry>\\n\"\n+                + \"</route>\";\n+        try {\n+            doUpdate(\"createUser\", routeContent);\n+\n+            //creating new schema attribute for user\n+            PlainSchemaTO schemaTO = new PlainSchemaTO();\n+            schemaTO.setKey(\"camelAttribute\");\n+            schemaTO.setType(AttrSchemaType.String);\n+            createSchema(AttributableType.USER, SchemaType.PLAIN, schemaTO);\n+\n+            UserTO userTO = new UserTO();\n+            String userId = getUUIDString() + \"camelUser@syncope.apache.org\";\n+            userTO.setUsername(userId);\n+            userTO.setPassword(\"password\");\n+            userTO.getPlainAttrs().add(attrTO(\"userId\", userId));\n+            userTO.getPlainAttrs().add(attrTO(\"fullname\", userId));\n+            userTO.getPlainAttrs().add(attrTO(\"surname\", userId));\n+            userTO.getPlainAttrs().add(attrTO(\"camelAttribute\", \"false\"));\n+\n+            userTO = createUser(userTO);\n+            assertNotNull(userTO);\n+            assertEquals(\"true\", userTO.getPlainAttrs().get(3).getValues().get(0));\n+        } finally {\n+            doUpdate(oldRoute.getKey(), oldRoute.getContent());\n+        }\n+    }\n+\n+}"},{"sha":"4dd3991f66549496aaf5a2d340a0a4047a9949f5","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/server/persistence/jpa/spring/MultiJarAwarePersistenceUnitPostProcessor.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fspring%2FMultiJarAwarePersistenceUnitPostProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fspring%2FMultiJarAwarePersistenceUnitPostProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fpersistence%2Fjpa%2Fspring%2FMultiJarAwarePersistenceUnitPostProcessor.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1,47 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.server.persistence.jpa.spring;\n+\n+import javax.persistence.Entity;\n+import org.apache.syncope.server.persistence.jpa.entity.AbstractEntity;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n+import org.springframework.core.type.filter.AnnotationTypeFilter;\n+import org.springframework.orm.jpa.persistenceunit.MutablePersistenceUnitInfo;\n+import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;\n+\n+public class MultiJarAwarePersistenceUnitPostProcessor implements PersistenceUnitPostProcessor {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MultiJarAwarePersistenceUnitPostProcessor.class);\n+\n+    @Override\n+    public void postProcessPersistenceUnitInfo(final MutablePersistenceUnitInfo pui) {\n+        ClassPathScanningCandidateComponentProvider scanner =\n+                new ClassPathScanningCandidateComponentProvider(false);\n+        scanner.addIncludeFilter(new AnnotationTypeFilter(Entity.class));\n+\n+        for (BeanDefinition bd : scanner.findCandidateComponents(AbstractEntity.class.getPackage().getName())) {\n+            LOG.debug(\"Adding JPA entity {}\", bd.getBeanClassName());\n+            pui.addManagedClassName(bd.getBeanClassName());\n+        }\n+    }\n+\n+}"},{"sha":"605c47c27380430733898a9d186ed3f217c12904","filename":"syncope620/server/persistence-jpa/src/main/resources/persistenceContextEMFactory.xml","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -26,6 +26,11 @@ under the License.\n         class=\"org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean\">\n     <property name=\"persistenceXmlLocation\" value=\"classpath*:META-INF/spring-persistence.xml\"/>\n     <property name=\"persistenceUnitName\" value=\"syncopePersistenceUnit\"/>\n+    <property name=\"persistenceUnitPostProcessors\">\n+      <list>\n+        <bean class=\"org.apache.syncope.server.persistence.jpa.spring.MultiJarAwarePersistenceUnitPostProcessor\"/>\n+      </list>\n+    </property>\n     <property name=\"dataSource\" ref=\"dataSource\"/>\n     <property name=\"jpaVendorAdapter\">\n       <bean class=\"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter\">\n@@ -38,8 +43,8 @@ under the License.\n       <map>\n         <!--<entry key=\"openjpa.Log\" value=\"SQL=TRACE\"/>\n         <entry key=\"openjpa.ConnectionFactoryProperties\" \n-               value=\"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n-                \n+        value=\"PrintParameters=true, PrettyPrint=true, PrettyPrintLineLength=80\"/>-->\n+                                \n         <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n         <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>\n "},{"sha":"c57b35a255fe994f64a889e7fe69d9bd30dba152","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/DefaultRoleProvisioningManager.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultRoleProvisioningManager.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -77,7 +77,8 @@ public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO subject, fin\n         AuthContextUtil.extendAuthContext(\n                 created.getResult(), RoleEntitlementUtil.getEntitlementNameFromRoleKey(created.getResult()));\n \n-        List<PropagationTask> tasks = propagationManager.getRoleCreateTaskIds(created, subject.getVirAttrs());\n+        List<PropagationTask> tasks =\n+                propagationManager.getRoleCreateTaskIds(created, subject.getVirAttrs(), excludedResources);\n         PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n                 PropagationReporter.class);\n         try {\n@@ -87,16 +88,14 @@ public Map.Entry<Long, List<PropagationStatus>> create(final RoleTO subject, fin\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n-                created.getResult(), propagationReporter.getStatuses());\n-        return result;\n+        return new AbstractMap.SimpleEntry<>(created.getResult(), propagationReporter.getStatuses());\n     }\n \n     @Override\n     public Map.Entry<Long, List<PropagationStatus>> create(\n             final RoleTO roleTO, final Map<Long, String> roleOwnerMap, final Set<String> excludedResources) {\n \n-        WorkflowResult<Long> created = rwfAdapter.create((RoleTO) roleTO);\n+        WorkflowResult<Long> created = rwfAdapter.create(roleTO);\n         AttrTO roleOwner = roleTO.getPlainAttrMap().get(StringUtils.EMPTY);\n         if (roleOwner != null) {\n             roleOwnerMap.put(created.getResult(), roleOwner.getValues().iterator().next());\n@@ -110,7 +109,7 @@ public Map.Entry<Long, List<PropagationStatus>> create(\n \n         taskExecutor.execute(tasks);\n \n-        return new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(created.getResult(), null);\n+        return new AbstractMap.SimpleEntry<>(created.getResult(), null);\n     }\n \n     @Override\n@@ -126,25 +125,25 @@ public Map.Entry<Long, List<PropagationStatus>> update(\n \n         List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n                 subjectMod.getVirAttrsToRemove(), subjectMod.getVirAttrsToUpdate());\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n-                PropagationReporter.class);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<Long, List<PropagationStatus>>(\n+        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<>(\n                 updated.getResult(), propagationReporter.getStatuses());\n         return result;\n     }\n \n     @Override\n-    public List<PropagationStatus> delete(final Long subjectId) {\n+    public List<PropagationStatus> delete(final Long subjectKey) {\n         final List<Role> toBeDeprovisioned = new ArrayList<>();\n \n-        final Role syncopeRole = roleDAO.find(subjectId);\n+        final Role syncopeRole = roleDAO.find(subjectKey);\n \n         if (syncopeRole != null) {\n             toBeDeprovisioned.add(syncopeRole);\n@@ -182,7 +181,7 @@ public List<PropagationStatus> delete(final Long subjectId) {\n         }\n \n         try {\n-            rwfAdapter.delete(subjectId);\n+            rwfAdapter.delete(subjectKey);\n         } catch (RuntimeException e) {\n             throw e;\n         }\n@@ -198,15 +197,15 @@ public Long unlink(final RoleMod subjectMod) {\n \n     @Override\n     public List<PropagationStatus> deprovision(final Long roleKey, final Collection<String> resources) {\n-        final Role role = roleDAO.authFetch(roleKey);\n+        Role role = roleDAO.authFetch(roleKey);\n \n-        final Set<String> noPropResourceName = role.getResourceNames();\n+        Set<String> noPropResourceName = role.getResourceNames();\n         noPropResourceName.removeAll(resources);\n \n-        final List<PropagationTask> tasks = propagationManager.getRoleDeleteTaskIds(roleKey, new HashSet<String>(\n-                resources), noPropResourceName);\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().getBean(\n-                PropagationReporter.class);\n+        List<PropagationTask> tasks = propagationManager.getRoleDeleteTaskIds(\n+                roleKey, new HashSet<>(resources), noPropResourceName);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {"},{"sha":"cbe64f065886844f59a6432f3e823e1d6b9601e1","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":16,"deletions":13,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -89,18 +89,16 @@ public Map.Entry<Long, List<PropagationStatus>> create(final UserTO userTO, fina\n \n         List<PropagationTask> tasks = propagationManager.getUserCreateTaskIds(\n                 created, userTO.getPassword(), userTO.getVirAttrs(), excludedResources, userTO.getMemberships());\n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n-                getBean(PropagationReporter.class);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n             LOG.error(\"Error propagation primary resource\", e);\n             propagationReporter.onPrimaryResourceFailure(tasks);\n         }\n \n-        Map.Entry<Long, List<PropagationStatus>> result = new AbstractMap.SimpleEntry<>(\n-                created.getResult().getKey(), propagationReporter.getStatuses());\n-        return result;\n+        return new AbstractMap.SimpleEntry<>(created.getResult().getKey(), propagationReporter.getStatuses());\n     }\n \n     @Override\n@@ -160,10 +158,15 @@ public List<PropagationStatus> delete(final Long userKey) {\n \n     @Override\n     public List<PropagationStatus> delete(final Long subjectId, final Set<String> excludedResources) {\n+        // Note here that we can only notify about \"delete\", not any other\n+        // task defined in workflow process definition: this because this\n+        // information could only be available after uwfAdapter.delete(), which\n+        // will also effectively remove user from db, thus making virtually\n+        // impossible by NotificationManager to fetch required user information\n         List<PropagationTask> tasks = propagationManager.getUserDeleteTaskIds(subjectId, excludedResources);\n \n-        PropagationReporter propagationReporter = ApplicationContextProvider.getApplicationContext().\n-                getBean(PropagationReporter.class);\n+        PropagationReporter propagationReporter =\n+                ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);\n         } catch (PropagationException e) {\n@@ -289,14 +292,14 @@ public List<PropagationStatus> deprovision(final Long userKey, final Collection<\n     }\n \n     @Override\n-    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, final Long id,\n+    public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, final Long key,\n             final ProvisioningResult result, final Boolean enabled, final Set<String> excludedResources) {\n \n         WorkflowResult<Map.Entry<UserMod, Boolean>> updated;\n         try {\n             updated = uwfAdapter.update(userMod);\n         } catch (Exception e) {\n-            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", id, e);\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", key, e);\n \n             result.setStatus(ProvisioningResult.Status.FAILURE);\n             result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n@@ -307,15 +310,15 @@ public Map.Entry<Long, List<PropagationStatus>> update(final UserMod userMod, fi\n         }\n \n         if (enabled != null) {\n-            User user = userDAO.find(id);\n+            User user = userDAO.find(key);\n \n             WorkflowResult<Long> enableUpdate = null;\n             if (user.isSuspended() == null) {\n-                enableUpdate = uwfAdapter.activate(id, null);\n+                enableUpdate = uwfAdapter.activate(key, null);\n             } else if (enabled && user.isSuspended()) {\n-                enableUpdate = uwfAdapter.reactivate(id);\n+                enableUpdate = uwfAdapter.reactivate(key);\n             } else if (!enabled && !user.isSuspended()) {\n-                enableUpdate = uwfAdapter.suspend(id);\n+                enableUpdate = uwfAdapter.suspend(key);\n             }\n \n             if (enableUpdate != null) {"},{"sha":"23915b861882c40a03bfbdeec4f1da604bc56e48","filename":"syncope620/server/provisioning-java/src/main/java/org/apache/syncope/server/provisioning/java/sync/UserSyncResultHandlerImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fserver%2Fprovisioning%2Fjava%2Fsync%2FUserSyncResultHandlerImpl.java?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -73,7 +73,6 @@ protected AbstractSubjectTO create(\n         UserTO userTO = UserTO.class.cast(subjectTO);\n \n         Boolean enabled = syncUtilities.readEnabled(delta.getObject(), profile.getTask());\n-        //Delegate User Workflow Creation and its Propagation to provisioning manager\n         Map.Entry<Long, List<PropagationStatus>> created = userProvisioningManager.create(userTO, true, true, enabled,\n                 Collections.singleton(profile.getTask().getResource().getKey()));\n "},{"sha":"6e7bd364d34051c484e97facb29ed7932d3c0b35","filename":"syncope620/server/rest-cxf/src/main/resources/META-INF/org.apache.cxf.Logger","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Forg.apache.cxf.Logger","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Forg.apache.cxf.Logger","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Forg.apache.cxf.Logger?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -0,0 +1 @@\n+org.apache.cxf.common.logging.Slf4jLogger"},{"sha":"54ac13968d5d42d09917306896e89deab5587a72","filename":"syncope620/server/workflow-java/src/main/resources/workflowContext.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/42f78fee6e0419fb5be8cd334cee8e076749a12e/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fworkflow-java%2Fsrc%2Fmain%2Fresources%2FworkflowContext.xml?ref=42f78fee6e0419fb5be8cd334cee8e076749a12e","patch":"@@ -22,7 +22,7 @@ under the License.\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans   \n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n \n-  <bean class=\"${uwfAdapter}\"/>\n-  <bean class=\"${rwfAdapter}\"/>\n+  <bean id=\"uwfAdapter\" class=\"${uwfAdapter}\"/>\n+  <bean id=\"rwfAdapter\" class=\"${rwfAdapter}\"/>\n     \n </beans>"}]}