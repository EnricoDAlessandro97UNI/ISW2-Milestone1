{"sha":"f1cd7ccec1382a696d9e09b3454a227de9f55558","node_id":"C_kwDOJfYA1toAKGYxY2Q3Y2NlYzEzODJhNjk2ZDllMDliMzQ1NGEyMjdkZTlmNTU1NTg","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2022-11-14T16:00:38Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-11-14T16:00:38Z"},"message":"SYNCOPE-1709: Persist Jobs' current status in the database to support multi-node deployments (#390)\n\nCo-authored-by: Francesco Chicchiriccò <ilgrosso@apache.org>","tree":{"sha":"3121b260df162b709dcd4df882f6ae6737e3f136","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3121b260df162b709dcd4df882f6ae6737e3f136"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f1cd7ccec1382a696d9e09b3454a227de9f55558","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJjcmYmCRBK7hj4Ov3rIwAAo2IIADbFdqOPlzzq/79RJAWSBmLF\nDRU9w8TB1hV0WW97XUGjQ3gOypq4EhNtpW097w9LzpZyC2+KNMFG+F6gUnb/tWyn\nQIiQki9bD/ft16U8rAH4WjBB6+lCfuxCOuARRVQ7d+R644PJ0jMqWk3f22wHgRAN\nuTWuaxW0lX1iUdbPLHTzTd8+dkC2hWhOkFNePBj2dle8ORE+l1udOYLavN/cL6hW\nU3N8MV+lrdAxCpWl1xABl3QFFsXmCvj7qyIACj6HrJ2unfa77vHWy3Ql7FCpM+Rq\nzzVeFJDrMPVstdiScm5adwJ4gbogiQUssZFMAaTrojYehS+TC6mHDFdXx3Ggn8U=\n=QgXn\n-----END PGP SIGNATURE-----\n","payload":"tree 3121b260df162b709dcd4df882f6ae6737e3f136\nparent a1668c2c86550abfd8ddeda3e7bc07dd969c1f8d\nauthor Misagh Moayyed <mm1844@gmail.com> 1668441638 +0400\ncommitter GitHub <noreply@github.com> 1668441638 +0400\n\nSYNCOPE-1709: Persist Jobs' current status in the database to support multi-node deployments (#390)\n\nCo-authored-by: Francesco Chicchiriccò <ilgrosso@apache.org>"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1cd7ccec1382a696d9e09b3454a227de9f55558","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1cd7ccec1382a696d9e09b3454a227de9f55558","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1cd7ccec1382a696d9e09b3454a227de9f55558/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"a1668c2c86550abfd8ddeda3e7bc07dd969c1f8d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a1668c2c86550abfd8ddeda3e7bc07dd969c1f8d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a1668c2c86550abfd8ddeda3e7bc07dd969c1f8d"}],"stats":{"total":695,"additions":558,"deletions":137},"files":[{"sha":"406ae4abe0cc6d34a2aff4d6e4ef423978575d7a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractExecutableLogic.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractExecutableLogic.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -26,14 +26,19 @@\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n \n public abstract class AbstractExecutableLogic<T extends EntityTO> extends AbstractJobLogic<T> {\n \n-    public AbstractExecutableLogic(final JobManager jobManager, final SchedulerFactoryBean scheduler) {\n-        super(jobManager, scheduler);\n+    public AbstractExecutableLogic(\n+            final JobManager jobManager,\n+            final SchedulerFactoryBean scheduler,\n+            final JobStatusDAO jobStatusDAO) {\n+\n+        super(jobManager, scheduler, jobStatusDAO);\n     }\n \n     public abstract ExecTO execute(String key, OffsetDateTime startAt, boolean dryRun);"},{"sha":"275cc847e00b9721ca6d777c93f6fb3abfa6969d","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -20,19 +20,20 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Optional;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n+import org.apache.syncope.core.persistence.api.entity.JobStatus;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.utils.FormatUtils;\n-import org.apache.syncope.core.provisioning.java.job.AbstractInterruptableJob;\n import org.apache.syncope.core.provisioning.java.job.SystemLoadReporterJob;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n import org.apache.syncope.core.provisioning.java.job.report.ReportJob;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.quartz.JobDetail;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n@@ -48,9 +49,16 @@\n \n     protected final SchedulerFactoryBean scheduler;\n \n-    protected AbstractJobLogic(final JobManager jobManager, final SchedulerFactoryBean scheduler) {\n+    protected final JobStatusDAO jobStatusDAO;\n+\n+    protected AbstractJobLogic(\n+            final JobManager jobManager,\n+            final SchedulerFactoryBean scheduler,\n+            final JobStatusDAO jobStatusDAO) {\n+\n         this.jobManager = jobManager;\n         this.scheduler = scheduler;\n+        this.jobStatusDAO = jobStatusDAO;\n     }\n \n     protected abstract Triple<JobType, String, String> getReference(JobKey jobKey);\n@@ -93,12 +101,9 @@ protected JobTO getJobTO(final JobKey jobKey, final boolean includeCustom) throw\n                 jobTO.setStatus(\"UNKNOWN\");\n                 if (jobTO.isRunning()) {\n                     try {\n-                        Object job = ApplicationContextProvider.getBeanFactory().getBean(jobKey.getName());\n-                        if (job instanceof AbstractInterruptableJob\n-                                && ((AbstractInterruptableJob) job).getDelegate() != null) {\n-\n-                            jobTO.setStatus(((AbstractInterruptableJob) job).getDelegate().currentStatus());\n-                        }\n+                        jobTO.setStatus(Optional.ofNullable(jobStatusDAO.find(jobTO.getRefDesc())).\n+                                map(JobStatus::getStatus).\n+                                orElse(jobTO.getStatus()));\n                     } catch (NoSuchBeanDefinitionException e) {\n                         LOG.warn(\"Could not find job {} implementation\", jobKey, e);\n                     }"},{"sha":"9e004bd247f3d38547c3ce88027512d4d47748b8","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.OIDCRPClientAppDAO;\n@@ -378,10 +379,11 @@ public MailTemplateLogic mailTemplateLogic(\n     public NotificationLogic notificationLogic(\n             final NotificationDataBinder binder,\n             final JobManager jobManager,\n+            final JobStatusDAO jobStatusDAO,\n             final SchedulerFactoryBean scheduler,\n             final NotificationDAO notificationDAO) {\n \n-        return new NotificationLogic(jobManager, scheduler, notificationDAO, binder);\n+        return new NotificationLogic(jobManager, scheduler, jobStatusDAO, notificationDAO, binder);\n     }\n \n     @ConditionalOnMissingBean\n@@ -435,11 +437,20 @@ public ReportLogic reportLogic(\n             final ConfParamOps confParamOps,\n             final ReportDataBinder binder,\n             final SchedulerFactoryBean scheduler,\n+            final JobStatusDAO jobStatusDAO,\n             final ReportDAO reportDAO,\n             final EntityFactory entityFactory,\n             final ReportExecDAO reportExecDAO) {\n \n-        return new ReportLogic(jobManager, scheduler, reportDAO, reportExecDAO, confParamOps, binder, entityFactory);\n+        return new ReportLogic(\n+                jobManager,\n+                scheduler,\n+                jobStatusDAO,\n+                reportDAO,\n+                reportExecDAO,\n+                confParamOps,\n+                binder,\n+                entityFactory);\n     }\n \n     @ConditionalOnMissingBean\n@@ -518,6 +529,7 @@ public TaskLogic taskLogic(\n             final TaskExecDAO taskExecDAO,\n             final TaskDAO taskDAO,\n             final SchedulerFactoryBean scheduler,\n+            final JobStatusDAO jobStatusDAO,\n             final ConfParamOps confParamOps,\n             final ExternalResourceDAO externalResourceDAO,\n             final NotificationJobDelegate notificationJobDelegate,\n@@ -528,6 +540,7 @@ public TaskLogic taskLogic(\n         return new TaskLogic(\n                 jobManager,\n                 scheduler,\n+                jobStatusDAO,\n                 taskDAO,\n                 taskExecDAO,\n                 externalResourceDAO,"},{"sha":"9fea398973f088c076170a58f65a51e9bb50d7e2","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/NotificationLogic.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FNotificationLogic.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobType;\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -48,10 +49,11 @@ public class NotificationLogic extends AbstractJobLogic<NotificationTO> {\n     public NotificationLogic(\n             final JobManager jobManager,\n             final SchedulerFactoryBean scheduler,\n+            final JobStatusDAO jobStatusDAO,\n             final NotificationDAO notificationDAO,\n             final NotificationDataBinder binder) {\n \n-        super(jobManager, scheduler);\n+        super(jobManager, scheduler, jobStatusDAO);\n \n         this.notificationDAO = notificationDAO;\n         this.binder = binder;\n@@ -112,7 +114,7 @@ public NotificationTO delete(final String key) {\n     @Override\n     protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n         return JobManager.NOTIFICATION_JOB.equals(jobKey)\n-                ? Triple.of(JobType.NOTIFICATION, (String) null, NotificationJob.class.getSimpleName())\n+                ? Triple.of(JobType.NOTIFICATION, null, NotificationJob.class.getSimpleName())\n                 : null;\n     }\n "},{"sha":"83565a2bc4253aa12b83e210ac1afabad06012e2","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -62,6 +62,7 @@\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n@@ -112,13 +113,14 @@ public class ReportLogic extends AbstractExecutableLogic<ReportTO> {\n     public ReportLogic(\n             final JobManager jobManager,\n             final SchedulerFactoryBean scheduler,\n+            final JobStatusDAO jobStatusDAO,\n             final ReportDAO reportDAO,\n             final ReportExecDAO reportExecDAO,\n             final ConfParamOps confParamOps,\n             final ReportDataBinder binder,\n             final EntityFactory entityFactory) {\n \n-        super(jobManager, scheduler);\n+        super(jobManager, scheduler, jobStatusDAO);\n \n         this.reportDAO = reportDAO;\n         this.reportExecDAO = reportExecDAO;\n@@ -419,9 +421,8 @@ public List<BatchResponseItem> deleteExecutions(\n     protected Triple<JobType, String, String> getReference(final JobKey jobKey) {\n         String key = JobNamer.getReportKeyFromJobName(jobKey.getName());\n \n-        Report report = reportDAO.find(key);\n-        return Optional.ofNullable(report)\n-                .map(report1 -> Triple.of(JobType.REPORT, key, binder.buildRefDesc(report1))).orElse(null);\n+        return Optional.ofNullable(reportDAO.find(key)).\n+                map(f -> Triple.of(JobType.REPORT, key, binder.buildRefDesc(f))).orElse(null);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REPORT_LIST + \"')\")"},{"sha":"73b1a2c3027d98cb89ee3ab504a5a2881628e90a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.batch.BatchResponseItem;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -107,6 +108,7 @@ public class TaskLogic extends AbstractExecutableLogic<TaskTO> {\n     public TaskLogic(\n             final JobManager jobManager,\n             final SchedulerFactoryBean scheduler,\n+            final JobStatusDAO jobStatusDAO,\n             final TaskDAO taskDAO,\n             final TaskExecDAO taskExecDAO,\n             final ExternalResourceDAO resourceDAO,\n@@ -117,7 +119,7 @@ public TaskLogic(\n             final NotificationJobDelegate notificationJobDelegate,\n             final TaskUtilsFactory taskUtilsFactory) {\n \n-        super(jobManager, scheduler);\n+        super(jobManager, scheduler, jobStatusDAO);\n \n         this.taskDAO = taskDAO;\n         this.taskExecDAO = taskExecDAO;"},{"sha":"61391676d2bde179ff489c2334fee244b75e8eb6","filename":"core/idrepo/logic/src/test/java/org/apache/syncope/core/logic/ReportLogicTest.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogicTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogicTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogicTest.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n+import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.report.DefaultReportJobDelegate;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n@@ -43,6 +44,7 @@\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.GrantedAuthority;\n import org.springframework.security.core.context.SecurityContextHolder;\n@@ -81,6 +83,12 @@ public static void unsetAuthContext() {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private ReportDataBinder reportDataBinder;\n+\n+    @Autowired\n+    private ApplicationEventPublisher publisher;\n+\n     private void checkExport(final String execKey, final ReportExecExportFormat fmt) throws IOException {\n         ReportExecExportFormat format = Optional.ofNullable(fmt).orElse(ReportExecExportFormat.XML);\n         ReportExec reportExec = logic.getReportExec(execKey);\n@@ -104,7 +112,8 @@ public void executeAndExport() throws Exception {\n         report = logic.read(report.getKey());\n         assertTrue(report.getExecutions().isEmpty());\n \n-        ReportJobDelegate delegate = new DefaultReportJobDelegate(reportDAO, reportExecDAO, entityFactory);\n+        ReportJobDelegate delegate = new DefaultReportJobDelegate(\n+                reportDAO, reportExecDAO, entityFactory, reportDataBinder, publisher);\n         delegate.execute(report.getKey(), \"test\");\n \n         report = logic.read(report.getKey());"},{"sha":"bb50b6485d82d4a6c6259ed85249660f3d954819","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/JobStatusDAO.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJobStatusDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJobStatusDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FJobStatusDAO.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import org.apache.syncope.core.persistence.api.entity.JobStatus;\n+\n+public interface JobStatusDAO extends DAO<JobStatus> {\n+\n+    JobStatus find(String key);\n+\n+    JobStatus save(JobStatus jobStatus);\n+\n+    void delete(String key);\n+}"},{"sha":"22c4468b0c9f7912eb428dea4d05d6f1851bf988","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/Reportlet.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n@@ -43,8 +42,8 @@ default void setConf(ReportletConf conf) {\n      * Actual data extraction for reporting.\n      *\n      * @param handler SAX content handler for streaming result\n-     * @param status current report status (for job reporting)\n+     * @param refDesc current report status (for job reporting)\n      * @throws SAXException if there is any problem in SAX handling\n      */\n-    void extract(ContentHandler handler, AtomicReference<String> status) throws SAXException;\n+    void extract(ContentHandler handler, String refDesc) throws SAXException;\n }"},{"sha":"ae98e370513aff4ee1af240218d22c442d3dba8a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/JobStatus.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJobStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJobStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FJobStatus.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface JobStatus extends ProvidedKeyEntity {\n+\n+    String getStatus();\n+\n+    void setStatus(String status);\n+}"},{"sha":"a7acb384c7a5089361c36111647847ee6f35a984","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -49,6 +49,7 @@\n import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.OIDCJWKSDAO;\n@@ -106,6 +107,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPAFIQLQueryDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAImplementationDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAJobStatusDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAMailTemplateDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPANotificationDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAOIDCJWKSDAO;\n@@ -524,6 +526,12 @@ public ImplementationDAO implementationDAO(\n         return new JPAImplementationDAO(resourceDAO, entityCacheDAO);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public JobStatusDAO jobStatusDAO() {\n+        return new JPAJobStatusDAO();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public MailTemplateDAO mailTemplateDAO() {"},{"sha":"560efd1d13b046b13926c2723ce03bb15f41e0ed","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJobStatusDAO.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJobStatusDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJobStatusDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJobStatusDAO.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n+import org.apache.syncope.core.persistence.api.entity.JobStatus;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAJobStatus;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class JPAJobStatusDAO extends AbstractDAO<JobStatus> implements JobStatusDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public JobStatus find(final String key) {\n+        return entityManager().find(JPAJobStatus.class, key);\n+    }\n+\n+    @Transactional\n+    @Override\n+    public JobStatus save(final JobStatus jobStatus) {\n+        return entityManager().merge(jobStatus);\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void delete(final String key) {\n+        JobStatus jobStatus = find(key);\n+        if (jobStatus != null) {\n+            entityManager().remove(jobStatus);\n+        }\n+\n+    }\n+}"},{"sha":"4798a2c919eaa12c7e3e7d0ba0d6962e7837be1a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.JobStatus;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n@@ -306,6 +307,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPADelegation();\n         } else if (reference.equals(FIQLQuery.class)) {\n             result = (E) new JPAFIQLQuery();\n+        } else if (reference.equals(JobStatus.class)) {\n+            result = (E) new JPAJobStatus();\n         } else if (reference.equals(SRARoute.class)) {\n             result = (E) new JPASRARoute();\n         } else if (reference.equals(AuthModule.class)) {"},{"sha":"5cda0127f928958a27b3ed6cdbbb472d91ef7925","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAJobStatus.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJobStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJobStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJobStatus.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.JobStatus;\n+\n+@Entity\n+@Table(name = JPAJobStatus.TABLE)\n+public class JPAJobStatus extends AbstractProvidedKeyEntity implements JobStatus {\n+\n+    private static final long serialVersionUID = 9061740216669505871L;\n+\n+    public static final String TABLE = \"JobStatus\";\n+\n+    private String jobStatus;\n+\n+    @Override\n+    public String getStatus() {\n+        return jobStatus;\n+    }\n+\n+    @Override\n+    public void setStatus(final String status) {\n+        jobStatus = status;\n+    }\n+}"},{"sha":"0df61e70820febf2ab16c4d4cc1f81043bb6a114","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/event/JobStatusEvent.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FJobStatusEvent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FJobStatusEvent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fevent%2FJobStatusEvent.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.event;\n+\n+import org.springframework.context.ApplicationEvent;\n+\n+public class JobStatusEvent extends ApplicationEvent {\n+\n+    private static final long serialVersionUID = 373067530016978592L;\n+\n+    private final String jobRefDesc;\n+\n+    private final String jobStatus;\n+\n+    public JobStatusEvent(final Object source, final String jobRefDesc, final String jobStatus) {\n+        super(source);\n+        this.jobRefDesc = jobRefDesc;\n+        this.jobStatus = jobStatus;\n+    }\n+\n+    public String getJobRefDesc() {\n+        return jobRefDesc;\n+    }\n+\n+    public String getJobStatus() {\n+        return jobStatus;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return \"JobStatusEvent{\"\n+                + \"jobRefDesc=\" + jobRefDesc\n+                + \", jobStatus=\" + jobStatus\n+                + '}';\n+    }\n+}"},{"sha":"329cad284599ae750882f8ca100f35330e739275","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobDelegate.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -23,8 +23,6 @@\n  */\n public interface JobDelegate {\n \n-    String currentStatus();\n-\n     void interrupt();\n \n     boolean isInterrupted();"},{"sha":"88b8a961e4a302d4ca9526e633fca2b1d554167e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":33,"deletions":4,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -23,6 +23,7 @@\n import java.nio.charset.StandardCharsets;\n import java.util.Properties;\n import java.util.concurrent.Executor;\n+import java.util.concurrent.Executors;\n import java.util.concurrent.ThreadPoolExecutor;\n import javax.annotation.Resource;\n import javax.mail.MessagingException;\n@@ -52,6 +53,7 @@\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n import org.apache.syncope.core.persistence.api.dao.NotificationDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n@@ -161,6 +163,7 @@\n import org.apache.syncope.core.provisioning.java.data.WAConfigDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.wa.WAClientAppDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.job.DefaultJobManager;\n+import org.apache.syncope.core.provisioning.java.job.JobStatusUpdater;\n import org.apache.syncope.core.provisioning.java.job.SchedulerDBInit;\n import org.apache.syncope.core.provisioning.java.job.SyncopeSpringBeanJobFactory;\n import org.apache.syncope.core.provisioning.java.job.SystemLoadReporterJob;\n@@ -187,12 +190,15 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnMissingBean;\n import org.springframework.boot.context.properties.EnableConfigurationProperties;\n import org.springframework.context.ApplicationContext;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n import org.springframework.context.annotation.DependsOn;\n import org.springframework.context.annotation.Lazy;\n import org.springframework.context.annotation.Primary;\n import org.springframework.core.io.ClassPathResource;\n+import org.springframework.core.task.AsyncTaskExecutor;\n+import org.springframework.core.task.support.TaskExecutorAdapter;\n import org.springframework.jdbc.datasource.init.ResourceDatabasePopulator;\n import org.springframework.jndi.JndiObjectFactoryBean;\n import org.springframework.mail.javamail.JavaMailSender;\n@@ -257,6 +263,18 @@ public Executor getAsyncExecutor() {\n         };\n     }\n \n+    /**\n+     * This is a special thread executor that only created a single worker thread.\n+     * This is necessary to allow job status update operations to queue up serially\n+     * and not via multiple threads to avoid the \"lost update\" problem.\n+     *\n+     * @return the async task executor\n+     */\n+    @Bean\n+    public AsyncTaskExecutor jobStatusUpdaterThreadExecutor() {\n+        return new TaskExecutorAdapter(Executors.newSingleThreadExecutor());\n+    }\n+\n     /**\n      * Used by {@link org.apache.syncope.core.provisioning.java.propagation.PriorityPropagationTaskExecutor}.\n      *\n@@ -357,10 +375,17 @@ public JobManager jobManager(\n         return jobManager;\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public JobStatusUpdater jobStatusUpdater(final JobStatusDAO jobStatusDAO, final EntityFactory entityFactory) {\n+        return new JobStatusUpdater(jobStatusDAO, entityFactory);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public JavaMailSender mailSender(final ProvisioningProperties provisioningProperties)\n             throws IllegalArgumentException, IOException {\n+\n         JavaMailSenderImpl mailSender = new JavaMailSenderImpl() {\n \n             @Override\n@@ -771,14 +796,16 @@ public NotificationJobDelegate notificationJobDelegate(\n             final TaskDAO taskDAO,\n             final JavaMailSender mailSender,\n             final AuditManager auditManager,\n-            final NotificationManager notificationManager) {\n+            final NotificationManager notificationManager,\n+            final ApplicationEventPublisher publisher) {\n \n         return new DefaultNotificationJobDelegate(\n                 taskDAO,\n                 mailSender,\n                 taskUtilsFactory,\n                 auditManager,\n-                notificationManager);\n+                notificationManager,\n+                publisher);\n     }\n \n     @ConditionalOnMissingBean\n@@ -796,9 +823,11 @@ public NotificationJob notificationJob(\n     public ReportJobDelegate reportJobDelegate(\n             final ReportDAO reportDAO,\n             final ReportExecDAO reportExecDAO,\n-            final EntityFactory entityFactory) {\n+            final EntityFactory entityFactory,\n+            final ReportDataBinder reportDataBinder,\n+            final ApplicationEventPublisher publisher) {\n \n-        return new DefaultReportJobDelegate(reportDAO, reportExecDAO, entityFactory);\n+        return new DefaultReportJobDelegate(reportDAO, reportExecDAO, entityFactory, reportDataBinder, publisher);\n     }\n \n     @ConditionalOnMissingBean"},{"sha":"a858d2385b656d44ebd3d92f9418df9f5d596a56","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractInterruptableJob.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractInterruptableJob.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -28,11 +28,6 @@ public abstract class AbstractInterruptableJob implements InterruptableJob {\n \n     private final JobDelegate embeddedDelegate = new JobDelegate() {\n \n-        @Override\n-        public String currentStatus() {\n-            return \"RUNNING\";\n-        }\n-\n         @Override\n         public void interrupt() {\n         }"},{"sha":"cbace864bd0a9f471d83d7d0dd4836295fc846a6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractSchedTaskJobDelegate.java","status":"modified","additions":14,"deletions":7,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractSchedTaskJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -19,8 +19,8 @@\n package org.apache.syncope.core.provisioning.java.job;\n \n import java.time.OffsetDateTime;\n+import java.util.Objects;\n import java.util.Optional;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -29,6 +29,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n+import org.apache.syncope.core.provisioning.api.event.JobStatusEvent;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n@@ -39,6 +41,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n \n public abstract class AbstractSchedTaskJobDelegate<T extends SchedTask> implements SchedTaskJobDelegate {\n@@ -70,6 +73,9 @@\n     @Autowired\n     protected TaskUtilsFactory taskUtilsFactory;\n \n+    @Autowired\n+    protected TaskDataBinder taskDataBinder;\n+\n     /**\n      * Notification manager.\n      */\n@@ -82,15 +88,16 @@\n     @Autowired\n     protected AuditManager auditManager;\n \n-    protected final AtomicReference<String> status = new AtomicReference<>();\n+    @Autowired\n+    protected ApplicationEventPublisher publisher;\n \n     protected boolean interrupt;\n \n     protected boolean interrupted;\n \n-    @Override\n-    public String currentStatus() {\n-        return status.get();\n+    protected void setStatus(final String status) {\n+        Objects.requireNonNull(task, \"Task cannot be undefined\");\n+        publisher.publishEvent(new JobStatusEvent(this, taskDataBinder.buildRefDesc(task), status));\n     }\n \n     @Override\n@@ -131,7 +138,7 @@ public void execute(\n         execution.setTask(task);\n         execution.setExecutor(executor);\n \n-        status.set(\"Initialization completed\");\n+        setStatus(\"Initialization completed\");\n \n         AuditElements.Result result;\n \n@@ -153,7 +160,7 @@ public void execute(\n         }\n         task = (T) taskDAO.save(task);\n \n-        status.set(\"Done\");\n+        setStatus(null);\n \n         notificationManager.createTasks(\n                 executor,"},{"sha":"74d9ef1e87803fdc0ef345dd261050710760f433","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/GroupMemberProvisionTaskJobDelegate.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FGroupMemberProvisionTaskJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -90,13 +90,13 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n         }\n         result.append(\"provision\\n\\n\");\n \n-        status.set(result.toString());\n+        setStatus(result.toString());\n \n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setGroup(groupKey);\n         List<User> users = searchDAO.search(SearchCond.getLeaf(membershipCond), AnyTypeKind.USER);\n         Collection<String> gResources = groupDAO.findAllResourceKeys(groupKey);\n-        status.set(\"About to \"\n+        setStatus(\"About to \"\n                 + (action == ProvisionAction.DEPROVISION ? \"de\" : \"\") + \"provision \"\n                 + users.size() + \" users from \" + gResources);\n \n@@ -126,7 +126,7 @@ protected String doExecute(final boolean dryRun, final String executor, final Jo\n         membershipCond = new MembershipCond();\n         membershipCond.setGroup(groupKey);\n         List<AnyObject> anyObjects = searchDAO.search(SearchCond.getLeaf(membershipCond), AnyTypeKind.ANY_OBJECT);\n-        status.set(\"About to \"\n+        setStatus(\"About to \"\n                 + (action == ProvisionAction.DEPROVISION ? \"de\" : \"\") + \"provision \"\n                 + anyObjects.size() + \" any objects from \" + gResources);\n "},{"sha":"04bba663ac3c935c9026ed4e156042c1d8b96098","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/JobStatusUpdater.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdater.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdater.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdater.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.JobStatus;\n+import org.apache.syncope.core.provisioning.api.event.JobStatusEvent;\n+import org.springframework.context.event.EventListener;\n+import org.springframework.scheduling.annotation.Async;\n+\n+public class JobStatusUpdater {\n+\n+    protected final JobStatusDAO jobStatusDAO;\n+\n+    protected final EntityFactory entityFactory;\n+\n+    public JobStatusUpdater(final JobStatusDAO jobStatusDAO, final EntityFactory entityFactory) {\n+        this.jobStatusDAO = jobStatusDAO;\n+        this.entityFactory = entityFactory;\n+    }\n+\n+    /**\n+     * It's important to note that responding to job status updates\n+     * must be done in async mode, and via a separate special thread executor\n+     * that attempts to synchronize job execution serially by only making one thread\n+     * active at a given time. Not doing so will force the event executor to launch\n+     * separate threads per each status update, which would result in multiple concurrent\n+     * INSERT operations on the database, and failing.\n+     *\n+     * @param event the event\n+     */\n+    @Async(\"jobStatusUpdaterThreadExecutor\")\n+    @EventListener\n+    public void update(final JobStatusEvent event) {\n+        if (event.getJobStatus() == null) {\n+            jobStatusDAO.delete(event.getJobRefDesc());\n+        } else {\n+            JobStatus jobStatus = entityFactory.newEntity(JobStatus.class);\n+            jobStatus.setKey(event.getJobRefDesc());\n+            jobStatus.setStatus(event.getJobStatus());\n+            jobStatusDAO.save(jobStatus);\n+        }\n+    }\n+}"},{"sha":"3d51b85347df3c2feb47218151a27ab5dc362640","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/DefaultNotificationJobDelegate.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FDefaultNotificationJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -20,7 +20,6 @@\n \n import java.time.OffsetDateTime;\n import java.util.List;\n-import java.util.concurrent.atomic.AtomicReference;\n import javax.mail.internet.MimeMessage;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n@@ -31,13 +30,16 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtilsFactory;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n+import org.apache.syncope.core.provisioning.api.event.JobStatusEvent;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n import org.apache.syncope.core.provisioning.api.notification.NotificationJobDelegate;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.mail.javamail.JavaMailSender;\n import org.springframework.mail.javamail.MimeMessageHelper;\n import org.springframework.transaction.annotation.Transactional;\n@@ -56,7 +58,7 @@ public class DefaultNotificationJobDelegate implements NotificationJobDelegate {\n \n     protected final NotificationManager notificationManager;\n \n-    protected final AtomicReference<String> status = new AtomicReference<>();\n+    protected final ApplicationEventPublisher publisher;\n \n     protected boolean interrupt;\n \n@@ -67,18 +69,19 @@ public DefaultNotificationJobDelegate(\n             final JavaMailSender mailSender,\n             final TaskUtilsFactory taskUtilsFactory,\n             final AuditManager auditManager,\n-            final NotificationManager notificationManager) {\n+            final NotificationManager notificationManager,\n+            final ApplicationEventPublisher publisher) {\n \n         this.taskDAO = taskDAO;\n         this.mailSender = mailSender;\n         this.taskUtilsFactory = taskUtilsFactory;\n         this.auditManager = auditManager;\n         this.notificationManager = notificationManager;\n+        this.publisher = publisher;\n     }\n \n-    @Override\n-    public String currentStatus() {\n-        return status.get();\n+    protected void setStatus(final String status) {\n+        publisher.publishEvent(new JobStatusEvent(this, JobManager.NOTIFICATION_JOB.getName(), status));\n     }\n \n     @Override\n@@ -127,7 +130,7 @@ public TaskExec<NotificationTask> executeSingle(final NotificationTask task, fin\n                         + task.getTextBody() + '\\n');\n             }\n \n-            status.set(\"Sending notifications to \" + task.getRecipients());\n+            setStatus(\"Sending notifications to \" + task.getRecipients());\n \n             for (String to : task.getRecipients()) {\n                 try {\n@@ -219,7 +222,7 @@ public TaskExec<NotificationTask> executeSingle(final NotificationTask task, fin\n     public void execute(final String executor) throws JobExecutionException {\n         List<NotificationTask> tasks = taskDAO.<NotificationTask>findToExec(TaskType.NOTIFICATION);\n \n-        status.set(\"Sending out \" + tasks.size() + \" notifications\");\n+        setStatus(\"Sending out \" + tasks.size() + \" notifications\");\n \n         for (int i = 0; i < tasks.size() && !interrupt; i++) {\n             LOG.debug(\"Found notification task {} to be executed: starting...\", tasks.get(i));\n@@ -230,6 +233,8 @@ public void execute(final String executor) throws JobExecutionException {\n             LOG.debug(\"Notification job interrupted\");\n             interrupted = true;\n         }\n+\n+        setStatus(null);\n     }\n \n     protected static boolean hasToBeRegistered(final TaskExec<NotificationTask> execution) {"},{"sha":"f95ea5210201b48fcc9b6d227a737652032b0122","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AbstractReportlet.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAbstractReportlet.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.report;\n \n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.provisioning.api.event.JobStatusEvent;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n import org.xml.sax.ContentHandler;\n import org.xml.sax.SAXException;\n@@ -32,25 +34,32 @@ public abstract class AbstractReportlet implements Reportlet {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractReportlet.class);\n \n+    @Autowired\n+    protected ApplicationEventPublisher publisher;\n+\n     protected ReportletConf conf;\n \n     @Override\n     public void setConf(final ReportletConf conf) {\n         this.conf = conf;\n     }\n \n-    protected abstract void doExtract(ReportletConf conf, ContentHandler handler, AtomicReference<String> status)\n+    protected void setStatus(final String refDesc, final String status) {\n+        publisher.publishEvent(new JobStatusEvent(this, refDesc, status));\n+    }\n+\n+    protected abstract void doExtract(ReportletConf conf, ContentHandler handler, String refDesc)\n             throws SAXException;\n \n     @Override\n     @Transactional(readOnly = true)\n-    public void extract(final ContentHandler handler, final AtomicReference<String> status) throws SAXException {\n+    public void extract(final ContentHandler handler, final String refDesc) throws SAXException {\n         AttributesImpl atts = new AttributesImpl();\n         atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, conf.getName());\n         atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_CLASS, ReportXMLConst.XSD_STRING, getClass().getName());\n         handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORTLET, atts);\n \n-        doExtract(conf, handler, status);\n+        doExtract(conf, handler, refDesc);\n \n         handler.endElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORTLET);\n     }"},{"sha":"b605bdd99465885a826a2a489d5a178609519686","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/AuditReportlet.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FAuditReportlet.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicReference;\n import javax.sql.DataSource;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.audit.AuditEntry;\n@@ -47,8 +46,10 @@ public class AuditReportlet extends AbstractReportlet {\n \n     private DataSource datasource;\n \n-    private void doExtractConf(final ContentHandler handler, final AtomicReference<String> status) throws SAXException {\n-        status.set(\"Fetching \" + conf.getSize() + \" rows from the \" + AuditConfDAO.AUDIT_ENTRY_TABLE + \" table\");\n+    private void doExtractConf(final ContentHandler handler, final String refDesc) throws SAXException {\n+        setStatus(\n+                refDesc,\n+                \"Fetching \" + conf.getSize() + \" rows from the \" + AuditConfDAO.AUDIT_ENTRY_TABLE + \" table\");\n \n         JdbcTemplate jdbcTemplate = new JdbcTemplate(datasource);\n         jdbcTemplate.setMaxRows(conf.getSize());\n@@ -122,14 +123,14 @@ private void doExtractConf(final ContentHandler handler, final AtomicReference<S\n         }\n         handler.endElement(\"\", \"\", \"events\");\n \n-        status.set(\"Fetched \" + conf.getSize() + \" rows from the \" + AuditConfDAO.AUDIT_ENTRY_TABLE + \" table\");\n+        setStatus(refDesc, \"Fetched \" + conf.getSize() + \" rows from the \" + AuditConfDAO.AUDIT_ENTRY_TABLE + \" table\");\n     }\n \n     @Override\n     protected void doExtract(\n             final ReportletConf conf,\n             final ContentHandler handler,\n-            final AtomicReference<String> status)\n+            final String refDesc)\n             throws SAXException {\n \n         if (conf instanceof AuditReportletConf) {\n@@ -143,6 +144,6 @@ protected void doExtract(\n             throw new ReportException(new IllegalArgumentException(\"Could not get to DataSource\"));\n         }\n \n-        doExtractConf(handler, status);\n+        doExtractConf(handler, refDesc);\n     }\n }"},{"sha":"1004593e9e52f0204922201bef34520b81bff848","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/DefaultReportJobDelegate.java","status":"modified","additions":31,"deletions":13,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FDefaultReportJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -23,7 +23,6 @@\n import java.nio.charset.StandardCharsets;\n import java.time.OffsetDateTime;\n import java.util.Optional;\n-import java.util.concurrent.atomic.AtomicReference;\n import java.util.zip.Deflater;\n import java.util.zip.ZipEntry;\n import java.util.zip.ZipOutputStream;\n@@ -42,12 +41,15 @@\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n+import org.apache.syncope.core.provisioning.api.data.ReportDataBinder;\n+import org.apache.syncope.core.provisioning.api.event.JobStatusEvent;\n import org.apache.syncope.core.provisioning.api.job.report.ReportJobDelegate;\n import org.apache.syncope.core.provisioning.api.utils.ExceptionUtils2;\n import org.apache.syncope.core.spring.implementation.ImplementationManager;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Transactional;\n import org.xml.sax.helpers.AttributesImpl;\n \n@@ -73,7 +75,11 @@ public class DefaultReportJobDelegate implements ReportJobDelegate {\n \n     protected final EntityFactory entityFactory;\n \n-    protected final AtomicReference<String> status = new AtomicReference<>();\n+    protected final ReportDataBinder reportDataBinder;\n+\n+    protected final ApplicationEventPublisher publisher;\n+\n+    protected Report report;\n \n     protected boolean interrupt;\n \n@@ -82,16 +88,28 @@ public class DefaultReportJobDelegate implements ReportJobDelegate {\n     public DefaultReportJobDelegate(\n             final ReportDAO reportDAO,\n             final ReportExecDAO reportExecDAO,\n-            final EntityFactory entityFactory) {\n+            final EntityFactory entityFactory,\n+            final ReportDataBinder reportDataBinder,\n+            final ApplicationEventPublisher publisher) {\n \n         this.reportDAO = reportDAO;\n         this.reportExecDAO = reportExecDAO;\n         this.entityFactory = entityFactory;\n+        this.reportDataBinder = reportDataBinder;\n+        this.publisher = publisher;\n     }\n \n-    @Override\n-    public String currentStatus() {\n-        return status.get();\n+    /**\n+     * Sets status.\n+     * Updating job status is done via an event publishing mechanism\n+     * to allow underlying updates to be done in separate threads,\n+     * and not as part of the current transaction.\n+     *\n+     * @param status the status\n+     */\n+    protected void setStatus(final String status) {\n+        LOG.debug(\"Status update: {} {}\", reportDataBinder.buildRefDesc(report), status);\n+        publisher.publishEvent(new JobStatusEvent(this, reportDataBinder.buildRefDesc(report), status));\n     }\n \n     @Override\n@@ -107,7 +125,7 @@ public boolean isInterrupted() {\n     @Transactional\n     @Override\n     public void execute(final String reportKey, final String executor) throws JobExecutionException {\n-        Report report = reportDAO.find(reportKey);\n+        report = reportDAO.find(reportKey);\n         if (report == null) {\n             throw new JobExecutionException(\"Report \" + reportKey + \" not found\");\n         }\n@@ -153,7 +171,7 @@ public void execute(final String reportKey, final String executor) throws JobExe\n         execution.setStatus(ReportExecStatus.RUNNING);\n         execution = reportExecDAO.save(execution);\n \n-        status.set(\"Starting\");\n+        setStatus(\"Starting\");\n \n         // 3. actual report execution\n         StringBuilder reportExecutionMessage = new StringBuilder();\n@@ -164,15 +182,15 @@ public void execute(final String reportKey, final String executor) throws JobExe\n             atts.addAttribute(\"\", \"\", ReportXMLConst.ATTR_NAME, ReportXMLConst.XSD_STRING, report.getName());\n             handler.startElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT, atts);\n \n-            status.set(\"Generating report header\");\n+            setStatus(\"Generating report header\");\n \n             // iterate over reportlet instances defined for this report\n             for (int i = 0; i < report.getReportlets().size() && !interrupt; i++) {\n                 Optional<Reportlet> reportlet = ImplementationManager.buildReportlet(report.getReportlets().get(i));\n                 if (reportlet.isPresent()) {\n                     try {\n-                        status.set(\"Invoking reportlet \" + report.getReportlets().get(i).getKey());\n-                        reportlet.get().extract(handler, status);\n+                        setStatus(\"Invoking reportlet \" + report.getReportlets().get(i).getKey());\n+                        reportlet.get().extract(handler, reportDataBinder.buildRefDesc(report));\n                     } catch (Throwable t) {\n                         LOG.error(\"While executing reportlet {} for report {}\",\n                                 report.getReportlets().get(i).getKey(), reportKey, t);\n@@ -194,7 +212,7 @@ public void execute(final String reportKey, final String executor) throws JobExe\n             }\n \n             // report footer\n-            status.set(\"Generating report footer\");\n+            setStatus(\"Generating report footer\");\n \n             handler.endElement(\"\", \"\", ReportXMLConst.ELEMENT_REPORT);\n             handler.endDocument();\n@@ -208,7 +226,7 @@ public void execute(final String reportKey, final String executor) throws JobExe\n \n             throw new JobExecutionException(e, true);\n         } finally {\n-            status.set(\"Completed\");\n+            setStatus(null);\n \n             try {\n                 zos.closeEntry();"},{"sha":"b9b28a2fe5d6ecb099ad2a3fb6ee81d28a930015","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/GroupReportlet.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FGroupReportlet.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.EntityTOUtils;\n@@ -306,7 +305,7 @@ protected int count() {\n     protected void doExtract(\n             final ReportletConf conf,\n             final ContentHandler handler,\n-            final AtomicReference<String> status)\n+            final String refDesc)\n             throws SAXException {\n \n         if (conf instanceof GroupReportletConf) {\n@@ -320,10 +319,10 @@ protected void doExtract(\n         int total = count();\n         int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n-        status.set(\"Processing \" + total + \" groups in \" + pages + \" pages\");\n+        setStatus(refDesc, \"Processing \" + total + \" groups in \" + pages + \" pages\");\n \n         for (int page = 1; page <= pages; page++) {\n-            status.set(\"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n+            setStatus(refDesc, \"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n \n             List<Group> groups;\n             if (StringUtils.isBlank(this.conf.getMatchingCond())) {\n@@ -342,7 +341,7 @@ protected void doExtract(\n \n             doExtract(handler, groups);\n \n-            status.set(\"Processed \" + total + \" groups: page \" + page + \" of \" + pages);\n+            setStatus(refDesc, \"Processed \" + total + \" groups: page \" + page + \" of \" + pages);\n         }\n     }\n }"},{"sha":"a0473245f170a7d60346100d0e5b95443ea36d9e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -26,7 +26,6 @@\n import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -365,7 +364,7 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n     protected void doExtract(\n             final ReportletConf conf,\n             final ContentHandler handler,\n-            final AtomicReference<String> status)\n+            final String refDesc)\n             throws SAXException {\n \n         if (conf instanceof ReconciliationReportletConf) {\n@@ -380,13 +379,13 @@ protected void doExtract(\n             int total = userDAO.count();\n             int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n-            status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\n+            setStatus(refDesc, \"Processing \" + total + \" users in \" + pages + \" pages\");\n \n             atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.USER) + 's', atts);\n \n             for (int page = 1; page <= pages; page++) {\n-                status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n+                setStatus(refDesc, \"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n \n                 doExtract(handler, userDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE));\n             }\n@@ -401,13 +400,13 @@ protected void doExtract(\n                     AnyTypeKind.USER);\n             int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n-            status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\n+            setStatus(refDesc, \"Processing \" + total + \" users in \" + pages + \" pages\");\n \n             atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.USER) + 's', atts);\n \n             for (int page = 1; page <= pages; page++) {\n-                status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n+                setStatus(refDesc, \"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n \n                 doExtract(handler, searchDAO.search(\n                         realmDAO.getRoot(),\n@@ -427,13 +426,13 @@ protected void doExtract(\n             int total = groupDAO.count();\n             int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n-            status.set(\"Processing \" + total + \" groups in \" + pages + \" pages\");\n+            setStatus(refDesc, \"Processing \" + total + \" groups in \" + pages + \" pages\");\n \n             atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.GROUP) + 's', atts);\n \n             for (int page = 1; page <= pages; page++) {\n-                status.set(\"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n+                setStatus(refDesc, \"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n \n                 doExtract(handler, groupDAO.findAll(page, AnyDAO.DEFAULT_PAGE_SIZE));\n             }\n@@ -448,13 +447,13 @@ protected void doExtract(\n                     AnyTypeKind.GROUP);\n             int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n-            status.set(\"Processing \" + total + \" groups in \" + pages + \" pages\");\n+            setStatus(refDesc, \"Processing \" + total + \" groups in \" + pages + \" pages\");\n \n             atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n             handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.GROUP) + 's', atts);\n \n             for (int page = 1; page <= pages; page++) {\n-                status.set(\"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n+                setStatus(refDesc, \"Processing \" + total + \" groups: page \" + page + \" of \" + pages);\n \n                 doExtract(handler, searchDAO.search(\n                         realmDAO.getRoot(),\n@@ -487,15 +486,17 @@ protected void doExtract(\n                         AnyTypeKind.ANY_OBJECT);\n                 int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n-                status.set(\"Processing \" + total + \" any objects \" + anyType.getKey() + \" in \" + pages + \" pages\");\n+                setStatus(\n+                        refDesc,\n+                        \"Processing \" + total + \" any objects \" + anyType.getKey() + \" in \" + pages + \" pages\");\n \n                 atts.clear();\n                 atts.addAttribute(\"\", \"\", \"type\", ReportXMLConst.XSD_STRING, anyType.getKey());\n                 atts.addAttribute(\"\", \"\", \"total\", ReportXMLConst.XSD_INT, String.valueOf(total));\n                 handler.startElement(\"\", \"\", getAnyElementName(AnyTypeKind.ANY_OBJECT) + 's', atts);\n \n                 for (int page = 1; page <= pages; page++) {\n-                    status.set(\"Processing \" + total + \" any objects \" + anyType.getKey()\n+                    setStatus(refDesc, \"Processing \" + total + \" any objects \" + anyType.getKey()\n                             + \": page \" + page + \" of \" + pages);\n \n                     doExtract(handler, searchDAO.search("},{"sha":"23dab1798da27e2b601b149431fc57dd2c44df4d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/StaticReportlet.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FStaticReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FStaticReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FStaticReportlet.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.report;\n \n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.syncope.common.lib.report.ReportletConf;\n import org.apache.syncope.common.lib.report.StaticReportletConf;\n import org.apache.syncope.core.persistence.api.dao.ReportletConfClass;\n@@ -74,7 +73,7 @@ private static void doExtractConf(final ContentHandler handler) throws SAXExcept\n     protected void doExtract(\n             final ReportletConf conf,\n             final ContentHandler handler,\n-            final AtomicReference<String> status)\n+            final String refDesc)\n             throws SAXException {\n \n         if (conf instanceof StaticReportletConf) {"},{"sha":"af2c4a4c5cdc44528f0a20c12a4bd68c3ea8d64a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/UserReportlet.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FUserReportlet.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.List;\n import java.util.Map;\n-import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.EntityTOUtils;\n@@ -367,7 +366,7 @@ protected int count() {\n     protected void doExtract(\n             final ReportletConf conf,\n             final ContentHandler handler,\n-            final AtomicReference<String> status)\n+            final String refDesc)\n             throws SAXException {\n \n         if (conf instanceof UserReportletConf) {\n@@ -381,10 +380,10 @@ protected void doExtract(\n         int total = count();\n         int pages = (total / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n-        status.set(\"Processing \" + total + \" users in \" + pages + \" pages\");\n+        setStatus(refDesc, \"Processing \" + total + \" users in \" + pages + \" pages\");\n \n         for (int page = 1; page <= pages; page++) {\n-            status.set(\"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n+            setStatus(refDesc, \"Processing \" + total + \" users: page \" + page + \" of \" + pages);\n \n             List<User> users;\n             if (StringUtils.isBlank(this.conf.getMatchingCond())) {"},{"sha":"ac95b549403fc3c8d03e61bd22463a35193a910c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":13,"deletions":19,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -117,6 +117,15 @@ public void reportHandled(final String objectClass, final Name name) {\n         });\n         pair.setLeft(pair.getLeft() + 1);\n         pair.setRight(name.getNameValue());\n+\n+        if (!handled.isEmpty()) {\n+            StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n+            handled.forEach((k, v) -> builder.append(' ').append(v.getLeft()).append('\\t').\n+                    append(k).\n+                    append(\" / latest: \").append(v.getRight()).\n+                    append('\\n'));\n+            setStatus(builder.toString());\n+        }\n     }\n \n     @Override\n@@ -129,21 +138,6 @@ public void setInterrupted() {\n         this.interrupted = true;\n     }\n \n-    @Override\n-    public String currentStatus() {\n-        synchronized (status) {\n-            if (!handled.isEmpty()) {\n-                StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n-                handled.forEach((key, value) -> builder.append(' ').append(value.getLeft()).append('\\t').\n-                        append(key).\n-                        append(\" / latest: \").append(value.getRight()).\n-                        append('\\n'));\n-                status.set(builder.toString());\n-            }\n-        }\n-        return status.get();\n-    }\n-\n     protected void setGroupOwners(final GroupPullResultHandler ghandler) {\n         ghandler.getGroupOwnerMap().forEach((groupKey, ownerKey) -> {\n             Group group = groupDAO.find(groupKey);\n@@ -249,11 +243,11 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n-        status.set(\"Initialization completed\");\n+        setStatus(\"Initialization completed\");\n \n         // First realms...\n         if (pullTask.getResource().getOrgUnit() != null) {\n-            status.set(\"Pulling \" + pullTask.getResource().getOrgUnit().getObjectClass());\n+            setStatus(\"Pulling \" + pullTask.getResource().getOrgUnit().getObjectClass());\n \n             OrgUnit orgUnit = pullTask.getResource().getOrgUnit();\n \n@@ -315,7 +309,7 @@ protected String doExecuteProvisioning(\n                 filter(provision -> provision.getMapping() != null).sorted(provisionSorter).\n                 collect(Collectors.toList())) {\n \n-            status.set(\"Pulling \" + provision.getObjectClass());\n+            setStatus(\"Pulling \" + provision.getObjectClass());\n \n             AnyType anyType = anyTypeDAO.find(provision.getAnyType());\n \n@@ -416,7 +410,7 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n-        status.set(\"Pull done\");\n+        setStatus(\"Pull done\");\n \n         String result = createReport(profile.getResults(), pullTask.getResource(), dryRun);\n         LOG.debug(\"Pull result: {}\", result);"},{"sha":"10a966d2ea4fba52b3fb81d98ee4556ccd1b9045","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":12,"deletions":19,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.java.pushpull;\n \n import java.util.ArrayList;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n@@ -83,7 +82,7 @@ public class PushJobDelegate extends AbstractProvisioningJobDelegate<PushTask> {\n \n     protected ProvisioningProfile<PushTask, PushActions> profile;\n \n-    protected final Map<String, MutablePair<Integer, String>> handled = new HashMap<>();\n+    protected final Map<String, MutablePair<Integer, String>> handled = new ConcurrentHashMap<>();\n \n     protected final Map<String, PushActions> perContextActions = new ConcurrentHashMap<>();\n \n@@ -95,21 +94,15 @@ protected void reportHandled(final String anyType, final String key) {\n         }\n         pair.setLeft(pair.getLeft() + 1);\n         pair.setRight(key);\n-    }\n \n-    @Override\n-    public String currentStatus() {\n-        synchronized (status) {\n-            if (!handled.isEmpty()) {\n-                StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n-                handled.forEach((key, value) -> builder.append(' ').append(value.getLeft()).append('\\t').\n-                        append(key).\n-                        append(\" / latest: \").append(value.getRight()).\n-                        append('\\n'));\n-                status.set(builder.toString());\n-            }\n+        if (!handled.isEmpty()) {\n+            StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n+            handled.forEach((k, v) -> builder.append(' ').append(v.getLeft()).append('\\t').\n+                    append(k).\n+                    append(\" / latest: \").append(v.getRight()).\n+                    append('\\n'));\n+            setStatus(builder.toString());\n         }\n-        return status.get();\n     }\n \n     protected void doHandle(\n@@ -196,11 +189,11 @@ protected String doExecuteProvisioning(\n             }\n         }\n \n-        status.set(\"Initialization completed\");\n+        setStatus(\"Initialization completed\");\n \n         // First realms...\n         if (pushTask.getResource().getOrgUnit() != null) {\n-            status.set(\"Pushing realms\");\n+            setStatus(\"Pushing realms\");\n \n             RealmPushResultHandler handler = buildRealmHandler();\n             handler.setProfile(profile);\n@@ -226,7 +219,7 @@ protected String doExecuteProvisioning(\n                 filter(provision -> provision.getMapping() != null).sorted(provisionSorter).\n                 collect(Collectors.toList())) {\n \n-            status.set(\"Pushing \" + provision.getAnyType());\n+            setStatus(\"Pushing \" + provision.getAnyType());\n \n             AnyType anyType = anyTypeDAO.find(provision.getAnyType());\n \n@@ -283,7 +276,7 @@ protected String doExecuteProvisioning(\n             interrupted = true;\n         }\n \n-        status.set(\"Push done\");\n+        setStatus(\"Push done\");\n \n         String result = createReport(profile.getResults(), pushTask.getResource(), dryRun);\n         LOG.debug(\"Push result: {}\", result);"},{"sha":"c11e5421ed0a085a13319b82e9523c24dce89203","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.PullMode;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -112,6 +113,8 @@ public List<ProvisioningReport> pull(\n             profile.getActions().addAll(getPullActions(pullTaskTO.getActions().stream().\n                     map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n             profile.setExecutor(executor);\n+            this.task = profile.getTask();\n+            this.taskType = TaskType.PULL;\n \n             for (PullActions action : profile.getActions()) {\n                 action.beforeAll(profile);"},{"sha":"b40edf98613b3e62372a6ae5d722a40d995fda29","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePushJobDelegate.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePushJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n@@ -72,6 +73,9 @@ protected void before(\n                 map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n         profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n+        this.task = profile.getTask();\n+        this.taskType = TaskType.PUSH;\n+\n         for (PushActions action : profile.getActions()) {\n             action.beforeAll(profile);\n         }"},{"sha":"3b228d23e2eece2769f190aa7e2c6033354ce9db","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPullJobDelegate.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPullJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.PullMode;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -218,6 +219,9 @@ public List<ProvisioningReport> pull(\n                     virSchemaDAO.find(resource.getKey(), anyType.getKey()).stream().\n                             map(VirSchema::asLinkingMappingItem));\n \n+            this.task = profile.getTask();\n+            this.taskType = TaskType.PULL;\n+            \n             connector.fullReconciliation(\n                     new ObjectClass(provision.getObjectClass()),\n                     handler,"},{"sha":"7628132fe5f44d840371d2a9f620f2ae43b00902","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/stream/StreamPushJobDelegate.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2Fstream%2FStreamPushJobDelegate.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.IdMImplementationType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -146,6 +147,9 @@ public List<ProvisioningReport> push(\n                     map(implementationDAO::find).filter(Objects::nonNull).collect(Collectors.toList())));\n             profile.setConflictResolutionAction(ConflictResolutionAction.FIRSTMATCH);\n \n+            this.task = profile.getTask();\n+            this.taskType = TaskType.PUSH;\n+\n             for (PushActions action : profile.getActions()) {\n                 action.beforeAll(profile);\n             }"},{"sha":"47b4c2ae3b35cdf20927f41a2381f9f860447c2c","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/job/JobStatusUpdaterTest.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdaterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1cd7ccec1382a696d9e09b3454a227de9f55558/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdaterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FJobStatusUpdaterTest.java?ref=f1cd7ccec1382a696d9e09b3454a227de9f55558","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import org.apache.syncope.core.persistence.api.dao.JobStatusDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.provisioning.api.event.JobStatusEvent;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.apache.syncope.core.spring.security.SecureRandomUtils;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class JobStatusUpdaterTest extends AbstractTest {\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private JobStatusDAO jobStatusDAO;\n+\n+    @Test\n+    public void verifyUpdate() {\n+        JobStatusUpdater jobStatusUpdater = new JobStatusUpdater(jobStatusDAO, entityFactory);\n+        final String refDesc = \"JobRefDesc-\" + SecureRandomUtils.generateRandomNumber();\n+        jobStatusUpdater.update(new JobStatusEvent(this, refDesc, \"Started\"));\n+        assertNotNull(jobStatusDAO.find(refDesc));\n+        jobStatusUpdater.update(new JobStatusEvent(this, refDesc, null));\n+        assertNull(jobStatusDAO.find(refDesc));\n+    }\n+}"}]}