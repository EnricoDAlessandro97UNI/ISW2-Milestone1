{"sha":"d489e8c59a93bf137d75af4222b5b87f4c7ad925","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ0ODllOGM1OWE5M2JmMTM3ZDc1YWY0MjIyYjViODdmNGM3YWQ5MjU=","commit":{"author":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-05-22T07:46:31Z"},"committer":{"name":"giacomolm","email":"giacomolm@hotmail.it","date":"2015-05-22T07:46:31Z"},"message":"[SYNCOPE-660] Merge from 1_2_X; This closes #5","tree":{"sha":"f12f983c927f644c42f0626565fbe8b5515b4cf8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f12f983c927f644c42f0626565fbe8b5515b4cf8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d489e8c59a93bf137d75af4222b5b87f4c7ad925","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d489e8c59a93bf137d75af4222b5b87f4c7ad925","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d489e8c59a93bf137d75af4222b5b87f4c7ad925","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d489e8c59a93bf137d75af4222b5b87f4c7ad925/comments","author":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"committer":{"login":"giacomolm","id":4027829,"node_id":"MDQ6VXNlcjQwMjc4Mjk=","avatar_url":"https://avatars.githubusercontent.com/u/4027829?v=4","gravatar_id":"","url":"https://api.github.com/users/giacomolm","html_url":"https://github.com/giacomolm","followers_url":"https://api.github.com/users/giacomolm/followers","following_url":"https://api.github.com/users/giacomolm/following{/other_user}","gists_url":"https://api.github.com/users/giacomolm/gists{/gist_id}","starred_url":"https://api.github.com/users/giacomolm/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/giacomolm/subscriptions","organizations_url":"https://api.github.com/users/giacomolm/orgs","repos_url":"https://api.github.com/users/giacomolm/repos","events_url":"https://api.github.com/users/giacomolm/events{/privacy}","received_events_url":"https://api.github.com/users/giacomolm/received_events","type":"User","site_admin":false},"parents":[{"sha":"d19133ef55221978395a1a933c03a8ba91018f12","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d19133ef55221978395a1a933c03a8ba91018f12","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d19133ef55221978395a1a933c03a8ba91018f12"},{"sha":"b43c9c86d2004aecdba594c594a7eeee92c866a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b43c9c86d2004aecdba594c594a7eeee92c866a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b43c9c86d2004aecdba594c594a7eeee92c866a1"}],"stats":{"total":498,"additions":488,"deletions":10},"files":[{"sha":"920393b9682388f3e88d1663b4becbe229b9e7f4","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/JobAction.java","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobAction.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -0,0 +1,29 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum JobAction {\n+\n+    START,\n+    STOP;\n+\n+}"},{"sha":"3a43807a31ac9073c284be0c3bb48d33f47ed0dd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/JobStatusType.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FJobStatusType.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum JobStatusType {\n+\n+    ALL,\n+    RUNNING,\n+    SCHEDULED;\n+\n+}"},{"sha":"fc3719235047e13430f0933f89808dac63c20e84","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -24,6 +24,7 @@\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n+import javax.ws.rs.MatrixParam;\n import javax.ws.rs.POST;\n import javax.ws.rs.PUT;\n import javax.ws.rs.Path;\n@@ -38,6 +39,8 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n@@ -155,4 +158,25 @@ public interface ReportService extends JAXRSService {\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     Response exportExecutionResult(@NotNull @PathParam(\"executionKey\") Long executionKey,\n             @QueryParam(\"format\") ReportExecExportFormat fmt);\n+\n+    /**\n+     * List report jobs of the given type\n+     *\n+     * @param type of report job\n+     * @return List of ReportExecTO\n+     */\n+    @GET\n+    @Path(\"jobs\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<ReportExecTO> list(@MatrixParam(\"type\") JobStatusType type);\n+\n+    /**\n+     * Execute a control action on an existing report\n+     *\n+     * @param action\n+     * @param reportId id of report\n+     */\n+    @POST\n+    @Path(\"{reportId}\")\n+    void process(@QueryParam(\"action\") JobAction action, @PathParam(\"reportId\") Long reportId);\n }"},{"sha":"3d6c3f588ca910967cd355d3d3c77bd3ef9d2cd1","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n+import java.util.List;\n import javax.validation.constraints.NotNull;\n import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n@@ -43,6 +44,8 @@\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.beans.ListQuery;\n \n@@ -167,4 +170,25 @@ TaskExecTO execute(@NotNull @PathParam(\"taskKey\") Long taskKey,\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     @Consumes({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     BulkActionResult bulk(@NotNull BulkAction bulkAction);\n+\n+    /**\n+     * List task jobs of the given type\n+     *\n+     * @param type of task job\n+     * @return List of TaskExecTO\n+     */\n+    @GET\n+    @Path(\"jobs\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    List<TaskExecTO> list(@MatrixParam(\"type\") JobStatusType type);\n+\n+    /**\n+     * Execute a control action on an existing task\n+     *\n+     * @param action\n+     * @param taskId id of task\n+     */\n+    @POST\n+    @Path(\"{taskId}\")\n+    void process(@QueryParam(\"action\") JobAction action, @PathParam(\"taskId\") Long taskId);\n }"},{"sha":"9f20ee1bbf0c977f339e687a1f4bfbf2f2f1a69b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractJobLogic.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractJobLogic.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.to.AbstractExecTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobKey;\n+import org.quartz.Scheduler;\n+import org.quartz.SchedulerException;\n+import org.quartz.Trigger;\n+import org.quartz.impl.matchers.GroupMatcher;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+\n+abstract class AbstractJobLogic<T extends AbstractBaseBean> extends AbstractTransactionalLogic<T> {\n+\n+    @Autowired\n+    protected SchedulerFactoryBean scheduler;\n+\n+    protected abstract Long getKeyFromJobName(final JobKey jobKey);\n+\n+    public <E extends AbstractExecTO> List<E> list(final JobStatusType type, final Class<E> reference) {\n+        List<E> jobExecTOs = new ArrayList<E>();\n+\n+        switch (type) {\n+            case ALL:\n+                try {\n+                    for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n+                        for (JobKey jobKey : scheduler.getScheduler().getJobKeys(GroupMatcher.\n+                                jobGroupEquals(groupName))) {\n+\n+                            Long jobId = getKeyFromJobName(jobKey);\n+                            if (jobId != null) {\n+                                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+                                if (jobTriggers.size() > 0) {\n+                                    for (Trigger t : jobTriggers) {\n+                                        E jobExecTO = reference.newInstance();\n+                                        jobExecTO.setKey(jobId);\n+                                        jobExecTO.\n+                                                setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n+                                        jobExecTO.setStartDate(t.getStartTime());\n+                                        jobExecTOs.add(jobExecTO);\n+                                    }\n+                                } else {\n+                                    E jobExecTO = reference.newInstance();\n+                                    jobExecTO.setKey(jobId);\n+                                    jobExecTO.setStatus(\"Not Scheduled\");\n+                                    jobExecTOs.add(jobExecTO);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } catch (SchedulerException ex) {\n+                    LOG.debug(\"Problems during retrieving all scheduled jobs {}\", ex);\n+                } catch (InstantiationException ex) {\n+                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n+                } catch (IllegalAccessException ex) {\n+                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                }\n+                break;\n+            case RUNNING:\n+                try {\n+                    for (JobExecutionContext jec : scheduler.getScheduler().getCurrentlyExecutingJobs()) {\n+                        Long jobId = getKeyFromJobName(jec.getJobDetail().getKey());\n+                        if (jobId != null) {\n+                            E jobExecTO = reference.newInstance();\n+                            jobExecTO.setKey(jobId);\n+                            jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(jec.getTrigger().getKey()).\n+                                    name());\n+                            jobExecTO.setStartDate(jec.getFireTime());\n+                            jobExecTOs.add(jobExecTO);\n+                        }\n+                    }\n+                } catch (SchedulerException ex) {\n+                    LOG.debug(\"Problems during retrieving all currently executing jobs {}\", ex);\n+                } catch (InstantiationException ex) {\n+                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n+                } catch (IllegalAccessException ex) {\n+                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                }\n+                break;\n+            case SCHEDULED:\n+                try {\n+                    for (String groupName : scheduler.getScheduler().getJobGroupNames()) {\n+                        for (JobKey jobKey : scheduler.getScheduler().getJobKeys(GroupMatcher.\n+                                jobGroupEquals(groupName))) {\n+                            Long jobId = getKeyFromJobName(jobKey);\n+                            if (jobId != null) {\n+                                List<? extends Trigger> jobTriggers = scheduler.getScheduler().getTriggersOfJob(jobKey);\n+                                for (Trigger t : jobTriggers) {\n+                                    E jobExecTO = reference.newInstance();\n+                                    jobExecTO.setKey(jobId);\n+                                    jobExecTO.setStatus(scheduler.getScheduler().getTriggerState(t.getKey()).name());\n+                                    jobExecTO.setStartDate(t.getStartTime());\n+                                    jobExecTOs.add(jobExecTO);\n+                                }\n+                            }\n+                        }\n+                    }\n+                } catch (SchedulerException ex) {\n+                    LOG.debug(\"Problems during retrieving all scheduled jobs {}\", ex);\n+                } catch (InstantiationException ex) {\n+                    LOG.debug(\"Problems during instantiating {}  {}\", reference, ex);\n+                } catch (IllegalAccessException ex) {\n+                    LOG.debug(\"Problems during accessing {}  {}\", reference, ex);\n+                }\n+                break;\n+            default:\n+        }\n+        return jobExecTOs;\n+    }\n+\n+    protected void process(final JobAction action, final String jobName) {\n+\n+        if (jobName != null) {\n+            JobKey jobKey = new JobKey(jobName, Scheduler.DEFAULT_GROUP);\n+            try {\n+                if (scheduler.getScheduler().checkExists(jobKey)) {\n+                    switch (action) {\n+                        case START:\n+                            scheduler.getScheduler().triggerJob(jobKey);\n+                            break;\n+                        case STOP:\n+                            scheduler.getScheduler().interrupt(jobKey);\n+                            break;\n+                        default:\n+                    }\n+                }\n+            } catch (SchedulerException ex) {\n+                LOG.debug(\"Problems during {} operation on job with id {}\", action.toString(), ex);\n+            }\n+        }\n+    }\n+}"},{"sha":"33e2102c3a6dcbe50d764ddabea5a8f1fac74506","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":25,"deletions":5,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -63,19 +63,21 @@\n import org.apache.syncope.core.logic.report.ReportletConfClass;\n import org.apache.syncope.core.logic.report.TextSerializer;\n import org.apache.syncope.common.lib.CollectionUtils2;\n+import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.xmlgraphics.util.MimeConstants;\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ClassUtils;\n \n @Component\n-public class ReportLogic extends AbstractTransactionalLogic<ReportTO> {\n+public class ReportLogic extends AbstractJobLogic<ReportTO> {\n \n     @Autowired\n     private ReportDAO reportDAO;\n@@ -86,9 +88,6 @@ public class ReportLogic extends AbstractTransactionalLogic<ReportTO> {\n     @Autowired\n     private JobInstanceLoader jobInstanceLoader;\n \n-    @Autowired\n-    private SchedulerFactoryBean scheduler;\n-\n     @Autowired\n     private ReportDataBinder binder;\n \n@@ -401,4 +400,25 @@ protected ReportTO resolveReference(final Method method, final Object... args)\n \n         throw new UnresolvedReferenceException();\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_LIST + \"')\")\n+    public <E extends AbstractExecTO> List<E> list(final JobStatusType type, final Class<E> reference) {\n+        return super.list(type, reference);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.REPORT_EXECUTE + \"')\")\n+    public void process(final JobAction action, final Long reportKey) {\n+        Report report = reportDAO.find(reportKey);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportKey);\n+        }\n+        String jobName = JobNamer.getJobName(report);\n+        process(action, jobName);\n+    }\n+\n+    @Override\n+    protected Long getKeyFromJobName(final JobKey jobKey) {\n+        return JobNamer.getReportKeyFromJobName(jobKey.getName());\n+    }\n }"},{"sha":"e12c2dab3eedd2576b8c1beed7897bd9807a5829","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":25,"deletions":1,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -26,12 +26,15 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.PropagationMode;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n@@ -61,7 +64,7 @@\n import org.springframework.stereotype.Component;\n \n @Component\n-public class TaskLogic extends AbstractTransactionalLogic<AbstractTaskTO> {\n+public class TaskLogic extends AbstractJobLogic<AbstractTaskTO> {\n \n     @Autowired\n     private TaskDAO taskDAO;\n@@ -336,4 +339,25 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n \n         throw new UnresolvedReferenceException();\n     }\n+\n+    @Override\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_LIST + \"')\")\n+    public <E extends AbstractExecTO> List<E> list(final JobStatusType type, final Class<E> reference) {\n+        return super.list(type, reference);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + Entitlement.TASK_EXECUTE + \"')\")\n+    public void process(final JobAction action, final Long taskId) {\n+        Task task = taskDAO.find(taskId);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskId);\n+        }\n+        String jobName = JobNamer.getJobName(task);\n+        process(action, jobName);\n+    }\n+\n+    @Override\n+    protected Long getKeyFromJobName(final JobKey jobKey) {\n+        return JobNamer.getTaskKeyFromJobName(jobKey.getName());\n+    }\n }"},{"sha":"9ddf5630d57f59aedd1434711b297720d3dc3a57","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobNamer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobNamer.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -44,11 +44,11 @@ private static Long getIdFromJobName(final String name, final String pattern, fi\n         return result;\n     }\n \n-    public static Long getTaskIdFromJobName(final String name) {\n+    public static Long getTaskKeyFromJobName(final String name) {\n         return getIdFromJobName(name, \"taskJob[0-9]+\", 7);\n     }\n \n-    public static Long getReportIdFromJobName(final String name) {\n+    public static Long getReportKeyFromJobName(final String name) {\n         return getIdFromJobName(name, \"reportJob[0-9]+\", 9);\n     }\n "},{"sha":"3df89bcf18504a64308ae4a62e07151e5aea4ab5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/TaskJob.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FTaskJob.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.provisioning.api.job;\n \n import org.quartz.DisallowConcurrentExecution;\n-import org.quartz.Job;\n+import org.quartz.InterruptableJob;\n \n /**\n  * Interface for Quartz jobs bound to a given Task.\n  */\n @DisallowConcurrentExecution\n-public interface TaskJob extends Job {\n+public interface TaskJob extends InterruptableJob {\n \n     String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n "},{"sha":"688ca99c86d9b5195eba3ef5cf5b1e31fb674908","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AbstractTaskJob.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAbstractTaskJob.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.core.provisioning.java.job;\n \n+import java.text.SimpleDateFormat;\n import java.util.Date;\n+import java.util.Locale;\n+import java.util.concurrent.atomic.AtomicReference;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n@@ -33,6 +37,7 @@\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.JobExecutionContext;\n import org.quartz.JobExecutionException;\n+import org.quartz.UnableToInterruptJobException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -100,6 +105,11 @@ public enum Status {\n      */\n     protected Task task;\n \n+    /**\n+     * The current running thread containing the task to be executed.\n+     */\n+    protected AtomicReference<Thread> runningThread = new AtomicReference<Thread>();\n+\n     /**\n      * Task id setter.\n      *\n@@ -112,6 +122,7 @@ public void setTaskId(final Long taskId) {\n \n     @Override\n     public void execute(final JobExecutionContext context) throws JobExecutionException {\n+        this.runningThread.set(Thread.currentThread());\n         task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new JobExecutionException(\"Task \" + taskId + \" not found\");\n@@ -178,4 +189,16 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n     protected boolean hasToBeRegistered(final TaskExec execution) {\n         return false;\n     }\n+\n+    @Override\n+    public void interrupt() throws UnableToInterruptJobException {\n+        Thread thread = this.runningThread.getAndSet(null);\n+        if (thread != null) {\n+            LOG.info(\"Interrupting job time {} \", (new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN, Locale.\n+                    getDefault())).format(new Date()));\n+            thread.interrupt();\n+        } else {\n+            LOG.warn(\"Unable to retrieve the right thread related to the current job execution\");\n+        }\n+    }\n }"},{"sha":"4fe02ba250c9013a2dc1023c98b612f3a19d0489","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -28,6 +28,8 @@\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.wrap.ReportletConfClass;\n import org.apache.syncope.common.rest.api.CollectionWrapper;\n@@ -119,4 +121,14 @@ public void delete(final Long reportKey) {\n     public void deleteExecution(final Long executionKey) {\n         logic.deleteExecution(executionKey);\n     }\n+\n+    @Override\n+    public List<ReportExecTO> list(final JobStatusType type) {\n+        return logic.list(type, ReportExecTO.class);\n+    }\n+\n+    @Override\n+    public void process(final JobAction action, final Long reportId) {\n+        logic.process(action, reportId);\n+    }\n }"},{"sha":"957891ac74148be21cf5dcefbf045208c8ee9fc9","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.rest.cxf.service;\n \n import java.net.URI;\n+import java.util.List;\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n@@ -30,6 +31,8 @@\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -163,4 +166,14 @@ public BulkActionResult bulk(final BulkAction bulkAction) {\n \n         return result;\n     }\n+\n+    @Override\n+    public List<TaskExecTO> list(final JobStatusType type) {\n+        return logic.list(type, TaskExecTO.class);\n+    }\n+\n+    @Override\n+    public void process(final JobAction action, final Long taskId) {\n+        logic.process(action, taskId);\n+    }\n }"},{"sha":"a8f71844376d7454396de2b86001e1efc58925b0","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSampleJob.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSampleJob.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core.reference;\n+\n+import java.util.Date;\n+import org.apache.syncope.core.persistence.api.entity.task.SchedTask;\n+import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.core.provisioning.java.job.AbstractTaskJob;\n+import org.quartz.JobExecutionException;\n+\n+/**\n+ * Sample implementation for execution a scheduled task.\n+ *\n+ * @see SchedTask\n+ */\n+public class TestSampleJob extends AbstractTaskJob {\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        if (!(task instanceof SchedTask)) {\n+            throw new JobExecutionException(\"Task \" + taskId + \" isn't a SchedTask\");\n+        }\n+\n+        for (int i = 0; i < 10; i++) {\n+            LOG.debug(\"TestSampleJob#doExecute round {} time {}\", i, new Date().toString());\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException ex) {\n+                throw new JobExecutionException(\"Job interrupted\");\n+            }\n+        }\n+\n+        final SchedTask schedTask = (SchedTask) this.task;\n+\n+        LOG.info(\"TestSampleJob {}running [SchedTask {}]\", (dryRun\n+                ? \"dry \"\n+                : \"\"), schedTask.getKey());\n+\n+        return (dryRun\n+                ? \"DRY \"\n+                : \"\") + \"RUNNING\";\n+    }\n+\n+    @Override\n+    protected boolean hasToBeRegistered(final TaskExec execution) {\n+        return true;\n+    }\n+}"},{"sha":"ff5bff89526bf25970fe0f59c3f3a5c72ca75a04","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SchedTaskITCase.java","status":"modified","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d489e8c59a93bf137d75af4222b5b87f4c7ad925/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d489e8c59a93bf137d75af4222b5b87f4c7ad925/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSchedTaskITCase.java?ref=d489e8c59a93bf137d75af4222b5b87f4c7ad925","patch":"@@ -32,6 +32,9 @@\n import org.apache.syncope.common.lib.to.PushTaskTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.syncope.common.lib.types.JobAction;\n+import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.rest.api.service.TaskService;\n import org.apache.syncope.core.provisioning.api.job.SyncJob;\n@@ -104,4 +107,61 @@ public void issueSYNCOPE144() {\n         assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE660() {\n+        List<TaskExecTO> list = taskService.list(JobStatusType.ALL);\n+        int old_size = list.size();\n+\n+        list = taskService.list(JobStatusType.SCHEDULED);\n+\n+        SchedTaskTO task = new SchedTaskTO();\n+        task.setName(\"issueSYNCOPE660\");\n+        task.setDescription(\"issueSYNCOPE660 Description\");\n+        task.setJobClassName(TestSampleJob.class.getName());\n+\n+        Response response = taskService.create(task);\n+        SchedTaskTO actual = getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n+\n+        list = taskService.list(JobStatusType.ALL);\n+        assertEquals(list.size(), old_size + 1);\n+\n+        taskService.process(JobAction.START, actual.getKey());\n+\n+        int i = 0, maxit = 50;\n+\n+        // wait for task exec completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            list = taskService.list(JobStatusType.RUNNING);\n+\n+            assertNotNull(list);\n+            i++;\n+        } while (list.size() < 1 && i < maxit);\n+\n+        assertEquals(list.size(), 1);\n+\n+        taskService.process(JobAction.STOP, actual.getKey());\n+\n+        i = 0;\n+\n+        // wait for task exec completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            list = taskService.list(JobStatusType.RUNNING);\n+\n+            assertNotNull(list);\n+            i++;\n+        } while (list.size() >= 1 && i < maxit);\n+\n+        assertEquals(list.size(), 0);\n+    }\n }"}]}