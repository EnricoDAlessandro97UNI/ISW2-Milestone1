{"sha":"389922fed3ef8b7d58175f4a24292c1ff9300be3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM4OTkyMmZlZDNlZjhiN2Q1ODE3NWY0YTI0MjkyYzFmZjkzMDBiZTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-16T13:12:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-06-16T13:12:00Z"},"message":"[SYNCOPE-862] Aligning group's and anyObject's name validating regexp with IntAttrNameParser's patterns","tree":{"sha":"160e951d366ce76d5aa03a183c656a2d3ed561cb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/160e951d366ce76d5aa03a183c656a2d3ed561cb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/389922fed3ef8b7d58175f4a24292c1ff9300be3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/389922fed3ef8b7d58175f4a24292c1ff9300be3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/389922fed3ef8b7d58175f4a24292c1ff9300be3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/389922fed3ef8b7d58175f4a24292c1ff9300be3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"6738f09844de9274bd4abb9ec57a59e293168332","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6738f09844de9274bd4abb9ec57a59e293168332","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6738f09844de9274bd4abb9ec57a59e293168332"}],"stats":{"total":347,"additions":247,"deletions":100},"files":[{"sha":"1f2febdf808f127243e321589a4fd96ea93ec0ab","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -37,6 +37,8 @@ public final class SyncopeConstants {\n \n     public static final String ENUM_VALUES_SEPARATOR = \";\";\n \n+    public static final String NAME_PATTERN = \"[\\\\w \\\\-@.]+\";\n+\n     public static final String[] DATE_PATTERNS = {\n         \"yyyy-MM-dd'T'HH:mm:ssZ\",\n         \"EEE, dd MMM yyyy HH:mm:ss z\","},{"sha":"cbfc0c64207f43239341c929c81bcb9438abe406","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -30,6 +30,7 @@ public enum EntityViolationType {\n     InvalidConnPoolConf(\"org.apache.syncope.core.persistence.validation.conninstance.poolConf\"),\n     InvalidMapping(\"org.apache.syncope.core.persistence.validation.mapping\"),\n     InvalidKey(\"org.apache.syncope.core.persistence.validation.key\"),\n+    InvalidName(\"org.apache.syncope.core.persistence.validation.name\"),\n     InvalidNotification(\"org.apache.syncope.core.persistence.validation.notification\"),\n     InvalidPassword(\"org.apache.syncope.core.persistence.validation.user.password\"),\n     InvalidPolicy(\"org.apache.syncope.core.persistence.validation.policy\"),"},{"sha":"7b06253875b2105ede029d16261bc5ffafe04dea","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/anyobject/JPAAnyObject.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fanyobject%2FJPAAnyObject.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -44,10 +44,12 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.AnyObjectCheck;\n \n @Entity\n @Table(name = JPAAnyObject.TABLE)\n @Cacheable\n+@AnyObjectCheck\n public class JPAAnyObject\n         extends AbstractGroupableRelatable<AnyObject, AMembership, APlainAttr, AnyObject, ARelationship>\n         implements AnyObject {"},{"sha":"5b12d14e33cace3c0c647bb4ae06b6250c505c47","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AbstractValidator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAbstractValidator.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -21,6 +21,7 @@\n import java.lang.annotation.Annotation;\n import java.util.regex.Pattern;\n import javax.validation.ConstraintValidator;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -30,7 +31,7 @@\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractValidator.class);\n \n     protected static final Pattern KEY_PATTERN =\n-            Pattern.compile(\"^[\\\\w \\\\-@.]+\", Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n+            Pattern.compile(\"^\" + SyncopeConstants.NAME_PATTERN, Pattern.CASE_INSENSITIVE | Pattern.UNICODE_CASE);\n \n     @Override\n     public void initialize(final A annotation) {"},{"sha":"3962e426f4c9bb30a687d37426dab2f7a5509df4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyObjectCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectCheck.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ElementType.TYPE})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = AnyObjectValidator.class)\n+@Documented\n+public @interface AnyObjectCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.anyObject}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"67879b544e3f17ba9ac06c06b01bdf413fd4ee32","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/AnyObjectValidator.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FAnyObjectValidator.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+\n+public class AnyObjectValidator extends AbstractValidator<AnyObjectCheck, AnyObject> {\n+\n+    @Override\n+    public boolean isValid(final AnyObject anyObject, final ConstraintValidatorContext context) {\n+        context.disableDefaultConstraintViolation();\n+\n+        boolean isValid = KEY_PATTERN.matcher(anyObject.getName()).matches();\n+\n+        if (!isValid) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid any object name\")).\n+                    addPropertyNode(\"name\").addConstraintViolation();\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"50ed3b95d2679146aef6322db76970c73481ff06","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/GroupValidator.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGroupValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGroupValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FGroupValidator.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -44,6 +44,14 @@ public boolean isValid(final Group group, final ConstraintValidatorContext conte\n                     addPropertyNode(\"owner\").addConstraintViolation();\n         }\n \n+        if (isValid && !KEY_PATTERN.matcher(group.getName()).matches()) {\n+            isValid = false;\n+\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidName, \"Invalid group name\")).\n+                    addPropertyNode(\"name\").addConstraintViolation();\n+        }\n+\n         if (isValid) {\n             Set<AnyType> anyTypes = new HashSet<>();\n             for (ADynGroupMembership memb : group.getADynMemberships()) {"},{"sha":"248daf907929d4732545742b76d1893b02ba20c8","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/IntAttrNameParser.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FIntAttrNameParser.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n@@ -33,11 +34,14 @@\n \n public class IntAttrNameParser {\n \n-    private static final Pattern ENCLOSING_GROUP_PATTERN = Pattern.compile(\"^groups\\\\[([\\\\w]+)\\\\]\\\\.([\\\\w]+)\");\n+    private static final Pattern ENCLOSING_GROUP_PATTERN = Pattern.compile(\n+            \"^groups\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n \n-    private static final Pattern RELATED_ANY_OBJECT_PATTERN = Pattern.compile(\"^anyObjects\\\\[([\\\\w]+)\\\\]\\\\.([\\\\w]+)\");\n+    private static final Pattern RELATED_ANY_OBJECT_PATTERN = Pattern.compile(\n+            \"^anyObjects\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n \n-    private static final Pattern MEMBERSHIP_PATTERN = Pattern.compile(\"^memberships\\\\[([\\\\w]+)\\\\]\\\\.([\\\\w]+)\");\n+    private static final Pattern MEMBERSHIP_PATTERN = Pattern.compile(\n+            \"^memberships\\\\[(\" + SyncopeConstants.NAME_PATTERN + \")\\\\]\\\\.(.+)\");\n \n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;"},{"sha":"2162b42d88e7f4631c6b248034de2895d278294d","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":143,"deletions":96,"changes":239,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/389922fed3ef8b7d58175f4a24292c1ff9300be3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/389922fed3ef8b7d58175f4a24292c1ff9300be3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=389922fed3ef8b7d58175f4a24292c1ff9300be3","patch":"@@ -39,6 +39,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -57,6 +58,7 @@\n import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.DerSchemaTO;\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n@@ -368,27 +370,36 @@ public void link() {\n \n     @Test\n     public void unassign() {\n-        GroupTO actual = createGroup(getSampleTO(\"unassign\")).getAny();\n-        assertNotNull(actual);\n+        GroupTO groupTO = null;\n \n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n+        try {\n+            groupTO = createGroup(getSampleTO(\"unassign\")).getAny();\n+            assertNotNull(groupTO);\n \n-        DeassociationPatch deassociationPatch = new DeassociationPatch();\n-        deassociationPatch.setKey(actual.getKey());\n-        deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n-        deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+            assertNotNull(resourceService.readConnObject(\n+                    RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n \n-        assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+            DeassociationPatch deassociationPatch = new DeassociationPatch();\n+            deassociationPatch.setKey(groupTO.getKey());\n+            deassociationPatch.setAction(ResourceDeassociationAction.UNASSIGN);\n+            deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n \n-        actual = groupService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertTrue(actual.getResources().isEmpty());\n+            assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n-        try {\n-            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n+            groupTO = groupService.read(groupTO.getKey());\n+            assertNotNull(groupTO);\n+            assertTrue(groupTO.getResources().isEmpty());\n+\n+            try {\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+                fail();\n+            } catch (Exception e) {\n+                assertNotNull(e);\n+            }\n+        } finally {\n+            if (groupTO != null) {\n+                groupService.delete(groupTO.getKey());\n+            }\n         }\n     }\n \n@@ -397,126 +408,155 @@ public void assign() {\n         GroupTO groupTO = getSampleTO(\"assign\");\n         groupTO.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO).getAny();\n-        assertNotNull(actual);\n-\n         try {\n-            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n-        }\n+            groupTO = createGroup(groupTO).getAny();\n+            assertNotNull(groupTO);\n \n-        AssociationPatch associationPatch = new AssociationPatch();\n-        associationPatch.setKey(actual.getKey());\n-        associationPatch.setAction(ResourceAssociationAction.ASSIGN);\n-        associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+            try {\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+                fail();\n+            } catch (Exception e) {\n+                assertNotNull(e);\n+            }\n \n-        assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n+            AssociationPatch associationPatch = new AssociationPatch();\n+            associationPatch.setKey(groupTO.getKey());\n+            associationPatch.setAction(ResourceAssociationAction.ASSIGN);\n+            associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n \n-        actual = groupService.read(actual.getKey());\n-        assertFalse(actual.getResources().isEmpty());\n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n+            assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n+\n+            groupTO = groupService.read(groupTO.getKey());\n+            assertFalse(groupTO.getResources().isEmpty());\n+            assertNotNull(resourceService.readConnObject(\n+                    RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n+        } finally {\n+            if (groupTO.getKey() != null) {\n+                groupService.delete(groupTO.getKey());\n+            }\n+        }\n     }\n \n     @Test\n     public void deprovision() {\n-        GroupTO actual = createGroup(getSampleTO(\"deprovision\")).getAny();\n-        assertNotNull(actual);\n-        assertNotNull(actual.getKey());\n+        GroupTO groupTO = null;\n \n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n+        try {\n+            groupTO = createGroup(getSampleTO(\"deprovision\")).getAny();\n+            assertNotNull(groupTO);\n+            assertNotNull(groupTO.getKey());\n \n-        DeassociationPatch deassociationPatch = new DeassociationPatch();\n-        deassociationPatch.setKey(actual.getKey());\n-        deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n-        deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+            assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n \n-        assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+            DeassociationPatch deassociationPatch = new DeassociationPatch();\n+            deassociationPatch.setKey(groupTO.getKey());\n+            deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n+            deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n \n-        actual = groupService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertFalse(actual.getResources().isEmpty());\n+            assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n-        try {\n-            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n+            groupTO = groupService.read(groupTO.getKey());\n+            assertNotNull(groupTO);\n+            assertFalse(groupTO.getResources().isEmpty());\n+\n+            try {\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+                fail();\n+            } catch (Exception e) {\n+                assertNotNull(e);\n+            }\n+        } finally {\n+            if (groupTO != null) {\n+                groupService.delete(groupTO.getKey());\n+            }\n         }\n     }\n \n     @Test\n     public void provision() {\n-        GroupTO groupTO = getSampleTO(\"assign\" + getUUIDString());\n+        GroupTO groupTO = getSampleTO(\"provision\");\n         groupTO.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO).getAny();\n-        assertNotNull(actual);\n-\n         try {\n-            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n-        }\n+            groupTO = createGroup(groupTO).getAny();\n+            assertNotNull(groupTO);\n \n-        AssociationPatch associationPatch = new AssociationPatch();\n-        associationPatch.setKey(actual.getKey());\n-        associationPatch.setAction(ResourceAssociationAction.PROVISION);\n-        associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+            try {\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+                fail();\n+            } catch (Exception e) {\n+                assertNotNull(e);\n+            }\n \n-        assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n+            AssociationPatch associationPatch = new AssociationPatch();\n+            associationPatch.setKey(groupTO.getKey());\n+            associationPatch.setAction(ResourceAssociationAction.PROVISION);\n+            associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n \n-        actual = groupService.read(actual.getKey());\n-        assertTrue(actual.getResources().isEmpty());\n+            assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n+            groupTO = groupService.read(groupTO.getKey());\n+            assertTrue(groupTO.getResources().isEmpty());\n+\n+            assertNotNull(resourceService.readConnObject(\n+                    RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n+        } finally {\n+            if (groupTO.getKey() != null) {\n+                groupService.delete(groupTO.getKey());\n+            }\n+        }\n     }\n \n     @Test\n     public void deprovisionUnlinked() {\n-        GroupTO groupTO = getSampleTO(\"assign\" + getUUIDString());\n+        GroupTO groupTO = getSampleTO(\"deprovision\");\n         groupTO.getResources().clear();\n \n-        GroupTO actual = createGroup(groupTO).getAny();\n-        assertNotNull(actual);\n-\n         try {\n-            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n-        }\n+            groupTO = createGroup(groupTO).getAny();\n+            assertNotNull(groupTO);\n \n-        AssociationPatch associationPatch = new AssociationPatch();\n-        associationPatch.setKey(actual.getKey());\n-        associationPatch.setAction(ResourceAssociationAction.PROVISION);\n-        associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+            try {\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+                fail();\n+            } catch (Exception e) {\n+                assertNotNull(e);\n+            }\n \n-        assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n+            AssociationPatch associationPatch = new AssociationPatch();\n+            associationPatch.setKey(groupTO.getKey());\n+            associationPatch.setAction(ResourceAssociationAction.PROVISION);\n+            associationPatch.getResources().add(RESOURCE_NAME_LDAP);\n \n-        actual = groupService.read(actual.getKey());\n-        assertTrue(actual.getResources().isEmpty());\n+            assertNotNull(groupService.associate(associationPatch).readEntity(BulkActionResult.class));\n \n-        assertNotNull(resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey()));\n+            groupTO = groupService.read(groupTO.getKey());\n+            assertTrue(groupTO.getResources().isEmpty());\n \n-        DeassociationPatch deassociationPatch = new DeassociationPatch();\n-        deassociationPatch.setKey(actual.getKey());\n-        deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n-        deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n+            assertNotNull(resourceService.readConnObject(\n+                    RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey()));\n \n-        assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n+            DeassociationPatch deassociationPatch = new DeassociationPatch();\n+            deassociationPatch.setKey(groupTO.getKey());\n+            deassociationPatch.setAction(ResourceDeassociationAction.DEPROVISION);\n+            deassociationPatch.getResources().add(RESOURCE_NAME_LDAP);\n \n-        actual = groupService.read(actual.getKey());\n-        assertNotNull(actual);\n-        assertTrue(actual.getResources().isEmpty());\n+            assertNotNull(groupService.deassociate(deassociationPatch).readEntity(BulkActionResult.class));\n \n-        try {\n-            resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), actual.getKey());\n-            fail();\n-        } catch (Exception e) {\n-            assertNotNull(e);\n+            groupTO = groupService.read(groupTO.getKey());\n+            assertNotNull(groupTO);\n+            assertTrue(groupTO.getResources().isEmpty());\n+\n+            try {\n+                resourceService.readConnObject(RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), groupTO.getKey());\n+                fail();\n+            } catch (Exception e) {\n+                assertNotNull(e);\n+            }\n+        } finally {\n+            if (groupTO.getKey() != null) {\n+                groupService.delete(groupTO.getKey());\n+            }\n         }\n     }\n \n@@ -867,8 +907,14 @@ public void issue178() {\n \n     @Test\n     public void issueSYNCOPE632() {\n+        DerSchemaTO orig = schemaService.read(SchemaType.DERIVED, \"displayProperty\");\n+        DerSchemaTO modified = SerializationUtils.clone(orig);\n+        modified.setExpression(\"icon + '_' + show\");\n+\n         GroupTO groupTO = getSampleTO(\"lastGroup\");\n         try {\n+            schemaService.update(SchemaType.DERIVED, modified);\n+\n             // 0. create group\n             groupTO.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n             groupTO.getPlainAttrs().add(attrTO(\"show\", \"true\"));\n@@ -952,6 +998,7 @@ public void issueSYNCOPE632() {\n \n             assertEquals(1, entries);\n         } finally {\n+            schemaService.update(SchemaType.DERIVED, orig);\n             if (groupTO.getKey() != null) {\n                 groupService.delete(groupTO.getKey());\n             }"}]}