{"sha":"252eb543eaed80c3952f3e97c1745109486ab4b4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI1MmViNTQzZWFlZDgwYzM5NTJmM2U5N2MxNzQ1MTA5NDg2YWI0YjQ=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-05-29T07:21:27Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2018-05-29T08:12:28Z"},"message":"[SYNCOPE-1283] Added PullActions to handle the id provided by Azure in response, also during Pull Tasks","tree":{"sha":"a1635c99a29d3bc0860b41ca775405b6503ddec6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a1635c99a29d3bc0860b41ca775405b6503ddec6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/252eb543eaed80c3952f3e97c1745109486ab4b4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/252eb543eaed80c3952f3e97c1745109486ab4b4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/252eb543eaed80c3952f3e97c1745109486ab4b4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/252eb543eaed80c3952f3e97c1745109486ab4b4/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"e1515673509aac06d818e025ff05b821ab0d7798","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e1515673509aac06d818e025ff05b821ab0d7798","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e1515673509aac06d818e025ff05b821ab0d7798"}],"stats":{"total":221,"additions":221,"deletions":0},"files":[{"sha":"3b3d786e4b75d2abe52e16a5ab4760ab2709a791","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/AzurePullActions.java","status":"added","additions":221,"deletions":0,"changes":221,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/252eb543eaed80c3952f3e97c1745109486ab4b4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/252eb543eaed80c3952f3e97c1745109486ab4b4/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FAzurePullActions.java?ref=252eb543eaed80c3952f3e97c1745109486ab4b4","patch":"@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.GroupPatch;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidPlainAttrValueException;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningReport;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.quartz.JobExecutionException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+/**\n+ * This class is required during setup of an External Resource based on the ConnId\n+ * <a href=\"https://github.com/Tirasa/ConnIdAzureBundle\">Azure connector</a>.\n+ *\n+ * It manages:\n+ * <ol>\n+ * <li>the id provided by Azure in response to create, which will need to be used for all subsequent operations</li>\n+ * <li>the e-mail address</li>\n+ * </ol>\n+ */\n+public class AzurePullActions implements PullActions {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AzurePullActions.class);\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    private final Map<EntityTO, String> azureRefs = new HashMap<>();\n+\n+    protected String getEmailAttrName() {\n+        return \"mailNickname\";\n+    }\n+\n+    protected String getAzureUserIdSchema() {\n+        return \"AzureUserId\";\n+    }\n+\n+    protected String getAzureGroupIdSchema() {\n+        return \"AzureGroupId\";\n+    }\n+\n+    @Override\n+    public void beforeProvision(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity) throws JobExecutionException {\n+\n+        if (entity instanceof UserTO) {\n+            UserTO userTO = (UserTO) entity;\n+            if (userTO.getUsername() == null) {\n+                userTO.setUsername(delta.getObject().getName().getNameValue());\n+            }\n+        } else if (entity instanceof GroupTO) {\n+            GroupTO groupTO = (GroupTO) entity;\n+            if (groupTO.getName() == null) {\n+                groupTO.setName(delta.getObject().getName().getNameValue());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public <P extends AnyPatch> void beforeUpdate(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity,\n+            final P anyPatch) throws JobExecutionException {\n+\n+        if (anyPatch instanceof UserPatch) {\n+            UserPatch userPatch = (UserPatch) anyPatch;\n+            if (userPatch.getUsername() == null) {\n+                userPatch.setUsername(new StringReplacePatchItem.Builder().\n+                        value(delta.getObject().getName().getNameValue()).build());\n+            }\n+        } else if (entity instanceof GroupPatch) {\n+            GroupPatch groupPatch = (GroupPatch) entity;\n+            if (groupPatch.getName() == null) {\n+                groupPatch.setName(new StringReplacePatchItem.Builder().\n+                        value(delta.getObject().getName().getNameValue()).build());\n+            }\n+        }\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void after(\n+            final ProvisioningProfile<?, ?> profile,\n+            final SyncDelta delta,\n+            final EntityTO entity,\n+            final ProvisioningReport result) throws JobExecutionException {\n+\n+        if (!(entity instanceof UserTO) && !(entity instanceof GroupTO)) {\n+            return;\n+        }\n+\n+        azureRefs.put(entity, delta.getUid().getUidValue());\n+    }\n+\n+    @Transactional\n+    @Override\n+    public void afterAll(final ProvisioningProfile<?, ?> profile) throws JobExecutionException {\n+        for (Map.Entry<EntityTO, String> entry : azureRefs.entrySet()) {\n+            if (entry.getKey() instanceof UserTO) {\n+                User user = userDAO.find(entry.getKey().getKey());\n+                if (user == null) {\n+                    LOG.error(\"Could not find user {}, skipping\", entry.getKey().getKey());\n+                } else {\n+                    AnyUtils anyUtils = anyUtilsFactory.getInstance(user);\n+\n+                    // 1. stores the __UID__ received by Azure\n+                    PlainSchema azureId = plainSchemaDAO.find(getAzureUserIdSchema());\n+                    if (azureId == null) {\n+                        LOG.error(\"Could not find schema {}, skipping\", getAzureUserIdSchema());\n+                    } else {\n+                        UPlainAttr attr = user.getPlainAttr(getAzureUserIdSchema()).orElse(null);\n+                        if (attr == null) {\n+                            attr = entityFactory.newEntity(UPlainAttr.class);\n+                            attr.setSchema(azureId);\n+                            attr.setOwner(user);\n+                            user.add(attr);\n+\n+                            try {\n+                                attr.add(entry.getValue(), anyUtils);\n+                                userDAO.save(user);\n+                            } catch (InvalidPlainAttrValueException e) {\n+                                LOG.error(\"Invalid value for attribute {}: {}\", azureId.getKey(), entry.getValue(), e);\n+                            }\n+                        } else {\n+                            LOG.debug(\"User {} has already a {} assigned: {}\", user, getAzureUserIdSchema(),\n+                                    attr.getValuesAsStrings());\n+                        }\n+                    }\n+                }\n+            } else if (entry.getKey() instanceof GroupTO) {\n+                Group group = groupDAO.find(entry.getKey().getKey());\n+                if (group == null) {\n+                    LOG.error(\"Could not find group {}, skipping\", entry.getKey().getKey());\n+                } else {\n+                    AnyUtils anyUtils = anyUtilsFactory.getInstance(group);\n+\n+                    // 1. stores the __UID__ received by Azure\n+                    PlainSchema azureId = plainSchemaDAO.find(getAzureGroupIdSchema());\n+                    if (azureId == null) {\n+                        LOG.error(\"Could not find schema {}, skipping\", getAzureGroupIdSchema());\n+                    } else {\n+                        GPlainAttr attr = group.getPlainAttr(getAzureGroupIdSchema()).orElse(null);\n+                        if (attr == null) {\n+                            attr = entityFactory.newEntity(GPlainAttr.class);\n+                            attr.setSchema(azureId);\n+                            attr.setOwner(group);\n+                            group.add(attr);\n+\n+                            try {\n+                                attr.add(entry.getValue(), anyUtils);\n+                                groupDAO.save(group);\n+                            } catch (InvalidPlainAttrValueException e) {\n+                                LOG.error(\"Invalid value for attribute {}: {}\", azureId.getKey(), entry.getValue(), e);\n+                            }\n+                        } else {\n+                            LOG.debug(\"Group {} has already a {} assigned: {}\", group, getAzureGroupIdSchema(),\n+                                    attr.getValuesAsStrings());\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+}"}]}