{"sha":"8e8368e19772c5e39baa0a152e81a890f2cb6c3e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhlODM2OGUxOTc3MmM1ZTM5YmFhMGExNTJlODFhODkwZjJjYjZjM2U=","commit":{"author":{"name":"Andrea Patricelli","email":"andrea.patricelli@tirasa.net","date":"2015-12-31T09:38:28Z"},"committer":{"name":"Andrea Patricelli","email":"andrea.patricelli@tirasa.net","date":"2015-12-31T09:38:28Z"},"message":"[SYNCOPE-719] Added CSRF/XSRF protection by http cookie provided to angular","tree":{"sha":"c2c3812534210ad03963df5c9865885f9922632c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c2c3812534210ad03963df5c9865885f9922632c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8e8368e19772c5e39baa0a152e81a890f2cb6c3e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8e8368e19772c5e39baa0a152e81a890f2cb6c3e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8e8368e19772c5e39baa0a152e81a890f2cb6c3e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"6a93860d8deab4a2c1e5cf2c8e75e64c8c5eb27d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6a93860d8deab4a2c1e5cf2c8e75e64c8c5eb27d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6a93860d8deab4a2c1e5cf2c8e75e64c8c5eb27d"}],"stats":{"total":318,"additions":228,"deletions":90},"files":[{"sha":"4600166ea3386f4cdcdbfc27831c70e730394289","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserConstants.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserConstants.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -20,10 +20,14 @@\n \n public final class SyncopeEnduserConstants {\n \n-    public static final String CAPTCHA_SESSION_KEY  = \"captcha\";\n+    public static final String CAPTCHA_SESSION_KEY = \"captcha\";\n+\n+    public static final String XSRF_COOKIE = \"XSRF-TOKEN\";\n+\n+    public static final String XSRF_HEADER_NAME = \"X-XSRF-TOKEN\";\n \n     private SyncopeEnduserConstants() {\n         // private constructor for utility class\n     }\n-    \n+\n }"},{"sha":"cb5143609ae78d389b1cdccbd6e42e3aeb5182f1","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -37,6 +37,7 @@\n import org.apache.wicket.Session;\n import org.apache.wicket.protocol.http.WebSession;\n import org.apache.wicket.request.Request;\n+import org.apache.wicket.util.cookies.CookieUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -62,13 +63,17 @@ public class SyncopeEnduserSession extends WebSession {\n     private UserTO selfTO;\n \n     private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<Class<?>, Object>());\n+    \n+    private final CookieUtils cookieUtils;\n \n     public static SyncopeEnduserSession get() {\n         return (SyncopeEnduserSession) Session.get();\n     }\n \n     public SyncopeEnduserSession(final Request request) {\n         super(request);\n+        // define cookie utility to manage application cookies\n+        cookieUtils = new CookieUtils();\n \n         anonymousClient = SyncopeEnduserApplication.get().getClientFactory().create(\n                 SyncopeEnduserApplication.get().getAnonymousUser(),\n@@ -173,4 +178,8 @@ public DateFormat getDateFormat() {\n         return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);\n     }\n \n+    public CookieUtils getCookieUtils() {\n+        return cookieUtils;\n+    }\n+\n }"},{"sha":"3f9e037f78f8befec36164b0f83bdfcb4e6173d1","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/AbstractBaseResource.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FAbstractBaseResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n+import javax.servlet.http.HttpServletRequest;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.wicket.request.resource.AbstractResource;\n@@ -43,4 +46,11 @@ protected final boolean isSelfRegistrationAllowed() {\n                 : result;\n     }\n \n+    protected final boolean xsrfCheck(final HttpServletRequest request) {\n+        final String requestXSRFHeader = request.getHeader(SyncopeEnduserConstants.XSRF_HEADER_NAME);\n+        return StringUtils.isNotBlank(requestXSRFHeader)\n+                && SyncopeEnduserSession.get().getCookieUtils().getCookie(SyncopeEnduserConstants.XSRF_COOKIE).\n+                getValue().equals(requestXSRFHeader);\n+    }\n+\n }"},{"sha":"d8566296a9ee628ee2e65b4b83e3a9fa410f91aa","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/CaptchaResource.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -21,7 +21,6 @@\n import javax.servlet.http.HttpServletRequest;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.wicket.extensions.markup.html.captcha.CaptchaImageResource;\n-import org.apache.wicket.request.Request;\n import org.apache.wicket.request.cycle.RequestCycle;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -49,11 +48,10 @@ public static String randomString(final int min, final int max) {\n     protected byte[] render() {\n         LOG.info(\"Generate captcha\");\n         final String captcha = randomString(6, 8);\n-        Request request = RequestCycle.get().getRequest();\n-        HttpServletRequest httpRequest = ((HttpServletRequest) request.getContainerRequest());\n+        HttpServletRequest httpRequest = ((HttpServletRequest) RequestCycle.get().getRequest().getContainerRequest());\n         // store the captcha in the current session\n         httpRequest.getSession().setAttribute(SyncopeEnduserConstants.CAPTCHA_SESSION_KEY, captcha);\n-        \n+\n         getChallengeIdModel().setObject(captcha);\n         return super.render();\n     }"},{"sha":"e8749b8323195243e952968a05c6e3e23464c148","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/CaptchaValidateResource.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaValidateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaValidateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FCaptchaValidateResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.model.CaptchaRequest;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.util.io.IOUtils;\n import org.slf4j.Logger;\n@@ -41,9 +42,16 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n \n         LOG.debug(\"Validate captcha request\");\n \n-        ResourceResponse response = new ResourceResponse();\n+        AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n         try {\n             HttpServletRequest currentRequest = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+\n+            if (!xsrfCheck(currentRequest)) {\n+                LOG.error(\"XSRF TOKEN does not match\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n+                return response;\n+            }\n+\n             final CaptchaRequest enteredCaptcha = POJOHelper.deserialize(IOUtils.toString(currentRequest.\n                     getInputStream()), CaptchaRequest.class);\n \n@@ -57,7 +65,7 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n                 LOG.info(\"Could not validate captcha: current session captcha or inserted captcha are empty or null\");\n                 response.setError(Response.Status.BAD_REQUEST.getStatusCode(),\n                         \"ErrorMessage{{ Could not validate captcha: current session captcha or entered captcha are \"\n-                                + \"empty or null }}\");\n+                        + \"empty or null }}\");\n             } else {\n                 LOG.info(\"Is entered captcha equal to current session captcha? {}\", enteredCaptcha.getValue().equals(\n                         currentCaptcha));"},{"sha":"1449cf011430b5388a41d4ca42b13125d549044b","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -20,10 +20,14 @@\n \n import java.io.IOException;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.adapters.SyncopeTOAdapter;\n+import org.apache.syncope.client.lib.SaltGenerator;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.wicket.request.resource.IResource;\n+import org.apache.wicket.util.cookies.CookieUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -45,6 +49,15 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n         ResourceResponse response = new ResourceResponse();\n \n         try {\n+            final CookieUtils sessionCookieUtils = SyncopeEnduserSession.get().getCookieUtils();\n+//            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+            // set XSRF_TOKEN cookie\n+            if (sessionCookieUtils.getCookie(SyncopeEnduserConstants.XSRF_COOKIE) == null || StringUtils.isBlank(\n+                    sessionCookieUtils.getCookie(SyncopeEnduserConstants.XSRF_COOKIE).getValue())) {\n+                LOG.info(\"Set XSRF-TOKEN cookie\");\n+                sessionCookieUtils.save(SyncopeEnduserConstants.XSRF_COOKIE, SaltGenerator.generate(\n+                        SyncopeEnduserSession.get().getId()));\n+            }\n             response.setWriteCallback(new WriteCallback() {\n \n                 @Override\n@@ -53,7 +66,7 @@ public void writeData(final IResource.Attributes attributes) throws IOException\n                             SyncopeEnduserSession.get().getSyncopeTO())));\n                 }\n             });\n-        response.setStatusCode(Response.Status.OK.getStatusCode());\n+            response.setStatusCode(Response.Status.OK.getStatusCode());\n         } catch (Exception e) {\n             LOG.error(\"Error retrieving syncope info\", e);\n             response.setError(Response.Status.INTERNAL_SERVER_ERROR.getStatusCode(), new StringBuilder()"},{"sha":"28d19a33b9c63e41b4681385d1db3e1a2a250a39","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/LoginResource.java","status":"modified","additions":25,"deletions":17,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLoginResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLoginResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLoginResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -25,6 +25,8 @@\n import org.apache.syncope.client.enduser.model.Credentials;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.wicket.request.resource.AbstractResource;\n+import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.util.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -39,12 +41,19 @@ public LoginResource() {\n     }\n \n     @Override\n-    protected ResourceResponse newResourceResponse(final Attributes attributes) {\n+    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n \n-        ResourceResponse response = new ResourceResponse();\n+        AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n \n         try {\n             HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+\n+            if (!xsrfCheck(request)) {\n+                LOG.error(\"XSRF TOKEN does not match\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n+                return response;\n+            }\n+\n             Credentials credentials = POJOHelper.deserialize(IOUtils.toString(request.getInputStream()),\n                     Credentials.class);\n             final String username = credentials.getUsername();\n@@ -56,22 +65,21 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                 LOG.error(\"Could not read credentials from request: username is blank!\");\n                 response.setError(Response.Status.BAD_REQUEST.getStatusCode(),\n                         \"ErrorMessage{{ Could not read credentials from request: username is blank! }}\");\n-            } else // authenticate user\n-             if (SyncopeEnduserSession.get().authenticate(username, password)) {\n-                    // user has been authenticated successfully\n-                    response.setWriteCallback(new WriteCallback() {\n+            } else if (SyncopeEnduserSession.get().authenticate(username, password)) {\n+                // user has been authenticated successfully\n+                response.setWriteCallback(new WriteCallback() {\n \n-                        @Override\n-                        public void writeData(final Attributes attributes) throws IOException {\n-                            attributes.getResponse().write(username);\n-                        }\n-                    });\n-                    response.setStatusCode(Response.Status.OK.getStatusCode());\n-                } else {\n-                    // not authenticated\n-                    response.setError(Response.Status.UNAUTHORIZED.getStatusCode(),\n-                            \"ErrorMessage{{ Username or password are incorrect }}\");\n-                }\n+                    @Override\n+                    public void writeData(final Attributes attributes) throws IOException {\n+                        attributes.getResponse().write(username);\n+                    }\n+                });\n+                response.setStatusCode(Response.Status.OK.getStatusCode());\n+            } else {\n+                // not authenticated\n+                response.setError(Response.Status.UNAUTHORIZED.getStatusCode(),\n+                        \"ErrorMessage{{ Username or password are incorrect }}\");\n+            }\n         } catch (Exception e) {\n             LOG.error(\"Could not read credentials from request\", e);\n             response.setError(Response.Status.BAD_REQUEST.getStatusCode(), new StringBuilder()"},{"sha":"310133297850f448856a5004ab6bafb345e3b3d2","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/LogoutResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLogoutResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLogoutResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FLogoutResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -31,7 +31,7 @@ public class LogoutResource extends AbstractBaseResource {\n     @Override\n     protected ResourceResponse newResourceResponse(final Attributes attributes) {\n \n-        LOG.debug(\"Enduser logout\");\n+        LOG.debug(\"Logout from enduser application\");\n         \n         SyncopeEnduserSession.get().invalidate();\n         "},{"sha":"12ce2f1a34e86a0aebcc97d584922e6f5dd26d57","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.model.SchemaResponse;\n@@ -61,6 +62,14 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n         AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n \n         try {\n+            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+\n+            if (!xsrfCheck(request)) {\n+                LOG.error(\"XSRF TOKEN does not match\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n+                return response;\n+            }\n+\n             final AnyTypeTO anyTypeUserTO = anyTypeService.read(AnyTypeKind.USER.name());\n \n             final List<PlainSchemaTO> plainSchemas = schemaService.list("},{"sha":"3f6c0eafa77a76d9984b0c6a7ff722b9a1e1ab59","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SecurityQuestionResource.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSecurityQuestionResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n@@ -51,6 +52,14 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n \n         try {\n \n+            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+\n+            if (!xsrfCheck(request)) {\n+                LOG.error(\"XSRF TOKEN does not match\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n+                return response;\n+            }\n+\n             final List<SecurityQuestionTO> securityQuestionTOs = securityQuestionService.list();\n \n             response.setWriteCallback(new AbstractResource.WriteCallback() {"},{"sha":"350d442591ebdd2a260f4bd1af7972847c6a8a7e","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SyncopeResourceResource.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSyncopeResourceResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSyncopeResourceResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSyncopeResourceResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.adapters.ResourceTOAdapter;\n@@ -54,6 +55,14 @@ protected AbstractResource.ResourceResponse newResourceResponse(final IResource.\n         AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n \n         try {\n+\n+            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+            if (!xsrfCheck(request)) {\n+                LOG.error(\"XSRF TOKEN does not match\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n+                return response;\n+            }\n+\n             final List<ResourceTO> resourceTOs = resourceService.list();\n \n             response.setWriteCallback(new AbstractResource.WriteCallback() {"},{"sha":"42b45fc6ca9115d97d5476821c0266f28f6096d5","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -54,6 +54,12 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n         try {\n             HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n \n+            if (!xsrfCheck(request)) {\n+                LOG.error(\"XSRF TOKEN is not matching\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN is not matching\");\n+                return response;\n+            }\n+            \n             final UserTORequest userTORequest = POJOHelper.deserialize(IOUtils.toString(request.getInputStream()),\n                     UserTORequest.class);\n "},{"sha":"fc4413be9daa5285bc71b817ee5556b493350442","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -19,15 +19,17 @@\n package org.apache.syncope.client.enduser.resources;\n \n import java.io.IOException;\n+import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.adapters.UserTOAdapter;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.wicket.request.resource.AbstractResource;\n+import org.apache.wicket.request.resource.IResource;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class UserSelfReadResource extends AbstractResource {\n+public class UserSelfReadResource extends AbstractBaseResource {\n \n     private static final long serialVersionUID = -9184809392631523912L;\n \n@@ -43,13 +45,20 @@ public UserSelfReadResource() {\n     }\n \n     @Override\n-    protected ResourceResponse newResourceResponse(final Attributes attributes) {\n+    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n \n         LOG.debug(\"Requested user self information\");\n \n         AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n         try {\n \n+            HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+            if (!xsrfCheck(request)) {\n+                LOG.error(\"XSRF TOKEN does not match\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n+                return response;\n+            }\n+\n             final String selfTOJson = POJOHelper.serialize(userTOAdapter.toUserTORequest(SyncopeEnduserSession.get().\n                     getSelfTO()));\n "},{"sha":"a44d53ebd83e8555b8a732a4c428bf237a056ac2","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -27,6 +27,8 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.wicket.request.resource.AbstractResource;\n+import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.util.io.IOUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -47,12 +49,17 @@ public UserSelfUpdateResource() {\n     }\n \n     @Override\n-    protected ResourceResponse newResourceResponse(final Attributes attributes) {\n+    protected ResourceResponse newResourceResponse(final IResource.Attributes attributes) {\n \n-        ResourceResponse response = new ResourceResponse();\n+        AbstractResource.ResourceResponse response = new AbstractResource.ResourceResponse();\n \n         try {\n             HttpServletRequest request = (HttpServletRequest) attributes.getRequest().getContainerRequest();\n+            if (!xsrfCheck(request)) {\n+                LOG.error(\"XSRF TOKEN does not match\");\n+                response.setError(Response.Status.BAD_REQUEST.getStatusCode(), \"XSRF TOKEN does not match\");\n+                return response;\n+            }\n \n             final UserTORequest userTOResponse = POJOHelper.deserialize(IOUtils.toString(request.getInputStream()),\n                     UserTORequest.class);"},{"sha":"b6844554926f4aae9fcf11857198a979ad18bfe9","filename":"client/enduser/src/main/resources/META-INF/resources/app/index.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Findex.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Findex.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Findex.html?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -41,7 +41,7 @@\n     <![endif]-->\n \n     <!--<div ng-view ng-cloak ng-controller=\"ApplicationController\"></div>-->\n-    <div ui-view ng-cloak ng-controller=\"ApplicationController\"></div>\n+    <div ui-view ng-cloak ng-controller=\"ApplicationController\" ng-init=\"initApplication()\"></div>\n \n     <!--    <footer id=\"footer\" class=\"hidden-print\">\n           <ul class=\"nav pull-right\">"},{"sha":"da0e46fe662f6dda1d79e177cb60222897a8b424","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/app.js","status":"modified","additions":40,"deletions":12,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -84,13 +84,13 @@ app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', 'growlProvi\n               templateUrl: 'views/user-plain-schemas.html'\n             })\n             .state('create.derivedSchemas', {\n-             url: '/derivedSchemas',\n-             templateUrl: 'views/user-derived-schemas.html'\n-             })\n-             .state('create.virtualSchemas', {\n-             url: '/virtualSchemas',\n-             templateUrl: 'views/user-virtual-schemas.html'\n-             })\n+              url: '/derivedSchemas',\n+              templateUrl: 'views/user-derived-schemas.html'\n+            })\n+            .state('create.virtualSchemas', {\n+              url: '/virtualSchemas',\n+              templateUrl: 'views/user-virtual-schemas.html'\n+            })\n             .state('create.resources', {\n               url: '/resources',\n               templateUrl: 'views/user-resources.html'\n@@ -181,6 +181,8 @@ app.config(['$stateProvider', '$urlRouterProvider', '$httpProvider', 'growlProvi\n \n     // HTTP service configuration\n     $httpProvider.defaults.withCredentials = true;\n+    $httpProvider.defaults.xsrfCookieName = 'XSRF-TOKEN';\n+    $httpProvider.defaults.xsrfHeaderName = 'X-XSRF-TOKEN';\n \n     $httpProvider.interceptors.push(function ($q, $rootScope, $location) {\n       var numLoadings = 0;\n@@ -268,23 +270,49 @@ app.run(['$rootScope', '$location', '$cookies', '$state',\n //        });\n   }]);\n \n-app.controller('ApplicationController', function ($scope) {\n+app.controller('ApplicationController', ['$scope', '$rootScope', 'InfoService', function ($scope, $rootScope,\n+          InfoService) {\n // DO NOTHING\n+\n+// get syncope info and set cookie, first call\n+    $scope.initApplication = function () {\n+// call info service\n+      $rootScope.selfRegAllowed = false;\n+      $rootScope.pwdResetAllowed = false;\n+      $rootScope.version = \"\";\n+      //info settings are initialized every time an user open the login page\n+      InfoService.getInfo().then(\n+              function (response) {\n+                $rootScope.pwdResetAllowed = response.pwdResetAllowed;\n+                $rootScope.selfRegAllowed = response.selfRegAllowed;\n+                $rootScope.version = response.version;\n+              },\n+              function (response) {\n+                console.log(\"Something went wrong while accessing info resource\", response);\n+              });\n+\n+      $rootScope.isSelfRegAllowed = function () {\n+        return $rootScope.selfRegAllowed === true;\n+      };\n+      $rootScope.isPwdResetAllowed = function () {\n+        return $rootScope.pwdResetAllowed === true;\n+      };\n+      $rootScope.getVersion = function () {\n+        return $rootScope.version;\n+      };\n //  $scope.$on('success', function (event, args) {\n //    console.log(\"IN CONFIG EVENTO: \", event)\n //    $scope.$broadcast(\"error\", \"success\");\n //  });\n-});\n-\n+    }\n+  }]);\n app.factory('AuthenticationHelper', ['$q', '$rootScope',\n   function ($q, $rootScope) {\n     return {\n       authenticated: function () {\n \n         var currentUser = $rootScope.currentUser;\n-\n         console.log(\"AuthenticationHelper, currentUser: \", currentUser);\n-\n         if (angular.isDefined(currentUser) && currentUser) {\n           return true;\n         } else {"},{"sha":"46ac8ea6df837b1962eeb7c36ddd4f83acbb44b6","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/controllers/LoginController.js","status":"modified","additions":6,"deletions":43,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FLoginController.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FLoginController.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FLoginController.js?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -20,8 +20,7 @@\n 'use strict';\n \n angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '$http', '$location', '$cookies',\n-  'AuthService', 'growl', 'InfoService', function ($scope, $rootScope, $http, $location, $cookies, AuthService, growl,\n-          InfoService) {\n+  'AuthService', 'growl', function ($scope, $rootScope, $http, $location, $cookies, AuthService, growl) {\n \n     $scope.credentials = {\n       username: '',\n@@ -31,19 +30,14 @@ angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '\n \n     $scope.login = function (credentials) {\n \n-      console.log(\"CREDENTIALS FROM PAGE: \", credentials);\n-      console.log(\"AUTHSERVICE: \", AuthService);\n-\n       AuthService.login($scope.credentials).then(function (user) {\n-        console.log(\"LOGIN SUCCESS FOR: \", user);\n-        console.log(\"DOPO AVER SETTATO CURRENT USER: \", $rootScope.currentUser);\n-        console.log(\"COOKIE CURRENT USER: \", $cookies.get('currentUser'));\n+        console.log(\"Login success for: \", user);\n         // reset error message\n         $scope.credentials.errorMessage = '';\n         // got to update page\n         $location.path(\"/self/update\");\n       }, function (response) {\n-        console.log(\"LOGIN FAILED: \", response);\n+        console.log(\"Login failed for: \", response);\n         var errorMessage;\n         // parse error response \n         if (response !== undefined) {\n@@ -56,13 +50,10 @@ angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '\n     };\n \n     $scope.logout = function () {\n-\n-      console.log(\"PERFORMING LOGOUT\");\n-\n       AuthService.logout().then(function (response) {\n-        console.log(\"LOGOUT SUCCESS: \", response);\n-      }, function () {\n-        console.log(\"LOGOUT FAILED\");\n+        console.log(\"Logout successfully\");\n+      }, function (response) {\n+        console.log(\"Logout failed: \", response);\n       });\n     };\n \n@@ -96,32 +87,4 @@ angular.module(\"login\").controller(\"LoginController\", ['$scope', '$rootScope', '\n         console.log(\"schemaAPI response: \", data);\n       });\n     };\n-\n-    $scope.selfRegAllowed = false;\n-    $scope.pwdResetAllowed = false;\n-    $scope.version = \"\";\n-    \n-    //info settings are initialized every time an user open the login page\n-    InfoService.getInfo().then(\n-            function (response) {\n-              $scope.pwdResetAllowed = response.pwdResetAllowed;              \n-              $scope.selfRegAllowed = response.selfRegAllowed;\n-              $scope.version = response.version;\n-            },\n-            function () {\n-              console.log(\"Something went wrong while accessing info resource\", response);\n-            });\n-            \n-    $scope.isSelfRegAllowed = function () {\n-      return $scope.selfRegAllowed == true;\n-    };\n-    \n-    $scope.isPwdResetAllowed = function () {\n-      return $scope.pwdResetAllowed == true;\n-    };\n-\n-    $scope.getVersion = function () {\n-      return $scope.version;\n-    };\n-\n   }]);"},{"sha":"9c58cf7120498c6c07fdbb86f2057210b077df8d","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/services/infoService.js","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FinfoService.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FinfoService.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FinfoService.js?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -19,7 +19,7 @@\n \n 'use strict';\n \n-angular.module('info')\n+angular.module('SyncopeEnduserApp')\n         .factory('InfoService', ['$resource', '$q', '$http',\n           function ($resource, $q, $http) {\n \n@@ -32,6 +32,7 @@ angular.module('info')\n                         return response.data;\n                       }, function (response) {\n                         console.log(\"Something went wrong while retrieving info resource\", response);\n+                        return $q.reject(response.data || response.statusText);\n                       });\n             };\n "},{"sha":"a684ec6496b4d768323d0d19b2987f16ffd0b1ae","filename":"client/enduser/src/main/resources/META-INF/resources/app/views/self.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fviews%2Fself.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fviews%2Fself.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fviews%2Fself.html?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -84,14 +84,14 @@\n           </div>\n \n         </div>\n-        <div class=\"text-center\" ng-show=\"!isLogged() && isSelfRegAllowed()\">\n+        <div class=\"text-center\" ng-show=\"!isLogged() && $root.isSelfRegAllowed()\">\n           <a href=\"javascript:void(0);\" class=\"btn btn-link\" ng-click=\"selfCreate()\">Self Registration</a>\n \n           <!--      <div id=\"initialLoaderDiv\">\n                   <img src=\"img/busy.gif\" class=\"ajax-loader\"/>\n                 </div>-->\n         </div>\n-        <div class=\"text-center\" ng-show=\"!isLogged() && isPwdResetAllowed()\">\n+        <div class=\"text-center\" ng-show=\"!isLogged() && $root.isPwdResetAllowed()\">\n           <a href=\"javascript:void(0);\" class=\"btn btn-link\" ng-click=\"passwordReset()\">Password Reset</a>\n         </div>\n         <!-- /#login-container -->"},{"sha":"134497ef9e83501339a426030bb0581b88d1f291","filename":"client/lib/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fpom.xml?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -61,6 +61,11 @@ under the License.\n       <artifactId>jackson-jaxrs-json-provider</artifactId>\n     </dependency>  \n     \n+    <dependency>\n+      <groupId>commons-codec</groupId>\n+      <artifactId>commons-codec</artifactId>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>"},{"sha":"911a49b4a341a1a8d1fc4cd7fa2a76610fa2f187","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SaltGenerator.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSaltGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8e8368e19772c5e39baa0a152e81a890f2cb6c3e/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSaltGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSaltGenerator.java?ref=8e8368e19772c5e39baa0a152e81a890f2cb6c3e","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+import java.security.SecureRandom;\n+import java.util.Base64;\n+import org.apache.commons.codec.digest.DigestUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class SaltGenerator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SaltGenerator.class);\n+\n+    public static String generate(final String input) {\n+        // generate salt\n+        byte[] salt = new byte[16];\n+        // fill array with random bytes\n+        new SecureRandom().nextBytes(salt);\n+        // create digest with MD5\n+        return DigestUtils.md2Hex(input + Base64.getEncoder().encodeToString(salt));\n+    }\n+\n+    private SaltGenerator() {\n+    }\n+}"}]}