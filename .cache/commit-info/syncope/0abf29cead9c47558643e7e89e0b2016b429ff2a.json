{"sha":"0abf29cead9c47558643e7e89e0b2016b429ff2a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBhYmYyOWNlYWQ5YzQ3NTU4NjQzZTdlODllMGIyMDE2YjQyOWZmMmE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-17T14:04:29Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-17T14:04:29Z"},"message":"Duplicate code is my nemesis...\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246395 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"25000af39118b946ddd2834aac658245e4446311","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/25000af39118b946ddd2834aac658245e4446311"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0abf29cead9c47558643e7e89e0b2016b429ff2a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0abf29cead9c47558643e7e89e0b2016b429ff2a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0abf29cead9c47558643e7e89e0b2016b429ff2a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0abf29cead9c47558643e7e89e0b2016b429ff2a/comments","author":null,"committer":null,"parents":[{"sha":"67f7eac67b2822309741942cb58e9b48994c41b5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/67f7eac67b2822309741942cb58e9b48994c41b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/67f7eac67b2822309741942cb58e9b48994c41b5"}],"stats":{"total":983,"additions":455,"deletions":528},"files":[{"sha":"3babf3b43f549c52618b9494361bf7dac0ff472a","filename":"client/src/main/java/org/syncope/client/to/AbstractAttributableTO.java","status":"renamed","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractAttributableTO.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -17,15 +17,17 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-public abstract class AttributableTO extends AbstractBaseTO {\n+public abstract class AbstractAttributableTO extends AbstractBaseTO {\n \n     protected long id;\n     protected Set<AttributeTO> attributes;\n     protected Set<AttributeTO> derivedAttributes;\n+    protected Set<String> resources;\n \n-    protected AttributableTO() {\n+    protected AbstractAttributableTO() {\n         attributes = new HashSet<AttributeTO>();\n         derivedAttributes = new HashSet<AttributeTO>();\n+        resources = new HashSet<String>();\n     }\n \n     public long getId() {\n@@ -67,4 +69,20 @@ public Set<AttributeTO> getDerivedAttributes() {\n     public void setDerivedAttributes(Set<AttributeTO> derivedAttributes) {\n         this.derivedAttributes = derivedAttributes;\n     }\n+\n+    public boolean addResource(String resource) {\n+        return resources.add(resource);\n+    }\n+\n+    public boolean removeResource(String resource) {\n+        return resources.remove(resource);\n+    }\n+\n+    public Set<String> getResources() {\n+        return resources;\n+    }\n+\n+    public void setResources(Set<String> resources) {\n+        this.resources = resources;\n+    }\n }","previous_filename":"client/src/main/java/org/syncope/client/to/AttributableTO.java"},{"sha":"1de4a9554446e7ee6e77b808098fae5f9ee09ee9","filename":"client/src/main/java/org/syncope/client/to/RoleTO.java","status":"modified","additions":1,"deletions":18,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -17,12 +17,11 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-public class RoleTO extends AttributableTO {\n+public class RoleTO extends AbstractAttributableTO {\n \n     private String name;\n     private Long parent;\n     private Set<Long> users;\n-    private Set<String> resources;\n \n     public RoleTO() {\n         super();\n@@ -47,22 +46,6 @@ public void setParent(Long parent) {\n         this.parent = parent;\n     }\n \n-    public boolean addResource(String resource) {\n-        return resources.add(resource);\n-    }\n-\n-    public boolean removeResource(String resource) {\n-        return resources.remove(resource);\n-    }\n-\n-    public Set<String> getResources() {\n-        return resources;\n-    }\n-\n-    public void setResources(Set<String> resources) {\n-        this.resources = resources;\n-    }\n-\n     public boolean addUser(Long user) {\n         return users.add(user);\n     }"},{"sha":"092c3ebec556e2f25711133dca7c523e7c2395af","filename":"client/src/main/java/org/syncope/client/to/UserTO.java","status":"modified","additions":2,"deletions":20,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -18,11 +18,10 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-public class UserTO extends AttributableTO {\n+public class UserTO extends AbstractAttributableTO {\n \n     private String password;\n     private Set<Long> roles;\n-    private Set<String> resources;\n     private Date creationTime;\n     private String token;\n     private Date tokenExpireTime;\n@@ -31,8 +30,7 @@ public UserTO() {\n         super();\n         \n         roles = new HashSet<Long>();\n-        resources = new HashSet<String>();\n-    }\n+   }\n \n     public String getPassword() {\n         return password;\n@@ -58,22 +56,6 @@ public void setRoles(Set<Long> roles) {\n         this.roles = roles;\n     }\n \n-    public boolean addResource(String resource) {\n-        return resources.add(resource);\n-    }\n-\n-    public boolean removeResource(String resource) {\n-        return resources.remove(resource);\n-    }\n-\n-    public Set<String> getResources() {\n-        return resources;\n-    }\n-\n-    public void setResources(Set<String> resources) {\n-        this.resources = resources;\n-    }\n-\n     public Date getCreationTime() {\n         return creationTime;\n     }"},{"sha":"a568e62c14a7e042afaa6dd842fbf1d551f8dd73","filename":"core/src/main/java/org/syncope/core/rest/controller/AbstractController.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractController.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -15,6 +15,7 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import org.syncope.core.rest.data.AttributableUtil;\n import com.opensymphony.workflow.WorkflowException;\n import java.io.IOException;\n import javax.servlet.http.HttpServletResponse;\n@@ -32,15 +33,15 @@ public abstract class AbstractController {\n     protected static final Logger log =\n             LoggerFactory.getLogger(AbstractController.class);\n \n-    protected Attributable getAttributable(String kind) {\n-        Attributable result = null;\n+    protected AttributableUtil getAttributableUtil(String kind) {\n+        AttributableUtil result = null;\n \n         try {\n-            result = Attributable.valueOf(kind.toUpperCase());\n+            result = AttributableUtil.valueOf(kind.toUpperCase());\n         } catch (Exception e) {\n             log.error(\"Attributable not supported: \" + kind);\n \n-            throw new TypeMismatchException(kind, Attributable.class, e);\n+            throw new TypeMismatchException(kind, AttributableUtil.class, e);\n         }\n \n         return result;"},{"sha":"cfea78f6a88b167a482ef696291270f5c34fb2e9","filename":"core/src/main/java/org/syncope/core/rest/controller/Attributable.java","status":"removed","additions":0,"deletions":57,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAttributable.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -1,57 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.core.rest.controller;\n-\n-import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n-import org.syncope.core.persistence.beans.AbstractSchema;\n-import org.syncope.core.persistence.beans.role.RoleDerivedSchema;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n-import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n-\n-enum Attributable {\n-\n-    USER, ROLE;\n-\n-    public <T extends AbstractSchema> Class<T> getSchemaClass() {\n-        Class result = null;\n-\n-        switch (this) {\n-            case USER:\n-                result = UserSchema.class;\n-                break;\n-            case ROLE:\n-                result = RoleSchema.class;\n-                break;\n-        }\n-\n-        return result;\n-    }\n-\n-    public <T extends AbstractDerivedSchema> Class<T> getDerivedSchemaClass() {\n-        Class result = null;\n-\n-        switch (this) {\n-            case USER:\n-                result = UserDerivedSchema.class;\n-                break;\n-            case ROLE:\n-                result = RoleDerivedSchema.class;\n-                break;\n-        }\n-\n-        return result;\n-    }\n-}"},{"sha":"28552998b5da91d1d5516d1f0b14712270627f5c","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -47,11 +47,11 @@ public DerivedSchemaTO create(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind)\n             throws InstantiationException, IllegalAccessException {\n \n-        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n                 derivedSchemaDataBinder.createDerivedSchema(\n                 derivedSchemaTO, reference,\n-                getAttributable(kind).getSchemaClass());\n+                getAttributableUtil(kind).getSchemaClass());\n \n         derivedSchema = derivedSchemaDAO.save(derivedSchema);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n@@ -66,7 +66,7 @@ public void delete(HttpServletResponse response,\n             @PathVariable(\"schema\") String derivedSchemaName)\n             throws IOException {\n \n-        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n@@ -81,7 +81,7 @@ public void delete(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public DerivedSchemaTOs list(@PathVariable(\"kind\") String kind) {\n \n-        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         List<AbstractDerivedSchema> derivedAttributeSchemas =\n                 derivedSchemaDAO.findAll(reference);\n \n@@ -105,7 +105,7 @@ public DerivedSchemaTO read(HttpServletResponse response,\n             @PathVariable(\"derivedSchema\") String derivedSchemaName)\n             throws IOException {\n \n-        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n                 derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n@@ -124,11 +124,11 @@ public DerivedSchemaTO update(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind)\n             throws InstantiationException, IllegalAccessException, IOException {\n \n-        Class reference = getAttributable(kind).getDerivedSchemaClass();\n+        Class reference = getAttributableUtil(kind).getDerivedSchemaClass();\n         AbstractDerivedSchema derivedSchema =\n                 derivedSchemaDataBinder.createDerivedSchema(\n                 derivedSchemaTO, reference,\n-                getAttributable(kind).getSchemaClass());\n+                getAttributableUtil(kind).getSchemaClass());\n         if (derivedSchema == null) {\n             log.error(\"Could not find schema '\" + derivedSchemaTO.getName() + \"'\");\n             return throwNotFoundException(derivedSchemaTO.getName(), response);"},{"sha":"2d27f369f9bd260ca12a59d1f3d02d8f64cf3e03","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -134,22 +134,6 @@ public RoleTO read(HttpServletResponse response,\n         return roleDataBinder.getRoleTO(role);\n     }\n \n-    @RequestMapping(method = RequestMethod.POST,\n-    value = \"/search\")\n-    public RoleTOs search(HttpServletResponse response,\n-            @RequestBody SearchParameters searchParameters)\n-            throws IOException {\n-\n-        log.info(\"search called with parameter \" + searchParameters);\n-\n-        List<RoleTO> roleTOs = new ArrayList<RoleTO>();\n-        RoleTOs result = new RoleTOs();\n-\n-        result.setRoles(roleTOs);\n-\n-        return result;\n-    }\n-\n     @Transactional\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")"},{"sha":"f2753eff9de229532b62a355127e70d830a58849","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -49,9 +49,9 @@ public SchemaTO create(HttpServletResponse response,\n             throws InstantiationException, IllegalAccessException,\n             UniqueValueException {\n \n-        Class reference = getAttributable(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDataBinder.createSchema(schemaTO,\n-                reference, getAttributable(kind).getDerivedSchemaClass());\n+                reference, getAttributableUtil(kind).getDerivedSchemaClass());\n \n         schema = schemaDAO.save(schema);\n         response.setStatus(HttpServletResponse.SC_CREATED);\n@@ -65,7 +65,7 @@ public void delete(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind,\n             @PathVariable(\"schema\") String schemaName) throws IOException {\n \n-        Class reference = getAttributable(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             log.error(\"Could not find schema '\" + schemaName + \"'\");\n@@ -78,7 +78,7 @@ public void delete(HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n     public SchemaTOs list(@PathVariable(\"kind\") String kind) {\n \n-        Class reference = getAttributable(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).getSchemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n \n         List<SchemaTO> schemaTOs = new ArrayList<SchemaTO>(schemas.size());\n@@ -97,7 +97,7 @@ public SchemaTO read(HttpServletResponse response,\n             @PathVariable(\"kind\") String kind,\n             @PathVariable(\"schema\") String schemaName) throws IOException {\n \n-        Class reference = getAttributable(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n             log.error(\"Could not find schema '\" + schemaName + \"'\");\n@@ -114,12 +114,12 @@ public SchemaTO update(HttpServletResponse response,\n             throws IOException, InstantiationException, IllegalAccessException,\n             UniqueValueException {\n \n-        Class reference = getAttributable(kind).getSchemaClass();\n+        Class reference = getAttributableUtil(kind).getSchemaClass();\n         AbstractSchema schema = null;\n         try {\n             schema = schemaDataBinder.updateSchema(schemaTO,\n                     reference,\n-                    getAttributable(kind).getDerivedSchemaClass());\n+                    getAttributableUtil(kind).getDerivedSchemaClass());\n             if (schema == null) {\n                 log.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n                 return throwNotFoundException(schemaTO.getName(), response);"},{"sha":"e731347a2431ac5b7ae654ee8f37a2a3e6cb6b73","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"added","additions":212,"deletions":0,"changes":212,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -0,0 +1,212 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.syncope.client.to.AbstractAttributableTO;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.AbstractAttributable;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.validation.ValidationException;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+class AbstractAttributableDataBinder {\n+\n+    protected static final Logger log = LoggerFactory.getLogger(\n+            AbstractAttributableDataBinder.class);\n+    protected SyncopeRoleDAO syncopeRoleDAO;\n+    protected SchemaDAO schemaDAO;\n+    protected DerivedSchemaDAO derivedSchemaDAO;\n+    protected AttributeValueDAO attributeValueDAO;\n+    protected SyncopeUserDAO syncopeUserDAO;\n+    protected ResourceDAO resourceDAO;\n+\n+    protected <T extends AbstractAttributable> T fillAbstractAttributable(\n+            T abstractAttributable,\n+            AbstractAttributableTO abstractAttributableTO,\n+            AttributableUtil attributableUtil,\n+            SyncopeClientCompositeErrorException compositeErrorException)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientException requiredValuesMissing =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.RequiredValuesMissing);\n+        SyncopeClientException invalidValues = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidValues);\n+        SyncopeClientException invalidUniques = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidUniques);\n+\n+        // 1. attributes\n+        AbstractSchema schema = null;\n+        AbstractAttribute attribute = null;\n+        Set<String> valuesProvided = null;\n+        AbstractAttributeValue attributeValue = null;\n+        for (AttributeTO attributeTO : abstractAttributableTO.getAttributes()) {\n+            schema = schemaDAO.find(attributeTO.getSchema(),\n+                                    attributableUtil.getSchemaClass());\n+\n+            // safely ignore invalid schemas from AttributeTO\n+            // see http://code.google.com/p/syncope/issues/detail?id=17\n+            if (schema == null) {\n+                if (log.isDebugEnabled())\n+                    log.debug(\"Ignoring invalid schema \"\n+                            + attributeTO.getSchema());\n+            } else if (schema.isVirtual()) {\n+                if (log.isDebugEnabled())\n+                    log.debug(\"Ignoring virtual schema\" + schema.getName());\n+            } else {\n+                attribute = attributableUtil.newAttribute();\n+                attribute.setSchema(schema);\n+                attribute.setOwner(abstractAttributable);\n+\n+                // if the schema is multivale, all values are considered for\n+                // addition, otherwise only the fist one - if provided - is\n+                // considered\n+                valuesProvided = schema.isMultivalue()\n+                        ? attributeTO.getValues()\n+                        : (attributeTO.getValues().isEmpty()\n+                           ? Collections.EMPTY_SET\n+                           : Collections.singleton(\n+                           attributeTO.getValues().iterator().next()));\n+                for (String value : valuesProvided) {\n+                    attributeValue = attributableUtil.newAttributeValue();\n+\n+                    try {\n+                        attributeValue = attribute.addValue(value,\n+                                                            attributeValue);\n+                    } catch (ValidationException e) {\n+                        log.error(\"Invalid value for attribute \"\n+                                + schema.getName() + \": \" + value, e);\n+\n+                        invalidValues.addElement(schema.getName());\n+                    }\n+\n+                    // if the schema is uniquevalue, check the uniqueness\n+                    if (schema.isUniquevalue()\n+                            && attributeValueDAO.existingAttributeValue(\n+                            attributeValue)) {\n+\n+                        log.error(\"Unique value schema \" + schema.getName()\n+                                + \" with no unique value: \"\n+                                + attributeValue.getValueAsString());\n+\n+                        invalidUniques.addElement(schema.getName());\n+                        attribute.setAttributeValues(Collections.EMPTY_SET);\n+                    }\n+                }\n+\n+                if (!attribute.getAttributeValues().isEmpty())\n+                    abstractAttributable.addAttribute(attribute);\n+            }\n+        }\n+\n+        // 2. derived attributes\n+        AbstractDerivedSchema derivedSchema = null;\n+        AbstractDerivedAttribute derivedAttribute = null;\n+        for (AttributeTO attributeTO :\n+                abstractAttributableTO.getDerivedAttributes()) {\n+\n+            derivedSchema = derivedSchemaDAO.find(attributeTO.getSchema(),\n+                                                  attributableUtil.getDerivedSchemaClass());\n+\n+            if (derivedSchema == null) {\n+                if (log.isDebugEnabled())\n+                    log.debug(\"Ignoring invalid derivedschema \"\n+                            + attributeTO.getSchema());\n+            } else {\n+                derivedAttribute = attributableUtil.newDerivedAttribute();\n+                derivedAttribute.setDerivedSchema(derivedSchema);\n+                derivedAttribute.setOwner(abstractAttributable);\n+                abstractAttributable.addDerivedAttribute(derivedAttribute);\n+            }\n+        }\n+        // Check if there is some mandatory schema defined for which no value\n+        // has been provided\n+        List<AbstractSchema> allUserSchemas =\n+                schemaDAO.findAll(attributableUtil.getSchemaClass());\n+        for (AbstractSchema userSchema : allUserSchemas)\n+            if (abstractAttributable.getAttribute(userSchema.getName()) == null\n+                    && userSchema.isMandatory()) {\n+\n+                log.error(\"Mandatory schema \" + userSchema.getName()\n+                        + \" not provided with values\");\n+\n+                requiredValuesMissing.addElement(userSchema.getName());\n+            }\n+\n+        // Throw composite exception if there is at least one element set\n+        // in the composing exceptions\n+        if (!requiredValuesMissing.getElements().isEmpty())\n+            compositeErrorException.addException(requiredValuesMissing);\n+        if (!invalidValues.getElements().isEmpty())\n+            compositeErrorException.addException(invalidValues);\n+        if (!invalidUniques.getElements().isEmpty())\n+            compositeErrorException.addException(invalidUniques);\n+        if (compositeErrorException.hasExceptions())\n+            throw compositeErrorException;\n+\n+        return abstractAttributable;\n+    }\n+\n+    protected <T extends AbstractAttributableTO> T getAbstractAttributableTO(\n+            T abstractAttributableTO,\n+            AbstractAttributable abstractAttributable) {\n+\n+        AttributeTO attributeTO = null;\n+        for (AbstractAttribute attribute :\n+                abstractAttributable.getAttributes()) {\n+\n+            attributeTO = new AttributeTO();\n+            attributeTO.setSchema(attribute.getSchema().getName());\n+            attributeTO.setValues(attribute.getAttributeValuesAsStrings());\n+\n+            abstractAttributableTO.addAttribute(attributeTO);\n+        }\n+\n+        for (AbstractDerivedAttribute derivedAttribute :\n+                abstractAttributable.getDerivedAttributes()) {\n+\n+            attributeTO = new AttributeTO();\n+            attributeTO.setSchema(\n+                    derivedAttribute.getDerivedSchema().getName());\n+            attributeTO.addValue(derivedAttribute.getValue(\n+                    abstractAttributable.getAttributes()));\n+\n+            abstractAttributableTO.addDerivedAttribute(attributeTO);\n+        }\n+\n+        for (Resource resource : abstractAttributable.getResources())\n+            abstractAttributableTO.addResource(resource.getName());\n+\n+        return abstractAttributableTO;\n+    }\n+}"},{"sha":"6f88908ecce686745b56305bfd58dec0c9ab8a82","filename":"core/src/main/java/org/syncope/core/rest/data/AttributableUtil.java","status":"added","additions":156,"deletions":0,"changes":156,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAttributableUtil.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -0,0 +1,156 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractAttributeValue;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedSchema;\n+import org.syncope.core.persistence.beans.AbstractSchema;\n+import org.syncope.core.persistence.beans.role.RoleAttribute;\n+import org.syncope.core.persistence.beans.role.RoleAttributeValue;\n+import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n+import org.syncope.core.persistence.beans.role.RoleDerivedSchema;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.beans.user.UserAttribute;\n+import org.syncope.core.persistence.beans.user.UserAttributeValue;\n+import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n+import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n+import org.syncope.core.persistence.beans.user.UserSchema;\n+\n+public enum AttributableUtil {\n+\n+    USER, ROLE;\n+\n+    public <T extends AbstractSchema> Class<T> getSchemaClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UserSchema.class;\n+                break;\n+            case ROLE:\n+                result = RoleSchema.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractDerivedSchema> Class<T> getDerivedSchemaClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UserDerivedSchema.class;\n+                break;\n+            case ROLE:\n+                result = RoleDerivedSchema.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractAttribute> Class<T> getAttributeClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UserAttribute.class;\n+                break;\n+            case ROLE:\n+                result = RoleAttribute.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractAttribute> T newAttribute() {\n+        T result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = (T) new UserAttribute();\n+                break;\n+            case ROLE:\n+                result = (T) new RoleAttribute();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractDerivedAttribute> Class<T> getDerivedAttributeClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UserDerivedAttribute.class;\n+                break;\n+            case ROLE:\n+                result = RoleDerivedAttribute.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractDerivedAttribute> T newDerivedAttribute() {\n+        T result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = (T) new UserDerivedAttribute();\n+                break;\n+            case ROLE:\n+                result = (T) new RoleDerivedAttribute();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractAttributeValue> Class<T> getAttributeValueClass() {\n+        Class result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = UserAttributeValue.class;\n+                break;\n+            case ROLE:\n+                result = RoleAttributeValue.class;\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    public <T extends AbstractAttributeValue> T newAttributeValue() {\n+        T result = null;\n+\n+        switch (this) {\n+            case USER:\n+                result = (T) new UserAttributeValue();\n+                break;\n+            case ROLE:\n+                result = (T) new RoleAttributeValue();\n+                break;\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"4291db1fdb10e028bf87ed674d586a24a7fc76d3","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":23,"deletions":195,"changes":218,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -14,26 +14,13 @@\n  */\n package org.syncope.core.rest.data;\n \n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Set;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.Resource;\n-import org.syncope.core.persistence.beans.role.RoleAttribute;\n-import org.syncope.core.persistence.beans.role.RoleAttributeValue;\n-import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n-import org.syncope.core.persistence.beans.role.RoleDerivedSchema;\n-import org.syncope.core.persistence.beans.role.RoleSchema;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n@@ -42,28 +29,18 @@\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n import org.syncope.core.persistence.dao.SyncopeUserDAO;\n-import org.syncope.core.persistence.validation.ValidationException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n-public class RoleDataBinder {\n-\n-    private static final Logger log = LoggerFactory.getLogger(\n-            RoleDataBinder.class);\n-    private SyncopeRoleDAO syncopeRoleDAO;\n-    private SchemaDAO schemaDAO;\n-    private DerivedSchemaDAO derivedSchemaDAO;\n-    private AttributeValueDAO attributeValueDAO;\n-    private SyncopeUserDAO syncopeUserDAO;\n-    private ResourceDAO resourceDAO;\n+public class RoleDataBinder extends AbstractAttributableDataBinder {\n \n     @Autowired\n     public RoleDataBinder(SyncopeRoleDAO syncopeRoleDAO,\n-            SchemaDAO schemaDAO,\n-            DerivedSchemaDAO derivedSchemaDAO,\n-            AttributeValueDAO attributeValueDAO,\n-            SyncopeUserDAO syncopeUserDAO,\n-            ResourceDAO resourceDAO) {\n+                          SchemaDAO schemaDAO,\n+                          DerivedSchemaDAO derivedSchemaDAO,\n+                          AttributeValueDAO attributeValueDAO,\n+                          SyncopeUserDAO syncopeUserDAO,\n+                          ResourceDAO resourceDAO) {\n \n         this.syncopeRoleDAO = syncopeRoleDAO;\n         this.schemaDAO = schemaDAO;\n@@ -76,30 +53,22 @@ public RoleDataBinder(SyncopeRoleDAO syncopeRoleDAO,\n     public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        SyncopeClientCompositeErrorException compositeErrorException =\n+        SyncopeRole syncopeRole = new SyncopeRole();\n+\n+        SyncopeClientCompositeErrorException scce =\n                 new SyncopeClientCompositeErrorException(\n                 HttpStatus.BAD_REQUEST);\n+\n+        // name and parent\n         SyncopeClientException invalidRoles =\n                 new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidRoles);\n-        SyncopeClientException requiredValuesMissing =\n-                new SyncopeClientException(\n-                SyncopeClientExceptionType.RequiredValuesMissing);\n-        SyncopeClientException invalidValues = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidValues);\n-        SyncopeClientException invalidUniques = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidUniques);\n-\n-        SyncopeRole syncopeRole = new SyncopeRole();\n-\n-        // 0. name and parent\n         if (roleTO.getName() == null) {\n             log.error(\"No name specified for this role\");\n \n-            invalidRoles.addElement(null);\n-        } else {\n+            invalidRoles.addElement(\"No name specified for this role\");\n+        } else\n             syncopeRole.setName(roleTO.getName());\n-        }\n         Long parentRoleId = null;\n         if (roleTO.getParent() != null) {\n             SyncopeRole parentRole = syncopeRoleDAO.find(roleTO.getParent());\n@@ -122,117 +91,20 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             invalidRoles.addElement(roleTO.getName());\n         }\n \n-        // 1. attributes\n-        RoleSchema schema = null;\n-        RoleAttribute attribute = null;\n-        Set<String> valuesProvided = null;\n-        RoleAttributeValue attributeValue = null;\n-        for (AttributeTO attributeTO : roleTO.getAttributes()) {\n-            schema = schemaDAO.find(attributeTO.getSchema(), RoleSchema.class);\n-\n-            // safely ignore invalid schemas from AttributeTO\n-            // see http://code.google.com/p/syncope/issues/detail?id=17\n-            if (schema == null) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid schema \"\n-                            + attributeTO.getSchema());\n-                }\n-            } else {\n-                if (schema.isVirtual()) {\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Ignoring virtual schema\" + schema.getName());\n-                    }\n-                } else {\n-                    attribute = new RoleAttribute();\n-                    attribute.setSchema(schema);\n-                    attribute.setOwner(syncopeRole);\n-\n-                    // if the schema is multivale, all values are considered for\n-                    // addition, otherwise only the fist one - if provided - is\n-                    // considered\n-                    valuesProvided = schema.isMultivalue()\n-                            ? attributeTO.getValues()\n-                            : (attributeTO.getValues().isEmpty()\n-                            ? Collections.EMPTY_SET\n-                            : Collections.singleton(\n-                            attributeTO.getValues().iterator().next()));\n-                    for (String value : valuesProvided) {\n-                        attributeValue = new RoleAttributeValue();\n+        if (!invalidRoles.getElements().isEmpty())\n+            scce.addException(invalidRoles);\n \n-                        try {\n-                            attributeValue = attribute.addValue(value,\n-                                    attributeValue);\n-                        } catch (ValidationException e) {\n-                            log.error(\"Invalid value for attribute \"\n-                                    + schema.getName() + \": \" + value, e);\n+        syncopeRole = fillAbstractAttributable(\n+                syncopeRole, roleTO, AttributableUtil.ROLE, scce);\n \n-                            invalidValues.addElement(schema.getName());\n-                        }\n-\n-                        // if the schema is uniquevalue, check the uniqueness\n-                        if (schema.isUniquevalue()\n-                                && attributeValueDAO.existingAttributeValue(\n-                                attributeValue)) {\n-\n-                            log.error(\"Unique value schema \" + schema.getName()\n-                                    + \" with no unique value: \"\n-                                    + attributeValue.getValueAsString());\n-\n-                            invalidUniques.addElement(schema.getName());\n-                            attribute.setAttributeValues(Collections.EMPTY_SET);\n-                        }\n-                    }\n-\n-                    if (!attribute.getAttributeValues().isEmpty()) {\n-                        syncopeRole.addAttribute(attribute);\n-                    }\n-                }\n-            }\n-        }\n-\n-        // 2. derived attributes\n-        RoleDerivedSchema derivedSchema = null;\n-        RoleDerivedAttribute derivedAttribute = null;\n-        for (AttributeTO attributeTO : roleTO.getDerivedAttributes()) {\n-            derivedSchema = derivedSchemaDAO.find(attributeTO.getSchema(),\n-                    RoleDerivedSchema.class);\n-\n-            if (derivedSchema == null) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid derivedschema \"\n-                            + attributeTO.getSchema());\n-                }\n-            } else {\n-                derivedAttribute = new RoleDerivedAttribute();\n-                derivedAttribute.setDerivedSchema(derivedSchema);\n-                derivedAttribute.setOwner(syncopeRole);\n-                syncopeRole.addDerivedAttribute(derivedAttribute);\n-            }\n-        }\n-\n-        // Check if there is some mandatory schema defined for which no value\n-        // has been provided\n-        List<RoleSchema> allRoleSchemas = schemaDAO.findAll(RoleSchema.class);\n-        for (RoleSchema roleSchema : allRoleSchemas) {\n-            if (syncopeRole.getAttribute(roleSchema.getName()) == null\n-                    && roleSchema.isMandatory()) {\n-\n-                log.error(\"Mandatory schema \" + roleSchema.getName()\n-                        + \" not provided with values\");\n-\n-                requiredValuesMissing.addElement(roleSchema.getName());\n-            }\n-        }\n-\n-        // 3. users\n+        // users\n         SyncopeUser user = null;\n         for (Long userId : roleTO.getUsers()) {\n             user = syncopeUserDAO.find(userId);\n \n             if (user == null) {\n-                if (log.isDebugEnabled()) {\n+                if (log.isDebugEnabled())\n                     log.debug(\"Ignoring invalid user \" + userId);\n-                }\n             } else {\n                 syncopeRole.addUser(user);\n                 user.addRole(syncopeRole);\n@@ -245,72 +117,28 @@ public SyncopeRole createSyncopeRole(RoleTO roleTO)\n             resource = resourceDAO.find(resourceName);\n \n             if (resource == null) {\n-                if (log.isDebugEnabled()) {\n+                if (log.isDebugEnabled())\n                     log.debug(\"Ignoring invalid resource \" + resourceName);\n-                }\n             } else {\n                 syncopeRole.addResource(resource);\n                 resource.addRole(syncopeRole);\n             }\n         }\n \n-        // Throw composite exception if there is at least one element set\n-        // in the composing exceptions\n-        if (!invalidRoles.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidRoles);\n-        }\n-        if (!requiredValuesMissing.getElements().isEmpty()) {\n-            compositeErrorException.addException(requiredValuesMissing);\n-        }\n-        if (!invalidValues.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidValues);\n-        }\n-        if (!invalidUniques.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidUniques);\n-        }\n-        if (compositeErrorException.hasExceptions()) {\n-            throw compositeErrorException;\n-        }\n-\n         return syncopeRole;\n     }\n \n     public RoleTO getRoleTO(SyncopeRole role) {\n         RoleTO roleTO = new RoleTO();\n         roleTO.setId(role.getId());\n         roleTO.setName(role.getName());\n-        if (role.getParent() != null) {\n+        if (role.getParent() != null)\n             roleTO.setParent(role.getParent().getId());\n-        }\n-\n-        AttributeTO attributeTO = null;\n-        for (AbstractAttribute attribute : role.getAttributes()) {\n-            attributeTO = new AttributeTO();\n-            attributeTO.setSchema(attribute.getSchema().getName());\n-            attributeTO.setValues(attribute.getAttributeValuesAsStrings());\n-\n-            roleTO.addAttribute(attributeTO);\n-        }\n-\n-        for (AbstractDerivedAttribute derivedAttribute :\n-                role.getDerivedAttributes()) {\n \n-            attributeTO = new AttributeTO();\n-            attributeTO.setSchema(\n-                    derivedAttribute.getDerivedSchema().getName());\n-            attributeTO.setValues(Collections.singleton(\n-                    derivedAttribute.getValue(role.getAttributes())));\n+        roleTO = getAbstractAttributableTO(roleTO, role);\n \n-            roleTO.addDerivedAttribute(attributeTO);\n-        }\n-\n-        for (SyncopeUser user : role.getUsers()) {\n+        for (SyncopeUser user : role.getUsers())\n             roleTO.addUser(user.getId());\n-        }\n-\n-        for (Resource resource : role.getResources()) {\n-            roleTO.addResource(resource.getName());\n-        }\n \n         return roleTO;\n     }"},{"sha":"71a39d99daddd26386490b2dbcacb1201dbb0900","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":22,"deletions":189,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -14,53 +14,31 @@\n  */\n package org.syncope.core.rest.data;\n \n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Set;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n-import org.syncope.core.persistence.beans.AbstractAttribute;\n-import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n import org.syncope.core.persistence.beans.Resource;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.beans.user.UserAttribute;\n-import org.syncope.core.persistence.beans.user.UserAttributeValue;\n-import org.syncope.core.persistence.beans.user.UserDerivedAttribute;\n-import org.syncope.core.persistence.beans.user.UserDerivedSchema;\n-import org.syncope.core.persistence.beans.user.UserSchema;\n import org.syncope.core.persistence.dao.AttributeValueDAO;\n import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.persistence.validation.ValidationException;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n-public class UserDataBinder {\n-\n-    private static final Logger log = LoggerFactory.getLogger(\n-            UserDataBinder.class);\n-    private SchemaDAO schemaDAO;\n-    private AttributeValueDAO attributeValueDAO;\n-    private DerivedSchemaDAO derivedSchemaDAO;\n-    private SyncopeRoleDAO syncopeRoleDAO;\n-    private ResourceDAO resourceDAO;\n+public class UserDataBinder extends AbstractAttributableDataBinder {\n \n     @Autowired\n     public UserDataBinder(SchemaDAO schemaDAO,\n-            AttributeValueDAO attributeValueDAO,\n-            DerivedSchemaDAO derivedSchemaDAO,\n-            SyncopeRoleDAO syncopeRoleDAO,\n-            ResourceDAO resourceDAO) {\n+                          AttributeValueDAO attributeValueDAO,\n+                          DerivedSchemaDAO derivedSchemaDAO,\n+                          SyncopeRoleDAO syncopeRoleDAO,\n+                          ResourceDAO resourceDAO) {\n \n         this.schemaDAO = schemaDAO;\n         this.attributeValueDAO = attributeValueDAO;\n@@ -72,145 +50,40 @@ public UserDataBinder(SchemaDAO schemaDAO,\n     public SyncopeUser createSyncopeUser(UserTO userTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        SyncopeClientCompositeErrorException compositeErrorException =\n-                new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST);\n-        SyncopeClientException invalidPassword = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidPassword);\n-        SyncopeClientException requiredValuesMissing =\n-                new SyncopeClientException(\n-                SyncopeClientExceptionType.RequiredValuesMissing);\n-        SyncopeClientException invalidValues = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidValues);\n-        SyncopeClientException invalidUniques = new SyncopeClientException(\n-                SyncopeClientExceptionType.InvalidUniques);\n \n         SyncopeUser syncopeUser = new SyncopeUser();\n \n-        // 0. password\n+        SyncopeClientCompositeErrorException scce =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        // password\n         // TODO: check password policies\n+        SyncopeClientException invalidPassword = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidPassword);\n         if (userTO.getPassword() == null\n                 || userTO.getPassword().length() == 0) {\n \n             log.error(\"No password provided\");\n \n             invalidPassword.addElement(\"Null password\");\n-            compositeErrorException.addException(invalidPassword);\n-        } else {\n+        } else\n             syncopeUser.setPassword(userTO.getPassword());\n-        }\n \n-        // 1. attributes\n-        UserSchema schema = null;\n-        UserAttribute attribute = null;\n-        Set<String> valuesProvided = null;\n-        UserAttributeValue attributeValue = null;\n-        for (AttributeTO attributeTO : userTO.getAttributes()) {\n-            schema = schemaDAO.find(attributeTO.getSchema(), UserSchema.class);\n+        if (!invalidPassword.getElements().isEmpty())\n+            scce.addException(invalidPassword);\n \n-            // safely ignore invalid schemas from AttributeTO\n-            // see http://code.google.com/p/syncope/issues/detail?id=17\n-            if (schema == null) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid schema \"\n-                            + attributeTO.getSchema());\n-                }\n-            } else {\n-                if (schema.isVirtual()) {\n-                    if (log.isDebugEnabled()) {\n-                        log.debug(\"Ignoring virtual schema\" + schema.getName());\n-                    }\n-                } else {\n-                    attribute = new UserAttribute();\n-                    attribute.setSchema(schema);\n-                    attribute.setOwner(syncopeUser);\n+        syncopeUser = fillAbstractAttributable(\n+                syncopeUser, userTO, AttributableUtil.USER, scce);\n \n-                    // if the schema is multivale, all values are considered for\n-                    // addition, otherwise only the fist one - if provided - is\n-                    // considered\n-                    valuesProvided = schema.isMultivalue()\n-                            ? attributeTO.getValues()\n-                            : (attributeTO.getValues().isEmpty()\n-                            ? Collections.EMPTY_SET\n-                            : Collections.singleton(\n-                            attributeTO.getValues().iterator().next()));\n-                    for (String value : valuesProvided) {\n-                        attributeValue = new UserAttributeValue();\n-\n-                        try {\n-                            attributeValue = attribute.addValue(value,\n-                                    attributeValue);\n-                        } catch (ValidationException e) {\n-                            log.error(\"Invalid value for attribute \"\n-                                    + schema.getName() + \": \" + value, e);\n-\n-                            invalidValues.addElement(schema.getName());\n-                        }\n-\n-                        // if the schema is uniquevalue, check the uniqueness\n-                        if (schema.isUniquevalue()\n-                                && attributeValueDAO.existingAttributeValue(\n-                                attributeValue)) {\n-\n-                            log.error(\"Unique value schema \" + schema.getName()\n-                                    + \" with no unique value: \"\n-                                    + attributeValue.getValueAsString());\n-\n-                            invalidUniques.addElement(schema.getName());\n-                            attribute.setAttributeValues(Collections.EMPTY_SET);\n-                        }\n-                    }\n-\n-                    if (!attribute.getAttributeValues().isEmpty()) {\n-                        syncopeUser.addAttribute(attribute);\n-                    }\n-                }\n-            }\n-        }\n-\n-        // 2. derived attributes\n-        UserDerivedSchema derivedSchema = null;\n-        UserDerivedAttribute derivedAttribute = null;\n-        for (AttributeTO attributeTO : userTO.getDerivedAttributes()) {\n-            derivedSchema = derivedSchemaDAO.find(attributeTO.getSchema(),\n-                    UserDerivedSchema.class);\n-\n-            if (derivedSchema == null) {\n-                if (log.isDebugEnabled()) {\n-                    log.debug(\"Ignoring invalid derivedschema \"\n-                            + attributeTO.getSchema());\n-                }\n-            } else {\n-                derivedAttribute = new UserDerivedAttribute();\n-                derivedAttribute.setDerivedSchema(derivedSchema);\n-                derivedAttribute.setOwner(syncopeUser);\n-                syncopeUser.addDerivedAttribute(derivedAttribute);\n-            }\n-        }\n-\n-        // Check if there is some mandatory schema defined for which no value\n-        // has been provided\n-        List<UserSchema> allUserSchemas = schemaDAO.findAll(UserSchema.class);\n-        for (UserSchema userSchema : allUserSchemas) {\n-            if (syncopeUser.getAttribute(userSchema.getName()) == null\n-                    && userSchema.isMandatory()) {\n-\n-                log.error(\"Mandatory schema \" + userSchema.getName()\n-                        + \" not provided with values\");\n-\n-                requiredValuesMissing.addElement(userSchema.getName());\n-            }\n-        }\n-\n-        // 3. roles\n+        // roles\n         SyncopeRole role = null;\n         for (Long roleId : userTO.getRoles()) {\n             role = syncopeRoleDAO.find(roleId);\n \n             if (role == null) {\n-                if (log.isDebugEnabled()) {\n+                if (log.isDebugEnabled())\n                     log.debug(\"Ignoring invalid role \" + roleId);\n-                }\n             } else {\n                 syncopeUser.addRole(role);\n                 role.addUser(syncopeUser);\n@@ -223,30 +96,14 @@ public SyncopeUser createSyncopeUser(UserTO userTO)\n             resource = resourceDAO.find(resourceName);\n \n             if (resource == null) {\n-                if (log.isDebugEnabled()) {\n+                if (log.isDebugEnabled())\n                     log.debug(\"Ignoring invalid resource \" + resourceName);\n-                }\n             } else {\n                 syncopeUser.addResource(resource);\n                 resource.addUser(syncopeUser);\n             }\n         }\n \n-        // Throw composite exception if there is at least one element set\n-        // in the composing exceptions\n-        if (!requiredValuesMissing.getElements().isEmpty()) {\n-            compositeErrorException.addException(requiredValuesMissing);\n-        }\n-        if (!invalidValues.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidValues);\n-        }\n-        if (!invalidUniques.getElements().isEmpty()) {\n-            compositeErrorException.addException(invalidUniques);\n-        }\n-        if (compositeErrorException.hasExceptions()) {\n-            throw compositeErrorException;\n-        }\n-\n         return syncopeUser;\n     }\n \n@@ -258,34 +115,10 @@ public UserTO getUserTO(SyncopeUser user) {\n         userTO.setTokenExpireTime(user.getTokenExpireTime());\n         userTO.setPassword(user.getPassword());\n \n-        AttributeTO attributeTO = null;\n-        for (AbstractAttribute attribute : user.getAttributes()) {\n-            attributeTO = new AttributeTO();\n-            attributeTO.setSchema(attribute.getSchema().getName());\n-            attributeTO.setValues(attribute.getAttributeValuesAsStrings());\n-\n-            userTO.addAttribute(attributeTO);\n-        }\n-\n-        for (AbstractDerivedAttribute derivedAttribute :\n-                user.getDerivedAttributes()) {\n-\n-            attributeTO = new AttributeTO();\n-            attributeTO.setSchema(\n-                    derivedAttribute.getDerivedSchema().getName());\n-            attributeTO.setValues(Collections.singleton(\n-                    derivedAttribute.getValue(user.getAttributes())));\n+        userTO = getAbstractAttributableTO(userTO, user);\n \n-            userTO.addDerivedAttribute(attributeTO);\n-        }\n-\n-        for (SyncopeRole role : user.getRoles()) {\n+        for (SyncopeRole role : user.getRoles())\n             userTO.addRole(role.getId());\n-        }\n-\n-        for (Resource resource : user.getResources()) {\n-            userTO.addResource(resource.getName());\n-        }\n \n         return userTO;\n     }"},{"sha":"8f99dce9d015925a4ae7df054770dcb3d44af8ea","filename":"core/src/test/java/org/syncope/core/test/rest/RoleTestITCase.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0abf29cead9c47558643e7e89e0b2016b429ff2a/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java?ref=0abf29cead9c47558643e7e89e0b2016b429ff2a","patch":"@@ -24,7 +24,6 @@\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.RoleTOs;\n-import org.syncope.client.to.SearchParameters;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n \n public class RoleTestITCase extends AbstractTestITCase {\n@@ -105,18 +104,6 @@ public void read() {\n         assertFalse(roleTO.getAttributes().isEmpty());\n     }\n \n-    @Test\n-    public void search() {\n-        SearchParameters searchParameters = new SearchParameters();\n-\n-        RoleTOs matchedRoles = restTemplate.postForObject(\n-                BASE_URL + \"role/search\",\n-                searchParameters, RoleTOs.class);\n-\n-        assertNotNull(matchedRoles);\n-        assertTrue(matchedRoles.getRoles().isEmpty());\n-    }\n-\n     @Test\n     public void update() {\n         AttributeTO attributeTO = new AttributeTO();"}]}