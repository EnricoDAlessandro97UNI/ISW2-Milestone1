{"sha":"f3d08eea82c35ea26414d35b1c0332f2410fbc60","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYzZDA4ZWVhODJjMzVlYTI2NDE0ZDM1YjFjMDMzMmYyNDEwZmJjNjA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-10T13:51:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-05-10T16:24:51Z"},"message":"[SYNCOPE-1460] zookeeper profile for IT","tree":{"sha":"e58bc37546482323dc41157f64a2803fb79c221f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e58bc37546482323dc41157f64a2803fb79c221f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f3d08eea82c35ea26414d35b1c0332f2410fbc60","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f3d08eea82c35ea26414d35b1c0332f2410fbc60","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f3d08eea82c35ea26414d35b1c0332f2410fbc60","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f3d08eea82c35ea26414d35b1c0332f2410fbc60/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bc3d2827aab94fb208457de2d75a3940479b7473","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bc3d2827aab94fb208457de2d75a3940479b7473","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bc3d2827aab94fb208457de2d75a3940479b7473"}],"stats":{"total":237,"additions":183,"deletions":54},"files":[{"sha":"e8502027f8b9fc4587acc6bba5c7f5a91516a39c","filename":"common/keymaster/client-api/src/main/java/org/apache/syncope/common/keymaster/client/api/DomainWatcher.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fapi%2FDomainWatcher.java?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.common.keymaster.client.api;\n \n-import java.util.List;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n \n /**\n  * Interface to be implemented by anyone that wants to be notified when domains are created / updated / deleted.\n  */\n public interface DomainWatcher {\n \n-    void update(List<String> domains);\n+    void process(Domain domain);\n }"},{"sha":"5389818cf5cf80397f5abea4b2d8c6aec209791c","filename":"common/keymaster/client-zookeeper/pom.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fpom.xml?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -118,7 +118,6 @@ under the License.\n \n       <build>\n         <plugins>\n-\n           <plugin>\n             <groupId>io.fabric8</groupId>\n             <artifactId>docker-maven-plugin</artifactId>"},{"sha":"fd04051bbc19b8f1604aca9b3261190d61001fdf","filename":"common/keymaster/client-zookeeper/src/main/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperDomainOps.java","status":"modified","additions":28,"deletions":16,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOps.java?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -19,21 +19,19 @@\n package org.apache.syncope.common.keymaster.client.zookeper;\n \n import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Objects;\n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.curator.framework.CuratorFramework;\n-import org.apache.curator.x.async.AsyncCuratorFramework;\n-import org.apache.curator.x.async.WatchMode;\n+import org.apache.curator.framework.recipes.cache.TreeCache;\n import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.DomainWatcher;\n import org.apache.syncope.common.keymaster.client.api.KeymasterException;\n import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.zookeeper.Watcher;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.InitializingBean;\n@@ -63,16 +61,30 @@ public void afterPropertiesSet() throws Exception {\n                 client.create().creatingParentContainersIfNeeded().forPath(buildDomainPath());\n             }\n \n-            AsyncCuratorFramework.wrap(client).with(WatchMode.successOnly).watched().getChildren().\n-                    forPath(buildDomainPath()).event().thenAccept(event -> {\n-                if (event.getType() == Watcher.Event.EventType.NodeChildrenChanged) {\n-                    try {\n-                        List<String> children = client.getChildren().\n-                                forPath(event.getPath()).stream().collect(Collectors.toList());\n-                        watcher.update(children);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Unexpected exception\", e);\n-                    }\n+            new TreeCache(client, buildDomainPath()).start().getListenable().addListener((cf, event) -> {\n+                switch (event.getType()) {\n+                    case NODE_ADDED:\n+                        LOG.debug(\"Domain {} added\", event.getData().getPath());\n+                        try {\n+                            Domain domain = MAPPER.readValue(event.getData().getData(), Domain.class);\n+                            \n+                            LOG.info(\"Domain {} created\", domain.getKey());\n+                            watcher.process(domain);\n+                        } catch (IOException e) {\n+                            LOG.debug(\"Could not parse {}\", new String(event.getData().getData()), e);\n+                        }\n+                        break;\n+\n+                    case NODE_UPDATED:\n+                        LOG.debug(\"Domain {} update\", event.getData().getPath());\n+                        break;\n+\n+                    case NODE_REMOVED:\n+                        LOG.debug(\"Domain {} removed\", event.getData().getPath());\n+                        break;\n+\n+                    default:\n+                        LOG.debug(\"Event {} received\", event);\n                 }\n             });\n         }\n@@ -125,8 +137,8 @@ public void create(final Domain domain) {\n                 throw new KeymasterException(\"Domain \" + domain.getKey() + \" existing\");\n             }\n \n-            client.create().creatingParentContainersIfNeeded().forPath(buildDomainPath(domain.getKey()));\n-            client.setData().forPath(buildDomainPath(domain.getKey()), MAPPER.writeValueAsBytes(domain));\n+            client.create().creatingParentContainersIfNeeded().\n+                    forPath(buildDomainPath(domain.getKey()), MAPPER.writeValueAsBytes(domain));\n         } catch (KeymasterException e) {\n             throw e;\n         } catch (Exception e) {"},{"sha":"f340f35398c50ce9f72c18c214bcf4cb78c34863","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/LoggingDomainWatcher.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FLoggingDomainWatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FLoggingDomainWatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FLoggingDomainWatcher.java?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.keymaster.client.zookeper;\n+\n+import org.apache.syncope.common.keymaster.client.api.DomainWatcher;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LoggingDomainWatcher implements DomainWatcher {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggingDomainWatcher.class);\n+\n+    @Override\n+    public void process(final Domain domain) {\n+        LOG.info(\"Domain {} created\", domain);\n+    }\n+}"},{"sha":"c50dded7503ad71edca55043c05d62bbfd47c4a1","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperTestContext.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperTestContext.java?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.keymaster.client.zookeper;\n \n+import org.apache.syncope.common.keymaster.client.api.DomainWatcher;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.Configuration;\n \n@@ -28,4 +29,9 @@ public class ZookeeperTestContext {\n     public ZookeeperTestContentLoader zookeeperTestContentLoader() {\n         return new ZookeeperTestContentLoader();\n     }\n+\n+    @Bean\n+    public DomainWatcher loggingDomainWatcher() {\n+        return new LoggingDomainWatcher();\n+    }\n }"},{"sha":"901980e7484beb4ca65c36290f26d4906cc439b5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/RuntimeDomainLoader.java","status":"modified","additions":18,"deletions":31,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FRuntimeDomainLoader.java?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -19,10 +19,8 @@\n package org.apache.syncope.core.persistence.jpa;\n \n import java.util.Comparator;\n-import java.util.List;\n-import java.util.Objects;\n-import org.apache.syncope.common.keymaster.client.api.DomainOps;\n import org.apache.syncope.common.keymaster.client.api.DomainWatcher;\n+import org.apache.syncope.common.keymaster.client.api.model.Domain;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -41,42 +39,31 @@ public class RuntimeDomainLoader implements DomainWatcher {\n     @Autowired\n     private DomainHolder domainHolder;\n \n-    @Autowired\n-    private DomainOps domainOps;\n-\n     @Autowired\n     private DomainRegistry domainRegistry;\n \n     @Override\n-    public void update(final List<String> domains) {\n-        domains.stream().filter(domain -> !domainHolder.getDomains().containsKey(domain)).\n-                map(domain -> {\n-                    try {\n-                        return domainOps.read(domain);\n-                    } catch (Exception e) {\n-                        LOG.error(\"Could not read {}\", domain, e);\n-                        return null;\n-                    }\n-                }).\n-                filter(Objects::nonNull).\n-                forEach(domain -> {\n-                    LOG.info(\"Domain {} initialization\", domain.getKey());\n+    public void process(final Domain domain) {\n+        if (domainHolder.getDomains().containsKey(domain.getKey())) {\n+            LOG.debug(\"Domain {} already inited, skipping\", domain.getKey());\n+        } else {\n+            LOG.info(\"Domain {} initialization\", domain.getKey());\n \n-                    domainRegistry.register(domain);\n+            domainRegistry.register(domain);\n \n-                    ApplicationContextProvider.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().\n-                            stream().sorted(Comparator.comparing(SyncopeCoreLoader::getOrder)).\n-                            forEach(loader -> {\n-                                String loaderName = AopUtils.getTargetClass(loader).getName();\n+            ApplicationContextProvider.getApplicationContext().getBeansOfType(SyncopeCoreLoader.class).values().\n+                    stream().sorted(Comparator.comparing(SyncopeCoreLoader::getOrder)).\n+                    forEach(loader -> {\n+                        String loaderName = AopUtils.getTargetClass(loader).getName();\n \n-                                loader.load();\n+                        loader.load();\n \n-                                LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n-                                loader.load(domain.getKey(), domainHolder.getDomains().get(domain.getKey()));\n-                                LOG.debug(\"[{}] Completed on domain '{}'\", loaderName, domain);\n-                            });\n+                        LOG.debug(\"[{}] Starting on domain '{}'\", loaderName, domain);\n+                        loader.load(domain.getKey(), domainHolder.getDomains().get(domain.getKey()));\n+                        LOG.debug(\"[{}] Completed on domain '{}'\", loaderName, domain);\n+                    });\n \n-                    LOG.info(\"Domain {} successfully inited\", domain.getKey());\n-                });\n+            LOG.info(\"Domain {} successfully inited\", domain.getKey());\n+        }\n     }\n }"},{"sha":"536a367f4b77cbdaafff30071a695157592fc124","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/spring/CommonEntityManagerFactoryConf.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fspring%2FCommonEntityManagerFactoryConf.java?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -20,6 +20,7 @@\n \n import java.util.HashMap;\n import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n import javax.persistence.ValidationMode;\n import javax.sql.DataSource;\n import org.springframework.orm.jpa.persistenceunit.PersistenceUnitPostProcessor;\n@@ -31,7 +32,7 @@\n  */\n public class CommonEntityManagerFactoryConf implements DomainHolder {\n \n-    private final Map<String, DataSource> domains = new HashMap<>();\n+    private final Map<String, DataSource> domains = new ConcurrentHashMap<>();\n \n     private String[] packagesToScan;\n "},{"sha":"585ecf7c6259504afdc82c1ab768f0bb7af1492d","filename":"ext/self-keymaster/logic/src/main/java/org/apache/syncope/core/logic/DomainLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDomainLogic.java?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.util.Collections;\n import java.util.List;\n import java.util.Objects;\n import java.util.stream.Collectors;\n@@ -75,7 +74,7 @@ public Domain create(final Domain domain) {\n         domainEntity.set(domain);\n         domainEntity = domainDAO.save(domainEntity);\n \n-        domainWatcher.update(Collections.singletonList(domain.getKey()));\n+        domainWatcher.process(domain);\n \n         return domainEntity.get();\n     }"},{"sha":"039d1f749c582c52f2ccdb1b0f0283aeb185bd1b","filename":"fit/core-reference/pom.xml","status":"modified","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -465,6 +465,83 @@ under the License.\n       </build>\n     </profile>\n   \n+    <profile>\n+      <id>zookeper-it</id>\n+\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>io.fabric8</groupId>\n+            <artifactId>docker-maven-plugin</artifactId>\n+            <configuration>\n+              <images>\n+                <image>\n+                  <name>zookeeper:${zookeeper.version}</name>\n+                  <run>\n+                    <ports>\n+                      <port>2181:2181</port>\n+                    </ports>\n+                    <volumes>\n+                      <bind>\n+                        <volume>${project.build.directory}/test-classes/zoo.cfg:/conf/zoo.cfg</volume>\n+                        <volume>${project.build.directory}/test-classes/java.env:/conf/java.env</volume>\n+                        <volume>${project.build.directory}/test-classes/server-jaas.conf:/conf/server-jaas.conf</volume>\n+                        <volume>${project.build.directory}/test-classes/client-jaas.conf:/conf/client-jaas.conf</volume>\n+                      </bind>\n+                    </volumes>\n+                  </run>\n+                </image>\n+              </images>\n+            </configuration>\n+            <executions>\n+              <execution>\n+                <id>start-zookeeper</id>\n+                <phase>pre-integration-test</phase>\n+                <goals>\n+                  <goal>start</goal>\n+                </goals>\n+              </execution>\n+              <execution>\n+                <id>stop-zookeeper</id>\n+                <phase>post-integration-test</phase>\n+                <goals>\n+                  <goal>stop</goal>\n+                  <goal>remove</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>\n+\n+          <plugin>\n+            <groupId>org.codehaus.cargo</groupId>\n+            <artifactId>cargo-maven2-plugin</artifactId>\n+            <inherited>true</inherited>\n+          </plugin>\n+        </plugins>\n+\n+        <testResources>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>true</filtering>\n+            <excludes>\n+              <exclude>keystore</exclude>\n+            </excludes>\n+          </testResource>\n+          <testResource>\n+            <directory>src/test/resources</directory>\n+            <filtering>false</filtering>\n+            <includes>\n+              <include>keystore</include>\n+            </includes>\n+          </testResource>\n+          <testResource>\n+            <directory>${basedir}/../../common/keymaster/client-zookeeper/src/main/resources</directory>\n+            <filtering>true</filtering>\n+          </testResource>\n+        </testResources>\n+      </build>\n+    </profile>\n+\n     <profile>\n       <id>elasticsearch-it</id>\n       "},{"sha":"41909ed786f55ebdca501637062d7456ebf7c230","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -196,6 +196,14 @@ under the License.\n       <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.apache.zookeeper\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"org.apache.curator\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     \n     <!-- To enable when setting 'mail.debug=true' in mail.properties -->\n     <!--<asyncLogger name=\"org.apache.syncope.core.provisioning.java.job.notification\" additivity=\"false\" level=\"DEBUG\">"},{"sha":"875d5e727f66cab225d379b9cf67dd0e0d445367","filename":"fit/core-reference/src/test/resources/log4j2.xml","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3d08eea82c35ea26414d35b1c0332f2410fbc60/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3d08eea82c35ea26414d35b1c0332f2410fbc60/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=f3d08eea82c35ea26414d35b1c0332f2410fbc60","patch":"@@ -45,7 +45,13 @@ under the License.\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n \n-    <asyncLogger name=\"org.apache.syncope.common.keymaster\" additivity=\"false\" level=\"DEBUG\">\n+    <asyncLogger name=\"org.apache.syncope.common.keymaster\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"org.apache.zookeeper\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"org.apache.curator\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n "}]}