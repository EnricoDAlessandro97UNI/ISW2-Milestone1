{"sha":"248c7f445dc7ec8002e4e409c985c49536c15311","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI0OGM3ZjQ0NWRjN2VjODAwMmU0ZTQwOWM5ODVjNDk1MzZjMTUzMTE=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-01T12:53:28Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-02-01T12:53:28Z"},"message":"[SYNCOPE-231]\n* fixing Task creation bug\n* updating task report method \n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1441431 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31b839f4ce245d135fb93baf0ebc35ccc3bff90b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/31b839f4ce245d135fb93baf0ebc35ccc3bff90b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/248c7f445dc7ec8002e4e409c985c49536c15311","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/248c7f445dc7ec8002e4e409c985c49536c15311","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/248c7f445dc7ec8002e4e409c985c49536c15311","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/248c7f445dc7ec8002e4e409c985c49536c15311/comments","author":null,"committer":null,"parents":[{"sha":"e6526520590a3dc315c82f07f6e3f1cd30c9826f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e6526520590a3dc315c82f07f6e3f1cd30c9826f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e6526520590a3dc315c82f07f6e3f1cd30c9826f"}],"stats":{"total":186,"additions":121,"deletions":65},"files":[{"sha":"06c42ceaacd3e57194fe799e04fcca4b5abc2a7b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/TaskServiceProxy.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -28,10 +28,12 @@\n import javax.ws.rs.core.Response;\r\n import javax.xml.ws.WebServiceException;\r\n \r\n+import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.TaskService;\r\n import org.apache.syncope.common.to.JobClassTO;\r\n import org.apache.syncope.common.to.NotificationTaskTO;\r\n import org.apache.syncope.common.to.PropagationTaskTO;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n import org.apache.syncope.common.to.SchedTaskTO;\r\n import org.apache.syncope.common.to.SyncActionClassTO;\r\n import org.apache.syncope.common.to.SyncTaskTO;\r\n@@ -68,7 +70,8 @@ public Response create(final TaskTO taskTO) {\n         TaskTO task = getRestTemplate().postForObject(baseUrl + \"task/create/{type}\", taskTO, taskTO.getClass(),\r\n                 subTypeString);\r\n \r\n-        return Response.created(URI.create(baseUrl + \"task/read/\" + task.getId() + \".json\")).build();\r\n+        return Response.created(URI.create(baseUrl + \"task/read/\" + task.getId() + \".json\"))\r\n+                .header(SyncopeConstants.REST_HEADER_ID, task.getId()).build();\r\n     }\r\n \r\n     @Override\r\n@@ -89,7 +92,8 @@ public void delete(final Long taskId) {\n \r\n     @Override\r\n     public void deleteExecution(final Long executionId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"task/execution/delete/{executionId}.json\", TaskExecTO.class, executionId);\r\n+        getRestTemplate().getForObject(baseUrl + \"task/execution/delete/{executionId}.json\", TaskExecTO.class,\r\n+                executionId);\r\n     }\r\n \r\n     @Override\r\n@@ -167,8 +171,8 @@ public List<? extends TaskTO> list(final TaskType type, final int page, final in\n \r\n     @Override\r\n     public List<TaskExecTO> listExecutions(final TaskType type) {\r\n-        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/execution/list.json\", TaskExecTO[].class,\r\n-                type));\r\n+        return Arrays.asList(getRestTemplate().getForObject(baseUrl + \"task/{type}/execution/list.json\",\r\n+                TaskExecTO[].class, type));\r\n     }\r\n \r\n     @Override\r\n@@ -183,10 +187,10 @@ public TaskExecTO readExecution(final Long executionId) {\n     }\r\n \r\n     @Override\r\n-    public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus status, final String message) {\r\n+    public TaskExecTO report(final Long executionId, final ReportExecTO report) {\r\n         return getRestTemplate().getForObject(\r\n                 baseUrl + \"task/execution/report/{executionId}.json\" + \"?executionStatus={status}&message={message}\",\r\n-                TaskExecTO.class, executionId, status, message);\r\n+                TaskExecTO.class, executionId, report.getStatus(), report.getMessage());\r\n     }\r\n \r\n     @Override\r"},{"sha":"8245d2c0d8521b99da041f3062cb5da6e2ddc535","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":65,"deletions":9,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -24,7 +24,6 @@\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.DefaultValue;\r\n import javax.ws.rs.GET;\r\n-import javax.ws.rs.HeaderParam;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n@@ -33,72 +32,129 @@\n import javax.ws.rs.core.Response;\r\n \r\n import org.apache.syncope.common.to.JobClassTO;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n import org.apache.syncope.common.to.SyncActionClassTO;\r\n import org.apache.syncope.common.to.TaskExecTO;\r\n import org.apache.syncope.common.to.TaskTO;\r\n-import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n import org.apache.syncope.common.types.TaskType;\r\n \r\n @Path(\"tasks\")\r\n public interface TaskService {\r\n \r\n+    /**\r\n+     * @param taskType\r\n+     * @return\r\n+     */\r\n     @GET\r\n     @Path(\"{type}/count\")\r\n     int count(@PathParam(\"type\") TaskType taskType);\r\n \r\n+    /**\r\n+     * @param taskTO\r\n+     * @return\r\n+     */\r\n     @POST\r\n     Response create(TaskTO taskTO);\r\n \r\n+    /**\r\n+     * @param taskId\r\n+     */\r\n     @DELETE\r\n     @Path(\"{taskId}\")\r\n     void delete(@PathParam(\"taskId\") Long taskId);\r\n \r\n+    /**\r\n+     * @param executionId\r\n+     */\r\n     @DELETE\r\n     @Path(\"executions/{executionId}\")\r\n     void deleteExecution(@PathParam(\"executionId\") Long executionId);\r\n \r\n+    /**\r\n+     * @param taskId\r\n+     * @param dryRun\r\n+     * @return\r\n+     */\r\n     @POST\r\n     @Path(\"{taskId}/execute\")\r\n-    TaskExecTO execute(@PathParam(\"taskId\") Long taskId,\r\n-            @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\r\n+    TaskExecTO execute(@PathParam(\"taskId\") Long taskId, @QueryParam(\"dryRun\") @DefaultValue(\"false\") boolean dryRun);\r\n \r\n+    /**\r\n+     * @return\r\n+     */\r\n     @GET\r\n     @Path(\"jobClasses\")\r\n     Set<JobClassTO> getJobClasses();\r\n \r\n+    /**\r\n+     * @return\r\n+     */\r\n     @GET\r\n     @Path(\"syncActionsClasses\")\r\n     Set<SyncActionClassTO> getSyncActionsClasses();\r\n \r\n+    /**\r\n+     * @param taskType\r\n+     * @return\r\n+     */\r\n     @GET\r\n-    @Path(\"{type}/list\") //TODO '/list' path will be removed once CXF/JAX-B bug is solved\r\n+    @Path(\"{type}/list\")\r\n+    // TODO '/list' path will be removed once CXF/JAX-B bug is solved\r\n     List<? extends TaskTO> list(@PathParam(\"type\") TaskType taskType);\r\n \r\n+    /**\r\n+     * @param taskType\r\n+     * @param page\r\n+     * @param size\r\n+     * @return\r\n+     */\r\n     @GET\r\n     @Path(\"{type}\")\r\n     List<? extends TaskTO> list(@PathParam(\"type\") TaskType taskType, @QueryParam(\"page\") int page,\r\n             @QueryParam(\"size\") @DefaultValue(\"25\") int size);\r\n \r\n+    /**\r\n+     * @param taskType\r\n+     * @return\r\n+     */\r\n     @GET\r\n     @Path(\"{type}/executions\")\r\n     List<TaskExecTO> listExecutions(@PathParam(\"type\") TaskType taskType);\r\n \r\n+    /**\r\n+     * @param taskType\r\n+     * @param taskId\r\n+     * @return\r\n+     */\r\n     @GET\r\n     @Path(\"{type}/{taskId}\")\r\n-    //TODO TaskType will be removed once CXF migration is done\r\n+    // TODO TaskType will be removed once CXF migration is done\r\n     <T extends TaskTO> T read(@PathParam(\"type\") TaskType taskType, @PathParam(\"taskId\") Long taskId);\r\n \r\n+    /**\r\n+     * @param executionId\r\n+     * @return\r\n+     */\r\n     @GET\r\n     @Path(\"executions/{executionId}\")\r\n     TaskExecTO readExecution(@PathParam(\"executionId\") Long executionId);\r\n \r\n+    /**\r\n+     * @param executionId\r\n+     * @param status\r\n+     * @param message\r\n+     * @return\r\n+     */\r\n     @POST\r\n     @Path(\"executions/{executionId}/report\")\r\n-    //TODO create new TaskExecutionReportTO object which contains status and message\r\n-    TaskExecTO report(@PathParam(\"executionId\") Long executionId,\r\n-            @HeaderParam(\"Execution-Status\") PropagationTaskExecStatus status, String message);\r\n+    TaskExecTO report(@PathParam(\"executionId\") Long executionId, ReportExecTO report);\r\n \r\n+    /**\r\n+     * @param taskId\r\n+     * @param taskTO\r\n+     */\r\n     @PUT\r\n     @Path(\"{taskId}\")\r\n     void update(@PathParam(\"taskId\") Long taskId, TaskTO taskTO);\r\n+\r\n }\r"},{"sha":"dfcb6bebc27d1b7f199f3574d0f02938e30be0b0","filename":"common/src/main/java/org/apache/syncope/common/to/ReportExecTO.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -21,8 +21,6 @@\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.common.types.ReportExecStatus;\r\n-\r\n @XmlRootElement(name = \"executionReport\")\r\n @XmlType\r\n public class ReportExecTO extends AbstractExecTO {\r\n@@ -39,7 +37,4 @@ public void setReport(long report) {\n         this.report = report;\r\n     }\r\n \r\n-    public void setStatus(ReportExecStatus status) {\r\n-        super.setStatus(status.name());\r\n-    }\r\n }\r"},{"sha":"3d148e97b934e4edc61f4a32b346d2ddbfe80734","filename":"common/src/main/java/org/apache/syncope/common/types/PropagationTaskExecStatus.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -42,4 +42,8 @@ public enum PropagationTaskExecStatus {\n     public boolean isSuccessful() {\r\n         return this == SUCCESS || this == SUBMITTED;\r\n     }\r\n+\r\n+    public static PropagationTaskExecStatus fromString(String value) {\r\n+        return PropagationTaskExecStatus.valueOf(value.toUpperCase());\r\n+    }\r\n }\r"},{"sha":"8138252dd8b41475ccf7f3e7d1e513f4fcb270ab","filename":"common/src/main/java/org/apache/syncope/common/types/ReportExecStatus.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -28,4 +28,7 @@ public enum ReportExecStatus {\n     SUCCESS,\r\n     FAILURE;\r\n \r\n+    public static ReportExecStatus fromString(String value) {\r\n+        return ReportExecStatus.valueOf(value.toUpperCase());\r\n+    }\r\n }\r"},{"sha":"f15093c7215fc6a16463ba1ec812801fc5bb5f4f","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":6,"deletions":15,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -22,9 +22,6 @@\n import java.util.Collections;\n import java.util.List;\n \n-import javax.ws.rs.core.Response;\n-\n-import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.TaskService;\n import org.apache.syncope.common.to.JobClassTO;\n import org.apache.syncope.common.to.NotificationTaskTO;\n@@ -170,25 +167,19 @@ public void deleteExecution(final Long taskExecId) {\n         getService(TaskService.class).deleteExecution(taskExecId);\n     }\n \n-    public SyncTaskTO createSyncTask(final SyncTaskTO taskTO) {\n-        Response response = getService(TaskService.class).create(taskTO);\n-        Long id = Long.valueOf(response.getHeaderString(SyncopeConstants.REST_HEADER_ID));\n-        return getService(TaskService.class).read(TaskType.SYNCHRONIZATION, id);\n+    public void createSyncTask(final SyncTaskTO taskTO) {\n+        getService(TaskService.class).create(taskTO);\n     }\n \n-    public SchedTaskTO createSchedTask(final SchedTaskTO taskTO) {\n-        Response response = getService(TaskService.class).create(taskTO);\n-        Long id = Long.valueOf(response.getHeaderString(SyncopeConstants.REST_HEADER_ID));\n-        return getService(TaskService.class).read(TaskType.SCHEDULED, id);\n+    public void createSchedTask(final SchedTaskTO taskTO) {\n+        getService(TaskService.class).create(taskTO);\n     }\n \n-    public SchedTaskTO updateSchedTask(final SchedTaskTO taskTO) {\n+    public void updateSchedTask(final SchedTaskTO taskTO) {\n         getService(TaskService.class).update(taskTO.getId(), taskTO);\n-        return getService(TaskService.class).read(TaskType.SCHEDULED, taskTO.getId());\n     }\n \n-    public SyncTaskTO updateSyncTask(final SyncTaskTO taskTO) {\n+    public void updateSyncTask(final SyncTaskTO taskTO) {\n         getService(TaskService.class).update(taskTO.getId(), taskTO);\n-        return getService(TaskService.class).read(TaskType.SYNCHRONIZATION, taskTO.getId());\n     }\n }"},{"sha":"1d1d0b8d7091245e88afbfddf68dbb9411e2c4b4","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -106,7 +106,7 @@ public ReportTO create(final HttpServletResponse response, @RequestBody final Re\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return createdReportTO;\n     }\n-    \n+\n     public ReportTO createInternal(final ReportTO reportTO) {\n         LOG.debug(\"Creating report \" + reportTO);\n \n@@ -415,7 +415,7 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throw\n         result = new ReportExecTO();\n         result.setReport(reportId);\n         result.setStartDate(new Date());\n-        result.setStatus(ReportExecStatus.STARTED);\n+        result.setStatus(ReportExecStatus.STARTED.name());\n         result.setMessage(\"Job fired; waiting for results...\");\n \n         return result;"},{"sha":"c757c1ddabe1def2b212df8af5c62bf650b934e5","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":24,"deletions":25,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.TaskService;\r\n import org.apache.syncope.common.to.JobClassTO;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n import org.apache.syncope.common.to.SchedTaskTO;\r\n import org.apache.syncope.common.to.SyncActionClassTO;\r\n import org.apache.syncope.common.to.SyncTaskTO;\r\n@@ -54,29 +55,26 @@ public int count(final TaskType taskType) {\n         return taskController.countInternal(taskType.toString());\r\n     }\r\n \r\n-\t@Override\r\n-\tpublic Response create(final TaskTO taskTO) {\r\n-\t\tTaskTO createdTask;\r\n-\t\tif (taskTO instanceof SyncTaskTO || taskTO instanceof SchedTaskTO) {\r\n-\t\t\tcreatedTask = taskController.createSchedTaskInternal((SchedTaskTO) taskTO);\r\n-\t\t} else {\r\n-\t\t\tthrow new BadRequestException();\r\n-\t\t}\r\n-\t\tURI location = uriInfo.getAbsolutePathBuilder()\r\n-\t\t\t\t.path(createdTask.getId() + \"\").build();\r\n-\t\treturn Response.created(location)\r\n-\t\t\t\t.header(SyncopeConstants.REST_HEADER_ID, createdTask.getId())\r\n-\t\t\t\t.build();\r\n-\t}\r\n+    @Override\r\n+    public Response create(final TaskTO taskTO) {\r\n+        TaskTO createdTask;\r\n+        if (taskTO instanceof SyncTaskTO || taskTO instanceof SchedTaskTO) {\r\n+            createdTask = taskController.createSchedTaskInternal((SchedTaskTO) taskTO);\r\n+        } else {\r\n+            throw new BadRequestException();\r\n+        }\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(createdTask.getId() + \"\").build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, createdTask.getId()).build();\r\n+    }\r\n \r\n     @Override\r\n     public void delete(final Long taskId) {\r\n-\t\ttaskController.delete(taskId);\r\n+        taskController.delete(taskId);\r\n     }\r\n \r\n     @Override\r\n     public void deleteExecution(final Long executionId) {\r\n-\t\ttaskController.deleteExecution(executionId);\r\n+        taskController.deleteExecution(executionId);\r\n     }\r\n \r\n     @Override\r\n@@ -126,19 +124,20 @@ public TaskExecTO readExecution(final Long executionId) {\n     }\r\n \r\n     @Override\r\n-    public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus status, final String message) {\r\n-        return taskController.report(executionId, status, message);\r\n+    public TaskExecTO report(final Long executionId, final ReportExecTO report) {\r\n+        return taskController.report(executionId, PropagationTaskExecStatus.fromString(report.getStatus()),\r\n+                report.getMessage());\r\n     }\r\n \r\n     @Override\r\n     public void update(final Long taskId, final TaskTO taskTO) {\r\n-\t\tif (taskTO instanceof SyncTaskTO) {\r\n-\t\t\ttaskController.updateSync((SyncTaskTO) taskTO);\r\n-\t\t} else if (taskTO instanceof SchedTaskTO) {\r\n-\t\t\ttaskController.updateSched((SchedTaskTO) taskTO);\r\n-\t\t} else {\r\n-\t\t\tthrow new BadRequestException();\r\n-\t\t}\r\n+        if (taskTO instanceof SyncTaskTO) {\r\n+            taskController.updateSync((SyncTaskTO) taskTO);\r\n+        } else if (taskTO instanceof SchedTaskTO) {\r\n+            taskController.updateSched((SchedTaskTO) taskTO);\r\n+        } else {\r\n+            throw new BadRequestException();\r\n+        }\r\n     }\r\n \r\n     @Override\r"},{"sha":"7a7a025663c1b69877f84208632bcc1ea575880a","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/248c7f445dc7ec8002e4e409c985c49536c15311/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/248c7f445dc7ec8002e4e409c985c49536c15311/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=248c7f445dc7ec8002e4e409c985c49536c15311","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.to.NotificationTaskTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n+import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncActionClassTO;\n@@ -201,7 +202,7 @@ public void readExecution() {\n \n     @Test\n     // Currently test is not re-runnable.\n-    // To successfully run test second time it is necessary to restart cargo. \n+    // To successfully run test second time it is necessary to restart cargo.\n     public void deal() {\n         try {\n             taskService.delete(0L);\n@@ -211,7 +212,10 @@ public void deal() {\n         TaskExecTO exec = taskService.execute(1L, false);\n         assertEquals(PropagationTaskExecStatus.SUBMITTED.name(), exec.getStatus());\n \n-        exec = taskService.report(exec.getId(), PropagationTaskExecStatus.SUCCESS, \"OK\");\n+        ReportExecTO report = new ReportExecTO();\n+        report.setStatus(PropagationTaskExecStatus.SUCCESS.name());\n+        report.setMessage(\"OK\");\n+        exec = taskService.report(exec.getId(), report);\n         assertEquals(PropagationTaskExecStatus.SUCCESS.name(), exec.getStatus());\n         assertEquals(\"OK\", exec.getMessage());\n \n@@ -364,7 +368,7 @@ public void reconcileFromDB() {\n         execution = execSyncTask(actual.getId(), 20, false);\n         assertNotNull(execution.getStatus());\n         assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n-        \n+\n         userTO = userService.read(\"testuser1\");\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());"}]}