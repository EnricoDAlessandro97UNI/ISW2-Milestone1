{"sha":"ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFiNDYyZjA4YmViZTk2NzVmMWMxOWFhNGJhM2I5NTY1ZDhhZjJhNzE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-02T08:00:34Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-02T08:00:34Z"},"message":"[SYNCOPE-620] JPA relationship tests in; persistence-jpa completed","tree":{"sha":"ce04fbfff06aa880793b536959351c4d9a194fab","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ce04fbfff06aa880793b536959351c4d9a194fab"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"556d518625f25baee800203e6dd274aeb8e9f91b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/556d518625f25baee800203e6dd274aeb8e9f91b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/556d518625f25baee800203e6dd274aeb8e9f91b"}],"stats":{"total":1804,"additions":1688,"deletions":116},"files":[{"sha":"0b9fec866517df2d8da9362b2f5dac9f6c161f6f","filename":"syncope620/server/persistence-api/src/main/java/org/apache/syncope/persistence/api/RoleEntitlementUtil.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2FRoleEntitlementUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2FRoleEntitlementUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fapi%2FRoleEntitlementUtil.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -35,15 +35,15 @@ public final class RoleEntitlementUtil {\n \n     private static final Logger LOG = LoggerFactory.getLogger(RoleEntitlementUtil.class);\n \n-    public static String getEntitlementNameFromRoleId(final Long roleId) {\n-        return \"ROLE_\" + roleId;\n+    public static String getEntitlementNameFromRoleKey(final Long roleKey) {\n+        return \"ROLE_\" + roleKey;\n     }\n \n     public static boolean isRoleEntitlement(final String entitlementName) {\n         return ROLE_ENTITLEMENT_NAME_PATTERN.matcher(entitlementName).matches();\n     }\n \n-    public static Long getRoleId(final String entitlementName) {\n+    public static Long getRoleKey(final String entitlementName) {\n         Long result = null;\n \n         if (isRoleEntitlement(entitlementName)) {\n@@ -57,12 +57,12 @@ public static Long getRoleId(final String entitlementName) {\n         return result;\n     }\n \n-    public static Set<Long> getRoleIds(final Set<String> entitlements) {\n+    public static Set<Long> getRoleKeys(final Set<String> entitlements) {\n         Set<Long> result = new HashSet<>();\n \n         for (String entitlement : entitlements) {\n             if (isRoleEntitlement(entitlement)) {\n-                Long roleId = getRoleId(entitlement);\n+                Long roleId = getRoleKey(entitlement);\n                 if (roleId != null) {\n                     result.add(roleId);\n                 }\n@@ -72,12 +72,12 @@ public static Set<Long> getRoleIds(final Set<String> entitlements) {\n         return result;\n     }\n \n-    public static Set<Long> getRoleIds(final List<Entitlement> entitlements) {\n+    public static Set<Long> getRoleKeys(final List<Entitlement> entitlements) {\n         Set<String> names = new HashSet<>(entitlements.size());\n         for (Entitlement entitlement : entitlements) {\n             names.add(entitlement.getKey());\n         }\n-        return getRoleIds(names);\n+        return getRoleKeys(names);\n     }\n \n     /**"},{"sha":"ac6ab687e953ee15be427d44ce7147aa3f15c8b0","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/AbstractSubjectDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FAbstractSubjectDAO.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.persistence.jpa.dao;\n \n-import static org.apache.syncope.common.lib.types.AttrSchemaType.Double;\n-\n import java.io.StringReader;\n import java.util.ArrayList;\n import java.util.Collections;"},{"sha":"4946dad5baf80dacf54e53ea187d328f27b78fcb","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPAEntitlementDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPAEntitlementDAO.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -56,7 +56,7 @@ public Entitlement save(final Entitlement entitlement) {\n     @Override\n     public Entitlement saveRoleEntitlement(final Role role) {\n         Entitlement roleEnt = new JPAEntitlement();\n-        roleEnt.setKey(RoleEntitlementUtil.getEntitlementNameFromRoleId(role.getKey()));\n+        roleEnt.setKey(RoleEntitlementUtil.getEntitlementNameFromRoleKey(role.getKey()));\n         roleEnt.setDescription(\"Entitlement for managing role \" + role.getKey());\n \n         return save(roleEnt);"},{"sha":"5e6209c64a57a229aec78de8e0369143c3552b6c","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -515,7 +515,7 @@ public void delete(final Role role) {\n             roleToBeDeleted.setRoleOwner(null);\n             entityManager.remove(roleToBeDeleted);\n \n-            entitlementDAO.delete(RoleEntitlementUtil.getEntitlementNameFromRoleId(roleToBeDeleted.getKey()));\n+            entitlementDAO.delete(RoleEntitlementUtil.getEntitlementNameFromRoleKey(roleToBeDeleted.getKey()));\n         }\n     }\n "},{"sha":"9ae5cd68a572d3d484a8ea1930003670b5f49f36","filename":"syncope620/server/persistence-jpa/src/main/java/org/apache/syncope/persistence/jpa/validation/entity/ReportValidator.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FReportValidator.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -48,7 +48,7 @@ public boolean isValid(final Report object, final ConstraintValidatorContext con\n             }\n         }\n \n-        Set<String> reportletNames = new HashSet<String>();\n+        Set<String> reportletNames = new HashSet<>();\n         for (ReportletConf conf : object.getReportletConfs()) {\n             reportletNames.add(conf.getName());\n         }"},{"sha":"31919f4d4689a5ef491db050010e889759b290b5","filename":"syncope620/server/persistence-jpa/src/main/resources/content.xml","status":"modified","additions":56,"deletions":56,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -22,80 +22,80 @@ under the License.\n                creator=\"admin\" lastModifier=\"admin\"\n                creationDate=\"2014-06-20 11:00:00\" lastChangeDate=\"2014-06-20 11:00:00\"/>\n \n-  <CSchema name=\"password.cipher.algorithm\" type=\"String\"\n-           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"1\" owner_id=\"1\" schema_name=\"password.cipher.algorithm\"/>\n-  <CAttrValue id=\"1\" attribute_id=\"1\" stringValue=\"SHA1\"/>\n+  <CPlainSchema name=\"password.cipher.algorithm\" type=\"String\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"1\" owner_id=\"1\" schema_name=\"password.cipher.algorithm\"/>\n+  <CPlainAttrValue id=\"1\" attribute_id=\"1\" stringValue=\"SHA1\"/>\n \n   <!-- notificationjob.cronExpression:\n   + not existing: NotificationJob runs according to Notification.DEFAULT_CRON_EXP\n   + provided as empty string: NotificationJob disabled\n   + provided as non-empty string: NotificationJob runs according to the given value -->\n-  <CSchema name=\"notificationjob.cronExpression\" type=\"String\"\n-           mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"2\" owner_id=\"1\" schema_name=\"notificationjob.cronExpression\"/>\n-  <CAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"\"/>\n+  <CPlainSchema name=\"notificationjob.cronExpression\" type=\"String\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"2\" owner_id=\"1\" schema_name=\"notificationjob.cronExpression\"/>\n+  <CPlainAttrValue id=\"2\" attribute_id=\"2\" stringValue=\"\"/>\n \n-  <CSchema name=\"notification.maxRetries\" type=\"Long\"\n-           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"3\" owner_id=\"1\" schema_name=\"notification.maxRetries\"/>\n-  <CAttrValue id=\"3\" attribute_id=\"3\" longValue=\"0\"/>\n+  <CPlainSchema name=\"notification.maxRetries\" type=\"Long\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"3\" owner_id=\"1\" schema_name=\"notification.maxRetries\"/>\n+  <CPlainAttrValue id=\"3\" attribute_id=\"3\" longValue=\"3\"/>\n \n-  <CSchema name=\"token.length\" type=\"Long\"\n-           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"4\" owner_id=\"1\" schema_name=\"token.length\"/>\n-  <CAttrValue id=\"4\" attribute_id=\"4\" longValue=\"256\"/>\n+  <CPlainSchema name=\"token.length\" type=\"Long\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"4\" owner_id=\"1\" schema_name=\"token.length\"/>\n+  <CPlainAttrValue id=\"4\" attribute_id=\"4\" longValue=\"256\"/>\n \n-  <CSchema name=\"token.expireTime\" type=\"Long\"\n-           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"5\" owner_id=\"1\" schema_name=\"token.expireTime\"/>\n-  <CAttrValue id=\"5\" attribute_id=\"5\" longValue=\"60\"/>\n+  <CPlainSchema name=\"token.expireTime\" type=\"Long\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"5\" owner_id=\"1\" schema_name=\"token.expireTime\"/>\n+  <CPlainAttrValue id=\"5\" attribute_id=\"5\" longValue=\"60\"/>\n \n-  <CSchema name=\"selfRegistration.allowed\" type=\"Boolean\"\n-           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"6\" owner_id=\"1\" schema_name=\"selfRegistration.allowed\"/>\n-  <CAttrValue id=\"6\" attribute_id=\"6\" booleanValue=\"1\"/>\n+  <CPlainSchema name=\"selfRegistration.allowed\" type=\"Boolean\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"6\" owner_id=\"1\" schema_name=\"selfRegistration.allowed\"/>\n+  <CPlainAttrValue id=\"6\" attribute_id=\"6\" booleanValue=\"1\"/>\n \n-  <CSchema name=\"passwordReset.allowed\" type=\"Boolean\"\n-           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"7\" owner_id=\"1\" schema_name=\"passwordReset.allowed\"/>\n-  <CAttrValue id=\"7\" attribute_id=\"7\" booleanValue=\"1\"/>\n+  <CPlainSchema name=\"passwordReset.allowed\" type=\"Boolean\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"7\" owner_id=\"1\" schema_name=\"passwordReset.allowed\"/>\n+  <CPlainAttrValue id=\"7\" attribute_id=\"7\" booleanValue=\"1\"/>\n \n-  <CSchema name=\"passwordReset.securityQuestion\" type=\"Boolean\"\n-           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"8\" owner_id=\"1\" schema_name=\"passwordReset.securityQuestion\"/>\n-  <CAttrValue id=\"8\" attribute_id=\"8\" booleanValue=\"1\"/>\n+  <CPlainSchema name=\"passwordReset.securityQuestion\" type=\"Boolean\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"8\" owner_id=\"1\" schema_name=\"passwordReset.securityQuestion\"/>\n+  <CPlainAttrValue id=\"8\" attribute_id=\"8\" booleanValue=\"1\"/>\n \n-  <CSchema name=\"authentication.statuses\" type=\"String\"\n-           mandatoryCondition=\"true\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"9\" owner_id=\"1\" schema_name=\"authentication.statuses\"/>\n-  <CAttrValue id=\"9\" attribute_id=\"9\" stringValue=\"created\"/>\n-  <CAttrValue id=\"10\" attribute_id=\"9\" stringValue=\"active\"/>\n+  <CPlainSchema name=\"authentication.statuses\" type=\"String\"\n+                mandatoryCondition=\"true\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"9\" owner_id=\"1\" schema_name=\"authentication.statuses\"/>\n+  <CPlainAttrValue id=\"9\" attribute_id=\"9\" stringValue=\"created\"/>\n+  <CPlainAttrValue id=\"10\" attribute_id=\"9\" stringValue=\"active\"/>\n \n   <!-- Save user login date upon successful authentication -->\n-  <CSchema name=\"log.lastlogindate\" type=\"Boolean\"\n-           mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CAttr id=\"11\" owner_id=\"1\" schema_name=\"log.lastlogindate\"/>\n-  <CAttrValue id=\"11\" attribute_id=\"11\" booleanValue=\"1\"/>\n+  <CPlainSchema name=\"log.lastlogindate\" type=\"Boolean\"\n+                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"11\" owner_id=\"1\" schema_name=\"log.lastlogindate\"/>\n+  <CPlainAttrValue id=\"11\" attribute_id=\"11\" booleanValue=\"1\"/>\n \n   <!-- For usage with admin console -->\n-  <CSchema name=\"admin.user.layout\" type=\"String\"\n-           mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CSchema name=\"self.user.layout\" type=\"String\"\n-           mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CSchema name=\"admin.role.layout\" type=\"String\"\n-           mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CSchema name=\"self.role.layout\" type=\"String\"\n-           mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CSchema name=\"admin.membership.layout\" type=\"String\"\n-           mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n-  <CSchema name=\"self.membership.layout\" type=\"String\"\n-           mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainSchema name=\"admin.user.layout\" type=\"String\"\n+                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainSchema name=\"self.user.layout\" type=\"String\"\n+                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainSchema name=\"admin.role.layout\" type=\"String\"\n+                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainSchema name=\"self.role.layout\" type=\"String\"\n+                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainSchema name=\"admin.membership.layout\" type=\"String\"\n+                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainSchema name=\"self.membership.layout\" type=\"String\"\n+                mandatoryCondition=\"false\" multivalue=\"1\" uniqueConstraint=\"0\" readonly=\"0\"/>\n         \n   <!-- User pre-defined schemas -->\n-  <USchema name=\"email\" type=\"String\"\n-           mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n-           validatorClass=\"org.apache.syncope.core.persistence.validation.attrvalue.EmailAddressValidator\"/>  \n+  <UPlainSchema name=\"email\" type=\"String\"\n+                mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n+                validatorClass=\"org.apache.syncope.persistence.jpa.attrvalue.validation.EmailAddressValidator\"/>\n   \n   <!-- Password reset notifications -->\n   <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserSchema\" selfAsRecipient=\"1\" "},{"sha":"2f54395ed003e532a83a5a1af66ba06eaa0c857b","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/AttributableSearchTest.java","status":"modified","additions":23,"deletions":23,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FAttributableSearchTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -116,7 +116,7 @@ public void searchWithLikeCondition() {\n         assertTrue(cond.isValid());\n \n         List<User> users =\n-                searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond, SubjectType.USER);\n+                searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), cond, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -131,7 +131,7 @@ public void searchWithNotCondition() {\n         assertTrue(cond.isValid());\n \n         List<User> users =\n-                searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond, SubjectType.USER);\n+                searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), cond, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(4, users.size());\n \n@@ -153,7 +153,7 @@ public void searchByBoolean() {\n         assertTrue(cond.isValid());\n \n         List<User> users =\n-                searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), cond, SubjectType.USER);\n+                searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), cond, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n@@ -182,13 +182,13 @@ public void searchByPageAndSize() {\n \n         assertTrue(cond.isValid());\n \n-        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 cond, 1, 2, Collections.<OrderByClause>emptyList(),\n                 SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n-        users = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        users = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 cond, 2, 2, Collections.<OrderByClause>emptyList(),\n                 SubjectType.USER);\n         assertNotNull(users);\n@@ -201,7 +201,7 @@ public void searchByMembership() {\n         membershipCond.setRoleId(1L);\n \n         List<User> users = searchDAO.search(\n-                RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), SearchCond.getLeafCond(membershipCond),\n+                RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), SearchCond.getLeafCond(membershipCond),\n                 SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n@@ -210,7 +210,7 @@ public void searchByMembership() {\n         membershipCond.setRoleId(5L);\n \n         users = searchDAO.search(\n-                RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), SearchCond.getNotLeafCond(membershipCond),\n+                RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), SearchCond.getNotLeafCond(membershipCond),\n                 SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(5, users.size());\n@@ -222,7 +222,7 @@ public void searchByIsNull() {\n         coolLeafCond.setSchema(\"cool\");\n \n         List<User> users = searchDAO.search(\n-                RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), SearchCond.getLeafCond(coolLeafCond),\n+                RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), SearchCond.getLeafCond(coolLeafCond),\n                 SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(4, users.size());\n@@ -231,7 +231,7 @@ public void searchByIsNull() {\n         coolLeafCond.setSchema(\"cool\");\n \n         users = searchDAO.search(\n-                RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), SearchCond.getLeafCond(coolLeafCond),\n+                RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), SearchCond.getLeafCond(coolLeafCond),\n                 SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n@@ -250,7 +250,7 @@ public void searchByResource() {\n         assertTrue(searchCondition.isValid());\n \n         List<User> users = searchDAO.search(\n-                RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n+                RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), searchCondition,\n                 SubjectType.USER);\n \n         assertNotNull(users);\n@@ -270,7 +270,7 @@ public void searchByUsernameAndId() {\n         SearchCond searchCondition = SearchCond.getOrCond(SearchCond.getLeafCond(usernameLeafCond),\n                 SearchCond.getLeafCond(idRightCond));\n \n-        List<User> matchingUsers = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<User> matchingUsers = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, SubjectType.USER);\n \n         assertNotNull(matchingUsers);\n@@ -294,7 +294,7 @@ public void searchByRolenameAndId() {\n \n         assertTrue(searchCondition.isValid());\n \n-        List<Role> matchingRoles = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<Role> matchingRoles = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, SubjectType.ROLE);\n \n         assertNotNull(matchingRoles);\n@@ -317,7 +317,7 @@ public void searchByUsernameAndFullname() {\n                 SearchCond.getLeafCond(idRightCond));\n \n         List<User> matchingUsers =\n-                searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n+                searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), searchCondition,\n                         SubjectType.USER);\n \n         assertNotNull(matchingUsers);\n@@ -334,7 +334,7 @@ public void searchById() {\n         assertTrue(searchCondition.isValid());\n \n         List<User> users =\n-                searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n+                searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), searchCondition,\n                         SubjectType.USER);\n \n         assertNotNull(users);\n@@ -348,7 +348,7 @@ public void searchById() {\n         searchCondition = SearchCond.getNotLeafCond(idLeafCond);\n         assertTrue(searchCondition.isValid());\n \n-        users = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition,\n+        users = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), searchCondition,\n                 SubjectType.USER);\n \n         assertNotNull(users);\n@@ -383,10 +383,10 @@ public void userOrderBy() {\n         orderByClause.setDirection(OrderByClause.Direction.ASC);\n         orderByClauses.add(orderByClause);\n \n-        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, Collections.singletonList(orderByClause),\n                 SubjectType.USER);\n-        assertEquals(searchDAO.count(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        assertEquals(searchDAO.count(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, SubjectType.USER),\n                 users.size());\n     }\n@@ -402,9 +402,9 @@ public void roleOrderBy() {\n         OrderByClause orderByClause = new OrderByClause();\n         orderByClause.setField(\"name\");\n \n-        List<Role> roles = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<Role> roles = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, Collections.singletonList(orderByClause), SubjectType.ROLE);\n-        assertEquals(searchDAO.count(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        assertEquals(searchDAO.count(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, SubjectType.ROLE),\n                 roles.size());\n     }\n@@ -421,7 +421,7 @@ public void issue202() {\n                 SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getNotLeafCond(ws1));\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n@@ -443,7 +443,7 @@ public void issue242() {\n         SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, SubjectType.USER);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n@@ -458,7 +458,7 @@ public void issueSYNCOPE46() {\n         SearchCond searchCondition = SearchCond.getLeafCond(cond);\n         assertTrue(searchCondition.isValid());\n \n-        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+        List<User> users = searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()),\n                 searchCondition, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n@@ -476,7 +476,7 @@ public void issueSYNCOPE433() {\n         SearchCond searchCond = SearchCond.getOrCond(\n                 SearchCond.getLeafCond(isNullCond), SearchCond.getLeafCond(likeCond));\n \n-        Integer count = searchDAO.count(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCond,\n+        Integer count = searchDAO.count(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), searchCond,\n                 SubjectType.USER);\n         assertNotNull(count);\n         assertTrue(count > 0);"},{"sha":"cda790a79c7720efe34907cba7c640cb27c08596","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/entity/UserTest.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Fentity%2FUserTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -50,20 +50,20 @@ public class UserTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<User> list = userDAO.findAll(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()), 1, 100);\n+        List<User> list = userDAO.findAll(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), 1, 100);\n         assertEquals(\"did not get expected number of users \", 5, list.size());\n     }\n \n     @Test\n     public void count() {\n-        Integer count = userDAO.count(RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll()));\n+        Integer count = userDAO.count(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()));\n         assertNotNull(count);\n         assertEquals(5, count.intValue());\n     }\n \n     @Test\n     public void findAllByPageAndSize() {\n-        Set<Long> allRoleIds = RoleEntitlementUtil.getRoleIds(entitlementDAO.findAll());\n+        Set<Long> allRoleIds = RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll());\n \n         // get first page\n         List<User> list = userDAO.findAll(allRoleIds, 1, 2);"},{"sha":"c1fd3c9cf06d7bcd2783635f3b6b043dd92805f9","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/AttrTest.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttrTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,197 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.persistence.api.dao.DerAttrDAO;\n+import org.apache.syncope.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.MembershipDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttr;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.membership.MPlainSchema;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrTemplate;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n+import org.apache.syncope.persistence.api.entity.user.UDerSchema;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.apache.syncope.persistence.jpa.entity.JPAAttributableUtil;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttr;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMPlainSchema;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUDerAttr;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUDerSchema;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class AttrTest extends AbstractTest {\n+\n+    @Autowired\n+    private PlainAttrDAO plainAttrDAO;\n+\n+    @Autowired\n+    private DerAttrDAO derAttrDAO;\n+\n+    @Autowired\n+    private PlainAttrValueDAO plainAttrValueDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private MembershipDAO membershipDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void deleteAttribute() {\n+        plainAttrDAO.delete(117L, UPlainAttr.class);\n+\n+        plainAttrDAO.flush();\n+\n+        assertNull(plainAttrDAO.find(117L, UPlainAttr.class));\n+        assertNull(plainAttrValueDAO.find(28L, UPlainAttrValue.class));\n+    }\n+\n+    @Test\n+    public void deleteAttributeValue() {\n+        UPlainAttrValue value = plainAttrValueDAO.find(14L, UPlainAttrValue.class);\n+        int attributeValueNumber = value.getAttr().getValues().size();\n+\n+        plainAttrValueDAO.delete(value.getKey(), UPlainAttrValue.class);\n+\n+        plainAttrValueDAO.flush();\n+\n+        assertNull(plainAttrValueDAO.find(value.getKey(), UPlainAttrValue.class));\n+\n+        UPlainAttr attribute = plainAttrDAO.find(104L, UPlainAttr.class);\n+        assertEquals(attribute.getValues().size(), attributeValueNumber - 1);\n+    }\n+\n+    @Test\n+    public void checkForEnumType() {\n+        User user = userDAO.find(1L);\n+        Membership membership = user.getMembership(1L);\n+        assertNotNull(membership);\n+\n+        MPlainSchema schema = new JPAMPlainSchema();\n+        schema.setType(AttrSchemaType.Enum);\n+        schema.setKey(\"color\");\n+        schema.setEnumerationValues(\"red\" + SyncopeConstants.ENUM_VALUES_SEPARATOR + \"yellow\");\n+\n+        MPlainSchema actualSchema = plainSchemaDAO.save(schema);\n+        assertNotNull(actualSchema);\n+\n+        MPlainAttrTemplate template = new JPAMPlainAttrTemplate();\n+        template.setSchema(actualSchema);\n+        membership.getRole().getAttrTemplates(MPlainAttrTemplate.class).add(template);\n+\n+        MPlainAttr attr = new JPAMPlainAttr();\n+        attr.setTemplate(template);\n+        attr.setOwner(membership);\n+        attr.addValue(\"yellow\", JPAAttributableUtil.getInstance(AttributableType.MEMBERSHIP));\n+        membership.addPlainAttr(attr);\n+\n+        MPlainAttr actualAttribute = userDAO.save(user).getMembership(1L).getPlainAttr(\"color\");\n+        assertNotNull(actualAttribute);\n+\n+        membership = membershipDAO.find(1L);\n+        assertNotNull(membership);\n+        assertNotNull(membership.getPlainAttr(schema.getKey()));\n+        assertNotNull(membership.getPlainAttr(schema.getKey()).getValues());\n+\n+        assertEquals(membership.getPlainAttr(schema.getKey()).getValues().size(), 1);\n+    }\n+\n+    @Test\n+    public void derAttrFromSpecialAttrs() {\n+        UDerSchema sderived = new JPAUDerSchema();\n+        sderived.setKey(\"sderived\");\n+        sderived.setExpression(\"username + ' - ' + creationDate + '[' + failedLogins + ']'\");\n+\n+        sderived = derSchemaDAO.save(sderived);\n+        derSchemaDAO.flush();\n+\n+        UDerSchema actual = derSchemaDAO.find(\"sderived\", UDerSchema.class);\n+        assertNotNull(\"expected save to work\", actual);\n+        assertEquals(sderived, actual);\n+\n+        User owner = userDAO.find(3L);\n+        assertNotNull(\"did not get expected user\", owner);\n+\n+        UDerAttr derAttr = new JPAUDerAttr();\n+        derAttr.setOwner(owner);\n+        derAttr.setSchema(sderived);\n+\n+        derAttr = derAttrDAO.save(derAttr);\n+        derAttrDAO.flush();\n+\n+        derAttr = derAttrDAO.find(derAttr.getKey(), UDerAttr.class);\n+        assertNotNull(\"expected save to work\", derAttr);\n+\n+        String value = derAttr.getValue(owner.getPlainAttrs());\n+        assertNotNull(value);\n+        assertFalse(value.isEmpty());\n+        assertTrue(value.startsWith(\"vivaldi - 2010-10-20\"));\n+        assertTrue(value.endsWith(\"[0]\"));\n+    }\n+\n+    @Test\n+    public void unmatchedRoleAttr() {\n+        Role role = roleDAO.find(1L);\n+        assertNotNull(role);\n+\n+        assertNotNull(role.getAttrTemplate(RPlainAttrTemplate.class, \"icon\"));\n+        assertNotNull(role.getPlainAttr(\"icon\"));\n+\n+        assertTrue(role.getAttrTemplates(RPlainAttrTemplate.class).\n+                remove(role.getAttrTemplate(RPlainAttrTemplate.class, \"icon\")));\n+\n+        role = roleDAO.save(role);\n+        roleDAO.flush();\n+\n+        assertNull(role.getAttrTemplate(RPlainAttrTemplate.class, \"icon\"));\n+        assertNull(role.getPlainAttr(\"icon\"));\n+    }\n+}"},{"sha":"97b6042315edef2fa5d0ba8c37eae188362b37c5","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/AttributableSearchTest.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttributableSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttributableSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FAttributableSearchTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.persistence.api.RoleEntitlementUtil;\n+import org.apache.syncope.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.dao.SubjectSearchDAO;\n+import org.apache.syncope.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class AttributableSearchTest extends AbstractTest {\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private SubjectSearchDAO searchDAO;\n+\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    @Test\n+    public void issueSYNCOPE95() {\n+        Set<Role> roles = new HashSet<>(roleDAO.findAll());\n+        for (Role role : roles) {\n+            roleDAO.delete(role.getKey());\n+        }\n+        roleDAO.flush();\n+\n+        final AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n+        coolLeafCond.setSchema(\"cool\");\n+        coolLeafCond.setExpression(\"true\");\n+\n+        final SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n+        assertTrue(cond.isValid());\n+\n+        final List<User> users =\n+                searchDAO.search(RoleEntitlementUtil.getRoleKeys(entitlementDAO.findAll()), cond, SubjectType.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+\n+        assertEquals(Long.valueOf(4L), users.get(0).getKey());\n+    }\n+}"},{"sha":"a0fa69d72d9056eba65e02c6feaee5a2cb3d33c2","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/ConnInstanceTest.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FConnInstanceTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.syncope.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class ConnInstanceTest extends AbstractTest {\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    @Test\n+    public void deleteCascade() {\n+        ConnInstance connInstance = connInstanceDAO.find(103L);\n+        assertNotNull(connInstance);\n+\n+        List<? extends ExternalResource> resources = connInstance.getResources();\n+        assertNotNull(resources);\n+        assertFalse(resources.isEmpty());\n+\n+        connInstanceDAO.delete(connInstance.getKey());\n+\n+        connInstanceDAO.flush();\n+\n+        ConnInstance actual = connInstanceDAO.find(103L);\n+        assertNull(actual);\n+\n+        for (ExternalResource resource : resources) {\n+            assertNull(resourceDAO.find(resource.getKey()));\n+        }\n+    }\n+\n+    /**\n+     * Connector change used to miss connector bean registration.\n+     *\n+     * http://code.google.com/p/syncope/issues/detail?id=176\n+     */\n+    @Test\n+    public void issue176() {\n+        ConnInstance connInstance = connInstanceDAO.find(103L);\n+        assertNotNull(connInstance);\n+        assertTrue(connInstance.getCapabilities().isEmpty());\n+\n+        List<? extends ExternalResource> resources = connInstance.getResources();\n+        assertNotNull(resources);\n+        assertEquals(4, resources.size());\n+        assertTrue(\n+                \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(0).getKey())\n+                || \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(1).getKey())\n+                || \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(2).getKey())\n+                || \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(3).getKey()));\n+\n+        connInstance.addCapability(ConnectorCapability.SEARCH);\n+\n+        connInstance = connInstanceDAO.save(connInstance);\n+        assertNotNull(connInstance);\n+        assertFalse(connInstance.getCapabilities().isEmpty());\n+\n+        resources = connInstance.getResources();\n+        assertNotNull(resources);\n+        assertEquals(4, resources.size());\n+        assertTrue(\n+                \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(0).getKey())\n+                || \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(1).getKey())\n+                || \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(2).getKey())\n+                || \"ws-target-resource-nopropagation\".equalsIgnoreCase(resources.get(3).getKey()));\n+    }\n+}"},{"sha":"685c2e2e66ac002a2d36baf3c0d61cb33631a0f0","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/DerSchemaTest.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FDerSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FDerSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FDerSchemaTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,59 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertNull;\n+\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.persistence.api.dao.DerAttrDAO;\n+import org.apache.syncope.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.user.UDerAttr;\n+import org.apache.syncope.persistence.api.entity.user.UDerSchema;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.apache.syncope.persistence.jpa.entity.JPAAttributableUtil;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class DerSchemaTest extends AbstractTest {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private DerSchemaDAO derSchemaDAO;\n+\n+    @Autowired\n+    private DerAttrDAO derAttrDAO;\n+\n+    @Test\n+    public void test() {\n+        UDerSchema schema = derSchemaDAO.find(\"cn\", UDerSchema.class);\n+\n+        derSchemaDAO.delete(schema.getKey(), JPAAttributableUtil.getInstance(AttributableType.USER));\n+\n+        derSchemaDAO.flush();\n+\n+        assertNull(derSchemaDAO.find(schema.getKey(), UDerSchema.class));\n+        assertNull(derAttrDAO.find(100L, UDerAttr.class));\n+        assertNull(userDAO.find(3L).getDerAttr(schema.getKey()));\n+    }\n+}"},{"sha":"77d77c0fceac196c791d29d024ea8990adcb4f48","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/MembershipTest.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FMembershipTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FMembershipTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FMembershipTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertTrue;\n+\n+import org.apache.syncope.persistence.api.dao.MembershipDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.apache.syncope.persistence.jpa.entity.membership.JPAMembership;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+\n+\n+@Transactional\n+public class MembershipTest extends AbstractTest {\n+\n+    @Autowired\n+    private MembershipDAO membershipDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Test\n+    public void delete() {\n+        Membership membership = membershipDAO.find(4L);\n+        User user = membership.getUser();\n+        Role role = membership.getRole();\n+\n+        membershipDAO.delete(4L);\n+\n+        membershipDAO.flush();\n+\n+        for (Membership m : user.getMemberships()) {\n+            assertTrue(m.getKey() != 4L);\n+        }\n+        for (Membership m : roleDAO.findMemberships(role)) {\n+            assertTrue(m.getKey() != 4L);\n+        }\n+    }\n+\n+    @Test\n+    public void deleteAndCreate() {\n+        Membership membership = membershipDAO.find(3L);\n+        User user = membership.getUser();\n+        Role role = membership.getRole();\n+\n+        // 1. delete that membership\n+        membershipDAO.delete(membership.getKey());\n+\n+        // if not flushing here, the INSERT below will be executed\n+        // before the DELETE above\n+        membershipDAO.flush();\n+\n+        // 2. (in the same transaction) create new membership with same user\n+        // and role (in order to check the UNIQE constraint on Membership)\n+        membership = new JPAMembership();\n+        membership.setUser(user);\n+        membership.setRole(role);\n+\n+        membership = membershipDAO.save(membership);\n+    }\n+}"},{"sha":"29fb41e12415c0f5d35277e9493445df6372f857","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/PlainSchemaTest.java","status":"added","additions":158,"deletions":0,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FPlainSchemaTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,158 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.MappingItem;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.apache.syncope.persistence.jpa.entity.JPAAttributableUtil;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class PlainSchemaTest extends AbstractTest {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private PlainAttrDAO plainAttrDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Test\n+    public void deleteFullname() {\n+        // fullname is mapped as AccountId for ws-target-resource-2, need to swap it otherwise validation errors \n+        // will be raised\n+        for (MappingItem item : resourceDAO.find(\"ws-target-resource-2\").getUmapping().getItems()) {\n+            if (\"fullname\".equals(item.getIntAttrName())) {\n+                item.setAccountid(false);\n+            } else if (\"surname\".equals(item.getIntAttrName())) {\n+                item.setAccountid(true);\n+            }\n+        }\n+\n+        // search for user schema fullname\n+        UPlainSchema schema = plainSchemaDAO.find(\"fullname\", UPlainSchema.class);\n+        assertNotNull(schema);\n+\n+        // check for associated mappings\n+        Set<MappingItem> mapItems = new HashSet<>();\n+        for (ExternalResource resource : resourceDAO.findAll()) {\n+            if (resource.getUmapping() != null) {\n+                for (MappingItem mapItem : resource.getUmapping().getItems()) {\n+                    if (schema.getKey().equals(mapItem.getIntAttrName())) {\n+                        mapItems.add(mapItem);\n+                    }\n+                }\n+            }\n+        }\n+        assertFalse(mapItems.isEmpty());\n+\n+        // delete user schema fullname\n+        plainSchemaDAO.delete(\"fullname\", JPAAttributableUtil.getInstance(AttributableType.USER));\n+\n+        plainSchemaDAO.flush();\n+\n+        // check for schema deletion\n+        schema = plainSchemaDAO.find(\"fullname\", UPlainSchema.class);\n+        assertNull(schema);\n+\n+        plainSchemaDAO.clear();\n+\n+        // check for mappings deletion\n+        mapItems = new HashSet<>();\n+        for (ExternalResource resource : resourceDAO.findAll()) {\n+            if (resource.getUmapping() != null) {\n+                for (MappingItem mapItem : resource.getUmapping().getItems()) {\n+                    if (\"fullname\".equals(mapItem.getIntAttrName())) {\n+                        mapItems.add(mapItem);\n+                    }\n+                }\n+            }\n+        }\n+        assertTrue(mapItems.isEmpty());\n+\n+        assertNull(plainAttrDAO.find(100L, UPlainAttr.class));\n+        assertNull(plainAttrDAO.find(300L, UPlainAttr.class));\n+        assertNull(userDAO.find(1L).getPlainAttr(\"fullname\"));\n+        assertNull(userDAO.find(3L).getPlainAttr(\"fullname\"));\n+    }\n+\n+    @Test\n+    public void deleteSurname() {\n+        // search for user schema fullname\n+        UPlainSchema schema = plainSchemaDAO.find(\"surname\", UPlainSchema.class);\n+        assertNotNull(schema);\n+\n+        // check for associated mappings\n+        Set<MappingItem> mappings = new HashSet<>();\n+        for (ExternalResource resource : resourceDAO.findAll()) {\n+            if (resource.getUmapping() != null) {\n+                for (MappingItem mapItem : resource.getUmapping().getItems()) {\n+                    if (schema.getKey().equals(mapItem.getIntAttrName())) {\n+                        mappings.add(mapItem);\n+                    }\n+                }\n+            }\n+        }\n+        assertFalse(mappings.isEmpty());\n+\n+        // delete user schema fullname\n+        plainSchemaDAO.delete(\"surname\", JPAAttributableUtil.getInstance(AttributableType.USER));\n+\n+        plainSchemaDAO.flush();\n+\n+        // check for schema deletion\n+        schema = plainSchemaDAO.find(\"surname\", UPlainSchema.class);\n+        assertNull(schema);\n+    }\n+\n+    @Test\n+    public void deleteALong() {\n+        assertEquals(6, resourceDAO.find(\"resource-db-sync\").getUmapping().getItems().size());\n+\n+        plainSchemaDAO.delete(\"aLong\", JPAAttributableUtil.getInstance(AttributableType.USER));\n+        assertNull(plainSchemaDAO.find(\"aLong\", UPlainSchema.class));\n+\n+        plainSchemaDAO.flush();\n+\n+        assertEquals(5, resourceDAO.find(\"resource-db-sync\").getUmapping().getItems().size());\n+    }\n+}"},{"sha":"55481cd15605a26c26f918424e7233e54d24bf95","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/ReportTest.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FReportTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.util.Date;\n+import javax.persistence.EntityExistsException;\n+import org.apache.syncope.common.lib.types.ReportExecStatus;\n+import org.apache.syncope.persistence.api.dao.ReportDAO;\n+import org.apache.syncope.persistence.api.dao.ReportExecDAO;\n+import org.apache.syncope.persistence.api.entity.Report;\n+import org.apache.syncope.persistence.api.entity.ReportExec;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.apache.syncope.persistence.jpa.entity.JPAReport;\n+import org.apache.syncope.persistence.jpa.entity.JPAReportExec;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class ReportTest extends AbstractTest {\n+\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    @Autowired\n+    private ReportExecDAO reportExecDAO;\n+\n+    @Test\n+    public void find() {\n+        Report report = reportDAO.find(1L);\n+        assertNotNull(report);\n+\n+        assertNotNull(report.getExecs());\n+        assertFalse(report.getExecs().isEmpty());\n+        assertEquals(1, report.getExecs().size());\n+    }\n+\n+    @Test(expected = EntityExistsException.class)\n+    public void saveWithExistingName() {\n+        Report report = reportDAO.find(1L);\n+        assertNotNull(report);\n+\n+        String name = report.getName();\n+\n+        report = new JPAReport();\n+        report.setName(name);\n+\n+        reportDAO.save(report);\n+        reportDAO.flush();\n+    }\n+\n+    @Test\n+    public void save() {\n+        Report report = reportDAO.find(1L);\n+        assertNotNull(report);\n+        assertEquals(1, report.getExecs().size());\n+\n+        ReportExec reportExec = new JPAReportExec();\n+        reportExec.setReport(report);\n+        reportExec.setStartDate(new Date());\n+        reportExec.setEndDate(new Date());\n+        reportExec.setStatus(ReportExecStatus.SUCCESS);\n+\n+        report.addExec(reportExec);\n+\n+        reportExec = reportExecDAO.save(reportExec);\n+        assertNotNull(reportExec);\n+        assertNotNull(reportExec.getKey());\n+\n+        reportExecDAO.flush();\n+\n+        report = reportDAO.find(1L);\n+        assertNotNull(report);\n+        assertEquals(2, report.getExecs().size());\n+    }\n+\n+    @Test\n+    public void deleteReport() {\n+        reportDAO.delete(1L);\n+\n+        reportDAO.flush();\n+\n+        assertNull(reportDAO.find(1L));\n+        assertNull(reportExecDAO.find(1L));\n+    }\n+\n+    @Test\n+    public void deleteReportExecution() {\n+        ReportExec execution = reportExecDAO.find(1L);\n+        int executionNumber = execution.getReport().getExecs().size();\n+\n+        reportExecDAO.delete(1L);\n+\n+        reportExecDAO.flush();\n+\n+        assertNull(reportExecDAO.find(1L));\n+\n+        Report report = reportDAO.find(1L);\n+        assertEquals(report.getExecs().size(), executionNumber - 1);\n+    }\n+}"},{"sha":"a78aeeeb10be34e11e01cc269078b911f491173f","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/ResourceTest.java","status":"added","additions":298,"deletions":0,"changes":298,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,298 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.persistence.EntityManager;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.dao.ConnInstanceDAO;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.persistence.api.entity.role.RMappingItem;\n+import org.apache.syncope.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.persistence.api.entity.user.UMapping;\n+import org.apache.syncope.persistence.api.entity.user.UMappingItem;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.apache.syncope.persistence.jpa.entity.JPAExternalResource;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARMappingItem;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUMapping;\n+import org.apache.syncope.persistence.jpa.entity.user.JPAUMappingItem;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class ResourceTest extends AbstractTest {\n+\n+    @Autowired\n+    private EntityManager entityManager;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Test\n+    public void createWithPasswordPolicy() {\n+        final String resourceName = \"resourceWithPasswordPolicy\";\n+\n+        PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n+        ExternalResource resource = new JPAExternalResource();\n+        resource.setKey(resourceName);\n+        resource.setPasswordPolicy(policy);\n+\n+        ConnInstance connector = connInstanceDAO.find(100L);\n+        assertNotNull(\"connector not found\", connector);\n+        resource.setConnector(connector);\n+\n+        ExternalResource actual = resourceDAO.save(resource);\n+        assertNotNull(actual);\n+\n+        actual = resourceDAO.find(actual.getKey());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+\n+        resourceDAO.delete(resourceName);\n+        assertNull(resourceDAO.find(resourceName));\n+\n+        assertNotNull(policyDAO.find(4L));\n+    }\n+\n+    @Test\n+    public void save() {\n+        ExternalResource resource = new JPAExternalResource();\n+        resource.setKey(\"ws-target-resource-save\");\n+\n+        // specify the connector\n+        ConnInstance connector = connInstanceDAO.find(100L);\n+        assertNotNull(\"connector not found\", connector);\n+\n+        resource.setConnector(connector);\n+\n+        UMapping mapping = new JPAUMapping();\n+        mapping.setResource(resource);\n+        resource.setUmapping(mapping);\n+\n+        // specify mappings\n+        for (int i = 0; i < 3; i++) {\n+            UMappingItem item = new JPAUMappingItem();\n+            item.setExtAttrName(\"test\" + i);\n+            item.setIntAttrName(\"nonexistent\" + i);\n+            item.setIntMappingType(IntMappingType.UserSchema);\n+            item.setMandatoryCondition(\"false\");\n+            item.setPurpose(MappingPurpose.SYNCHRONIZATION);\n+            mapping.addItem(item);\n+            item.setMapping(mapping);\n+        }\n+        UMappingItem accountId = new JPAUMappingItem();\n+        accountId.setExtAttrName(\"username\");\n+        accountId.setIntAttrName(\"username\");\n+        accountId.setIntMappingType(IntMappingType.UserId);\n+        accountId.setPurpose(MappingPurpose.PROPAGATION);\n+        mapping.setAccountIdItem(accountId);\n+        accountId.setMapping(mapping);\n+\n+        // map a derived attribute\n+        UMappingItem derived = new JPAUMappingItem();\n+        derived.setAccountid(false);\n+        derived.setExtAttrName(\"fullname\");\n+        derived.setIntAttrName(\"cn\");\n+        derived.setIntMappingType(IntMappingType.UserDerivedSchema);\n+        derived.setPurpose(MappingPurpose.PROPAGATION);\n+        mapping.addItem(derived);\n+        derived.setMapping(mapping);\n+\n+        // save the resource\n+        ExternalResource actual = resourceDAO.save(resource);\n+        assertNotNull(actual);\n+        assertNotNull(actual.getUmapping());\n+\n+        resourceDAO.flush();\n+        resourceDAO.detach(actual);\n+        connInstanceDAO.detach(connector);\n+\n+        // assign the new resource to an user\n+        User user = userDAO.find(1L);\n+        assertNotNull(\"user not found\", user);\n+\n+        user.addResource(actual);\n+\n+        resourceDAO.flush();\n+\n+        // retrieve resource\n+        resource = resourceDAO.find(actual.getKey());\n+        assertNotNull(resource);\n+\n+        // check connector\n+        connector = connInstanceDAO.find(100L);\n+        assertNotNull(connector);\n+\n+        assertNotNull(connector.getResources());\n+        assertTrue(connector.getResources().contains(resource));\n+\n+        assertNotNull(resource.getConnector());\n+        assertTrue(resource.getConnector().equals(connector));\n+\n+        // check mappings\n+        List<? extends UMappingItem> items = resource.getUmapping().getItems();\n+        assertNotNull(items);\n+        assertEquals(5, items.size());\n+\n+        // check user\n+        user = userDAO.find(1L);\n+        assertNotNull(user);\n+        assertNotNull(user.getResources());\n+        assertTrue(user.getResources().contains(actual));\n+    }\n+\n+    @Test\n+    public void delete() {\n+        ExternalResource resource = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNotNull(\"find to delete did not work\", resource);\n+\n+        // -------------------------------------\n+        // Get originally associated connector\n+        // -------------------------------------\n+        ConnInstance connector = resource.getConnector();\n+        assertNotNull(connector);\n+\n+        Long connectorId = connector.getKey();\n+        // -------------------------------------\n+\n+        // -------------------------------------\n+        // Get originally associated users\n+        // -------------------------------------\n+        List<User> users = userDAO.findByResource(resource);\n+        assertNotNull(users);\n+\n+        Set<Long> userIds = new HashSet<Long>();\n+        for (User user : users) {\n+            userIds.add(user.getKey());\n+        }\n+        // -------------------------------------\n+\n+        // Get tasks\n+        List<PropagationTask> propagationTasks = taskDAO.findAll(resource, TaskType.PROPAGATION);\n+        assertFalse(propagationTasks.isEmpty());\n+\n+        // delete resource\n+        resourceDAO.delete(resource.getKey());\n+\n+        // close the transaction\n+        resourceDAO.flush();\n+\n+        // resource must be removed\n+        ExternalResource actual = resourceDAO.find(\"ws-target-resource-2\");\n+        assertNull(\"delete did not work\", actual);\n+\n+        // resource must be not referenced any more from users\n+        for (Long id : userIds) {\n+            User actualUser = userDAO.find(id);\n+            assertNotNull(actualUser);\n+            for (ExternalResource res : actualUser.getResources()) {\n+                assertFalse(res.getKey().equalsIgnoreCase(resource.getKey()));\n+            }\n+        }\n+\n+        // resource must be not referenced any more from the connector\n+        ConnInstance actualConnector = connInstanceDAO.find(connectorId);\n+        assertNotNull(actualConnector);\n+        for (ExternalResource res : actualConnector.getResources()) {\n+            assertFalse(res.getKey().equalsIgnoreCase(resource.getKey()));\n+        }\n+\n+        // there must be no tasks\n+        for (PropagationTask task : propagationTasks) {\n+            assertNull(taskDAO.find(task.getKey()));\n+        }\n+    }\n+\n+    @Test\n+    public void emptyMapping() {\n+        ExternalResource ldap = resourceDAO.find(\"resource-ldap\");\n+        assertNotNull(ldap);\n+        assertNotNull(ldap.getUmapping());\n+        assertNotNull(ldap.getRmapping());\n+\n+        List<? extends RMappingItem> items = ldap.getRmapping().getItems();\n+        assertNotNull(items);\n+        assertFalse(items.isEmpty());\n+        List<Long> itemIds = new ArrayList<Long>(items.size());\n+        for (RMappingItem item : items) {\n+            itemIds.add(item.getKey());\n+        }\n+\n+        ldap.setRmapping(null);\n+\n+        resourceDAO.save(ldap);\n+        resourceDAO.flush();\n+\n+        for (Long itemId : itemIds) {\n+            assertNull(entityManager.find(JPARMappingItem.class, itemId));\n+        }\n+    }\n+\n+    @Test\n+    public void issue243() {\n+        ExternalResource csv = resourceDAO.find(\"resource-csv\");\n+        assertNotNull(csv);\n+\n+        int origMapItems = csv.getUmapping().getItems().size();\n+\n+        UMappingItem newMapItem = new JPAUMappingItem();\n+        newMapItem.setIntMappingType(IntMappingType.Username);\n+        newMapItem.setExtAttrName(\"TEST\");\n+        newMapItem.setPurpose(MappingPurpose.PROPAGATION);\n+        csv.getUmapping().addItem(newMapItem);\n+\n+        resourceDAO.save(csv);\n+        resourceDAO.flush();\n+\n+        csv = resourceDAO.find(\"resource-csv\");\n+        assertNotNull(csv);\n+        assertEquals(origMapItems + 1, csv.getUmapping().getItems().size());\n+    }\n+}"},{"sha":"5ae1ff53430f73204f13f58ff6fb28205f0e7279","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/RoleTest.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,146 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+import org.apache.syncope.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.persistence.api.dao.EntitlementDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.PasswordPolicy;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttr;\n+import org.apache.syncope.persistence.api.entity.role.RPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.role.RPlainSchema;\n+import org.apache.syncope.persistence.api.entity.role.Role;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.apache.syncope.persistence.jpa.entity.role.JPARole;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class RoleTest extends AbstractTest {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private PlainAttrDAO plainAttrDAO;\n+\n+    @Autowired\n+    private PlainAttrValueDAO plainAttrValueDAO;\n+\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Test(expected = InvalidEntityException.class)\n+    public void saveWithTwoOwners() {\n+        Role root = roleDAO.find(\"root\", null);\n+        assertNotNull(\"did not find expected role\", root);\n+\n+        User user = userDAO.find(1L);\n+        assertNotNull(\"did not find expected user\", user);\n+\n+        Role role = new JPARole();\n+        role.setName(\"error\");\n+        role.setUserOwner(user);\n+        role.setRoleOwner(root);\n+\n+        roleDAO.save(role);\n+    }\n+\n+    @Test\n+    public void findByOwner() {\n+        Role role = roleDAO.find(6L);\n+        assertNotNull(\"did not find expected role\", role);\n+\n+        User user = userDAO.find(5L);\n+        assertNotNull(\"did not find expected user\", user);\n+\n+        assertEquals(user, role.getUserOwner());\n+\n+        Role child1 = roleDAO.find(7L);\n+        assertNotNull(child1);\n+        assertEquals(role, child1.getParent());\n+\n+        Role child2 = roleDAO.find(10L);\n+        assertNotNull(child2);\n+        assertEquals(role, child2.getParent());\n+\n+        List<Role> ownedRoles = roleDAO.findOwnedByUser(user.getKey());\n+        assertFalse(ownedRoles.isEmpty());\n+        assertEquals(2, ownedRoles.size());\n+        assertTrue(ownedRoles.contains(role));\n+        assertTrue(ownedRoles.contains(child1));\n+        assertFalse(ownedRoles.contains(child2));\n+    }\n+\n+    public void createWithPasswordPolicy() {\n+        PasswordPolicy policy = (PasswordPolicy) policyDAO.find(4L);\n+        Role role = new JPARole();\n+        role.setName(\"roleWithPasswordPolicy\");\n+        role.setPasswordPolicy(policy);\n+\n+        Role actual = roleDAO.save(role);\n+        assertNotNull(actual);\n+\n+        actual = roleDAO.find(actual.getKey());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getPasswordPolicy());\n+\n+        roleDAO.delete(actual.getKey());\n+        assertNull(roleDAO.find(actual.getKey()));\n+\n+        assertNotNull(policyDAO.find(4L));\n+    }\n+\n+    @Test\n+    public void delete() {\n+        roleDAO.delete(2L);\n+\n+        roleDAO.flush();\n+\n+        assertNull(roleDAO.find(2L));\n+        assertEquals(1, roleDAO.findByEntitlement(entitlementDAO.find(\"base\")).size());\n+        assertEquals(userDAO.find(2L).getRoles().size(), 2);\n+        assertNull(plainAttrDAO.find(700L, RPlainAttr.class));\n+        assertNull(plainAttrValueDAO.find(41L, RPlainAttrValue.class));\n+        assertNotNull(plainSchemaDAO.find(\"icon\", RPlainSchema.class));\n+    }\n+}"},{"sha":"8fcac932909f499d6f874e923d297b5d016601ad","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/SecurityQuestionTest.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FSecurityQuestionTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FSecurityQuestionTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FSecurityQuestionTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertNull;\n+\n+import org.apache.syncope.persistence.api.dao.SecurityQuestionDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class SecurityQuestionTest extends AbstractTest {\n+\n+    @Autowired\n+    private SecurityQuestionDAO securityQuestionDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void test() {\n+        User user = userDAO.find(4L);\n+\n+        user.setSecurityQuestion(securityQuestionDAO.find(1L));\n+        user.setSecurityAnswer(\"Rossi\");\n+        userDAO.save(user);\n+\n+        userDAO.flush();\n+\n+        securityQuestionDAO.delete(1L);\n+\n+        userDAO.flush();\n+\n+        user = userDAO.find(4L);\n+\n+        assertNull(user.getSecurityQuestion());\n+    }\n+}"},{"sha":"f571f7d0cae7461395da95d336d53341a21cd1ac","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/TaskTest.java","status":"added","additions":201,"deletions":0,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FTaskTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,201 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.PropagationMode;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.common.lib.types.TaskType;\n+import org.apache.syncope.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.persistence.api.dao.TaskExecDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.persistence.api.entity.task.PropagationTask;\n+import org.apache.syncope.persistence.api.entity.task.PushTask;\n+import org.apache.syncope.persistence.api.entity.task.SyncTask;\n+import org.apache.syncope.persistence.api.entity.task.TaskExec;\n+import org.apache.syncope.persistence.api.entity.user.User;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.apache.syncope.persistence.jpa.entity.task.JPAPropagationTask;\n+import org.apache.syncope.persistence.jpa.entity.task.JPATaskExec;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class TaskTest extends AbstractTest {\n+\n+    @Autowired\n+    private TaskDAO taskDAO;\n+\n+    @Autowired\n+    private TaskExecDAO taskExecDAO;\n+\n+    @Autowired\n+    private ExternalResourceDAO resourceDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Test\n+    public void read() {\n+        PropagationTask task = taskDAO.find(1L);\n+        assertNotNull(task);\n+\n+        assertNotNull(task.getExecs());\n+        assertFalse(task.getExecs().isEmpty());\n+        assertEquals(1, task.getExecs().size());\n+    }\n+\n+    @Test\n+    public void save() {\n+        ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertNotNull(resource);\n+\n+        User user = userDAO.find(2L);\n+        assertNotNull(user);\n+\n+        PropagationTask task = new JPAPropagationTask();\n+        task.setResource(resource);\n+        task.setSubjectType(AttributableType.USER);\n+        task.setPropagationMode(PropagationMode.TWO_PHASES);\n+        task.setPropagationOperation(ResourceOperation.CREATE);\n+        task.setAccountId(\"one@two.com\");\n+\n+        Set<Attribute> attributes = new HashSet<>();\n+        attributes.add(AttributeBuilder.build(\"testAttribute\", \"testValue1\", \"testValue2\"));\n+        attributes.add(AttributeBuilder.buildPassword(\"password\".toCharArray()));\n+        task.setAttributes(attributes);\n+\n+        task = taskDAO.save(task);\n+        assertNotNull(task);\n+\n+        PropagationTask actual = taskDAO.find(task.getKey());\n+        assertEquals(task, actual);\n+\n+        taskDAO.flush();\n+\n+        resource = resourceDAO.find(\"ws-target-resource-1\");\n+        assertTrue(taskDAO.findAll(resource, TaskType.PROPAGATION).contains(task));\n+    }\n+\n+    @Test\n+    public void addPropagationTaskExecution() {\n+        PropagationTask task = taskDAO.find(1L);\n+        assertNotNull(task);\n+\n+        int executionNumber = task.getExecs().size();\n+\n+        TaskExec execution = new JPATaskExec();\n+        execution.setTask(task);\n+        execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n+        task.addExec(execution);\n+        execution.setStartDate(new Date());\n+\n+        taskDAO.save(task);\n+        taskDAO.flush();\n+\n+        task = taskDAO.find(1L);\n+        assertNotNull(task);\n+\n+        assertEquals(executionNumber + 1, task.getExecs().size());\n+    }\n+\n+    @Test\n+    public void addSyncTaskExecution() {\n+        SyncTask task = taskDAO.find(4L);\n+        assertNotNull(task);\n+\n+        int executionNumber = task.getExecs().size();\n+\n+        TaskExec execution = new JPATaskExec();\n+        execution.setStatus(\"Text-free status\");\n+        execution.setTask(task);\n+        task.addExec(execution);\n+        execution.setMessage(\"A message\");\n+\n+        taskDAO.save(task);\n+        taskDAO.flush();\n+\n+        task = taskDAO.find(4L);\n+        assertNotNull(task);\n+\n+        assertEquals(executionNumber + 1, task.getExecs().size());\n+    }\n+\n+    @Test\n+    public void addPushTaskExecution() {\n+        PushTask task = taskDAO.find(13L);\n+        assertNotNull(task);\n+\n+        int executionNumber = task.getExecs().size();\n+\n+        TaskExec execution = new JPATaskExec();\n+        execution.setStatus(\"Text-free status\");\n+        execution.setTask(task);\n+        task.addExec(execution);\n+        execution.setMessage(\"A message\");\n+\n+        taskDAO.save(task);\n+        taskDAO.flush();\n+\n+        task = taskDAO.find(13L);\n+        assertNotNull(task);\n+\n+        assertEquals(executionNumber + 1, task.getExecs().size());\n+    }\n+\n+    @Test\n+    public void deleteTask() {\n+        taskDAO.delete(1L);\n+\n+        taskDAO.flush();\n+\n+        assertNull(taskDAO.find(1L));\n+        assertNull(taskExecDAO.find(1L));\n+    }\n+\n+    @Test\n+    public void deleteTaskExecution() {\n+        TaskExec execution = taskExecDAO.find(1L);\n+        int executionNumber = execution.getTask().getExecs().size();\n+\n+        taskExecDAO.delete(1L);\n+\n+        taskExecDAO.flush();\n+\n+        assertNull(taskExecDAO.find(1L));\n+\n+        PropagationTask task = taskDAO.find(1L);\n+        assertEquals(task.getExecs().size(), executionNumber - 1);\n+    }\n+}"},{"sha":"bc1dad4f6fd23b96093273d8b2d59b1cc4a5a133","filename":"syncope620/server/persistence-jpa/src/test/java/org/apache/syncope/persistence/jpa/relationship/UserTest.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fpersistence%2Fjpa%2Frelationship%2FUserTest.java?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.List;\n+import org.apache.syncope.persistence.api.dao.PlainAttrDAO;\n+import org.apache.syncope.persistence.api.dao.PlainAttrValueDAO;\n+import org.apache.syncope.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.persistence.api.dao.UserDAO;\n+import org.apache.syncope.persistence.api.entity.membership.Membership;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class UserTest extends AbstractTest {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private PlainAttrDAO plainAttrDAO;\n+\n+    @Autowired\n+    private PlainAttrValueDAO plainAttrValueDAO;\n+\n+    @Test\n+    public void test() {\n+        userDAO.delete(4L);\n+\n+        userDAO.flush();\n+\n+        assertNull(userDAO.find(4L));\n+        assertNull(plainAttrDAO.find(550L, UPlainAttr.class));\n+        assertNull(plainAttrValueDAO.find(22L, UPlainAttrValue.class));\n+        assertNotNull(plainSchemaDAO.find(\"loginDate\", UPlainSchema.class));\n+\n+        List<Membership> memberships = roleDAO.findMemberships(roleDAO.find(7L));\n+        assertTrue(memberships.isEmpty());\n+    }\n+}"},{"sha":"4f024e09b5169f1c49bd235dfd9ff6c76fae9931","filename":"syncope620/server/persistence-jpa/src/test/resources/content.xml","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ab462f08bebe9675f1c19aa4ba3b9565d8af2a71/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fserver%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=ab462f08bebe9675f1c19aa4ba3b9565d8af2a71","patch":"@@ -605,7 +605,7 @@ under the License.\n                     creator=\"admin\" lastModifier=\"admin\" \n                     creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <ExternalResource_PropActions externalResource_name=\"resource-ldap\"\n-                                action=\"org.apache.syncope.core.propagation.impl.LDAPMembershipPropagationActions\"/>\n+                                action=\"org.apache.syncope.provisioning.api.propagation.PropagationActions\"/>\n   <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\"\n                     randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" \n@@ -903,7 +903,7 @@ under the License.\n         xmlAttributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"4\" name=\"CSV (update matching; assign unmatching)\" resource_name=\"resource-csv\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"\n         userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}],\"derivedAttributes\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[null]}],\"virtualAttributes\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"roleId\":8,\"roleName\":null,\"attributes\":[{\"schema\":\"subscriptionDate\",\"readonly\":false,\"values\":[\"&apos;2009-08-18T16:33:12.203+0200&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[]}]}'\n         roleTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"name\":null,\"parent\":0,\"userOwner\":null,\"roleOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"rAttrTemplates\":[],\"rDerAttrTemplates\":[],\"rVirAttrTemplates\":[],\"mAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n   <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" jobClassName=\"org.apache.syncope.core.quartz.SampleJob\" cronExpression=\"0 0 0 1 * ?\"/>\n@@ -913,81 +913,81 @@ under the License.\n   <TaskExec id=\"6\" task_id=\"6\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n         userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"memberships\":[]}'\n         roleTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"name\":null,\"parent\":0,\"userOwner\":null,\"roleOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"rAttrTemplates\":[],\"rDerAttrTemplates\":[],\"rVirAttrTemplates\":[],\"mAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n   <Task DTYPE=\"NotificationTask\" type=\"NOTIFICATION\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for SYNCOPE-81\" \n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"10\" name=\"TestDB Sync Task\" resource_name=\"resource-db-sync\"\n         fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"11\" name=\"LDAP Sync Task\" resource_name=\"resource-ldap\"\n         fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n         userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[{\"schema\":\"virtualReadOnly\",\"readonly\":false,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"memberships\":[]}'\n         roleTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"name\":null,\"parent\":8,\"userOwner\":null,\"roleOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"&apos;true&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"rAttrTemplates\":[\"show\"],\"rDerAttrTemplates\":[],\"rVirAttrTemplates\":[],\"mAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n   <SyncTask_actionsClassNames SyncTask_id=\"11\" actionClassName=\"org.apache.syncope.core.sync.impl.LDAPMembershipSyncActions\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n         performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"13\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\" \n         userFilter=\"surname==Vivaldi\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"14\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"PROVISION\" matchingRule=\"IGNORE\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"PROVISION\" matchingRule=\"IGNORE\" \n         userFilter=\"surname==Bellini\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"15\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"UNLINK\" matchingRule=\"IGNORE\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"UNLINK\" matchingRule=\"IGNORE\" \n         userFilter=\"surname==Puccini\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"16\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"IGNORE\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"IGNORE\" \n         userFilter=\"surname==Verdi\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"17\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\" \n         userFilter=\"username==_NO_ONE_\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"18\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"DEPROVISION\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"DEPROVISION\" \n         userFilter=\"surname==Verdi\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"19\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNASSIGN\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNASSIGN\" \n         userFilter=\"surname==Rossini\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"20\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"LINK\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"LINK\" \n         userFilter=\"surname==Verdi\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"21\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\" \n         userFilter=\"surname==Verdi\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"22\" name=\"Export on resource-testdb2\" resource_name=\"resource-testdb2\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UPDATE\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UPDATE\" \n         userFilter=\"surname==Verdi\" roleFilter=\"name==_NO_ONE_\"/>\n   <Task DTYPE=\"PushTask\" type=\"PUSH\" id=\"23\" name=\"Export on resource-ldap\" resource_name=\"resource-ldap\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.PushJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UNLINK\" \n+        jobClassName=\"org.apache.syncope.provisioning.api.job.PushJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"UNLINK\" \n         userFilter=\"username==_NO_ONE_\" roleFilter=\"name==citizen\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"24\" name=\"CSV Task (update matching; provision unmatching)\" resource_name=\"resource-csv\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"\n         userTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"password\":null,\"status\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"attributes\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"memberships\":[]}'\n         roleTemplate='{\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"id\":0,\"name\":null,\"parent\":0,\"userOwner\":null,\"roleOwner\":null,\"inheritOwner\":false,\"inheritTemplates\":false,\"inheritAttrs\":false,\"inheritDerAttrs\":false,\"inheritVirAttrs\":false,\"inheritPasswordPolicy\":false,\"inheritAccountPolicy\":false,\"passwordPolicy\":null,\"accountPolicy\":null,\"attributes\":[],\"derivedAttributes\":[],\"virtualAttributes\":[],\"resources\":[],\"propagationStatuses\":[],\"entitlements\":[],\"rAttrTemplates\":[],\"rDerAttrTemplates\":[],\"rVirAttrTemplates\":[],\"mAttrTemplates\":[],\"mDerAttrTemplates\":[],\"mVirAttrTemplates\":[]}'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"25\" name=\"CSV (unlink matching; ignore unmatching)\" resource_name=\"resource-csv\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"26\" name=\"CSV (ignore matching; assign unmatching)\" resource_name=\"resource-csv\"\n         performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n-        jobClassName=\"org.apache.syncope.core.sync.impl.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n+        jobClassName=\"org.apache.syncope.provisioning.api.job.SyncJob\" unmatchingRule=\"ASSIGN\" matchingRule=\"IGNORE\"/>\n \n   <Notification id=\"1\" active=\"1\" recipientAttrName=\"email\" recipientAttrType=\"UserSchema\" selfAsRecipient=\"1\" \n                 sender=\"admin@syncope.apache.org\" subject=\"Password Reset request\" template=\"requestPasswordReset\" \n@@ -1011,7 +1011,7 @@ under the License.\n   \n   <Report id=\"1\" name=\"test\"/>\n   <ReportletConfInstance id=\"1\" Report_id=\"1\" \n-                         serializedInstance='{\"@class\":\"org.apache.syncope.common.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"attributes\":[\"fullname\",\"gender\"],\"derivedAttributes\":[\"cn\"],\"virtualAttributes\":[\"virtualdata\"],\"features\":[\"id\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n+                         serializedInstance='{\"@class\":\"org.apache.syncope.common.lib.report.UserReportletConf\",\"name\":\"testUserReportlet\",\"matchingCond\":null,\"attributes\":[\"fullname\",\"gender\"],\"derivedAttributes\":[\"cn\"],\"virtualAttributes\":[\"virtualdata\"],\"features\":[\"id\",\"username\",\"workflowId\",\"status\",\"creationDate\",\"lastLoginDate\",\"changePwdDate\",\"passwordHistorySize\",\"failedLoginCount\",\"memberships\",\"resources\"]}'/>\n   <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n   \n   <SyncopeLogger logName=\"syncope.audit.[REST]:[EntitlementController]:[]:[getOwn]:[SUCCESS]\" logLevel=\"DEBUG\" logType=\"AUDIT\"/>"}]}