{"sha":"453ff25efdd23ec8335c60f4d8d39ea16587f7aa","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ1M2ZmMjVlZmRkMjNlYzgzMzVjNjBmNGQ4ZDM5ZWExNjU4N2Y3YWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-03-27T07:19:19Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-03-27T07:19:19Z"},"message":"[SYNCOPE-1545]  Adding WA > Client Applications (#252)","tree":{"sha":"491b0042aae14e3d2fdb57838af838e04516a84a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/491b0042aae14e3d2fdb57838af838e04516a84a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/453ff25efdd23ec8335c60f4d8d39ea16587f7aa","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgXtx3CRBK7hj4Ov3rIwAAdHIIAIli1PAwn0pqX2RpRwIE4bl3\nU0zQY/K09Hjf3qA9r79cezCNPo8/jDIoWRzA4HK9m7EaGf1UtXbSe1VTGiKRkNdx\noKUyK4BGfnJA7DriBRYeBpxbfpEAJnkv4i7NDYsBqmQXpUPc8vhoHTaRL6gQkvk0\n/1xTF7NPqBo++n0yU/LqSVIKSpNSGQfv1vr/BZa3LokQ+J/iDpQ+lneCGH3Pe3hL\nYZibhwRd/recMGZyEZSx2M4aUMt/BqSbA2E1rYxV23/1dLku/Oy5gMJyxW2pX0qy\nDYcnkdNEvIpvXpCUKVotnGwG3zxFKPCUP9fm/HoYlajgPFhvOZUtZXYTN1ZSezY=\n=AEi2\n-----END PGP SIGNATURE-----\n","payload":"tree 491b0042aae14e3d2fdb57838af838e04516a84a\nparent cb62fbcc1f1d93d2fa089e9b5dca1619a5884623\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1616829559 +0100\ncommitter GitHub <noreply@github.com> 1616829559 +0100\n\n[SYNCOPE-1545]  Adding WA > Client Applications (#252)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/453ff25efdd23ec8335c60f4d8d39ea16587f7aa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/453ff25efdd23ec8335c60f4d8d39ea16587f7aa","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"cb62fbcc1f1d93d2fa089e9b5dca1619a5884623","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb62fbcc1f1d93d2fa089e9b5dca1619a5884623","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cb62fbcc1f1d93d2fa089e9b5dca1619a5884623"}],"stats":{"total":2221,"additions":1776,"deletions":445},"files":[{"sha":"bae83536061416631711d1f2829152b322f3a6f6","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/CASSPDirectoryPanel.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FCASSPDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.clientapps;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.CASSPTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class CASSPDirectoryPanel extends ClientAppDirectoryPanel<CASSPTO> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public CASSPDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, ClientAppType.CASSP, pageRef);\n+\n+        CASSPTO defaultItem = new CASSPTO();\n+\n+        this.addNewItemPanelBuilder(\n+                new ClientAppModalPanelBuilder<>(ClientAppType.CASSP, defaultItem, modal, pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, AMEntitlement.CLIENTAPP_CREATE);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected void addCustomColumnFields(final List<IColumn<CASSPTO, String>> columns) {\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"serviceId\", this), \"serviceId\", \"serviceId\"));\n+    }\n+}"},{"sha":"84d37e7518d3c5d248239dc349344fd436cde01c","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel.java","status":"added","additions":192,"deletions":0,"changes":192,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,192 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.clientapps;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.dialog.Modal;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.AMConstants;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.DirectoryPanel;\n+import org.apache.syncope.client.console.rest.ClientAppRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public abstract class ClientAppDirectoryPanel<T extends ClientAppTO>\n+        extends DirectoryPanel<T, T, DirectoryDataProvider<T>, ClientAppRestClient> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    private final ClientAppType type;\n+\n+    public ClientAppDirectoryPanel(final String id, final ClientAppType type, final PageReference pageRef) {\n+        super(id, pageRef, true);\n+        this.type = type;\n+\n+        modal.addSubmitButton();\n+        modal.size(Modal.Size.Large);\n+        modal.setWindowClosedCallback(target -> {\n+            updateResultTable(target);\n+            modal.show(false);\n+        });\n+        setFooterVisibility(true);\n+\n+        disableCheckBoxes();\n+    }\n+\n+    @Override\n+    protected List<IColumn<T, String>> getColumns() {\n+        List<IColumn<T, String>> columns = new ArrayList<>();\n+\n+        columns.add(new KeyPropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(\"name\", this), \"name\", \"name\"));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(\"clientAppId\", this), \"clientAppId\", \"clientAppId\"));\n+\n+        addCustomColumnFields(columns);\n+\n+        return columns;\n+    }\n+\n+    protected void addCustomColumnFields(final List<IColumn<T, String>> columns) {\n+    }\n+\n+    @Override\n+    public ActionsPanel<T> getActions(final IModel<T> model) {\n+        final ActionsPanel<T> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<T>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n+                send(ClientAppDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(\n+                                ClientAppRestClient.read(type, model.getObject().getKey()), target));\n+            }\n+        }, ActionLink.ActionType.EDIT, AMEntitlement.CLIENTAPP_UPDATE);\n+\n+        panel.add(new ActionLink<T>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n+                ClientAppTO clone = SerializationUtils.clone(model.getObject());\n+                clone.setKey(null);\n+                clone.setClientAppId(null);\n+                send(ClientAppDirectoryPanel.this, Broadcast.EXACT,\n+                        new AjaxWizard.EditItemActionEvent<>(clone, target));\n+            }\n+        }, ActionLink.ActionType.CLONE, AMEntitlement.CLIENTAPP_CREATE);\n+\n+        panel.add(new ActionLink<T>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final ClientAppTO ignore) {\n+                T clientAppTO = model.getObject();\n+                try {\n+                    ClientAppRestClient.delete(type, clientAppTO.getKey());\n+                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                    target.add(container);\n+                } catch (SyncopeClientException e) {\n+                    LOG.error(\"While deleting {}\", clientAppTO.getKey(), e);\n+                    SyncopeConsoleSession.get().onException(e);\n+                }\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        }, ActionLink.ActionType.DELETE, AMEntitlement.CLIENTAPP_DELETE, true);\n+\n+        return panel;\n+    }\n+\n+    @Override\n+    protected Collection<ActionType> getBatches() {\n+        return List.of();\n+    }\n+\n+    @Override\n+    protected ClientAppDataProvider dataProvider() {\n+        return new ClientAppDataProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return AMConstants.PREF_CLIENTAPP_PAGINATOR_ROWS;\n+    }\n+\n+    private class ClientAppDataProvider extends DirectoryDataProvider<T> {\n+\n+        private static final long serialVersionUID = 4725679400450513556L;\n+\n+        private final SortableDataProviderComparator<T> comparator;\n+\n+        ClientAppDataProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+\n+            setSort(\"name\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<T> iterator(final long first, final long count) {\n+            List<T> list = ClientAppRestClient.list(type);\n+            list.sort(comparator);\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return ClientAppRestClient.list(type).size();\n+        }\n+\n+        @Override\n+        public IModel<T> model(final T object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+}"},{"sha":"2b16c3b257f675b3596d4262544d8e805cadb072","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientAppModalPanelBuilder.java","status":"added","additions":366,"deletions":0,"changes":366,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,366 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.clientapps;\n+\n+import java.util.ArrayList;\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.RandomStringUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.panels.AbstractModalPanel;\n+import org.apache.syncope.client.console.rest.ClientAppRestClient;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.PolicyRenderer;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n+import org.apache.syncope.client.ui.commons.wizards.AbstractModalPanelBuilder;\n+import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.OIDCGrantType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.markup.html.form.AbstractSingleSelectChoice;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.validation.validator.UrlValidator;\n+\n+public class ClientAppModalPanelBuilder<T extends ClientAppTO> extends AbstractModalPanelBuilder<T> {\n+\n+    private static final long serialVersionUID = 5945391813567245081L;\n+\n+    private final IModel<Map<String, String>> accessPolicies = new LoadableDetachableModel<Map<String, String>>() {\n+\n+        private static final long serialVersionUID = -2012833443695917883L;\n+\n+        @Override\n+        protected Map<String, String> load() {\n+            return PolicyRestClient.list(PolicyType.ACCESS).stream().\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+        }\n+    };\n+\n+    private final IModel<Map<String, String>> attrReleasePolicies = new LoadableDetachableModel<Map<String, String>>() {\n+\n+        private static final long serialVersionUID = -2012833443695917883L;\n+\n+        @Override\n+        protected Map<String, String> load() {\n+            return PolicyRestClient.list(PolicyType.ATTR_RELEASE).stream().\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+        }\n+    };\n+\n+    private final IModel<Map<String, String>> authPolicies = new LoadableDetachableModel<Map<String, String>>() {\n+\n+        private static final long serialVersionUID = -2012833443695917883L;\n+\n+        @Override\n+        protected Map<String, String> load() {\n+            return PolicyRestClient.list(PolicyType.AUTH).stream().\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n+        }\n+    };\n+\n+    private final BaseModal<T> modal;\n+\n+    private final ClientAppType type;\n+\n+    public ClientAppModalPanelBuilder(\n+            final ClientAppType type, final T defaultItem, final BaseModal<T> modal, final PageReference pageRef) {\n+\n+        super(defaultItem, pageRef);\n+        this.type = type;\n+        this.modal = modal;\n+    }\n+\n+    @Override\n+    public WizardModalPanel<T> build(final String id, final int index, final AjaxWizard.Mode mode) {\n+        return new Profile(newModelObject(), modal, pageRef);\n+    }\n+\n+    private class Profile extends AbstractModalPanel<T> {\n+\n+        private static final long serialVersionUID = 1L;\n+\n+        private final T clientAppTO;\n+\n+        Profile(final T clientAppTO, final BaseModal<T> modal, final PageReference pageRef) {\n+            super(modal, pageRef);\n+            modal.setFormModel(clientAppTO);\n+\n+            this.clientAppTO = clientAppTO;\n+\n+            List<Component> fields = new ArrayList<>();\n+\n+            AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n+                    \"field\", \"name\", new PropertyModel<>(clientAppTO, \"name\"), false);\n+            fields.add(name.setRequired(true));\n+\n+            if (clientAppTO.getClientAppId() == null) {\n+                Stream.of(ClientAppType.values()).map(ClientAppRestClient::list).flatMap(List::stream).\n+                        max(Comparator.comparing(ClientAppTO::getClientAppId)).\n+                        ifPresent(app -> clientAppTO.setClientAppId(app.getClientAppId() + 1));\n+            }\n+            fields.add(new AjaxSpinnerFieldPanel.Builder<Long>().build(\n+                    \"field\", \"clientAppId\", Long.class,\n+                    new PropertyModel<>(clientAppTO, \"clientAppId\")).setRequired(true));\n+\n+            fields.add(new AjaxTextFieldPanel(\n+                    \"field\", \"description\", new PropertyModel<>(clientAppTO, \"description\"), false).setRequired(true));\n+\n+            AjaxDropDownChoicePanel<String> accessPolicy = new AjaxDropDownChoicePanel<>(\n+                    \"field\", \"accessPolicy\", new PropertyModel<>(clientAppTO, \"accessPolicy\"), false);\n+            accessPolicy.setChoiceRenderer(new PolicyRenderer(accessPolicies));\n+            accessPolicy.setChoices(new ArrayList<>(accessPolicies.getObject().keySet()));\n+            ((AbstractSingleSelectChoice<?>) accessPolicy.getField()).setNullValid(true);\n+            fields.add(accessPolicy);\n+\n+            AjaxDropDownChoicePanel<String> attrReleasePolicy = new AjaxDropDownChoicePanel<>(\n+                    \"field\", \"attrReleasePolicy\", new PropertyModel<>(clientAppTO, \"attrReleasePolicy\"), false);\n+            attrReleasePolicy.setChoiceRenderer(new PolicyRenderer(attrReleasePolicies));\n+            attrReleasePolicy.setChoices(new ArrayList<>(attrReleasePolicies.getObject().keySet()));\n+            ((AbstractSingleSelectChoice<?>) attrReleasePolicy.getField()).setNullValid(true);\n+            fields.add(attrReleasePolicy);\n+\n+            AjaxDropDownChoicePanel<String> authPolicy = new AjaxDropDownChoicePanel<>(\n+                    \"field\", \"authPolicy\", new PropertyModel<>(clientAppTO, \"authPolicy\"), false);\n+            authPolicy.setChoiceRenderer(new PolicyRenderer(authPolicies));\n+            authPolicy.setChoices(new ArrayList<>(authPolicies.getObject().keySet()));\n+            ((AbstractSingleSelectChoice<?>) authPolicy.getField()).setNullValid(true);\n+            fields.add(authPolicy);\n+\n+            fields.add(new AjaxTextFieldPanel(\n+                    \"field\", \"theme\", new PropertyModel<>(clientAppTO, \"theme\"), false).setRequired(true));\n+\n+            switch (type) {\n+                case CASSP:\n+                    fields.add(new AjaxTextFieldPanel(\n+                            \"field\", \"serviceId\", new PropertyModel<>(clientAppTO, \"serviceId\"), false).\n+                            setRequired(true));\n+                    break;\n+\n+                case OIDCRP:\n+                    AjaxTextFieldPanel clientId = new AjaxTextFieldPanel(\n+                            \"field\", \"clientId\", new PropertyModel<>(clientAppTO, \"clientId\"), false);\n+                    fields.add(clientId.setRequired(true));\n+                    name.getField().add(new IndicatorAjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                        @Override\n+                        protected void onUpdate(final AjaxRequestTarget target) {\n+                            if (StringUtils.isBlank(clientId.getModelObject())) {\n+                                clientId.setModelObject(name.getModelObject());\n+                                target.add(clientId);\n+                            }\n+                        }\n+                    });\n+\n+                    AjaxTextFieldPanel clientSecret = new AjaxTextFieldPanel(\n+                            \"field\", \"clientSecret\", new PropertyModel<>(clientAppTO, \"clientSecret\"), false);\n+                    clientSecret.setChoices(List.of(RandomStringUtils.randomAlphanumeric(15)));\n+                    fields.add(clientSecret.setRequired(true));\n+\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\", \"signIdToken\", new PropertyModel<>(clientAppTO, \"signIdToken\")));\n+\n+                    AjaxDropDownChoicePanel<OIDCSubjectType> subjectType = new AjaxDropDownChoicePanel<>(\n+                            \"field\", \"subjectType\", new PropertyModel<>(clientAppTO, \"subjectType\"), false);\n+                    subjectType.setChoices(List.of(OIDCSubjectType.values()));\n+                    subjectType.addRequiredLabel().setEnabled(true);\n+                    fields.add(subjectType);\n+\n+                    AjaxTextFieldPanel redirectUri = new AjaxTextFieldPanel(\"panel\", \"redirectUris\", new Model<>());\n+                    redirectUri.addValidator(new UrlValidator());\n+                    fields.add(new MultiFieldPanel.Builder<String>(\n+                            new PropertyModel<>(clientAppTO, \"redirectUris\")).build(\n+                            \"field\",\n+                            \"redirectUris\",\n+                            redirectUri));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<OIDCGrantType>().setName(\"supportedGrantTypes\").build(\n+                            \"field\",\n+                            new PropertyModel<>(clientAppTO, \"supportedGrantTypes\"),\n+                            new ListModel<>(List.of(OIDCGrantType.values()))));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<OIDCResponseType>().setName(\"supportedResponseTypes\").build(\n+                            \"field\",\n+                            new PropertyModel<>(clientAppTO, \"supportedResponseTypes\"),\n+                            new ListModel<>(List.of(OIDCResponseType.values()))));\n+\n+                    AjaxTextFieldPanel logoutUri = new AjaxTextFieldPanel(\n+                            \"field\", \"logoutUri\", new PropertyModel<>(clientAppTO, \"logoutUri\"), false);\n+                    logoutUri.addValidator(new UrlValidator());\n+                    fields.add(logoutUri);\n+                    break;\n+\n+                case SAML2SP:\n+                    AjaxTextFieldPanel entityId = new AjaxTextFieldPanel(\n+                            \"field\", \"entityId\", new PropertyModel<>(clientAppTO, \"entityId\"), false);\n+                    entityId.addValidator(new UrlValidator());\n+                    fields.add(entityId.setRequired(true));\n+\n+                    AjaxTextFieldPanel metadataLocation = new AjaxTextFieldPanel(\n+                            \"field\", \"metadataLocation\",\n+                            new PropertyModel<>(clientAppTO, \"metadataLocation\"), false);\n+                    metadataLocation.addValidator(new UrlValidator());\n+                    fields.add(metadataLocation.setRequired(true));\n+\n+                    AjaxTextFieldPanel metadataSignatureLocation = new AjaxTextFieldPanel(\n+                            \"field\", \"metadataSignatureLocation\",\n+                            new PropertyModel<>(clientAppTO, \"metadataSignatureLocation\"), false);\n+                    metadataSignatureLocation.addValidator(new UrlValidator());\n+                    fields.add(metadataSignatureLocation);\n+\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\", \"signAssertions\", new PropertyModel<>(clientAppTO, \"signAssertions\")));\n+\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\", \"signResponses\", new PropertyModel<>(clientAppTO, \"signResponses\")));\n+\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\", \"encryptionOptional\", new PropertyModel<>(clientAppTO, \"encryptionOptional\")));\n+\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\", \"encryptAssertions\", new PropertyModel<>(clientAppTO, \"encryptAssertions\")));\n+\n+                    fields.add(new AjaxTextFieldPanel(\n+                            \"field\", \"requiredAuthenticationContextClass\",\n+                            new PropertyModel<>(clientAppTO, \"requiredAuthenticationContextClass\"), false));\n+\n+                    AjaxDropDownChoicePanel<SAML2SPNameId> requiredNameIdFormat = new AjaxDropDownChoicePanel<>(\n+                            \"field\", \"requiredNameIdFormat\", new PropertyModel<>(clientAppTO, \"requiredNameIdFormat\"),\n+                            false);\n+                    requiredNameIdFormat.setChoices(List.of(SAML2SPNameId.values()));\n+                    requiredNameIdFormat.addRequiredLabel().setEnabled(true);\n+                    fields.add(requiredNameIdFormat);\n+\n+                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(0).build(\n+                            \"field\", \"skewAllowance\", Integer.class,\n+                            new PropertyModel<>(clientAppTO, \"skewAllowance\")));\n+\n+                    fields.add(new AjaxTextFieldPanel(\n+                            \"field\", \"nameIdQualifier\", new PropertyModel<>(clientAppTO, \"nameIdQualifier\"), false));\n+\n+                    AjaxTextFieldPanel assertionAudience = new AjaxTextFieldPanel(\n+                            \"panel\", \"assertionAudience\", new Model<>());\n+                    assertionAudience.addValidator(new UrlValidator());\n+                    fields.add(new MultiFieldPanel.Builder<String>(\n+                            new PropertyModel<>(clientAppTO, \"assertionAudiences\")).build(\n+                            \"field\",\n+                            \"assertionAudiences\",\n+                            assertionAudience));\n+\n+                    fields.add(new AjaxTextFieldPanel(\n+                            \"field\", \"serviceProviderNameIdQualifier\",\n+                            new PropertyModel<>(clientAppTO, \"serviceProviderNameIdQualifier\"), false));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<XmlSecAlgorithm>().\n+                            setName(\"signingSignatureAlgorithms\").build(\n+                            \"field\",\n+                            new PropertyModel<>(clientAppTO, \"signingSignatureAlgorithms\"),\n+                            new ListModel<>(List.of(XmlSecAlgorithm.values()))));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<XmlSecAlgorithm>().\n+                            setName(\"signingSignatureReferenceDigestMethods\").build(\n+                            \"field\",\n+                            new PropertyModel<>(clientAppTO, \"signingSignatureReferenceDigestMethods\"),\n+                            new ListModel<>(List.of(XmlSecAlgorithm.values()))));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<XmlSecAlgorithm>().\n+                            setName(\"encryptionDataAlgorithms\").build(\n+                            \"field\",\n+                            new PropertyModel<>(clientAppTO, \"encryptionDataAlgorithms\"),\n+                            new ListModel<>(List.of(XmlSecAlgorithm.values()))));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<XmlSecAlgorithm>().\n+                            setName(\"encryptionKeyAlgorithms\").build(\n+                            \"field\",\n+                            new PropertyModel<>(clientAppTO, \"encryptionKeyAlgorithms\"),\n+                            new ListModel<>(List.of(XmlSecAlgorithm.values()))));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<XmlSecAlgorithm>().\n+                            setName(\"signingSignatureBlackListedAlgorithms\").build(\n+                            \"field\",\n+                            new PropertyModel<>(clientAppTO, \"signingSignatureBlackListedAlgorithms\"),\n+                            new ListModel<>(List.of(XmlSecAlgorithm.values()))));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<XmlSecAlgorithm>().\n+                            setName(\"encryptionBlackListedAlgorithms\").build(\n+                            \"field\",\n+                            new PropertyModel<>(clientAppTO, \"encryptionBlackListedAlgorithms\"),\n+                            new ListModel<>(List.of(XmlSecAlgorithm.values()))));\n+                    break;\n+\n+                default:\n+            }\n+\n+            add(new ListView<Component>(\"fields\", fields) {\n+\n+                private static final long serialVersionUID = -9180479401817023838L;\n+\n+                @Override\n+                protected void populateItem(final ListItem<Component> item) {\n+                    item.add(item.getModelObject());\n+                }\n+            });\n+        }\n+\n+        @Override\n+        public void onSubmit(final AjaxRequestTarget target) {\n+            try {\n+                if (clientAppTO.getKey() == null) {\n+                    ClientAppRestClient.create(type, clientAppTO);\n+                } else {\n+                    ClientAppRestClient.update(type, clientAppTO);\n+                }\n+                SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                Profile.this.modal.close(target);\n+            } catch (Exception e) {\n+                LOG.error(\"While creating/updating clientApp\", e);\n+                SyncopeConsoleSession.get().onException(e);\n+            }\n+            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+        }\n+    }\n+}"},{"sha":"8a694736036b2ab31a9c8b82ee7985cf42e70db6","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/ClientApps.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientApps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientApps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientApps.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.clientapps;\n+\n+import de.agilecoders.wicket.core.markup.html.bootstrap.tabs.AjaxBootstrapTabbedPanel;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+\n+public class ClientApps extends Panel {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public ClientApps(final String id, final PageReference pageRef) {\n+        super(id);\n+\n+        add(new AjaxBootstrapTabbedPanel<>(\"clientApps\", buildTabList(pageRef)));\n+    }\n+\n+    private List<ITab> buildTabList(final PageReference pageRef) {\n+        List<ITab> tabs = new ArrayList<>(3);\n+\n+        tabs.add(new AbstractTab(Model.of(ClientAppType.CASSP.name())) {\n+\n+            private static final long serialVersionUID = 5211692813425391144L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new CASSPDirectoryPanel(panelId, pageRef);\n+            }\n+        });\n+\n+        tabs.add(new AbstractTab(Model.of(ClientAppType.SAML2SP.name())) {\n+\n+            private static final long serialVersionUID = 5211692813425391144L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new SAML2SPDirectoryPanel(panelId, pageRef);\n+            }\n+        });\n+\n+        tabs.add(new AbstractTab(Model.of(ClientAppType.OIDCRP.name())) {\n+\n+            private static final long serialVersionUID = 5211692813425391144L;\n+\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new OIDCRPDirectoryPanel(panelId, pageRef);\n+            }\n+        });\n+\n+        return tabs;\n+    }\n+}"},{"sha":"708e3aad381afa041ee6510faf195b1e91799f73","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/OIDCRPDirectoryPanel.java","status":"added","additions":75,"deletions":0,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FOIDCRPDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FOIDCRPDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FOIDCRPDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,75 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.clientapps;\n+\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class OIDCRPDirectoryPanel extends ClientAppDirectoryPanel<OIDCRPTO> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public OIDCRPDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, ClientAppType.OIDCRP, pageRef);\n+\n+        OIDCRPTO defaultItem = new OIDCRPTO();\n+\n+        this.addNewItemPanelBuilder(\n+                new ClientAppModalPanelBuilder<>(ClientAppType.OIDCRP, defaultItem, modal, pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, AMEntitlement.CLIENTAPP_CREATE);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected void addCustomColumnFields(final List<IColumn<OIDCRPTO, String>> columns) {\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"clientId\", this), \"clientId\", \"clientId\"));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(\"redirectUris\", this), \"redirectUris\", \"redirectUris\"));\n+        columns.add(new AbstractColumn<OIDCRPTO, String>(new StringResourceModel(\"logout\")) {\n+\n+            @Override\n+            public void populateItem(\n+                    final Item<ICellPopulator<OIDCRPTO>> item,\n+                    final String componentId,\n+                    final IModel<OIDCRPTO> rowModel) {\n+\n+                item.add(new Label(componentId, StringUtils.EMPTY));\n+                if (StringUtils.isNotBlank(rowModel.getObject().getLogoutUri())) {\n+                    item.add(new AttributeModifier(\"class\", \"fa fa-check\"));\n+                    item.add(new AttributeModifier(\"style\", \"display: table-cell; text-align: center;\"));\n+                }\n+            }\n+        });\n+    }\n+}"},{"sha":"19b8a90ba5dfe620974ffe9b8988b9d5e0e9e8d2","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/clientapps/SAML2SPDirectoryPanel.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FSAML2SPDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FSAML2SPDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FSAML2SPDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.clientapps;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.BooleanPropertyColumn;\n+import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class SAML2SPDirectoryPanel extends ClientAppDirectoryPanel<SAML2SPTO> {\n+\n+    private static final long serialVersionUID = 1L;\n+\n+    public SAML2SPDirectoryPanel(final String id, final PageReference pageRef) {\n+        super(id, ClientAppType.SAML2SP, pageRef);\n+\n+        SAML2SPTO defaultItem = new SAML2SPTO();\n+\n+        this.addNewItemPanelBuilder(\n+                new ClientAppModalPanelBuilder<>(ClientAppType.SAML2SP, defaultItem, modal, pageRef), true);\n+        MetaDataRoleAuthorizationStrategy.authorize(addAjaxLink, RENDER, AMEntitlement.CLIENTAPP_CREATE);\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected void addCustomColumnFields(final List<IColumn<SAML2SPTO, String>> columns) {\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\"entityId\", this), \"entityId\", \"entityId\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"signAssertions\", this), \"signAssertions\", \"signAssertions\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"signResponses\", this), \"signResponses\", \"signResponses\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"encryptionOptional\", this), \"encryptionOptional\", \"encryptionOptional\"));\n+        columns.add(new BooleanPropertyColumn<>(\n+                new StringResourceModel(\"encryptAssertions\", this), \"encryptAssertions\", \"encryptAssertions\"));\n+        columns.add(new PropertyColumn<>(\n+                new StringResourceModel(\"requiredNameIdFormat\", this), \"requiredNameIdFormat\", \"requiredNameIdFormat\"));\n+    }\n+}"},{"sha":"9bb8e4ecfa09876cf45c998d5efb16fa2bceafdf","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/commons/AMConstants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMConstants.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -26,6 +26,8 @@ public final class AMConstants {\n \n     public static final String PREF_AUTHMODULE_PAGINATOR_ROWS = \"authmodule.paginator.rows\";\n \n+    public static final String PREF_CLIENTAPP_PAGINATOR_ROWS = \"clientapp.paginator.rows\";\n+\n     private AMConstants() {\n         // private constructor for static utility class\n     }"},{"sha":"4dc3be51b530a5244de7793834cd6ae2eaad2875","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/commons/AMRealmPolicyProvider.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMRealmPolicyProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMRealmPolicyProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAMRealmPolicyProvider.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.AbstractSingleSelectChoice;\n import org.apache.wicket.markup.repeater.RepeatingView;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -44,7 +44,7 @@ public class AMRealmPolicyProvider extends IdRepoRealmPolicyProvider {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.ACCESS).stream().\n+            return PolicyRestClient.list(PolicyType.ACCESS).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -55,7 +55,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.ATTR_RELEASE).stream().\n+            return PolicyRestClient.list(PolicyType.ATTR_RELEASE).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -66,7 +66,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.AUTH).stream().\n+            return PolicyRestClient.list(PolicyType.AUTH).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -82,7 +82,7 @@ public void add(final RealmTO realmTO, final RepeatingView view) {\n                 false);\n         accessPolicy.setChoiceRenderer(new PolicyRenderer(accessPolicies));\n         accessPolicy.setChoices(new ArrayList<>(accessPolicies.getObject().keySet()));\n-        ((DropDownChoice<?>) accessPolicy.getField()).setNullValid(true);\n+        ((AbstractSingleSelectChoice<?>) accessPolicy.getField()).setNullValid(true);\n         view.add(accessPolicy);\n \n         AjaxDropDownChoicePanel<String> attrReleasePolicy = new AjaxDropDownChoicePanel<>(\n@@ -92,7 +92,7 @@ public void add(final RealmTO realmTO, final RepeatingView view) {\n                 false);\n         attrReleasePolicy.setChoiceRenderer(new PolicyRenderer(attrReleasePolicies));\n         attrReleasePolicy.setChoices(new ArrayList<>(attrReleasePolicies.getObject().keySet()));\n-        ((DropDownChoice<?>) attrReleasePolicy.getField()).setNullValid(true);\n+        ((AbstractSingleSelectChoice<?>) attrReleasePolicy.getField()).setNullValid(true);\n         view.add(attrReleasePolicy);\n \n         AjaxDropDownChoicePanel<String> authPolicy = new AjaxDropDownChoicePanel<>(\n@@ -102,7 +102,7 @@ public void add(final RealmTO realmTO, final RepeatingView view) {\n                 false);\n         authPolicy.setChoiceRenderer(new PolicyRenderer(authPolicies));\n         authPolicy.setChoices(new ArrayList<>(authPolicies.getObject().keySet()));\n-        ((DropDownChoice<?>) authPolicy.getField()).setNullValid(true);\n+        ((AbstractSingleSelectChoice<?>) authPolicy.getField()).setNullValid(true);\n         view.add(authPolicy);\n     }\n }"},{"sha":"a316b7e9d4737ecdf91958e835b7ad7d8d200ec1","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/pages/WA.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWA.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.annotations.AMPage;\n import org.apache.syncope.client.console.panels.AuthModuleDirectoryPanel;\n+import org.apache.syncope.client.console.clientapps.ClientApps;\n import org.apache.syncope.client.console.panels.WAConfigDirectoryPanel;\n import org.apache.syncope.client.console.rest.WAConfigRestClient;\n import org.apache.syncope.client.ui.commons.Constants;\n@@ -107,7 +108,7 @@ public Panel getPanel(final String panelId) {\n \n                 @Override\n                 public Panel getPanel(final String panelId) {\n-                    return new AjaxTextFieldPanel(panelId, panelId, Model.of(\"\"));\n+                    return new ClientApps(panelId, getPageReference());\n                 }\n             });\n         }"},{"sha":"6a0b6cdffb49056d86ad62371f755aa60b40428f","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/panels/SRARouteWizardBuilder.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSRARouteWizardBuilder.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -123,9 +123,7 @@ public void setObject(final String object) {\n             type.addRequiredLabel().setEnabled(true);\n             add(type);\n \n-            AjaxCheckBoxPanel logout =\n-                    new AjaxCheckBoxPanel(\"logout\", \"logout\", new PropertyModel<>(route, \"logout\"));\n-            add(logout);\n+            add(new AjaxCheckBoxPanel(\"logout\", \"logout\", new PropertyModel<>(route, \"logout\")));\n \n             AjaxTextFieldPanel postLogout = new AjaxTextFieldPanel(\"postLogout\", \"postLogout\", new IModel<String>() {\n \n@@ -148,31 +146,29 @@ public void setObject(final String object) {\n             postLogout.getField().add(new UrlValidator(new String[] { \"http\", \"https\" }));\n             add(postLogout);\n \n-            AjaxCheckBoxPanel csrf =\n-                    new AjaxCheckBoxPanel(\"csrf\", \"csrf\", new PropertyModel<>(route, \"csrf\"));\n-            add(csrf);\n+            add(new AjaxCheckBoxPanel(\"csrf\", \"csrf\", new PropertyModel<>(route, \"csrf\")));\n \n             add(new AjaxSpinnerFieldPanel.Builder<Integer>().min(0).build(\n                     \"order\", \"order\", Integer.class, new PropertyModel<>(route, \"order\")).\n                     setRequired(true));\n         }\n     }\n \n-    public static class Predicates extends WizardStep {\n+    private static class Predicates extends WizardStep {\n \n         private static final long serialVersionUID = 5934389493874714599L;\n \n-        public Predicates(final SRARouteTO route) {\n+        Predicates(final SRARouteTO route) {\n             super(new ResourceModel(\"predicates\"), Model.of());\n             add(new SRARoutePredicatePanel(\"predicates\", new ListModel<>(route.getPredicates())));\n         }\n     }\n \n-    public static class Filters extends WizardStep {\n+    private static class Filters extends WizardStep {\n \n         private static final long serialVersionUID = -6552124285142294023L;\n \n-        public Filters(final SRARouteTO route) {\n+        Filters(final SRARouteTO route) {\n             super(new ResourceModel(\"filters\"), Model.of());\n             add(new SRARouteFilterPanel(\"filters\", new ListModel<>(route.getFilters())));\n         }"},{"sha":"af861932360bf416ef540c8e0e0fe1f2cec5c7de","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/rest/ClientAppRestClient.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FClientAppRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FClientAppRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FClientAppRestClient.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import java.util.Comparator;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.to.ClientAppTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.rest.api.service.ClientAppService;\n+\n+public class ClientAppRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -1392090291817187902L;\n+\n+    private static final Comparator<ClientAppTO> COMPARATOR = Comparator.comparing(ClientAppTO::getName);\n+\n+    public static <T extends ClientAppTO> T read(final ClientAppType type, final String key) {\n+        T policy = null;\n+        try {\n+            policy = getService(ClientAppService.class).read(type, key);\n+        } catch (Exception e) {\n+            LOG.warn(\"No client app found for type {} and key {}\", type, key, e);\n+        }\n+        return policy;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends ClientAppTO> List<T> list(final ClientAppType type) {\n+        try {\n+            return getService(ClientAppService.class).<T>list(type).stream().\n+                    sorted(COMPARATOR).\n+                    collect(Collectors.toList());\n+        } catch (Exception ignore) {\n+            LOG.debug(\"No client app found\", ignore);\n+            return List.of();\n+        }\n+    }\n+\n+    public static <T extends ClientAppTO> void create(final ClientAppType type, final T policy) {\n+        getService(ClientAppService.class).create(type, policy);\n+    }\n+\n+    public static <T extends ClientAppTO> void update(final ClientAppType type, final T policy) {\n+        getService(ClientAppService.class).update(type, policy);\n+    }\n+\n+    public static void delete(final ClientAppType type, final String key) {\n+        getService(ClientAppService.class).delete(type, key);\n+    }\n+}"},{"sha":"d4fc071ddaa287eda0682dd473a5511e7988c849","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel.properties","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel.properties?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,56 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Name\n+any.edit=Edit ${name}\n+any.new=New Client App\n+any.finish=Submit ${name}\n+any.cancel=Cancel ${name}\n+clientId=Client Id\n+entityId=Entity Id\n+serviceId=Service Id\n+clientAppId=Id\n+redirectUris=Redirect URIs\n+logout=Logout\n+signAssertions=Sign Assertions\n+signResponses=Sign Responses\n+encryptionOptional=Encryption Optional\n+encryptAssertions=Encrypt Assertions\n+requiredNameIdFormat=NameId Format\n+clientSecret=Client Secret\n+signIdToken=Sign IdToken\n+subjectType=Subject Type\n+supportedGrantTypes=Supported Grant Types\n+supportedResponseTypes=Supported Reponse Types\n+logoutUri=Logout URI\n+metadataLocation=Metadata Location\n+metadataSignatureLocation=Metadata Signature Location\n+requiredAuthenticationContextClass=Authentication Context Class\n+skewAllowance=Skew Allowance\n+nameIdQualifier=NameId Qualifier\n+assertionAudiences=Assertion Audiences\n+serviceProviderNameIdQualifier=Service Provider NameId Qualifier\n+signingSignatureAlgorithms=Signing Signature Algorithms\n+signingSignatureReferenceDigestMethods=Signing Signature Reference Digest Methods\n+encryptionDataAlgorithms=Encryption Data Algorithms\n+encryptionKeyAlgorithms=Encryption Key Algorithms\n+signingSignatureBlackListedAlgorithms=Signing Signature BlackListed Algorithms\n+encryptionBlackListedAlgorithms=Encryption BlackListed Algorithms\n+description=Description\n+theme=Theme\n+authPolicy=Authentication Policy\n+accessPolicy=Access Policy\n+attrReleasePolicy=Attribute Release Policy"},{"sha":"a3440812312b2592d4096b72001fbec3f6e4af79","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_fr_CA.properties","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_fr_CA.properties?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,56 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Nom\n+any.edit=Modifier ${name}\n+any.new=New Client App\n+any.finish=Soumettre ${name}\n+any.cancel=Annuler ${name}\n+clientId=Client Id\n+entityId=Entity Id\n+serviceId=Service Id\n+clientAppId=Id\n+redirectUris=Redirect URIs\n+logout=Logout\n+signAssertions=Sign Assertions\n+signResponses=Sign Responses\n+encryptionOptional=Encryption Optional\n+encryptAssertions=Encrypt Assertions\n+requiredNameIdFormat=NameId Format\n+clientSecret=Client Secret\n+signIdToken=Sign IdToken\n+subjectType=Subject Type\n+supportedGrantTypes=Supported Grant Types\n+supportedResponseTypes=Supported Reponse Types\n+logoutUri=Logout URI\n+metadataLocation=Metadata Location\n+metadataSignatureLocation=Metadata Signature Location\n+requiredAuthenticationContextClass=Authentication Context Class\n+skewAllowance=Skew Allowance\n+nameIdQualifier=NameId Qualifier\n+assertionAudiences=Assertion Audiences\n+serviceProviderNameIdQualifier=Service Provider NameId Qualifier\n+signingSignatureAlgorithms=Signing Signature Algorithms\n+signingSignatureReferenceDigestMethods=Signing Signature Reference Digest Methods\n+encryptionDataAlgorithms=Encryption Data Algorithms\n+encryptionKeyAlgorithms=Encryption Key Algorithms\n+signingSignatureBlackListedAlgorithms=Signing Signature BlackListed Algorithms\n+encryptionBlackListedAlgorithms=Encryption BlackListed Algorithms\n+description=Description\n+theme=Theme\n+authPolicy=Authentication Policy\n+accessPolicy=Access Policy\n+attrReleasePolicy=Attribute Release Policy"},{"sha":"e2d542bc6617900efeb0f105d6fccaf1cca8e33b","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_it.properties","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_it.properties?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,56 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Nome\n+any.edit=Modifica ${name}\n+any.new=Nuova App Client\n+any.finish=Invia ${name}\n+any.cancel=Annulla ${name}\n+clientId=Client Id\n+entityId=Entity Id\n+serviceId=Service Id\n+clientAppId=Id\n+redirectUris=URI di Redirect\n+logout=Logout\n+signAssertions=Firma Assertion\n+signResponses=Firma Response\n+encryptionOptional=Cifratura Opzionale\n+encryptAssertions=Cifratura Assertion\n+requiredNameIdFormat=Formato NameId\n+clientSecret=Client Secret\n+signIdToken=Firma IdToken\n+subjectType=Tipo Subject\n+supportedGrantTypes=Grant Type Supportati\n+supportedResponseTypes=Reponse Type Supportati\n+logoutUri=URI di Logout\n+metadataLocation=Metadata Location\n+metadataSignatureLocation=Metadata Signature Location\n+requiredAuthenticationContextClass=Authentication Context Class\n+skewAllowance=Skew Allowance\n+nameIdQualifier=NameId Qualifier\n+assertionAudiences=Assertion Audiences\n+serviceProviderNameIdQualifier=Service Provider NameId Qualifier\n+signingSignatureAlgorithms=Signing Signature Algorithms\n+signingSignatureReferenceDigestMethods=Signing Signature Reference Digest Methods\n+encryptionDataAlgorithms=Encryption Data Algorithms\n+encryptionKeyAlgorithms=Encryption Key Algorithms\n+signingSignatureBlackListedAlgorithms=Signing Signature BlackListed Algorithms\n+encryptionBlackListedAlgorithms=Encryption BlackListed Algorithms\n+description=Descrizione\n+theme=Tema\n+authPolicy=Politica Autenticazione\n+accessPolicy=Politica Accesso\n+attrReleasePolicy=Politica Rilascio Attributi"},{"sha":"3fc7c3418a7578672d76b1e2522341d179309a95","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_ja.properties","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ja.properties?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,56 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Name\n+any.edit=${name} \\u3092\\u7de8\\u96c6\n+any.new=New Client App\n+any.finish=${name} \\u3092\\u5b9f\\u884c\n+any.cancel=${name} \\u3092\\u30ad\\u30e3\\u30f3\\u30bb\\u30eb\n+clientId=Client Id\n+entityId=Entity Id\n+serviceId=Service Id\n+clientAppId=Id\n+redirectUris=Redirect URIs\n+logout=Logout\n+signAssertions=Sign Assertions\n+signResponses=Sign Responses\n+encryptionOptional=Encryption Optional\n+encryptAssertions=Encrypt Assertions\n+requiredNameIdFormat=NameId Format\n+clientSecret=Client Secret\n+signIdToken=Sign IdToken\n+subjectType=Subject Type\n+supportedGrantTypes=Supported Grant Types\n+supportedResponseTypes=Supported Reponse Types\n+logoutUri=Logout URI\n+metadataLocation=Metadata Location\n+metadataSignatureLocation=Metadata Signature Location\n+requiredAuthenticationContextClass=Authentication Context Class\n+skewAllowance=Skew Allowance\n+nameIdQualifier=NameId Qualifier\n+assertionAudiences=Assertion Audiences\n+serviceProviderNameIdQualifier=Service Provider NameId Qualifier\n+signingSignatureAlgorithms=Signing Signature Algorithms\n+signingSignatureReferenceDigestMethods=Signing Signature Reference Digest Methods\n+encryptionDataAlgorithms=Encryption Data Algorithms\n+encryptionKeyAlgorithms=Encryption Key Algorithms\n+signingSignatureBlackListedAlgorithms=Signing Signature BlackListed Algorithms\n+encryptionBlackListedAlgorithms=Encryption BlackListed Algorithms\n+description=Description\n+theme=Theme\n+authPolicy=Authentication Policy\n+accessPolicy=Access Policy\n+attrReleasePolicy=Attribute Release Policy"},{"sha":"d4fc071ddaa287eda0682dd473a5511e7988c849","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_pt_BR.properties","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_pt_BR.properties?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,56 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+name=Name\n+any.edit=Edit ${name}\n+any.new=New Client App\n+any.finish=Submit ${name}\n+any.cancel=Cancel ${name}\n+clientId=Client Id\n+entityId=Entity Id\n+serviceId=Service Id\n+clientAppId=Id\n+redirectUris=Redirect URIs\n+logout=Logout\n+signAssertions=Sign Assertions\n+signResponses=Sign Responses\n+encryptionOptional=Encryption Optional\n+encryptAssertions=Encrypt Assertions\n+requiredNameIdFormat=NameId Format\n+clientSecret=Client Secret\n+signIdToken=Sign IdToken\n+subjectType=Subject Type\n+supportedGrantTypes=Supported Grant Types\n+supportedResponseTypes=Supported Reponse Types\n+logoutUri=Logout URI\n+metadataLocation=Metadata Location\n+metadataSignatureLocation=Metadata Signature Location\n+requiredAuthenticationContextClass=Authentication Context Class\n+skewAllowance=Skew Allowance\n+nameIdQualifier=NameId Qualifier\n+assertionAudiences=Assertion Audiences\n+serviceProviderNameIdQualifier=Service Provider NameId Qualifier\n+signingSignatureAlgorithms=Signing Signature Algorithms\n+signingSignatureReferenceDigestMethods=Signing Signature Reference Digest Methods\n+encryptionDataAlgorithms=Encryption Data Algorithms\n+encryptionKeyAlgorithms=Encryption Key Algorithms\n+signingSignatureBlackListedAlgorithms=Signing Signature BlackListed Algorithms\n+encryptionBlackListedAlgorithms=Encryption BlackListed Algorithms\n+description=Description\n+theme=Theme\n+authPolicy=Authentication Policy\n+accessPolicy=Access Policy\n+attrReleasePolicy=Attribute Release Policy"},{"sha":"1727710d0606cbe23d19c78748ba1159eeb0dff0","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppDirectoryPanel_ru.properties","status":"added","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppDirectoryPanel_ru.properties?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,57 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+#\n+name=Name\n+any.edit=\\u0418\\u0437\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${name}\n+any.new=New Client App\n+any.finish=\\u0421\\u043e\\u0445\\u0440\\u0430\\u043d\\u0438\\u0442\\u044c ${name}\n+any.cancel=\\u041e\\u0442\\u043c\\u0435\\u043d\\u0438\\u0442\\u044c ${name}\n+clientId=Client Id\n+entityId=Entity Id\n+serviceId=Service Id\n+clientAppId=Id\n+redirectUris=Redirect URIs\n+logout=Logout\n+signAssertions=Sign Assertions\n+signResponses=Sign Responses\n+encryptionOptional=Encryption Optional\n+encryptAssertions=Encrypt Assertions\n+requiredNameIdFormat=NameId Format\n+clientSecret=Client Secret\n+signIdToken=Sign IdToken\n+subjectType=Subject Type\n+supportedGrantTypes=Supported Grant Types\n+supportedResponseTypes=Supported Reponse Types\n+logoutUri=Logout URI\n+metadataLocation=Metadata Location\n+metadataSignatureLocation=Metadata Signature Location\n+requiredAuthenticationContextClass=Authentication Context Class\n+skewAllowance=Skew Allowance\n+nameIdQualifier=NameId Qualifier\n+assertionAudiences=Assertion Audiences\n+serviceProviderNameIdQualifier=Service Provider NameId Qualifier\n+signingSignatureAlgorithms=Signing Signature Algorithms\n+signingSignatureReferenceDigestMethods=Signing Signature Reference Digest Methods\n+encryptionDataAlgorithms=Encryption Data Algorithms\n+encryptionKeyAlgorithms=Encryption Key Algorithms\n+signingSignatureBlackListedAlgorithms=Signing Signature BlackListed Algorithms\n+encryptionBlackListedAlgorithms=Encryption BlackListed Algorithms\n+description=Description\n+theme=Theme\n+authPolicy=Authentication Policy\n+accessPolicy=Access Policy\n+attrReleasePolicy=Attribute Release Policy"},{"sha":"78bd42627ac579b01e95f0eb9059197fea88854b","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientAppModalPanelBuilder$Profile.html","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder%24Profile.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder%24Profile.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientAppModalPanelBuilder%24Profile.html?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,27 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"fields\">\n+      <div class=\"form-group\">\n+        <span wicket:id=\"field\"/>\n+      </div>\n+    </div>\n+  </wicket:panel>\n+</html>"},{"sha":"391f817fcdb0e9fc682697770bf11109fb6036cd","filename":"client/am/console/src/main/resources/org/apache/syncope/client/console/clientapps/ClientApps.html","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientApps.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientApps.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fclientapps%2FClientApps.html?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,23 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:panel>\n+    <div wicket:id=\"clientApps\"/>\n+  </wicket:panel>\n+</html>"},{"sha":"9a3714268af34ee8bbfb2fcd5342b53fafe0ecd7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -159,7 +159,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n                     }\n                 }\n             });\n-            PolicyRestClient.updatePolicy(getItem() instanceof PullPolicyTO\n+            PolicyRestClient.update(getItem() instanceof PullPolicyTO\n                     ? PolicyType.PULL : PolicyType.PUSH, getItem());\n \n             SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));"},{"sha":"2a8374cecf41960a859a5c0fff480a1dfae32d53","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/LinkedAccountPlainAttrsPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FLinkedAccountPlainAttrsPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -77,8 +77,7 @@ public <T extends AnyTO> LinkedAccountPlainAttrsPanel(\n         super(userTO,\n                 AjaxWizard.Mode.EDIT,\n                 AnyTypeRestClient.read(userTO.getType()).getClasses(),\n-                whichPlainAttrs,\n-                modelObject);\n+                whichPlainAttrs);\n \n         this.linkedAccountTO = modelObject.getInnerObject();\n         this.fixedAttrs.addAll(this.linkedAccountTO.getPlainAttrs().stream().\n@@ -239,7 +238,7 @@ private class PlainSchemasOwn extends PlainSchemas<List<Attr>> {\n                 final Map<String, PlainSchemaTO> schemas,\n                 final IModel<List<Attr>> attrTOs) {\n \n-            super(id, schemas, attrTOs);\n+            super(id);\n \n             add(new ListView<Attr>(\"schemas\", attrTOs) {\n "},{"sha":"792ffd067381370bc95c2948582333cc33e0fd22","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ProvisionWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FProvisionWizardBuilder.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -126,7 +126,7 @@ private static final class Mapping extends WizardStep {\n \n         private static final long serialVersionUID = 3454904947720856253L;\n \n-        Mapping(final ResourceProvision resourceProvision) {\n+        Mapping() {\n             setTitleModel(Model.of(\"Mapping\"));\n             setSummaryModel(Model.of(StringUtils.EMPTY));\n         }\n@@ -203,7 +203,7 @@ protected WizardModel buildModelSteps(final ResourceProvision resourceProvision,\n         wizardModel.add(new ObjectType(resourceProvision));\n         wizardModel.add(new AuxClasses(resourceProvision));\n \n-        Mapping mapping = new Mapping(resourceProvision);\n+        Mapping mapping = new Mapping();\n         mapping.setOutputMarkupId(true);\n \n         ItemTransformersTogglePanel itemTransformers = new ItemTransformersTogglePanel(mapping, pageRef);"},{"sha":"2f7e098b8755d0c09d166a4ef37a299bc09abf61","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceSecurityPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceSecurityPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -45,7 +45,7 @@ public class ResourceSecurityPanel extends WizardStep {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.PASSWORD).stream().\n+            return PolicyRestClient.list(PolicyType.PASSWORD).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -56,7 +56,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.ACCOUNT).stream().\n+            return PolicyRestClient.list(PolicyType.ACCOUNT).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -67,7 +67,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.PULL).stream().\n+            return PolicyRestClient.list(PolicyType.PULL).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -78,7 +78,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.PUSH).stream().\n+            return PolicyRestClient.list(PolicyType.PUSH).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };"},{"sha":"eb9872ac4de7f1997cbd9c8b534ceb49c751a68c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -194,9 +194,16 @@ protected void init() {\n \n         useGZIPCompression = BooleanUtils.toBoolean(props.getProperty(\"useGZIPCompression\"));\n         Args.notNull(useGZIPCompression, \"<useGZIPCompression>\");\n-        maxUploadFileSizeMB = props.getProperty(\"maxUploadFileSizeMB\") == null\n-                ? null\n-                : Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\"));\n+\n+        try {\n+            maxUploadFileSizeMB = props.getProperty(\"maxUploadFileSizeMB\") == null\n+                    ? null\n+                    : Integer.valueOf(props.getProperty(\"maxUploadFileSizeMB\"));\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid value provided for 'maxUploadFileSizeMB': {}\",\n+                    props.getProperty(\"maxUploadFileSizeMB\"));\n+            maxUploadFileSizeMB = null;\n+        }\n \n         try {\n             maxWaitTime = Integer.valueOf(props.getProperty(\"maxWaitTimeOnApplyChanges\", \"30\"));"},{"sha":"e7666adb5b6c6f5e2145fbeead8487fd74f87548","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoRealmPolicyProvider.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoRealmPolicyProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoRealmPolicyProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoRealmPolicyProvider.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n-import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.AbstractSingleSelectChoice;\n import org.apache.wicket.markup.repeater.RepeatingView;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -44,7 +44,7 @@ public class IdRepoRealmPolicyProvider implements RealmPolicyProvider {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.ACCOUNT).stream().\n+            return PolicyRestClient.list(PolicyType.ACCOUNT).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -55,7 +55,7 @@ protected Map<String, String> load() {\n \n         @Override\n         protected Map<String, String> load() {\n-            return PolicyRestClient.getPolicies(PolicyType.PASSWORD).stream().\n+            return PolicyRestClient.list(PolicyType.PASSWORD).stream().\n                     collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n@@ -69,7 +69,7 @@ public void add(final RealmTO realmTO, final RepeatingView view) {\n                 false);\n         accountPolicy.setChoiceRenderer(new PolicyRenderer(accountPolicies));\n         accountPolicy.setChoices(new ArrayList<>(accountPolicies.getObject().keySet()));\n-        ((DropDownChoice<?>) accountPolicy.getField()).setNullValid(true);\n+        ((AbstractSingleSelectChoice<?>) accountPolicy.getField()).setNullValid(true);\n         view.add(accountPolicy);\n \n         AjaxDropDownChoicePanel<String> passwordPolicy = new AjaxDropDownChoicePanel<>(\n@@ -79,7 +79,7 @@ public void add(final RealmTO realmTO, final RepeatingView view) {\n                 false);\n         passwordPolicy.setChoiceRenderer(new PolicyRenderer(passwordPolicies));\n         passwordPolicy.setChoices(new ArrayList<>(passwordPolicies.getObject().keySet()));\n-        ((DropDownChoice<?>) passwordPolicy.getField()).setNullValid(true);\n+        ((AbstractSingleSelectChoice<?>) passwordPolicy.getField()).setNullValid(true);\n         view.add(passwordPolicy);\n     }\n }"},{"sha":"eef709e8206ceed6be704043dd9cd3ef7ccece50","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -118,7 +118,7 @@ protected List<String> load() {\n \n             private static final long serialVersionUID = 9101744072914090143L;\n \n-            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+            @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n             @Override\n             protected void populateItem(final ListItem<String> item) {\n                 final String fieldName = item.getModelObject();\n@@ -231,7 +231,7 @@ protected void populateItem(final ListItem<String> item) {\n         }.setReuseItems(true).setOutputMarkupId(true));\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     private static FieldPanel buildSinglePanel(\n             final Serializable bean, final Class<?> type, final String fieldName, final String id) {\n "},{"sha":"7491521b5f378e8c57a268dbf5a4534502f7d8bf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/PlainSchemaDetails.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainSchemaDetails.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -316,7 +316,12 @@ private void showHide(final PlainSchemaTO schema, final AjaxDropDownChoicePanel<\n             final AjaxTextFieldPanel secretKey, final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm,\n             final WebMarkupContainer binaryParams, final AjaxTextFieldPanel mimeType) {\n \n-        int typeOrdinal = Integer.parseInt(type.getField().getValue());\n+        int typeOrdinal = -1;\n+        try {\n+            typeOrdinal = Integer.parseInt(type.getField().getValue());\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid value found: {}\", type.getField().getValue(), e);\n+        }\n         if (AttrSchemaType.Long.ordinal() == typeOrdinal\n                 || AttrSchemaType.Double.ordinal() == typeOrdinal\n                 || AttrSchemaType.Date.ordinal() == typeOrdinal) {"},{"sha":"5e411540b64468d18687d6f31f17c9c72ae5682a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyDirectoryPanel.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -72,16 +72,15 @@ protected void onConfigure() {\n             super.onConfigure();\n             setFooterVisible(false);\n         }\n-\n     };\n \n     protected final BaseModal<T> policySpecModal = new BaseModal<>(Constants.OUTER);\n \n     private final PolicyType type;\n \n-    public PolicyDirectoryPanel(final String id, final PolicyType policyType, final PageReference pageRef) {\n+    public PolicyDirectoryPanel(final String id, final PolicyType type, final PageReference pageRef) {\n         super(id, pageRef, true);\n-        this.type = policyType;\n+        this.type = type;\n         this.restClient = new PolicyRestClient();\n \n         ruleCompositionModal.size(Modal.Size.Large);\n@@ -138,7 +137,7 @@ public ActionsPanel<T> getActions(final IModel<T> model) {\n             public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n                 send(PolicyDirectoryPanel.this, Broadcast.EXACT,\n                         new AjaxWizard.EditItemActionEvent<>(\n-                                PolicyRestClient.getPolicy(type, model.getObject().getKey()), target));\n+                                PolicyRestClient.read(type, model.getObject().getKey()), target));\n             }\n         }, ActionLink.ActionType.EDIT, IdRepoEntitlement.POLICY_UPDATE);\n \n@@ -163,7 +162,7 @@ public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final PolicyTO ignore) {\n-                final T policyTO = model.getObject();\n+                T policyTO = model.getObject();\n                 try {\n                     PolicyRestClient.delete(type, policyTO.getKey());\n                     SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n@@ -215,14 +214,14 @@ public PolicyDataProvider(final int paginatorRows) {\n \n         @Override\n         public Iterator<T> iterator(final long first, final long count) {\n-            List<T> list = PolicyRestClient.getPolicies(type);\n+            List<T> list = PolicyRestClient.list(type);\n             list.sort(comparator);\n             return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n         public long size() {\n-            return PolicyRestClient.getPolicies(type).size();\n+            return PolicyRestClient.list(type).size();\n         }\n \n         @Override"},{"sha":"d6cb1053f5a9cda48ef296f03f764afb7ccea098","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyModalPanelBuilder.java","status":"modified","additions":64,"deletions":53,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyModalPanelBuilder.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -24,7 +24,6 @@\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.rest.PolicyRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n@@ -33,14 +32,11 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxSpinnerFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.wizards.AbstractModalPanelBuilder;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n-import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n-import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n-import org.apache.syncope.common.lib.policy.ProvisioningPolicyTO;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.wicket.Component;\n@@ -73,7 +69,7 @@ public WizardModalPanel<T> build(final String id, final int index, final AjaxWiz\n         return new Profile(newModelObject(), modal, pageRef);\n     }\n \n-    public class Profile extends AbstractModalPanel<T> {\n+    private class Profile extends AbstractModalPanel<T> {\n \n         private static final long serialVersionUID = -3043839139187792810L;\n \n@@ -89,54 +85,70 @@ protected List<String> load() {\n             }\n         };\n \n-        public Profile(final T policyTO, final BaseModal<T> modal, final PageReference pageRef) {\n+        Profile(final T policyTO, final BaseModal<T> modal, final PageReference pageRef) {\n             super(modal, pageRef);\n             modal.setFormModel(policyTO);\n \n             this.policyTO = policyTO;\n \n-            final List<Component> fields = new ArrayList<>();\n-\n-            FieldPanel<String> description = new AjaxTextFieldPanel(\"field\", \"description\",\n-                    new PropertyModel<>(policyTO, \"description\"), false);\n-            description.setRequired(true);\n-            fields.add(description);\n-\n-            if (policyTO instanceof AccountPolicyTO) {\n-                fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n-                        \"field\",\n-                        \"maxAuthenticationAttempts\",\n-                        Integer.class,\n-                        new PropertyModel<>(policyTO, \"maxAuthenticationAttempts\")));\n-\n-                fields.add(new AjaxCheckBoxPanel(\n-                        \"field\",\n-                        \"propagateSuspension\",\n-                        new PropertyModel<>(policyTO, \"propagateSuspension\"),\n-                        false));\n-\n-                fields.add(new AjaxPalettePanel.Builder<String>().setName(\"passthroughResources\").build(\n-                        \"field\",\n-                        new PropertyModel<>(policyTO, \"passthroughResources\"),\n-                        new ListModel<>(resources.getObject())));\n-            } else if (policyTO instanceof PasswordPolicyTO) {\n-                fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n-                        \"field\",\n-                        \"historyLength\",\n-                        Integer.class,\n-                        new PropertyModel<>(policyTO, \"historyLength\")));\n-\n-                fields.add(new AjaxCheckBoxPanel(\n-                        \"field\",\n-                        \"allowNullPassword\",\n-                        new PropertyModel<>(policyTO, \"allowNullPassword\"),\n-                        false));\n-            } else if (policyTO instanceof ProvisioningPolicyTO) {\n-                fields.add(new AjaxDropDownChoicePanel<>(\n-                        \"field\",\n-                        \"conflictResolutionAction\",\n-                        new PropertyModel<>(policyTO, \"conflictResolutionAction\")).\n-                        setChoices(List.of((Serializable[]) ConflictResolutionAction.values())));\n+            List<Component> fields = new ArrayList<>();\n+\n+            fields.add(new AjaxTextFieldPanel(\"field\", \"description\",\n+                    new PropertyModel<>(policyTO, \"description\"), false).setRequired(true));\n+\n+            switch (type) {\n+                case ACCOUNT:\n+                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                            \"field\",\n+                            \"maxAuthenticationAttempts\",\n+                            Integer.class,\n+                            new PropertyModel<>(policyTO, \"maxAuthenticationAttempts\")));\n+\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\",\n+                            \"propagateSuspension\",\n+                            new PropertyModel<>(policyTO, \"propagateSuspension\"),\n+                            false));\n+\n+                    fields.add(new AjaxPalettePanel.Builder<String>().setName(\"passthroughResources\").build(\n+                            \"field\",\n+                            new PropertyModel<>(policyTO, \"passthroughResources\"),\n+                            new ListModel<>(resources.getObject())));\n+                    break;\n+\n+                case PASSWORD:\n+                    fields.add(new AjaxSpinnerFieldPanel.Builder<Integer>().build(\n+                            \"field\",\n+                            \"historyLength\",\n+                            Integer.class,\n+                            new PropertyModel<>(policyTO, \"historyLength\")));\n+\n+                    fields.add(new AjaxCheckBoxPanel(\n+                            \"field\",\n+                            \"allowNullPassword\",\n+                            new PropertyModel<>(policyTO, \"allowNullPassword\"),\n+                            false));\n+                    break;\n+\n+                case PULL:\n+                case PUSH:\n+                    fields.add(new AjaxDropDownChoicePanel<>(\n+                            \"field\",\n+                            \"conflictResolutionAction\",\n+                            new PropertyModel<>(policyTO, \"conflictResolutionAction\")).\n+                            setChoices(List.of((Serializable[]) ConflictResolutionAction.values())));\n+                    break;\n+\n+                case ACCESS:\n+                    break;\n+\n+                case ATTR_RELEASE:\n+                    break;\n+\n+                case AUTH:\n+                    break;\n+\n+                default:\n             }\n \n             add(new ListView<Component>(\"fields\", fields) {\n@@ -147,25 +159,24 @@ public Profile(final T policyTO, final BaseModal<T> modal, final PageReference p\n                 protected void populateItem(final ListItem<Component> item) {\n                     item.add(item.getModelObject());\n                 }\n-\n             });\n         }\n \n         @Override\n         public void onSubmit(final AjaxRequestTarget target) {\n             try {\n                 if (policyTO.getKey() == null) {\n-                    PolicyRestClient.createPolicy(type, policyTO);\n+                    PolicyRestClient.create(type, policyTO);\n                 } else {\n-                    PolicyRestClient.updatePolicy(type, policyTO);\n+                    PolicyRestClient.update(type, policyTO);\n                 }\n                 SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n                 Profile.this.modal.close(target);\n             } catch (Exception e) {\n                 LOG.error(\"While creating/updating policy\", e);\n                 SyncopeConsoleSession.get().onException(e);\n             }\n-            ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n         }\n     }\n }"},{"sha":"ccda5508748c0d3e84725a0c1c3538d957acb363","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleDirectoryPanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -162,10 +162,10 @@ public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper igno\n             public void onClick(final AjaxRequestTarget target, final PolicyRuleWrapper ignore) {\n                 RuleConf rule = model.getObject().getConf();\n                 try {\n-                    T actual = PolicyRestClient.getPolicy(type, policy);\n+                    T actual = PolicyRestClient.read(type, policy);\n                     if (actual instanceof ComposablePolicy) {\n                         ((ComposablePolicy) actual).getRules().remove(model.getObject().getImplementationKey());\n-                        PolicyRestClient.updatePolicy(type, actual);\n+                        PolicyRestClient.update(type, actual);\n \n                         SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n                         customActionOnFinishCallback(target);\n@@ -251,7 +251,7 @@ private List<PolicyRuleWrapper> getPolicyRuleWrappers(final ComposablePolicy pol\n \n         @Override\n         public Iterator<PolicyRuleWrapper> iterator(final long first, final long count) {\n-            final T actual = PolicyRestClient.getPolicy(type, policy);\n+            final T actual = PolicyRestClient.read(type, policy);\n \n             List<PolicyRuleWrapper> rules = actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual)\n@@ -263,7 +263,7 @@ public Iterator<PolicyRuleWrapper> iterator(final long first, final long count)\n \n         @Override\n         public long size() {\n-            final T actual = PolicyRestClient.getPolicy(type, policy);\n+            final T actual = PolicyRestClient.read(type, policy);\n             return actual instanceof ComposablePolicy\n                     ? getPolicyRuleWrappers((ComposablePolicy) actual).size()\n                     : 0;"},{"sha":"25c2300bdb871c8183e0f832662d1234b47f7da6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -75,7 +75,7 @@ public PolicyRuleWizardBuilder(\n \n     @Override\n     protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n-        PolicyTO policyTO = PolicyRestClient.getPolicy(type, policy);\n+        PolicyTO policyTO = PolicyRestClient.read(type, policy);\n \n         ComposablePolicy composable;\n         if (policyTO instanceof ComposablePolicy) {\n@@ -99,7 +99,7 @@ protected Serializable onApplyInternal(final PolicyRuleWrapper modelObject) {\n             composable.getRules().add(modelObject.getImplementationKey());\n         }\n \n-        PolicyRestClient.updatePolicy(type, policyTO);\n+        PolicyRestClient.update(type, policyTO);\n         return modelObject;\n     }\n "},{"sha":"8ae9c67068aa2a48340ecd415a6fd72b462c4661","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -141,7 +141,7 @@ public void populateItem(\n                 Component panel;\n                 try {\n                     JobTO jobTO = ReportRestClient.getJob(rowModel.getObject().getKey());\n-                    panel = new JobActionPanel(componentId, jobTO, false, ReportDirectoryPanel.this, pageRef);\n+                    panel = new JobActionPanel(componentId, jobTO, false, ReportDirectoryPanel.this);\n                     MetaDataRoleAuthorizationStrategy.authorize(panel, WebPage.ENABLE,\n                             String.format(\"%s,%s\",\n                                     IdRepoEntitlement.REPORT_EXECUTE,"},{"sha":"acf491295d806a6684d421a39472790cc5c63649","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"modified","additions":6,"deletions":20,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -18,10 +18,8 @@\n  */\n package org.apache.syncope.client.console.rest;\n \n-import java.io.Serializable;\n import java.util.Comparator;\n import java.util.List;\n-import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -34,20 +32,20 @@ public class PolicyRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1392090291817187902L;\n \n-    private static final PolicyComparator COMPARATOR = new PolicyComparator();\n+    private static final Comparator<PolicyTO> COMPARATOR = Comparator.comparing(PolicyTO::getDescription);\n \n-    public static <T extends PolicyTO> T getPolicy(final PolicyType type, final String key) {\n+    public static <T extends PolicyTO> T read(final PolicyType type, final String key) {\n         T policy = null;\n         try {\n             policy = getService(PolicyService.class).read(type, key);\n         } catch (Exception e) {\n-            LOG.warn(\"No policy found for id {}\", key, e);\n+            LOG.warn(\"No policy found for type {} and key {}\", type, key, e);\n         }\n         return policy;\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public static <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n+    public static <T extends PolicyTO> List<T> list(final PolicyType type) {\n         try {\n             return getService(PolicyService.class).<T>list(type).stream().\n                     sorted(COMPARATOR).\n@@ -58,27 +56,15 @@ public static <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n         }\n     }\n \n-    public static <T extends PolicyTO> void createPolicy(final PolicyType type, final T policy) {\n+    public static <T extends PolicyTO> void create(final PolicyType type, final T policy) {\n         getService(PolicyService.class).create(type, policy);\n     }\n \n-    public static <T extends PolicyTO> void updatePolicy(final PolicyType type, final T policy) {\n+    public static <T extends PolicyTO> void update(final PolicyType type, final T policy) {\n         getService(PolicyService.class).update(type, policy);\n     }\n \n     public static void delete(final PolicyType type, final String key) {\n         getService(PolicyService.class).delete(type, key);\n     }\n-\n-    private static class PolicyComparator implements Comparator<PolicyTO>, Serializable {\n-\n-        private static final long serialVersionUID = -4921433085213223115L;\n-\n-        @Override\n-        public int compare(final PolicyTO left, final PolicyTO right) {\n-            return Optional.ofNullable(left).map(to -> Optional.ofNullable(right).\n-                    map(policyTO -> to.getDescription().compareTo(policyTO.getDescription())).orElse(1)).\n-                    orElse(-1);\n-        }\n-    }\n }"},{"sha":"279418dd2aa555fa2f7ac5873d40857fa904035e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/ProvisioningTaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FProvisioningTaskDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -144,7 +144,7 @@ public void populateItem(\n                 Component panel;\n                 try {\n                     JobTO jobTO = TaskRestClient.getJob(rowModel.getObject().getKey());\n-                    panel = new JobActionPanel(componentId, jobTO, false, ProvisioningTaskDirectoryPanel.this, pageRef);\n+                    panel = new JobActionPanel(componentId, jobTO, false, ProvisioningTaskDirectoryPanel.this);\n                     MetaDataRoleAuthorizationStrategy.authorize(\n                             panel, WebPage.ENABLE,\n                             String.format(\"%s,%s\", IdRepoEntitlement.TASK_EXECUTE, IdRepoEntitlement.TASK_UPDATE));"},{"sha":"4bc548bbc00843304ec48d2300aac4d525d4d066","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskDirectoryPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -204,7 +204,7 @@ public void populateItem(\n                 Component panel;\n                 try {\n                     JobTO jobTO = restClient.getJob(rowModel.getObject().getKey());\n-                    panel = new JobActionPanel(componentId, jobTO, false, SchedTaskDirectoryPanel.this, pageRef);\n+                    panel = new JobActionPanel(componentId, jobTO, false, SchedTaskDirectoryPanel.this);\n                     MetaDataRoleAuthorizationStrategy.authorize(\n                             panel, WebPage.ENABLE,\n                             String.format(\"%s,%s\", IdRepoEntitlement.TASK_EXECUTE, IdRepoEntitlement.TASK_UPDATE));"},{"sha":"4b4af91fe2671b015b1450dec2541ce77aea6128","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/AlertWidget.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FAlertWidget.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -72,7 +72,15 @@ protected Integer load() {\n             @Override\n             protected void onComponentTag(final ComponentTag tag) {\n                 super.onComponentTag(tag);\n-                if (Integer.parseInt(getDefaultModelObject().toString()) > 0) {\n+\n+                boolean warning = false;\n+                try {\n+                    warning = Integer.parseInt(getDefaultModelObject().toString()) > 0;\n+                } catch (Exception e) {\n+                    LOG.error(\"Invalid value found: {}\", getDefaultModelObject(), e);\n+                }\n+\n+                if (warning) {\n                     tag.put(\"class\", \"badge badge-warning navbar-badge\");\n                 } else {\n                     tag.put(\"class\", \"badge badge-success navbar-badge\");"},{"sha":"58e5b7c87c32054f2339af9ebad1b6027dca628f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobActionPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobActionPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.wicket.Component;\n-import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.Broadcast;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -53,8 +52,7 @@ public JobActionPanel(\n             final String id,\n             final JobTO jobTO,\n             final boolean showNotRunning,\n-            final Component container,\n-            final PageReference pageRef) {\n+            final Component container) {\n \n         super(id, true);\n         setOutputMarkupId(true);"},{"sha":"934eb46a54c90f8cd23ed5be434f81d818ed225c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -354,7 +354,7 @@ public void populateItem(\n                         final IModel<JobTO> rowModel) {\n \n                     JobTO jobTO = rowModel.getObject();\n-                    JobActionPanel panel = new JobActionPanel(componentId, jobTO, true, JobWidget.this, pageRef);\n+                    JobActionPanel panel = new JobActionPanel(componentId, jobTO, true, JobWidget.this);\n \n                     String roles;\n                     switch (jobTO.getType()) {"},{"sha":"5f0c422e633772dbb13027d59b7c4869d3b628da","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -25,6 +25,7 @@\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n@@ -61,7 +62,7 @@ public AbstractAttrs(\n             final List<String> anyTypeClasses,\n             final List<String> whichAttrs) {\n \n-        super(modelObject.getInnerObject(), mode, anyTypeClasses, whichAttrs, null);\n+        super(modelObject.getInnerObject(), mode, anyTypeClasses, whichAttrs);\n \n         this.memberships = new ListModel<>(List.of());\n \n@@ -76,7 +77,7 @@ private List<MembershipTO> loadMemberships() {\n         try {\n             ((List<MembershipTO>) PropertyResolver.getPropertyField(\"memberships\", anyTO).get(anyTO)).forEach(memb -> {\n                 setSchemas(memb.getGroupKey(),\n-                        anyTypeClassRestClient.list(getMembershipAuxClasses(memb, anyTO.getType())).\n+                        AnyTypeClassRestClient.list(getMembershipAuxClasses(memb, anyTO.getType())).\n                                 stream().map(EntityTO::getKey).collect(Collectors.toList()));\n                 setAttrs(memb);\n "},{"sha":"f4ae2c3182bd32915d2800462af845d847d615ac","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrsWizardStep.java","status":"modified","additions":2,"deletions":10,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrsWizardStep.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -47,7 +47,6 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.EncryptedFieldPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n-import org.apache.syncope.client.ui.commons.wizards.any.EntityWrapper;\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.SchemaTO;\n@@ -76,8 +75,6 @@\n \n     protected final Comparator<Attr> attrComparator = new AttrComparator();\n \n-    protected final AnyTypeClassRestClient anyTypeClassRestClient = new AnyTypeClassRestClient();\n-\n     protected final AnyTO anyTO;\n \n     protected AnyTO previousObject;\n@@ -98,8 +95,7 @@ public AbstractAttrsWizardStep(\n             final AnyTO anyTO,\n             final AjaxWizard.Mode mode,\n             final List<String> anyTypeClasses,\n-            final List<String> whichAttrs,\n-            final EntityWrapper<?> modelObject) {\n+            final List<String> whichAttrs) {\n \n         super();\n         this.anyTypeClasses = anyTypeClasses;\n@@ -390,11 +386,7 @@ public Schemas(final String id) {\n \n         private static final long serialVersionUID = 8315035592714180404L;\n \n-        public PlainSchemas(\n-                final String id,\n-                final Map<String, PlainSchemaTO> schemas,\n-                final IModel<T> attrs) {\n-\n+        public PlainSchemas(final String id) {\n             super(id);\n         }\n "},{"sha":"825cd24f340b40908b85bb4ad5dad701d6531117","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/PlainAttrs.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FPlainAttrs.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -194,7 +194,7 @@ public PlainSchemasOwn(\n                 final Map<String, PlainSchemaTO> schemas,\n                 final IModel<List<Attr>> attrTOs) {\n \n-            super(id, schemas, attrTOs);\n+            super(id);\n \n             add(new ListView<Attr>(\"schemas\", attrTOs) {\n \n@@ -218,7 +218,7 @@ public PlainSchemasMemberships(\n                 final Map<String, PlainSchemaTO> schemas,\n                 final IModel<Attributable> attributableTO) {\n \n-            super(id, schemas, attributableTO);\n+            super(id);\n \n             add(new ListView<Attr>(\"schemas\", new ListModel<Attr>(attributableTO.getObject().\n                     getPlainAttrs().stream().sorted(attrComparator).collect(Collectors.toList()))) {"},{"sha":"5739f02802e8c349a7a5412e94a625f7c67e4b7e","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/layout/AnyLayoutUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FAnyLayoutUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FAnyLayoutUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Flayout%2FAnyLayoutUtils.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -63,7 +63,7 @@ public static UserFormLayoutInfo fromJsonString(final String content) {\n         }\n     }\n \n-    public static String defaultConsoleLayoutInfoIfEmpty(final String content, final List<String> anyTypes) {\n+    public static String defaultConsoleLayoutInfoIfEmpty(final String content) {\n         String result;\n \n         if (StringUtils.isBlank(content)) {"},{"sha":"922554e7b97d110e925c1f018135ccca4652f3da","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/AnyWizardBuilder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -94,8 +94,7 @@ protected WizardModel buildModelSteps(final AnyWrapper<UserTO> modelObject, fina\n         wizardModel.add(new UserDetails(\n                 UserWrapper.class.cast(modelObject),\n                 mode == AjaxWizard.Mode.TEMPLATE,\n-                UserFormLayoutInfo.class.cast(formLayoutInfo).isPasswordManagement(),\n-                pageRef));\n+                UserFormLayoutInfo.class.cast(formLayoutInfo).isPasswordManagement()));\n \n         if (formLayoutInfo.isAuxClasses()) {\n             wizardModel.add(new EnduserAuxClasses(modelObject, anyTypeClasses));"},{"sha":"c2b7b1f53923cee28fa1adac048e04779b4a6c7e","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/UserDetails.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FUserDetails.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.wicket.Component;\n-import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -73,8 +72,8 @@ public class UserDetails extends WizardStep {\n     public UserDetails(\n             final UserWrapper wrapper,\n             final boolean templateMode,\n-            final boolean showPasswordManagement,\n-            final PageReference pageRef) {\n+            final boolean showPasswordManagement) {\n+\n         super();\n \n         userTO = wrapper.getInnerObject();"},{"sha":"d69826d18729dc03c8d00a3b53e94c24e6a136f1","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/ClientAppTO.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FClientAppTO.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -29,8 +29,8 @@\n \n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"_class\")\n @JsonPropertyOrder(value = { \"_class\", \"key\", \"description\" })\n-@Schema(subTypes = { OIDCRPTO.class, SAML2SPTO.class }, discriminatorProperty = \"_class\")\n-public abstract class ClientAppTO implements EntityTO {\n+@Schema(subTypes = { OIDCRPTO.class, SAML2SPTO.class, CASSPTO.class }, discriminatorProperty = \"_class\")\n+public abstract class ClientAppTO implements NamedEntityTO {\n \n     private static final long serialVersionUID = 6577639976115661357L;\n \n@@ -104,10 +104,12 @@ public void setKey(final String key) {\n         this.key = key;\n     }\n \n+    @Override\n     public String getName() {\n         return name;\n     }\n \n+    @Override\n     public void setName(final String name) {\n         this.name = name;\n     }"},{"sha":"38b27cdb27c1f26ef670f9a493c000b9ea96ff12","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/OIDCRPTO.java","status":"modified","additions":13,"deletions":6,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCRPTO.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -19,14 +19,15 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.types.OIDCGrantType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n \n @Schema(allOf = { ClientAppTO.class })\n@@ -44,9 +45,9 @@ public class OIDCRPTO extends ClientAppTO {\n \n     private final List<String> redirectUris = new ArrayList<>();\n \n-    private final Set<String> supportedGrantTypes = new HashSet<>();\n+    private final List<OIDCGrantType> supportedGrantTypes = new ArrayList<>();\n \n-    private final Set<String> supportedResponseTypes = new HashSet<>();\n+    private final List<OIDCResponseType> supportedResponseTypes = new ArrayList<>();\n \n     private String logoutUri;\n \n@@ -74,15 +75,21 @@ public void setClientSecret(final String clientSecret) {\n         this.clientSecret = clientSecret;\n     }\n \n+    @JacksonXmlElementWrapper(localName = \"redirectUris\")\n+    @JacksonXmlProperty(localName = \"redirectUri\")\n     public List<String> getRedirectUris() {\n         return redirectUris;\n     }\n \n-    public Set<String> getSupportedGrantTypes() {\n+    @JacksonXmlElementWrapper(localName = \"supportedGrantTypes\")\n+    @JacksonXmlProperty(localName = \"supportedGrantType\")\n+    public List<OIDCGrantType> getSupportedGrantTypes() {\n         return supportedGrantTypes;\n     }\n \n-    public Set<String> getSupportedResponseTypes() {\n+    @JacksonXmlElementWrapper(localName = \"supportedResponseTypes\")\n+    @JacksonXmlProperty(localName = \"supportedResponseType\")\n+    public List<OIDCResponseType> getSupportedResponseTypes() {\n         return supportedResponseTypes;\n     }\n "},{"sha":"109d0c4a2c3740ca25cfd4d7b7da8e69f076fbf7","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/SAML2SPTO.java","status":"modified","additions":31,"deletions":44,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2SPTO.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -19,11 +19,12 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n+import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlElementWrapper;\n import com.fasterxml.jackson.dataformat.xml.annotation.JacksonXmlProperty;\n import io.swagger.v3.oas.annotations.media.Schema;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n-import org.apache.syncope.common.lib.types.XmlSecAlgorithms;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n \n import java.util.ArrayList;\n@@ -56,21 +57,21 @@ public class SAML2SPTO extends ClientAppTO {\n \n     private String nameIdQualifier;\n \n-    private String assertionAudiences;\n+    private final List<String> assertionAudiences = new ArrayList<>();\n \n     private String serviceProviderNameIdQualifier;\n \n-    private List<XmlSecAlgorithms> signingSignatureAlgorithms = new ArrayList<>();\n+    private final List<XmlSecAlgorithm> signingSignatureAlgorithms = new ArrayList<>();\n \n-    private List<XmlSecAlgorithms> signingSignatureReferenceDigestMethods = new ArrayList<>();\n+    private final List<XmlSecAlgorithm> signingSignatureReferenceDigestMethods = new ArrayList<>();\n \n-    private List<XmlSecAlgorithms> encryptionDataAlgorithms = new ArrayList<>();\n+    private final List<XmlSecAlgorithm> encryptionDataAlgorithms = new ArrayList<>();\n \n-    private List<XmlSecAlgorithms> encryptionKeyAlgorithms = new ArrayList<>();\n-    \n-    private List<XmlSecAlgorithms> signingSignatureBlackListedAlgorithms = new ArrayList<>();\n+    private final List<XmlSecAlgorithm> encryptionKeyAlgorithms = new ArrayList<>();\n \n-    private List<XmlSecAlgorithms> encryptionBlackListedAlgorithms = new ArrayList<>();\n+    private final List<XmlSecAlgorithm> signingSignatureBlackListedAlgorithms = new ArrayList<>();\n+\n+    private final List<XmlSecAlgorithm> encryptionBlackListedAlgorithms = new ArrayList<>();\n \n     @JacksonXmlProperty(localName = \"_class\", isAttribute = true)\n     @JsonProperty(\"_class\")\n@@ -168,14 +169,12 @@ public void setNameIdQualifier(final String nameIdQualifier) {\n         this.nameIdQualifier = nameIdQualifier;\n     }\n \n-    public String getAssertionAudiences() {\n+    @JacksonXmlElementWrapper(localName = \"assertionAudiences\")\n+    @JacksonXmlProperty(localName = \"assertionAudience\")\n+    public List<String> getAssertionAudiences() {\n         return assertionAudiences;\n     }\n \n-    public void setAssertionAudiences(final String assertionAudiences) {\n-        this.assertionAudiences = assertionAudiences;\n-    }\n-\n     public String getServiceProviderNameIdQualifier() {\n         return serviceProviderNameIdQualifier;\n     }\n@@ -184,54 +183,42 @@ public void setServiceProviderNameIdQualifier(final String serviceProviderNameId\n         this.serviceProviderNameIdQualifier = serviceProviderNameIdQualifier;\n     }\n \n-    public List<XmlSecAlgorithms> getSigningSignatureAlgorithms() {\n+    @JacksonXmlElementWrapper(localName = \"signingSignatureAlgorithms\")\n+    @JacksonXmlProperty(localName = \"signingSignatureAlgorithm\")\n+    public List<XmlSecAlgorithm> getSigningSignatureAlgorithms() {\n         return signingSignatureAlgorithms;\n     }\n \n-    public List<XmlSecAlgorithms> getSigningSignatureReferenceDigestMethods() {\n+    @JacksonXmlElementWrapper(localName = \"signingSignatureReferenceDigestMethods\")\n+    @JacksonXmlProperty(localName = \"signingSignatureReferenceDigestMethod\")\n+    public List<XmlSecAlgorithm> getSigningSignatureReferenceDigestMethods() {\n         return signingSignatureReferenceDigestMethods;\n     }\n \n-    public List<XmlSecAlgorithms> getEncryptionDataAlgorithms() {\n+    @JacksonXmlElementWrapper(localName = \"encryptionDataAlgorithms\")\n+    @JacksonXmlProperty(localName = \"encryptionDataAlgorithm\")\n+    public List<XmlSecAlgorithm> getEncryptionDataAlgorithms() {\n         return encryptionDataAlgorithms;\n     }\n \n-    public List<XmlSecAlgorithms> getEncryptionKeyAlgorithms() {\n+    @JacksonXmlElementWrapper(localName = \"encryptionKeyAlgorithms\")\n+    @JacksonXmlProperty(localName = \"encryptionKeyAlgorithm\")\n+    public List<XmlSecAlgorithm> getEncryptionKeyAlgorithms() {\n         return encryptionKeyAlgorithms;\n     }\n \n-    public void setSigningSignatureAlgorithms(final List<XmlSecAlgorithms> signingSignatureAlgorithms) {\n-        this.signingSignatureAlgorithms = signingSignatureAlgorithms;\n-    }\n-\n-    public void setSigningSignatureReferenceDigestMethods(final List<XmlSecAlgorithms> algs) {\n-        this.signingSignatureReferenceDigestMethods = algs;\n-    }\n-\n-    public void setEncryptionDataAlgorithms(final List<XmlSecAlgorithms> encryptionDataAlgorithms) {\n-        this.encryptionDataAlgorithms = encryptionDataAlgorithms;\n-    }\n-\n-    public void setEncryptionKeyAlgorithms(final List<XmlSecAlgorithms> encryptionKeyAlgorithms) {\n-        this.encryptionKeyAlgorithms = encryptionKeyAlgorithms;\n-    }\n-\n-    public List<XmlSecAlgorithms> getSigningSignatureBlackListedAlgorithms() {\n+    @JacksonXmlElementWrapper(localName = \"signingSignatureBlackListedAlgorithms\")\n+    @JacksonXmlProperty(localName = \"signingSignatureBlackListedAlgorithm\")\n+    public List<XmlSecAlgorithm> getSigningSignatureBlackListedAlgorithms() {\n         return signingSignatureBlackListedAlgorithms;\n     }\n \n-    public void setSigningSignatureBlackListedAlgorithms(final List<XmlSecAlgorithms> algs) {\n-        this.signingSignatureBlackListedAlgorithms = algs;\n-    }\n-\n-    public List<XmlSecAlgorithms> getEncryptionBlackListedAlgorithms() {\n+    @JacksonXmlElementWrapper(localName = \"encryptionBlackListedAlgorithms\")\n+    @JacksonXmlProperty(localName = \"encryptionBlackListedAlgorithm\")\n+    public List<XmlSecAlgorithm> getEncryptionBlackListedAlgorithms() {\n         return encryptionBlackListedAlgorithms;\n     }\n \n-    public void setEncryptionBlackListedAlgorithms(final List<XmlSecAlgorithms> algs) {\n-        this.encryptionBlackListedAlgorithms = algs;\n-    }\n-\n     @Override\n     public boolean equals(final Object obj) {\n         if (obj == null) {"},{"sha":"2304cbf6efdf68eca74d8ae9c9f59980a59b6cdf","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/OIDCGrantType.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCGrantType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCGrantType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCGrantType.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,24 @@\n+/*\n+ * Copyright 2021 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public enum OIDCGrantType {\n+    authorization_code,\n+    password,\n+    client_credentials,\n+    refresh_token;\n+\n+}"},{"sha":"dbf919b268f47935b4c4b80686dfe3c8625b18f3","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/OIDCResponseType.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCResponseType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCResponseType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCResponseType.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Copyright 2021 The Apache Software Foundation.\n+ *\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+public enum OIDCResponseType {\n+    CODE(\"code\"),\n+    TOKEN(\"token\"),\n+    ID_TOKEN_TOKEN(\"id_token token\");\n+\n+    private final String externalForm;\n+\n+    OIDCResponseType(final String external) {\n+        this.externalForm = external;\n+    }\n+\n+    public String getExternalForm() {\n+        return externalForm;\n+    }\n+}"},{"sha":"3c118528ec205b9f3d5feb8bbed45830acd32635","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/XmlSecAlgorithm.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FXmlSecAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FXmlSecAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FXmlSecAlgorithm.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-public enum XmlSecAlgorithms {\n+public enum XmlSecAlgorithm {\n \n     /**\n      * Triple DES EDE (192 bit key) in CBC mode\n@@ -157,7 +157,7 @@ public enum XmlSecAlgorithms {\n \n     private final String algorithm;\n \n-    XmlSecAlgorithms(final String uri) {\n+    XmlSecAlgorithm(final String uri) {\n         this.algorithm = uri;\n     }\n ","previous_filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/XmlSecAlgorithms.java"},{"sha":"9e04f285388eb1e9451fe0d38f0ff23ade49eead","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/batch/BatchItemRequest.java","status":"modified","additions":11,"deletions":3,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fbatch%2FBatchItemRequest.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -141,9 +141,17 @@ public String getContentType() {\n \n     @Override\n     public int getContentLength() {\n-        return batchItem.getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)\n-                ? Integer.valueOf(batchItem.getHeaders().get(HttpHeaders.CONTENT_LENGTH).get(0).toString())\n-                : 0;\n+        int contentLength = 0;\n+        if (batchItem.getHeaders().containsKey(HttpHeaders.CONTENT_LENGTH)) {\n+            try {\n+                contentLength = Integer.valueOf(\n+                        batchItem.getHeaders().get(HttpHeaders.CONTENT_LENGTH).get(0).toString());\n+            } catch (NumberFormatException e) {\n+                LOG.error(\"Invalid value found for {}: {}\",\n+                        HttpHeaders.CONTENT_LENGTH, batchItem.getHeaders().get(HttpHeaders.CONTENT_LENGTH), e);\n+            }\n+        }\n+        return contentLength;\n     }\n \n     @Override"},{"sha":"74b105b1d1d9571abcce85393ee120fa51bc8bea","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/OIDCRP.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n-import java.util.List;\n import java.util.Set;\n+import org.apache.syncope.common.lib.types.OIDCGrantType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n \n public interface OIDCRP extends ClientApp {\n@@ -32,11 +33,11 @@ public interface OIDCRP extends ClientApp {\n \n     String getClientSecret();\n \n-    List<String> getRedirectUris();\n+    Set<String> getRedirectUris();\n \n-    Set<String> getSupportedGrantTypes();\n+    Set<OIDCGrantType> getSupportedGrantTypes();\n \n-    Set<String> getSupportedResponseTypes();\n+    Set<OIDCResponseType> getSupportedResponseTypes();\n \n     boolean isSignIdToken();\n "},{"sha":"d3f2d42b009f730cc7b5e0cf33d1d4005e16fdb0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SP.java","status":"modified","additions":10,"deletions":24,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.auth;\n \n-import org.apache.syncope.common.lib.types.XmlSecAlgorithms;\n-import org.apache.syncope.common.lib.types.SAML2SPNameId;\n-\n import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n \n public interface SAML2SP extends ClientApp {\n \n@@ -69,35 +69,21 @@ public interface SAML2SP extends ClientApp {\n \n     String getNameIdQualifier();\n \n-    void setAssertionAudiences(String location);\n-\n-    String getAssertionAudiences();\n+    Set<String> getAssertionAudiences();\n \n     void setServiceProviderNameIdQualifier(String location);\n \n     String getServiceProviderNameIdQualifier();\n \n-    List<XmlSecAlgorithms> getSigningSignatureAlgorithms();\n-\n-    List<XmlSecAlgorithms> getSigningSignatureReferenceDigestMethods();\n-\n-    List<XmlSecAlgorithms> getEncryptionDataAlgorithms();\n-\n-    List<XmlSecAlgorithms> getEncryptionKeyAlgorithms();\n-\n-    void setSigningSignatureAlgorithms(List<XmlSecAlgorithms> algorithms);\n-\n-    void setSigningSignatureReferenceDigestMethods(List<XmlSecAlgorithms> methods);\n-\n-    void setEncryptionDataAlgorithms(List<XmlSecAlgorithms> algorithms);\n+    List<XmlSecAlgorithm> getSigningSignatureAlgorithms();\n \n-    void setEncryptionKeyAlgorithms(List<XmlSecAlgorithms> algorithms);\n+    List<XmlSecAlgorithm> getSigningSignatureReferenceDigestMethods();\n \n-    List<XmlSecAlgorithms> getSigningSignatureBlackListedAlgorithms();\n+    List<XmlSecAlgorithm> getEncryptionDataAlgorithms();\n \n-    List<XmlSecAlgorithms> getEncryptionBlackListedAlgorithms();\n+    List<XmlSecAlgorithm> getEncryptionKeyAlgorithms();\n \n-    void setSigningSignatureBlackListedAlgorithms(List<XmlSecAlgorithms> algorithms);\n+    List<XmlSecAlgorithm> getSigningSignatureBlackListedAlgorithms();\n \n-    void setEncryptionBlackListedAlgorithms(List<XmlSecAlgorithms> algorithms);\n+    List<XmlSecAlgorithm> getEncryptionBlackListedAlgorithms();\n }"},{"sha":"fdc4f98e31d6446d10d5f5fbc7096fa08de704ca","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCRP.java","status":"modified","additions":12,"deletions":10,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -25,12 +25,12 @@\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n import javax.persistence.Table;\n-import java.util.ArrayList;\n import java.util.HashSet;\n-import java.util.List;\n import java.util.Set;\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n+import org.apache.syncope.common.lib.types.OIDCGrantType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n \n@@ -53,30 +53,32 @@ public class JPAOIDCRP extends AbstractClientApp implements OIDCRP {\n     private OIDCSubjectType subjectType;\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column\n+    @Column(name = \"redirectUri\")\n     @CollectionTable(name = \"OIDCRP_RedirectUris\",\n             joinColumns =\n             @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n-    private List<String> redirectUris = new ArrayList<>();\n+    private Set<String> redirectUris = new HashSet<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column\n+    @Enumerated(EnumType.STRING)\n+    @Column(name = \"supportedGrantType\")\n     @CollectionTable(name = \"OIDCRP_SupportedGrantTypes\",\n             joinColumns =\n             @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n-    private Set<String> supportedGrantTypes = new HashSet<>();\n+    private Set<OIDCGrantType> supportedGrantTypes = new HashSet<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n+    @Enumerated(EnumType.STRING)\n     @Column(name = \"supportedResponseType\")\n     @CollectionTable(name = \"OIDCRP_SupportedResponseTypes\",\n             joinColumns =\n             @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n-    private Set<String> supportedResponseTypes = new HashSet<>();\n+    private Set<OIDCResponseType> supportedResponseTypes = new HashSet<>();\n \n     private String logoutUri;\n \n     @Override\n-    public List<String> getRedirectUris() {\n+    public Set<String> getRedirectUris() {\n         return redirectUris;\n     }\n \n@@ -121,12 +123,12 @@ public void setSubjectType(final OIDCSubjectType subjectType) {\n     }\n \n     @Override\n-    public Set<String> getSupportedGrantTypes() {\n+    public Set<OIDCGrantType> getSupportedGrantTypes() {\n         return supportedGrantTypes;\n     }\n \n     @Override\n-    public Set<String> getSupportedResponseTypes() {\n+    public Set<OIDCResponseType> getSupportedResponseTypes() {\n         return supportedResponseTypes;\n     }\n "},{"sha":"8b02ab69975e60e583918ed302a8bbc2bcced5cb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SP.java","status":"modified","additions":42,"deletions":71,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity.auth;\n \n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n@@ -27,10 +31,7 @@\n import javax.persistence.Table;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n-import org.apache.syncope.common.lib.types.XmlSecAlgorithms;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n \n @Entity\n @Table(name = JPASAML2SP.TABLE)\n@@ -65,52 +66,57 @@ public class JPASAML2SP extends AbstractClientApp implements SAML2SP {\n \n     private String nameIdQualifier;\n \n-    private String assertionAudiences;\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"assertionAudience\")\n+    @CollectionTable(name = \"SAML2SP_AssertionAudiences\",\n+            joinColumns =\n+            @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private Set<String> assertionAudiences = new HashSet<>();\n \n     @Column(name = \"spNameIdQualifier\")\n     private String serviceProviderNameIdQualifier;\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column\n+    @Column(name = \"signingSignatureAlgorithm\")\n     @CollectionTable(name = \"SAML2SP_SigningSignatureAlgs\",\n-        joinColumns =\n-        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n-    private List<XmlSecAlgorithms> signingSignatureAlgorithms = new ArrayList<>();\n+            joinColumns =\n+            @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithm> signingSignatureAlgorithms = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column\n+    @Column(name = \"signingSignatureReferenceDigestMethod\")\n     @CollectionTable(name = \"SAML2SP_SigningSignatureRefDigestAlgs\",\n-        joinColumns =\n-        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n-    private List<XmlSecAlgorithms> signingSignatureReferenceDigestMethods = new ArrayList<>();\n+            joinColumns =\n+            @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithm> signingSignatureReferenceDigestMethods = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column\n+    @Column(name = \"encryptionDataAlgorithm\")\n     @CollectionTable(name = \"SAML2SP_EncryptionDataAlgs\",\n-        joinColumns =\n-        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n-    private List<XmlSecAlgorithms> encryptionDataAlgorithms = new ArrayList<>();\n+            joinColumns =\n+            @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithm> encryptionDataAlgorithms = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column\n+    @Column(name = \"encryptionKeyAlgorithm\")\n     @CollectionTable(name = \"SAML2SP_EncryptionKeyAlgs\",\n-        joinColumns =\n-        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n-    private List<XmlSecAlgorithms> encryptionKeyAlgorithms = new ArrayList<>();\n+            joinColumns =\n+            @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithm> encryptionKeyAlgorithms = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column\n+    @Column(name = \"signingSignatureBlackListedAlgorithm\")\n     @CollectionTable(name = \"SAML2SP_BlacklistedSigningAlgs\",\n-        joinColumns =\n-        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n-    private List<XmlSecAlgorithms> signingSignatureBlackListedAlgorithms = new ArrayList<>();\n+            joinColumns =\n+            @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithm> signingSignatureBlackListedAlgorithms = new ArrayList<>();\n \n     @ElementCollection(fetch = FetchType.EAGER)\n-    @Column\n+    @Column(name = \"encryptionBlackListedAlgorithm\")\n     @CollectionTable(name = \"SAML2SP_BlacklistedEncryptionAlgs\",\n-        joinColumns =\n-        @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n-    private List<XmlSecAlgorithms> encryptionBlackListedAlgorithms = new ArrayList<>();\n+            joinColumns =\n+            @JoinColumn(name = \"client_app_id\", referencedColumnName = \"id\"))\n+    private List<XmlSecAlgorithm> encryptionBlackListedAlgorithms = new ArrayList<>();\n \n     @Override\n     public String getEntityId() {\n@@ -223,15 +229,10 @@ public void setNameIdQualifier(final String nameIdQualifier) {\n     }\n \n     @Override\n-    public String getAssertionAudiences() {\n+    public Set<String> getAssertionAudiences() {\n         return assertionAudiences;\n     }\n \n-    @Override\n-    public void setAssertionAudiences(final String assertionAudiences) {\n-        this.assertionAudiences = assertionAudiences;\n-    }\n-\n     @Override\n     public String getServiceProviderNameIdQualifier() {\n         return serviceProviderNameIdQualifier;\n@@ -243,62 +244,32 @@ public void setServiceProviderNameIdQualifier(final String serviceProviderNameId\n     }\n \n     @Override\n-    public List<XmlSecAlgorithms> getSigningSignatureAlgorithms() {\n+    public List<XmlSecAlgorithm> getSigningSignatureAlgorithms() {\n         return signingSignatureAlgorithms;\n     }\n \n     @Override\n-    public void setSigningSignatureAlgorithms(final List<XmlSecAlgorithms> signingSignatureAlgorithms) {\n-        this.signingSignatureAlgorithms = signingSignatureAlgorithms;\n-    }\n-\n-    @Override\n-    public List<XmlSecAlgorithms> getSigningSignatureReferenceDigestMethods() {\n+    public List<XmlSecAlgorithm> getSigningSignatureReferenceDigestMethods() {\n         return signingSignatureReferenceDigestMethods;\n     }\n \n     @Override\n-    public void setSigningSignatureReferenceDigestMethods(final List<XmlSecAlgorithms> algorithms) {\n-        this.signingSignatureReferenceDigestMethods = algorithms;\n-    }\n-\n-    @Override\n-    public List<XmlSecAlgorithms> getEncryptionDataAlgorithms() {\n+    public List<XmlSecAlgorithm> getEncryptionDataAlgorithms() {\n         return encryptionDataAlgorithms;\n     }\n \n     @Override\n-    public void setEncryptionDataAlgorithms(final List<XmlSecAlgorithms> algorithms) {\n-        this.encryptionDataAlgorithms = algorithms;\n-    }\n-\n-    @Override\n-    public List<XmlSecAlgorithms> getEncryptionKeyAlgorithms() {\n+    public List<XmlSecAlgorithm> getEncryptionKeyAlgorithms() {\n         return encryptionKeyAlgorithms;\n     }\n \n     @Override\n-    public void setEncryptionKeyAlgorithms(final List<XmlSecAlgorithms> algorithms) {\n-        this.encryptionKeyAlgorithms = algorithms;\n-    }\n-\n-    @Override\n-    public List<XmlSecAlgorithms> getSigningSignatureBlackListedAlgorithms() {\n+    public List<XmlSecAlgorithm> getSigningSignatureBlackListedAlgorithms() {\n         return signingSignatureBlackListedAlgorithms;\n     }\n \n     @Override\n-    public void setSigningSignatureBlackListedAlgorithms(final List<XmlSecAlgorithms> algorithms) {\n-        this.signingSignatureBlackListedAlgorithms = algorithms;\n-    }\n-\n-    @Override\n-    public List<XmlSecAlgorithms> getEncryptionBlackListedAlgorithms() {\n+    public List<XmlSecAlgorithm> getEncryptionBlackListedAlgorithms() {\n         return encryptionBlackListedAlgorithms;\n     }\n-\n-    @Override\n-    public void setEncryptionBlackListedAlgorithms(final List<XmlSecAlgorithms> algorithms) {\n-        this.encryptionBlackListedAlgorithms = algorithms;\n-    }\n }"},{"sha":"bd0c77ffa75bc762c7305bcb37036d170b608afe","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/OIDCRPTest.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -23,6 +23,8 @@\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n import java.util.UUID;\n+import org.apache.syncope.common.lib.types.OIDCGrantType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n@@ -49,8 +51,8 @@ public void find() {\n         rp.setClientId(\"clientid\");\n         rp.setClientSecret(\"secret\");\n         rp.setSubjectType(OIDCSubjectType.PUBLIC);\n-        rp.getSupportedGrantTypes().add(\"something\");\n-        rp.getSupportedResponseTypes().add(\"something\");\n+        rp.getSupportedGrantTypes().add(OIDCGrantType.password);\n+        rp.getSupportedResponseTypes().add(OIDCResponseType.CODE);\n \n         AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n         rp.setAccessPolicy(accessPolicy);\n@@ -72,7 +74,7 @@ public void find() {\n \n         rp = oidcrpDAO.findByName(\"OIDC\");\n         assertNotNull(rp);\n-        \n+\n         rp = oidcrpDAO.findByClientAppId(rp.getClientAppId());\n         assertNotNull(rp);\n "},{"sha":"e19798e9572f7f3d36c0223a5c1966af0f1104a1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPTest.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -18,7 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.jpa.inner;\n \n-import org.apache.syncope.common.lib.types.XmlSecAlgorithms;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.UUID;\n+import org.apache.syncope.common.lib.types.XmlSecAlgorithm;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n@@ -28,14 +34,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n-import java.util.List;\n-import java.util.UUID;\n-\n-import static org.junit.jupiter.api.Assertions.assertEquals;\n-import static org.junit.jupiter.api.Assertions.assertFalse;\n-import static org.junit.jupiter.api.Assertions.assertNotNull;\n-import static org.junit.jupiter.api.Assertions.assertNull;\n-\n @Transactional(\"Master\")\n public class SAML2SPTest extends AbstractClientAppTest {\n \n@@ -54,10 +52,11 @@ public void find() {\n         sp.setRequiredNameIdFormat(SAML2SPNameId.EMAIL_ADDRESS);\n         sp.setEncryptionOptional(true);\n         sp.setEncryptAssertions(true);\n-        sp.setEncryptionDataAlgorithms(List.of(XmlSecAlgorithms.AES_128_GCM));\n-        sp.setEncryptionKeyAlgorithms(List.of(XmlSecAlgorithms.RSA_OAEP_11));\n-        sp.setSigningSignatureReferenceDigestMethods(List.of(XmlSecAlgorithms.SHA1));\n-        sp.setSigningSignatureAlgorithms(List.of(XmlSecAlgorithms.SHA256, XmlSecAlgorithms.SHA512));\n+        sp.getEncryptionDataAlgorithms().add(XmlSecAlgorithm.AES_128_GCM);\n+        sp.getEncryptionKeyAlgorithms().add(XmlSecAlgorithm.RSA_OAEP_11);\n+        sp.getSigningSignatureReferenceDigestMethods().add(XmlSecAlgorithm.SHA1);\n+        sp.getSigningSignatureAlgorithms().add(XmlSecAlgorithm.SHA256);\n+        sp.getSigningSignatureAlgorithms().add(XmlSecAlgorithm.SHA512);\n \n         AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n         sp.setAccessPolicy(accessPolicy);"},{"sha":"4b62c0e6afc86367c6f3cee40a5d421587ae4635","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"modified","additions":45,"deletions":23,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -79,10 +79,10 @@ public <T extends ClientApp> void update(final T clientApp, final ClientAppTO cl\n     public <T extends ClientAppTO> T getClientAppTO(final ClientApp clientApp) {\n         if (clientApp instanceof SAML2SP) {\n             return (T) getSAMLClientAppTO((SAML2SP) clientApp);\n-        } \n+        }\n         if (clientApp instanceof OIDCRP) {\n             return (T) getOIDCClientAppTO((OIDCRP) clientApp);\n-        } \n+        }\n         if (clientApp instanceof CASSP) {\n             return (T) getCASClientAppTO((CASSP) clientApp);\n         }\n@@ -115,16 +115,29 @@ private void doUpdate(final SAML2SP clientApp, final SAML2SPTO clientAppTO) {\n         clientApp.setRequiredNameIdFormat(clientAppTO.getRequiredNameIdFormat());\n         clientApp.setSkewAllowance(clientAppTO.getSkewAllowance());\n         clientApp.setNameIdQualifier(clientAppTO.getNameIdQualifier());\n-        clientApp.setAssertionAudiences(clientAppTO.getAssertionAudiences());\n+        clientApp.getAssertionAudiences().clear();\n+        clientApp.getAssertionAudiences().addAll(clientAppTO.getAssertionAudiences());\n         clientApp.setServiceProviderNameIdQualifier(clientAppTO.getServiceProviderNameIdQualifier());\n \n-        clientApp.setSigningSignatureAlgorithms(clientAppTO.getSigningSignatureAlgorithms());\n-        clientApp.setSigningSignatureReferenceDigestMethods(clientAppTO.getSigningSignatureReferenceDigestMethods());\n-        clientApp.setEncryptionKeyAlgorithms(clientAppTO.getEncryptionKeyAlgorithms());\n-        clientApp.setEncryptionDataAlgorithms(clientAppTO.getEncryptionDataAlgorithms());\n-\n-        clientApp.setSigningSignatureBlackListedAlgorithms(clientAppTO.getSigningSignatureBlackListedAlgorithms());\n-        clientApp.setEncryptionBlackListedAlgorithms(clientAppTO.getEncryptionBlackListedAlgorithms());\n+        clientApp.getSigningSignatureAlgorithms().clear();\n+        clientApp.getSigningSignatureAlgorithms().addAll(\n+                clientAppTO.getSigningSignatureAlgorithms());\n+        clientApp.getSigningSignatureReferenceDigestMethods().clear();\n+        clientApp.getSigningSignatureReferenceDigestMethods().addAll(\n+                clientAppTO.getSigningSignatureReferenceDigestMethods());\n+        clientApp.getEncryptionKeyAlgorithms().clear();\n+        clientApp.getEncryptionKeyAlgorithms().addAll(\n+                clientAppTO.getEncryptionKeyAlgorithms());\n+        clientApp.getEncryptionDataAlgorithms().clear();\n+        clientApp.getEncryptionDataAlgorithms().addAll(\n+                clientAppTO.getEncryptionDataAlgorithms());\n+\n+        clientApp.getSigningSignatureBlackListedAlgorithms().clear();\n+        clientApp.getSigningSignatureBlackListedAlgorithms().\n+                addAll(clientAppTO.getSigningSignatureBlackListedAlgorithms());\n+        clientApp.getEncryptionBlackListedAlgorithms().clear();\n+        clientApp.getEncryptionBlackListedAlgorithms().addAll(\n+                clientAppTO.getEncryptionBlackListedAlgorithms());\n     }\n \n     private static SAML2SPTO getSAMLClientAppTO(final SAML2SP clientApp) {\n@@ -142,16 +155,22 @@ private static SAML2SPTO getSAMLClientAppTO(final SAML2SP clientApp) {\n         clientAppTO.setRequiredNameIdFormat(clientApp.getRequiredNameIdFormat());\n         clientAppTO.setSkewAllowance(clientApp.getSkewAllowance());\n         clientAppTO.setNameIdQualifier(clientApp.getNameIdQualifier());\n-        clientAppTO.setAssertionAudiences(clientApp.getAssertionAudiences());\n+        clientAppTO.getAssertionAudiences().addAll(clientApp.getAssertionAudiences());\n         clientAppTO.setServiceProviderNameIdQualifier(clientApp.getServiceProviderNameIdQualifier());\n \n-        clientAppTO.setSigningSignatureAlgorithms(clientApp.getSigningSignatureAlgorithms());\n-        clientAppTO.setSigningSignatureReferenceDigestMethods(clientApp.getSigningSignatureReferenceDigestMethods());\n-        clientAppTO.setEncryptionKeyAlgorithms(clientApp.getEncryptionKeyAlgorithms());\n-        clientAppTO.setEncryptionDataAlgorithms(clientApp.getEncryptionDataAlgorithms());\n+        clientAppTO.getSigningSignatureAlgorithms().addAll(\n+                clientApp.getSigningSignatureAlgorithms());\n+        clientAppTO.getSigningSignatureReferenceDigestMethods().addAll(\n+                clientApp.getSigningSignatureReferenceDigestMethods());\n+        clientAppTO.getEncryptionKeyAlgorithms().addAll(\n+                clientApp.getEncryptionKeyAlgorithms());\n+        clientAppTO.getEncryptionDataAlgorithms().addAll(\n+                clientApp.getEncryptionDataAlgorithms());\n \n-        clientAppTO.setSigningSignatureBlackListedAlgorithms(clientApp.getSigningSignatureBlackListedAlgorithms());\n-        clientAppTO.setEncryptionBlackListedAlgorithms(clientApp.getEncryptionBlackListedAlgorithms());\n+        clientAppTO.getSigningSignatureBlackListedAlgorithms().addAll(\n+                clientApp.getSigningSignatureBlackListedAlgorithms());\n+        clientAppTO.getEncryptionBlackListedAlgorithms().addAll(\n+                clientApp.getEncryptionBlackListedAlgorithms());\n \n         return clientAppTO;\n     }\n@@ -169,8 +188,11 @@ private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n         clientApp.setClientId(clientAppTO.getClientId());\n         clientApp.setSignIdToken(clientAppTO.isSignIdToken());\n         clientApp.setSubjectType(clientAppTO.getSubjectType());\n+        clientApp.getRedirectUris().clear();\n         clientApp.getRedirectUris().addAll(clientAppTO.getRedirectUris());\n+        clientApp.getSupportedGrantTypes().clear();\n         clientApp.getSupportedGrantTypes().addAll(clientAppTO.getSupportedGrantTypes());\n+        clientApp.getSupportedResponseTypes().clear();\n         clientApp.getSupportedResponseTypes().addAll(clientAppTO.getSupportedResponseTypes());\n \n         clientApp.setLogoutUri(clientAppTO.getLogoutUri());\n@@ -213,11 +235,11 @@ private static void updateCommonClientAppTO(final ClientApp clientApp, final Cli\n         clientAppTO.setTheme(clientApp.getTheme());\n \n         clientAppTO.setAuthPolicy(clientApp.getAuthPolicy() == null\n-            ? null : clientApp.getAuthPolicy().getKey());\n+                ? null : clientApp.getAuthPolicy().getKey());\n         clientAppTO.setAccessPolicy(clientApp.getAccessPolicy() == null\n-            ? null : clientApp.getAccessPolicy().getKey());\n+                ? null : clientApp.getAccessPolicy().getKey());\n         clientAppTO.setAttrReleasePolicy(clientApp.getAttrReleasePolicy() == null\n-            ? null : clientApp.getAttrReleasePolicy().getKey());\n+                ? null : clientApp.getAttrReleasePolicy().getKey());\n     }\n \n     private void doUpdateCommon(final ClientApp clientApp, final ClientAppTO clientAppTO) {\n@@ -235,7 +257,7 @@ private void doUpdateCommon(final ClientApp clientApp, final ClientAppTO clientA\n             } else {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n                 sce.getElements().add(\"Expected \" + AuthPolicy.class.getSimpleName()\n-                    + \", found \" + policy.getClass().getSimpleName());\n+                        + \", found \" + policy.getClass().getSimpleName());\n                 throw sce;\n             }\n         }\n@@ -249,7 +271,7 @@ private void doUpdateCommon(final ClientApp clientApp, final ClientAppTO clientA\n             } else {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n                 sce.getElements().add(\"Expected \" + AccessPolicy.class.getSimpleName()\n-                    + \", found \" + policy.getClass().getSimpleName());\n+                        + \", found \" + policy.getClass().getSimpleName());\n                 throw sce;\n             }\n         }\n@@ -263,7 +285,7 @@ private void doUpdateCommon(final ClientApp clientApp, final ClientAppTO clientA\n             } else {\n                 SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n                 sce.getElements().add(\"Expected \" + AttrReleasePolicy.class.getSimpleName()\n-                    + \", found \" + policy.getClass().getSimpleName());\n+                        + \", found \" + policy.getClass().getSimpleName());\n                 throw sce;\n             }\n         }"},{"sha":"fae7b83f1a03cee0f0c4d4fe2b85e56f018f4f90","filename":"ext/flowable/client-common-ui/src/main/java/org/apache/syncope/ext/client/common/ui/panels/UserRequestFormPanel.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fclient%2Fcommon%2Fui%2Fpanels%2FUserRequestFormPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -36,7 +36,6 @@\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.common.lib.to.UserRequestFormPropertyValue;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n-import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -55,12 +54,11 @@ public abstract class UserRequestFormPanel extends Panel {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(UserRequestFormPanel.class);\n \n-    public UserRequestFormPanel(final String id, final PageReference pageRef, final UserRequestForm form) {\n-        this(id, pageRef, form, true);\n+    public UserRequestFormPanel(final String id, final UserRequestForm form) {\n+        this(id, form, true);\n     }\n \n-    public UserRequestFormPanel(final String id, final PageReference pageRef, final UserRequestForm form,\n-            final boolean showDetails) {\n+    public UserRequestFormPanel(final String id, final UserRequestForm form, final boolean showDetails) {\n         super(id);\n \n         IModel<List<UserRequestFormProperty>> formProps = new LoadableDetachableModel<List<UserRequestFormProperty>>() {"},{"sha":"e64a6e406d851f31a460620d211b0bdd9a06e220","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/UserRequestFormModal.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserRequestFormModal.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -20,9 +20,9 @@\n \n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.ui.commons.Constants;\n-import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.console.rest.UserRequestRestClient;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n import org.apache.syncope.client.ui.commons.panels.SubmitableModalPanel;\n import org.apache.syncope.client.ui.commons.panels.WizardModalPanel;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n@@ -48,7 +48,7 @@ public UserRequestFormModal(final BaseModal<?> modal, final PageReference pageRe\n         this.pageRef = pageRef;\n \n         MultilevelPanel mlp = new MultilevelPanel(\"userRequestForm\");\n-        mlp.setFirstLevel(new UserRequestFormPanel(MultilevelPanel.FIRST_LEVEL_ID, pageRef, formTO) {\n+        mlp.setFirstLevel(new UserRequestFormPanel(MultilevelPanel.FIRST_LEVEL_ID, formTO) {\n \n             private static final long serialVersionUID = -2195387360323687302L;\n \n@@ -70,7 +70,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n \n     @Override\n     public void onError(final AjaxRequestTarget target) {\n-        ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+        ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n     }\n \n     @Override"},{"sha":"f7c35947489ad01f8c386b116ee5043909d98c5d","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/Flowable.java","status":"modified","additions":32,"deletions":36,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -174,41 +174,38 @@ public UserRequestDetails(final String id, final UserRequest userRequest) {\n                             .add(new Label(\"executionId\", userRequest.getExecutionId()))\n                             .add(new Label(\"startTime\", userRequest.getStartTime()))\n                     : new Fragment(\"fragContainer\", \"formProperties\", UserRequestDetails.this)\n-                            .add(new Form<>(\"userRequestWrapForm\")\n-                                    .add(new UserRequestFormPanel(\n-                                            \"userRequestFormPanel\",\n-                                            getPageReference(),\n-                                            formTO,\n-                                            false) {\n-\n-                                        private static final long serialVersionUID = 3617895525072546591L;\n-\n-                                        @Override\n-                                        protected void viewDetails(final AjaxRequestTarget target) {\n-                                            // do nothing\n-                                        }\n-                                    })\n-                                    .add(new AjaxButton(\"submit\") {\n-\n-                                        private static final long serialVersionUID = 4284361595033427185L;\n-\n-                                        @Override\n-                                        protected void onSubmit(final AjaxRequestTarget target) {\n-                                            try {\n-                                                UserRequestRestClient.claimForm(formTO.getTaskId());\n-                                                UserRequestRestClient.submitForm(formTO);\n-                                                target.add(container);\n-                                            } catch (SyncopeClientException sce) {\n-                                                LOG.error(\"Unable to submit user request form for BPMN process [{}]\",\n-                                                        formTO.getBpmnProcess(), sce);\n-                                                SyncopeEnduserSession.get().error(StringUtils.isBlank(sce.getMessage())\n-                                                        ? sce.getClass().getName()\n-                                                        : sce.getMessage());\n-                                                notificationPanel.refresh(target);\n-                                            }\n-                                        }\n-\n-                                    }.setOutputMarkupId(true))));\n+                            .add(new Form<>(\"userRequestWrapForm\").add(new UserRequestFormPanel(\n+                                    \"userRequestFormPanel\",\n+                                    formTO,\n+                                    false) {\n+\n+                                private static final long serialVersionUID = 3617895525072546591L;\n+\n+                                @Override\n+                                protected void viewDetails(final AjaxRequestTarget target) {\n+                                    // do nothing\n+                                }\n+                            }).add(new AjaxButton(\"submit\") {\n+\n+                                private static final long serialVersionUID = 4284361595033427185L;\n+\n+                                @Override\n+                                protected void onSubmit(final AjaxRequestTarget target) {\n+                                    try {\n+                                        UserRequestRestClient.claimForm(formTO.getTaskId());\n+                                        UserRequestRestClient.submitForm(formTO);\n+                                        target.add(container);\n+                                    } catch (SyncopeClientException sce) {\n+                                        LOG.error(\"Unable to submit user request form for BPMN process [{}]\",\n+                                                formTO.getBpmnProcess(), sce);\n+                                        SyncopeEnduserSession.get().error(StringUtils.isBlank(sce.getMessage())\n+                                                ? sce.getClass().getName()\n+                                                : sce.getMessage());\n+                                        notificationPanel.refresh(target);\n+                                    }\n+                                }\n+\n+                            }.setOutputMarkupId(true))));\n \n             add(new AjaxLink<Void>(\"delete\") {\n \n@@ -256,5 +253,4 @@ public IModel<UserRequest> model(final UserRequest ur) {\n             return Model.of(ur);\n         }\n     }\n-\n }"},{"sha":"1124ea3843d48c549be8776bea3206ec5ce447f8","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/AbstractSAML2SP4UIResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAbstractSAML2SP4UIResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAbstractSAML2SP4UIResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FAbstractSAML2SP4UIResource.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -46,7 +46,7 @@ protected String spEntityID(final Attributes attributes) {\n         return StringUtils.substringBefore(request.getRequestURL().toString(), SAML2SP4UIConstants.URL_CONTEXT);\n     }\n \n-    protected ResourceResponse send(final Attributes attributes, final SAML2Request request) {\n+    protected ResourceResponse send(final SAML2Request request) {\n         Session.get().setAttribute(SAML2SP4UIConstants.SAML2SP4UI_IDP_ENTITY_ID, request.getIdpEntityID());\n \n         ResourceResponse response = new ResourceResponse();"},{"sha":"0bd1b6f344c5a59bfba842e6eae2f660b443fb4b","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/LoginResource.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLoginResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLoginResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLoginResource.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -21,7 +21,6 @@\n import org.apache.syncope.client.ui.commons.BaseSession;\n import org.apache.syncope.client.ui.commons.SAML2SP4UIConstants;\n import org.apache.syncope.client.ui.commons.annotations.Resource;\n-import org.apache.syncope.common.lib.saml2.SAML2Request;\n import org.apache.syncope.common.rest.api.service.SAML2SP4UIService;\n import org.apache.wicket.Session;\n \n@@ -38,8 +37,6 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n                 getParameterValue(SAML2SP4UIConstants.PARAM_IDP).toString();\n \n         SAML2SP4UIService service = BaseSession.class.cast(Session.get()).getAnonymousService(SAML2SP4UIService.class);\n-        SAML2Request loginRequest =\n-                service.createLoginRequest(spEntityID(attributes), SAML2SP4UIConstants.URL_CONTEXT, idp);\n-        return send(attributes, loginRequest);\n+        return send(service.createLoginRequest(spEntityID(attributes), SAML2SP4UIConstants.URL_CONTEXT, idp));\n     }\n }"},{"sha":"21680e59fff96a40c7a8d9e2124fb8a19220156d","filename":"ext/saml2sp4ui/client-common-ui/src/main/java/org/apache/syncope/client/ui/commons/resources/saml2sp4ui/LogoutResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLogoutResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLogoutResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fresources%2Fsaml2sp4ui%2FLogoutResource.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -70,7 +70,7 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n \n                     Session.get().invalidate();\n \n-                    return send(attributes, logoutRequest);\n+                    return send(logoutRequest);\n                 } else {\n                     // process REDIRECT binding logout response\n                     return doLogout(buildResponse(attributes, samlResponse, relayState));"},{"sha":"4f0c2ee2c00a899594f8339145b1c6a01995ba4f","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SP4UILoader.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SP4UILoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SP4UILoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SP4UILoader.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -32,6 +32,8 @@\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.pac4j.saml.config.SAML2Configuration;\n import org.pac4j.saml.metadata.keystore.BaseSAML2KeystoreGenerator;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.FileUrlResource;\n import org.springframework.core.io.support.ResourcePatternResolver;\n@@ -40,6 +42,8 @@\n @Component\n public class SAML2SP4UILoader implements SyncopeCoreLoader {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2SP4UILoader.class);\n+\n     private static final String SAML2SP4UI_LOGIC_PROPERTIES = \"saml2sp4ui-logic.properties\";\n \n     @Autowired\n@@ -91,7 +95,11 @@ public InputStream retrieve() throws Exception {\n         cfg.setAuthnRequestSigned(true);\n         cfg.setSpLogoutRequestSigned(true);\n \n-        cfg.setAcceptedSkew(Integer.valueOf(props.getProperty(\"saml2.sp4ui.skew\")));\n+        try {\n+            cfg.setAcceptedSkew(Integer.valueOf(props.getProperty(\"saml2.sp4ui.skew\")));\n+        } catch (NumberFormatException e) {\n+            LOG.error(\"Invalid value provided for 'saml2.sp4ui.skew': {}\", props.getProperty(\"saml2.sp4ui.skew\"), e);\n+        }\n \n         cfg.setLogoutHandler(new NoOpLogoutHandler());\n "},{"sha":"7bd0e5b92712fb0986e6f94f0d83dd2c14e2801f","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfGeneralPanel.java","status":"modified","additions":22,"deletions":21,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfGeneralPanel.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -55,7 +55,6 @@ public Date getObject() {\n                     public void setObject(final Date object) {\n                         scimGeneralConf.setCreationDate(object);\n                     }\n-\n                 }, FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n         creationDatePanel.setEnabled(false);\n \n@@ -73,7 +72,6 @@ public Date getObject() {\n                     public void setObject(final Date object) {\n                         scimGeneralConf.setLastChangeDate(object);\n                     }\n-\n                 }, FastDateFormat.getInstance(SyncopeConstants.DEFAULT_DATE_PATTERN));\n         lastChangeDatePanel.setEnabled(false);\n \n@@ -90,9 +88,12 @@ public String getObject() {\n \n                     @Override\n                     public void setObject(final String object) {\n-                        scimGeneralConf.setBulkMaxOperations(Integer.parseInt(object));\n+                        try {\n+                            scimGeneralConf.setBulkMaxOperations(Integer.parseInt(object));\n+                        } catch (NumberFormatException e) {\n+                            LOG.error(\"Invalid value provided for 'bulkMaxOperations': {}\", object, e);\n+                        }\n                     }\n-\n                 });\n         bulkMaxOperationsPanel.setChoices(plainSchemaNames);\n \n@@ -109,9 +110,12 @@ public String getObject() {\n \n                     @Override\n                     public void setObject(final String object) {\n-                        scimGeneralConf.setBulkMaxPayloadSize(Integer.parseInt(object));\n+                        try {\n+                            scimGeneralConf.setBulkMaxPayloadSize(Integer.parseInt(object));\n+                        } catch (NumberFormatException e) {\n+                            LOG.error(\"Invalid value provided for 'bulkMaxPayloadSize': {}\", object, e);\n+                        }\n                     }\n-\n                 });\n         bulkMaxMaxPayloadSizePanel.setChoices(plainSchemaNames);\n \n@@ -137,23 +141,21 @@ public void setObject(final String object) {\n                 });\n         filterMaxResultsPanel.setChoices(plainSchemaNames);\n \n-        AjaxTextFieldPanel eTagValuePanel =\n-                new AjaxTextFieldPanel(\"eTagValue\", \"eTagValue\",\n-                        new PropertyModel<String>(\"eTagValue\", \"eTagValue\") {\n+        AjaxTextFieldPanel eTagValuePanel = new AjaxTextFieldPanel(\"eTagValue\", \"eTagValue\",\n+                new PropertyModel<String>(\"eTagValue\", \"eTagValue\") {\n \n-                    private static final long serialVersionUID = -6427731218492117883L;\n+            private static final long serialVersionUID = -6427731218492117883L;\n \n-                    @Override\n-                    public String getObject() {\n-                        return scimGeneralConf.getETagValue();\n-                    }\n-\n-                    @Override\n-                    public void setObject(final String object) {\n-\n-                    }\n+            @Override\n+            public String getObject() {\n+                return scimGeneralConf.getETagValue();\n+            }\n \n-                });\n+            @Override\n+            public void setObject(final String object) {\n+                // nothing to do\n+            }\n+        });\n         eTagValuePanel.setEnabled(false);\n \n         add(creationDatePanel);\n@@ -163,5 +165,4 @@ public void setObject(final String object) {\n         add(filterMaxResultsPanel);\n         add(eTagValuePanel);\n     }\n-\n }"},{"sha":"0bb30859cc7822e5c20d1c74438c2a0de342b3c7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -91,6 +91,8 @@\n import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.OIDCGrantType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -785,8 +787,8 @@ protected static OIDCRPTO buildOIDCRP() {\n         oidcrpTO.setClientId(\"clientId_\" + getUUIDString());\n         oidcrpTO.setClientSecret(\"secret\");\n         oidcrpTO.setSubjectType(OIDCSubjectType.PUBLIC);\n-        oidcrpTO.getSupportedGrantTypes().add(\"something\");\n-        oidcrpTO.getSupportedResponseTypes().add(\"something\");\n+        oidcrpTO.getSupportedGrantTypes().add(OIDCGrantType.authorization_code);\n+        oidcrpTO.getSupportedResponseTypes().add(OIDCResponseType.CODE);\n \n         oidcrpTO.setAuthPolicy(authPolicyTO.getKey());\n         oidcrpTO.setAccessPolicy(accessPolicyTO.getKey());\n@@ -852,12 +854,12 @@ protected static AttrReleasePolicyTO buildAttrReleasePolicyTO() {\n \n         AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n         conf.getAllowedAttrs().addAll(List.of(\"cn\", \"givenName\"));\n-        \n+\n         AllowedAttrReleasePolicyConf.ConsentPolicy consentPolicy = conf.new ConsentPolicy();\n         consentPolicy.setStatus(Boolean.TRUE);\n         consentPolicy.getIncludeOnlyAttrs().addAll(Set.of(\"cn\"));\n         conf.setConsentPolicy(consentPolicy);\n-        \n+\n         policy.setConf(conf);\n \n         return policy;"},{"sha":"c670e0ba08b6eaa86dfc00ff9019d87e3e08650a","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/service/ReportTemplateManagerService.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FReportTemplateManagerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FReportTemplateManagerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fservice%2FReportTemplateManagerService.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -61,8 +61,7 @@ public void setFormat(final String key, final ReportTemplateFormat format, final\n         service.setFormat(key, format, templateIn);\n     }\n \n-    public static boolean removeFormat(final String key, final ReportTemplateFormat format) {\n-        return false;\n+    public void removeFormat(final String key, final ReportTemplateFormat format) {\n+        service.removeFormat(key, format);\n     }\n-\n }"},{"sha":"75624af5424053740cba6c98e1891d495c1b31c2","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -292,8 +292,8 @@ static void writeProperties(final java.util.Properties p) {\n     }\n \n     static void readProperties(final java.util.Properties p) {\n-        String version = p.getProperty(\"version\");\n         // TODO read your settings according to their version\n+        // String version = p.getProperty(\"version\");\n     }\n \n     private void addMailTemplates() {"},{"sha":"5a9b6a2b4e79c2df8270344a4abc64ab69878f66","filename":"sra/src/main/java/org/apache/syncope/sra/security/saml2/SAML2MetadataEndpoint.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2Fsecurity%2Fsaml2%2FSAML2MetadataEndpoint.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -28,7 +28,6 @@\n import org.springframework.boot.autoconfigure.condition.ConditionalOnProperty;\n import org.springframework.http.MediaType;\n import org.springframework.http.ResponseEntity;\n-import org.springframework.http.server.reactive.ServerHttpRequest;\n import org.springframework.web.bind.annotation.GetMapping;\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.ResponseBody;\n@@ -63,7 +62,7 @@ public SAML2MetadataEndpoint(final SAML2Client saml2Client) {\n \n     @GetMapping(produces = { MediaType.APPLICATION_XML_VALUE })\n     @ResponseBody\n-    public Mono<ResponseEntity<String>> metadata(final ServerHttpRequest request) {\n+    public Mono<ResponseEntity<String>> metadata() {\n         return Mono.just(ResponseEntity.ok().\n                 header(HttpHeaders.CONTENT_TYPE, MediaType.APPLICATION_XML_VALUE).\n                 body(metadata));"},{"sha":"afd9684ec2913032b2d2ed992fad5a7d2b1db32c","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/OIDCRPTOMapper.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FOIDCRPTOMapper.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -25,6 +25,8 @@\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.syncope.common.lib.to.OIDCRPTO;\n+import org.apache.syncope.common.lib.types.OIDCGrantType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.oidc.claims.OidcAddressScopeAttributeReleasePolicy;\n@@ -75,8 +77,10 @@ public RegisteredService build(\n             service.setIdTokenSigningAlg(\"none\");\n         }\n         service.setJwtAccessToken(true);\n-        service.setSupportedGrantTypes(new HashSet<>(rp.getSupportedGrantTypes()));\n-        service.setSupportedResponseTypes(new HashSet<>(rp.getSupportedResponseTypes()));\n+        service.setSupportedGrantTypes(rp.getSupportedGrantTypes().stream().\n+                map(OIDCGrantType::name).collect(Collectors.toCollection(HashSet::new)));\n+        service.setSupportedResponseTypes(rp.getSupportedResponseTypes().stream().\n+                map(OIDCResponseType::getExternalForm).collect(Collectors.toCollection(HashSet::new)));\n         if (rp.getSubjectType() != null) {\n             service.setSubjectType(rp.getSubjectType().name());\n         }"},{"sha":"704e7a79107e4fdc394f66ed6a94dcf742c33d02","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/mapping/SAML2SPTOMapper.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fmapping%2FSAML2SPTOMapper.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.wa.starter.mapping;\n \n+import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.SAML2SPTO;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n import org.apereo.cas.services.RegisteredService;\n@@ -55,7 +56,9 @@ public RegisteredService build(\n         service.setRequiredNameIdFormat(sp.getRequiredNameIdFormat().getNameId());\n         service.setSkewAllowance(sp.getSkewAllowance() == null ? 0 : sp.getSkewAllowance());\n         service.setNameIdQualifier(sp.getNameIdQualifier());\n-        service.setAssertionAudiences(sp.getAssertionAudiences());\n+        if (!sp.getAssertionAudiences().isEmpty()) {\n+            service.setAssertionAudiences(sp.getAssertionAudiences().stream().collect(Collectors.joining(\",\")));\n+        }\n         service.setServiceProviderNameIdQualifier(sp.getServiceProviderNameIdQualifier());\n \n         if (authenticationPolicy != null) {"},{"sha":"48365cc4fbbb2eb71cc63c1c19d470813f4798a3","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeWAServiceRegistryTest.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/453ff25efdd23ec8335c60f4d8d39ea16587f7aa/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeWAServiceRegistryTest.java?ref=453ff25efdd23ec8335c60f4d8d39ea16587f7aa","patch":"@@ -34,6 +34,8 @@\n import org.apache.syncope.common.lib.policy.DefaultAuthPolicyCriteriaConf;\n import org.apache.syncope.common.lib.to.OIDCRPTO;\n import org.apache.syncope.common.lib.to.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.OIDCGrantType;\n+import org.apache.syncope.common.lib.types.OIDCResponseType;\n import org.apache.syncope.common.lib.types.OIDCSubjectType;\n import org.apache.syncope.common.lib.types.SAML2SPNameId;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n@@ -67,8 +69,8 @@ private static OIDCRPTO buildOIDCRP() {\n         oidcrpTO.setClientSecret(\"secret\");\n         oidcrpTO.getRedirectUris().addAll(List.of(\"uri1\", \"uri2\"));\n         oidcrpTO.setSubjectType(OIDCSubjectType.PUBLIC);\n-        oidcrpTO.getSupportedGrantTypes().add(\"something\");\n-        oidcrpTO.getSupportedResponseTypes().add(\"something\");\n+        oidcrpTO.getSupportedGrantTypes().add(OIDCGrantType.password);\n+        oidcrpTO.getSupportedResponseTypes().add(OIDCResponseType.CODE);\n \n         return oidcrpTO;\n     }"}]}