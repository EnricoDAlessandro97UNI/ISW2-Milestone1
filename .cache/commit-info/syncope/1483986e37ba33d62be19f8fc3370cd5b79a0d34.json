{"sha":"1483986e37ba33d62be19f8fc3370cd5b79a0d34","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE0ODM5ODZlMzdiYTMzZDYyYmUxOWY4ZmMzMzcwY2Q1Yjc5YTBkMzQ=","commit":{"author":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:10:16Z"},"committer":{"name":"massi","email":"massimiliano.perrone@tirasa.net","date":"2015-10-14T13:10:16Z"},"message":"Fixed SYNCOPE-586","tree":{"sha":"00061b67975bbd864348b56e4193aaa1f12b2187","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/00061b67975bbd864348b56e4193aaa1f12b2187"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1483986e37ba33d62be19f8fc3370cd5b79a0d34","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1483986e37ba33d62be19f8fc3370cd5b79a0d34","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1483986e37ba33d62be19f8fc3370cd5b79a0d34","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1483986e37ba33d62be19f8fc3370cd5b79a0d34/comments","author":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"committer":{"login":"massx1","id":1792923,"node_id":"MDQ6VXNlcjE3OTI5MjM=","avatar_url":"https://avatars.githubusercontent.com/u/1792923?v=4","gravatar_id":"","url":"https://api.github.com/users/massx1","html_url":"https://github.com/massx1","followers_url":"https://api.github.com/users/massx1/followers","following_url":"https://api.github.com/users/massx1/following{/other_user}","gists_url":"https://api.github.com/users/massx1/gists{/gist_id}","starred_url":"https://api.github.com/users/massx1/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/massx1/subscriptions","organizations_url":"https://api.github.com/users/massx1/orgs","repos_url":"https://api.github.com/users/massx1/repos","events_url":"https://api.github.com/users/massx1/events{/privacy}","received_events_url":"https://api.github.com/users/massx1/received_events","type":"User","site_admin":false},"parents":[{"sha":"237f90f12a852497afef707d74aea864e0cc5e91","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/237f90f12a852497afef707d74aea864e0cc5e91","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/237f90f12a852497afef707d74aea864e0cc5e91"}],"stats":{"total":193,"additions":134,"deletions":59},"files":[{"sha":"d17419f3a86c7af694c9ecb6d0d4bb6f7098dc0b","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/PolicyCommand.java","status":"modified","additions":134,"deletions":59,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1483986e37ba33d62be19f8fc3370cd5b79a0d34/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1483986e37ba33d62be19f8fc3370cd5b79a0d34/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2FPolicyCommand.java?ref=1483986e37ba33d62be19f8fc3370cd5b79a0d34","patch":"@@ -18,87 +18,162 @@\n  */\n package org.apache.syncope.client.cli.commands;\n \n-import com.beust.jcommander.Parameter;\n-import com.beust.jcommander.Parameters;\n+import javax.xml.ws.WebServiceException;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.cli.Command;\n+import org.apache.syncope.client.cli.Input;\n import org.apache.syncope.client.cli.SyncopeServices;\n+import org.apache.syncope.client.cli.messages.UsageMessages;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n import org.apache.syncope.common.lib.types.PolicyType;\n import org.apache.syncope.common.rest.api.service.PolicyService;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-@Parameters(\n-        commandNames = \"policy\",\n-        optionPrefixes = \"-\",\n-        separators = \"=\",\n-        commandDescription = \"Apache Syncope policy service\")\n+@Command(name = \"policy\")\n public class PolicyCommand extends AbstractCommand {\n \n     private static final Logger LOG = LoggerFactory.getLogger(PolicyCommand.class);\n \n-    private final String helpMessage = \"Usage: policy [options]\\n\"\n+    private static final String HELP_MESSAGE = \"Usage: policy [options]\\n\"\n             + \"  Options:\\n\"\n-            + \"    -h, --help \\n\"\n-            + \"    -l, --list \\n\"\n-            + \"    -ll, --list-policy \\n\"\n-            + \"       Syntax: -ll={POLICY-TYPE} \\n\"\n-            + \"    -r, --read \\n\"\n-            + \"       Syntax: -r={POLICY-ID} \\n\"\n-            + \"    -d, --delete \\n\"\n-            + \"       Syntax: -d={POLICY-ID}\";\n+            + \"    --help \\n\"\n+            + \"    --list-policy \\n\"\n+            + \"       Syntax: --list-policy {POLICY-TYPE} \\n\"\n+            + \"          Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\\n\"\n+            + \"    --read \\n\"\n+            + \"       Syntax: --read {POLICY-ID} {POLICY-ID} [...]\\n\"\n+            + \"    --delete \\n\"\n+            + \"       Syntax: --delete {POLICY-ID} {POLICY-ID} [...]\";\n \n-    @Parameter(names = { \"-ll\", \"--list-policy\" })\n-    private String policyType;\n+    @Override\n+    public void execute(final Input input) {\n+        LOG.debug(\"Option: {}\", input.getOption());\n+        LOG.debug(\"Parameters:\");\n+        for (final String parameter : input.getParameters()) {\n+            LOG.debug(\"   > \" + parameter);\n+        }\n \n-    @Parameter(names = { \"-r\", \"--read\" })\n-    private Long policyIdToRead = -1L;\n+        final String[] parameters = input.getParameters();\n \n-    @Parameter(names = { \"-d\", \"--delete\" })\n-    private Long policyIdToDelete = -1L;\n+        if (StringUtils.isBlank(input.getOption())) {\n+            input.setOption(Options.HELP.getOptionName());\n+        }\n \n-    @Override\n-    public void execute() {\n         final PolicyService policyService = SyncopeServices.get(PolicyService.class);\n-        LOG.debug(\"Policy service successfully created\");\n-\n-        if (help) {\n-            LOG.debug(\"- policy help command\");\n-            System.out.println(helpMessage);\n-        } else if (list) {\n-            // do nothing for the moment...\n-        } else if (StringUtils.isNotBlank(policyType)) {\n-            LOG.debug(\"- policy list command for type {}\", policyType);\n-            try {\n-                for (final AbstractPolicyTO policyTO : policyService.list(PolicyType.valueOf(policyType))) {\n-                    System.out.println(policyTO);\n+        switch (Options.fromName(input.getOption())) {\n+            case LIST_POLICY:\n+                final String listPolicyErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: policy --list-policy {POLICY-TYPE}\\n\"\n+                        + \"   Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\");\n+                if (parameters.length == 1) {\n+                    try {\n+                        for (final AbstractPolicyTO policyTO : policyService.list(PolicyType.valueOf(parameters[0]))) {\n+                            System.out.println(policyTO);\n+                        }\n+                    } catch (final SyncopeClientException ex) {\n+                        UsageMessages.printErrorMessage(ex.getMessage());\n+                    } catch (final IllegalArgumentException ex) {\n+                        UsageMessages.printErrorMessage(\n+                                \"Error: \" + parameters[0] + \" isn't a valid policy type, try with:\");\n+                        for (final PolicyType type : PolicyType.values()) {\n+                            System.out.println(\"  *** \" + type.name());\n+                        }\n+                        System.out.println(\"\");\n+                    }\n+                } else {\n+                    System.out.println(listPolicyErrorMessage);\n                 }\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            } catch (final IllegalArgumentException ex) {\n-                System.out.println(\" - Error: \" + policyType + \" isn't a valid policy type, try with:\");\n-                for (final PolicyType type : PolicyType.values()) {\n-                    System.out.println(\"  *** \" + type.name());\n+                break;\n+            case READ:\n+                final String readErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: policy --read {POLICY-ID} {POLICY-ID} [...]\");\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            System.out.println(policyService.read(Long.valueOf(parameter)));\n+                        } catch (final NumberFormatException ex) {\n+                            UsageMessages.printErrorMessage(\n+                                    \"Error reading \" + parameter + \". It isn't a valid policy id\");\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\"Policy \" + parameter + \" doesn't exists!\");\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(readErrorMessage);\n+                }\n+                break;\n+            case DELETE:\n+                final String deleteErrorMessage = UsageMessages.optionCommandMessage(\n+                        \"Usage: policy --delete {POLICY-ID} {POLICY-ID} [...]\");\n+\n+                if (parameters.length >= 1) {\n+                    for (final String parameter : parameters) {\n+                        try {\n+                            policyService.delete(Long.valueOf(parameter));\n+                            System.out.println(\" - Policy \" + parameter + \" deleted!\");\n+                        } catch (final WebServiceException | SyncopeClientException ex) {\n+                            System.out.println(\"Error:\");\n+                            if (ex.getMessage().startsWith(\"NotFound\")) {\n+                                UsageMessages.printErrorMessage(\"Policy \" + parameter + \" doesn't exists!\");\n+                            } else if (ex.getMessage().startsWith(\"DataIntegrityViolation\")) {\n+                                UsageMessages.printErrorMessage(\"You cannot delete policy \" + parameter);\n+                            } else {\n+                                UsageMessages.printErrorMessage(ex.getMessage());\n+                            }\n+                        } catch (final NumberFormatException ex) {\n+                            UsageMessages.printErrorMessage(\n+                                    \"Error reading \" + parameter + \". It isn't a valid policy id\");\n+                        }\n+                    }\n+                } else {\n+                    System.out.println(deleteErrorMessage);\n+                }\n+                break;\n+            case HELP:\n+                System.out.println(HELP_MESSAGE);\n+                break;\n+            default:\n+                System.out.println(input.getOption() + \" is not a valid option.\");\n+                System.out.println(\"\");\n+                System.out.println(HELP_MESSAGE);\n+        }\n+    }\n+\n+    private enum Options {\n+\n+        HELP(\"--help\"),\n+        LIST_POLICY(\"--list-policy\"),\n+        READ(\"--read\"),\n+        DELETE(\"--delete\");\n+\n+        private final String optionName;\n+\n+        private Options(final String optionName) {\n+            this.optionName = optionName;\n+        }\n+\n+        public String getOptionName() {\n+            return optionName;\n+        }\n+\n+        public boolean equalsOptionName(final String otherName) {\n+            return (otherName == null) ? false : optionName.equals(otherName);\n+        }\n+\n+        public static Options fromName(final String name) {\n+            Options optionToReturn = HELP;\n+            for (final Options option : Options.values()) {\n+                if (option.equalsOptionName(name)) {\n+                    optionToReturn = option;\n                 }\n             }\n-        } else if (policyIdToRead > -1L) {\n-            LOG.debug(\"- policy read {} command\", policyIdToRead);\n-            try {\n-                System.out.println(policyService.read(policyIdToRead));\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else if (policyIdToDelete > -1L) {\n-            try {\n-                LOG.debug(\"- policy delete {} command\", policyIdToDelete);\n-                policyService.delete(policyIdToDelete);\n-                System.out.println(\" - Report \" + policyIdToDelete + \" deleted!\");\n-            } catch (final SyncopeClientException ex) {\n-                System.out.println(\" - Error: \" + ex.getMessage());\n-            }\n-        } else {\n-            System.out.println(helpMessage);\n+            return optionToReturn;\n         }\n     }\n "}]}