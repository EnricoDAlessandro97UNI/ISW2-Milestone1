{"sha":"77f09445c5ec791aa0ef2639364d0bd26cf39ebc","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjc3ZjA5NDQ1YzVlYzc5MWFhMGVmMjYzOTM2NGQwYmQyNmNmMzllYmM=","commit":{"author":{"name":"Davide Cortellucci","email":"davide.cor94@gmail.com","date":"2020-01-09T10:48:01Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2020-01-09T11:45:37Z"},"message":"Unit Test for DBPasswordPullActions (#156)","tree":{"sha":"c3e2d30431c3907670d7d812ba6f68a7cc55261d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c3e2d30431c3907670d7d812ba6f68a7cc55261d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/77f09445c5ec791aa0ef2639364d0bd26cf39ebc","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77f09445c5ec791aa0ef2639364d0bd26cf39ebc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/77f09445c5ec791aa0ef2639364d0bd26cf39ebc","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/77f09445c5ec791aa0ef2639364d0bd26cf39ebc/comments","author":{"login":"Dodoveloper","id":17781050,"node_id":"MDQ6VXNlcjE3NzgxMDUw","avatar_url":"https://avatars.githubusercontent.com/u/17781050?v=4","gravatar_id":"","url":"https://api.github.com/users/Dodoveloper","html_url":"https://github.com/Dodoveloper","followers_url":"https://api.github.com/users/Dodoveloper/followers","following_url":"https://api.github.com/users/Dodoveloper/following{/other_user}","gists_url":"https://api.github.com/users/Dodoveloper/gists{/gist_id}","starred_url":"https://api.github.com/users/Dodoveloper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dodoveloper/subscriptions","organizations_url":"https://api.github.com/users/Dodoveloper/orgs","repos_url":"https://api.github.com/users/Dodoveloper/repos","events_url":"https://api.github.com/users/Dodoveloper/events{/privacy}","received_events_url":"https://api.github.com/users/Dodoveloper/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"62507c50edd25c9c7e1bf616e4a1bb4222eeebcd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/62507c50edd25c9c7e1bf616e4a1bb4222eeebcd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/62507c50edd25c9c7e1bf616e4a1bb4222eeebcd"}],"stats":{"total":147,"additions":147,"deletions":0},"files":[{"sha":"01f7a553c24a82540b7967dad2e50a752d607d44","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/DBPasswordPullActionsTest.java","status":"added","additions":147,"deletions":0,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/77f09445c5ec791aa0ef2639364d0bd26cf39ebc/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/77f09445c5ec791aa0ef2639364d0bd26cf39ebc/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FDBPasswordPullActionsTest.java?ref=77f09445c5ec791aa0ef2639364d0bd26cf39ebc","patch":"@@ -0,0 +1,147 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.lenient;\n+import static org.mockito.Mockito.verify;\n+import static org.mockito.Mockito.when;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.request.PasswordPatch;\n+import org.apache.syncope.common.lib.request.UserCR;\n+import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.Connector;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.quartz.JobExecutionException;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+public class DBPasswordPullActionsTest extends AbstractTest {\n+\n+    @Mock\n+    private SyncDelta syncDelta;\n+\n+    @Mock\n+    private ProvisioningProfile<?, ?> profile;\n+\n+    @Mock\n+    private UserDAO userDAO;\n+\n+    @Mock\n+    private ProvisioningReport result;\n+\n+    @Mock\n+    private Connector connector;\n+\n+    @InjectMocks\n+    private DBPasswordPullActions dBPasswordPullActions;\n+\n+    @Mock\n+    private ConnInstance connInstance;\n+\n+    private Set<ConnConfProperty> connConfProperties;\n+\n+    private UserTO userTO;\n+\n+    private UserCR userCR;\n+\n+    private UserUR userUR;\n+\n+    private String encodedPassword;\n+\n+    private CipherAlgorithm cipher;\n+\n+    private ConnConfProperty connConfProperty;\n+\n+    @BeforeEach\n+    public void initTest() {\n+        userTO = new UserTO();\n+        encodedPassword = \"s3cureP4ssw0rd\";\n+        cipher = CipherAlgorithm.SHA512;\n+        ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n+        connConfPropSchema.setName(\"cipherAlgorithm\");\n+        connConfProperty = new ConnConfProperty();\n+        connConfProperty.setSchema(connConfPropSchema);\n+        connConfProperties = new HashSet<>();\n+        connConfProperties.add(connConfProperty);\n+\n+        ReflectionTestUtils.setField(dBPasswordPullActions, \"encodedPassword\", encodedPassword);\n+        ReflectionTestUtils.setField(dBPasswordPullActions, \"cipher\", cipher);\n+\n+        lenient().when(profile.getConnector()).thenReturn(connector);\n+        lenient().when(connector.getConnInstance()).thenReturn(connInstance);\n+        lenient().when(connInstance.getConf()).thenReturn(connConfProperties);\n+    }\n+\n+    @Test\n+    public void beforeProvision() throws JobExecutionException {\n+        String digest = \"SHA256\";\n+        String password = \"t3stPassw0rd\";\n+        userCR = new UserCR.Builder(SyncopeConstants.ROOT_REALM, \"user\").password(password).build();\n+        connConfProperty.getValues().clear();\n+        connConfProperty.getValues().add(digest);\n+\n+        dBPasswordPullActions.beforeProvision(profile, syncDelta, userCR);\n+\n+        assertEquals(CipherAlgorithm.valueOf(digest), ReflectionTestUtils.getField(dBPasswordPullActions, \"cipher\"));\n+        assertEquals(password, ReflectionTestUtils.getField(dBPasswordPullActions, \"encodedPassword\"));\n+    }\n+\n+    @Test\n+    public void beforeUpdate() throws JobExecutionException {\n+        userUR = new UserUR.Builder(null).\n+                password(new PasswordPatch.Builder().value(\"an0therTestP4ss\").build()).\n+                build();\n+\n+        dBPasswordPullActions.beforeUpdate(profile, syncDelta, userTO, userUR);\n+\n+        assertEquals(cipher, ReflectionTestUtils.getField(dBPasswordPullActions, \"cipher\"));\n+        assertEquals(encodedPassword, ReflectionTestUtils.getField(dBPasswordPullActions, \"encodedPassword\"));\n+    }\n+\n+    @Test\n+    public void after(@Mock User user) throws JobExecutionException {\n+        when(userDAO.find(user.getKey())).thenReturn(user);\n+\n+        dBPasswordPullActions.after(profile, syncDelta, userTO, result);\n+\n+        verify(user).setEncodedPassword(anyString(), any(CipherAlgorithm.class));\n+        assertNull(ReflectionTestUtils.getField(dBPasswordPullActions, \"encodedPassword\"));\n+        assertNull(ReflectionTestUtils.getField(dBPasswordPullActions, \"cipher\"));\n+    }\n+}"}]}