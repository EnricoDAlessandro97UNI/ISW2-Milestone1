{"sha":"8d5c79e522f6e80a5556f81b89fc99d892a29504","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjhkNWM3OWU1MjJmNmU4MGE1NTU2ZjgxYjg5ZmM5OWQ4OTJhMjk1MDQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-16T17:55:21Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-16T17:55:21Z"},"message":"[SYNCOPE-20] Audit statements have been spread in all REST controllers: this aspect will need to be refined as soon as there is need of audit features in a real deployment; still missing console interface\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1301670 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d34f421031fddbdea928863687f79aab7aaf5348","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d34f421031fddbdea928863687f79aab7aaf5348"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/8d5c79e522f6e80a5556f81b89fc99d892a29504","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8d5c79e522f6e80a5556f81b89fc99d892a29504","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8d5c79e522f6e80a5556f81b89fc99d892a29504","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8d5c79e522f6e80a5556f81b89fc99d892a29504/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3073ce6c89130e336e887435e1b2e2f1e7c73411","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3073ce6c89130e336e887435e1b2e2f1e7c73411","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3073ce6c89130e336e887435e1b2e2f1e7c73411"}],"stats":{"total":1209,"additions":827,"deletions":382},"files":[{"sha":"9077244e1e5f0786681e7e2756fdb8457063d352","filename":"client/src/main/java/org/syncope/types/AuditElements.java","status":"modified","additions":164,"deletions":41,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -20,25 +20,41 @@\n \n import java.util.EnumSet;\n \n-public class AuditElements {\n+public final class AuditElements {\n+\n+    private AuditElements() {\n+    }\n \n     public enum Category {\n \n-        authentication,\n-        configuration,\n-        connector,\n-        logger,\n-        notification,\n-        policy,\n-        report,\n-        resource,\n-        role,\n-        schema,\n-        task,\n-        user,\n-        userRequest,\n-        workflow\n+        authentication(AuthenticationSubCategory.class),\n+        configuration(ConfigurationSubCategory.class),\n+        connector(ConnectorSubCategory.class),\n+        logger(LoggerSubCategory.class),\n+        notification(NotificationSubCategory.class),\n+        policy(PolicySubCategory.class),\n+        report(ReportSubCategory.class),\n+        resource(ResourceSubCategory.class),\n+        role(RoleSubCategory.class),\n+        schema(SchemaSubCategory.class),\n+        task(TaskSubCategory.class),\n+        user(UserSubCategory.class),\n+        userRequest(UserRequestSubCategory.class),\n+        workflow(WorkflowSubCategory.class);\n+\n+        private Class<? extends Enum<?>> subCategory;\n+\n+        Category(final Class<? extends Enum<?>> subCategory) {\n+            this.subCategory = subCategory;\n+        }\n \n+        public Class<? extends Enum> getSubCategory() {\n+            return subCategory;\n+        }\n+\n+        public EnumSet<? extends Enum<?>> getSubCategoryElements() {\n+            return EnumSet.allOf(getSubCategory());\n+        }\n     }\n \n     public enum Result {\n@@ -48,32 +64,6 @@ public enum Result {\n \n     }\n \n-    public static EnumSet<? extends Enum> getSubCategories(final Category category) {\n-        EnumSet<? extends Enum> result;\n-        switch (category) {\n-            case authentication:\n-                result = EnumSet.allOf(AuthenticationSubCategory.class);\n-                break;\n-\n-            case configuration:\n-                result = EnumSet.allOf(ConfigurationSubCategory.class);\n-                break;\n-\n-            case connector:\n-                result = EnumSet.allOf(ConnectorSubCategory.class);\n-                break;\n-\n-            case logger:\n-                result = EnumSet.allOf(LoggerSubCategory.class);\n-                break;\n-\n-            default:\n-                result = null;\n-        }\n-\n-        return result;\n-    }\n-\n     public enum AuthenticationSubCategory {\n \n         login,\n@@ -116,4 +106,137 @@ public enum LoggerSubCategory {\n         delete\n \n     }\n+\n+    public enum NotificationSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        sent\n+\n+    }\n+\n+    public enum PolicySubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete\n+\n+    }\n+\n+    public enum ReportSubCategory {\n+\n+        list,\n+        listExecutions,\n+        create,\n+        read,\n+        readExecution,\n+        update,\n+        delete,\n+        deleteExecution,\n+        getReportletConfClasses,\n+        execute,\n+        exportExecutionResult\n+\n+    }\n+\n+    public enum ResourceSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        getObject,\n+        getRoleResourcesMapping\n+\n+    }\n+\n+    public enum RoleSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        parent,\n+        children\n+\n+    }\n+\n+    public enum SchemaSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        listDerived,\n+        createDerived,\n+        readDerived,\n+        updateDerived,\n+        deleteDerived,\n+        listVirtual,\n+        createVirtual,\n+        readVirtual,\n+        updateVirtual,\n+        deleteVirtual\n+\n+    }\n+\n+    public enum TaskSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        listExecutions,\n+        getJobClasses,\n+        getJobActionClasses,\n+        readExecution,\n+        execute,\n+        report,\n+        deleteExecution\n+\n+    }\n+\n+    public enum UserSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        verifyPassword,\n+        search,\n+        setStatus,\n+        executeWorkflow,\n+        getForms,\n+        getFormForUser,\n+        claimForm,\n+        submitForm\n+\n+    }\n+\n+    public enum UserRequestSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        isCreateAllowed,}\n+\n+    public enum WorkflowSubCategory {\n+\n+        getDefinition,\n+        updateDefinition,\n+        getDefinedTasks\n+\n+    }\n }"},{"sha":"379468ae4503942e413511a6757239e4fbe98ac2","filename":"core/src/main/java/org/syncope/core/audit/AuditManager.java","status":"modified","additions":17,"deletions":18,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -22,7 +22,8 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.security.core.context.SecurityContext;\n import org.springframework.security.core.context.SecurityContextHolder;\n-import org.syncope.types.AuditElements;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n import org.syncope.types.SyncopeLoggerType;\n \n public class AuditManager {\n@@ -32,29 +33,24 @@ public class AuditManager {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(AuditManager.class);\n \n-    private String getLoggerName(final AuditElements.Category category, final Enum<?> subcategory,\n-            final AuditElements.Result result) {\n+    public String getLoggerName(final Category category, final Enum<?> subcategory, final Result result) {\n \n-        StringBuilder loggerName = new StringBuilder();\n-        loggerName.append(SyncopeLoggerType.AUDIT.getPrefix()).append('.').append(category.name()).append('.').append(\n-                subcategory.name()).append('.').append(result.name());\n-        return loggerName.toString();\n+        return new StringBuilder().append(SyncopeLoggerType.AUDIT.getPrefix()).append('.').\n+                append(category.name()).append('.').\n+                append(subcategory.name()).append('.').\n+                append(result.name()).toString();\n     }\n \n-    public void audit(final AuditElements.Category category, final Enum<?> subcategory,\n-            final AuditElements.Result result, final String message) {\n-\n+    public void audit(final Category category, final Enum<?> subcategory, final Result result, final String message) {\n         audit(category, subcategory, result, message, null);\n     }\n \n-    public void audit(final AuditElements.Category category, final Enum<?> subcategory,\n-            final AuditElements.Result result, final String message, final Throwable t) {\n+    public void audit(final Category category, final Enum<?> subcategory, final Result result, final String message,\n+            final Throwable throwable) {\n \n         if (category == null || subcategory == null || result == null) {\n-            LOG.error(\"Invalid request: some null items {} {} {}\", new Object[] { category, subcategory, result });\n-        } else if (!AuditElements.getSubCategories(category).contains(subcategory)) {\n-            LOG.error(\"Invalid request: {} does not belong to {}\", new Object[] { subcategory, category });\n-        } else {\n+            LOG.error(\"Invalid request: some null items {} {} {}\", new Object[]{category, subcategory, result});\n+        } else if (category.getSubCategoryElements().contains(subcategory)) {\n             StringBuilder auditMessage = new StringBuilder();\n \n             final SecurityContext ctx = SecurityContextHolder.getContext();\n@@ -64,11 +60,14 @@ public void audit(final AuditElements.Category category, final Enum<?> subcatego\n             auditMessage.append(message);\n \n             Logger logger = LoggerFactory.getLogger(getLoggerName(category, subcategory, result));\n-            if (t == null) {\n+            if (throwable == null) {\n                 logger.debug(auditMessage.toString());\n             } else {\n-                logger.debug(auditMessage.toString(), t);\n+                logger.debug(auditMessage.toString(), throwable);\n             }\n+        } else {\n+            LOG.error(\"Invalid request: {} does not belong to {}\", new Object[]{subcategory, category});\n         }\n+\n     }\n }"},{"sha":"99da55fb2ce06e9101c1f2badefff6ea5b006ada","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -134,7 +134,7 @@ public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"k\n             result.setKey(key);\n \n             auditManager.audit(Category.configuration, ConfigurationSubCategory.read, Result.failure,\n-                    \"Could not read conf: \" + key);\n+                    \"Could not find conf: \" + key);\n         }\n \n         return result;\n@@ -235,7 +235,7 @@ public void dbExport(final HttpServletResponse response) {\n             LOG.debug(\"Database content successfully exported\");\n         } catch (Throwable t) {\n             auditManager.audit(Category.configuration, ConfigurationSubCategory.dbExport, Result.failure,\n-                    \"Could not export database content\");\n+                    \"Could not export database content\", t);\n             LOG.error(\"While exporting database content\", t);\n         }\n     }"},{"sha":"65333810362186888404b217f7ad767f4661b6a8","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -102,7 +102,7 @@ public ConnInstanceTO create(final HttpServletResponse response, @RequestBody fi\n                     \"Successfully created connector instance: \" + connInstance.getDisplayName());\n         } catch (Throwable t) {\n             auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n-                    \"Could not create connector instance: \" + connectorTO.getDisplayName());\n+                    \"Could not create connector instance: \" + connectorTO.getDisplayName(), t);\n \n             SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -133,7 +133,7 @@ public ConnInstanceTO update(@RequestBody final ConnInstanceTO connectorTO)\n                     \"Successfully update connector instance: \" + connInstance.getDisplayName());\n         } catch (Throwable t) {\n             auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n-                    \"Could not update connector instance: \" + connectorTO.getDisplayName());\n+                    \"Could not update connector instance: \" + connectorTO.getDisplayName(), t);\n \n             SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -371,7 +371,7 @@ public ModelAndView check(final HttpServletResponse response, @RequestBody final\n                     \"Successfully checked connector: \" + connectorTO);\n         } catch (Exception ex) {\n             auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.failure,\n-                    \"Unsuccessful check for connector: \" + connectorTO);\n+                    \"Unsuccessful check for connector: \" + connectorTO, ex);\n \n             LOG.error(\"Test connection failure {}\", ex);\n             result = false;"},{"sha":"07158651a424bfa6f303ff0a3d792d22a15a5b9e","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":31,"deletions":16,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -31,14 +31,21 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.DerivedSchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.AbstractDerSchema;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.rest.data.DerivedSchemaDataBinder;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n+import org.syncope.types.AuditElements.SchemaSubCategory;\n \n @Controller\n @RequestMapping(\"/derivedSchema\")\n public class DerivedSchemaController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private DerSchemaDAO derivedSchemaDAO;\n \n@@ -51,29 +58,31 @@ public DerivedSchemaTO create(final HttpServletResponse response,\n             @RequestBody final DerivedSchemaTO derivedSchemaTO, @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException {\n \n-        AbstractDerSchema derivedSchema = derivedSchemaDataBinder.create(derivedSchemaTO, getAttributableUtil(kind)\n-                .newDerivedSchema());\n+        AbstractDerSchema derivedSchema = derivedSchemaDAO.save(\n+                derivedSchemaDataBinder.create(derivedSchemaTO, getAttributableUtil(kind).newDerivedSchema()));\n \n-        derivedSchema = derivedSchemaDAO.save(derivedSchema);\n+        auditManager.audit(Category.schema, SchemaSubCategory.createDerived, Result.success,\n+                \"Successfully created derived schema: \" + kind + \"/\" + derivedSchema.getName());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/{kind}/delete/{schema}\")\n-    public void delete(HttpServletResponse response, @PathVariable(\"kind\") final String kind,\n+    public void delete(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String derivedSchemaName) throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).derivedSchemaClass();\n         AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n-            LOG.error(\"Could not find derived schema '\" + derivedSchemaName + \"'\");\n-\n-            throw new NotFoundException(derivedSchemaName);\n-        } else {\n-            derivedSchemaDAO.delete(derivedSchemaName, getAttributableUtil(kind));\n+            throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n         }\n+\n+        derivedSchemaDAO.delete(derivedSchemaName, getAttributableUtil(kind));\n+\n+        auditManager.audit(Category.schema, SchemaSubCategory.deleteDerived, Result.success,\n+                \"Successfully deleted derived schema: \" + kind + \"/\" + derivedSchema.getName());\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n@@ -83,10 +92,12 @@ public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n \n         List<DerivedSchemaTO> derivedSchemaTOs = new ArrayList<DerivedSchemaTO>(derivedAttributeSchemas.size());\n         for (AbstractDerSchema derivedSchema : derivedAttributeSchemas) {\n-\n             derivedSchemaTOs.add(derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema));\n         }\n \n+        auditManager.audit(Category.schema, SchemaSubCategory.listDerived, Result.success,\n+                \"Successfully listed all derived schemas: \" + kind + \"/\" + derivedSchemaTOs.size());\n+\n         return derivedSchemaTOs;\n     }\n \n@@ -98,28 +109,32 @@ public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n         Class reference = getAttributableUtil(kind).derivedSchemaClass();\n         AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaName, reference);\n         if (derivedSchema == null) {\n-            LOG.error(\"Could not find derived schema '\" + derivedSchemaName + \"'\");\n-            throw new NotFoundException(derivedSchemaName);\n+            throw new NotFoundException(\"Derived schema '\" + derivedSchemaName + \"'\");\n         }\n \n+        auditManager.audit(Category.schema, SchemaSubCategory.readDerived, Result.success,\n+                \"Successfully read derived schema: \" + kind + \"/\" + derivedSchema.getName());\n+\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n     public DerivedSchemaTO update(@RequestBody final DerivedSchemaTO derivedSchemaTO,\n-            @PathVariable(\"kind\") final String kind) throws SyncopeClientCompositeErrorException, NotFoundException {\n+            @PathVariable(\"kind\") final String kind) throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).derivedSchemaClass();\n         AbstractDerSchema derivedSchema = derivedSchemaDAO.find(derivedSchemaTO.getName(), reference);\n         if (derivedSchema == null) {\n-            LOG.error(\"Could not find derived schema '\" + derivedSchemaTO.getName() + \"'\");\n-            throw new NotFoundException(derivedSchemaTO.getName());\n+            throw new NotFoundException(\"Derived schema '\" + derivedSchemaTO.getName() + \"'\");\n         }\n \n         derivedSchema = derivedSchemaDataBinder.update(derivedSchemaTO, derivedSchema);\n-\n         derivedSchema = derivedSchemaDAO.save(derivedSchema);\n+\n+        auditManager.audit(Category.schema, SchemaSubCategory.updateDerived, Result.success,\n+                \"Successfully updated derived schema: \" + kind + \"/\" + derivedSchema.getName());\n+\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n }"},{"sha":"a3db12ff132dbcfae0b4553ea01166adc7893a9a","filename":"core/src/main/java/org/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -133,9 +133,12 @@ public LoggerTO setLogLevel(@PathVariable(\"name\") final String name, @PathVariab\n     }\n \n     @PreAuthorize(\"hasRole('AUDIT_SET_LEVEL')\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/audit/{name}/{level}\")\n-    public LoggerTO setAuditLevel(@PathVariable(\"name\") final String name, @PathVariable(\"level\") final Level level) {\n-        return setLevel(name, level, SyncopeLoggerType.AUDIT);\n+    @RequestMapping(method = RequestMethod.POST, value = \"/audit/{category}/{subcategory}/{result}/{level}\")\n+    public LoggerTO setAuditLevel(@PathVariable(\"category\") final Category category,\n+            @PathVariable(\"subcategory\") final Enum<?> subcategory, @PathVariable(\"result\") final Result result,\n+            @PathVariable(\"level\") final Level level) {\n+\n+        return setLevel(auditManager.getLoggerName(category, subcategory, result), level, SyncopeLoggerType.AUDIT);\n     }\n \n     private void delete(final String name, final SyncopeLoggerType expectedType) throws NotFoundException {\n@@ -167,9 +170,11 @@ public void deleteLog(@PathVariable(\"name\") final String name) throws NotFoundEx\n     }\n \n     @PreAuthorize(\"hasRole('AUDIT_DELETE')\")\n-    @RequestMapping(method = RequestMethod.DELETE, value = \"/audit/delete/{name}\")\n-    public void deleteAudit(@PathVariable(\"name\") final String name) throws NotFoundException {\n+    @RequestMapping(method = RequestMethod.DELETE, value = \"/audit/delete/{category}/{subcategory}/{result}\")\n+    public void deleteAudit(@PathVariable(\"category\") final Category category,\n+            @PathVariable(\"subcategory\") final Enum<?> subcategory, @PathVariable(\"result\") final Result result) throws\n+            NotFoundException {\n \n-        delete(name, SyncopeLoggerType.AUDIT);\n+        delete(auditManager.getLoggerName(category, subcategory, result), SyncopeLoggerType.AUDIT);\n     }\n }"},{"sha":"63c8277d84a7b338bf4850aacd543ae052f0e274","filename":"core/src/main/java/org/syncope/core/rest/controller/NotificationController.java","status":"modified","additions":21,"deletions":3,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FNotificationController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -30,14 +30,21 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.NotificationTO;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.Notification;\n import org.syncope.core.persistence.dao.NotificationDAO;\n import org.syncope.core.rest.data.NotificationDataBinder;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.NotificationSubCategory;\n+import org.syncope.types.AuditElements.Result;\n \n @Controller\n @RequestMapping(\"/notification\")\n public class NotificationController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private NotificationDAO notificationDAO;\n \n@@ -46,7 +53,7 @@ public class NotificationController extends AbstractController {\n \n     @PreAuthorize(\"hasRole('NOTIFICATION_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{notificationId}\")\n-    public NotificationTO read(@PathVariable(\"notificationId\") Long notificationId) throws NotFoundException {\n+    public NotificationTO read(@PathVariable(\"notificationId\") final Long notificationId) throws NotFoundException {\n \n         Notification notification = notificationDAO.find(notificationId);\n         if (notification == null) {\n@@ -69,6 +76,9 @@ public List<NotificationTO> list() throws NotFoundException {\n             notificationTOs.add(binder.getNotificationTO(notification));\n         }\n \n+        auditManager.audit(Category.notification, NotificationSubCategory.list, Result.success,\n+                \"Successfully listed all notifications: \" + notificationTOs.size());\n+\n         return notificationTOs;\n     }\n \n@@ -79,8 +89,10 @@ public NotificationTO create(final HttpServletResponse response, @RequestBody fi\n \n         LOG.debug(\"Notification create called with parameter {}\", notificationTO);\n \n-        Notification notification = binder.createNotification(notificationTO);\n-        notification = notificationDAO.save(notification);\n+        Notification notification = notificationDAO.save(binder.createNotification(notificationTO));\n+\n+        auditManager.audit(Category.notification, NotificationSubCategory.create, Result.success,\n+                \"Successfully created notification: \" + notification.getId());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getNotificationTO(notification);\n@@ -102,6 +114,9 @@ public NotificationTO update(@RequestBody final NotificationTO notificationTO) t\n         binder.updateNotification(notification, notificationTO);\n         notification = notificationDAO.save(notification);\n \n+        auditManager.audit(Category.notification, NotificationSubCategory.update, Result.success,\n+                \"Successfully updated notification: \" + notification.getId());\n+\n         return binder.getNotificationTO(notification);\n     }\n \n@@ -116,6 +131,9 @@ public void delete(@PathVariable(\"notificationId\") final Long notificationId) th\n             throw new NotFoundException(String.valueOf(notificationId));\n         }\n \n+        auditManager.audit(Category.notification, NotificationSubCategory.delete, Result.success,\n+                \"Successfully deleted notification: \" + notification.getId());\n+\n         notificationDAO.delete(notificationId);\n     }\n }"},{"sha":"4d4aea9865472bc5f2abe2048bf3c6d0cfcea2ac","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":61,"deletions":23,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -20,32 +20,40 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n+import java.util.Locale;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n import org.syncope.client.to.PolicyTO;\n import org.syncope.client.to.SyncPolicyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.AccountPolicy;\n import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.rest.data.PolicyDataBinder;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.PolicySubCategory;\n+import org.syncope.types.AuditElements.Result;\n import org.syncope.types.PolicyType;\n \n @Controller\n @RequestMapping(\"/policy\")\n public class PolicyController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private PolicyDAO policyDAO;\n \n@@ -54,57 +62,69 @@ public class PolicyController extends AbstractController {\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/password/create\")\n-    public PasswordPolicyTO create(final HttpServletResponse response, final @RequestBody PasswordPolicyTO policyTO)\n+    public PasswordPolicyTO create(final HttpServletResponse response, @RequestBody final PasswordPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n         LOG.debug(\"Creating policy \" + policyTO);\n \n         final PasswordPolicy policy = binder.getPolicy(null, policyTO);\n \n+        auditManager.audit(Category.policy, PolicySubCategory.create, Result.success,\n+                \"Successfully created password policy: \" + policy.getId());\n+\n         return binder.getPolicyTO(policyDAO.save(policy));\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/account/create\")\n-    public AccountPolicyTO create(final HttpServletResponse response, final @RequestBody AccountPolicyTO policyTO)\n+    public AccountPolicyTO create(final HttpServletResponse response, @RequestBody final AccountPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n         LOG.debug(\"Creating policy \" + policyTO);\n \n         final AccountPolicy policy = binder.getPolicy(null, policyTO);\n \n+        auditManager.audit(Category.policy, PolicySubCategory.create, Result.success,\n+                \"Successfully created account policy: \" + policy.getId());\n+\n         return binder.getPolicyTO(policyDAO.save(policy));\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/sync/create\")\n-    public SyncPolicyTO create(final HttpServletResponse response, final @RequestBody SyncPolicyTO policyTO)\n+    public SyncPolicyTO create(final HttpServletResponse response, @RequestBody final SyncPolicyTO policyTO)\n             throws SyncopeClientCompositeErrorException {\n \n         LOG.debug(\"Creating policy \" + policyTO);\n \n         final SyncPolicy policy = binder.getPolicy(null, policyTO);\n \n+        auditManager.audit(Category.policy, PolicySubCategory.create, Result.success,\n+                \"Successfully created sync policy: \" + policy.getId());\n+\n         return binder.getPolicyTO(policyDAO.save(policy));\n     }\n \n-    private <T extends PolicyTO, K extends Policy> T update(T policyTO, K policy) {\n+    private <T extends PolicyTO, K extends Policy> T update(final T policyTO, final K policy) {\n \n         LOG.debug(\"Updating policy \" + policyTO);\n \n         binder.getPolicy(policy, policyTO);\n-        policy = policyDAO.save(policy);\n+        K savedPolicy = policyDAO.save(policy);\n \n-        return binder.getPolicyTO(policy);\n+        auditManager.audit(Category.policy, PolicySubCategory.update, Result.success,\n+                \"Successfully updated policy (\" + savedPolicy.getType() + \"): \" + savedPolicy.getId());\n+\n+        return binder.getPolicyTO(savedPolicy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/password/update\")\n-    public PasswordPolicyTO update(final HttpServletResponse response, final @RequestBody PasswordPolicyTO policyTO)\n+    public PasswordPolicyTO update(@RequestBody final PasswordPolicyTO policyTO)\n             throws NotFoundException {\n \n         Policy policy = policyDAO.find(policyTO.getId());\n-        if (policy == null || !(policy instanceof PasswordPolicy)) {\n+        if (!(policy instanceof PasswordPolicy)) {\n             throw new NotFoundException(\"PasswordPolicy with id \" + policyTO.getId());\n         }\n \n@@ -113,11 +133,11 @@ public PasswordPolicyTO update(final HttpServletResponse response, final @Reques\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/account/update\")\n-    public AccountPolicyTO update(final HttpServletResponse response, final @RequestBody AccountPolicyTO policyTO)\n+    public AccountPolicyTO update(@RequestBody final AccountPolicyTO policyTO)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         Policy policy = policyDAO.find(policyTO.getId());\n-        if (policy == null || !(policy instanceof AccountPolicy)) {\n+        if (!(policy instanceof AccountPolicy)) {\n             throw new NotFoundException(\"AccountPolicy with id \" + policyTO.getId());\n         }\n \n@@ -126,11 +146,11 @@ public AccountPolicyTO update(final HttpServletResponse response, final @Request\n \n     @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/sync/update\")\n-    public SyncPolicyTO update(final HttpServletResponse response, final @RequestBody SyncPolicyTO policyTO)\n+    public SyncPolicyTO update(@RequestBody final SyncPolicyTO policyTO)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         Policy policy = policyDAO.find(policyTO.getId());\n-        if (policy == null || !(policy instanceof SyncPolicy)) {\n+        if (!(policy instanceof SyncPolicy)) {\n             throw new NotFoundException(\"SyncPolicy with id \" + policyTO.getId());\n         }\n \n@@ -139,22 +159,25 @@ public SyncPolicyTO update(final HttpServletResponse response, final @RequestBod\n \n     @PreAuthorize(\"hasRole('POLICY_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n-    public List<PolicyTO> listByType(final HttpServletResponse response, @PathVariable(\"kind\") final String kind) {\n+    public List<PolicyTO> listByType(@PathVariable(\"kind\") final String kind) {\n \n         LOG.debug(\"Listing policies\");\n-        List<? extends Policy> policies = policyDAO.find(PolicyType.valueOf(kind.toUpperCase()));\n+        List<? extends Policy> policies = policyDAO.find(PolicyType.valueOf(kind.toUpperCase(Locale.ENGLISH)));\n \n         final List<PolicyTO> policyTOs = new ArrayList<PolicyTO>();\n         for (Policy policy : policies) {\n             policyTOs.add(binder.getPolicyTO(policy));\n         }\n \n+        auditManager.audit(Category.policy, PolicySubCategory.list, Result.success,\n+                \"Successfully listed all policies (\" + kind + \"): \" + policyTOs.size());\n+\n         return policyTOs;\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/password/global/read\")\n-    public PasswordPolicyTO getGlobalPasswordPolicy(final HttpServletResponse response) throws NotFoundException {\n+    public PasswordPolicyTO getGlobalPasswordPolicy() throws NotFoundException {\n \n         LOG.debug(\"Reading global password policy\");\n \n@@ -163,12 +186,15 @@ public PasswordPolicyTO getGlobalPasswordPolicy(final HttpServletResponse respon\n             throw new NotFoundException(\"No password policy found\");\n         }\n \n+        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n+                \"Successfully read global password policy: \" + policy.getId());\n+\n         return (PasswordPolicyTO) binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/account/global/read\")\n-    public AccountPolicyTO getGlobalAccountPolicy(final HttpServletResponse response) throws NotFoundException {\n+    public AccountPolicyTO getGlobalAccountPolicy() throws NotFoundException {\n \n         LOG.debug(\"Reading global account policy\");\n \n@@ -177,12 +203,15 @@ public AccountPolicyTO getGlobalAccountPolicy(final HttpServletResponse response\n             throw new NotFoundException(\"No account policy found\");\n         }\n \n+        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n+                \"Successfully read global account policy: \" + policy.getId());\n+\n         return (AccountPolicyTO) binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/sync/global/read\")\n-    public SyncPolicyTO getGlobalSyncPolicy(final HttpServletResponse response) throws NotFoundException {\n+    public SyncPolicyTO getGlobalSyncPolicy() throws NotFoundException {\n \n         LOG.debug(\"Reading global sync policy\");\n \n@@ -191,12 +220,15 @@ public SyncPolicyTO getGlobalSyncPolicy(final HttpServletResponse response) thro\n             throw new NotFoundException(\"No sync policy found\");\n         }\n \n+        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n+                \"Successfully read global sync policy: \" + policy.getId());\n+\n         return (SyncPolicyTO) binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{id}\")\n-    public PolicyTO read(final HttpServletResponse response, @PathVariable(\"id\") final Long id)\n+    public PolicyTO read(@PathVariable(\"id\") final Long id)\n             throws NotFoundException {\n \n         LOG.debug(\"Reading policy with id {}\", id);\n@@ -206,14 +238,20 @@ public PolicyTO read(final HttpServletResponse response, @PathVariable(\"id\") fin\n             throw new NotFoundException(\"Policy \" + id + \" not found\");\n         }\n \n+        auditManager.audit(Category.policy, PolicySubCategory.read, Result.success,\n+                \"Successfully read policy (\" + policy.getType() + \"): \" + policy.getId());\n+\n         return binder.getPolicyTO(policy);\n     }\n \n     @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{id}\")\n-    public void delete(final HttpServletResponse response, @PathVariable(\"id\") final Long id) throws NotFoundException {\n+    public void delete(@PathVariable(\"id\") final Long id) throws NotFoundException {\n \n         LOG.debug(\"Delete policy\");\n         policyDAO.delete(id);\n+\n+        auditManager.audit(Category.policy, PolicySubCategory.delete, Result.success,\n+                \"Successfully deleted policy: \" + id);\n     }\n }"},{"sha":"6187144f4171dd5a54417e1122a8ac60079682c7","filename":"core/src/main/java/org/syncope/core/rest/controller/ReportController.java","status":"modified","additions":59,"deletions":13,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -59,13 +59,17 @@\n import org.syncope.client.to.ReportTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.init.JobInstanceLoader;\n import org.syncope.core.persistence.beans.Report;\n import org.syncope.core.persistence.beans.ReportExec;\n import org.syncope.core.persistence.dao.ReportDAO;\n import org.syncope.core.persistence.dao.ReportExecDAO;\n import org.syncope.core.report.Reportlet;\n import org.syncope.core.rest.data.ReportDataBinder;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.ReportSubCategory;\n+import org.syncope.types.AuditElements.Result;\n import org.syncope.types.ReportExecExportFormat;\n import org.syncope.types.ReportExecStatus;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -74,6 +78,9 @@\n @RequestMapping(\"/report\")\n public class ReportController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private ReportDAO reportDAO;\n \n@@ -106,13 +113,17 @@ public ReportTO create(final HttpServletResponse response, @RequestBody final Re\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getId(), e);\n \n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);\n             throw scce;\n         }\n \n+        auditManager.audit(Category.report, ReportSubCategory.create, Result.success,\n+                \"Successfully created report: \" + report.getId());\n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getReportTO(report);\n     }\n@@ -143,6 +154,9 @@ public ReportTO update(@RequestBody final ReportTO reportTO) throws NotFoundExce\n             throw scce;\n         }\n \n+        auditManager.audit(Category.report, ReportSubCategory.update, Result.success,\n+                \"Successfully updated report: \" + report.getId());\n+\n         return binder.getReportTO(report);\n     }\n \n@@ -161,6 +175,9 @@ public List<ReportTO> list() {\n             result.add(binder.getReportTO(report));\n         }\n \n+        auditManager.audit(Category.report, ReportSubCategory.list, Result.success,\n+                \"Successfully listed all reports: \" + result.size());\n+\n         return result;\n     }\n \n@@ -173,6 +190,9 @@ public List<ReportTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"\n             result.add(binder.getReportTO(report));\n         }\n \n+        auditManager.audit(Category.report, ReportSubCategory.list, Result.success,\n+                \"Successfully listed reports (page=\" + page + \", size=\" + size + \"): \" + result.size());\n+\n         return result;\n     }\n \n@@ -185,6 +205,9 @@ public List<ReportExecTO> listExecutions() {\n             executionTOs.add(binder.getReportExecTO(execution));\n         }\n \n+        auditManager.audit(Category.report, ReportSubCategory.listExecutions, Result.success,\n+                \"Successfully listed all report executions: \" + executionTOs.size());\n+\n         return executionTOs;\n     }\n \n@@ -200,9 +223,10 @@ public ModelAndView getReportletConfClasses() {\n             }\n         }\n \n-        ModelAndView result = new ModelAndView();\n-        result.addObject(reportletConfClasses);\n-        return result;\n+        auditManager.audit(Category.report, ReportSubCategory.getReportletConfClasses, Result.success,\n+                \"Successfully listed all ReportletConf classes: \" + reportletConfClasses.size());\n+\n+        return new ModelAndView().addObject(reportletConfClasses);\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n@@ -214,6 +238,9 @@ public ReportTO read(@PathVariable(\"reportId\") final Long reportId) throws NotFo\n             throw new NotFoundException(\"Report \" + reportId);\n         }\n \n+        auditManager.audit(Category.report, ReportSubCategory.read, Result.success,\n+                \"Successfully read report: \" + report.getId());\n+\n         return binder.getReportTO(report);\n     }\n \n@@ -222,12 +249,15 @@ public ReportTO read(@PathVariable(\"reportId\") final Long reportId) throws NotFo\n     @Transactional(readOnly = true)\n     public ReportExecTO readExecution(@PathVariable(\"executionId\") final Long executionId) throws NotFoundException {\n \n-        ReportExec execution = reportExecDAO.find(executionId);\n-        if (execution == null) {\n+        ReportExec reportExec = reportExecDAO.find(executionId);\n+        if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n \n-        return binder.getReportExecTO(execution);\n+        auditManager.audit(Category.report, ReportSubCategory.readExecution, Result.success,\n+                \"Successfully read report execution: \" + reportExec.getId());\n+\n+        return binder.getReportExecTO(reportExec);\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_READ')\")\n@@ -319,6 +349,9 @@ public void exportExecutionResult(final HttpServletResponse response,\n                 LOG.error(\"While closing stream for execution result\", e);\n             }\n         }\n+\n+        auditManager.audit(Category.report, ReportSubCategory.exportExecutionResult, Result.success,\n+                \"Successfully exported report execution: \" + reportExec.getId());\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n@@ -335,10 +368,17 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throw\n \n             JobDataMap map = new JobDataMap();\n             scheduler.getScheduler().triggerJob(JobInstanceLoader.getJobName(report), Scheduler.DEFAULT_GROUP, map);\n+\n+            auditManager.audit(Category.report, ReportSubCategory.execute, Result.success,\n+                    \"Successfully started execution for report: \" + report.getId());\n         } catch (Exception e) {\n             LOG.error(\"While executing report {}\", report, e);\n \n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            auditManager.audit(Category.report, ReportSubCategory.execute, Result.failure,\n+                    \"Could not start execution for report: \" + report.getId(), e);\n+\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);\n@@ -356,7 +396,7 @@ public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId) throw\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{reportId}\")\n-    public void delete(@PathVariable(\"reportId\") Long reportId)\n+    public void delete(@PathVariable(\"reportId\") final Long reportId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         Report report = reportDAO.find(reportId);\n@@ -367,18 +407,24 @@ public void delete(@PathVariable(\"reportId\") Long reportId)\n         jobInstanceLoader.unregisterJob(report);\n \n         reportDAO.delete(report);\n+\n+        auditManager.audit(Category.report, ReportSubCategory.delete, Result.success,\n+                \"Successfully deleted report: \" + report.getId());\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/execution/delete/{executionId}\")\n-    public void deleteExecution(@PathVariable(\"executionId\") Long executionId)\n+    public void deleteExecution(@PathVariable(\"executionId\") final Long executionId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n-        ReportExec execution = reportExecDAO.find(executionId);\n-        if (execution == null) {\n+        ReportExec reportExec = reportExecDAO.find(executionId);\n+        if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n \n-        reportExecDAO.delete(execution);\n+        reportExecDAO.delete(reportExec);\n+\n+        auditManager.audit(Category.report, ReportSubCategory.deleteExecution, Result.success,\n+                \"Successfully deleted report execution: \" + reportExec.getId());\n     }\n }"},{"sha":"294edefbab4cd13332da5c7fb44e18a1e7e56cf8","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":46,"deletions":85,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -30,7 +30,6 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n@@ -43,7 +42,7 @@\n import org.syncope.client.to.ResourceTO;\n import org.syncope.client.to.SchemaMappingTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.ExternalResource;\n@@ -54,12 +53,17 @@\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ResourceDataBinder;\n import org.syncope.core.util.ConnObjectUtil;\n-import org.syncope.types.SyncopeClientExceptionType;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.ResourceSubCategory;\n+import org.syncope.types.AuditElements.Result;\n \n @Controller\n @RequestMapping(\"/resource\")\n public class ResourceController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n@@ -83,104 +87,71 @@ public class ResourceController extends AbstractController {\n \n     @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public ResourceTO create(final HttpServletResponse response, final @RequestBody ResourceTO resourceTO)\n+    public ResourceTO create(final HttpServletResponse response, @RequestBody final ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         LOG.debug(\"Resource creation: {}\", resourceTO);\n \n-        if (resourceTO == null) {\n-            LOG.error(\"Missing resource\");\n-\n-            throw new NotFoundException(\"Missing resource\");\n-        }\n-\n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-\n-        LOG.debug(\"Verify that resource doesn't exist yet\");\n-        if (resourceTO.getName() != null && resourceDAO.find(resourceTO.getName()) != null) {\n-            SyncopeClientException ex = new SyncopeClientException(SyncopeClientExceptionType.DataIntegrityViolation);\n-\n-            ex.addElement(\"Existing \" + resourceTO.getName());\n-            scce.addException(ex);\n-\n-            throw scce;\n-        }\n-\n-        ExternalResource resource = binder.create(resourceTO);\n-        if (resource == null) {\n-            LOG.error(\"Resource creation failed\");\n-\n-            SyncopeClientException ex = new SyncopeClientException(SyncopeClientExceptionType.Unknown);\n+        ExternalResource resource = resourceDAO.save(binder.create(resourceTO));\n \n-            scce.addException(ex);\n-\n-            throw scce;\n-        }\n-\n-        resource = resourceDAO.save(resource);\n+        auditManager.audit(Category.resource, ResourceSubCategory.create, Result.success,\n+                \"Successfully created resource: \" + resource.getName());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getResourceTO(resource);\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ResourceTO update(final HttpServletResponse response, final @RequestBody ResourceTO resourceTO)\n+    public ResourceTO update(@RequestBody final ResourceTO resourceTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n \n         LOG.debug(\"Role update request: {}\", resourceTO);\n \n-        ExternalResource resource = null;\n-        if (resourceTO != null && resourceTO.getName() != null) {\n-            resource = resourceDAO.find(resourceTO.getName());\n-        }\n+        ExternalResource resource = resourceDAO.find(resourceTO.getName());\n         if (resource == null) {\n-            LOG.error(\"Missing resource: {}\", resourceTO.getName());\n             throw new NotFoundException(\"Resource '\" + resourceTO.getName() + \"'\");\n         }\n \n         resource = binder.update(resource, resourceTO);\n-        if (resource == null) {\n-            LOG.error(\"Resource update failed\");\n-\n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-            SyncopeClientException ex = new SyncopeClientException(SyncopeClientExceptionType.Unknown);\n-            scce.addException(ex);\n-            throw scce;\n-        }\n-\n         resource = resourceDAO.save(resource);\n \n+        auditManager.audit(Category.resource, ResourceSubCategory.update, Result.success,\n+                \"Successfully updated resource: \" + resource.getName());\n+\n         return binder.getResourceTO(resource);\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{resourceName}\")\n-    public void delete(final HttpServletResponse response, final @PathVariable(\"resourceName\") String resourceName)\n+    public void delete(@PathVariable(\"resourceName\") final String resourceName)\n             throws NotFoundException {\n \n         ExternalResource resource = resourceDAO.find(resourceName);\n-\n         if (resource == null) {\n-            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n+        auditManager.audit(Category.resource, ResourceSubCategory.delete, Result.success,\n+                \"Successfully deleted resource: \" + resource.getName());\n+\n         resourceDAO.delete(resourceName);\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{resourceName}\")\n-    public ResourceTO read(final HttpServletResponse response, final @PathVariable(\"resourceName\") String resourceName)\n+    public ResourceTO read(@PathVariable(\"resourceName\") final String resourceName)\n             throws NotFoundException {\n \n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n-            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n+        auditManager.audit(Category.resource, ResourceSubCategory.read, Result.success,\n+                \"Successfully read resource: \" + resource.getName());\n+\n         return binder.getResourceTO(resource);\n     }\n \n@@ -189,7 +160,7 @@ public ResourceTO read(final HttpServletResponse response, final @PathVariable(\"\n     public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstanceId\") final Long connInstanceId)\n             throws NotFoundException {\n \n-        final List<ExternalResource> resources;\n+        List<ExternalResource> resources;\n \n         if (connInstanceId == null) {\n             resources = resourceDAO.findAll();\n@@ -198,37 +169,24 @@ public List<ResourceTO> list(@RequestParam(required = false, value = \"connInstan\n             resources = connInstance.getResources();\n         }\n \n-        if (resources == null) {\n-            LOG.error(\"No resources found\");\n-            throw new NotFoundException(\"No resources found\");\n-        }\n+        List<ResourceTO> result = binder.getResourceTOs(resources);\n+\n+        auditManager.audit(Category.resource, ResourceSubCategory.list, Result.success,\n+                connInstanceId == null\n+                ? \"Successfully listed all resources: \" + result.size()\n+                : \"Successfully listed resources for connector \" + connInstanceId + \": \" + result.size());\n \n-        return binder.getResourceTOs(resources);\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{roleName}/mappings\")\n-    public List<SchemaMappingTO> getRoleResourcesMapping(final HttpServletResponse response,\n-            @PathVariable(\"roleName\") final Long roleId) throws SyncopeClientCompositeErrorException {\n-\n-        SyncopeRole role = null;\n-        if (roleId != null) {\n-            role = roleDAO.find(roleId);\n-        }\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{roleId}/mappings\")\n+    public List<SchemaMappingTO> getRoleResourcesMapping(@PathVariable(\"roleId\") final Long roleId)\n+            throws NotFoundException {\n \n+        SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n-            LOG.error(\"Role \" + roleId + \" not found.\");\n-\n-            SyncopeClientCompositeErrorException compositeErrorException = new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n-\n-            SyncopeClientException ex = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n-\n-            ex.addElement(\"resource\");\n-\n-            compositeErrorException.addException(ex);\n-\n-            throw compositeErrorException;\n+            throw new NotFoundException(\"Role '\" + roleId + \"'\");\n         }\n \n         List<SchemaMappingTO> roleMappings = new ArrayList<SchemaMappingTO>();\n@@ -237,28 +195,28 @@ public List<SchemaMappingTO> getRoleResourcesMapping(final HttpServletResponse r\n             roleMappings.addAll(binder.getSchemaMappingTOs(resource.getMappings()));\n         }\n \n-        LOG.debug(\"Mappings found: {} \", roleMappings);\n+        auditManager.audit(Category.resource, ResourceSubCategory.getRoleResourcesMapping, Result.success,\n+                \"Found \" + roleMappings.size() + \" mappings for role \" + roleId);\n \n         return roleMappings;\n     }\n \n     @PreAuthorize(\"hasRole('RESOURCE_GETOBJECT')\")\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/read/{objectId}\")\n-    public ConnObjectTO getObject(final HttpServletResponse response,\n-            @PathVariable(\"resourceName\") String resourceName, @PathVariable(\"objectId\") final String objectId)\n+    public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourceName,\n+            @PathVariable(\"objectId\") final String objectId)\n             throws NotFoundException {\n \n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n-            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n         final ConnectorFacadeProxy connector = connLoader.getConnector(resource);\n \n-        final ConnectorObject connectorObject = connector.getObject(ObjectClass.ACCOUNT, new Uid(objectId), connector\n-                .getOperationOptions(resource));\n+        final ConnectorObject connectorObject = connector.getObject(ObjectClass.ACCOUNT, new Uid(objectId), connector.\n+                getOperationOptions(resource));\n \n         if (connectorObject == null) {\n             throw new NotFoundException(\"Object \" + objectId + \" not found on resource \" + resourceName);\n@@ -274,6 +232,9 @@ public ConnObjectTO getObject(final HttpServletResponse response,\n             attributes.add(connectorObject.getName());\n         }\n \n+        auditManager.audit(Category.resource, ResourceSubCategory.getObject, Result.success,\n+                \"Successfully read object \" + objectId + \" from resource \" + resourceName);\n+\n         return connObjectUtil.getConnObjectTO(connectorObject);\n     }\n }"},{"sha":"5d9913f06e3a8be361b7f034ac83a6e3284bfce4","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":42,"deletions":18,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -33,15 +33,22 @@\n import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.RoleDAO;\n import org.syncope.core.rest.data.RoleDataBinder;\n import org.syncope.core.util.EntitlementUtil;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n+import org.syncope.types.AuditElements.RoleSubCategory;\n \n @Controller\n @RequestMapping(\"/role\")\n public class RoleController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -50,34 +57,28 @@ public class RoleController extends AbstractController {\n \n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public RoleTO create(final HttpServletResponse response, final @RequestBody RoleTO roleTO)\n+    public RoleTO create(final HttpServletResponse response, @RequestBody final RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException, UnauthorizedRoleException {\n \n         LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (roleTO.getParent() != 0 && !allowedRoleIds.contains(roleTO.getParent())) {\n-\n             throw new UnauthorizedRoleException(roleTO.getParent());\n         }\n \n-        SyncopeRole role;\n-        try {\n-            role = roleDataBinder.create(roleTO);\n-        } catch (SyncopeClientCompositeErrorException e) {\n-            LOG.error(\"Could not create for \" + roleTO, e);\n+        SyncopeRole role = roleDAO.save(roleDataBinder.create(roleTO));\n \n-            throw e;\n-        }\n-        role = roleDAO.save(role);\n+        auditManager.audit(Category.role, RoleSubCategory.create, Result.success,\n+                \"Successfully created role: \" + role.getId());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return roleDataBinder.getRoleTO(role);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{roleId}\")\n-    public void delete(@PathVariable(\"roleId\") Long roleId) throws NotFoundException, UnauthorizedRoleException {\n+    public void delete(@PathVariable(\"roleId\") final Long roleId) throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n@@ -89,6 +90,9 @@ public void delete(@PathVariable(\"roleId\") Long roleId) throws NotFoundException\n             throw new UnauthorizedRoleException(role.getId());\n         }\n \n+        auditManager.audit(Category.role, RoleSubCategory.delete, Result.success,\n+                \"Successfully deleted role: \" + role.getId());\n+\n         roleDAO.delete(roleId);\n     }\n \n@@ -100,32 +104,42 @@ public List<RoleTO> list() {\n             roleTOs.add(roleDataBinder.getRoleTO(role));\n         }\n \n+        auditManager.audit(Category.role, RoleSubCategory.list, Result.success,\n+                \"Successfully listed all roles: \" + roleTOs.size());\n+\n         return roleTOs;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/parent/{roleId}\")\n-    public RoleTO parent(@PathVariable(\"roleId\") Long roleId) throws NotFoundException, UnauthorizedRoleException {\n+    public RoleTO parent(@PathVariable(\"roleId\") final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n-            throw new NotFoundException(\"Role \" + String.valueOf(roleId));\n+            throw new NotFoundException(\"Role \" + roleId);\n         }\n \n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         if (role.getParent() != null && !allowedRoleIds.contains(role.getParent().getId())) {\n-\n             throw new UnauthorizedRoleException(role.getParent().getId());\n         }\n \n-        return role.getParent() == null\n+        RoleTO result = role.getParent() == null\n                 ? null\n                 : roleDataBinder.getRoleTO(role.getParent());\n+\n+        auditManager.audit(Category.role, RoleSubCategory.parent, Result.success,\n+                result == null\n+                ? \"Role \" + role.getId() + \" is a root role\"\n+                : \"Found parent for role \" + role.getId() + \": \" + result.getId());\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/children/{roleId}\")\n-    public List<RoleTO> children(@PathVariable(\"roleId\") Long roleId) {\n+    public List<RoleTO> children(@PathVariable(\"roleId\") final Long roleId) {\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n         List<SyncopeRole> roles = roleDAO.findChildren(roleId);\n@@ -136,12 +150,16 @@ public List<RoleTO> children(@PathVariable(\"roleId\") Long roleId) {\n             }\n         }\n \n+        auditManager.audit(Category.role, RoleSubCategory.children, Result.success,\n+                \"Found \" + roleTOs.size() + \" children of role \" + roleId);\n+\n         return roleTOs;\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{roleId}\")\n-    public RoleTO read(@PathVariable(\"roleId\") Long roleId) throws NotFoundException, UnauthorizedRoleException {\n+    public RoleTO read(@PathVariable(\"roleId\") final Long roleId)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         SyncopeRole role = roleDAO.find(roleId);\n         if (role == null) {\n@@ -153,12 +171,15 @@ public RoleTO read(@PathVariable(\"roleId\") Long roleId) throws NotFoundException\n             throw new UnauthorizedRoleException(role.getId());\n         }\n \n+        auditManager.audit(Category.role, RoleSubCategory.read, Result.success,\n+                \"Successfully read role: \" + role.getId());\n+\n         return roleDataBinder.getRoleTO(role);\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public RoleTO update(@RequestBody RoleMod roleMod) throws NotFoundException, UnauthorizedRoleException {\n+    public RoleTO update(@RequestBody final RoleMod roleMod) throws NotFoundException, UnauthorizedRoleException {\n \n         LOG.debug(\"Role update called with parameter {}\", roleMod);\n \n@@ -175,6 +196,9 @@ public RoleTO update(@RequestBody RoleMod roleMod) throws NotFoundException, Una\n         roleDataBinder.update(role, roleMod);\n         role = roleDAO.save(role);\n \n+        auditManager.audit(Category.role, RoleSubCategory.update, Result.success,\n+                \"Successfully updated role: \" + role.getId());\n+\n         return roleDataBinder.getRoleTO(role);\n     }\n }"},{"sha":"9197335c95f4228e3fbeb8087b50451ca738c8f2","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":24,"deletions":6,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -30,15 +30,22 @@\n import org.springframework.web.bind.annotation.RequestMapping;\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.SchemaTO;\n-import org.syncope.core.rest.data.SchemaDataBinder;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.AbstractSchema;\n import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.rest.data.SchemaDataBinder;\n import org.syncope.core.util.AttributableUtil;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.SchemaSubCategory;\n+import org.syncope.types.AuditElements.Result;\n \n @Controller\n @RequestMapping(\"/schema\")\n public class SchemaController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private SchemaDAO schemaDAO;\n \n@@ -54,6 +61,9 @@ public SchemaTO create(final HttpServletResponse response, @RequestBody final Sc\n         schemaDataBinder.create(schemaTO, schema);\n         schema = schemaDAO.save(schema);\n \n+        auditManager.audit(Category.schema, SchemaSubCategory.create, Result.success,\n+                \"Successfully created schema: \" + kind + \"/\" + schema.getName());\n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return schemaDataBinder.getSchemaTO(schema, getAttributableUtil(kind));\n     }\n@@ -66,12 +76,13 @@ public void delete(@PathVariable(\"kind\") final String kind, @PathVariable(\"schem\n         Class reference = getAttributableUtil(kind).schemaClass();\n         AbstractSchema schema = schemaDAO.find(schemaName, reference);\n         if (schema == null) {\n-            LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n-\n-            throw new NotFoundException(schemaName);\n+            throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n \n         schemaDAO.delete(schemaName, getAttributableUtil(kind));\n+\n+        auditManager.audit(Category.schema, SchemaSubCategory.delete, Result.success,\n+                \"Successfully deleted schema: \" + kind + \"/\" + schema.getName());\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n@@ -84,6 +95,9 @@ public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n             schemaTOs.add(schemaDataBinder.getSchemaTO(schema, attributableUtil));\n         }\n \n+        auditManager.audit(Category.schema, SchemaSubCategory.list, Result.success,\n+                \"Successfully listed all schemas: \" + kind + \"/\" + schemaTOs.size());\n+\n         return schemaTOs;\n     }\n \n@@ -95,10 +109,12 @@ public SchemaTO read(@PathVariable(\"kind\") final String kind, @PathVariable(\"sch\n         AttributableUtil attributableUtil = getAttributableUtil(kind);\n         AbstractSchema schema = schemaDAO.find(schemaName, attributableUtil.schemaClass());\n         if (schema == null) {\n-            LOG.error(\"Could not find schema '\" + schemaName + \"'\");\n             throw new NotFoundException(\"Schema '\" + schemaName + \"'\");\n         }\n \n+        auditManager.audit(Category.schema, SchemaSubCategory.read, Result.success,\n+                \"Successfully read schema: \" + kind + \"/\" + schema.getName());\n+\n         return schemaDataBinder.getSchemaTO(schema, attributableUtil);\n     }\n \n@@ -110,13 +126,15 @@ public SchemaTO update(@RequestBody final SchemaTO schemaTO, @PathVariable(\"kind\n         AttributableUtil attributableUtil = getAttributableUtil(kind);\n         AbstractSchema schema = schemaDAO.find(schemaTO.getName(), attributableUtil.schemaClass());\n         if (schema == null) {\n-            LOG.error(\"Could not find schema '\" + schemaTO.getName() + \"'\");\n             throw new NotFoundException(\"Schema '\" + schemaTO.getName() + \"'\");\n         }\n \n         schemaDataBinder.update(schemaTO, schema, attributableUtil);\n         schema = schemaDAO.save(schema);\n \n+        auditManager.audit(Category.schema, SchemaSubCategory.update, Result.success,\n+                \"Successfully updated schema: \" + kind + \"/\" + schema.getName());\n+\n         return schemaDataBinder.getSchemaTO(schema, attributableUtil);\n     }\n }"},{"sha":"f9dcce4134e6003a7f3202bfa9aa245a8ceb669c","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":88,"deletions":33,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -52,6 +52,7 @@\n import org.syncope.client.to.TaskTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.init.JobInstanceLoader;\n import org.syncope.core.notification.NotificationManager;\n import org.syncope.core.persistence.beans.NotificationTask;\n@@ -69,6 +70,9 @@\n import org.syncope.core.scheduling.SyncJob;\n import org.syncope.core.scheduling.SyncJobActions;\n import org.syncope.core.util.TaskUtil;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n+import org.syncope.types.AuditElements.TaskSubCategory;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.PropagationTaskExecStatus;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -77,6 +81,9 @@\n @RequestMapping(\"/task\")\n public class TaskController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private TaskDAO taskDAO;\n \n@@ -126,13 +133,17 @@ public TaskTO createSchedTask(final HttpServletResponse response, @RequestBody f\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getId(), e);\n \n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);\n             throw scce;\n         }\n \n+        auditManager.audit(Category.task, TaskSubCategory.create, Result.success,\n+                \"Successfully created task: \" + task.getId() + \"/\" + taskUtil);\n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getTaskTO(task, taskUtil);\n     }\n@@ -173,6 +184,9 @@ public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO) throws NotFound\n             throw scce;\n         }\n \n+        auditManager.audit(Category.task, TaskSubCategory.update, Result.success,\n+                \"Successfully udpated task: \" + task.getId() + \"/\" + taskUtil);\n+\n         return binder.getTaskTO(task, taskUtil);\n     }\n \n@@ -193,6 +207,9 @@ public List<TaskTO> list(@PathVariable(\"kind\") final String kind) {\n             taskTOs.add(binder.getTaskTO(task, taskUtil));\n         }\n \n+        auditManager.audit(Category.task, TaskSubCategory.list, Result.success,\n+                \"Successfully listed all tasks: \" + taskTOs.size() + \"/\" + taskUtil);\n+\n         return taskTOs;\n     }\n \n@@ -209,6 +226,10 @@ public List<TaskTO> list(@PathVariable(\"kind\") final String kind, @PathVariable(\n             taskTOs.add(binder.getTaskTO(task, taskUtil));\n         }\n \n+        auditManager.audit(Category.task, TaskSubCategory.list, Result.success,\n+                \"Successfully listed all tasks (page=\" + page + \", size=\" + size + \"): \"\n+                + taskTOs.size() + \"/\" + taskUtil);\n+\n         return taskTOs;\n     }\n \n@@ -222,6 +243,9 @@ public List<TaskExecTO> listExecutions(@PathVariable(\"kind\") final String kind)\n             executionTOs.add(binder.getTaskExecTO(execution));\n         }\n \n+        auditManager.audit(Category.task, TaskSubCategory.listExecutions, Result.success,\n+                \"Successfully listed all task executions: \" + executionTOs.size() + \"/\" + kind);\n+\n         return executionTOs;\n     }\n \n@@ -237,8 +261,8 @@ public ModelAndView getJobClasses() {\n                 ClassMetadata metadata = cachingMetadataReaderFactory.getMetadataReader(resource).getClassMetadata();\n \n                 try {\n-                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(ClassUtils.forName(metadata\n-                            .getClassName(), ClassUtils.getDefaultClassLoader()));\n+                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(ClassUtils.forName(metadata.\n+                            getClassName(), ClassUtils.getDefaultClassLoader()));\n \n                     if ((interfaces.contains(Job.class) || interfaces.contains(StatefulJob.class))\n                             && !metadata.isAbstract() && !SyncJob.class.getName().equals(metadata.getClassName())\n@@ -255,9 +279,10 @@ public ModelAndView getJobClasses() {\n             LOG.error(\"While searching for class implementing {}\", Job.class.getName(), e);\n         }\n \n-        ModelAndView result = new ModelAndView();\n-        result.addObject(jobClasses);\n-        return result;\n+        auditManager.audit(Category.task, TaskSubCategory.getJobClasses, Result.success,\n+                \"Successfully listed all Job classes: \" + jobClasses.size());\n+\n+        return new ModelAndView().addObject(jobClasses);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n@@ -271,8 +296,8 @@ public ModelAndView getJobActionClasses() {\n                 ClassMetadata metadata = cachingMetadataReaderFactory.getMetadataReader(resource).getClassMetadata();\n \n                 try {\n-                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(ClassUtils.forName(metadata\n-                            .getClassName(), ClassUtils.getDefaultClassLoader()));\n+                    Set<Class> interfaces = ClassUtils.getAllInterfacesForClassAsSet(ClassUtils.forName(metadata.\n+                            getClassName(), ClassUtils.getDefaultClassLoader()));\n \n                     if (interfaces.contains(SyncJobActions.class) && !metadata.isAbstract()) {\n                         jobActionsClasses.add(metadata.getClassName());\n@@ -285,9 +310,10 @@ public ModelAndView getJobActionClasses() {\n             LOG.error(\"While searching for class implementing {}\", SyncJobActions.class.getName(), e);\n         }\n \n-        ModelAndView result = new ModelAndView();\n-        result.addObject(jobActionsClasses);\n-        return result;\n+        auditManager.audit(Category.task, TaskSubCategory.getJobActionClasses, Result.success,\n+                \"Successfully listed all SyncJobActions classes: \" + jobActionsClasses.size());\n+\n+        return new ModelAndView().addObject(jobActionsClasses);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n@@ -298,20 +324,27 @@ public TaskTO read(@PathVariable(\"taskId\") final Long taskId) throws NotFoundExc\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n+        TaskUtil taskUtil = getTaskUtil(task);\n+\n+        auditManager.audit(Category.task, TaskSubCategory.read, Result.success,\n+                \"Successfully read task: \" + task.getId() + \"/\" + taskUtil);\n \n-        return binder.getTaskTO(task, getTaskUtil(task));\n+        return binder.getTaskTO(task, taskUtil);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/execution/read/{executionId}\")\n     public TaskExecTO readExecution(@PathVariable(\"executionId\") final Long executionId) throws NotFoundException {\n \n-        TaskExec execution = taskExecDAO.find(executionId);\n-        if (execution == null) {\n+        TaskExec taskExec = taskExecDAO.find(executionId);\n+        if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n \n-        return binder.getTaskExecTO(execution);\n+        auditManager.audit(Category.task, TaskSubCategory.readExecution, Result.success,\n+                \"Successfully read task execution: \" + taskExec.getId());\n+\n+        return binder.getTaskExecTO(taskExec);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n@@ -323,10 +356,11 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n+        TaskUtil taskUtil = getTaskUtil(task);\n \n         TaskExecTO result = null;\n         LOG.debug(\"Execution started for {}\", task);\n-        switch (getTaskUtil(task)) {\n+        switch (taskUtil) {\n             case PROPAGATION:\n                 final TaskExec propExec = propagationManager.execute((PropagationTask) task);\n                 result = binder.getTaskExecTO(propExec);\n@@ -340,8 +374,8 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n             case SCHED:\n             case SYNC:\n                 try {\n-                    jobInstanceLoader.registerJob(task, ((SchedTask) task).getJobClassName(), ((SchedTask) task)\n-                            .getCronExpression());\n+                    jobInstanceLoader.registerJob(task, ((SchedTask) task).getJobClassName(), ((SchedTask) task).\n+                            getCronExpression());\n \n                     JobDataMap map = new JobDataMap();\n                     map.put(AbstractTaskJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n@@ -350,6 +384,9 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n                 } catch (Exception e) {\n                     LOG.error(\"While executing task {}\", task, e);\n \n+                    auditManager.audit(Category.task, TaskSubCategory.execute, Result.failure,\n+                            \"Could not start execution for task: \" + task.getId() + \"/\" + taskUtil, e);\n+\n                     SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(\n                             HttpStatus.BAD_REQUEST);\n                     SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n@@ -369,6 +406,9 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n         }\n         LOG.debug(\"Execution finished for {}, {}\", task, result);\n \n+        auditManager.audit(Category.task, TaskSubCategory.execute, Result.success,\n+                \"Successfully started execution for task: \" + task.getId() + \"/\" + taskUtil);\n+\n         return result;\n     }\n \n@@ -384,17 +424,17 @@ public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n \n-        SyncopeClientException invalidReportException = new SyncopeClientException(\n+        SyncopeClientException sce = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidPropagationTaskExecReport);\n \n         TaskUtil taskUtil = getTaskUtil(exec.getTask());\n-        if (taskUtil != TaskUtil.PROPAGATION) {\n-            invalidReportException.addElement(\"Task type: \" + taskUtil);\n-        } else {\n+        if (TaskUtil.PROPAGATION == taskUtil) {\n             PropagationTask task = (PropagationTask) exec.getTask();\n             if (task.getPropagationMode() != PropagationMode.TWO_PHASES) {\n-                invalidReportException.addElement(\"Propagation mode: \" + task.getPropagationMode());\n+                sce.addElement(\"Propagation mode: \" + task.getPropagationMode());\n             }\n+        } else {\n+            sce.addElement(\"Task type: \" + taskUtil);\n         }\n \n         switch (status) {\n@@ -405,52 +445,67 @@ public TaskExecTO report(@PathVariable(\"executionId\") final Long executionId,\n             case CREATED:\n             case SUBMITTED:\n             case UNSUBMITTED:\n-                invalidReportException.addElement(\"Execution status to be set: \" + status);\n+                sce.addElement(\"Execution status to be set: \" + status);\n                 break;\n \n             default:\n         }\n \n-        if (!invalidReportException.isEmpty()) {\n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n-            scce.addException(invalidReportException);\n+        if (!sce.isEmpty()) {\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            scce.addException(sce);\n+\n+            auditManager.audit(Category.task, TaskSubCategory.report, Result.failure,\n+                    \"Could not reported execution status: \" + exec.getId() + \"/\" + taskUtil, scce);\n+\n             throw scce;\n         }\n \n         exec.setStatus(status.toString());\n         exec.setMessage(message);\n         exec = taskExecDAO.save(exec);\n \n+        auditManager.audit(Category.task, TaskSubCategory.report, Result.success,\n+                \"Successfully reported execution status: \" + exec.getId() + \"/\" + taskUtil);\n+\n         return binder.getTaskExecTO(exec);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{taskId}\")\n-    public void delete(@PathVariable(\"taskId\") Long taskId)\n+    public void delete(@PathVariable(\"taskId\") final Long taskId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n         Task task = taskDAO.find(taskId);\n         if (task == null) {\n             throw new NotFoundException(\"Task \" + taskId);\n         }\n+        TaskUtil taskUtil = getTaskUtil(task);\n \n-        if (TaskUtil.SCHED == getTaskUtil(task) || TaskUtil.SYNC == getTaskUtil(task)) {\n+        if (TaskUtil.SCHED == taskUtil || TaskUtil.SYNC == taskUtil) {\n             jobInstanceLoader.unregisterJob(task);\n         }\n \n         taskDAO.delete(task);\n+\n+        auditManager.audit(Category.task, TaskSubCategory.delete, Result.success,\n+                \"Successfully deleted task: \" + task.getId() + \"/\" + taskUtil);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/execution/delete/{executionId}\")\n-    public void deleteExecution(@PathVariable(\"executionId\") Long executionId)\n+    public void deleteExecution(@PathVariable(\"executionId\") final Long executionId)\n             throws NotFoundException, SyncopeClientCompositeErrorException {\n \n-        TaskExec execution = taskExecDAO.find(executionId);\n-        if (execution == null) {\n+        TaskExec taskExec = taskExecDAO.find(executionId);\n+        if (taskExec == null) {\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n \n-        taskExecDAO.delete(execution);\n+        taskExecDAO.delete(taskExec);\n+\n+        auditManager.audit(Category.task, TaskSubCategory.deleteExecution, Result.success,\n+                \"Successfully deleted task execution: \" + taskExec.getId());\n     }\n }"},{"sha":"395ed3c1dd61ca48306a01014bd06d3b571bef4e","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":115,"deletions":55,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -18,17 +18,6 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Controller;\n-import org.springframework.web.bind.annotation.PathVariable;\n-import org.springframework.web.bind.annotation.RequestBody;\n-import org.springframework.web.bind.annotation.RequestMapping;\n-import org.springframework.web.bind.annotation.RequestMethod;\n-import org.springframework.web.bind.annotation.RequestParam;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.syncope.core.persistence.dao.UserDAO;\n-import org.syncope.core.propagation.PropagationException;\n-import org.syncope.core.rest.data.UserDataBinder;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n@@ -40,27 +29,41 @@\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.search.NodeCond;\n import org.syncope.client.to.MembershipTO;\n import org.syncope.client.to.PropagationTO;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowFormTO;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.notification.NotificationManager;\n import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n+import org.syncope.core.propagation.PropagationException;\n import org.syncope.core.propagation.PropagationHandler;\n import org.syncope.core.propagation.PropagationManager;\n-import org.syncope.core.rest.data.ConnInstanceDataBinder;\n+import org.syncope.core.rest.data.UserDataBinder;\n import org.syncope.core.util.ConnObjectUtil;\n import org.syncope.core.util.EntitlementUtil;\n import org.syncope.core.workflow.UserWorkflowAdapter;\n import org.syncope.core.workflow.WorkflowException;\n import org.syncope.core.workflow.WorkflowResult;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n+import org.syncope.types.AuditElements.UserSubCategory;\n import org.syncope.types.PropagationTaskExecStatus;\n \n /**\n@@ -78,6 +81,9 @@ public class UserController {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(UserController.class);\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -87,9 +93,6 @@ public class UserController {\n     @Autowired\n     private UserDataBinder userDataBinder;\n \n-    @Autowired\n-    private ConnInstanceDataBinder connInstanceDataBinder;\n-\n     @Autowired\n     private UserWorkflowAdapter wfAdapter;\n \n@@ -111,12 +114,15 @@ public class UserController {\n     public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n             @RequestParam(\"password\") final String password) throws NotFoundException, UnauthorizedRoleException {\n \n+        auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n+                \"Verified password for: \" + userId);\n+\n         return new ModelAndView().addObject(userDataBinder.verifyPassword(userId, password));\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/count\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public ModelAndView count() {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n@@ -125,7 +131,7 @@ public ModelAndView count() {\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/count\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public ModelAndView searchCount(@RequestBody final NodeCond searchCondition) throws InvalidSearchConditionException {\n \n         if (!searchCondition.checkValidity()) {\n@@ -140,23 +146,26 @@ public ModelAndView searchCount(@RequestBody final NodeCond searchCondition) thr\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> list() {\n-        List<SyncopeUser> users = userDAO.findAll(EntitlementUtil\n-                .getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n+        List<SyncopeUser> users =\n+                userDAO.findAll(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n \n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n \n         for (SyncopeUser user : users) {\n             userTOs.add(userDataBinder.getUserTO(user));\n         }\n \n+        auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n+                \"Successfully listed all users: \" + userTOs.size());\n+\n         return userTOs;\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/list/{page}/{size}\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"size\") final int size) {\n \n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -167,29 +176,42 @@ public List<UserTO> list(@PathVariable(\"page\") final int page, @PathVariable(\"si\n             userTOs.add(userDataBinder.getUserTO(user));\n         }\n \n+        auditManager.audit(Category.user, UserSubCategory.list, Result.success,\n+                \"Successfully listed all users (page=\" + page + \", size=\" + size + \"): \" + userTOs.size());\n+\n         return userTOs;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{userId}\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO read(@PathVariable(\"userId\") final Long userId) throws NotFoundException, UnauthorizedRoleException {\n \n-        return userDataBinder.getUserTO(userId);\n+        UserTO result = userDataBinder.getUserTO(userId);\n+\n+        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n+                \"Successfully read user: \" + userId);\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO read(@RequestParam(\"username\") final String username)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        return userDataBinder.getUserTO(username);\n+        UserTO result = userDataBinder.getUserTO(username);\n+\n+        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n+                \"Successfully read user: \" + username);\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> search(@RequestBody final NodeCond searchCondition) throws InvalidSearchConditionException {\n \n         LOG.debug(\"User search called with condition {}\", searchCondition);\n@@ -199,19 +221,22 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition) throws I\n             throw new InvalidSearchConditionException();\n         }\n \n-        List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(EntitlementUtil\n-                .getOwnedEntitlementNames()), searchCondition);\n+        List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(EntitlementUtil.\n+                getOwnedEntitlementNames()), searchCondition);\n         List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user));\n         }\n \n+        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n+                \"Successfully searched for users: \" + result.size());\n+\n         return result;\n     }\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/search/{page}/{size}\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVariable(\"page\") final int page,\n             @PathVariable(\"size\") final int size) throws InvalidSearchConditionException {\n \n@@ -222,14 +247,17 @@ public List<UserTO> search(@RequestBody final NodeCond searchCondition, @PathVar\n             throw new InvalidSearchConditionException();\n         }\n \n-        final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(EntitlementUtil\n-                .getOwnedEntitlementNames()), searchCondition, page, size);\n+        final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(EntitlementUtil.\n+                getOwnedEntitlementNames()), searchCondition, page, size);\n \n         final List<UserTO> result = new ArrayList<UserTO>(matchingUsers.size());\n         for (SyncopeUser user : matchingUsers) {\n             result.add(userDataBinder.getUserTO(user));\n         }\n \n+        auditManager.audit(Category.user, UserSubCategory.read, Result.success,\n+                \"Successfully searched for users (page=\" + page + \", size=\" + size + \"): \" + result.size());\n+\n         return result;\n     }\n \n@@ -253,8 +281,8 @@ public UserTO create(final HttpServletResponse response, @RequestBody final User\n \n         WorkflowResult<Map.Entry<Long, Boolean>> created = wfAdapter.create(userTO);\n \n-        List<PropagationTask> tasks = propagationManager.getCreateTaskIds(created, userTO.getPassword(), userTO\n-                .getVirtualAttributes());\n+        List<PropagationTask> tasks = propagationManager.getCreateTaskIds(\n+                created, userTO.getPassword(), userTO.getVirtualAttributes());\n \n         final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n \n@@ -284,11 +312,13 @@ public void handle(final String resourceName, final PropagationTaskExecStatus ex\n                 created.getPerformedTasks()));\n \n         final UserTO savedTO = userDataBinder.getUserTO(created.getResult().getKey());\n-\n         savedTO.setPropagationTOs(propagations);\n \n         LOG.debug(\"About to return created user\\n{}\", savedTO);\n \n+        auditManager.audit(Category.user, UserSubCategory.create, Result.success,\n+                \"Successfully created user: \" + savedTO.getUsername());\n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return savedTO;\n     }\n@@ -302,8 +332,8 @@ public UserTO update(@RequestBody final UserMod userMod)\n \n         WorkflowResult<Map.Entry<Long, Boolean>> updated = wfAdapter.update(userMod);\n \n-        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(updated, userMod.getPassword(), userMod\n-                .getVirtualAttributesToBeRemoved(), userMod.getVirtualAttributesToBeUpdated(), null);\n+        List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(updated, userMod.getPassword(), userMod.\n+                getVirtualAttributesToBeRemoved(), userMod.getVirtualAttributesToBeUpdated(), null);\n \n         final List<PropagationTO> propagations = new ArrayList<PropagationTO>();\n \n@@ -333,17 +363,19 @@ public void handle(final String resourceName, final PropagationTaskExecStatus ex\n                 updated.getPerformedTasks()));\n \n         final UserTO updatedTO = userDataBinder.getUserTO(updated.getResult().getKey());\n-\n         updatedTO.setPropagationTOs(propagations);\n \n+        auditManager.audit(Category.user, UserSubCategory.update, Result.success,\n+                \"Successfully updated user: \" + updatedTO.getUsername());\n+\n         LOG.debug(\"About to return updated user\\n{}\", updatedTO);\n \n         return updatedTO;\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/activate\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public UserTO activate(@RequestBody final UserTO userTO,\n             @RequestParam(required = false) final Set<String> resourceNames,\n             @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n@@ -362,7 +394,7 @@ public UserTO activate(@RequestBody final UserTO userTO,\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/suspend/{userId}\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n             @RequestParam(required = false) final Set<String> resourceNames,\n             @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n@@ -381,7 +413,7 @@ public UserTO suspend(@PathVariable(\"userId\") final Long userId,\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/reactivate/{userId}\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO reactivate(final @PathVariable(\"userId\") Long userId,\n             @RequestParam(required = false) final Set<String> resourceNames,\n             @RequestParam(required = false, defaultValue = \"true\") final Boolean performLocally,\n@@ -441,6 +473,9 @@ public void handle(final String resourceName, final PropagationTaskExecStatus ex\n \n         wfAdapter.delete(userId);\n \n+        auditManager.audit(Category.user, UserSubCategory.delete, Result.success,\n+                \"Successfully deleted user: \" + userTO.getUsername());\n+\n         LOG.debug(\"User successfully deleted: {}\", userId);\n \n         return userTO;\n@@ -466,53 +501,75 @@ public UserTO executeWorkflow(@RequestBody final UserTO userTO, @PathVariable(\"t\n \n         LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n+        auditManager.audit(Category.user, UserSubCategory.executeWorkflow, Result.success,\n+                \"Successfully executed workflow action \" + taskId + \" on user: \" + userTO.getUsername());\n+\n         return savedTO;\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/list\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public List<WorkflowFormTO> getForms() {\n-        return wfAdapter.getForms();\n+        List<WorkflowFormTO> forms = wfAdapter.getForms();\n+\n+        auditManager.audit(Category.user, UserSubCategory.getForms, Result.success,\n+                \"Successfully list workflow forms: \" + forms.size());\n+\n+        return forms;\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_READ') and hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/{userId}\")\n-    @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Transactional(readOnly = true, rollbackFor = {Throwable.class})\n     public WorkflowFormTO getFormForUser(@PathVariable(\"userId\") final Long userId)\n             throws UnauthorizedRoleException, NotFoundException, WorkflowException {\n \n         SyncopeUser user = userDataBinder.getUserFromId(userId);\n-        return wfAdapter.getForm(user.getWorkflowId());\n+        WorkflowFormTO result = wfAdapter.getForm(user.getWorkflowId());\n+\n+        auditManager.audit(Category.user, UserSubCategory.getFormForUser, Result.success,\n+                \"Successfully read workflow form for user: \" + user.getUsername());\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_CLAIM')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/workflow/form/claim/{taskId}\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public WorkflowFormTO claimForm(@PathVariable(\"taskId\") final String taskId)\n             throws NotFoundException, WorkflowException {\n \n-        return wfAdapter.claimForm(taskId, SecurityContextHolder.getContext().getAuthentication().getName());\n+        WorkflowFormTO result = wfAdapter.claimForm(taskId,\n+                SecurityContextHolder.getContext().getAuthentication().getName());\n+\n+        auditManager.audit(Category.user, UserSubCategory.claimForm, Result.success,\n+                \"Successfully claimed workflow form: \" + taskId);\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_FORM_SUBMIT')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/workflow/form/submit\")\n-    @Transactional(rollbackFor = { Throwable.class })\n+    @Transactional(rollbackFor = {Throwable.class})\n     public UserTO submitForm(@RequestBody final WorkflowFormTO form)\n             throws NotFoundException, WorkflowException, PropagationException, UnauthorizedRoleException {\n \n         LOG.debug(\"About to process form {}\", form);\n \n-        WorkflowResult<Map.Entry<Long, String>> updated = wfAdapter.submitForm(form, SecurityContextHolder.getContext()\n-                .getAuthentication().getName());\n+        WorkflowResult<Map.Entry<Long, String>> updated = wfAdapter.submitForm(form, SecurityContextHolder.getContext().\n+                getAuthentication().getName());\n \n         List<PropagationTask> tasks = propagationManager.getUpdateTaskIds(new WorkflowResult<Map.Entry<Long, Boolean>>(\n-                new DefaultMapEntry(updated.getResult().getKey(), Boolean.TRUE), updated.getPropByRes(), updated\n-                        .getPerformedTasks()), updated.getResult().getValue(), null, null);\n+                new DefaultMapEntry(updated.getResult().getKey(), Boolean.TRUE), updated.getPropByRes(), updated.\n+                getPerformedTasks()), updated.getResult().getValue(), null, null);\n         propagationManager.execute(tasks);\n \n         final UserTO savedTO = userDataBinder.getUserTO(updated.getResult().getKey());\n \n+        auditManager.audit(Category.user, UserSubCategory.submitForm, Result.success,\n+                \"Successfully submitted workflow form for user: \" + savedTO.getUsername());\n+\n         LOG.debug(\"About to return user after form processing\\n{}\", savedTO);\n \n         return savedTO;\n@@ -544,13 +601,13 @@ private UserTO setStatus(final SyncopeUser user, final Set<String> resourceNames\n \n         // Resources to exclude from propagation.\n         Set<String> resources = new HashSet<String>();\n-        if (!performRemotely) {\n-            resources.addAll(user.getResourceNames());\n-        } else {\n+        if (performRemotely) {\n             if (resourceNames != null) {\n                 resources.addAll(user.getResourceNames());\n                 resources.removeAll(resourceNames);\n             }\n+        } else {\n+            resources.addAll(user.getResourceNames());\n         }\n \n         tasks = propagationManager.getUpdateTaskIds(user, status, resources);\n@@ -560,7 +617,10 @@ private UserTO setStatus(final SyncopeUser user, final Set<String> resourceNames\n \n         final UserTO savedTO = userDataBinder.getUserTO(updated.getResult());\n \n-        LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n+        auditManager.audit(Category.user, UserSubCategory.setStatus, Result.success,\n+                \"Successfully changed status to \" + savedTO.getStatus() + \" for user: \" + savedTO.getUsername());\n+\n+        LOG.debug(\"About to return updated user\\n{}\", savedTO);\n \n         return savedTO;\n     }"},{"sha":"1815cdb94725600c8826e92a5b3ec5bf455ea647","filename":"core/src/main/java/org/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":56,"deletions":19,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -36,11 +36,15 @@\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.UserRequestTO;\n import org.syncope.client.to.UserTO;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.beans.UserRequest;\n import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.dao.UserRequestDAO;\n import org.syncope.core.rest.data.UserRequestDataBinder;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n+import org.syncope.types.AuditElements.UserRequestSubCategory;\n \n @Controller\n @RequestMapping(\"/user/request\")\n@@ -51,6 +55,9 @@ public class UserRequestController {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(UserRequestController.class);\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private ConfDAO confDAO;\n \n@@ -65,7 +72,12 @@ public class UserRequestController {\n     @Transactional(readOnly = true)\n     public UserTO read() throws NotFoundException {\n \n-        return dataBinder.getAuthUserTO();\n+        UserTO userTO = dataBinder.getAuthUserTO();\n+\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.read, Result.success,\n+                \"Successfully read self data\");\n+\n+        return userTO;\n     }\n \n     private Boolean isCreateAllowedByConf() {\n@@ -78,6 +90,9 @@ private Boolean isCreateAllowedByConf() {\n     @Transactional(readOnly = true)\n     public ModelAndView isCreateAllowed() {\n \n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.isCreateAllowed, Result.success,\n+                \"Successfully checked whether self create is allowed\");\n+\n         return new ModelAndView().addObject(isCreateAllowedByConf());\n     }\n \n@@ -95,47 +110,38 @@ public UserRequestTO create(@RequestBody final UserTO userTO) throws Unauthorize\n         try {\n             dataBinder.testCreate(userTO);\n         } catch (RollbackException e) {\n+            LOG.debug(\"Testing create - ignore exception\");\n         }\n \n         UserRequest request = new UserRequest();\n         request.setUserTO(userTO);\n         request = userRequestDAO.save(request);\n \n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.create, Result.success,\n+                \"Successfully created user request for \" + request.getUserTO().getUsername());\n+\n         return dataBinder.getUserRequestTO(request);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public UserRequestTO update(@RequestBody final UserMod userMod) throws NotFoundException, UnauthorizedRoleException {\n+    public UserRequestTO update(@RequestBody final UserMod userMod)\n+            throws NotFoundException, UnauthorizedRoleException {\n \n         LOG.debug(\"Request user update called with {}\", userMod);\n \n         try {\n             dataBinder.testUpdate(userMod);\n         } catch (RollbackException e) {\n+            LOG.debug(\"Testing update - ignore exception\");\n         }\n \n         UserRequest request = new UserRequest();\n         request.setUserMod(userMod);\n         request = userRequestDAO.save(request);\n \n-        return dataBinder.getUserRequestTO(request);\n-    }\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    @RequestMapping(method = RequestMethod.POST, value = \"/delete\")\n-    public UserRequestTO delete(@RequestBody final Long userId) throws NotFoundException, UnauthorizedRoleException {\n-\n-        LOG.debug(\"Request user delete called with {}\", userId);\n-\n-        try {\n-            dataBinder.testDelete(userId);\n-        } catch (RollbackException e) {\n-        }\n-\n-        UserRequest request = new UserRequest();\n-        request.setUserId(userId);\n-        request = userRequestDAO.save(request);\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.update, Result.success,\n+                \"Successfully updated user request for \" + request.getUserMod().getUsername());\n \n         return dataBinder.getUserRequestTO(request);\n     }\n@@ -150,6 +156,9 @@ public List<UserRequestTO> list() {\n             result.add(dataBinder.getUserRequestTO(request));\n         }\n \n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.list, Result.success,\n+                \"Successfully listed all user requests: \" + result.size());\n+\n         return result;\n     }\n \n@@ -163,6 +172,31 @@ public UserRequestTO read(@PathVariable(\"requestId\") final Long requestId) throw\n             throw new NotFoundException(\"User request \" + requestId);\n         }\n \n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.read, Result.success,\n+                \"Successfully read user request for \" + request.getUserTO().getUsername());\n+\n+        return dataBinder.getUserRequestTO(request);\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/delete\")\n+    public UserRequestTO delete(@RequestBody final Long userId) throws NotFoundException, UnauthorizedRoleException {\n+\n+        LOG.debug(\"Request user delete called with {}\", userId);\n+\n+        try {\n+            dataBinder.testDelete(userId);\n+        } catch (RollbackException e) {\n+            LOG.debug(\"Testing delete - ignore exception\");\n+        }\n+\n+        UserRequest request = new UserRequest();\n+        request.setUserId(userId);\n+        request = userRequestDAO.save(request);\n+\n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n+                \"Successfully deleted user request for user\" + userId);\n+\n         return dataBinder.getUserRequestTO(request);\n     }\n \n@@ -175,6 +209,9 @@ public void deleteRequest(@PathVariable(\"requestId\") final Long requestId) throw\n             throw new NotFoundException(\"User request \" + requestId);\n         }\n \n+        auditManager.audit(Category.userRequest, UserRequestSubCategory.delete, Result.success,\n+                \"Successfully deleted user request for user\" + request.getUserId());\n+\n         userRequestDAO.delete(requestId);\n     }\n }"},{"sha":"dba5f289f6d281409f41137b0ddeb4aa73c87988","filename":"core/src/main/java/org/syncope/core/rest/controller/VirtualSchemaController.java","status":"modified","additions":33,"deletions":17,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FVirtualSchemaController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -31,14 +31,21 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.syncope.client.to.VirtualSchemaTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.AbstractVirSchema;\n import org.syncope.core.persistence.dao.VirSchemaDAO;\n import org.syncope.core.rest.data.VirtualSchemaDataBinder;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n+import org.syncope.types.AuditElements.SchemaSubCategory;\n \n @Controller\n @RequestMapping(\"/virtualSchema\")\n public class VirtualSchemaController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private VirSchemaDAO virtualSchemaDAO;\n \n@@ -51,29 +58,32 @@ public VirtualSchemaTO create(final HttpServletResponse response,\n             @RequestBody final VirtualSchemaTO virtualSchemaTO, @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException {\n \n-        AbstractVirSchema virtualSchema = virtualSchemaDataBinder.create(virtualSchemaTO, getAttributableUtil(kind)\n-                .newVirtualSchema(), getAttributableUtil(kind).schemaClass());\n+        AbstractVirSchema virtualSchema = virtualSchemaDAO.save(virtualSchemaDataBinder.create(\n+                virtualSchemaTO, getAttributableUtil(kind).newVirtualSchema(),\n+                getAttributableUtil(kind).schemaClass()));\n \n-        virtualSchema = virtualSchemaDAO.save(virtualSchema);\n+        auditManager.audit(Category.schema, SchemaSubCategory.createVirtual, Result.success,\n+                \"Successfully created virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n \n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n     }\n \n     @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE, value = \"/{kind}/delete/{schema}\")\n-    public void delete(HttpServletResponse response, @PathVariable(\"kind\") final String kind,\n+    public void delete(@PathVariable(\"kind\") final String kind,\n             @PathVariable(\"schema\") final String virtualSchemaName) throws NotFoundException {\n \n         Class reference = getAttributableUtil(kind).virtualSchemaClass();\n         AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaName, reference);\n         if (virtualSchema == null) {\n-            LOG.error(\"Could not find virtual schema '\" + virtualSchemaName + \"'\");\n-\n-            throw new NotFoundException(virtualSchemaName);\n-        } else {\n-            virtualSchemaDAO.delete(virtualSchemaName, getAttributableUtil(kind));\n+            throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n         }\n+\n+        virtualSchemaDAO.delete(virtualSchemaName, getAttributableUtil(kind));\n+\n+        auditManager.audit(Category.schema, SchemaSubCategory.deleteVirtual, Result.success,\n+                \"Successfully deleted virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n     }\n \n     @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n@@ -83,10 +93,12 @@ public List<VirtualSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n \n         List<VirtualSchemaTO> virtualSchemaTOs = new ArrayList<VirtualSchemaTO>(virtualAttributeSchemas.size());\n         for (AbstractVirSchema virtualSchema : virtualAttributeSchemas) {\n-\n             virtualSchemaTOs.add(virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema));\n         }\n \n+        auditManager.audit(Category.schema, SchemaSubCategory.listVirtual, Result.success,\n+                \"Successfully listed all virtual schemas: \" + kind + \"/\" + virtualSchemaTOs.size());\n+\n         return virtualSchemaTOs;\n     }\n \n@@ -98,10 +110,12 @@ public VirtualSchemaTO read(@PathVariable(\"kind\") final String kind,\n         Class reference = getAttributableUtil(kind).virtualSchemaClass();\n         AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaName, reference);\n         if (virtualSchema == null) {\n-            LOG.error(\"Could not find virtual schema '\" + virtualSchemaName + \"'\");\n-            throw new NotFoundException(virtualSchemaName);\n+            throw new NotFoundException(\"Virtual schema '\" + virtualSchemaName + \"'\");\n         }\n \n+        auditManager.audit(Category.schema, SchemaSubCategory.readVirtual, Result.success,\n+                \"Successfully read virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n+\n         return virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n     }\n \n@@ -113,14 +127,16 @@ public VirtualSchemaTO update(@RequestBody final VirtualSchemaTO virtualSchemaTO\n         Class reference = getAttributableUtil(kind).virtualSchemaClass();\n         AbstractVirSchema virtualSchema = virtualSchemaDAO.find(virtualSchemaTO.getName(), reference);\n         if (virtualSchema == null) {\n-            LOG.error(\"Could not find virtual schema '\" + virtualSchemaTO.getName() + \"'\");\n-            throw new NotFoundException(virtualSchemaTO.getName());\n+            throw new NotFoundException(\"Virtual schema '\" + virtualSchema.getName() + \"'\");\n         }\n \n-        virtualSchema = virtualSchemaDataBinder.update(virtualSchemaTO, virtualSchema, getAttributableUtil(kind)\n-                .schemaClass());\n-\n+        virtualSchema = virtualSchemaDataBinder.update(virtualSchemaTO, virtualSchema,\n+                getAttributableUtil(kind).schemaClass());\n         virtualSchema = virtualSchemaDAO.save(virtualSchema);\n+\n+        auditManager.audit(Category.schema, SchemaSubCategory.updateVirtual, Result.success,\n+                \"Successfully updated virtual schema: \" + kind + \"/\" + virtualSchema.getName());\n+\n         return virtualSchemaDataBinder.getVirtualSchemaTO(virtualSchema);\n     }\n }"},{"sha":"b27854b6c5b274653d86d5c21bc524918f8d0b9a","filename":"core/src/main/java/org/syncope/core/rest/controller/WorkflowController.java","status":"modified","additions":23,"deletions":2,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FWorkflowController.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -18,6 +18,7 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import java.util.List;\n import javassist.NotFoundException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -28,13 +29,20 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.WorkflowDefinitionTO;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.workflow.UserWorkflowAdapter;\n import org.syncope.core.workflow.WorkflowException;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n+import org.syncope.types.AuditElements.WorkflowSubCategory;\n \n @Controller\n @RequestMapping(\"/workflow\")\n public class WorkflowController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private UserWorkflowAdapter wfAdapter;\n \n@@ -43,7 +51,12 @@ public class WorkflowController extends AbstractController {\n     @Transactional(readOnly = true)\n     public WorkflowDefinitionTO getDefinition() throws WorkflowException {\n \n-        return wfAdapter.getDefinition();\n+        WorkflowDefinitionTO result = wfAdapter.getDefinition();\n+\n+        auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinition, Result.success,\n+                \"Successfully got workflow definition\");\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_DEF_UPDATE')\")\n@@ -52,12 +65,20 @@ public void updateDefinition(@RequestBody final WorkflowDefinitionTO definition)\n             throws NotFoundException, WorkflowException {\n \n         wfAdapter.updateDefinition(definition);\n+\n+        auditManager.audit(Category.workflow, WorkflowSubCategory.updateDefinition, Result.success,\n+                \"Successfully updated workflow definition\");\n     }\n \n     @PreAuthorize(\"hasRole('WORKFLOW_TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/tasks\")\n     public ModelAndView getDefinedTasks() throws WorkflowException {\n \n-        return new ModelAndView().addObject(wfAdapter.getDefinedTasks());\n+        List<String> definedTasks = wfAdapter.getDefinedTasks();\n+\n+        auditManager.audit(Category.workflow, WorkflowSubCategory.getDefinedTasks, Result.success,\n+                \"Successfully got the list of defined workflow tasks: \" + definedTasks.size());\n+\n+        return new ModelAndView().addObject(definedTasks);\n     }\n }"},{"sha":"68576b83294cbda2f3bad3a2d89e027b6fa9e11d","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -126,12 +126,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         return resource;\n     }\n \n-    public List<ResourceTO> getResourceTOs(Collection<ExternalResource> resources) {\n-\n-        if (resources == null) {\n-            return null;\n-        }\n-\n+    public List<ResourceTO> getResourceTOs(final Collection<ExternalResource> resources) {\n         List<ResourceTO> resourceTOs = new ArrayList<ResourceTO>();\n         for (ExternalResource resource : resources) {\n             resourceTOs.add(getResourceTO(resource));\n@@ -140,7 +135,7 @@ public List<ResourceTO> getResourceTOs(Collection<ExternalResource> resources) {\n         return resourceTOs;\n     }\n \n-    public ResourceTO getResourceTO(ExternalResource resource) {\n+    public ResourceTO getResourceTO(final ExternalResource resource) {\n \n         if (resource == null) {\n             return null;"},{"sha":"4a1c88c9dc19c29333f2af864f94b8870fa082f3","filename":"core/src/main/java/org/syncope/core/scheduling/NotificationJob.java","status":"modified","additions":22,"deletions":8,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -31,11 +31,15 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n import org.springframework.mail.javamail.MimeMessageHelper;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.NotificationTask;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.persistence.dao.TaskExecDAO;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.NotificationSubCategory;\n+import org.syncope.types.AuditElements.Result;\n import org.syncope.types.TraceLevel;\n \n /**\n@@ -57,6 +61,9 @@ enum Status {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJob.class);\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     /**\n      * Task DAO.\n      */\n@@ -94,8 +101,8 @@ private void init() {\n         smtpUsername = confDAO.find(\"smtp.username\", \"\").getValue();\n         smtpPassword = confDAO.find(\"smtp.password\", \"\").getValue();\n \n-        LOG.debug(\"SMTP details fetched: {}:{} / {}:[PASSWORD_NOT_SHOWN]\", new Object[] { smtpHost, smtpPort,\n-                smtpUsername });\n+        LOG.debug(\"SMTP details fetched: {}:{} / {}:[PASSWORD_NOT_SHOWN]\",\n+                new Object[]{smtpHost, smtpPort, smtpUsername});\n     }\n \n     public TaskExec executeSingle(final NotificationTask task) {\n@@ -154,10 +161,11 @@ public TaskExec executeSingle(final NotificationTask task) {\n                     StringBuilder report = new StringBuilder();\n                     switch (task.getTraceLevel()) {\n                         case ALL:\n-                            report.append(\"FROM: \").append(task.getSender()).append('\\n').append(\"TO: \").append(to)\n-                                    .append('\\n').append(\"SUBJECT: \").append(task.getSubject()).append('\\n').append(\n-                                            '\\n').append(task.getTextBody()).append('\\n').append('\\n').append(\n-                                            task.getHtmlBody()).append('\\n');\n+                            report.append(\"FROM: \").append(task.getSender()).append('\\n').\n+                                    append(\"TO: \").append(to).append('\\n').\n+                                    append(\"SUBJECT: \").append(task.getSubject()).append('\\n').append('\\n').\n+                                    append(task.getTextBody()).append('\\n').append('\\n').\n+                                    append(task.getHtmlBody()).append('\\n');\n                             break;\n \n                         case SUMMARY:\n@@ -171,6 +179,9 @@ public TaskExec executeSingle(final NotificationTask task) {\n                     if (report.length() > 0) {\n                         execution.setMessage(report.toString());\n                     }\n+\n+                    auditManager.audit(Category.notification, NotificationSubCategory.sent, Result.success,\n+                            \"Successfully sent notification to \" + to);\n                 } catch (Throwable t) {\n                     LOG.error(\"Could not send e-mail\", t);\n \n@@ -183,6 +194,9 @@ public TaskExec executeSingle(final NotificationTask task) {\n \n                         execution.setMessage(exceptionWriter.toString());\n                     }\n+\n+                    auditManager.audit(Category.notification, NotificationSubCategory.sent, Result.failure,\n+                            \"Could not send notification to \" + to, t);\n                 }\n \n                 execution.setEndDate(new Date());\n@@ -214,8 +228,8 @@ private boolean hasToBeRegistered(final TaskExec execution) {\n \n         // True if either failed and failures have to be registered, or if ALL\n         // has to be registered.\n-        return (Status.valueOf(execution.getStatus()) == Status.NOT_SENT && task.getTraceLevel().ordinal() >= TraceLevel.FAILURES\n-                .ordinal())\n+        return (Status.valueOf(execution.getStatus()) == Status.NOT_SENT\n+                && task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal())\n                 || task.getTraceLevel() == TraceLevel.ALL;\n     }\n }"},{"sha":"b7d1f7fe6af5c933388cf54a09f78caed897a3c3","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8d5c79e522f6e80a5556f81b89fc99d892a29504/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=8d5c79e522f6e80a5556f81b89fc99d892a29504","patch":"@@ -84,7 +84,7 @@ public void setSyncopeUserDetailsService(SyncopeUserDetailsService syncopeUserDe\n     }\n \n     @Override\n-    @Transactional(noRollbackFor = { BadCredentialsException.class })\n+    @Transactional(noRollbackFor = {BadCredentialsException.class})\n     public Authentication authenticate(final Authentication authentication) throws AuthenticationException {\n \n         boolean authenticated;\n@@ -116,17 +116,17 @@ public Authentication authenticate(final Authentication authentication) throws A\n         Authentication result;\n \n         if ((user == null || !user.getSuspended()) && authenticated) {\n-            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(authentication\n-                    .getPrincipal(), null, userDetailsService.loadUserByUsername(\n+            UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(authentication.\n+                    getPrincipal(), null, userDetailsService.loadUserByUsername(\n                     authentication.getPrincipal().toString()).getAuthorities());\n             token.setDetails(authentication.getDetails());\n \n             result = token;\n \n             auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.success,\n                     \"Successfully authenticated, with roles: \" + token.getAuthorities());\n-            LOG.debug(\"User {} successfully authenticated, with roles {}\", authentication.getPrincipal(), token\n-                    .getAuthorities());\n+            LOG.debug(\"User {} successfully authenticated, with roles {}\", authentication.getPrincipal(), token.\n+                    getAuthorities());\n \n             if (user != null) {\n                 user.setLastLoginDate(new Date());\n@@ -140,8 +140,8 @@ public Authentication authenticate(final Authentication authentication) throws A\n                 userDAO.save(user);\n             }\n \n-            auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.failure, \"User \"\n-                    + authentication.getPrincipal() + \" not authenticated\");\n+            auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.failure,\n+                    \"User \" + authentication.getPrincipal() + \" not authenticated\");\n             LOG.debug(\"User {} not authenticated\", authentication.getPrincipal());\n \n             throw new BadCredentialsException(\"User \" + authentication.getPrincipal() + \" not authenticated\");"}]}