{"sha":"6ac6a83e9423bde8bdf3918d526fe75acd8b329e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjZhYzZhODNlOTQyM2JkZThiZGYzOTE4ZDUyNmZlNzVhY2Q4YjMyOWU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-26T14:01:28Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-26T14:01:36Z"},"message":"Allow to check supported object classes for a non-stored ConnInstance","tree":{"sha":"55e9ae3df8aab96c93d3d3e0eab308441b17ec56","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/55e9ae3df8aab96c93d3d3e0eab308441b17ec56"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/6ac6a83e9423bde8bdf3918d526fe75acd8b329e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ac6a83e9423bde8bdf3918d526fe75acd8b329e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/6ac6a83e9423bde8bdf3918d526fe75acd8b329e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cd720ceb2e96c9d0adda012a62ace16b4a5497bf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cd720ceb2e96c9d0adda012a62ace16b4a5497bf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cd720ceb2e96c9d0adda012a62ace16b4a5497bf"}],"stats":{"total":41,"additions":26,"deletions":15},"files":[{"sha":"d5b2f9422f08c3bd534fb3cfd9db17c191b3e673","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=6ac6a83e9423bde8bdf3918d526fe75acd8b329e","patch":"@@ -21,6 +21,7 @@\n import java.lang.reflect.Method;\n import java.net.URI;\n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Locale;\n import java.util.Map;\n@@ -33,6 +34,7 @@\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.ConnInstanceDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n@@ -207,13 +209,8 @@ public List<ConnBundleTO> getBundles(final String lang) {\n     public List<ConnIdObjectClassTO> buildObjectClassInfo(\n             final ConnInstanceTO connInstanceTO, final boolean includeSpecial) {\n \n-        ConnInstance connInstance = connInstanceDAO.authFind(connInstanceTO.getKey());\n-        if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connInstanceTO.getKey() + \"'\");\n-        }\n-\n         Set<ObjectClassInfo> objectClassInfo = connFactory.createConnector(\n-                connFactory.buildConnInstanceOverride(connInstance, connInstanceTO.getConf(), null)).\n+                connFactory.buildConnInstanceOverride(connInstanceTO, Collections.<ConnConfProperty>emptySet(), null)).\n                 getObjectClassInfo();\n \n         List<ConnIdObjectClassTO> result = new ArrayList<>(objectClassInfo.size());"},{"sha":"1901393cf7726c21d61af0020b2f1bece1639f91","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=6ac6a83e9423bde8bdf3918d526fe75acd8b329e","patch":"@@ -60,6 +60,7 @@\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -106,6 +107,9 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     @Autowired\n     private ResourceDataBinder binder;\n \n+    @Autowired\n+    private ConnInstanceDataBinder connInstanceDataBinder;\n+\n     @Autowired\n     private MappingManager mappingManager;\n \n@@ -409,7 +413,7 @@ public void check(final ResourceTO resourceTO) {\n \n         connFactory.createConnector(\n                 connFactory.buildConnInstanceOverride(\n-                        connInstance,\n+                        connInstanceDataBinder.getConnInstanceTO(connInstance),\n                         resourceTO.getConfOverride(),\n                         resourceTO.isOverrideCapabilities() ? resourceTO.getCapabilitiesOverride() : null)).\n                 test();"},{"sha":"62602b632547763476e54b4a2600b5f6bdb905a6","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/ConnectorFactory.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FConnectorFactory.java?ref=6ac6a83e9423bde8bdf3918d526fe75acd8b329e","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.api;\n \n import java.util.Collection;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -32,15 +33,15 @@\n public interface ConnectorFactory {\n \n     /**\n-     * Builds connector instance override over base connector instance, configuration and capabilities override.\n+     * Builds connector instance override over base connector instance, configuration and capabilities.\n      *\n      * @param connInstance base connector instance\n      * @param confOverride configuration override\n      * @param capabilitiesOverride capabilities override\n-     * @return connector instance override over base connector instance, configuration and capabilities override\n+     * @return connector instance override over base connector instance, configuration and capabilities\n      */\n     ConnInstance buildConnInstanceOverride(\n-            ConnInstance connInstance,\n+            ConnInstanceTO connInstance,\n             Collection<ConnConfProperty> confOverride,\n             Collection<ConnectorCapability> capabilitiesOverride);\n "},{"sha":"85e54151de6248214811e118073deb200513d895","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorManager.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/6ac6a83e9423bde8bdf3918d526fe75acd8b329e/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorManager.java?ref=6ac6a83e9423bde8bdf3918d526fe75acd8b329e","patch":"@@ -24,18 +24,21 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.ConnectorCapability;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n+import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n import org.slf4j.Logger;\n@@ -52,9 +55,15 @@ public class ConnectorManager implements ConnectorRegistry, ConnectorFactory {\n     @Autowired\n     private ConnIdBundleManager connIdBundleManager;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n+    @Autowired\n+    private ConnInstanceDataBinder connInstanceDataBinder;\n+\n     private EntityFactory entityFactory;\n \n     private String getBeanName(final ExternalResource resource) {\n@@ -74,7 +83,7 @@ public Connector getConnector(final ExternalResource resource) {\n \n     @Override\n     public ConnInstance buildConnInstanceOverride(\n-            final ConnInstance connInstance,\n+            final ConnInstanceTO connInstance,\n             final Collection<ConnConfProperty> confOverride,\n             final Collection<ConnectorCapability> capabilitiesOverride) {\n \n@@ -85,7 +94,7 @@ public ConnInstance buildConnInstanceOverride(\n         }\n \n         ConnInstance override = entityFactory.newEntity(ConnInstance.class);\n-        override.setAdminRealm(connInstance.getAdminRealm());\n+        override.setAdminRealm(realmDAO.findByFullPath(connInstance.getAdminRealm()));\n         override.setConnectorName(connInstance.getConnectorName());\n         override.setDisplayName(connInstance.getDisplayName());\n         override.setBundleName(connInstance.getBundleName());\n@@ -106,15 +115,15 @@ public ConnInstance buildConnInstanceOverride(\n             }\n         }\n \n-        // add overridden properties\n+        // add override properties\n         for (ConnConfProperty prop : confOverride) {\n             if (overridable.containsKey(prop.getSchema().getName()) && !prop.getValues().isEmpty()) {\n                 conf.add(prop);\n                 overridable.remove(prop.getSchema().getName());\n             }\n         }\n \n-        // add overridable properties not overridden\n+        // add override properties not substituted\n         conf.addAll(overridable.values());\n \n         override.setConf(conf);\n@@ -139,7 +148,7 @@ public Connector createConnector(final ConnInstance connInstance) {\n     @Override\n     public void registerConnector(final ExternalResource resource) {\n         ConnInstance connInstance = buildConnInstanceOverride(\n-                resource.getConnector(),\n+                connInstanceDataBinder.getConnInstanceTO(resource.getConnector()),\n                 resource.getConfOverride(),\n                 resource.isOverrideCapabilities() ? resource.getCapabilitiesOverride() : null);\n         Connector connector = createConnector(connInstance);"}]}