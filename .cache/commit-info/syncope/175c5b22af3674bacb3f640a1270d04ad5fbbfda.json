{"sha":"175c5b22af3674bacb3f640a1270d04ad5fbbfda","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE3NWM1YjIyYWYzNjc0YmFjYjNmNjQwYTEyNzBkMDRhZDVmYmJmZGE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-23T08:58:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-23T08:58:42Z"},"message":"[SYNCOPE-666] Missing TypeExtension management","tree":{"sha":"3ee2fe03740a88934628f7331fc4ca2089f3c97f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3ee2fe03740a88934628f7331fc4ca2089f3c97f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/175c5b22af3674bacb3f640a1270d04ad5fbbfda","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/175c5b22af3674bacb3f640a1270d04ad5fbbfda","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/175c5b22af3674bacb3f640a1270d04ad5fbbfda","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/175c5b22af3674bacb3f640a1270d04ad5fbbfda/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"bf2dcae39cedec28ba2551834339ae96429a33c6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bf2dcae39cedec28ba2551834339ae96429a33c6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bf2dcae39cedec28ba2551834339ae96429a33c6"}],"stats":{"total":385,"additions":311,"deletions":74},"files":[{"sha":"ecda625071ebf4f0bf5f05a0c98e40c06f5c2985","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/group/GroupResultManager.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupResultManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupResultManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Fgroup%2FGroupResultManager.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -37,7 +37,6 @@ public void printGroups(final List<GroupTO> groupTOs) {\n     public void printGroup(final GroupTO groupTO) {\n         System.out.println(\" > GROUP ID: \" + groupTO.getKey());\n         System.out.println(\"    name: \" + groupTO.getName());\n-        System.out.println(\"    display name: \" + groupTO.getDisplayName());\n         System.out.println(\"    type: \" + groupTO.getType());\n         System.out.println(\"    realm: \" + groupTO.getRealm());\n         System.out.println(\"    status: \" + groupTO.getStatus());"},{"sha":"fce9ae15d85aebb2d6d34353b3c9022232b5501e","filename":"client/cli/src/test/java/org/apache/syncope/client/cli/util/JasyptUtilsTest.java","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Futil%2FJasyptUtilsTest.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -24,13 +24,6 @@\n \n public class JasyptUtilsTest {\n \n-    @Test\n-    public void singleton() {\n-        final JasyptUtils jasyptUtils = JasyptUtils.getJasyptUtils();\n-        final JasyptUtils jasyptUtils2 = JasyptUtils.getJasyptUtils();\n-        assertEquals(jasyptUtils, jasyptUtils2);\n-    }\n-\n     @Test\n     public void encryption() {\n         final String password = \"password\";"},{"sha":"8c789ae37b7201e96b84ac5577c9fbe6fe571bed","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupDetails.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupDetails.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -80,8 +80,8 @@ public GroupDetails(\n         groupOwnerSelectWin.setCookieName(\"create-groupOwnerSelect-modal\");\n         this.add(groupOwnerSelectWin);\n \n-        final AjaxTextFieldPanel name\n-                = new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<String>(groupTO, \"name\"), false);\n+        final AjaxTextFieldPanel name =\n+                new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<String>(groupTO, \"name\"), false);\n \n         final WebMarkupContainer jexlHelp = JexlHelpUtils.getJexlHelpWebContainer(\"jexlHelp\");\n \n@@ -135,8 +135,8 @@ public void onClick(final AjaxRequestTarget target) {\n \n         groupOwnerModel = new OwnerModel(groupTO, AnyTypeKind.GROUP);\n         @SuppressWarnings(\"unchecked\")\n-        final AjaxTextFieldPanel groupOwner\n-                = new AjaxTextFieldPanel(\"groupOwner\", \"groupOwner\", groupOwnerModel, false);\n+        final AjaxTextFieldPanel groupOwner =\n+                new AjaxTextFieldPanel(\"groupOwner\", \"groupOwner\", groupOwnerModel, false);\n         groupOwner.setReadOnly(true);\n         groupOwner.setOutputMarkupId(true);\n         ownerContainer.add(groupOwner);\n@@ -243,7 +243,7 @@ public Object getObject() {\n                         if (group == null) {\n                             groupTO.setGroupOwner(null);\n                         } else {\n-                            object = group.getDisplayName();\n+                            object = group.getName();\n                         }\n                     }\n                     break;"},{"sha":"98a3b357881c745a4543630a699343dcde050c03","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/any/StatusPanel.java","status":"modified","additions":21,"deletions":12,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FStatusPanel.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -112,7 +112,7 @@ public <T extends AnyTO> StatusPanel(\n             }\n             syncope.setStatus(syncopeStatus);\n         } else if (any instanceof GroupTO) {\n-            syncope.setConnObjectLink(((GroupTO) any).getDisplayName());\n+            syncope.setConnObjectLink(((GroupTO) any).getName());\n             syncope.setStatus(Status.ACTIVE);\n         }\n \n@@ -138,21 +138,30 @@ protected Component getValueComponent(final String key, final StatusBean bean) {\n                 if (\"status\".equalsIgnoreCase(key)) {\n                     return new Label(\"field\", StringUtils.EMPTY) {\n \n-                        private static final long serialVersionUID = 1L;\n+                        private static final long serialVersionUID = 4755868673082976208L;\n \n                         @Override\n                         protected void onComponentTag(final ComponentTag tag) {\n                             super.onComponentTag(tag);\n-                            if (bean.getStatus() == Status.OBJECT_NOT_FOUND) {\n-                                tag.put(\"class\", \"glyphicon glyphicon-remove-circle\");\n-                            } else if (bean.getStatus() == Status.UNDEFINED\n-                                    || bean.getStatus() == Status.CREATED\n-                                    || bean.getStatus() == Status.NOT_YET_SUBMITTED) {\n-                                tag.put(\"class\", \"glyphicon glyphicon-question-sign\");\n-                            } else if (bean.getStatus() == Status.SUSPENDED) {\n-                                tag.put(\"class\", \"glyphicon glyphicon-ban-circle\");\n-                            } else if (bean.getStatus() == Status.ACTIVE) {\n-                                tag.put(\"class\", \"glyphicon glyphicon-ok-circle\");\n+                            if (null != bean.getStatus()) {\n+                                switch (bean.getStatus()) {\n+                                    case OBJECT_NOT_FOUND:\n+                                        tag.put(\"class\", \"glyphicon glyphicon-remove-circle\");\n+                                        break;\n+                                    case UNDEFINED:\n+                                    case CREATED:\n+                                    case NOT_YET_SUBMITTED:\n+                                        tag.put(\"class\", \"glyphicon glyphicon-question-sign\");\n+                                        break;\n+                                    case SUSPENDED:\n+                                        tag.put(\"class\", \"glyphicon glyphicon-ban-circle\");\n+                                        break;\n+                                    case ACTIVE:\n+                                        tag.put(\"class\", \"glyphicon glyphicon-ok-circle\");\n+                                        break;\n+                                    default:\n+                                        break;\n+                                }\n                             }\n \n                             tag.put(\"alt\", \"status icon\");"},{"sha":"c6347c1baa6bfbaf49fff9370a0f646a22e272c8","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/patch/GroupPatch.java","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpatch%2FGroupPatch.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -18,8 +18,15 @@\n  */\n package org.apache.syncope.common.lib.patch;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"groupPatch\")\n @XmlType\n@@ -37,6 +44,10 @@ public class GroupPatch extends AnyPatch {\n \n     private StringReplacePatchItem udynMembershipCond;\n \n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, Set<String>> typeExtensions = new HashMap<>();\n+\n     public StringReplacePatchItem getName() {\n         return name;\n     }\n@@ -77,11 +88,16 @@ public void setUDynMembershipCond(final StringReplacePatchItem udynMembershipCon\n         this.udynMembershipCond = udynMembershipCond;\n     }\n \n+    @JsonProperty\n+    public Map<String, Set<String>> getTypeExtensions() {\n+        return typeExtensions;\n+    }\n+\n     @Override\n     public boolean isEmpty() {\n         return super.isEmpty()\n                 && name == null && userOwner == null && groupOwner == null\n-                && adynMembershipCond == null && udynMembershipCond == null;\n+                && adynMembershipCond == null && udynMembershipCond == null && typeExtensions.isEmpty();\n     }\n \n }"},{"sha":"7cfe62193de03a8d7ea3da64f1bb6385ea8aa777","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/PushPolicySpec.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushPolicySpec.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.common.lib.policy;\n \n import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n \n @XmlType\n-public class PushPolicySpec {\n+public class PushPolicySpec extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 3641030189482617497L;\n "},{"sha":"2a31d64bc933be43e44665293343bfa617b93346","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/policy/SyncPolicySpec.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FSyncPolicySpec.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -24,11 +24,12 @@\n import java.util.Map;\n import javax.xml.bind.annotation.XmlType;\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n \n @XmlType\n-public class SyncPolicySpec {\n+public class SyncPolicySpec extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -3144027171719498127L;\n "},{"sha":"9c375c8846cf1c19075982fa862533d9952bf437","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -19,8 +19,14 @@\n package org.apache.syncope.common.lib.to;\n \n import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Set;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n @XmlRootElement(name = \"group\")\n@@ -39,6 +45,10 @@ public class GroupTO extends AnyTO {\n \n     private String udynMembershipCond;\n \n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, Set<String>> typeExtensions = new HashMap<>();\n+\n     @Override\n     public String getType() {\n         return AnyTypeKind.GROUP.name();\n@@ -89,9 +99,9 @@ public void setUDynMembershipCond(final String uDynMembershipCond) {\n         this.udynMembershipCond = uDynMembershipCond;\n     }\n \n-    @JsonIgnore\n-    public String getDisplayName() {\n-        return getKey() + \" \" + getName();\n+    @JsonProperty\n+    public Map<String, Set<String>> getTypeExtensions() {\n+        return typeExtensions;\n     }\n \n     public static long fromDisplayName(final String displayName) {"},{"sha":"65555c2f4f8bb52ec26ecf28125a7ab7660b2925","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -21,9 +21,11 @@\n import java.util.List;\n import java.util.Map;\n import org.apache.syncope.common.lib.types.PropagationByResource;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n \n@@ -57,6 +59,8 @@ public interface GroupDAO extends AnyDAO<Group> {\n      */\n     Map<Long, PropagationByResource> findUsersWithTransitiveResources(Long groupKey);\n \n+    List<TypeExtension> findTypeExtensionByAnyTypeClass(AnyTypeClass anyTypeClass);\n+\n     void refreshDynMemberships(AnyObject anyObject);\n \n     void refreshDynMemberships(User user);"},{"sha":"7a32a183e2762b6699b29fad371ccd750512b70f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeClassDAO.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeClassDAO.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -24,13 +24,15 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyTypeClass;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -50,6 +52,9 @@ public class JPAAnyTypeClassDAO extends AbstractDAO<AnyTypeClass, String> implem\n     @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n     @Override\n     public AnyTypeClass find(final String key) {\n         return entityManager().find(JPAAnyTypeClass.class, key);\n@@ -100,6 +105,15 @@ public void delete(final String key) {\n             type.remove(anyTypeClass);\n         }\n \n+        for (TypeExtension typeExt : groupDAO.findTypeExtensionByAnyTypeClass(anyTypeClass)) {\n+            typeExt.remove(anyTypeClass);\n+\n+            if (typeExt.getAuxClasses().isEmpty()) {\n+                typeExt.getGroup().remove(typeExt);\n+                typeExt.setGroup(null);\n+            }\n+        }\n+\n         entityManager().remove(anyTypeClass);\n     }\n "},{"sha":"af773710f734a6b134fdae50c92ff17b6a236641","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -44,12 +44,15 @@\n import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAAMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUMembership;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n@@ -245,6 +248,16 @@ public Map<Long, PropagationByResource> findUsersWithTransitiveResources(final L\n         return result;\n     }\n \n+    @Override\n+    public List<TypeExtension> findTypeExtensionByAnyTypeClass(final AnyTypeClass anyTypeClass) {\n+        TypedQuery<TypeExtension> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPATypeExtension.class.getSimpleName()\n+                + \" e WHERE :anyTypeClass MEMBER OF e.auxClasses\", TypeExtension.class);\n+        query.setParameter(\"anyTypeClass\", anyTypeClass);\n+\n+        return query.getResultList();\n+    }\n+\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public void refreshDynMemberships(final AnyObject anyObject) {"},{"sha":"d66e9d2876a2f5b41a79a0048b2c15e9508f0310","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractEntity.java","status":"modified","additions":2,"deletions":16,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractEntity.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.beans.PropertyDescriptor;\n-import java.lang.reflect.Method;\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n@@ -89,20 +88,7 @@ public int hashCode() {\n \n     @Override\n     public String toString() {\n-        Method method = BeanUtils.findMethod(getClass(), \"getKey\");\n-\n-        StringBuilder result = new StringBuilder().append(getClass().getSimpleName()).append('[');\n-        if (method != null) {\n-            try {\n-                result.append(method.invoke(this));\n-            } catch (Exception e) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.error(\"While serializing to string\", e);\n-                }\n-            }\n-        }\n-        result.append(']');\n-\n-        return result.toString();\n+        return new StringBuilder().append(getClass().getSimpleName()).\n+                append('[').append(getKey()).append(']').toString();\n     }\n }"},{"sha":"90b5290bc0c01cac4ac6fd5da7acb2935aa114df","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -64,6 +64,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -98,6 +99,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrUniqueValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGPlainAttrValue;\n import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n@@ -152,6 +154,8 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPAUser();\n         } else if (reference.equals(Group.class)) {\n             result = (T) new JPAGroup();\n+        } else if (reference.equals(TypeExtension.class)) {\n+            result = (T) new JPATypeExtension();\n         } else if (reference.equals(RelationshipType.class)) {\n             result = (T) new JPARelationshipType();\n         } else if (reference.equals(ARelationship.class)) {"},{"sha":"7d244dab0c680bc62ef359cda6d2b17b020a2bc1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPATypeExtension.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPATypeExtension.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -92,13 +92,13 @@ public void setAnyType(final AnyType anyType) {\n     @Override\n     public boolean add(final AnyTypeClass auxClass) {\n         checkType(auxClass, JPAAnyTypeClass.class);\n-        return this.auxClasses.add((JPAAnyTypeClass) auxClass);\n+        return auxClasses.contains((JPAAnyTypeClass) auxClass) || auxClasses.add((JPAAnyTypeClass) auxClass);\n     }\n \n     @Override\n     public boolean remove(final AnyTypeClass auxClass) {\n         checkType(auxClass, JPAAnyTypeClass.class);\n-        return this.auxClasses.remove((JPAAnyTypeClass) auxClass);\n+        return auxClasses.remove((JPAAnyTypeClass) auxClass);\n     }\n \n     @Override"},{"sha":"7f870298f66910957dba84f3e79f8cf9abc298ca","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/policy/JPAAccountPolicy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fpolicy%2FJPAAccountPolicy.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -126,7 +126,7 @@ public AccountRuleConf transform(final JPAAccountRuleConfInstance input) {\n     @Override\n     public boolean add(final ExternalResource resource) {\n         checkType(resource, JPAExternalResource.class);\n-        return resources.add((JPAExternalResource) resource);\n+        return resources.contains((JPAExternalResource) resource) || resources.add((JPAExternalResource) resource);\n     }\n \n     @Override"},{"sha":"d1379c907fca9d27df8057c1905bbc8ed4a538d0","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -119,6 +119,14 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_TypeExtension\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_TypeExtension\" pk-column-value=\"SEQ_TypeExtension\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n     <attributes>"},{"sha":"d1379c907fca9d27df8057c1905bbc8ed4a538d0","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -119,6 +119,14 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_TypeExtension\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_TypeExtension\" pk-column-value=\"SEQ_TypeExtension\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n     <attributes>"},{"sha":"584d8ec75954901bc8c65abb0d3ab2012154aeb0","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -119,6 +119,14 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.group.JPATypeExtension\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_TypeExtension\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_TypeExtension\" pk-column-value=\"SEQ_TypeExtension\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.anyobject.JPAADynGroupMembership\">\n     <attributes>"},{"sha":"4d37425376d9ac145d1c198c1a799bcbd3ad33c3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GroupTest.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -24,6 +24,7 @@\n \n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -41,16 +42,24 @@ public class GroupTest extends AbstractTest {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Test\n     public void findAll() {\n         List<Group> list = groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100);\n-        assertEquals(\"did not get expected number of groups \", 14, list.size());\n+        assertEquals(\"did not get expected number of groups \", 15, list.size());\n     }\n \n     @Test\n     public void find() {\n         Group group = groupDAO.find(\"root\");\n         assertNotNull(\"did not find expected group\", group);\n+\n+        group = groupDAO.find(\"additional\");\n+        assertNotNull(group);\n+        assertEquals(1, group.getTypeExtensions().size());\n+        assertEquals(2, group.getTypeExtension(anyTypeDAO.findUser()).getAuxClasses().size());\n     }\n \n     @Test"},{"sha":"e3db14f0d13732b343108041cba0052e2a76d284","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/GroupTest.java","status":"modified","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FGroupTest.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -121,6 +122,30 @@ public void findByOwner() {\n         assertTrue(ownedGroups.contains(group));\n     }\n \n+    @Test\n+    public void create() {\n+        Group group = entityFactory.newEntity(Group.class);\n+        group.setRealm(realmDAO.getRoot());\n+        group.setName(\"new\");\n+\n+        TypeExtension typeExt = entityFactory.newEntity(TypeExtension.class);\n+        typeExt.setAnyType(anyTypeDAO.findUser());\n+        typeExt.add(anyTypeClassDAO.find(\"csv\"));\n+        typeExt.add(anyTypeClassDAO.find(\"other\"));\n+\n+        group.add(typeExt);\n+        typeExt.setGroup(group);\n+\n+        groupDAO.save(group);\n+\n+        groupDAO.flush();\n+\n+        group = groupDAO.find(\"new\");\n+        assertNotNull(group);\n+        assertEquals(1, group.getTypeExtensions().size());\n+        assertEquals(2, group.getTypeExtension(anyTypeDAO.findUser()).getAuxClasses().size());\n+    }\n+\n     @Test\n     public void delete() {\n         groupDAO.delete(2L);"},{"sha":"c7bdb08cde1605492880d0e100fad5e16d74c8db","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -276,9 +276,16 @@ under the License.\n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <SyncopeGroup_AnyTypeClass group_id=\"13\" anyTypeClass_name=\"csv\"/>  \n   <SyncopeGroup id=\"14\" name=\"artDirector\"\n+                realm_id=\"1\"\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>  \n+  <SyncopeGroup id=\"15\" name=\"additional\"\n                 realm_id=\"1\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+  <TypeExtension id=\"1\" group_id=\"15\" anyType_name=\"USER\"/>\n+  <TypeExtension_AnyTypeClass typeExtension_id=\"1\" anyTypeClass_name=\"csv\"/>\n+  <TypeExtension_AnyTypeClass typeExtension_id=\"1\" anyTypeClass_name=\"other\"/>\n   \n   <URelationship id=\"1\" user_id=\"4\" anyObject_id=\"1\" type_name=\"neighborhood\"/>\n "},{"sha":"1f8655f5f0ad3810356318ccd250acb3dc450f94","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -19,8 +19,13 @@\n package org.apache.syncope.core.provisioning.java.data;\n \n import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -34,19 +39,27 @@\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n import org.apache.syncope.core.persistence.api.entity.user.UDynGroupMembership;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n @Transactional(rollbackFor = { Throwable.class })\n public class GroupDataBinderImpl extends AbstractAnyDataBinder implements GroupDataBinder {\n \n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     private void setDynMembership(final Group group, final AnyTypeKind anyTypeKind, final String dynMembershipFIQL) {\n         SearchCond dynMembershipCond = SearchCondConverter.convert(dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n@@ -114,6 +127,33 @@ public Group create(final Group group, final GroupTO groupTO) {\n             setDynMembership(group, AnyTypeKind.USER, groupTO.getUDynMembershipCond());\n         }\n \n+        // type extensions\n+        for (Map.Entry<String, Set<String>> entry : groupTO.getTypeExtensions().entrySet()) {\n+            AnyType anyType = anyTypeDAO.find(entry.getKey());\n+            if (anyType == null) {\n+                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n+            } else {\n+                TypeExtension typeExt = entityFactory.newEntity(TypeExtension.class);\n+                typeExt.setAnyType(anyType);\n+                typeExt.setGroup(group);\n+                group.add(typeExt);\n+\n+                for (String name : entry.getValue()) {\n+                    AnyTypeClass anyTypeClass = anyTypeClassDAO.find(name);\n+                    if (anyTypeClass == null) {\n+                        LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), name);\n+                    } else {\n+                        typeExt.add(anyTypeClass);\n+                    }\n+                }\n+\n+                if (typeExt.getAuxClasses().isEmpty()) {\n+                    group.remove(typeExt);\n+                    typeExt.setGroup(null);\n+                }\n+            }\n+        }\n+\n         return group;\n     }\n \n@@ -183,6 +223,52 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n             }\n         }\n \n+        // type extensions\n+        for (Map.Entry<String, Set<String>> entry : groupPatch.getTypeExtensions().entrySet()) {\n+            AnyType anyType = anyTypeDAO.find(entry.getKey());\n+            if (anyType == null) {\n+                LOG.warn(\"Ignoring invalid {}: {}\", AnyType.class.getSimpleName(), entry.getKey());\n+            } else {\n+                TypeExtension typeExt = group.getTypeExtension(anyType);\n+                if (typeExt == null) {\n+                    typeExt = entityFactory.newEntity(TypeExtension.class);\n+                    typeExt.setAnyType(anyType);\n+                    typeExt.setGroup(group);\n+                    group.add(typeExt);\n+                }\n+\n+                // add all classes contained in the TO\n+                for (String name : entry.getValue()) {\n+                    AnyTypeClass anyTypeClass = anyTypeClassDAO.find(name);\n+                    if (anyTypeClass == null) {\n+                        LOG.warn(\"Ignoring invalid {}: {}\", AnyTypeClass.class.getSimpleName(), name);\n+                    } else {\n+                        typeExt.add(anyTypeClass);\n+                    }\n+                }\n+                // remove all classes not contained in the TO\n+                for (Iterator<? extends AnyTypeClass> itor = typeExt.getAuxClasses().iterator(); itor.hasNext();) {\n+                    AnyTypeClass anyTypeClass = itor.next();\n+                    if (!entry.getValue().contains(anyTypeClass.getKey())) {\n+                        itor.remove();\n+                    }\n+                }\n+\n+                // only consider non-empty type extensions\n+                if (typeExt.getAuxClasses().isEmpty()) {\n+                    group.remove(typeExt);\n+                    typeExt.setGroup(null);\n+                }\n+            }\n+        }\n+        // remove all type extensions not contained in the TO\n+        for (Iterator<? extends TypeExtension> itor = group.getTypeExtensions().iterator(); itor.hasNext();) {\n+            TypeExtension typeExt = itor.next();\n+            if (!groupPatch.getTypeExtensions().containsKey(typeExt.getAnyType().getKey())) {\n+                itor.remove();\n+            }\n+        }\n+\n         return propByRes;\n     }\n \n@@ -221,6 +307,17 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n             groupTO.setUDynMembershipCond(group.getUDynMembership().getFIQLCond());\n         }\n \n+        for (TypeExtension typeExt : group.getTypeExtensions()) {\n+            groupTO.getTypeExtensions().put(typeExt.getAnyType().getKey(),\n+                    CollectionUtils.collect(typeExt.getAuxClasses(), new Transformer<AnyTypeClass, String>() {\n+\n+                        @Override\n+                        public String transform(final AnyTypeClass clazz) {\n+                            return clazz.getKey();\n+                        }\n+                    }, new HashSet<String>()));\n+        }\n+\n         return groupTO;\n     }\n "},{"sha":"502b832e6dd39183b5e7eca314f10c7ea137fa52","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":48,"deletions":22,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -28,6 +28,9 @@\n import java.io.IOException;\n import java.io.InputStream;\n import java.security.AccessControlException;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import javax.naming.NamingEnumeration;\n import javax.naming.NamingException;\n@@ -275,28 +278,6 @@ public void updateAsGroupOwner() {\n         assertTrue(groupTO.getCreationDate().before(groupTO.getLastChangeDate()));\n     }\n \n-    @Test\n-    public void issue178() {\n-        GroupTO groupTO = new GroupTO();\n-        String groupName = \"torename\" + getUUIDString();\n-        groupTO.setName(groupName);\n-        groupTO.setRealm(\"/\");\n-\n-        GroupTO actual = createGroup(groupTO).getAny();\n-\n-        assertNotNull(actual);\n-        assertEquals(groupName, actual.getName());\n-\n-        GroupPatch groupPatch = new GroupPatch();\n-        groupPatch.setKey(actual.getKey());\n-        String renamedGroup = \"renamed\" + getUUIDString();\n-        groupPatch.setName(new StringReplacePatchItem.Builder().value(renamedGroup).build());\n-\n-        actual = updateGroup(groupPatch).getAny();\n-        assertNotNull(actual);\n-        assertEquals(renamedGroup, actual.getName());\n-    }\n-\n     @Test\n     public void unlink() {\n         GroupTO actual = createGroup(getSampleTO(\"unlink\")).getAny();\n@@ -709,6 +690,51 @@ public void capabilitiesOverride() {\n         }\n     }\n \n+    @Test\n+    public void typeExtensions() {\n+        GroupTO groupTO = getBasicSampleTO(\"typeExtensions\");\n+        groupTO.getTypeExtensions().put(AnyTypeKind.USER.name(), Collections.singleton(\"csv\"));\n+\n+        groupTO = createGroup(groupTO).getAny();\n+        assertNotNull(groupTO);\n+        assertEquals(1, groupTO.getTypeExtensions().size());\n+        assertEquals(1, groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()).size());\n+        assertEquals(Collections.singleton(\"csv\"), groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()));\n+\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(groupTO.getKey());\n+        groupPatch.getTypeExtensions().put(AnyTypeKind.USER.name(), new HashSet<>(Arrays.asList(\"csv\", \"other\")));\n+\n+        groupTO = updateGroup(groupPatch).getAny();\n+        assertNotNull(groupTO);\n+        assertEquals(1, groupTO.getTypeExtensions().size());\n+        assertEquals(2, groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()).size());\n+        assertTrue(groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()).contains(\"csv\"));\n+        assertTrue(groupTO.getTypeExtensions().get(AnyTypeKind.USER.name()).contains(\"other\"));\n+    }\n+\n+    @Test\n+    public void issue178() {\n+        GroupTO groupTO = new GroupTO();\n+        String groupName = \"torename\" + getUUIDString();\n+        groupTO.setName(groupName);\n+        groupTO.setRealm(\"/\");\n+\n+        GroupTO actual = createGroup(groupTO).getAny();\n+\n+        assertNotNull(actual);\n+        assertEquals(groupName, actual.getName());\n+\n+        GroupPatch groupPatch = new GroupPatch();\n+        groupPatch.setKey(actual.getKey());\n+        String renamedGroup = \"renamed\" + getUUIDString();\n+        groupPatch.setName(new StringReplacePatchItem.Builder().value(renamedGroup).build());\n+\n+        actual = updateGroup(groupPatch).getAny();\n+        assertNotNull(actual);\n+        assertEquals(renamedGroup, actual.getName());\n+    }\n+\n     @Test\n     public void issueSYNCOPE632() {\n         GroupTO groupTO = null;"},{"sha":"56d8186172b032b13af3d737cac2bc49e7a7b5d4","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirSchemaITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/175c5b22af3674bacb3f640a1270d04ad5fbbfda/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/175c5b22af3674bacb3f640a1270d04ad5fbbfda/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirSchemaITCase.java?ref=175c5b22af3674bacb3f640a1270d04ad5fbbfda","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import static org.apache.syncope.fit.core.reference.AbstractITCase.clientFactory;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;"}]}