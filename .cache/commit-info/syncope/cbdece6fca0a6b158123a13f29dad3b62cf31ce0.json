{"sha":"cbdece6fca0a6b158123a13f29dad3b62cf31ce0","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmNiZGVjZTZmY2EwYTZiMTU4MTIzYTEzZjI5ZGFkM2I2MmNmMzFjZTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-09-19T12:24:05Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-09-19T12:24:05Z"},"message":"[SYNCOPE-150] SyncopeClient and SyncopeClientFactoryBean now available and used both for core IT and console\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1524710 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"910d6bdaa68c7acabee904dc5f65fef25fa69b43","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/910d6bdaa68c7acabee904dc5f65fef25fa69b43"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/cbdece6fca0a6b158123a13f29dad3b62cf31ce0","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cbdece6fca0a6b158123a13f29dad3b62cf31ce0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cbdece6fca0a6b158123a13f29dad3b62cf31ce0","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e04ddc8960da2464e1bf061c0a5579969996c127","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e04ddc8960da2464e1bf061c0a5579969996c127","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e04ddc8960da2464e1bf061c0a5579969996c127"}],"stats":{"total":1467,"additions":830,"deletions":637},"files":[{"sha":"d079f6638fe35a5ded129c40775922f19eda36b2","filename":"client/pom.xml","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -59,9 +59,9 @@ under the License.\n     </dependency>\n \n     <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-web</artifactId>\n-    </dependency>\n+      <groupId>com.fasterxml.jackson.jaxrs</groupId>\n+      <artifactId>jackson-jaxrs-json-provider</artifactId>\n+    </dependency>  \n     \n     <dependency>\n       <groupId>org.slf4j</groupId>\n@@ -84,8 +84,7 @@ under the License.\n               org.apache.syncope.client*;version=${project.version};-split-package:=merge-first\n             </Export-Package>\n             <Import-Package>\n-              com.fasterxml.jackson.annotation;version=\"[2.2.2,2.3)\",\n-              org.springframework*;version=\"[3,4)\",\n+              com.fasterxml.jackson*;version=\"[2.2.2,2.3)\",\n               org.slf4j;resolution:=optional,\n               *\n             </Import-Package>"},{"sha":"a1b22684938762d1b999cea40e58c9bff73cf4b8","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClient.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClient.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client;\n+\n+import java.net.URI;\n+import java.util.Map;\n+import java.util.concurrent.ConcurrentHashMap;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.rest.RestClientFactoryBean;\n+\n+/**\n+ * Entry point for client access to all REST services exposed by Syncope core; obtain instances via\n+ * <tt>SyncopeClientFactoryBean</tt>.\n+ *\n+ * @see SyncopeClientFactoryBean\n+ */\n+public class SyncopeClient {\n+\n+    private final RestClientFactoryBean restClientFactory;\n+\n+    private final String username;\n+\n+    private final String password;\n+\n+    private final Map<Class<?>, Object> services = new ConcurrentHashMap<Class<?>, Object>();\n+\n+    public SyncopeClient(final RestClientFactoryBean restClientFactory, final String username, final String password) {\n+        this.restClientFactory = restClientFactory;\n+        this.username = username;\n+        this.password = password;\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> T getService(final Class<T> serviceClass) {\n+        if (!services.containsKey(serviceClass)) {\n+            services.put(serviceClass, restClientFactory.createServiceInstance(serviceClass, username, password));\n+        }\n+        return (T) services.get(serviceClass);\n+    }\n+\n+    public <T> T getObject(final URI location, final Class<?> serviceClass, final Class<T> resultClass) {\n+        WebClient webClient = WebClient.fromClient(WebClient.client(getService(serviceClass)));\n+        webClient.accept(restClientFactory.getContentType()).to(location.toASCIIString(), false);\n+\n+        return webClient.get(resultClass);\n+    }\n+}"},{"sha":"f1c33c39b1217d93d733e0f3429cbe7b5f08e54e","filename":"client/src/main/java/org/apache/syncope/client/SyncopeClientFactoryBean.java","status":"added","additions":202,"deletions":0,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2FSyncopeClientFactoryBean.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.bind.Marshaller;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.feature.Feature;\n+import org.apache.cxf.feature.LoggingFeature;\n+import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n+import org.apache.cxf.staxutils.DocumentDepthProperties;\n+import org.apache.syncope.client.rest.RestClientExceptionMapper;\n+import org.apache.syncope.client.rest.RestClientFactoryBean;\n+import org.apache.syncope.common.to.AbstractPolicyTO;\n+\n+/**\n+ * Factory bean for creating instances of <tt>SyncopeClient</tt>.\n+ * Supports Spring-bean configuration and override via subclassing (see protected methods).\n+ */\n+public class SyncopeClientFactoryBean {\n+\n+    public enum ContentType {\n+\n+        JSON(MediaType.APPLICATION_JSON),\n+        XML(MediaType.APPLICATION_XML);\n+\n+        private final String mediaType;\n+\n+        private ContentType(final String mediaType) {\n+            this.mediaType = mediaType;\n+        }\n+\n+        public String getMediaType() {\n+            return mediaType;\n+        }\n+\n+        public static ContentType fromString(final String value) {\n+            return StringUtils.isNotBlank(value) && value.equalsIgnoreCase(XML.name())\n+                    ? XML\n+                    : JSON;\n+        }\n+    }\n+\n+    private JacksonJaxbJsonProvider jsonProvider;\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private JAXBElementProvider jaxbProvider;\n+\n+    private RestClientExceptionMapper exceptionMapper;\n+\n+    private String address;\n+\n+    private ContentType contentType;\n+\n+    private RestClientFactoryBean restClientFactoryBean;\n+\n+    protected JacksonJaxbJsonProvider defaultJsonProvider() {\n+        return new JacksonJaxbJsonProvider();\n+    }\n+\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n+    protected JAXBElementProvider defaultJAXBProvider() {\n+        JAXBElementProvider defaultJAXBProvider = new JAXBElementProvider();\n+\n+        DocumentDepthProperties depthProperties = new DocumentDepthProperties();\n+        depthProperties.setInnerElementCountThreshold(500);\n+        defaultJAXBProvider.setDepthProperties(depthProperties);\n+\n+        Map marshallerProperties = new HashMap();\n+        marshallerProperties.put(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n+        defaultJAXBProvider.setMarshallerProperties(marshallerProperties);\n+\n+        Map<String, String> collectionWrapperMap = new HashMap<String, String>();\n+        collectionWrapperMap.put(AbstractPolicyTO.class.getName(), \"policies\");\n+        defaultJAXBProvider.setCollectionWrapperMap(collectionWrapperMap);\n+\n+        return defaultJAXBProvider;\n+    }\n+\n+    protected RestClientExceptionMapper defaultExceptionMapper() {\n+        return new RestClientExceptionMapper();\n+    }\n+\n+    protected RestClientFactoryBean defaultRestClientFactoryBean() {\n+        RestClientFactoryBean defaultRestClientFactoryBean = new RestClientFactoryBean();\n+\n+        if (StringUtils.isBlank(address)) {\n+            throw new IllegalArgumentException(\"Property 'address' is missing\");\n+        }\n+        defaultRestClientFactoryBean.setAddress(address);\n+\n+        defaultRestClientFactoryBean.setThreadSafe(true);\n+        defaultRestClientFactoryBean.setInheritHeaders(true);\n+\n+        defaultRestClientFactoryBean.setContentType(getContentType().getMediaType());\n+\n+        List<Feature> features = new ArrayList<Feature>();\n+        features.add(new LoggingFeature());\n+        defaultRestClientFactoryBean.setFeatures(features);\n+\n+        List<Object> providers = new ArrayList<Object>(3);\n+        providers.add(getJaxbProvider());\n+        providers.add(getJsonProvider());\n+        providers.add(getExceptionMapper());\n+        defaultRestClientFactoryBean.setProviders(providers);\n+\n+        return defaultRestClientFactoryBean;\n+    }\n+\n+    public JacksonJaxbJsonProvider getJsonProvider() {\n+        return jsonProvider == null\n+                ? defaultJsonProvider()\n+                : jsonProvider;\n+    }\n+\n+    public void setJsonProvider(final JacksonJaxbJsonProvider jsonProvider) {\n+        this.jsonProvider = jsonProvider;\n+    }\n+\n+    public JAXBElementProvider getJaxbProvider() {\n+        return jaxbProvider == null\n+                ? defaultJAXBProvider()\n+                : jaxbProvider;\n+    }\n+\n+    public SyncopeClientFactoryBean setJaxbProvider(final JAXBElementProvider jaxbProvider) {\n+        this.jaxbProvider = jaxbProvider;\n+        return this;\n+    }\n+\n+    public RestClientExceptionMapper getExceptionMapper() {\n+        return exceptionMapper == null\n+                ? defaultExceptionMapper()\n+                : exceptionMapper;\n+    }\n+\n+    public SyncopeClientFactoryBean setExceptionMapper(final RestClientExceptionMapper exceptionMapper) {\n+        this.exceptionMapper = exceptionMapper;\n+        return this;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public SyncopeClientFactoryBean setAddress(final String address) {\n+        this.address = address;\n+        return this;\n+    }\n+\n+    public ContentType getContentType() {\n+        return contentType == null\n+                ? ContentType.JSON\n+                : contentType;\n+    }\n+\n+    public SyncopeClientFactoryBean setContentType(final ContentType contentType) {\n+        this.contentType = contentType;\n+        return this;\n+    }\n+\n+    public SyncopeClientFactoryBean setContentType(final String contentType) {\n+        this.contentType = ContentType.fromString(contentType);\n+        return this;\n+    }\n+\n+    public RestClientFactoryBean getRestClientFactoryBean() {\n+        return restClientFactoryBean == null\n+                ? defaultRestClientFactoryBean()\n+                : restClientFactoryBean;\n+    }\n+\n+    public SyncopeClientFactoryBean setRestClientFactoryBean(final RestClientFactoryBean restClientFactoryBean) {\n+        this.restClientFactoryBean = restClientFactoryBean;\n+        return this;\n+    }\n+\n+    public SyncopeClient create(final String username, final String password) {\n+        return new SyncopeClient(getRestClientFactoryBean(), username, password);\n+    }\n+}"},{"sha":"e0bcbccfa130da7d7fd8f9cd8a5a6f276b3a1185","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientExceptionMapper.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientExceptionMapper.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -30,7 +30,7 @@\n import javax.xml.ws.WebServiceException;\r\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\r\n import org.apache.syncope.common.validation.SyncopeClientException;\r\n import org.slf4j.Logger;\r\n import org.slf4j.LoggerFactory;\r\n@@ -52,7 +52,7 @@ public Exception fromResponse(final Response response) {\n         final int statusCode = response.getStatus();\r\n \r\n         // 1. Check for composite exception in HTTP header\r\n-        SyncopeClientCompositeErrorException scce = checkCompositeException(response);\r\n+        SyncopeClientCompositeException scce = checkCompositeException(response);\r\n         if (scce != null) {\r\n             ex = scce;\r\n \r\n@@ -77,17 +77,17 @@ public Exception fromResponse(final Response response) {\n         return ex;\r\n     }\r\n \r\n-    private SyncopeClientCompositeErrorException checkCompositeException(final Response response) {\r\n+    private SyncopeClientCompositeException checkCompositeException(final Response response) {\r\n         final int statusCode = response.getStatus();\r\n         List<Object> exTypesInHeaders = response.getHeaders().\r\n-                get(SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER);\r\n+                get(SyncopeClientCompositeException.EXCEPTION_TYPE_HEADER);\r\n         if (exTypesInHeaders == null) {\r\n-            LOG.debug(\"No \" + SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER + \" provided\");\r\n+            LOG.debug(\"No \" + SyncopeClientCompositeException.EXCEPTION_TYPE_HEADER + \" provided\");\r\n             return null;\r\n         }\r\n \r\n-        final SyncopeClientCompositeErrorException compException = new SyncopeClientCompositeErrorException(\r\n-                org.springframework.http.HttpStatus.valueOf(statusCode));\r\n+        final SyncopeClientCompositeException compException =\r\n+                new SyncopeClientCompositeException(statusCode);\r\n \r\n         final Set<String> handledExceptions = new HashSet<String>();\r\n         for (Object exceptionTypeValue : exTypesInHeaders) {\r\n@@ -96,7 +96,7 @@ private SyncopeClientCompositeErrorException checkCompositeException(final Respo\n             try {\r\n                 exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exTypeAsString);\r\n             } catch (IllegalArgumentException e) {\r\n-                LOG.error(\"Unexpected value of \" + SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER + \": \"\r\n+                LOG.error(\"Unexpected value of \" + SyncopeClientCompositeException.EXCEPTION_TYPE_HEADER + \": \"\r\n                         + exTypeAsString, e);\r\n             }\r\n             if (exceptionType != null) {\r"},{"sha":"6b0eb8e1377f8878842e2f4597b46a9b197be989","filename":"client/src/main/java/org/apache/syncope/client/rest/RestClientFactoryBean.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2FRestClientFactoryBean.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.rest;\n \n+import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.client.WebClient;\n \n@@ -37,9 +38,17 @@ public String getContentType() {\n         return contentType;\n     }\n \n+    public <T> T createServiceInstance(final Class<T> serviceClass) {\n+        return createServiceInstance(serviceClass, null, null);\n+    }\n+\n     public <T> T createServiceInstance(final Class<T> serviceClass, final String username, final String password) {\n-        setUsername(username);\n-        setPassword(password);\n+        if (StringUtils.isNotBlank(username)) {\n+            setUsername(username);\n+        }\n+        if (StringUtils.isNotBlank(password)) {\n+            setPassword(password);\n+        }\n         setServiceClass(serviceClass);\n         final T serviceInstance = create(serviceClass);\n         WebClient.client(serviceInstance).type(getContentType()).accept(getContentType());"},{"sha":"6563c41c2efd0789f6a0f8f8a45c27938522c25c","filename":"common/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/common%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/common%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fpom.xml?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -51,10 +51,10 @@ under the License.\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-lang3</artifactId>\n     </dependency>\n-\n+    \n     <dependency>\n       <groupId>org.springframework</groupId>\n-      <artifactId>spring-web</artifactId>\n+      <artifactId>spring-beans</artifactId>\n     </dependency>\n     \n     <dependency>"},{"sha":"23aa3bd0417d0734415c7137725da9b77a7d7695","filename":"common/src/main/java/org/apache/syncope/common/to/MappingTO.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -105,12 +105,11 @@ public boolean setPasswordItem(final MappingItemTO passwordItem) {\n         }\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @XmlElementWrapper(name = \"items\")\r\n     @XmlElement(name = \"item\")\r\n     @JsonProperty(\"items\")\r\n-    public <T extends MappingItemTO> List<T> getItems() {\r\n-        return (List<T>) items;\r\n+    public List<MappingItemTO> getItems() {\r\n+        return items;\r\n     }\r\n \r\n     public boolean addItem(final MappingItemTO item) {\r"},{"sha":"aa3fa1c48663e41c9f629d9ba99506ba42e8cf7c","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientCompositeException.java","status":"renamed","additions":12,"deletions":6,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeException.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,22 +22,28 @@\n import java.util.Iterator;\r\n import java.util.Set;\r\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n-import org.springframework.http.HttpStatus;\r\n-import org.springframework.web.client.HttpClientErrorException;\r\n \r\n-public class SyncopeClientCompositeErrorException extends HttpClientErrorException {\r\n+public class SyncopeClientCompositeException extends RuntimeException {\r\n \r\n     private static final long serialVersionUID = 7882118041134372129L;\r\n \r\n     public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\r\n \r\n-    private Set<SyncopeClientException> exceptions;\r\n+    private final int statusCode;\r\n \r\n-    public SyncopeClientCompositeErrorException(final HttpStatus statusCode) {\r\n-        super(statusCode);\r\n+    private final Set<SyncopeClientException> exceptions;\r\n+\r\n+    public SyncopeClientCompositeException(final int statusCode) {\r\n+        super();\r\n+\r\n+        this.statusCode = statusCode;\r\n         exceptions = new HashSet<SyncopeClientException>();\r\n     }\r\n \r\n+    public int getStatusCode() {\r\n+        return statusCode;\r\n+    }\r\n+\r\n     public boolean hasExceptions() {\r\n         return !exceptions.isEmpty();\r\n     }\r","previous_filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientCompositeErrorException.java"},{"sha":"0c793c23bd4cfa3e13d40f76ea22c719ef1fc5d9","filename":"console/src/main/java/org/apache/syncope/console/SyncopeSession.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -25,7 +25,7 @@\n import java.util.Locale;\n import java.util.Map;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.client.rest.RestClientFactoryBean;\n+import org.apache.syncope.client.SyncopeClientFactoryBean;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n import org.apache.wicket.protocol.http.WebApplication;\n@@ -52,7 +52,7 @@ public class SyncopeSession extends WebSession {\n \n     private Roles roles = new Roles();\n \n-    private final RestClientFactoryBean restClientFactory;\n+    private final SyncopeClientFactoryBean clientFactory;\n \n     private final Map<Class<?>, Object> restServices = new HashMap<Class<?>, Object>();\n \n@@ -66,22 +66,22 @@ public SyncopeSession(final Request request) {\n         final ApplicationContext applicationContext =\n                 WebApplicationContextUtils.getWebApplicationContext(WebApplication.get().getServletContext());\n \n-        restClientFactory = applicationContext.getBean(RestClientFactoryBean.class);\n+        clientFactory = applicationContext.getBean(SyncopeClientFactoryBean.class);\n     }\n \n     public <T> T getService(final Class<T> service) {\n         return getService(service, this.username, this.password);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T> T getService(final Class<T> service, final String username, final String password) {\n+    public <T> T getService(final Class<T> serviceClass, final String username, final String password) {\n         T res;\n-        if (restServices.containsKey(service)) {\n-            res = (T) restServices.get(service);\n+        if (restServices.containsKey(serviceClass)) {\n+            res = (T) restServices.get(serviceClass);\n         } else {\n-            res = restClientFactory.createServiceInstance(service, username, password);\n+            res = clientFactory.create(username, password).getService(serviceClass);\n             if (StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {\n-                restServices.put(service, restClientFactory.createServiceInstance(service, username, password));\n+                restServices.put(serviceClass, res);\n             }\n         }\n "},{"sha":"48fd16201d566c9f16476d69444fa23290d17b19","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractSchedTaskModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -20,7 +20,7 @@\n \n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.SyncTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.DateFormatROModel;\n import org.apache.syncope.console.markup.html.CrontabContainer;\n@@ -103,7 +103,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     ((BasePage) pageRef.getPage()).setModalResult(true);\n \n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException e) {\n+                } catch (SyncopeClientCompositeException e) {\n                     LOG.error(\"While creating or updating task\", e);\n                     error(getString(Constants.ERROR) + \":\" + e.getMessage());\n                     target.add(feedbackPanel);"},{"sha":"ea6634452976d05096760b0ba1120e0711412cee","filename":"console/src/main/java/org/apache/syncope/console/pages/ApprovalModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -29,7 +29,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.MapChoiceRenderer;\n import org.apache.syncope.console.markup.html.list.AltListView;\n@@ -231,7 +231,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n \n                     ((Todo) pageRef.getPage()).setModalResult(true);\n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException e) {\n+                } catch (SyncopeClientCompositeException e) {\n                     error(getString(Constants.ERROR) + \":\" + e.getMessage());\n                     LOG.error(\"While submitting form {}\", formTO, e);\n                     target.add(feedbackPanel);"},{"sha":"e4152fcc3f4d93c60c7c6af69a0c5f09e378b700","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.to.WorkflowDefinitionTO;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.LoggerLevel;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.HttpResourceStream;\n import org.apache.syncope.console.commons.PreferenceManager;\n@@ -166,7 +166,7 @@ protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> fo\n                 try {\n                     wfRestClient.updateDefinition(workflowDef);\n                     info(getString(Constants.OPERATION_SUCCEEDED));\n-                } catch (SyncopeClientCompositeErrorException scee) {\n+                } catch (SyncopeClientCompositeException scee) {\n                     error(getString(Constants.ERROR) + \":\" + scee.getMessage());\n                 }\n                 target.add(feedbackPanel);\n@@ -266,7 +266,7 @@ public Page createPage() {\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             confRestClient.deleteConfiguration(configurationTO.getKey());\n-                        } catch (SyncopeClientCompositeErrorException e) {\n+                        } catch (SyncopeClientCompositeException e) {\n                             LOG.error(\"While deleting a conf key\", e);\n                             error(e.getMessage());\n                             return;\n@@ -435,7 +435,7 @@ public Page createPage() {\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             notificationRestClient.deleteNotification(notificationTO.getId());\n-                        } catch (SyncopeClientCompositeErrorException e) {\n+                        } catch (SyncopeClientCompositeException e) {\n                             LOG.error(\"While deleting a notification\", e);\n                             error(e.getMessage());\n                             return;\n@@ -659,7 +659,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                         }\n \n                         info(getString(Constants.OPERATION_SUCCEEDED));\n-                    } catch (SyncopeClientCompositeErrorException e) {\n+                    } catch (SyncopeClientCompositeException e) {\n                         info(getString(Constants.OPERATION_ERROR));\n                     }\n "},{"sha":"6a7e0a776c7c6f0373a06d3c7ac2a5d4589e5134","filename":"console/src/main/java/org/apache/syncope/console/pages/ConfigurationModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.console.pages;\n \n import org.apache.syncope.common.to.ConfigurationTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.rest.ConfigurationRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.PageReference;\n@@ -86,7 +86,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     callerPage.setModalResult(true);\n \n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException e) {\n+                } catch (SyncopeClientCompositeException e) {\n                     if (createFlag) {\n                         error(getString(\"error_insert\"));\n                     } else {"},{"sha":"3cf03499ace2881335801daffbf43e2d16771568","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.markup.html.list.AltListView;\n import org.apache.syncope.console.rest.ConnectorRestClient;\n@@ -422,7 +422,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n \n                     ((Resources) pageRef.getPage()).setModalResult(true);\n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException e) {\n+                } catch (SyncopeClientCompositeException e) {\n                     error(getString(Constants.ERROR) + \":\" + e.getMessage());\n                     target.add(feedbackPanel);\n                     ((Resources) pageRef.getPage()).setModalResult(false);"},{"sha":"43b5d43fc7c0df0411d65c22fa266f4574fb6b72","filename":"console/src/main/java/org/apache/syncope/console/pages/DerivedSchemaModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.JexlHelpUtil;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -99,7 +99,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n                     }\n \n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException e) {\n+                } catch (SyncopeClientCompositeException e) {\n                     error(getString(Constants.ERROR) + \":\" + e.getMessage());\n                     target.add(feedbackPanel);\n                 }"},{"sha":"bdd1699ef0645b0a1c12d3c394b36a1e58176309","filename":"console/src/main/java/org/apache/syncope/console/pages/Login.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.to.EntitlementTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n@@ -182,7 +182,7 @@ private boolean isSelfRegistrationAllowed() {\n         Boolean result = null;\n         try {\n             result = SyncopeSession.get().getService(UserRequestService.class).isCreateAllowed();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While seeking if self registration is allowed\", e);\n         }\n "},{"sha":"564aeb029fcdb2bb9a5469ec222323dc0fc33fdb","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.TraceLevel;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;\n import org.apache.syncope.console.rest.NotificationRestClient;\n@@ -224,7 +224,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     callerPage.setModalResult(true);\n \n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException scee) {\n+                } catch (SyncopeClientCompositeException scee) {\n                     error(getString(Constants.ERROR) + \":\" + scee.getMessage());\n                     target.add(feedbackPanel);\n                 }"},{"sha":"4fe8771dc4eb1782a26928b69b8c38883eb915f2","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.types.ReportExecStatus;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.DateFormatROModel;\n import org.apache.syncope.console.commons.HttpResourceStream;\n@@ -147,7 +147,7 @@ protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> fo\n                     ((BasePage) callerPageRef.getPage()).setModalResult(true);\n \n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException e) {\n+                } catch (SyncopeClientCompositeException e) {\n                     LOG.error(\"While creating or updating report\", e);\n                     error(getString(Constants.ERROR) + \":\" + e.getMessage());\n                     target.add(feedbackPanel);\n@@ -507,7 +507,7 @@ public void onClick(final AjaxRequestTarget target) {\n                             reportTO.getExecutions().remove(taskExecutionTO);\n \n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n "},{"sha":"15de6795b275bcce4ce93801a85555e320bf9bfd","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditLoggerName;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n@@ -173,7 +173,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             reportRestClient.startExecution(reportTO.getId());\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n \n@@ -191,7 +191,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             reportRestClient.delete(reportTO.getId());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n                         target.add(reportContainer);"},{"sha":"bb458f251c5549cb37c69b2a2ea17c74e43fa8c7","filename":"console/src/main/java/org/apache/syncope/console/pages/Resources.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -25,7 +25,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.to.ResourceTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n@@ -251,7 +251,7 @@ public void onClick(final AjaxRequestTarget target) {\n \n                             resourceRestClient.delete(resourceTO.getName());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException e) {\n+                        } catch (SyncopeClientCompositeException e) {\n                             error(getString(Constants.ERROR) + \":\" + e.getMessage());\n \n                             LOG.error(\"While deleting resource \" + resourceTO.getName(), e);\n@@ -406,7 +406,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             connectorRestClient.delete(connectorTO.getId());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException e) {\n+                        } catch (SyncopeClientCompositeException e) {\n                             error(getString(Constants.ERROR) + \":\" + e.getMessage());\n \n                             LOG.error(\"While deleting connector \" + connectorTO.getId(), e);"},{"sha":"cda27de19e764a999bc3e0d99a02b52ea5a3b91f","filename":"console/src/main/java/org/apache/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.JexlHelpUtil;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n@@ -251,7 +251,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                     }\n \n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException e) {\n+                } catch (SyncopeClientCompositeException e) {\n                     error(getString(Constants.ERROR) + \":\" + e.getMessage());\n                     target.add(feedbackPanel);\n                 }"},{"sha":"9cbb531d3c08c8bfc75df834f2cdc7ecff20b6b8","filename":"console/src/main/java/org/apache/syncope/console/pages/TaskModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -28,7 +28,7 @@\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.TaskExecTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n@@ -150,7 +150,7 @@ public void onClick(final AjaxRequestTarget target) {\n                             taskTO.getExecutions().remove(taskExecutionTO);\n \n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n "},{"sha":"032584c63441f8c14a0456fad4d51120a36900d1","filename":"console/src/main/java/org/apache/syncope/console/pages/Todo.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.WorkflowFormTO;\n import org.apache.syncope.common.types.UserRequestType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n@@ -144,7 +144,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             approvalRestClient.claimForm(formTO.getTaskId());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scee) {\n+                        } catch (SyncopeClientCompositeException scee) {\n                             error(getString(Constants.ERROR) + \":\" + scee.getMessage());\n                         }\n                         target.add(feedbackPanel);\n@@ -259,7 +259,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             userRequestRestClient.claim(model.getObject().getId());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scee) {\n+                        } catch (SyncopeClientCompositeException scee) {\n                             error(getString(Constants.ERROR) + \":\" + scee.getMessage());\n                         }\n                         target.add(feedbackPanel);\n@@ -299,7 +299,7 @@ public Page createPage() {\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             userRequestRestClient.executeDelete(model.getObject().getId());\n-                        } catch (SyncopeClientCompositeErrorException e) {\n+                        } catch (SyncopeClientCompositeException e) {\n                             LOG.error(\"While deleting an user\", e);\n                             error(e.getMessage());\n                             return;\n@@ -323,7 +323,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             userRequestRestClient.delete(request.getId());\n-                        } catch (SyncopeClientCompositeErrorException e) {\n+                        } catch (SyncopeClientCompositeException e) {\n                             LOG.error(\"While deleting an user request\", e);\n                             error(e.getMessage());\n                             return;"},{"sha":"8b94e2a4e5fbf872be56c9dccf9b60100e7a6c54","filename":"console/src/main/java/org/apache/syncope/console/pages/VirtualSchemaModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -21,7 +21,7 @@\n import org.apache.syncope.common.AbstractBaseBean;\n import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n@@ -86,7 +86,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n                     }\n \n                     window.close(target);\n-                } catch (SyncopeClientCompositeErrorException e) {\n+                } catch (SyncopeClientCompositeException e) {\n                     error(getString(Constants.ERROR) + \":\" + e.getMessage());\n                     target.add(feedbackPanel);\n                 }"},{"sha":"10937c2031ad2f5be5bfab4e834422e62fb0aaa9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/NotificationTasks.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.NotificationTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.NotificationTaskModalPage;\n import org.apache.syncope.console.pages.Tasks;\n@@ -131,7 +131,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n \n@@ -149,7 +149,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.delete(taskTO.getId(), NotificationTaskTO.class);\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n                         target.add(container);"},{"sha":"c3a63fd19ffca0ea8a83a9a3c74066a7cbfb6bc5","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PoliciesPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -27,7 +27,7 @@\n import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.SyncPolicyTO;\n import org.apache.syncope.common.types.PolicyType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n@@ -182,7 +182,7 @@ public void onClick(final AjaxRequestTarget target) {\n                             policyRestClient.delete(accountPolicyTO.getId(), accountPolicyTO.getClass());\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n \n-                        } catch (SyncopeClientCompositeErrorException e) {\n+                        } catch (SyncopeClientCompositeException e) {\n                             error(getString(Constants.OPERATION_ERROR));\n \n                             LOG.error(\"While deleting resource {}({})\", new Object[]{accountPolicyTO.getId(),"},{"sha":"035ac58d1b620021c0572bf516f35f940c47a3f0","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PropagationTasks.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.PropagationTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.PropagationTaskModalPage;\n import org.apache.syncope.console.pages.Tasks;\n@@ -152,7 +152,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n \n@@ -170,7 +170,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.delete(taskTO.getId(), PropagationTaskTO.class);\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n                         target.add(container);"},{"sha":"2599a1e985d8d985acf509b46a3616770f2cc2a8","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchResultPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.RoleTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.ResultStatusModalPage;\n import org.apache.syncope.console.pages.RoleModalPage;\n@@ -149,7 +149,7 @@ public Page createPage() {\n                             });\n \n                             editmodal.show(target);\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(getString(Constants.OPERATION_ERROR) + \": \" + scce.getMessage());\n                             target.add(feedbackPanel);\n                         }"},{"sha":"14dce40d42e89f91d29cf9311e0dd7342722aec4","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSummaryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -20,7 +20,7 @@\n \n import java.io.Serializable;\n import org.apache.syncope.common.to.RoleTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.rest.RoleRestClient;\n import org.apache.syncope.console.wicket.markup.html.tree.TreeActionLinkPanel;\n import org.apache.wicket.PageReference;\n@@ -95,7 +95,7 @@ private RoleSummaryPanel(final Builder builder) {\n         } else {\n             try {\n                 this.selectedNode = restClient.read(builder.selectedNodeId);\n-            } catch (SyncopeClientCompositeErrorException e) {\n+            } catch (SyncopeClientCompositeException e) {\n                 LOG.error(\"Could not read {}\", builder.selectedNodeId, e);\n                 this.selectedNode = null;\n                 builder.selectedNodeId = null;"},{"sha":"6f82c9b2ca313d7bedbb3af908bd002dd21b19de","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SchedTasks.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.SchedTaskModalPage;\n import org.apache.syncope.console.pages.Tasks;\n@@ -141,7 +141,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n \n@@ -159,7 +159,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.startExecution(taskTO.getId(), true);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n \n@@ -177,7 +177,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.delete(taskTO.getId(), SchedTaskTO.class);\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n                         target.add(container);"},{"sha":"1858fb20d43746c6023d0c67acd0a78e48795ffd","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SyncTasks.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,7 +22,7 @@\n import java.util.List;\n import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.common.to.AbstractTaskTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.RoleTemplateModalPage;\n import org.apache.syncope.console.pages.SyncTaskModalPage;\n@@ -185,7 +185,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.startExecution(taskTO.getId(), false);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n \n@@ -203,7 +203,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.startExecution(taskTO.getId(), true);\n                             getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n \n@@ -221,7 +221,7 @@ public void onClick(final AjaxRequestTarget target) {\n                         try {\n                             restClient.delete(taskTO.getId(), SyncTaskTO.class);\n                             info(getString(Constants.OPERATION_SUCCEEDED));\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(scce.getMessage());\n                         }\n                         target.add(container);"},{"sha":"63008668ca5fd739dc4da5e77f6ea5ad761704b9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchResultPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.DisplayAttributesModalPage;\n import org.apache.syncope.console.pages.EditUserModalPage;\n@@ -205,7 +205,7 @@ public Page createPage() {\n                             });\n \n                             editmodal.show(target);\n-                        } catch (SyncopeClientCompositeErrorException scce) {\n+                        } catch (SyncopeClientCompositeException scce) {\n                             error(getString(Constants.OPERATION_ERROR) + \": \" + scce.getMessage());\n                             target.add(feedbackPanel);\n                         }"},{"sha":"d1f96be76451ce78c2698f9de1d50de984deb098","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -34,7 +34,7 @@\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.SyncopeSession;\n import org.springframework.stereotype.Component;\n \n@@ -73,7 +73,7 @@ public ConnInstanceTO read(final Long connectorInstanceId) {\n \n         try {\n             connectorTO = getService(ConnectorService.class).read(connectorInstanceId);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While reading a connector\", e);\n         }\n \n@@ -97,7 +97,7 @@ public List<ConnBundleTO> getAllBundles() {\n \n         try {\n             bundles = getService(ConnectorService.class).getBundles(SyncopeSession.get().getLocale().toString());\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting connector bundles\", e);\n         }\n \n@@ -115,7 +115,7 @@ public List<ConnConfProperty> getConnectorProperties(final Long connectorId) {\n \n         try {\n             properties = getService(ConnectorService.class).getConfigurationProperties(connectorId);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting connector configuration properties\", e);\n         }\n "},{"sha":"5360fc0f28ad78cb7d3cd979376b8a5aa56fbc46","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -25,7 +25,7 @@\n import org.apache.syncope.common.services.ReportletConfClasses;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -37,7 +37,7 @@ public List<String> getReportletConfClasses() {\n         try {\n             ReportletConfClasses reportletConfClasses = getService(ReportService.class).getReportletConfClasses();\n             return reportletConfClasses.getConfClasses();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting available reportlet classes\", e);\n             return new ArrayList<String>();\n         }"},{"sha":"ee94583869d57c608b6200914f9dd57fc374f42a","filename":"console/src/main/java/org/apache/syncope/console/rest/ResourceRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -26,7 +26,7 @@\n import org.apache.syncope.common.to.PropagationActionClassTO;\n import org.apache.syncope.common.to.ResourceTO;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -43,7 +43,7 @@ public List<String> getPropagationActionsClasses() {\n         try {\n             Set<PropagationActionClassTO> response = getService(ResourceService.class).getPropagationActionsClasses();\n             actions = CollectionWrapper.unwrapPropagationActionClasses(response);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all propagation actions classes\", e);\n         }\n         return actions;\n@@ -54,7 +54,7 @@ public List<ResourceTO> getAllResources() {\n \n         try {\n             resources = getService(ResourceService.class).list();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While reading all resources\", e);\n         }\n \n@@ -70,7 +70,7 @@ public ResourceTO read(final String name) {\n \n         try {\n             resourceTO = getService(ResourceService.class).read(name);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While reading a resource\", e);\n         }\n         return resourceTO;"},{"sha":"865a8df5b0ff567c128236f4457ec5ab0307581a","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -48,7 +48,7 @@ public List<? extends AbstractSchemaTO> getSchemas(final AttributableType attrTy\n \n         try {\n             schemas = getService(SchemaService.class).list(attrType, schemaType);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all schemas for {} and {}\", attrType, schemaType, e);\n         }\n \n@@ -66,7 +66,7 @@ public List<SchemaTO> getSchemas(final AttributableType type) {\n \n         try {\n             schemas = getService(SchemaService.class).list(type, SchemaType.NORMAL);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all schemas\", e);\n         }\n \n@@ -87,7 +87,7 @@ public List<String> getSchemaNames(final AttributableType type) {\n             for (SchemaTO schemaTO : schemas) {\n                 schemaNames.add(schemaTO.getName());\n             }\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all user schema names\", e);\n         }\n \n@@ -106,7 +106,7 @@ public List<DerSchemaTO> getDerivedSchemas(final AttributableType type) {\n \n         try {\n             userDerivedSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n \n@@ -128,7 +128,7 @@ public List<String> getDerivedSchemaNames(final AttributableType type) {\n             for (DerSchemaTO schemaTO : userDerSchemas) {\n                 userDerivedSchemasNames.add(schemaTO.getName());\n             }\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all user derived schema names\", e);\n         }\n \n@@ -146,7 +146,7 @@ public List<VirSchemaTO> getVirtualSchemas(final AttributableType type) {\n \n         try {\n             userVirtualSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all user derived schemas\", e);\n         }\n \n@@ -167,7 +167,7 @@ public List<String> getVirtualSchemaNames(final AttributableType type) {\n             for (VirSchemaTO schemaTO : userVirSchemas) {\n                 userVirtualSchemasNames.add(schemaTO.getName());\n             }\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all user derived schema names\", e);\n         }\n \n@@ -194,7 +194,7 @@ public SchemaTO readSchema(final AttributableType type, final String name) {\n \n         try {\n             schema = getService(SchemaService.class).read(type, SchemaType.NORMAL, name);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While reading a user schema\", e);\n         }\n         return schema;\n@@ -249,7 +249,7 @@ public DerSchemaTO readDerivedSchema(final AttributableType type, final String n\n         DerSchemaTO derivedSchemaTO = null;\n         try {\n             derivedSchemaTO = getService(SchemaService.class).read(type, SchemaType.DERIVED, name);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While reading a derived user schema\", e);\n         }\n         return derivedSchemaTO;\n@@ -305,7 +305,7 @@ public List<String> getAllValidatorClasses() {\n             List<ValidatorTO> validators = new ArrayList<ValidatorTO>(getService(ConfigurationService.class)\n                     .getValidators());\n             response = CollectionWrapper.unwrapValidator(validators);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all validators\", e);\n         }\n         return response;"},{"sha":"4a46168320fb21e057b54420aebfe6cf5c12a0ad","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -32,7 +32,7 @@\n import org.apache.syncope.common.to.AbstractTaskTO;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.CollectionWrapper;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -53,7 +53,7 @@ public List<String> getJobClasses() {\n \n         try {\n             jobClasses = new ArrayList<JobClassTO>(getService(TaskService.class).getJobClasses());\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all job classes\", e);\n         }\n         return CollectionWrapper.unwrapJobClasses(jobClasses);\n@@ -64,7 +64,7 @@ public List<String> getSyncActionsClasses() {\n \n         try {\n             actions = new ArrayList<SyncActionClassTO>(getService(TaskService.class).getSyncActionsClasses());\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While getting all sync actions classes\", e);\n         }\n         return CollectionWrapper.unwrapSyncActionClasses(actions);"},{"sha":"30906bc46f78156c19eb1905d7ac00eaf7d21e25","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.common.to.ConnObjectTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.StatusBean;\n import org.apache.syncope.console.commons.StatusUtils;\n import org.springframework.stereotype.Component;\n@@ -78,7 +78,7 @@ public UserTO read(final Long id) {\n         UserTO userTO = null;\n         try {\n             userTO = getService(UserService.class).read(id);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While reading a user\", e);\n         }\n         return userTO;\n@@ -88,7 +88,7 @@ public UserTO read(final String username) {\n         UserTO userTO = null;\n         try {\n             userTO = getService(UserService.class).read(username);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"While reading a user\", e);\n         }\n         return userTO;"},{"sha":"9d111b91bd186c596b091a1ce942f7f72e837435","filename":"console/src/main/java/org/apache/syncope/console/rest/WorkflowRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -21,19 +21,19 @@\n import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.common.to.WorkflowDefinitionTO;\n import org.apache.syncope.common.types.AttributableType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.springframework.stereotype.Component;\n \n @Component\n public class WorkflowRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 5049285686167071017L;\n \n-    public WorkflowDefinitionTO getDefinition() throws SyncopeClientCompositeErrorException {\n+    public WorkflowDefinitionTO getDefinition() throws SyncopeClientCompositeException {\n         return getService(WorkflowService.class).getDefinition(AttributableType.USER);\n     }\n \n-    public void updateDefinition(final WorkflowDefinitionTO workflowDef) throws SyncopeClientCompositeErrorException {\n+    public void updateDefinition(final WorkflowDefinitionTO workflowDef) throws SyncopeClientCompositeException {\n         getService(WorkflowService.class).updateDefinition(AttributableType.USER, workflowDef);\n     }\n }"},{"sha":"0ba8699a75f1ab0885951efb4d7b7d71d5d1b326","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/tree/TreeActionLinkPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeActionLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeActionLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeActionLinkPanel.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.console.wicket.markup.html.tree;\n \n import org.apache.syncope.common.to.RoleTO;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.syncope.console.pages.ResultStatusModalPage;\n@@ -144,7 +144,7 @@ public Page createPage() {\n                         });\n \n                         window.show(target);\n-                    } catch (SyncopeClientCompositeErrorException scce) {\n+                    } catch (SyncopeClientCompositeException scce) {\n                         error(getString(Constants.OPERATION_ERROR) + \": \" + scce.getMessage());\n                         target.add(((Roles) pageRef.getPage()).getFeedbackPanel());\n                     }"},{"sha":"92fe321c62a373d8bc72d9fa6a1d145703021de1","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":1,"deletions":45,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -66,52 +66,8 @@ under the License.\n \n   <bean id=\"roleTreeBuilder\" class=\"org.apache.syncope.console.commons.RoleTreeBuilder\"/>\n \n-  <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n-    <property name=\"depthProperties\">\n-      <bean id=\"depthProperties\" class=\"org.apache.cxf.staxutils.DocumentDepthProperties\">\n-        <property name=\"innerElementCountThreshold\" value=\"500\"/>\n-      </bean>\n-    </property>\n-    <property name=\"marshallerProperties\">\n-      <map>\n-        <entry key=\"jaxb.formatted.output\">\n-          <value type=\"java.lang.Boolean\">true</value>\n-        </entry>\n-      </map>\n-    </property>\n-    <property name=\"collectionWrapperMap\">\n-      <map>\n-        <entry>\n-          <key>\n-            <value>org.apache.syncope.common.to.PolicyTO</value>\n-          </key>\n-          <value>policies</value>\n-        </entry>\n-      </map>\n-    </property>\n-  </bean>\n-\n-  <bean id=\"jsonProvider\" class=\"com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider\"/>\n-\n-  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.client.rest.RestClientExceptionMapper\"/>\n-\n-  <bean id=\"restClientFactory\" class=\"org.apache.syncope.client.rest.RestClientFactoryBean\" scope=\"prototype\">\n+  <bean id=\"syncopeClientFactory\" class=\"org.apache.syncope.client.SyncopeClientFactoryBean\">\n     <property name=\"address\" value=\"${scheme}://${host}:${port}/${rootPath}\"/>\n-    <property name=\"threadSafe\" value=\"true\"/>\n-    <property name=\"inheritHeaders\" value=\"true\"/>\n-    <property name=\"contentType\" value=\"application/json\"/>\n-    <property name=\"features\">\n-      <list>\n-        <cxf:logging/>\n-      </list>\n-    </property>\n-    <property name=\"providers\">\n-      <list>\n-        <ref bean=\"jaxbProvider\"/>\n-        <ref bean=\"jsonProvider\"/>\n-        <ref bean=\"exceptionMapper\"/>\n-      </list>\n-    </property>\n   </bean>\n \n </beans>"},{"sha":"a4a4566ace2fa278c6a8aabed25c0974d45b13c1","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnectorController.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorController.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -23,6 +23,7 @@\n import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n@@ -34,7 +35,7 @@\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n@@ -53,7 +54,6 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -89,8 +89,8 @@ public ConnInstanceTO create(final ConnInstanceTO connInstanceTO) {\n             auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n                     \"Could not create connector instance: \" + connInstanceTO.getDisplayName(), e);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n             SyncopeClientException invalidConnInstance = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidConnInstance);\n@@ -116,8 +116,8 @@ public ConnInstanceTO update(final ConnInstanceTO connInstanceTO) {\n             auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n                     \"Could not update connector instance: \" + connInstanceTO.getDisplayName(), e);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n             SyncopeClientException invalidConnInstance = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidConnInstance);\n@@ -138,8 +138,8 @@ public ConnInstanceTO delete(final Long connInstanceId) {\n         }\n \n         if (!connInstance.getResources().isEmpty()) {\n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n             SyncopeClientException associatedResources =\n                     new SyncopeClientException(SyncopeClientExceptionType.AssociatedResources);"},{"sha":"c14201f8fa682013c6515e5379209f39a483270d","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import javax.ws.rs.core.Response;\n import org.apache.logging.log4j.Level;\n import org.apache.logging.log4j.LogManager;\n import org.apache.logging.log4j.core.Logger;\n@@ -34,14 +35,13 @@\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.types.LoggerLevel;\n import org.apache.syncope.common.types.LoggerType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.SyncopeLogger;\n import org.apache.syncope.core.persistence.dao.LoggerDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.common.util.BeanUtils;\n@@ -93,7 +93,8 @@ public List<AuditLoggerName> listAudits() {\n     }\n \n     private void throwInvalidLogger(final LoggerType type) {\n-        SyncopeClientCompositeErrorException sccee = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException sccee = \n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidLogger);\n         sce.addElement(\"Expected \" + type.name());\n@@ -146,8 +147,8 @@ public void enableAudit(final AuditLoggerName auditLoggerName) {\n         try {\n             setLevel(auditLoggerName.toLoggerName(), Level.DEBUG, LoggerType.AUDIT);\n         } catch (IllegalArgumentException e) {\n-            SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException sccee =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidLogger);\n             sce.addElement(e.getMessage());\n@@ -196,8 +197,8 @@ public void disableAudit(final AuditLoggerName auditLoggerName) {\n         } catch (NotFoundException e) {\n             LOG.debug(\"Ignoring disable of non existing logger {}\", auditLoggerName.toLoggerName());\n         } catch (IllegalArgumentException e) {\n-            SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException sccee =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidLogger);\n             sce.addElement(e.getMessage());"},{"sha":"d9dd62b2d8d038d66f3f869212cdff8b99ae49dd","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -28,6 +28,7 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.zip.ZipInputStream;\n+import javax.ws.rs.core.Response;\n import org.apache.cocoon.optional.pipeline.components.sax.fop.FopSerializer;\n import org.apache.cocoon.pipeline.NonCachingPipeline;\n import org.apache.cocoon.pipeline.Pipeline;\n@@ -45,7 +46,7 @@\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.types.ReportExecStatus;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.JobInstanceLoader;\n@@ -60,7 +61,6 @@\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -100,8 +100,8 @@ public ReportTO create(final ReportTO reportTO) {\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getId(), e);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);\n@@ -131,8 +131,8 @@ public ReportTO update(final ReportTO reportTO) {\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for report \" + report.getId(), e);\n \n-            SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException sccee =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             sccee.addException(sce);\n@@ -294,8 +294,8 @@ public ReportExec getAndCheckReportExec(final Long executionId) {\n             throw new NotFoundException(\"Report execution \" + executionId);\n         }\n         if (!ReportExecStatus.SUCCESS.name().equals(reportExec.getStatus()) || reportExec.getExecResult() == null) {\n-            SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException sccee =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.InvalidReportExec);\n             sce.addElement(reportExec.getExecResult() == null\n                     ? \"No report data produced\"\n@@ -331,8 +331,8 @@ public ReportExecTO execute(final Long reportId) {\n             auditManager.audit(Category.report, ReportSubCategory.execute, Result.failure,\n                     \"Could not start execution for report: \" + report.getId(), e);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);"},{"sha":"4a6905e2b3bef5dc421a5601bd7755ad2282b6e8","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import java.util.Set;\n import javax.persistence.EntityExistsException;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n@@ -33,7 +34,7 @@\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n@@ -59,7 +60,6 @@\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -102,8 +102,8 @@ public ResourceTO create(final ResourceTO resourceTO) {\n         LOG.debug(\"Resource creation: {}\", resourceTO);\n \n         if (StringUtils.isBlank(resourceTO.getName())) {\n-            SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException sccee =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n             sce.addElement(\"Resource name\");\n             sccee.addException(sce);"},{"sha":"cb3ecdad3815c1f30cd65605102ea7fb41354d21","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import javax.persistence.EntityExistsException;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.AbstractSchemaTO;\n import org.apache.syncope.common.to.DerSchemaTO;\n@@ -30,7 +31,7 @@\n import org.apache.syncope.common.types.AuditElements;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n@@ -43,7 +44,6 @@\n import org.apache.syncope.core.rest.data.SchemaDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n \n@@ -94,8 +94,8 @@ public <T extends AbstractSchemaTO> T create(final AttributableType attrType, fi\n             final T schemaTO) {\n \n         if (StringUtils.isBlank(schemaTO.getName())) {\n-            SyncopeClientCompositeErrorException sccee =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException sccee =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n             sce.addElement(\"Schema name\");\n             sccee.addException(sce);"},{"sha":"1f99ad4ebd3891ec372fd4ad7684f600bcd79c00","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,6 +22,7 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Set;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.BulkActionRes;\n import org.apache.syncope.common.to.SchedTaskTO;\n@@ -35,7 +36,7 @@\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.types.TaskType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.init.ImplementationClassNamesLoader;\n@@ -57,7 +58,6 @@\n import org.quartz.JobKey;\n import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -106,8 +106,8 @@ public <T extends SchedTaskTO> T createSchedTask(final T taskTO) {\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \" + task.getId(), e);\n \n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n             scce.addException(sce);\n@@ -136,7 +136,8 @@ public <T extends SchedTaskTO> T updateSched(final SchedTaskTO taskTO) {\n \n         TaskUtil taskUtil = TaskUtil.getInstance(task);\n \n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         binder.updateSchedTask(task, taskTO, taskUtil);\n         task = taskDAO.save(task);\n@@ -284,8 +285,8 @@ public TaskExecTO execute(final Long taskId, final boolean dryRun) {\n                     auditManager.audit(Category.task, TaskSubCategory.execute, Result.failure,\n                             \"Could not start execution for task: \" + task.getId() + \"/\" + taskUtil, e);\n \n-                    SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(\n-                            HttpStatus.BAD_REQUEST);\n+                    SyncopeClientCompositeException scce =\n+                            new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n                     SyncopeClientException sce = new SyncopeClientException(SyncopeClientExceptionType.Scheduling);\n                     sce.addElement(e.getMessage());\n                     scce.addException(sce);\n@@ -344,8 +345,8 @@ public TaskExecTO report(final Long executionId, final PropagationTaskExecStatus\n         }\n \n         if (!sce.isEmpty()) {\n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             scce.addException(sce);\n \n             auditManager.audit(Category.task, TaskSubCategory.report, Result.failure,"},{"sha":"89ba556ae82873c5e31d91e1864f5a073f4f81f6","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserRequestController.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserRequestController.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,6 +22,7 @@\n import java.util.Date;\n import java.util.List;\n import javax.persistence.RollbackException;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserRequestTO;\n@@ -30,7 +31,7 @@\n import org.apache.syncope.common.types.AuditElements.Result;\n import org.apache.syncope.common.types.AuditElements.UserRequestSubCategory;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.SyncopeConf;\n@@ -43,7 +44,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -251,14 +251,15 @@ public UserRequestTO claim(final Long requestId) {\n             + \"(hasRole('USER_DELETE') and #request.type == #request.type.DELETE))\")\n     public UserTO execute(final UserRequestTO request, final UserTO reviewed, final UserMod changes) {\n         UserRequest userRequest = userRequestDAO.find(request.getId());\n-        if (request == null || request.isExecuted()) {\n+        if (request.isExecuted()) {\n             throw new NotFoundException(\"Executable user request \" + request.getId());\n         }\n \n         if (StringUtils.isBlank(request.getOwner())\n                 || !request.getOwner().equalsIgnoreCase(EntitlementUtil.getAuthenticatedUsername())) {\n-            final SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.UNAUTHORIZED);\n+\n+            final SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.UNAUTHORIZED.getStatusCode());\n             scce.addException(new SyncopeClientException(SyncopeClientExceptionType.Unauthorized));\n             throw scce;\n         }"},{"sha":"c5a6efeddbe63bcaa77eb40ac5ff0971322351af","filename":"core/src/main/java/org/apache/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -38,7 +38,7 @@\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n@@ -370,7 +370,7 @@ public PropagationByResource fillVirtual(final AbstractAttributable attributable\n \n     protected PropagationByResource fill(final AbstractAttributable attributable,\n             final AbstractAttributableMod attributableMod, final AttributableUtil attrUtil,\n-            final SyncopeClientCompositeErrorException scce) {\n+            final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n@@ -615,7 +615,7 @@ public void fillVirtual(final AbstractAttributable attributable, final List<Attr\n     }\n \n     protected void fill(final AbstractAttributable attributable, final AbstractAttributableTO attributableTO,\n-            final AttributableUtil attributableUtil, final SyncopeClientCompositeErrorException scce) {\n+            final AttributableUtil attributableUtil, final SyncopeClientCompositeException scce) {\n \n         // 1. attributes\n         SyncopeClientException invalidValues = new SyncopeClientException(SyncopeClientExceptionType.InvalidValues);"},{"sha":"3e54e6cd86c7e6f47869bcdad6afe1dce5508ed8","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -21,20 +21,20 @@\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -80,7 +80,8 @@ public Set<ConnConfProperty> mergeConnConfProperties(final Set<ConnConfProperty>\n     }\n \n     public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n-        SyncopeClientCompositeErrorException scee = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scee =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n@@ -127,7 +128,8 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n     }\n \n     public ConnInstance updateConnInstance(final long connInstanceId, final ConnInstanceTO connInstanceTO) {\n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);"},{"sha":"ebbf93d512aed14209245742feac06c89efe7f60","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -25,6 +25,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MappingTO;\n@@ -33,7 +34,7 @@\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractMapping;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n@@ -53,7 +54,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -184,7 +184,8 @@ private AbstractMappingItem getMappingItem(final MappingItemTO itemTO, final Abs\n             return null;\n         }\n \n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce = \n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);"},{"sha":"fca886d36b390c48b7ee3c8fb02710f94a341ea9","filename":"core/src/main/java/org/apache/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,12 +22,13 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n@@ -48,7 +49,6 @@\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -114,7 +114,8 @@ public SyncopeRole create(final SyncopeRole role, final RoleTO roleTO) {\n         role.setInheritPasswordPolicy(roleTO.isInheritPasswordPolicy());\n         role.setInheritAccountPolicy(roleTO.isInheritAccountPolicy());\n \n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         // name and parent\n         SyncopeClientException invalidRoles = new SyncopeClientException(SyncopeClientExceptionType.InvalidRoles);\n@@ -192,7 +193,8 @@ public SyncopeRole create(final SyncopeRole role, final RoleTO roleTO) {\n     public PropagationByResource update(final SyncopeRole role, final RoleMod roleMod) {\n         PropagationByResource propByRes = new PropagationByResource();\n \n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         Set<String> currentResources = role.getResourceNames();\n "},{"sha":"364492e8147ca767844051c0f24f6f3715b8b34f","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -19,12 +19,13 @@\n package org.apache.syncope.core.rest.data;\n \n import java.util.List;\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.to.SchemaTO;\n import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n@@ -34,7 +35,6 @@\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.JexlUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -49,8 +49,8 @@ public class SchemaDataBinder {\n     // --------------- NORMAL -----------------\n     private <T extends AbstractSchema> void fill(final T schema, final SchemaTO schemaTO) {\n         if (!jexlUtil.isExpressionValid(schemaTO.getMandatoryCondition())) {\n-            SyncopeClientCompositeErrorException scce =\n-                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n             SyncopeClientException invalidMandatoryCondition = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidValues);\n@@ -70,7 +70,8 @@ public <T extends AbstractSchema> void create(final SchemaTO schemaTO, final T s\n     public <T extends AbstractSchema> void update(final SchemaTO schemaTO, final T schema,\n             final AttributableUtil attributableUtil) {\n \n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         List<AbstractAttr> attrs = schemaDAO.getAttributes(schema, attributableUtil.attrClass());\n         if (!attrs.isEmpty()) {\n@@ -106,7 +107,8 @@ public <T extends AbstractSchema> SchemaTO getSchemaTO(final T schema, final Att\n \n     // --------------- DERIVED -----------------\n     private <T extends AbstractDerSchema> T populate(final T derSchema, final DerSchemaTO derSchemaTO) {\n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         if (derSchemaTO.getExpression() == null) {\n             SyncopeClientException requiredValuesMissing = new SyncopeClientException("},{"sha":"296143ea4769c3b46a027f00cd0b990880c07264","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.rest.data;\n \n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.common.to.AttributeTO;\n@@ -31,7 +32,7 @@\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n@@ -53,7 +54,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.stereotype.Component;\n \n@@ -124,8 +124,8 @@ private void fill(final SyncTask task, final SyncTaskTO taskTO) {\n             checkJexl(template, sce);\n         }\n         if (!sce.isEmpty()) {\n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(\n-                    HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeException scce =\n+                    new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n             scce.addException(sce);\n             throw scce;\n         }"},{"sha":"25b1157578e335e24470e297bcdc815020009af1","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -22,6 +22,7 @@\n import java.util.HashSet;\n import java.util.Set;\n import javax.annotation.Resource;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n@@ -34,7 +35,7 @@\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.util.BeanUtils;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n@@ -56,7 +57,6 @@\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.util.PasswordEncoder;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.http.HttpStatus;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -162,7 +162,7 @@ private CipherAlgorithm getPredefinedCipherAlgoritm() {\n     }\n \n     private void setPassword(final SyncopeUser user, final String password,\n-            final SyncopeClientCompositeErrorException scce) {\n+            final SyncopeClientCompositeException scce) {\n \n         int passwordHistorySize = 0;\n         PasswordPolicy policy = policyDAO.getGlobalPasswordPolicy();\n@@ -183,7 +183,8 @@ private void setPassword(final SyncopeUser user, final String password,\n     }\n \n     public void create(final SyncopeUser user, final UserTO userTO) {\n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         // memberships\n         SyncopeRole role;\n@@ -238,7 +239,8 @@ public void create(final SyncopeUser user, final UserTO userTO) {\n     public PropagationByResource update(final SyncopeUser user, final UserMod userMod) {\n         PropagationByResource propByRes = new PropagationByResource();\n \n-        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+        SyncopeClientCompositeException scce =\n+                new SyncopeClientCompositeException(Response.Status.BAD_REQUEST.getStatusCode());\n \n         Set<String> currentResources = user.getResourceNames();\n "},{"sha":"5568421473658b503b04bb291ed9c2ecc8e0c2fd","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -33,7 +33,7 @@\n import org.apache.syncope.common.services.InvalidSearchConditionException;\r\n import org.apache.syncope.common.types.EntityViolationType;\r\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\r\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\r\n import org.apache.syncope.common.validation.SyncopeClientException;\r\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n import org.apache.syncope.core.persistence.dao.NotFoundException;\r\n@@ -59,8 +59,8 @@ public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, R\n     public Response toResponse(final Exception ex) {\r\n         LOG.error(\"Exception thrown by REST method: \" + ex.getMessage(), ex);\r\n \r\n-        if (ex instanceof SyncopeClientCompositeErrorException) {\r\n-            return getCompositeExceptionResponse((SyncopeClientCompositeErrorException) ex);\r\n+        if (ex instanceof SyncopeClientCompositeException) {\r\n+            return getCompositeExceptionResponse((SyncopeClientCompositeException) ex);\r\n         }\r\n \r\n         if (ex instanceof AccessDeniedException) {\r\n@@ -114,11 +114,11 @@ public Exception fromResponse(final Response r) {\n                 \"Call of fromResponse() method is not expected in RestServiceExceptionMapper\");\r\n     }\r\n \r\n-    private Response getCompositeExceptionResponse(final SyncopeClientCompositeErrorException ex) {\r\n-        ResponseBuilder responseBuilder = Response.status(ex.getStatusCode().value());\r\n+    private Response getCompositeExceptionResponse(final SyncopeClientCompositeException ex) {\r\n+        ResponseBuilder responseBuilder = Response.status(ex.getStatusCode());\r\n         for (SyncopeClientException sce : ex.getExceptions()) {\r\n             responseBuilder.header(\r\n-                    SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\r\n+                    SyncopeClientCompositeException.EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\r\n \r\n             for (String attributeName : sce.getElements()) {\r\n                 responseBuilder.header(sce.getType().getElementHeaderName(), attributeName);\r\n@@ -161,7 +161,7 @@ private Response processInvalidEntityExceptions(final Exception ex) {\n             SyncopeClientExceptionType exType =\r\n                     SyncopeClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\r\n \r\n-            builder.header(SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n+            builder.header(SyncopeClientCompositeException.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n \r\n             for (Map.Entry<Class<?>, Set<EntityViolationType>> violation : iee.getViolations().entrySet()) {\r\n                 for (EntityViolationType violationType : violation.getValue()) {\r\n@@ -207,7 +207,7 @@ private Response buildResponse(final ResponseBuilder responseBuilder, final Sync\n             final String msg) {\r\n \r\n         return responseBuilder.header(\r\n-                SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER, hType.getHeaderValue()).\r\n+                SyncopeClientCompositeException.EXCEPTION_TYPE_HEADER, hType.getHeaderValue()).\r\n                 header(hType.getElementHeaderName(), msg).\r\n                 build();\r\n     }\r"},{"sha":"13413c7441872eee83bbd0a830bce309d9e6dbc9","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -53,7 +53,7 @@ under the License.\n       <map>\n         <entry>\n           <key>\n-            <value>org.apache.syncope.common.to.PolicyTO</value>\n+            <value>org.apache.syncope.common.to.AbstractPolicyTO</value>\n           </key>\n           <value>policies</value>\n         </entry>"},{"sha":"0d45e0baf0d0b27e97fbbe02b644a2392d87bdf1","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":55,"deletions":74,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.fail;\n \n import java.util.UUID;\n@@ -28,10 +27,9 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n \n-import org.apache.cxf.jaxrs.client.WebClient;\n import org.apache.http.HttpStatus;\n-import org.apache.syncope.client.rest.RestClientExceptionMapper;\n-import org.apache.syncope.client.rest.RestClientFactoryBean;\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.client.SyncopeClientFactoryBean;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.services.ConnectorService;\n@@ -56,7 +54,7 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n-import org.junit.Before;\n+import org.junit.BeforeClass;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -65,7 +63,7 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:restClientContext.xml\", \"classpath:testJDBCContext.xml\"})\n+@ContextConfiguration(locations = {\"classpath:testJDBCContext.xml\"})\n public abstract class AbstractTest {\n \n     /**\n@@ -77,89 +75,72 @@ public abstract class AbstractTest {\n \n     protected static final String ADMIN_PWD = \"password\";\n \n+    private static final String ADDRESS = \"http://localhost:9080/syncope/rest\";\n+\n     private static final String ENV_KEY_CONTENT_TYPE = \"jaxrsContentType\";\n \n-    @Autowired\n-    protected RestClientFactoryBean restClientFactory;\n+    protected static SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().setAddress(ADDRESS);\n+\n+    protected static SyncopeClient adminClient;\n \n     @Autowired\n     protected DataSource testDataSource;\n \n-    protected UserService userService;\n+    protected static UserService userService;\n \n-    protected UserWorkflowService userWorkflowService;\n+    protected static UserWorkflowService userWorkflowService;\n \n-    protected RoleService roleService;\n+    protected static RoleService roleService;\n \n-    protected ResourceService resourceService;\n+    protected static ResourceService resourceService;\n \n-    protected EntitlementService entitlementService;\n+    protected static EntitlementService entitlementService;\n \n-    protected ConfigurationService configurationService;\n+    protected static ConfigurationService configurationService;\n \n-    protected ConnectorService connectorService;\n+    protected static ConnectorService connectorService;\n \n-    protected LoggerService loggerService;\n+    protected static LoggerService loggerService;\n \n-    protected ReportService reportService;\n+    protected static ReportService reportService;\n \n-    protected TaskService taskService;\n+    protected static TaskService taskService;\n \n-    protected WorkflowService workflowService;\n+    protected static WorkflowService workflowService;\n \n-    protected NotificationService notificationService;\n+    protected static NotificationService notificationService;\n \n-    protected SchemaService schemaService;\n+    protected static SchemaService schemaService;\n \n-    protected UserRequestService userRequestService;\n+    protected static UserRequestService userRequestService;\n \n-    protected PolicyService policyService;\n+    protected static PolicyService policyService;\n \n-    @Autowired\n-    protected RestClientExceptionMapper clientExceptionMapper;\n-\n-    @Before\n-    public void setup() throws Exception {\n+    @BeforeClass\n+    public static void setup() {\n         final String envContentType = System.getProperty(ENV_KEY_CONTENT_TYPE);\n         if (StringUtils.isNotBlank(envContentType)) {\n-            restClientFactory.setContentType(envContentType);\n+            clientFactory.getRestClientFactoryBean().setContentType(envContentType);\n         }\n-        LOG.info(\"Performing IT with content type {}\", restClientFactory.getContentType());\n-\n-        userService = createServiceInstance(UserService.class);\n-        userWorkflowService = createServiceInstance(UserWorkflowService.class);\n-        roleService = createServiceInstance(RoleService.class);\n-        resourceService = createServiceInstance(ResourceService.class);\n-        entitlementService = createServiceInstance(EntitlementService.class);\n-        configurationService = createServiceInstance(ConfigurationService.class);\n-        connectorService = createServiceInstance(ConnectorService.class);\n-        loggerService = createServiceInstance(LoggerService.class);\n-        reportService = createServiceInstance(ReportService.class);\n-        taskService = createServiceInstance(TaskService.class);\n-        policyService = createServiceInstance(PolicyService.class);\n-        workflowService = createServiceInstance(WorkflowService.class);\n-        notificationService = createServiceInstance(NotificationService.class);\n-        schemaService = createServiceInstance(SchemaService.class);\n-        userRequestService = createServiceInstance(UserRequestService.class);\n-    }\n-\n-    protected <T> T createServiceInstance(final Class<T> serviceClass) {\n-        return restClientFactory.createServiceInstance(serviceClass, ADMIN_UNAME, ADMIN_PWD);\n-    }\n-\n-    protected <T> T createServiceInstance(final Class<T> serviceClass, final String username, final String password) {\n-        return restClientFactory.createServiceInstance(serviceClass, username, password);\n-    }\n-\n-    protected <T> T getObject(final Response response, final Class<T> type, final Object serviceProxy) {\n-        assertNotNull(response);\n-        assertNotNull(response.getLocation());\n-\n-        String location = response.getLocation().toString();\n-        WebClient webClient = WebClient.fromClient(WebClient.client(serviceProxy));\n-        webClient.to(location, false);\n-\n-        return webClient.get(type);\n+        LOG.info(\"Performing IT with content type {}\", clientFactory.getContentType().getMediaType());\n+\n+        adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+\n+        userService = adminClient.getService(UserService.class);\n+        userWorkflowService = adminClient.getService(UserWorkflowService.class);\n+        roleService = adminClient.getService(RoleService.class);\n+        resourceService = adminClient.getService(ResourceService.class);\n+        entitlementService = adminClient.getService(EntitlementService.class);\n+        configurationService = adminClient.getService(ConfigurationService.class);\n+        connectorService = adminClient.getService(ConnectorService.class);\n+        loggerService = adminClient.getService(LoggerService.class);\n+        reportService = adminClient.getService(ReportService.class);\n+        taskService = adminClient.getService(TaskService.class);\n+        policyService = adminClient.getService(PolicyService.class);\n+        workflowService = adminClient.getService(WorkflowService.class);\n+        notificationService = adminClient.getService(NotificationService.class);\n+        schemaService = adminClient.getService(SchemaService.class);\n+        userRequestService = adminClient.getService(UserRequestService.class);\n     }\n \n     protected static String getUUIDString() {\n@@ -197,7 +178,7 @@ protected void assertCreated(final Response response) {\n     protected UserTO createUser(final UserTO userTO) {\n         Response response = userService.create(userTO);\n         if (response.getStatus() != HttpStatus.SC_CREATED) {\n-            Exception ex = clientExceptionMapper.fromResponse(response);\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n@@ -211,46 +192,46 @@ protected <T extends AbstractSchemaTO> T createSchema(final AttributableType kin\n \n         Response response = schemaService.create(kind, type, schemaTO);\n         if (response.getStatus() != HttpStatus.SC_CREATED) {\n-            Exception ex = clientExceptionMapper.fromResponse(response);\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n \n-        return (T) getObject(response, schemaTO.getClass(), schemaService);\n+        return (T) adminClient.getObject(response.getLocation(), SchemaService.class, schemaTO.getClass());\n     }\n \n     protected RoleTO createRole(final RoleService roleService, final RoleTO newRoleTO) {\n         Response response = roleService.create(newRoleTO);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-            Exception ex = clientExceptionMapper.fromResponse(response);\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return getObject(response, RoleTO.class, roleService);\n+        return adminClient.getObject(response.getLocation(), RoleService.class, RoleTO.class);\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     protected <T extends AbstractPolicyTO> T createPolicy(final T policy) {\n         Response response = policyService.create(policy);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-            Exception ex = clientExceptionMapper.fromResponse(response);\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return (T) getObject(response, policy.getClass(), policyService);\n+        return (T) adminClient.getObject(response.getLocation(), PolicyService.class, policy.getClass());\n     }\n \n     protected ResourceTO createResource(final ResourceTO resourceTO) {\n         Response response = resourceService.create(resourceTO);\n         if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-            Exception ex = clientExceptionMapper.fromResponse(response);\n+            Exception ex = clientFactory.getExceptionMapper().fromResponse(response);\n             if (ex != null) {\n                 throw (RuntimeException) ex;\n             }\n         }\n-        return getObject(response, ResourceTO.class, resourceService);\n+        return adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n     }\n }"},{"sha":"7abbb79d461b5882eb670d5b3c22f9c88c888b88","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":33,"deletions":21,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -30,6 +30,7 @@\n import java.util.Set;\n \n import javax.ws.rs.core.Response;\n+import org.apache.http.HttpStatus;\n \n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.NodeCond;\n@@ -46,13 +47,11 @@\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpClientErrorException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class AuthenticationTestITCase extends AbstractTest {\n@@ -111,8 +110,8 @@ public void testUserSchemaAuthorization() {\n         assertNotNull(schemaTO);\n \n         // 4. read the schema created above (as user) - success\n-        SchemaService schemaService2 = createServiceInstance(SchemaService.class,\n-                userTO.getUsername(), \"password123\");\n+        SchemaService schemaService2 =\n+                clientFactory.create(userTO.getUsername(), \"password123\").getService(SchemaService.class);\n \n         schemaTO = schemaService2.read(AttributableType.USER, SchemaType.NORMAL, schemaName);\n         assertNotNull(schemaTO);\n@@ -121,9 +120,9 @@ public void testUserSchemaAuthorization() {\n         try {\n             schemaService2.update(AttributableType.ROLE, SchemaType.NORMAL, schemaName, schemaTO);\n             fail(\"Schemaupdate as user schould not work\");\n-        } catch (HttpClientErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             assertNotNull(e);\n-            assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n+            assertEquals(HttpStatus.SC_FORBIDDEN, e.getStatusCode());\n         } catch (AccessControlException e) {\n             // CXF Service will throw this exception\n             assertNotNull(e);\n@@ -147,18 +146,20 @@ public void testUserRead() {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserService userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService2 =\n+                clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n \n         UserTO readUserTO = userService2.read(1L);\n         assertNotNull(readUserTO);\n \n-        UserService userService3 = createServiceInstance(UserService.class, \"verdi\", ADMIN_PWD);\n+        UserService userService3 =\n+                clientFactory.create(\"verdi\", ADMIN_PWD).getService(UserService.class);\n \n         SyncopeClientException exception = null;\n         try {\n             userService3.read(1L);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n         }\n         assertNotNull(exception);\n@@ -179,7 +180,8 @@ public void testUserSearch() throws InvalidSearchConditionException {\n         userTO = createUser(userTO);\n         assertNotNull(userTO);\n \n-        UserService userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService2 =\n+                clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n \n         AttributeCond isNullCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         isNullCond.setSchema(\"loginDate\");\n@@ -194,7 +196,8 @@ public void testUserSearch() throws InvalidSearchConditionException {\n         }\n         assertTrue(userIds.contains(1L));\n \n-        UserService userService3 = createServiceInstance(UserService.class, \"verdi\", \"password\");\n+        UserService userService3 =\n+                clientFactory.create(\"verdi\", \"password\").getService(UserService.class);\n \n         matchedUsers = userService3.search(searchCondition);\n \n@@ -224,17 +227,20 @@ public void checkFailedLogins() {\n         assertNotNull(userTO);\n         long userId = userTO.getId();\n \n-        UserService userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService2 =\n+                clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n         assertEquals(0, getFailedLogins(userService2, userId));\n \n         // authentications failed ...\n-        UserService userService3 = createServiceInstance(UserService.class, userTO.getUsername(), \"wrongpwd1\");\n+        UserService userService3 =\n+                clientFactory.create(userTO.getUsername(), \"wrongpwd1\").getService(UserService.class);\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n \n         assertEquals(2, getFailedLogins(userService, userId));\n \n-        UserService userService4 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService4 =\n+                clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n         assertEquals(0, getFailedLogins(userService4, userId));\n     }\n \n@@ -254,19 +260,22 @@ public void checkUserSuspension() {\n         long userId = userTO.getId();\n         assertNotNull(userTO);\n \n-        UserService userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n+        UserService userService2 =\n+                clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n         assertEquals(0, getFailedLogins(userService2, userId));\n \n         // authentications failed ...\n-        UserService userService3 = createServiceInstance(UserService.class, userTO.getUsername(), \"wrongpwd1\");\n+        UserService userService3 =\n+                clientFactory.create(userTO.getUsername(), \"wrongpwd1\").getService(UserService.class);\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n         assertReadFails(userService3, userId);\n \n         assertEquals(3, getFailedLogins(userService, userId));\n \n         // last authentication before suspension\n-        userService3 = createServiceInstance(UserService.class, userTO.getUsername(), \"wrongpwd1\");\n+        userService3 =\n+                clientFactory.create(userTO.getUsername(), \"wrongpwd1\").getService(UserService.class);\n         assertReadFails(userService3, userId);\n \n         userTO = userService.read(userTO.getId());\n@@ -277,14 +286,16 @@ public void checkUserSuspension() {\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         // Access with correct credentials should fail as user is suspended\n-        userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n+        userService2 =\n+                clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n         assertReadFails(userService2, userId);\n \n         userTO = userService.reactivate(userTO.getId());\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n-        userService2 = createServiceInstance(UserService.class, userTO.getUsername(), \"password123\");\n+        userService2 =\n+                clientFactory.create(userTO.getUsername(), \"password123\").getService(UserService.class);\n         assertEquals(0, getFailedLogins(userService2, userId));\n     }\n \n@@ -318,7 +329,8 @@ public void issueSYNCOPE48() {\n         role1Admin = createUser(role1Admin);\n         assertNotNull(role1Admin);\n \n-        UserService userService2 = createServiceInstance(UserService.class, role1Admin.getUsername(), \"password\");\n+        UserService userService2 =\n+                clientFactory.create(role1Admin.getUsername(), \"password\").getService(UserService.class);\n \n         // User with role 1, created by user with child role created above\n         UserTO role1User = UserTestITCase.getUniqueSampleTO(\"syncope48user@apache.org\");"},{"sha":"9ff972be853ab40722e2c6b1af68bea1c254ee2a","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -32,13 +32,14 @@\n import javax.ws.rs.core.Response;\n \n import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpStatus;\n import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.to.ConfigurationTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ConfigurationTestITCase extends AbstractTest {\n@@ -51,32 +52,34 @@ public void create() {\n \n         Response response = configurationService.create(configurationTO);\n         assertNotNull(response);\n-        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        ConfigurationTO newConfigurationTO = getObject(response, ConfigurationTO.class, configurationService);\n+        assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n+        ConfigurationTO newConfigurationTO =\n+                adminClient.getObject(response.getLocation(), ConfigurationService.class, ConfigurationTO.class);\n         assertEquals(configurationTO, newConfigurationTO);\n     }\n \n     @Test\n     public void delete() throws UnsupportedEncodingException {\n         try {\n             configurationService.delete(\"nonExistent\");\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n \n         ConfigurationTO tokenLengthTO = configurationService.read(\"token.length\");\n \n         configurationService.delete(\"token.length\");\n         try {\n             configurationService.read(\"token.length\");\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n \n         Response response = configurationService.create(tokenLengthTO);\n         assertNotNull(response);\n-        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        ConfigurationTO newConfigurationTO = getObject(response, ConfigurationTO.class, configurationService);\n+        assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n+        ConfigurationTO newConfigurationTO =\n+                adminClient.getObject(response.getLocation(), ConfigurationService.class, ConfigurationTO.class);\n         assertEquals(tokenLengthTO, newConfigurationTO);\n     }\n \n@@ -115,7 +118,7 @@ public void update() {\n     public void dbExport() throws IOException {\n         Response response = configurationService.export();\n         assertNotNull(response);\n-        assertEquals(HttpStatus.OK.value(), response.getStatus());\n+        assertEquals(HttpStatus.SC_OK, response.getStatus());\n         String contentType = response.getHeaderString(HttpHeaders.CONTENT_TYPE);\n         assertTrue(contentType.contains(\"xml\"));\n         String contentDisposition = response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER);"},{"sha":"6bd1b89f6bafbf3f6ca03dd949901de18c8e15cb","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":31,"deletions":32,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -36,6 +36,9 @@\n import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpStatus;\n+import org.apache.syncope.common.services.ConnectorService;\n+import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnIdObjectClassTO;\n@@ -48,15 +51,13 @@\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.ConnectorCapability;\n import org.apache.syncope.common.types.IntMappingType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.common.security.GuardedString;\n import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ConnInstanceTestITCase extends AbstractTest {\n@@ -84,13 +85,13 @@ public static void setUpConnIdBundles() throws IOException {\n         assertNotNull(connidDbTableVersion);\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void createWithException() {\n         ConnInstanceTO connectorTO = new ConnInstanceTO();\n \n         Response response = connectorService.create(connectorTO);\n-        if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-            throw (RuntimeException) clientExceptionMapper.fromResponse(response);\n+        if (response.getStatus() != HttpStatus.SC_CREATED) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n         }\n     }\n \n@@ -144,12 +145,12 @@ public void create() {\n         connectorTO.getCapabilities().add(ConnectorCapability.TWO_PHASES_UPDATE);\n \n         Response response = connectorService.create(connectorTO);\n-        if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-            throw (RuntimeException) clientExceptionMapper.fromResponse(response);\n+        if (response.getStatus() != HttpStatus.SC_CREATED) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n         }\n \n-        ConnInstanceTO actual = getObject(response, ConnInstanceTO.class, connectorService);\n-\n+        ConnInstanceTO actual =\n+                adminClient.getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n         assertNotNull(actual);\n \n         assertEquals(actual.getBundleName(), connectorTO.getBundleName());\n@@ -169,7 +170,7 @@ public void create() {\n         try {\n             connectorService.update(connectorTO.getId(), connectorTO);\n             actual = connectorService.read(connectorTO.getId());\n-        } catch (HttpStatusCodeException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"update failed\", e);\n             t = e;\n         }\n@@ -181,7 +182,7 @@ public void create() {\n         // check also for the deletion of the created object\n         try {\n             connectorService.delete(actual.getId());\n-        } catch (HttpStatusCodeException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             LOG.error(\"delete failed\", e);\n             t = e;\n         }\n@@ -191,8 +192,8 @@ public void create() {\n         // check the non existence\n         try {\n             connectorService.read(actual.getId());\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -282,12 +283,11 @@ public void issueSYNCOPE10() {\n         // Create a new connector instance.\n         // ----------------------------------\n         Response response = connectorService.create(connInstanceTO);\n-        if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-            throw (RuntimeException) clientExceptionMapper.fromResponse(response);\n+        if (response.getStatus() != HttpStatus.SC_CREATED) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n         }\n \n-        connInstanceTO = getObject(response, ConnInstanceTO.class, connectorService);\n-\n+        connInstanceTO = adminClient.getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n         assertNotNull(connInstanceTO);\n         assertTrue(connInstanceTO.getCapabilities().isEmpty());\n \n@@ -301,7 +301,7 @@ public void issueSYNCOPE10() {\n         // Check for connector instance update after resource creation.\n         // ----------------------------------\n         response = resourceService.create(resourceTO);\n-        resourceTO = getObject(response, ResourceTO.class, resourceService);\n+        resourceTO = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n \n         assertNotNull(resourceTO);\n \n@@ -341,8 +341,8 @@ public void issueSYNCOPE10() {\n     public void deleteWithException() {\n         try {\n             connectorService.delete(0L);\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -478,7 +478,7 @@ public void validate() {\n         password.setSchema(passwordSchema);\n         password.getValues().add(\"sa\");\n         conf.add(password);\n-        \n+\n         ConnConfPropSchema tableSchema = new ConnConfPropSchema();\n         tableSchema.setName(\"table\");\n         tableSchema.setType(String.class.getName());\n@@ -616,11 +616,11 @@ public void issueSYNCOPE112() {\n             assertFalse(connectorService.check(connectorTO));\n \n             Response response = connectorService.create(connectorTO);\n-            if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-                throw (RuntimeException) clientExceptionMapper.fromResponse(response);\n+            if (response.getStatus() != HttpStatus.SC_CREATED) {\n+                throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n             }\n \n-            connectorTO = getObject(response, ConnInstanceTO.class, connectorService);\n+            connectorTO = adminClient.getObject(response.getLocation(), ConnectorService.class, ConnInstanceTO.class);\n             assertNotNull(connectorTO);\n             // ----------------------------------------\n \n@@ -677,14 +677,13 @@ public void bulkAction() {\n         conn.setId(0);\n         conn.setDisplayName(\"forBulk1\");\n \n-        bulkAction.addTarget(String.valueOf(\n-                getObject(connectorService.create(conn), ConnInstanceTO.class, connectorService).getId()));\n+        bulkAction.addTarget(String.valueOf(adminClient.getObject(\n+                connectorService.create(conn).getLocation(), ConnectorService.class, ConnInstanceTO.class).getId()));\n \n         conn.setDisplayName(\"forBulk2\");\n \n-        bulkAction.addTarget(String.valueOf(\n-                getObject(connectorService.create(conn), ConnInstanceTO.class, connectorService).getId()));\n-\n+        bulkAction.addTarget(String.valueOf(adminClient.getObject(\n+                connectorService.create(conn).getLocation(), ConnectorService.class, ConnInstanceTO.class).getId()));\n \n         Iterator<String> iter = bulkAction.getTargets().iterator();\n \n@@ -698,13 +697,13 @@ public void bulkAction() {\n         try {\n             connectorService.read(Long.valueOf(iter.next()));\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n         }\n \n         try {\n             connectorService.read(Long.valueOf(iter.next()));\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n         }\n     }\n }"},{"sha":"621367f0b398e359c3a9790e911baddbd016d826","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -25,16 +25,16 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n+import org.apache.http.HttpStatus;\n \n import org.apache.syncope.common.to.DerSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class DerivedSchemaTestITCase extends AbstractTest {\n@@ -81,7 +81,7 @@ public void delete() {\n         Throwable t = null;\n         try {\n             schemaService.read(AttributableType.ROLE, SchemaType.DERIVED, \"rderiveddata\");\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         } finally {\n@@ -123,17 +123,17 @@ public void issueSYNCOPE323() {\n         try {\n             createSchema(AttributableType.ROLE, SchemaType.DERIVED, actual);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n+        } catch (SyncopeClientCompositeException scce) {\n+            assertEquals(HttpStatus.SC_CONFLICT, scce.getStatusCode());\n             assertTrue(scce.hasException(SyncopeClientExceptionType.EntityExists));\n         }\n \n         actual.setName(null);\n         try {\n             createSchema(AttributableType.ROLE, SchemaType.DERIVED, actual);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n+        } catch (SyncopeClientCompositeException scce) {\n+            assertEquals(HttpStatus.SC_BAD_REQUEST, scce.getStatusCode());\n             assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n         }\n     }"},{"sha":"93a8f0acbc81a9df4b338be29b5a025832ada607","filename":"core/src/test/java/org/apache/syncope/core/rest/NotificationTestITCase.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -31,11 +31,12 @@\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.MembershipCond;\n import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.NotificationService;\n import org.apache.syncope.common.to.NotificationTO;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.types.TraceLevel;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -70,7 +71,8 @@ public void create() {\n         notificationTO.setRecipients(recipients);\n \n         Response response = notificationService.create(notificationTO);\n-        NotificationTO actual = getObject(response, NotificationTO.class, notificationService);\n+        NotificationTO actual =\n+                adminClient.getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getId());\n@@ -89,7 +91,7 @@ public void update() {\n         try {\n             notificationService.update(notificationTO.getId(), notificationTO);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             exception = e.getException(SyncopeClientExceptionType.InvalidNotification);\n         }\n         assertNotNull(exception);\n@@ -111,14 +113,14 @@ public void delete() {\n         NotificationTO notification = buildNotificationTO();\n         notification.setSelfAsRecipient(true);\n         Response response = notificationService.create(notification);\n-        notification = getObject(response, NotificationTO.class, notificationService);\n+        notification = adminClient.getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n \n         notificationService.delete(notification.getId());\n \n         try {\n             notificationService.read(notification.getId());\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         }\n     }\n@@ -132,8 +134,8 @@ public void issueSYNCOPE83() {\n         SyncopeClientException exception = null;\n         try {\n             Response response = notificationService.create(notificationTO);\n-            actual = getObject(response, NotificationTO.class, notificationService);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+            actual = adminClient.getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n+        } catch (SyncopeClientCompositeException e) {\n             exception = e.getException(SyncopeClientExceptionType.InvalidNotification);\n         }\n         assertNull(exception);"},{"sha":"31d6f9ba6a90c3661c741e0c89dba6d19def99fe","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.common.types.SyncPolicySpec;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -81,7 +81,7 @@ public void createWithException() {\n         try {\n             createPolicy(policy);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException sccee) {\n+        } catch (SyncopeClientCompositeException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidPasswordPolicy));\n         }\n     }\n@@ -94,7 +94,7 @@ public void createMissingDescription() {\n         try {\n             createPolicy(policy);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException sccee) {\n+        } catch (SyncopeClientCompositeException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidSyncPolicy));\n         }\n     }\n@@ -153,7 +153,7 @@ public void delete() {\n         Throwable t = null;\n         try {\n             policyService.read(policyTO.getId());\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             t = e;\n         }\n "},{"sha":"6447e48d97c151ca7bd844093449a1f5aa29c377","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -29,26 +29,27 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n+import org.apache.http.HttpStatus;\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.UserReportletConf;\n+import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.services.ReportletConfClasses;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.types.ReportExecStatus;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ReportTestITCase extends AbstractTest {\n \n     public ReportTO createReport(final ReportTO report) {\n         Response response = reportService.create(report);\n         assertCreated(response);\n-        return getObject(response, ReportTO.class, reportService);\n+        return adminClient.getObject(response.getLocation(), ReportService.class, ReportTO.class);\n     }\n \n     @Test\n@@ -140,15 +141,15 @@ public void delete() {\n         try {\n             reportService.read(report.getId());\n             fail();\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n     private void checkExport(final Long execId, final ReportExecExportFormat fmt) throws IOException {\n         final Response response = reportService.exportExecutionResult(execId, fmt);\n         assertNotNull(response);\n-        assertEquals(HttpStatus.OK.value(), response.getStatus());\n+        assertEquals(HttpStatus.SC_OK, response.getStatus());\n         assertNotNull(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER));\n         assertTrue(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER).\n                 endsWith(\".\" + fmt.name().toLowerCase()));"},{"sha":"1aaf92a743d1e926dde4a6ad0580985ae0cb8be4","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":22,"deletions":22,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -32,6 +32,8 @@\n import java.util.Set;\n \n import javax.ws.rs.core.Response;\n+import org.apache.http.HttpStatus;\n+import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.to.BulkAction;\n \n import org.apache.syncope.common.to.MappingItemTO;\n@@ -43,13 +45,11 @@\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.MappingPurpose;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ResourceTestITCase extends AbstractTest {\n@@ -67,7 +67,7 @@ public void create() {\n         ResourceTO resourceTO = buildResourceTO(resourceName);\n \n         Response response = resourceService.create(resourceTO);\n-        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n+        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(actual);\n \n         // check for existence\n@@ -122,7 +122,7 @@ public void createOverridingProps() {\n         resourceTO.getConnConfProperties().addAll(connectorConfigurationProperties);\n \n         Response response = resourceService.create(resourceTO);\n-        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n+        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(actual);\n \n         // check the existence\n@@ -159,7 +159,7 @@ public void createWithSingleMappingItem() {\n         resourceTO.setRmapping(rmapping);\n \n         Response response = resourceService.create(resourceTO);\n-        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n+        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n \n         assertNotNull(actual);\n         assertNotNull(actual.getUmapping());\n@@ -195,7 +195,7 @@ public void createWithInvalidMapping() {\n         try {\n             createResource(resourceTO);\n             fail(\"Create should not have worked\");\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             SyncopeClientException requiredValueMissing = e\n                     .getException(SyncopeClientExceptionType.RequiredValuesMissing);\n             assertNotNull(requiredValueMissing);\n@@ -205,7 +205,7 @@ public void createWithInvalidMapping() {\n         }\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void createWithoutExtAttr() {\n         String resourceName = \"ws-target-resource-create-wrong\";\n         ResourceTO resourceTO = new ResourceTO();\n@@ -251,7 +251,7 @@ public void createWithPasswordPolicy() {\n         resourceTO.setUmapping(mapping);\n \n         Response response = resourceService.create(resourceTO);\n-        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n+        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(actual);\n \n         // check the existence\n@@ -269,8 +269,8 @@ public void updateWithException() {\n             resourceTO.setName(\"resourcenotfound\");\n \n             resourceService.update(resourceTO.getName(), resourceTO);\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -325,8 +325,8 @@ public void update() {\n     public void deleteWithException() {\n         try {\n             resourceService.delete(\"resourcenotfound\");\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -351,15 +351,15 @@ public void delete() {\n \n         ResourceTO resource = buildResourceTO(resourceName);\n         Response response = resourceService.create(resource);\n-        ResourceTO actual = getObject(response, ResourceTO.class, resourceService);\n+        ResourceTO actual = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(actual);\n \n         resourceService.delete(resourceName);\n \n         try {\n             resourceService.read(resourceName);\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -396,17 +396,17 @@ public void issueSYNCOPE323() {\n         try {\n             createResource(actual);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n+        } catch (SyncopeClientCompositeException scce) {\n+            assertEquals(HttpStatus.SC_CONFLICT, scce.getStatusCode());\n             assertTrue(scce.hasException(SyncopeClientExceptionType.EntityExists));\n         }\n \n         actual.setName(null);\n         try {\n             createResource(actual);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n+        } catch (SyncopeClientCompositeException scce) {\n+            assertEquals(HttpStatus.SC_BAD_REQUEST, scce.getStatusCode());\n             assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n         }\n     }\n@@ -430,13 +430,13 @@ public void bulkAction() {\n         try {\n             resourceService.read(\"forBulk1\");\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n         }\n \n         try {\n             resourceService.read(\"forBulk2\");\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n         }\n     }\n "},{"sha":"19955d1ee02c8954e4684ada6d136ce57309a89e","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":16,"deletions":14,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -27,6 +27,7 @@\n \n import java.security.AccessControlException;\n import java.util.List;\n+import org.apache.http.HttpStatus;\n \n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.services.RoleService;\n@@ -35,13 +36,11 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class RoleTestITCase extends AbstractTest {\n@@ -83,7 +82,7 @@ public void createWithException() {\n         try {\n             createRole(roleService, newRoleTO);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException sccee) {\n+        } catch (SyncopeClientCompositeException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidSyncopeRole));\n         }\n     }\n@@ -135,8 +134,8 @@ public void createWithPasswordPolicy() {\n     public void delete() {\n         try {\n             roleService.delete(0L);\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n \n         RoleTO roleTO = new RoleTO();\n@@ -153,8 +152,8 @@ public void delete() {\n \n         try {\n             roleService.read(deletedRole.getId());\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -193,13 +192,14 @@ public void selfRead() {\n         assertTrue(userTO.getMembershipMap().containsKey(1L));\n         assertFalse(userTO.getMembershipMap().containsKey(3L));\n \n-        RoleService roleService2 = createServiceInstance(RoleService.class, \"rossini\", ADMIN_PWD);\n+        RoleService roleService2 =\n+                clientFactory.create(\"rossini\", ADMIN_PWD).getService(RoleService.class);\n \n         SyncopeClientException exception = null;\n         try {\n             roleService2.selfRead(3L);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             exception = e.getException(SyncopeClientExceptionType.UnauthorizedRole);\n         }\n         assertNotNull(exception);\n@@ -302,19 +302,21 @@ public void updateAsRoleOwner() {\n         roleMod.setName(\"Managing Director\");\n \n         // 3. try to update as verdi, not owner of role 7 - fail\n-        RoleService roleService2 = createServiceInstance(RoleService.class, \"verdi\", ADMIN_PWD);\n+        RoleService roleService2 =\n+                clientFactory.create(\"verdi\", ADMIN_PWD).getService(RoleService.class);\n \n         try {\n             roleService2.update(roleMod.getId(), roleMod);\n             fail();\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_FORBIDDEN, e.getStatusCode());\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         // 4. update as puccini, owner of role 7 because owner of role 6 with inheritance - success\n-        RoleService roleService3 = createServiceInstance(RoleService.class, \"puccini\", ADMIN_PWD);\n+        RoleService roleService3 =\n+                clientFactory.create(\"puccini\", ADMIN_PWD).getService(RoleService.class);\n \n         roleTO = roleService3.update(roleMod.getId(), roleMod);\n         assertEquals(\"Managing Director\", roleTO.getName());"},{"sha":"ccb30a96b992c7f236e3211f0448f0d69c3c34d0","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -26,6 +26,7 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n+import org.apache.http.HttpStatus;\n \n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.MembershipTO;\n@@ -37,13 +38,11 @@\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.util.AttributableOperations;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpClientErrorException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class SchemaTestITCase extends AbstractTest {\n@@ -69,7 +68,7 @@ public void createWithNotPermittedName() {\n         try {\n             createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n \n             assertNotNull(sce.getElements());\n@@ -87,7 +86,7 @@ public void createREnumWithoutEnumeration() {\n         try {\n             createSchema(AttributableType.ROLE, SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n \n             assertNotNull(sce.getElements());\n@@ -106,7 +105,7 @@ public void createUEnumWithoutEnumeration() {\n         try {\n             createSchema(AttributableType.USER, SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n \n             assertNotNull(sce.getElements());\n@@ -126,8 +125,8 @@ public void delete() {\n         SchemaTO firstname = null;\n         try {\n             firstname = schemaService.read(AttributableType.USER, SchemaType.NORMAL, schemaTO.getName());\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n         assertNull(firstname);\n     }\n@@ -166,7 +165,7 @@ public void update() {\n         try {\n             schemaService.update(AttributableType.ROLE, SchemaType.NORMAL, schemaTO.getName(), updatedTO);\n             fail(\"This should not be reacheable\");\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n             assertNotNull(sce);\n         }\n@@ -191,7 +190,7 @@ public void issue258() {\n         try {\n             schemaService.update(AttributableType.USER, SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n             assertNotNull(sce);\n         }\n@@ -238,7 +237,7 @@ public void issue260() {\n         try {\n             schemaService.update(AttributableType.USER, SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n             assertNotNull(sce);\n         }\n@@ -252,17 +251,17 @@ public void issueSYNCOPE323() {\n         try {\n             createSchema(AttributableType.ROLE, SchemaType.NORMAL, actual);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n+        } catch (SyncopeClientCompositeException scce) {\n+            assertEquals(HttpStatus.SC_CONFLICT, scce.getStatusCode());\n             assertTrue(scce.hasException(SyncopeClientExceptionType.EntityExists));\n         }\n \n         actual.setName(null);\n         try {\n             createSchema(AttributableType.ROLE, SchemaType.NORMAL, actual);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n+        } catch (SyncopeClientCompositeException scce) {\n+            assertEquals(HttpStatus.SC_BAD_REQUEST, scce.getStatusCode());\n             assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n         }\n     }"},{"sha":"b638111dc3b75e0d2638821d5ec9c4fc0c1df596","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":13,"deletions":11,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -29,12 +29,15 @@\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.core.Response;\n+import org.apache.http.HttpStatus;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.AttributableCond;\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.MembershipCond;\n import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n+import org.apache.syncope.common.services.NotificationService;\n+import org.apache.syncope.common.services.TaskService;\n import org.apache.syncope.common.to.AttributeTO;\n import org.apache.syncope.common.to.BulkAction;\n import org.apache.syncope.common.to.JobClassTO;\n@@ -55,6 +58,7 @@\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.types.TraceLevel;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n@@ -63,9 +67,7 @@\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.http.HttpStatus;\n import org.springframework.jdbc.core.JdbcTemplate;\n-import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class TaskTestITCase extends AbstractTest {\n@@ -106,7 +108,7 @@ public void create() {\n         task.setRoleTemplate(roleTemplate);\n \n         Response response = taskService.create(task);\n-        SyncTaskTO actual = getObject(response, SyncTaskTO.class, taskService);\n+        SyncTaskTO actual = adminClient.getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(actual);\n \n         task = taskService.read(actual.getId());\n@@ -199,8 +201,8 @@ public void readExecution() {\n     public void deal() {\n         try {\n             taskService.delete(0L);\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n         TaskExecTO exec = taskService.execute(1L, false);\n         assertEquals(PropagationTaskExecStatus.SUBMITTED.name(), exec.getStatus());\n@@ -216,8 +218,8 @@ public void deal() {\n         taskService.delete(1L);\n         try {\n             taskService.readExecution(exec.getId());\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -547,7 +549,7 @@ private String createNotificationTask() {\n         notification.setTemplate(\"optin\");\n \n         Response response = notificationService.create(notification);\n-        notification = getObject(response, NotificationTO.class, notificationService);\n+        notification = adminClient.getObject(response.getLocation(), NotificationService.class, NotificationTO.class);\n         assertNotNull(notification);\n \n         // 2. create user\n@@ -643,7 +645,7 @@ public void issueSYNCOPE144() {\n         task.setJobClassName(SyncJob.class.getName());\n \n         Response response = taskService.create(task);\n-        SchedTaskTO actual = getObject(response, SchedTaskTO.class, taskService);\n+        SchedTaskTO actual = adminClient.getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n         assertNotNull(actual);\n         assertEquals(\"issueSYNCOPE144\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description\", actual.getDescription());\n@@ -657,7 +659,7 @@ public void issueSYNCOPE144() {\n         task.setDescription(\"issueSYNCOPE144 Description_2\");\n \n         response = taskService.create(task);\n-        actual = getObject(response, SchedTaskTO.class, taskService);\n+        actual = adminClient.getObject(response.getLocation(), TaskService.class, SchedTaskTO.class);\n         assertNotNull(actual);\n         assertEquals(\"issueSYNCOPE144_2\", actual.getName());\n         assertEquals(\"issueSYNCOPE144 Description_2\", actual.getDescription());\n@@ -796,7 +798,7 @@ public void issueSYNCOPE258() {\n         task.setPerformUpdate(true);\n \n         Response response = taskService.create(task);\n-        SyncTaskTO actual = getObject(response, SyncTaskTO.class, taskService);\n+        SyncTaskTO actual = adminClient.getObject(response.getLocation(), TaskService.class, SyncTaskTO.class);\n         assertNotNull(actual);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"s258_1@apache.org\");"},{"sha":"bcd3acbae0cc84c610b4f65ae4fcb1c8f883f104","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":46,"deletions":36,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -29,10 +29,12 @@\n import java.util.List;\n \n import javax.ws.rs.core.Response;\n+import org.apache.http.HttpStatus;\n \n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.services.InvalidSearchConditionException;\n import org.apache.syncope.common.services.UserRequestService;\n import org.apache.syncope.common.services.UserService;\n@@ -41,12 +43,10 @@\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.types.UserRequestType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class UserRequestTestITCase extends AbstractTest {\n@@ -60,8 +60,9 @@ public void create() throws InvalidSearchConditionException {\n \n         Response response = configurationService.create(configurationTO);\n         assertNotNull(response);\n-        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        configurationTO = getObject(response, ConfigurationTO.class, configurationService);\n+        assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n+        configurationTO =\n+                adminClient.getObject(response.getLocation(), ConfigurationService.class, ConfigurationTO.class);\n         assertNotNull(configurationTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfcreate@syncope.apache.org\");\n@@ -70,7 +71,7 @@ public void create() throws InvalidSearchConditionException {\n         try {\n             createUserRequest(userRequestService, new UserRequestTO(userTO));\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));\n         }\n \n@@ -79,12 +80,14 @@ public void create() throws InvalidSearchConditionException {\n \n         response = configurationService.create(configurationTO);\n         assertNotNull(response);\n-        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n-        configurationTO = getObject(response, ConfigurationTO.class, configurationService);\n+        assertEquals(HttpStatus.SC_CREATED, response.getStatus());\n+        configurationTO =\n+                adminClient.getObject(response.getLocation(), ConfigurationService.class, ConfigurationTO.class);\n         assertNotNull(configurationTO);\n \n         // 4. as anonymous, request user create works\n-        UserRequestService userRequestService2 = createServiceInstance(UserRequestService.class, null, null);\n+        UserRequestService userRequestService2 =\n+                clientFactory.create(null, null).getService(UserRequestService.class);\n         createUserRequest(userRequestService2, new UserRequestTO(userTO));\n \n         // 5. try to find user\n@@ -117,19 +120,19 @@ public void update() {\n         try {\n             createUserRequest(userRequestService, new UserRequestTO(userMod));\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));\n         }\n \n         // 3. auth as user just created\n-        UserRequestService userRequestService2 = createServiceInstance(UserRequestService.class,\n-                userTO.getUsername(), initialPassword);\n+        UserRequestService userRequestService2 =\n+                clientFactory.create(userTO.getUsername(), initialPassword).getService(UserRequestService.class);\n \n         // 4. update with same password: not matching password policy\n         try {\n             createUserRequest(userRequestService2, new UserRequestTO(userMod));\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             assertNotNull(scce.getException(SyncopeClientExceptionType.InvalidSyncopeUser));\n         }\n \n@@ -138,8 +141,8 @@ public void update() {\n         createUserRequest(userRequestService2, new UserRequestTO(userMod));\n \n         // 6. user password has not changed yet\n-        UserService userService1 = createServiceInstance(UserService.class,\n-                userTO.getUsername(), userMod.getPassword());\n+        UserService userService1 =\n+                clientFactory.create(userTO.getUsername(), userMod.getPassword()).getService(UserService.class);\n         try {\n             userService1.readSelf();\n             fail(\"Credentials are not updated yet, thus request should raise AccessControlException\");\n@@ -152,8 +155,8 @@ public void update() {\n         assertNotNull(userTO);\n \n         // 8. user password has now changed\n-        UserService userService2 = createServiceInstance(UserService.class,\n-                userTO.getUsername(), userMod.getPassword());\n+        UserService userService2 =\n+                clientFactory.create(userTO.getUsername(), userMod.getPassword()).getService(UserService.class);\n         try {\n             UserTO user = userService2.readSelf();\n             assertNotNull(user);\n@@ -175,13 +178,13 @@ public void delete() {\n         try {\n             createUserRequest(userRequestService, new UserRequestTO(userTO.getId()));\n             fail();\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             assertNotNull(e.getException(SyncopeClientExceptionType.UnauthorizedRole));\n         }\n \n         // 3. auth as user just created\n-        UserRequestService userRequestService2 = createServiceInstance(UserRequestService.class,\n-                userTO.getUsername(), initialPassword);\n+        UserRequestService userRequestService2 =\n+                clientFactory.create(userTO.getUsername(), initialPassword).getService(UserRequestService.class);\n \n         // 4. now request user delete works\n         createUserRequest(userRequestService2, new UserRequestTO(userTO.getId()));\n@@ -197,8 +200,8 @@ public void delete() {\n         try {\n             userService.read(userTO.getId());\n             fail();\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -208,10 +211,12 @@ public void execute() {\n         UserTO userTO = UserTestITCase.getUniqueSampleTO(USERNAME);\n         final String initialPassword = userTO.getPassword();\n \n-        UserRequestService selfservice = createServiceInstance(UserRequestService.class, null, null);\n+        UserRequestService selfservice =\n+                clientFactory.create(null, null).getService(UserRequestService.class);\n         Response response = createUserRequest(selfservice, new UserRequestTO(userTO));\n \n-        UserRequestTO userRequest = getObject(response, UserRequestTO.class, userRequestService);\n+        UserRequestTO userRequest =\n+                adminClient.getObject(response.getLocation(), UserRequestService.class, UserRequestTO.class);\n         assertNotNull(userRequest);\n         assertEquals(UserRequestType.CREATE, userRequest.getType());\n         assertTrue(userRequest.getUsername().endsWith(USERNAME));\n@@ -253,12 +258,13 @@ public void execute() {\n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n \n-        selfservice = createServiceInstance(UserRequestService.class, userTO.getUsername(), initialPassword);\n+        selfservice =\n+                clientFactory.create(userTO.getUsername(), initialPassword).getService(UserRequestService.class);\n \n         userMod.setPassword(\"new\" + initialPassword);\n         response = createUserRequest(selfservice, new UserRequestTO(userMod));\n \n-        userRequest = getObject(response, UserRequestTO.class, userRequestService);\n+        userRequest = adminClient.getObject(response.getLocation(), UserRequestService.class, UserRequestTO.class);\n         assertNotNull(userRequest);\n         assertEquals(UserRequestType.UPDATE, userRequest.getType());\n         assertTrue(userRequest.getUsername().endsWith(USERNAME));\n@@ -282,18 +288,20 @@ public void execute() {\n         assertNotNull(userService.read(userTO.getUsername()));\n \n         try {\n-            createServiceInstance(UserService.class, userTO.getUsername(), \"new\" + initialPassword).readSelf();\n+            clientFactory.create(userTO.getUsername(), \"new\" + initialPassword).\n+                    getService(UserService.class).readSelf();\n             fail(\"Credentials are not updated yet, thus request should raise AccessControlException\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n-        assertNotNull(createServiceInstance(UserService.class, userTO.getUsername(), newpwd).readSelf());\n+        assertNotNull(clientFactory.create(userTO.getUsername(), newpwd).getService(UserService.class).readSelf());\n \n-        selfservice = createServiceInstance(UserRequestService.class, userTO.getUsername(), newpwd);\n+        selfservice = \n+                clientFactory.create(userTO.getUsername(), newpwd).getService(UserRequestService.class);\n         response = createUserRequest(selfservice, new UserRequestTO(userTO.getId()));\n \n-        userRequest = getObject(response, UserRequestTO.class, userRequestService);\n+        userRequest = adminClient.getObject(response.getLocation(), UserRequestService.class, UserRequestTO.class);\n         assertNotNull(userRequest);\n         assertEquals(UserRequestType.DELETE, userRequest.getType());\n         assertTrue(userRequest.getUsername().endsWith(USERNAME));\n@@ -318,23 +326,25 @@ public void execute() {\n         assertEquals(3, userRequestService.listByUsername(userTO.getUsername()).size());\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void executeNoClaim() {\n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"reqnoclaim@syncope.apache.org\");\n \n-        final UserRequestService selfservice = createServiceInstance(UserRequestService.class, null, null);\n+        final UserRequestService selfservice = \n+                clientFactory.create(null, null).getService(UserRequestService.class);\n \n-        final UserRequestTO userRequest = getObject(\n-                createUserRequest(selfservice, new UserRequestTO(userTO)), UserRequestTO.class, userRequestService);\n+        final UserRequestTO userRequest = adminClient.getObject(\n+                createUserRequest(selfservice, new UserRequestTO(userTO)).getLocation(), \n+                UserRequestService.class, UserRequestTO.class);\n         assertNotNull(userRequest);\n \n         userRequestService.executeCreate(userRequest.getId(), userTO);\n     }\n \n     private Response createUserRequest(final UserRequestService service, final UserRequestTO userRequestTO) {\n         Response response = service.create(userRequestTO);\n-        if (response.getStatus() != org.apache.http.HttpStatus.SC_CREATED) {\n-            throw (RuntimeException) clientExceptionMapper.fromResponse(response);\n+        if (response.getStatus() != HttpStatus.SC_CREATED) {\n+            throw (RuntimeException) clientFactory.getExceptionMapper().fromResponse(response);\n         }\n         return response;\n     }"},{"sha":"ac991b9cba0f9b6f2a5d324b2528e5b2e8d9c627","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":48,"deletions":42,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -39,10 +39,13 @@\n import java.util.Map;\n \n import javax.ws.rs.core.Response;\n+import org.apache.http.HttpStatus;\n \n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.services.PolicyService;\n+import org.apache.syncope.common.services.ResourceService;\n import org.apache.syncope.common.services.UserService;\n import org.apache.syncope.common.services.UserWorkflowService;\n import org.apache.syncope.common.to.AttributeTO;\n@@ -55,7 +58,6 @@\n import org.apache.syncope.common.to.MappingTO;\n import org.apache.syncope.common.to.MembershipTO;\n import org.apache.syncope.common.to.PasswordPolicyTO;\n-import org.apache.syncope.common.to.AbstractPolicyTO;\n import org.apache.syncope.common.to.PropagationRequestTO;\n import org.apache.syncope.common.to.PropagationStatusTO;\n import org.apache.syncope.common.to.PropagationTaskTO;\n@@ -73,7 +75,7 @@\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.AttributableOperations;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n@@ -84,11 +86,8 @@\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n import org.springframework.dao.EmptyResultDataAccessException;\n-import org.springframework.http.HttpStatus;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.util.StringUtils;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class UserTestITCase extends AbstractTest {\n@@ -128,13 +127,14 @@ public static UserTO getSampleTO(final String email) {\n \n     @Test\n     public void selfRead() {\n-        UserService userService2 = createServiceInstance(UserService.class, \"rossini\", ADMIN_PWD);\n+        UserService userService2 =\n+                clientFactory.create(\"rossini\", ADMIN_PWD).getService(UserService.class);\n \n         try {\n             userService2.read(1L);\n             fail();\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.FORBIDDEN, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_FORBIDDEN, e.getStatusCode());\n         } catch (AccessControlException e) {\n             // Will be thrown by cxf service\n             assertNotNull(e);\n@@ -192,7 +192,8 @@ public void issue172() {\n         } finally {\n             for (PasswordPolicyTO policyTO : policies) {\n                 Response response = policyService.create(policyTO);\n-                AbstractPolicyTO cPolicyTO = getObject(response, PasswordPolicyTO.class, policyService);\n+                PasswordPolicyTO cPolicyTO =\n+                        adminClient.getObject(response.getLocation(), PolicyService.class, PasswordPolicyTO.class);\n                 assertNotNull(cPolicyTO);\n             }\n         }\n@@ -223,7 +224,7 @@ public void issue186() {\n         SyncopeClientException sce = null;\n         try {\n             userTO = userService.update(userMod.getId(), userMod);\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n         }\n         assertNotNull(sce);\n@@ -248,7 +249,7 @@ public void issue186() {\n         sce = null;\n         try {\n             userTO = userService.update(userMod.getId(), userMod);\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.InvalidSyncopeUser);\n         }\n         assertNotNull(sce);\n@@ -272,7 +273,7 @@ public void testEnforceMandatoryCondition() {\n         SyncopeClientException sce = null;\n         try {\n             userTO = createUser(userTO);\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n         }\n         assertNotNull(sce);\n@@ -290,7 +291,7 @@ public void testEnforceMandatoryConditionOnDerived() {\n         resourceTO.setEnforceMandatoryCondition(true);\n \n         Response response = resourceService.create(resourceTO);\n-        resourceTO = getObject(response, ResourceTO.class, resourceService);\n+        resourceTO = adminClient.getObject(response.getLocation(), ResourceService.class, ResourceTO.class);\n         assertNotNull(resourceTO);\n \n         UserTO userTO = getUniqueSampleTO(\"syncope222@apache.org\");\n@@ -300,7 +301,7 @@ public void testEnforceMandatoryConditionOnDerived() {\n         SyncopeClientException sce = null;\n         try {\n             userTO = createUser(userTO);\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             sce = scce.getException(SyncopeClientExceptionType.RequiredValuesMissing);\n         }\n         assertNotNull(sce);\n@@ -322,14 +323,14 @@ public void createUserWithDbPropagation() {\n         assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void createWithInvalidPassword() {\n         UserTO userTO = getSampleTO(\"invalidpasswd@syncope.apache.org\");\n         userTO.setPassword(\"pass\");\n         createUser(userTO);\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void createWithInvalidUsername() {\n         UserTO userTO = getSampleTO(\"invalidusername@syncope.apache.org\");\n         userTO.setUsername(\"us\");\n@@ -342,7 +343,7 @@ public void createWithInvalidUsername() {\n         createUser(userTO);\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void createWithInvalidPasswordByRes() {\n         UserTO userTO = getSampleTO(\"invalidPwdByRes@passwd.com\");\n \n@@ -354,7 +355,7 @@ public void createWithInvalidPasswordByRes() {\n         createUser(userTO);\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void createWithInvalidPasswordByRole() {\n         UserTO userTO = getSampleTO(\"invalidPwdByRole@passwd.com\");\n \n@@ -369,7 +370,7 @@ public void createWithInvalidPasswordByRole() {\n         createUser(userTO);\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void createWithException() {\n         UserTO newUserTO = new UserTO();\n         newUserTO.getAttributes().add(attributeTO(\"userId\", \"userId@nowhere.org\"));\n@@ -454,15 +455,17 @@ public void create() {\n         assertEquals(maxTaskExecutions, taskTO.getExecutions().size());\n \n         // 3. verify password\n-        UserService userService1 = createServiceInstance(UserService.class, newUserTO.getUsername(), \"password123\");\n+        UserService userService1 =\n+                clientFactory.create(newUserTO.getUsername(), \"password123\").getService(UserService.class);\n         try {\n             UserTO user = userService1.readSelf();\n             assertNotNull(user);\n         } catch (AccessControlException e) {\n             fail(\"Credentials should be valid and not cause AccessControlException\");\n         }\n \n-        UserService userService2 = createServiceInstance(UserService.class, newUserTO.getUsername(), \"passwordXX\");\n+        UserService userService2 =\n+                clientFactory.create(newUserTO.getUsername(), \"passwordXX\").getService(UserService.class);\n         try {\n             userService2.readSelf();\n             fail(\"Credentials are invalid, thus request should raise AccessControlException\");\n@@ -479,7 +482,7 @@ public void create() {\n         SyncopeClientException sce = null;\n         try {\n             createUser(userTO);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             sce = e.getException(SyncopeClientExceptionType.DataIntegrityViolation);\n         }\n         assertNotNull(sce);\n@@ -505,11 +508,11 @@ public void createWithRequiredValueMissing() {\n         membershipTO.setRoleId(8L);\n         userTO.getMemberships().add(membershipTO);\n \n-        SyncopeClientCompositeErrorException ex = null;\n+        SyncopeClientCompositeException ex = null;\n         try {\n             // 1. create user without type (mandatory by UserSchema)\n             createUser(userTO);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             ex = e;\n         }\n         assertNotNull(ex);\n@@ -524,7 +527,7 @@ public void createWithRequiredValueMissing() {\n         ex = null;\n         try {\n             createUser(userTO);\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             ex = e;\n         }\n         assertNotNull(ex);\n@@ -559,17 +562,19 @@ public void createWithReject() {\n         assertNull(form.getOwner());\n \n         // 3. claim task from rossini, not in role 7 (designated for approval in workflow definition): fail\n-        UserWorkflowService userService2 = createServiceInstance(UserWorkflowService.class, \"rossini\", ADMIN_PWD);\n+        UserWorkflowService userService2 =\n+                clientFactory.create(\"rossini\", ADMIN_PWD).getService(UserWorkflowService.class);\n \n         try {\n             userService2.claimForm(form.getTaskId());\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             assertNotNull(scce.getException(SyncopeClientExceptionType.Workflow));\n         }\n \n         // 4. claim task from bellini, in role 7\n-        UserWorkflowService userService3 = createServiceInstance(UserWorkflowService.class, \"bellini\", ADMIN_PWD);\n+        UserWorkflowService userService3 =\n+                clientFactory.create(\"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n \n         form = userService3.claimForm(form.getTaskId());\n         assertNotNull(form);\n@@ -678,8 +683,8 @@ public void createWithApproval() {\n     public void delete() {\n         try {\n             userService.delete(0L);\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n \n         UserTO userTO = getSampleTO(\"qqgf.z@nn.com\");\n@@ -703,8 +708,8 @@ public void delete() {\n \n         try {\n             userService.delete(userTO.getId());\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -731,8 +736,8 @@ public void deleteByUsername() {\n \n         try {\n             userService.read(userTO.getId());\n-        } catch (HttpStatusCodeException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        } catch (SyncopeClientCompositeException e) {\n+            assertEquals(HttpStatus.SC_NOT_FOUND, e.getStatusCode());\n         }\n     }\n \n@@ -812,7 +817,7 @@ public void updateWithouPassword() {\n         assertFalse(userTO.getDerivedAttributeMap().containsKey(\"cn\"));\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void updateInvalidPassword() {\n         UserTO userTO = getSampleTO(\"updateinvalid@password.com\");\n \n@@ -826,7 +831,7 @@ public void updateInvalidPassword() {\n         userTO = userService.update(userMod.getId(), userMod);\n     }\n \n-    @Test(expected = SyncopeClientCompositeErrorException.class)\n+    @Test(expected = SyncopeClientCompositeException.class)\n     public void updateSamePassword() {\n         UserTO userTO = getSampleTO(\"updatesame@password.com\");\n \n@@ -1356,7 +1361,7 @@ public void issue288() {\n         try {\n             createUser(userTO);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException sccee) {\n+        } catch (SyncopeClientCompositeException sccee) {\n             assertNotNull(sccee.getException(SyncopeClientExceptionType.InvalidValues));\n         }\n     }\n@@ -1524,7 +1529,7 @@ public void issueSYNCOPE108() {\n         try {\n             readConnectorObject(RESOURCE_NAME_CSV, actual.getId());\n             fail(\"Read should not succeeed\");\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         }\n     }\n@@ -1616,7 +1621,7 @@ public void issueSYNCOPE185() {\n         try {\n             readConnectorObject(RESOURCE_NAME_LDAP, userTO.getId());\n             fail(\"This entry should not be present on this resource\");\n-        } catch (SyncopeClientCompositeErrorException sccee) {\n+        } catch (SyncopeClientCompositeException sccee) {\n             SyncopeClientException sce = sccee.getException(SyncopeClientExceptionType.NotFound);\n             assertNotNull(sce);\n         }\n@@ -1641,7 +1646,7 @@ public void issueSYNCOPE51() {\n         try {\n             createUser(userTO);\n             fail(\"Create user should not succeed\");\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             assertTrue(e.getException(SyncopeClientExceptionType.NotFound).getElements().iterator().next()\n                     .contains(\"MD5\"));\n         }\n@@ -2181,7 +2186,7 @@ public void issueSYNCOPE357() {\n         try {\n             resourceService.getConnectorObject(RESOURCE_NAME_LDAP, AttributableType.USER, userTO.getId());\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n+        } catch (SyncopeClientCompositeException scce) {\n             assertNotNull(scce.getException(SyncopeClientExceptionType.NotFound));\n         }\n     }\n@@ -2356,7 +2361,8 @@ public void issueSYNCOPE15() {\n         assertNotNull(form);\n \n         // 3. first claim ny bellini ....\n-        UserWorkflowService userService3 = createServiceInstance(UserWorkflowService.class, \"bellini\", ADMIN_PWD);\n+        UserWorkflowService userService3 =\n+                clientFactory.create(\"bellini\", ADMIN_PWD).getService(UserWorkflowService.class);\n \n         form = userService3.claimForm(form.getTaskId());\n         assertNotNull(form);"},{"sha":"4425ba7e8e2cb3c5266d11ab1ee8e3a7ec3cb35c","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -25,16 +25,16 @@\n import static org.junit.Assert.fail;\n \n import java.util.List;\n+import org.apache.http.HttpStatus;\n \n import org.apache.syncope.common.to.VirSchemaTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\n-import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeException;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n-import org.springframework.http.HttpStatus;\n \n @FixMethodOrder(MethodSorters.JVM)\n public class VirtualSchemaTestITCase extends AbstractTest {\n@@ -79,7 +79,7 @@ public void delete() {\n         Throwable t = null;\n         try {\n             schemaService.read(AttributableType.ROLE, SchemaType.VIRTUAL, \"rvirtualdata\");\n-        } catch (SyncopeClientCompositeErrorException e) {\n+        } catch (SyncopeClientCompositeException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n         }\n@@ -94,17 +94,17 @@ public void issueSYNCOPE323() {\n         try {\n             createSchema(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, actual);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            assertEquals(HttpStatus.CONFLICT, scce.getStatusCode());\n+        } catch (SyncopeClientCompositeException scce) {\n+            assertEquals(HttpStatus.SC_CONFLICT, scce.getStatusCode());\n             assertTrue(scce.hasException(SyncopeClientExceptionType.EntityExists));\n         }\n \n         actual.setName(null);\n         try {\n             createSchema(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL, actual);\n             fail();\n-        } catch (SyncopeClientCompositeErrorException scce) {\n-            assertEquals(HttpStatus.BAD_REQUEST, scce.getStatusCode());\n+        } catch (SyncopeClientCompositeException scce) {\n+            assertEquals(HttpStatus.SC_BAD_REQUEST, scce.getStatusCode());\n             assertTrue(scce.hasException(SyncopeClientExceptionType.RequiredValuesMissing));\n         }\n     }"},{"sha":"783cab61f1b70ce1e9bc805a47f8d93cce695616","filename":"core/src/test/resources/restClientContext.xml","status":"removed","additions":0,"deletions":70,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e04ddc8960da2464e1bf061c0a5579969996c127/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e04ddc8960da2464e1bf061c0a5579969996c127/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml?ref=e04ddc8960da2464e1bf061c0a5579969996c127","patch":"@@ -1,70 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xmlns:cxf=\"http://cxf.apache.org/core\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\n-                           http://cxf.apache.org/core \n-                           http://cxf.apache.org/schemas/core.xsd\">\n-\n-  <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\"/>\n-\n-  <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n-    <property name=\"depthProperties\">\n-      <bean id=\"depthProperties\" class=\"org.apache.cxf.staxutils.DocumentDepthProperties\">\n-        <property name=\"innerElementCountThreshold\" value=\"500\"/>\n-      </bean>\n-    </property>\n-    <property name=\"marshallerProperties\">\n-      <map>\n-        <entry key=\"jaxb.formatted.output\">\n-          <value type=\"java.lang.Boolean\">true</value>\n-        </entry>\n-      </map>\n-    </property>\n-  </bean>\n-\n-  <bean id=\"jsonProvider\" class=\"com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider\">\n-    <property name=\"mapper\" ref=\"jacksonObjectMapper\"/>\n-  </bean>\n-\n-  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.client.rest.RestClientExceptionMapper\"/>\n-\n-  <bean id=\"restClientFactory\" class=\"org.apache.syncope.client.rest.RestClientFactoryBean\">\n-    <property name=\"address\" value=\"http://localhost:9080/syncope/rest\"/>\n-    <property name=\"threadSafe\" value=\"true\"/>\n-    <property name=\"inheritHeaders\" value=\"true\"/>\n-    <property name=\"contentType\" value=\"application/json\"/>\n-    <property name=\"features\">\n-      <list>\n-        <cxf:logging/>\n-      </list>\n-    </property>\n-    <property name=\"providers\">\n-      <list>\n-        <ref bean=\"jaxbProvider\"/>\n-        <ref bean=\"jsonProvider\"/>\n-        <ref bean=\"exceptionMapper\"/>\n-      </list>\n-    </property>\n-  </bean>\n-\n-</beans>"},{"sha":"970bd3463e0395c746ac7254094a0b74d20f7bb4","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cbdece6fca0a6b158123a13f29dad3b62cf31ce0/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=cbdece6fca0a6b158123a13f29dad3b62cf31ce0","patch":"@@ -314,7 +314,7 @@ under the License.\n     <cxf.version>2.7.7-SNAPSHOT</cxf.version>\t\n     <spring.version>3.2.4.RELEASE</spring.version>\n     <spring-security.version>3.1.4.RELEASE</spring-security.version>\n-    <jackson.version>2.2.2</jackson.version>\n+    <jackson.version>2.2.3</jackson.version>\n     <xstream.version>1.4.4</xstream.version>\n     <velocity.version>1.7</velocity.version>\n     <quartz.version>2.2.0</quartz.version>"}]}