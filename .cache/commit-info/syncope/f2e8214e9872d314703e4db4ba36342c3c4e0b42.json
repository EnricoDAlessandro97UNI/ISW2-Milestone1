{"sha":"f2e8214e9872d314703e4db4ba36342c3c4e0b42","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyZTgyMTRlOTg3MmQzMTQ3MDNlNGRiNGJhMzYzNDJjM2M0ZTBiNDI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-10T13:33:19Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-10T14:02:53Z"},"message":"[SYNCOPE-152] Complete filter support, added sort support","tree":{"sha":"8497b117a202bfa60fc1fb0fc6de00bda32bafbc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8497b117a202bfa60fc1fb0fc6de00bda32bafbc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f2e8214e9872d314703e4db4ba36342c3c4e0b42","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2e8214e9872d314703e4db4ba36342c3c4e0b42","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f2e8214e9872d314703e4db4ba36342c3c4e0b42","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2e8214e9872d314703e4db4ba36342c3c4e0b42/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"013c1de03f77e558d46cf4f207ec5c648d5b9dd8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/013c1de03f77e558d46cf4f207ec5c648d5b9dd8","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/013c1de03f77e558d46cf4f207ec5c648d5b9dd8"}],"stats":{"total":561,"additions":503,"deletions":58},"files":[{"sha":"e3c1441cff08e4aa7a44ac37de7203bef7ee9413","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMEnterpriseUserConf.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMEnterpriseUserConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMEnterpriseUserConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMEnterpriseUserConf.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.common.lib.scim;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class SCIMEnterpriseUserConf implements Serializable {\n \n@@ -36,6 +40,29 @@ public class SCIMEnterpriseUserConf implements Serializable {\n \n     private SCIMManagerConf manager;\n \n+    @JsonIgnore\n+    public Map<String, String> asMap() {\n+        Map<String, String> map = new HashMap<>();\n+\n+        if (employeeNumber != null) {\n+            map.put(\"employeeNumber\", employeeNumber);\n+        }\n+        if (costCenter != null) {\n+            map.put(\"costCenter\", costCenter);\n+        }\n+        if (organization != null) {\n+            map.put(\"organization\", organization);\n+        }\n+        if (division != null) {\n+            map.put(\"division\", division);\n+        }\n+        if (department != null) {\n+            map.put(\"department\", department);\n+        }\n+\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n     public String getEmployeeNumber() {\n         return employeeNumber;\n     }"},{"sha":"8c4e9ae339e8823cf7cc71429d5ad2f66078b0ec","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserAddressConf.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserAddressConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserAddressConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserAddressConf.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.common.lib.scim;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.syncope.common.lib.scim.types.AddressCanonicalType;\n \n public class SCIMUserAddressConf implements Serializable {\n@@ -41,6 +45,32 @@ public class SCIMUserAddressConf implements Serializable {\n \n     private boolean primary;\n \n+    @JsonIgnore\n+    public Map<String, String> asMap() {\n+        Map<String, String> map = new HashMap<>();\n+\n+        if (formatted != null) {\n+            map.put(\"formatted\", formatted);\n+        }\n+        if (streetAddress != null) {\n+            map.put(\"streetAddress\", streetAddress);\n+        }\n+        if (locality != null) {\n+            map.put(\"locality\", locality);\n+        }\n+        if (region != null) {\n+            map.put(\"region\", region);\n+        }\n+        if (postalCode != null) {\n+            map.put(\"postalCode\", postalCode);\n+        }\n+        if (country != null) {\n+            map.put(\"country\", country);\n+        }\n+\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n     public String getFormatted() {\n         return formatted;\n     }"},{"sha":"c2c0d15b924d3ad3746f532470f45f7754fa5278","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserConf.java","status":"modified","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserConf.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -18,9 +18,13 @@\n  */\n package org.apache.syncope.common.lib.scim;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.List;\n+import java.util.Map;\n import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;\n import org.apache.syncope.common.lib.scim.types.IMCanonicalType;\n import org.apache.syncope.common.lib.scim.types.PhoneNumberCanonicalType;\n@@ -60,6 +64,38 @@ public class SCIMUserConf implements Serializable {\n \n     private final List<String> x509Certificates = new ArrayList<>();\n \n+    @JsonIgnore\n+    public Map<String, String> asMap() {\n+        Map<String, String> map = new HashMap<>();\n+\n+        if (displayName != null) {\n+            map.put(\"displayName\", displayName);\n+        }\n+        if (nickName != null) {\n+            map.put(\"nickName\", nickName);\n+        }\n+        if (profileUrl != null) {\n+            map.put(\"profileUrl\", profileUrl);\n+        }\n+        if (title != null) {\n+            map.put(\"title\", title);\n+        }\n+        if (userType != null) {\n+            map.put(\"userType\", userType);\n+        }\n+        if (preferredLanguage != null) {\n+            map.put(\"preferredLanguage\", preferredLanguage);\n+        }\n+        if (locale != null) {\n+            map.put(\"locale\", locale);\n+        }\n+        if (timezone != null) {\n+            map.put(\"timezone\", timezone);\n+        }\n+\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n     public SCIMUserNameConf getName() {\n         return name;\n     }"},{"sha":"2af80050b3c253c5349502764005f6b03a36db93","filename":"ext/scimv2/common-lib/src/main/java/org/apache/syncope/common/lib/scim/SCIMUserNameConf.java","status":"modified","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserNameConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserNameConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fscim%2FSCIMUserNameConf.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.common.lib.scim;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n import java.io.Serializable;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n \n public class SCIMUserNameConf implements Serializable {\n \n@@ -36,6 +40,32 @@ public class SCIMUserNameConf implements Serializable {\n \n     private String honorificSuffix;\n \n+    @JsonIgnore\n+    public Map<String, String> asMap() {\n+        Map<String, String> map = new HashMap<>();\n+\n+        if (formatted != null) {\n+            map.put(\"formatted\", formatted);\n+        }\n+        if (familyName != null) {\n+            map.put(\"familyName\", familyName);\n+        }\n+        if (givenName != null) {\n+            map.put(\"givenName\", givenName);\n+        }\n+        if (middleName != null) {\n+            map.put(\"middleName\", middleName);\n+        }\n+        if (honorificPrefix != null) {\n+            map.put(\"honorificPrefix\", honorificPrefix);\n+        }\n+        if (honorificSuffix != null) {\n+            map.put(\"honorificSuffix\", honorificSuffix);\n+        }\n+\n+        return Collections.unmodifiableMap(map);\n+    }\n+\n     public String getFormatted() {\n         return formatted;\n     }"},{"sha":"03f78e6d603900ce05915872632712ed0f5f7012","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":23,"deletions":21,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -431,32 +431,34 @@ public SCIMGroup toSCIMGroup(\n                         ? groupTO.getCreationDate() : groupTO.getLastChangeDate(),\n                         groupTO.getETagValue(),\n                         location),\n-                output(attributes, excludedAttributes, \"name\", groupTO.getName()));\n+                output(attributes, excludedAttributes, \"displayName\", groupTO.getName()));\n \n         MembershipCond membCond = new MembershipCond();\n         membCond.setGroup(groupTO.getKey());\n         SearchCond searchCond = SearchCond.getLeafCond(membCond);\n \n-        int count = userLogic.\n-                search(searchCond, 1, 1, Collections.<OrderByClause>emptyList(), SyncopeConstants.ROOT_REALM, false).\n-                getLeft();\n-\n-        for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-            List<UserTO> users = userLogic.search(\n-                    searchCond,\n-                    page,\n-                    AnyDAO.DEFAULT_PAGE_SIZE,\n-                    Collections.<OrderByClause>emptyList(),\n-                    SyncopeConstants.ROOT_REALM,\n-                    false).\n-                    getRight();\n-            users.forEach(userTO -> {\n-                group.getMembers().add(new Member(\n-                        userTO.getKey(),\n-                        StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),\n-                        userTO.getUsername(),\n-                        Resource.User));\n-            });\n+        if (output(attributes, excludedAttributes, \"members\")) {\n+            int count = userLogic.search(searchCond,\n+                    1, 1, Collections.<OrderByClause>emptyList(),\n+                    SyncopeConstants.ROOT_REALM, false).getLeft();\n+\n+            for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+                List<UserTO> users = userLogic.search(\n+                        searchCond,\n+                        page,\n+                        AnyDAO.DEFAULT_PAGE_SIZE,\n+                        Collections.<OrderByClause>emptyList(),\n+                        SyncopeConstants.ROOT_REALM,\n+                        false).\n+                        getRight();\n+                users.forEach(userTO -> {\n+                    group.getMembers().add(new Member(\n+                            userTO.getKey(),\n+                            StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),\n+                            userTO.getUsername(),\n+                            Resource.User));\n+                });\n+            }\n         }\n \n         return group;"},{"sha":"9ad7b823e0099584f2234a4fd836c432fd18d15d","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondConverter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondConverter.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -33,7 +33,7 @@ public final class SearchCondConverter {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SearchCondConverter.class);\n \n-    public static SearchCond convert(final String filter) {\n+    public static SearchCond convert(final SearchCondVisitor visitor, final String filter) {\n         SCIMFilterParser parser = new SCIMFilterParser(new CommonTokenStream(\n                 new SCIMFilterLexer(CharStreams.fromString(filter))));\n         parser.setBuildParseTree(true);\n@@ -43,7 +43,7 @@ public static SearchCond convert(final String filter) {\n         parser.setErrorHandler(new SCIMFilterErrorHandler());\n \n         try {\n-            return new SearchCondVisitor().visit(parser.scimFilter());\n+            return visitor.visit(parser.scimFilter());\n         } catch (Exception e) {\n             LOG.error(\"Could not parse {}\", filter, e);\n             throw new SCIMBadRequestException(ErrorType.invalidFilter, e.getMessage());"},{"sha":"6d07d304224c519589a5b7b188428363689a689f","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/scim/SearchCondVisitor.java","status":"modified","additions":191,"deletions":17,"changes":208,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSearchCondVisitor.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -18,7 +18,16 @@\n  */\n package org.apache.syncope.core.logic.scim;\n \n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserAddressConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserConf;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -29,41 +38,101 @@\n  */\n public class SearchCondVisitor extends SCIMFilterBaseVisitor<SearchCond> {\n \n+    private static final List<String> MULTIVALUE = Arrays.asList(\n+            \"emails\", \"phoneNumbers\", \"ims\", \"photos\", \"addresses\");\n+\n+    private final Resource resource;\n+\n+    private final SCIMConf conf;\n+\n+    public SearchCondVisitor(final Resource resource, final SCIMConf conf) {\n+        this.resource = resource;\n+        this.conf = conf;\n+    }\n+\n     @Override\n     public SearchCond visitScimFilter(final SCIMFilterParser.ScimFilterContext ctx) {\n         return visit(ctx.expression(0));\n     }\n \n-    private AttributeCond createAttributeCond(final String schema) {\n-        AttributeCond attributeCond;\n-        if (\"userName\".equalsIgnoreCase(schema)\n-                || (Resource.User.schema() + \":userName\").equalsIgnoreCase(schema)) {\n+    private boolean schemaEquals(final Resource resource, final String value, final String schema) {\n+        return resource == null\n+                ? value.contains(\":\")\n+                ? StringUtils.substringAfterLast(value, \":\").equalsIgnoreCase(schema)\n+                : value.equalsIgnoreCase(schema)\n+                : value.equalsIgnoreCase(schema) || (resource.schema() + \":\" + value).equalsIgnoreCase(schema);\n+    }\n+\n+    public AttributeCond createAttributeCond(final String schema) {\n+        AttributeCond attributeCond = null;\n \n+        if (schemaEquals(Resource.User, \"userName\", schema)) {\n             attributeCond = new AnyCond();\n             attributeCond.setSchema(\"username\");\n-        } else if (\"displayName\".equalsIgnoreCase(schema)\n-                || (Resource.Group.schema() + \":displayName\").equalsIgnoreCase(schema)) {\n-\n+        } else if (resource == Resource.Group && schemaEquals(Resource.Group, \"displayName\", schema)) {\n             attributeCond = new AnyCond();\n             attributeCond.setSchema(\"name\");\n-        } else if (\"meta.created\".equals(schema)) {\n+        } else if (schemaEquals(null, \"meta.created\", schema)) {\n             attributeCond = new AnyCond();\n             attributeCond.setSchema(\"creationDate\");\n-        } else if (\"meta.lastModified\".equals(schema)) {\n+        } else if (schemaEquals(null, \"meta.lastModified\", schema)) {\n             attributeCond = new AnyCond();\n             attributeCond.setSchema(\"lastChangeDate\");\n-        } else {\n-            attributeCond = new AttributeCond();\n-            attributeCond.setSchema(schema);\n+        }\n+\n+        if (resource == Resource.User) {\n+            if (conf.getUserConf() != null) {\n+                if (conf.getUserConf().getName() != null) {\n+                    for (Map.Entry<String, String> entry : conf.getUserConf().getName().asMap().entrySet()) {\n+                        if (schemaEquals(Resource.User, \"name.\" + entry.getKey(), schema)) {\n+                            attributeCond = new AttributeCond();\n+                            attributeCond.setSchema(entry.getValue());\n+                        }\n+                    }\n+                }\n+\n+                for (Map.Entry<String, String> entry : conf.getUserConf().asMap().entrySet()) {\n+                    if (schemaEquals(Resource.User, entry.getKey(), schema)) {\n+                        attributeCond = new AttributeCond();\n+                        attributeCond.setSchema(entry.getValue());\n+                    }\n+                }\n+\n+                for (SCIMUserAddressConf address : conf.getUserConf().getAddresses()) {\n+                    for (Map.Entry<String, String> entry : address.asMap().entrySet()) {\n+                        if (schemaEquals(Resource.User, \"addresses.\" + entry.getKey(), schema)) {\n+                            attributeCond = new AttributeCond();\n+                            attributeCond.setSchema(entry.getValue());\n+                        }\n+                    }\n+                }\n+            }\n+\n+            if (conf.getEnterpriseUserConf() != null) {\n+                for (Map.Entry<String, String> entry : conf.getEnterpriseUserConf().asMap().entrySet()) {\n+                    if (schemaEquals(Resource.EnterpriseUser, entry.getKey(), schema)) {\n+                        attributeCond = new AttributeCond();\n+                        attributeCond.setSchema(entry.getValue());\n+                    }\n+                }\n+\n+                if (conf.getEnterpriseUserConf().getManager() != null\n+                        && conf.getEnterpriseUserConf().getManager().getManager() != null) {\n+\n+                    attributeCond = new AttributeCond();\n+                    attributeCond.setSchema(conf.getEnterpriseUserConf().getManager().getManager());\n+                }\n+            }\n+        }\n+\n+        if (attributeCond == null) {\n+            throw new IllegalArgumentException(\"Could not match \" + schema + \" for \" + resource);\n         }\n \n         return attributeCond;\n     }\n \n-    private SearchCond transform(final String operator, final String left, final String right) {\n-        AttributeCond attributeCond = createAttributeCond(left);\n-        attributeCond.setExpression(StringUtils.strip(right, \"\\\"\"));\n-\n+    private SearchCond setOperator(final AttributeCond attributeCond, final String operator) {\n         switch (operator) {\n             case \"eq\":\n             default:\n@@ -104,14 +173,119 @@ private SearchCond transform(final String operator, final String left, final Str\n             case \"le\":\n                 attributeCond.setType(AttributeCond.Type.LE);\n                 break;\n-\n         }\n \n         return \"ne\".equals(operator)\n                 ? SearchCond.getNotLeafCond(attributeCond)\n                 : SearchCond.getLeafCond(attributeCond);\n     }\n \n+    private <E extends Enum<?>> SearchCond complex(\n+            final String operator, final String left, final String right, final List<SCIMComplexConf<E>> items) {\n+\n+        if (left.endsWith(\".type\")) {\n+            Optional<SCIMComplexConf<E>> item = items.stream().\n+                    filter(object -> object.getType().name().equals(StringUtils.strip(right, \"\\\"\"))).findFirst();\n+            if (item.isPresent()) {\n+                AttributeCond attributeCond = new AttributeCond();\n+                attributeCond.setSchema(item.get().getValue());\n+                attributeCond.setType(AttributeCond.Type.ISNOTNULL);\n+                return SearchCond.getLeafCond(attributeCond);\n+            }\n+        } else if (!conf.getUserConf().getEmails().isEmpty()\n+                && (MULTIVALUE.contains(left) || left.endsWith(\".value\"))) {\n+\n+            List<SearchCond> orConds = new ArrayList<>();\n+            items.forEach(item -> {\n+                AttributeCond cond = new AttributeCond();\n+                cond.setSchema(item.getValue());\n+                cond.setExpression(StringUtils.strip(right, \"\\\"\"));\n+                orConds.add(setOperator(cond, operator));\n+            });\n+            if (!orConds.isEmpty()) {\n+                return SearchCond.getOrCond(orConds);\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    private SearchCond addresses(\n+            final String operator, final String left, final String right, final List<SCIMUserAddressConf> items) {\n+\n+        if (left.endsWith(\".type\") && \"eq\".equals(operator)) {\n+            Optional<SCIMUserAddressConf> item = items.stream().\n+                    filter(object -> object.getType().name().equals(StringUtils.strip(right, \"\\\"\"))).findFirst();\n+            if (item.isPresent()) {\n+                AttributeCond attributeCond = new AttributeCond();\n+                attributeCond.setSchema(item.get().getFormatted());\n+                attributeCond.setType(AttributeCond.Type.ISNOTNULL);\n+                return SearchCond.getLeafCond(attributeCond);\n+            }\n+        } else if (!conf.getUserConf().getEmails().isEmpty()\n+                && (MULTIVALUE.contains(left) || left.endsWith(\".value\"))) {\n+\n+            List<SearchCond> orConds = new ArrayList<>();\n+            items.forEach(item -> {\n+                AttributeCond cond = new AttributeCond();\n+                cond.setSchema(item.getFormatted());\n+                cond.setExpression(StringUtils.strip(right, \"\\\"\"));\n+                orConds.add(setOperator(cond, operator));\n+            });\n+            if (!orConds.isEmpty()) {\n+                return SearchCond.getOrCond(orConds);\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    private SearchCond transform(final String operator, final String left, final String right) {\n+        SearchCond result = null;\n+\n+        if (MULTIVALUE.contains(StringUtils.substringBefore(left, \".\"))) {\n+            if (conf.getUserConf() == null) {\n+                throw new IllegalArgumentException(\"No \" + SCIMUserConf.class.getName() + \" provided, cannot continue\");\n+            }\n+\n+            switch (StringUtils.substringBefore(left, \".\")) {\n+                case \"emails\":\n+                    result = complex(operator, left, right, conf.getUserConf().getEmails());\n+                    break;\n+\n+                case \"phoneNumbers\":\n+                    result = complex(operator, left, right, conf.getUserConf().getPhoneNumbers());\n+                    break;\n+\n+                case \"ims\":\n+                    result = complex(operator, left, right, conf.getUserConf().getIms());\n+                    break;\n+\n+                case \"photos\":\n+                    result = complex(operator, left, right, conf.getUserConf().getPhotos());\n+                    break;\n+\n+                case \"addresses\":\n+                    result = addresses(operator, left, right, conf.getUserConf().getAddresses());\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        if (result == null) {\n+            AttributeCond attributeCond = createAttributeCond(left);\n+            attributeCond.setExpression(StringUtils.strip(right, \"\\\"\"));\n+            result = setOperator(attributeCond, operator);\n+        }\n+\n+        if (result == null) {\n+            throw new IllegalArgumentException(\n+                    \"Could not handle (\" + left + \" \" + operator + \" \" + right + \") for \" + resource);\n+        }\n+        return result;\n+    }\n+\n     @Override\n     public SearchCond visitEXPR_OPER_EXPR(final SCIMFilterParser.EXPR_OPER_EXPRContext ctx) {\n         return transform(ctx.operator().getText(), ctx.expression(0).getText(), ctx.expression(1).getText());"},{"sha":"108286928961e13c02e1217dfe8ebac5b7b58d6a","filename":"ext/scimv2/logic/src/test/java/org/apache/syncope/core/logic/scim/SCIMFilterTest.java","status":"modified","additions":122,"deletions":12,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fscim%2FSCIMFilterTest.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -22,15 +22,47 @@\n import static org.junit.jupiter.api.Assertions.assertNotNull;\n import static org.junit.jupiter.api.Assertions.assertNull;\n \n+import org.apache.syncope.common.lib.scim.SCIMComplexConf;\n+import org.apache.syncope.common.lib.scim.SCIMConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserConf;\n+import org.apache.syncope.common.lib.scim.SCIMUserNameConf;\n+import org.apache.syncope.common.lib.scim.types.EmailCanonicalType;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.ext.scimv2.api.type.Resource;\n+import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n public class SCIMFilterTest {\n \n+    private static SearchCondVisitor VISITOR;\n+\n+    @BeforeAll\n+    public static void setup() {\n+        SCIMConf conf = new SCIMConf();\n+        conf.setUserConf(new SCIMUserConf());\n+        conf.getUserConf().setTitle(\"title\");\n+        conf.getUserConf().setDisplayName(\"cn\");\n+        conf.getUserConf().setUserType(\"userType\");\n+\n+        conf.getUserConf().setName(new SCIMUserNameConf());\n+        conf.getUserConf().getName().setFamilyName(\"surname\");\n+\n+        SCIMComplexConf<EmailCanonicalType> email = new SCIMComplexConf<>();\n+        email.setValue(\"email\");\n+        email.setType(EmailCanonicalType.work);\n+        conf.getUserConf().getEmails().add(email);\n+        email = new SCIMComplexConf<>();\n+        email.setValue(\"gmail\");\n+        email.setType(EmailCanonicalType.home);\n+        conf.getUserConf().getEmails().add(email);\n+\n+        VISITOR = new SearchCondVisitor(Resource.User, conf);\n+    }\n+\n     @Test\n     public void eq() {\n-        SearchCond cond = SearchCondConverter.convert(\"userName eq \\\"bjensen\\\"\");\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"userName eq \\\"bjensen\\\"\");\n         assertNotNull(cond);\n         assertNotNull(cond.getAnyCond());\n         assertEquals(\"username\", cond.getAnyCond().getSchema());\n@@ -40,20 +72,21 @@ public void eq() {\n \n     @Test\n     public void sw() {\n-        SearchCond cond = SearchCondConverter.convert(\"userName sw \\\"J\\\"\");\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"userName sw \\\"J\\\"\");\n         assertNotNull(cond);\n         assertNotNull(cond.getAnyCond());\n         assertEquals(\"username\", cond.getAnyCond().getSchema());\n         assertEquals(AttributeCond.Type.ILIKE, cond.getAnyCond().getType());\n         assertEquals(\"J%\", cond.getAnyCond().getExpression());\n \n-        SearchCond fqn = SearchCondConverter.convert(\"urn:ietf:params:scim:schemas:core:2.0:User:userName sw \\\"J\\\"\");\n+        SearchCond fqn = SearchCondConverter.convert(\n+                VISITOR, \"urn:ietf:params:scim:schemas:core:2.0:User:userName sw \\\"J\\\"\");\n         assertEquals(cond, fqn);\n     }\n \n     @Test\n     public void pr() {\n-        SearchCond cond = SearchCondConverter.convert(\"title pr\");\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"title pr\");\n         assertNotNull(cond);\n         assertNotNull(cond.getAttributeCond());\n         assertEquals(\"title\", cond.getAttributeCond().getSchema());\n@@ -63,7 +96,7 @@ public void pr() {\n \n     @Test\n     public void gt() {\n-        SearchCond cond = SearchCondConverter.convert(\"meta.lastModified gt \\\"2011-05-13T04:42:34Z\\\"\");\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"meta.lastModified gt \\\"2011-05-13T04:42:34Z\\\"\");\n         assertNotNull(cond);\n         assertNotNull(cond.getAnyCond());\n         assertEquals(\"lastChangeDate\", cond.getAnyCond().getSchema());\n@@ -73,7 +106,7 @@ public void gt() {\n \n     @Test\n     public void not() {\n-        SearchCond cond = SearchCondConverter.convert(\"not (title pr)\");\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"not (title pr)\");\n         assertNotNull(cond);\n         assertNotNull(cond.getAttributeCond());\n         assertEquals(\"title\", cond.getAttributeCond().getSchema());\n@@ -83,7 +116,7 @@ public void not() {\n \n     @Test\n     public void and() {\n-        SearchCond cond = SearchCondConverter.convert(\"title pr and userName sw \\\"J\\\"\");\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"title pr and userName sw \\\"J\\\"\");\n         assertNotNull(cond);\n         assertEquals(SearchCond.Type.AND, cond.getType());\n \n@@ -104,7 +137,7 @@ public void and() {\n \n     @Test\n     public void or() {\n-        SearchCond cond = SearchCondConverter.convert(\"title pr or displayName eq \\\"Other\\\"\");\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"title pr or displayName eq \\\"Other\\\"\");\n         assertNotNull(cond);\n         assertEquals(SearchCond.Type.OR, cond.getType());\n \n@@ -117,9 +150,86 @@ public void or() {\n \n         SearchCond right = cond.getRightSearchCond();\n         assertNotNull(right);\n-        assertNotNull(right.getAnyCond());\n-        assertEquals(\"name\", right.getAnyCond().getSchema());\n-        assertEquals(AttributeCond.Type.IEQ, right.getAnyCond().getType());\n-        assertEquals(\"Other\", right.getAnyCond().getExpression());\n+        assertNotNull(right.getAttributeCond());\n+        assertEquals(\"cn\", right.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.IEQ, right.getAttributeCond().getType());\n+        assertEquals(\"Other\", right.getAttributeCond().getExpression());\n+    }\n+\n+    @Test\n+    public void type() {\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"userType eq \\\"Employee\\\" and (emails.type eq \\\"work\\\")\");\n+        assertNotNull(cond);\n+        assertEquals(SearchCond.Type.AND, cond.getType());\n+\n+        SearchCond left = cond.getLeftSearchCond();\n+        assertNotNull(left);\n+        assertNotNull(left.getAttributeCond());\n+        assertEquals(\"userType\", left.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.IEQ, left.getAttributeCond().getType());\n+        assertEquals(\"Employee\", left.getAttributeCond().getExpression());\n+\n+        SearchCond right = cond.getRightSearchCond();\n+        assertNotNull(right);\n+        assertNotNull(right.getAttributeCond());\n+        assertEquals(\"email\", right.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ISNOTNULL, right.getAttributeCond().getType());\n+    }\n+\n+    @Test\n+    public void name() {\n+        SearchCond cond = SearchCondConverter.convert(VISITOR, \"name.familyName co \\\"O'Malley\\\"\");\n+        assertNotNull(cond);\n+        assertEquals(SearchCond.Type.LEAF, cond.getType());\n+\n+        AttributeCond leaf = cond.getAttributeCond();\n+        assertNotNull(leaf);\n+        assertEquals(\"surname\", leaf.getSchema());\n+        assertEquals(AttributeCond.Type.ILIKE, leaf.getType());\n+        assertEquals(\"%O'Malley%\", leaf.getExpression());\n+    }\n+\n+    @Test\n+    public void emails() {\n+        SearchCond cond = SearchCondConverter.convert(VISITOR,\n+                \"emails co \\\"example.com\\\" or emails.value co \\\"example.org\\\"\");\n+        assertNotNull(cond);\n+        assertEquals(SearchCond.Type.OR, cond.getType());\n+\n+        SearchCond left = cond.getLeftSearchCond();\n+        assertNotNull(left);\n+        assertEquals(SearchCond.Type.OR, left.getType());\n+\n+        SearchCond left1 = left.getLeftSearchCond();\n+        assertNotNull(left1);\n+        assertNotNull(left1.getAttributeCond());\n+        assertEquals(\"email\", left1.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ILIKE, left1.getAttributeCond().getType());\n+        assertEquals(\"%example.com%\", left1.getAttributeCond().getExpression());\n+\n+        SearchCond left2 = left.getRightSearchCond();\n+        assertNotNull(left2);\n+        assertNotNull(left2.getAttributeCond());\n+        assertEquals(\"gmail\", left2.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ILIKE, left2.getAttributeCond().getType());\n+        assertEquals(\"%example.com%\", left2.getAttributeCond().getExpression());\n+\n+        SearchCond right = cond.getRightSearchCond();\n+        assertNotNull(right);\n+        assertEquals(SearchCond.Type.OR, right.getType());\n+\n+        SearchCond right1 = right.getLeftSearchCond();\n+        assertNotNull(right1);\n+        assertNotNull(right1.getAttributeCond());\n+        assertEquals(\"email\", right1.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ILIKE, right1.getAttributeCond().getType());\n+        assertEquals(\"%example.org%\", right1.getAttributeCond().getExpression());\n+\n+        SearchCond right2 = right.getRightSearchCond();\n+        assertNotNull(right2);\n+        assertNotNull(right2.getAttributeCond());\n+        assertEquals(\"gmail\", right2.getAttributeCond().getSchema());\n+        assertEquals(AttributeCond.Type.ILIKE, right2.getAttributeCond().getType());\n+        assertEquals(\"%example.org%\", right2.getAttributeCond().getExpression());\n     }\n }"},{"sha":"1092c0aa0f9d9f68dce1e5cb54e47ef433ee8f1e","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/service/AbstractService.java","status":"modified","additions":36,"deletions":4,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2Fservice%2FAbstractService.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -33,14 +33,17 @@\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.SCIMDataBinder;\n import org.apache.syncope.core.logic.UserLogic;\n+import org.apache.syncope.core.logic.scim.SCIMConfManager;\n import org.apache.syncope.core.logic.scim.SearchCondConverter;\n+import org.apache.syncope.core.logic.scim.SearchCondVisitor;\n import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.ext.scimv2.api.data.ListResponse;\n import org.apache.syncope.ext.scimv2.api.data.SCIMResource;\n import org.apache.syncope.ext.scimv2.api.data.SCIMSearchRequest;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n+import org.apache.syncope.ext.scimv2.api.type.SortOrder;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -60,6 +63,8 @@\n \n     private SCIMDataBinder binder;\n \n+    private SCIMConfManager confManager;\n+\n     protected UserLogic userLogic() {\n         synchronized (this) {\n             if (userLogic == null) {\n@@ -100,6 +105,15 @@ protected SCIMDataBinder binder() {\n         }\n     }\n \n+    protected SCIMConfManager confManager() {\n+        synchronized (this) {\n+            if (confManager == null) {\n+                confManager = ApplicationContextProvider.getApplicationContext().getBean(SCIMConfManager.class);\n+            }\n+        }\n+        return confManager;\n+    }\n+\n     @SuppressWarnings(\"unchecked\")\n     protected ListResponse<R> doSearch(\n             final Resource type,\n@@ -109,20 +123,38 @@ protected ListResponse<R> doSearch(\n             throw new UnsupportedOperationException();\n         }\n \n+        SearchCondVisitor visitor = new SearchCondVisitor(type, confManager().get());\n+\n         int startIndex = request.getStartIndex() == null || request.getStartIndex() <= 1\n                 ? 1\n                 : (request.getStartIndex() / AnyDAO.DEFAULT_PAGE_SIZE) + 1;\n \n+        int itemsPerPage = request.getCount() == null ? AnyDAO.DEFAULT_PAGE_SIZE : request.getCount();\n+\n+        List<OrderByClause> sort;\n+        if (request.getSortBy() == null) {\n+            sort = Collections.<OrderByClause>emptyList();\n+        } else {\n+            OrderByClause clause = new OrderByClause();\n+            clause.setField(visitor.createAttributeCond(request.getSortBy()).getSchema());\n+            clause.setDirection(request.getSortOrder() == null || request.getSortOrder() == SortOrder.ascending\n+                    ? OrderByClause.Direction.ASC\n+                    : OrderByClause.Direction.DESC);\n+            sort = Collections.singletonList(clause);\n+        }\n+\n         Pair<Integer, ? extends List<? extends AnyTO>> result = anyLogic(type).search(\n-                StringUtils.isBlank(request.getFilter()) ? null : SearchCondConverter.convert(request.getFilter()),\n+                StringUtils.isBlank(request.getFilter())\n+                ? null\n+                : SearchCondConverter.convert(visitor, request.getFilter()),\n                 startIndex,\n-                AnyDAO.DEFAULT_PAGE_SIZE,\n-                Collections.<OrderByClause>emptyList(),\n+                itemsPerPage,\n+                sort,\n                 SyncopeConstants.ROOT_REALM,\n                 false);\n \n         ListResponse<R> response = new ListResponse<>(\n-                result.getLeft(), startIndex == 1 ? 1 : startIndex - 1, AnyDAO.DEFAULT_PAGE_SIZE);\n+                result.getLeft(), startIndex == 1 ? 1 : startIndex - 1, itemsPerPage);\n \n         result.getRight().forEach(anyTO -> {\n             SCIMResource resource = null;"},{"sha":"ba4613f4e9282dbd6dd6580e3b91181cb975d371","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2e8214e9872d314703e4db4ba36342c3c4e0b42/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2e8214e9872d314703e4db4ba36342c3c4e0b42/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=f2e8214e9872d314703e4db4ba36342c3c4e0b42","patch":"@@ -204,7 +204,10 @@ public void conf() {\n     public void list() throws IOException {\n         assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n \n-        Response response = webClient().path(\"Groups\").get();\n+        Response response = webClient().path(\"Groups\").\n+                query(\"sortBy\", \"displayName\").\n+                query(\"count\", 11).\n+                get();\n         assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,\n@@ -214,8 +217,9 @@ public void list() throws IOException {\n         });\n         assertNotNull(result);\n         assertTrue(result.getTotalResults() > 0);\n-        assertFalse(result.getResources().isEmpty());\n+        assertEquals(11, result.getItemsPerPage());\n \n+        assertFalse(result.getResources().isEmpty());\n         result.getResources().forEach(group -> {\n             assertNotNull(group.getId());\n             assertNotNull(group.getDisplayName());"}]}