{"sha":"5e4bb93ca364638e62550a35353dc6a6ddae7c0c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVlNGJiOTNjYTM2NDYzOGU2MjU1MGEzNTM1M2RjNmE2ZGRhZTdjMGM=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-10T14:41:50Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-10T14:41:50Z"},"message":"[SYNCOPE-268]\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1431394 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6fcd161a957bd430b499d1a07cf463dbd99f2fc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e6fcd161a957bd430b499d1a07cf463dbd99f2fc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5e4bb93ca364638e62550a35353dc6a6ddae7c0c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5e4bb93ca364638e62550a35353dc6a6ddae7c0c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5e4bb93ca364638e62550a35353dc6a6ddae7c0c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/comments","author":null,"committer":null,"parents":[{"sha":"c89ee1780ac71411c1dd88fe62a58f301c4d4b26","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c89ee1780ac71411c1dd88fe62a58f301c4d4b26","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c89ee1780ac71411c1dd88fe62a58f301c4d4b26"}],"stats":{"total":375,"additions":208,"deletions":167},"files":[{"sha":"2ced5e8c6c28e4d4d39e56611c90d53be5b46432","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=5e4bb93ca364638e62550a35353dc6a6ddae7c0c","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.rest;\n \n+import java.util.UUID;\n+\n import javax.sql.DataSource;\n \n import org.apache.http.auth.UsernamePasswordCredentials;\n@@ -89,7 +91,7 @@ protected static AttributeMod attributeMod(final String schema, final String val\n     public static final String ADMIN_UID = \"admin\";\n \n     public static final String ADMIN_PWD = \"password\";\n-\n+    \n     protected PolicyServiceProxy policyService;\n \n     @Autowired\n@@ -124,6 +126,10 @@ protected static AttributeMod attributeMod(final String schema, final String val\n     @Autowired\n     protected DataSource testDataSource;\n \n+    public static String getUUIDString() {\n+    \treturn UUID.randomUUID().toString().substring(0, 8);\n+    }\n+\n     protected RestTemplate anonymousRestTemplate() {\n         return new RestTemplate();\n     }\n@@ -154,4 +160,5 @@ public void resetRestTemplate() {\n         schemaService = new SchemaServiceProxy(BASE_URL, restTemplate);\n         userRequestService = new UserRequestServiceProxy(BASE_URL, restTemplate);\n     }\n+    \n }"},{"sha":"57af4e60fbfc2f0f977ba29762a9076085d75444","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":9,"deletions":13,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=5e4bb93ca364638e62550a35353dc6a6ddae7c0c","patch":"@@ -68,7 +68,7 @@ public void testAdminEntitlements() {\n     public void testUserSchemaAuthorization() {\n         // 0. create a role that can only read schemas\n         RoleTO authRoleTO = new RoleTO();\n-        authRoleTO.setName(\"authRole\");\n+        authRoleTO.setName(\"authRole\" + getUUIDString());\n         authRoleTO.setParent(8L);\n         authRoleTO.addEntitlement(\"SCHEMA_READ\");\n \n@@ -85,7 +85,7 @@ public void testUserSchemaAuthorization() {\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)\n-        UserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(authRoleTO.getId());\n@@ -130,7 +130,7 @@ public void testUserSchemaAuthorization() {\n \n     @Test\n     public void testUserRead() {\n-        UserTO userTO = UserTestITCase.getSampleTO(\"testuserread@test.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -166,7 +166,7 @@ public void testUserRead() {\n \n     @Test\n     public void testUserSearch() {\n-        UserTO userTO = UserTestITCase.getSampleTO(\"testusersearch@test.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -214,8 +214,7 @@ public void testUserSearch() {\n \n     @Test\n     public void checkFailedLogins() {\n-        UserTO userTO = UserTestITCase\n-                .getSampleTO(\"checkFailedLogin@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -277,8 +276,7 @@ public void checkFailedLogins() {\n \n     @Test\n     public void checkUserSuspension() {\n-        UserTO userTO = UserTestITCase\n-                .getSampleTO(\"checkSuspension@syncope.apache.org\");\n+        UserTO userTO = UserTestITCase.getSampleUniqueTO();\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -398,7 +396,7 @@ public void checkUserSuspension() {\n     public void issueSYNCOPE48() {\n         // Parent role, able to create users with role 1\n         RoleTO parentRole = new RoleTO();\n-        parentRole.setName(\"parentAdminRole\");\n+        parentRole.setName(\"parentAdminRole\" + getUUIDString());\n         parentRole.addEntitlement(\"USER_CREATE\");\n         parentRole.addEntitlement(\"ROLE_1\");\n         parentRole.setParent(1L);\n@@ -415,8 +413,7 @@ public void issueSYNCOPE48() {\n         assertNotNull(childRole);\n \n         // User with child role, created by admin\n-        UserTO role1Admin = UserTestITCase\n-                .getSampleTO(\"syncope48admin@apache.org\");\n+        UserTO role1Admin = UserTestITCase.getSampleUniqueTO();\n         role1Admin.setPassword(\"password\");\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(childRole.getId());\n@@ -428,8 +425,7 @@ public void issueSYNCOPE48() {\n         super.setupRestTemplate(role1Admin.getUsername(), \"password\");\n \n         // User with role 1, created by user with child role created above\n-        UserTO role1User = UserTestITCase\n-                .getSampleTO(\"syncope48user@apache.org\");\n+        UserTO role1User = UserTestITCase.getSampleUniqueTO();\n         membershipTO = new MembershipTO();\n         membershipTO.setRoleId(1L);\n         role1User.addMembership(membershipTO);"},{"sha":"53d4c7ab9ded6e9d06348547a00f87e37c48815b","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":97,"deletions":87,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=5e4bb93ca364638e62550a35353dc6a6ddae7c0c","patch":"@@ -256,7 +256,7 @@ public void issueSYNCOPE10() {\n \n         // Make it new.\n         connInstanceTO.setId(0);\n-        connInstanceTO.setDisplayName(\"newDisplayName\");\n+        connInstanceTO.setDisplayName(\"newDisplayName\" + getUUIDString());\n         // ----------------------------------\n \n         // ----------------------------------\n@@ -516,90 +516,100 @@ public void getSchemaNames() {\n         assertFalse(schemaNames.isEmpty());\n     }\n \n-    @Test\n-    public void issueSYNCOPE112() {\n-\n-        // ----------------------------------------\n-        // Create a new connector\n-        // ----------------------------------------\n-        ConnInstanceTO connectorTO = new ConnInstanceTO();\n-\n-        // set connector version\n-        connectorTO.setVersion(connidSoapVersion);\n-\n-        // set connector name\n-        connectorTO.setConnectorName(\"org.connid.bundles.soap.WebServiceConnector\");\n-\n-        // set bundle name\n-        connectorTO.setBundleName(\"org.connid.bundles.soap\");\n-\n-        // set display name\n-        connectorTO.setDisplayName(\"WSSoap\");\n-\n-        // set the connector configuration using PropertyTO\n-        Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n-\n-        ConnConfPropSchema userSchema = new ConnConfPropSchema();\n-        userSchema.setName(\"endpoint\");\n-        userSchema.setType(String.class.getName());\n-        userSchema.setRequired(true);\n-        ConnConfProperty endpoint = new ConnConfProperty();\n-        endpoint.setSchema(userSchema);\n-        endpoint.setValues(Collections.singletonList(\"http://localhost:9080/does_not_work\"));\n-        endpoint.setOverridable(true);\n-\n-        ConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n-        keyColumnSchema.setName(\"servicename\");\n-        keyColumnSchema.setType(String.class.getName());\n-        keyColumnSchema.setRequired(true);\n-        ConnConfProperty servicename = new ConnConfProperty();\n-        servicename.setSchema(keyColumnSchema);\n-        servicename.setValues(Collections\n-                .singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n-        servicename.setOverridable(false);\n-\n-        conf.add(endpoint);\n-        conf.add(servicename);\n-\n-        // set connector configuration\n-        connectorTO.setConfiguration(conf);\n-\n-        assertFalse(connectorService.validate(connectorTO));\n-\n-        connectorTO = connectorService.create(connectorTO);\n-        assertNotNull(connectorTO);\n-        // ----------------------------------------\n-\n-        // ----------------------------------------\n-        // create a resourceTO\n-        // ----------------------------------------\n-        String resourceName = \"checkForPropOverriding\";\n-        ResourceTO resourceTO = new ResourceTO();\n-\n-        resourceTO.setName(resourceName);\n-        resourceTO.setConnectorId(connectorTO.getId());\n-\n-        conf = new HashSet<ConnConfProperty>();\n-        endpoint.setValues(Collections.singletonList(\"http://localhost:9080/wssample/services/provisioning\"));\n-        conf.add(endpoint);\n-\n-        resourceTO.setConnectorConfigurationProperties(conf);\n-\n-        MappingTO mapping = new MappingTO();\n-        resourceTO.setUmapping(mapping);\n-\n-        MappingItemTO mapItem = new MappingItemTO();\n-        mapItem.setExtAttrName(\"uid\");\n-        mapItem.setIntAttrName(\"userId\");\n-        mapItem.setIntMappingType(IntMappingType.UserSchema);\n-        mapItem.setAccountid(true);\n-        mapping.setAccountIdItem(mapItem);\n-        // ----------------------------------------\n-\n-        // ----------------------------------------\n-        // Check connection without saving the resource ....\n-        // ----------------------------------------\n-        assertTrue(resourceService.check(resourceTO));\n-        // ----------------------------------------\n-    }\n+\t@Test\n+\tpublic void issueSYNCOPE112() {\n+\n+\t\t// ----------------------------------------\n+\t\t// Create a new connector\n+\t\t// ----------------------------------------\n+\t\tConnInstanceTO connectorTO = new ConnInstanceTO();\n+\n+\t\t// set connector version\n+\t\tconnectorTO.setVersion(connidSoapVersion);\n+\n+\t\t// set connector name\n+\t\tconnectorTO\n+\t\t\t\t.setConnectorName(\"org.connid.bundles.soap.WebServiceConnector\");\n+\n+\t\t// set bundle name\n+\t\tconnectorTO.setBundleName(\"org.connid.bundles.soap\");\n+\n+\t\t// set display name\n+\t\tconnectorTO.setDisplayName(\"WSSoap\");\n+\n+\t\t// set the connector configuration using PropertyTO\n+\t\tSet<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+\n+\t\tConnConfPropSchema userSchema = new ConnConfPropSchema();\n+\t\tuserSchema.setName(\"endpoint\");\n+\t\tuserSchema.setType(String.class.getName());\n+\t\tuserSchema.setRequired(true);\n+\t\tConnConfProperty endpoint = new ConnConfProperty();\n+\t\tendpoint.setSchema(userSchema);\n+\t\tendpoint.setValues(Collections\n+\t\t\t\t.singletonList(\"http://localhost:9080/does_not_work\"));\n+\t\tendpoint.setOverridable(true);\n+\n+\t\tConnConfPropSchema keyColumnSchema = new ConnConfPropSchema();\n+\t\tkeyColumnSchema.setName(\"servicename\");\n+\t\tkeyColumnSchema.setType(String.class.getName());\n+\t\tkeyColumnSchema.setRequired(true);\n+\t\tConnConfProperty servicename = new ConnConfProperty();\n+\t\tservicename.setSchema(keyColumnSchema);\n+\t\tservicename\n+\t\t\t\t.setValues(Collections\n+\t\t\t\t\t\t.singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n+\t\tservicename.setOverridable(false);\n+\n+\t\tconf.add(endpoint);\n+\t\tconf.add(servicename);\n+\n+\t\t// set connector configuration\n+\t\tconnectorTO.setConfiguration(conf);\n+\n+\t\ttry {\n+\n+\t\t\tassertFalse(connectorService.validate(connectorTO));\n+\n+\t\t\tconnectorTO = connectorService.create(connectorTO);\n+\t\t\tassertNotNull(connectorTO);\n+\t\t\t// ----------------------------------------\n+\n+\t\t\t// ----------------------------------------\n+\t\t\t// create a resourceTO\n+\t\t\t// ----------------------------------------\n+\t\t\tString resourceName = \"checkForPropOverriding\";\n+\t\t\tResourceTO resourceTO = new ResourceTO();\n+\n+\t\t\tresourceTO.setName(resourceName);\n+\t\t\tresourceTO.setConnectorId(connectorTO.getId());\n+\n+\t\t\tconf = new HashSet<ConnConfProperty>();\n+\t\t\tendpoint.setValues(Collections\n+\t\t\t\t\t.singletonList(\"http://localhost:9080/wssample/services/provisioning\"));\n+\t\t\tconf.add(endpoint);\n+\n+\t\t\tresourceTO.setConnectorConfigurationProperties(conf);\n+\n+\t\t\tMappingTO mapping = new MappingTO();\n+\t\t\tresourceTO.setUmapping(mapping);\n+\n+\t\t\tMappingItemTO mapItem = new MappingItemTO();\n+\t\t\tmapItem.setExtAttrName(\"uid\");\n+\t\t\tmapItem.setIntAttrName(\"userId\");\n+\t\t\tmapItem.setIntMappingType(IntMappingType.UserSchema);\n+\t\t\tmapItem.setAccountid(true);\n+\t\t\tmapping.setAccountIdItem(mapItem);\n+\t\t\t// ----------------------------------------\n+\n+\t\t\t// ----------------------------------------\n+\t\t\t// Check connection without saving the resource ....\n+\t\t\t// ----------------------------------------\n+\t\t\tassertTrue(resourceService.check(resourceTO));\n+\t\t\t// ----------------------------------------\n+\t\t} finally {\n+\t\t\t// Remove connector from db to make test re-runnable\n+\t\t\tconnectorService.delete(connectorTO.getId());\n+\t\t}\n+\t}\n }"},{"sha":"f2fd2876ea886c048d6036f6c730bcad737a7f3d","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=5e4bb93ca364638e62550a35353dc6a6ddae7c0c","patch":"@@ -82,6 +82,10 @@ public void delete() {\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n+        } finally {\n+        \t// Recreate schema to make test re-runnable\n+        \tschema = schemaService.create(ROLE, SchemaService.SchemaType.DERIVED, schemaToDelete);\n+        \tassertNotNull(schema);\n         }\n         assertNotNull(t);\n     }\n@@ -91,14 +95,20 @@ public void update() {\n         DerivedSchemaTO schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n-\n-        schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n-\n-        schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n-        assertNotNull(schema);\n-\n-        schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n-        assertNotNull(schema);\n-        assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n+        try {\n+            schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n+\n+            schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n+            assertNotNull(schema);\n+\n+            schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n+            assertNotNull(schema);\n+            assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n+        } finally {\n+    \t\t// Set updated back to make test re-runnable\n+    \t\tschema.setExpression(\"mderived_sx + '-' + mderived_dx\");\n+            schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n+            assertNotNull(schema);\n+    \t}\n     }\n }"},{"sha":"9aa2e0336538c47e60068538f212b5a39d5a0a78","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=5e4bb93ca364638e62550a35353dc6a6ddae7c0c","patch":"@@ -107,9 +107,7 @@ public void createMissingDescription() {\n \n     @Test\n     public void create() {\n-        SyncPolicyTO policy = new SyncPolicyTO();\n-        policy.setSpecification(new SyncPolicySpec());\n-        policy.setDescription(\"Sync policy\");\n+        SyncPolicyTO policy = buildSyncPolicyTO();\n \n         SyncPolicyTO policyTO = policyService.create(policy);\n \n@@ -149,22 +147,28 @@ public void update() {\n \n     @Test\n     public void delete() {\n-        final SyncPolicyTO policyTO = policyService.read(7L, SyncPolicyTO.class);\n-\n-        assertNotNull(\"find to delete did not work\", policyTO);\n+        SyncPolicyTO policy = buildSyncPolicyTO();\n+        SyncPolicyTO policyTO = policyService.create(policy);\n+        assertNotNull(policyTO);\n \n         PolicyTO policyToDelete =\n-                policyService.delete(7L, SyncPolicyTO.class);\n+                policyService.delete(policyTO.getId(), SyncPolicyTO.class);\n         assertNotNull(policyToDelete);\n \n         Throwable t = null;\n         try {\n-        \tpolicyService.read(7L, SyncPolicyTO.class);\n+        \tpolicyService.read(policyTO.getId(), SyncPolicyTO.class);\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n         }\n \n         assertNotNull(t);\n     }\n \n+\tprivate SyncPolicyTO buildSyncPolicyTO() {\n+\t\tSyncPolicyTO policy = new SyncPolicyTO();\n+        policy.setSpecification(new SyncPolicySpec());\n+        policy.setDescription(\"Sync policy\");\n+\t\treturn policy;\n+\t}\n }"},{"sha":"288ba5213004e5c37630dc9d4224bd9210cf354d","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=5e4bb93ca364638e62550a35353dc6a6ddae7c0c","patch":"@@ -96,7 +96,7 @@ public void readExecution() {\n     @Test\n     public void create() {\n         ReportTO report = new ReportTO();\n-        report.setName(\"testReportForCreate\");\n+        report.setName(\"testReportForCreate\" + getUUIDString());\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));\n \n@@ -112,7 +112,7 @@ public void create() {\n     @Test\n     public void update() {\n         ReportTO report = new ReportTO();\n-        report.setName(\"testReportForUpdate\");\n+        report.setName(\"testReportForUpdate\" + getUUIDString());\n         report.addReportletConf(new UserReportletConf(\"first\"));\n         report.addReportletConf(new UserReportletConf(\"second\"));\n \n@@ -180,7 +180,7 @@ public void executeAndExport() throws IOException {\n \n         ReportTO reportTO = reportService.read(1L);\n         reportTO.setId(0);\n-        reportTO.setName(\"executeAndExport\");\n+        reportTO.setName(\"executeAndExport\" + getUUIDString());\n         reportTO = reportService.create(reportTO);\n         assertNotNull(reportTO);\n \n@@ -252,7 +252,7 @@ public void executeAndExport() throws IOException {\n     @Test\n     public void issueSYNCOPE43() {\n         ReportTO reportTO = new ReportTO();\n-        reportTO.setName(\"issueSYNCOPE43\");\n+        reportTO.setName(\"issueSYNCOPE43\" + getUUIDString());\n         reportTO = reportService.create(reportTO);\n         assertNotNull(reportTO);\n \n@@ -279,7 +279,7 @@ public void issueSYNCOPE102() throws IOException {\n         // Create\n         ReportTO reportTO = reportService.read(1L);\n         reportTO.setId(0);\n-        reportTO.setName(\"issueSYNCOPE102\");\n+        reportTO.setName(\"issueSYNCOPE102\" + getUUIDString());\n         reportTO = reportService.create(reportTO);\n         assertNotNull(reportTO);\n "},{"sha":"32c3428b794f411638b26de7a76f76a691618b70","filename":"core/src/test/java/org/apache/syncope/core/rest/ResourceTestITCase.java","status":"modified","additions":48,"deletions":39,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FResourceTestITCase.java?ref=5e4bb93ca364638e62550a35353dc6a6ddae7c0c","patch":"@@ -54,34 +54,7 @@ public void getPropagationActionsClasses() {\n     @Test\n     public void create() {\n         String resourceName = \"ws-target-resource-create\";\n-        ResourceTO resourceTO = new ResourceTO();\n-\n-        resourceTO.setName(resourceName);\n-        resourceTO.setConnectorId(102L);\n-\n-        MappingTO mapping = new MappingTO();\n-\n-        MappingItemTO item = new MappingItemTO();\n-        item.setExtAttrName(\"uid\");\n-        item.setIntAttrName(\"userId\");\n-        item.setIntMappingType(IntMappingType.UserSchema);\n-        mapping.addItem(item);\n-\n-        item = new MappingItemTO();\n-        item.setExtAttrName(\"username\");\n-        item.setIntAttrName(\"fullname\");\n-        item.setIntMappingType(IntMappingType.UserId);\n-        item.setAccountid(true);\n-        mapping.setAccountIdItem(item);\n-\n-        item = new MappingItemTO();\n-        item.setExtAttrName(\"fullname\");\n-        item.setIntAttrName(\"cn\");\n-        item.setIntMappingType(IntMappingType.UserSchema);\n-        item.setAccountid(false);\n-        mapping.addItem(item);\n-\n-        resourceTO.setUmapping(mapping);\n+        ResourceTO resourceTO = buildResourceTO(resourceName);\n \n         ResourceTO actual = resourceService.create(resourceTO);\n         assertNotNull(actual);\n@@ -335,23 +308,26 @@ public void deleteWithException() {\n \n     @Test\n     public void updateResetSyncToken() {\n-        // pre condition: sync token is set\n-        String resourceName = \"ws-target-resource-update-resetsynctoken\";\n-        ResourceTO pre = resourceService.read(resourceName);\n-        assertNotNull(pre.getUsyncToken());\n-\n-        pre.setUsyncToken(null);\n-\n-        ResourceTO actual = resourceService.update(pre.getName(), pre);\n-\n-        // check that the synctoken has been reset\n-        assertNull(actual.getUsyncToken());\n+        // create resource with sync token\n+        String resourceName = \"ws-target-resource-update-resetsynctoken\" + getUUIDString();\n+    \tResourceTO pre = buildResourceTO(resourceName);\n+    \tpre.setUsyncToken(\"test\");\n+    \tresourceService.create(pre);\n+\n+\t\tpre.setUsyncToken(null);\n+\t\tResourceTO actual = resourceService.update(pre.getName(), pre);\n+\t\t// check that the synctoken has been reset\n+\t\tassertNull(actual.getUsyncToken());\n     }\n \n     @Test\n     public void delete() {\n         final String resourceName = \"ws-target-resource-delete\";\n \n+        ResourceTO resource = buildResourceTO(resourceName);\n+        ResourceTO actual = resourceService.create(resource);\n+        assertNotNull(actual);\n+        \n         ResourceTO deletedResource = resourceService.delete(resourceName);\n         assertNotNull(deletedResource);\n \n@@ -387,4 +363,37 @@ public void read() {\n \n         assertNotNull(actual);\n     }\n+\n+\tprivate ResourceTO buildResourceTO(String resourceName) {\n+\t\tResourceTO resourceTO = new ResourceTO();\n+\n+        resourceTO.setName(resourceName);\n+        resourceTO.setConnectorId(102L);\n+\n+        MappingTO mapping = new MappingTO();\n+\n+        MappingItemTO item = new MappingItemTO();\n+        item.setExtAttrName(\"uid\");\n+        item.setIntAttrName(\"userId\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        mapping.addItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"username\");\n+        item.setIntAttrName(\"fullname\");\n+        item.setIntMappingType(IntMappingType.UserId);\n+        item.setAccountid(true);\n+        mapping.setAccountIdItem(item);\n+\n+        item = new MappingItemTO();\n+        item.setExtAttrName(\"fullname\");\n+        item.setIntAttrName(\"cn\");\n+        item.setIntMappingType(IntMappingType.UserSchema);\n+        item.setAccountid(false);\n+        mapping.addItem(item);\n+\n+        resourceTO.setUmapping(mapping);\n+\t\treturn resourceTO;\n+\t}\n+\n }"},{"sha":"581bba052999fb750c2957ac3a8e7895cc74bb84","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":10,"deletions":5,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5e4bb93ca364638e62550a35353dc6a6ddae7c0c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=5e4bb93ca364638e62550a35353dc6a6ddae7c0c","patch":"@@ -69,17 +69,22 @@ private ConnObjectTO readUserConnObj(String resourceName, String userId) {\n         return resourceService.getConnector(resourceName, AttributableType.USER, userId);\n     }\n \n+    public static UserTO getSampleUniqueTO() {\n+    \treturn getSampleTO(getUUIDString() + \"@test.com\");\n+    }\n+    \n     public static UserTO getSampleTO(final String email) {\n+    \tString uid = email;\n         UserTO userTO = new UserTO();\n         userTO.setPassword(\"password123\");\n-        userTO.setUsername(email);\n+        userTO.setUsername(uid);\n \n-        userTO.addAttribute(attributeTO(\"fullname\", email));\n-        userTO.addAttribute(attributeTO(\"firstname\", email));\n+        userTO.addAttribute(attributeTO(\"fullname\", uid));\n+        userTO.addAttribute(attributeTO(\"firstname\", uid));\n         userTO.addAttribute(attributeTO(\"surname\", \"surname\"));\n         userTO.addAttribute(attributeTO(\"type\", \"a type\"));\n-        userTO.addAttribute(attributeTO(\"userId\", email));\n-        userTO.addAttribute(attributeTO(\"email\", email));\n+        userTO.addAttribute(attributeTO(\"userId\", uid));\n+        userTO.addAttribute(attributeTO(\"email\", uid));\n         DateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n         userTO.addAttribute(attributeTO(\"loginDate\", sdf.format(new Date())));\n         userTO.addDerivedAttribute(attributeTO(\"cn\", null));"}]}