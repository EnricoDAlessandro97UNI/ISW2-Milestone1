{"sha":"1358b3552dba77195412093e233c81066e405e03","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjEzNThiMzU1MmRiYTc3MTk1NDEyMDkzZTIzM2M4MTA2NmU0MDVlMDM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-17T12:49:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-12-17T12:49:53Z"},"message":"[SYNCOPE-748] Merge from 1_2_X","tree":{"sha":"d1faa32ba1b6a8ad07ba30cc708de3ba6c56ce9c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d1faa32ba1b6a8ad07ba30cc708de3ba6c56ce9c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1358b3552dba77195412093e233c81066e405e03","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1358b3552dba77195412093e233c81066e405e03","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1358b3552dba77195412093e233c81066e405e03","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1358b3552dba77195412093e233c81066e405e03/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"baab84a86e4f120880ccc7b693ebdb9fcff96058","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/baab84a86e4f120880ccc7b693ebdb9fcff96058","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/baab84a86e4f120880ccc7b693ebdb9fcff96058"}],"stats":{"total":841,"additions":518,"deletions":323},"files":[{"sha":"7612610a27fc0be82a8fc73ca746a0228efa0073","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportCommand.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportCommand.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -55,9 +55,6 @@ public void execute(final Input input) {\n             case EXECUTE:\n                 new ReportExecute(input).execute();\n                 break;\n-            case READ_EXECUTION:\n-                new ReportReadExecution(input).read();\n-                break;\n             case DELETE_EXECUTION:\n                 new ReportDeleteExecution(input).delete();\n                 break;\n@@ -86,7 +83,6 @@ public enum ReportOptions {\n         READ(\"--read\"),\n         DELETE(\"--delete\"),\n         EXECUTE(\"--execute\"),\n-        READ_EXECUTION(\"--read-execution\"),\n         DELETE_EXECUTION(\"--delete-execution\"),\n         EXPORT_EXECUTION_RESULT(\"--export-execution-result\");\n "},{"sha":"2c1ec07a28133554bffe0d436d82439ab9e892c5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportReadExecution.java","status":"removed","additions":0,"deletions":66,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/baab84a86e4f120880ccc7b693ebdb9fcff96058/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportReadExecution.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/baab84a86e4f120880ccc7b693ebdb9fcff96058/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportReadExecution.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportReadExecution.java?ref=baab84a86e4f120880ccc7b693ebdb9fcff96058","patch":"@@ -1,66 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands.report;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.to.ReportExecTO;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class ReportReadExecution extends AbstractReportCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ReportReadExecution.class);\n-\n-    private static final String READ_EXECUTION_HELP_MESSAGE\n-            = \"report --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\";\n-\n-    private final Input input;\n-\n-    public ReportReadExecution(final Input input) {\n-        this.input = input;\n-    }\n-\n-    public void read() {\n-        if (input.parameterNumber() >= 1) {\n-            final List<ReportExecTO> reportExecTOs = new ArrayList<>();\n-            for (final String parameter : input.getParameters()) {\n-                try {\n-                    reportExecTOs.add(reportSyncopeOperations.readExecution(parameter));\n-                } catch (final WebServiceException | SyncopeClientException ex) {\n-                    LOG.error(\"Error reading report execution\", ex);\n-                    if (ex.getMessage().startsWith(\"NotFound\")) {\n-                        reportResultManager.notFoundError(\"Report\", parameter);\n-                    } else {\n-                        reportResultManager.genericError(ex.getMessage());\n-                    }\n-                } catch (final NumberFormatException ex) {\n-                    LOG.error(\"Error reading report execution\", ex);\n-                    reportResultManager.numberFormatException(\"report\", parameter);\n-                }\n-            }\n-            reportResultManager.printReportExecution(reportExecTOs);\n-        } else {\n-            reportResultManager.commandOptionError(READ_EXECUTION_HELP_MESSAGE);\n-        }\n-    }\n-}"},{"sha":"7ae4fa1aba8a788d55760bcd6b6799a2b1b32336","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/report/ReportSyncopeOperations.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Freport%2FReportSyncopeOperations.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -36,12 +36,8 @@ public class ReportSyncopeOperations {\n \n     private final ReportService reportService = SyncopeServices.get(ReportService.class);\n \n-    public ReportExecTO readExecution(final String executionid) {\n-        return reportService.readExecution(Long.valueOf(executionid));\n-    }\n-\n-    public ReportTO read(final String reportId) {\n-        return reportService.read(Long.valueOf(reportId));\n+    public ReportTO read(final String reportKey) {\n+        return reportService.read(Long.valueOf(reportKey));\n     }\n \n     public List<ReportExecTO> listJobs(final String jobStatusType) {\n@@ -76,15 +72,15 @@ public String exportExecutionResult(final String executionKey, final String repo\n         return xmlFinalName;\n     }\n \n-    public void execute(final String reportId) {\n-        reportService.execute(Long.valueOf(reportId));\n+    public void execute(final String reportKey) {\n+        reportService.execute(Long.valueOf(reportKey));\n     }\n \n     public void deleteExecution(final String executionId) {\n         reportService.deleteExecution(Long.valueOf(executionId));\n     }\n \n-    public void delete(final String reportId) {\n-        reportService.delete(Long.valueOf(reportId));\n+    public void delete(final String reportKey) {\n+        reportService.delete(Long.valueOf(reportKey));\n     }\n }"},{"sha":"b14492c05685c311939c8bddf4d5afd12ad80b08","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskCommand.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskCommand.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -52,9 +52,6 @@ public void execute(final Input input) {\n             case READ:\n                 new TaskRead(input).read();\n                 break;\n-            case READ_EXECUTION:\n-                new TaskExecutionRead(input).read();\n-                break;\n             case DELETE:\n                 new TaskDelete(input).delete();\n                 break;\n@@ -88,7 +85,6 @@ private enum Options {\n         LIST_RUNNING_JOBS(\"--list-running-jobs\"),\n         LIST_SCHEDULED_JOBS(\"--list-scheduled-jobs\"),\n         READ(\"--read\"),\n-        READ_EXECUTION(\"--read-execution\"),\n         DELETE(\"--delete\"),\n         DELETE_PROP_TASK(\"--delete-all-prop\"),\n         DELETE_EXECUTION(\"--delete-execution\"),"},{"sha":"be17d25a34c269cf4c114655dd683eb18b338fd5","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskExecutionRead.java","status":"removed","additions":0,"deletions":63,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/baab84a86e4f120880ccc7b693ebdb9fcff96058/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionRead.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/baab84a86e4f120880ccc7b693ebdb9fcff96058/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionRead.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskExecutionRead.java?ref=baab84a86e4f120880ccc7b693ebdb9fcff96058","patch":"@@ -1,63 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.cli.commands.task;\n-\n-import java.util.Arrays;\n-import javax.xml.ws.WebServiceException;\n-import org.apache.syncope.client.cli.Input;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-\n-public class TaskExecutionRead extends AbstractTaskCommand {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(TaskExecutionRead.class);\n-\n-    private static final String EXECUTION_READ_HELP_MESSAGE = \"task --read-execution {TASK-ID} {TASK-ID} [...]\";\n-\n-    private final Input input;\n-\n-    public TaskExecutionRead(final Input input) {\n-        this.input = input;\n-    }\n-\n-    public void read() {\n-        if (input.parameterNumber() >= 1) {\n-            for (final String parameter : input.getParameters()) {\n-                try {\n-                    taskResultManager.printTaskExecTO(\n-                            Arrays.asList(taskSyncopeOperations.readExecution(parameter)));\n-                } catch (final NumberFormatException ex) {\n-                    LOG.error(\"Error reading task\", ex);\n-                    taskResultManager.notBooleanDeletedError(\"task execution\", parameter);\n-                } catch (final SyncopeClientException | WebServiceException ex) {\n-                    LOG.error(\"Error reading task\", ex);\n-                    if (ex.getMessage().startsWith(\"NotFound\")) {\n-                        taskResultManager.notFoundError(\"Task execution\", parameter);\n-                    } else {\n-                        taskResultManager.genericError(ex.getMessage());\n-                    }\n-                    break;\n-                }\n-            }\n-        } else {\n-            taskResultManager.commandOptionError(EXECUTION_READ_HELP_MESSAGE);\n-        }\n-    }\n-}"},{"sha":"f21f67cc26755c7049375b848f1cff08837d3d69","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/task/TaskSyncopeOperations.java","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Ftask%2FTaskSyncopeOperations.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -55,15 +55,11 @@ public List<AbstractTaskTO> listPropagationTask() {\n         return taskService.list(new TaskQuery.Builder().type(TaskType.PROPAGATION).build()).getResult();\n     }\n \n-    public TaskExecTO readExecution(final String executionId) {\n-        return taskService.readExecution(Long.valueOf(executionId));\n+    public void deleteExecution(final String executionKey) {\n+        taskService.deleteExecution(Long.valueOf(executionKey));\n     }\n \n-    public void deleteExecution(final String executionId) {\n-        taskService.deleteExecution(Long.valueOf(executionId));\n-    }\n-\n-    public TaskExecTO execute(final String executionId, final boolean dryRun) {\n-        return taskService.execute(Long.valueOf(executionId), dryRun);\n+    public TaskExecTO execute(final String executionKey, final boolean dryRun) {\n+        return taskService.execute(Long.valueOf(executionKey), dryRun);\n     }\n }"},{"sha":"9ffa1cf0f815a53447fd41254246015ba4d7e6dd","filename":"client/cli/src/main/resources/messages.properties","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fresources%2Fmessages.properties?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -25,10 +25,10 @@ notification.help.message=\\nUsage: notification [options]\\n  Options:\\n    --hel\n policy.help.message=\\nUsage: policy [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n       Syntax: --list-policy {POLICY-TYPE} \\n          Policy type: ACCOUNT / PASSWORD / SYNC / PUSH\\n    --read \\n       Syntax: --read {POLICY-ID} {POLICY-ID} [...]\\n    --delete \\n       Syntax: --delete {POLICY-ID} {POLICY-ID} [...]\\n\n question.help.message=\\nUsage: question [options]\\n  Options:\\n    --help \\n    --list \\n    --read \\n       Syntax: --read {QUESTION-ID} {QUESTION-ID} [...]\\n    --delete \\n       Syntax: --delete {QUESTION-ID} {QUESTION-ID} [...]\\n\n realm.help.message=\\nUsage: realm [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n\n-report.help.message=\\nUsage: report [options]\\n  Options:\\n    --help \\n    --details\\n    --list \\n    --list-jobs \\n    --read \\n       Syntax: --read {REPORT-ID} {REPORT-ID} [...] \\n    --delete \\n       Syntax: --delete {REPORT-ID} {REPORT-ID} [...]\\n    --execute \\n       Syntax: --execute {REPORT-ID} \\n    --read-execution \\n       Syntax: --read-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n    --delete-execution \\n       Syntax: --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n    --export-execution-result \\n       Syntax: --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n          Format: CSV / HTML / PDF / XML / RTF\\n\n+report.help.message=\\nUsage: report [options]\\n  Options:\\n    --help \\n    --details\\n    --list \\n    --list-jobs \\n    --read \\n       Syntax: --read {REPORT-ID} {REPORT-ID} [...] \\n    --delete \\n       Syntax: --delete {REPORT-ID} {REPORT-ID} [...]\\n    --execute \\n       Syntax: --execute {REPORT-ID} \\n    --delete-execution \\n       Syntax: --delete-execution {EXECUTION-ID} {EXECUTION-ID} [...]\\n    --export-execution-result \\n       Syntax: --export-execution-result {EXECUTION-ID} {EXECUTION-ID} [...] {FORMAT}\\n          Format: CSV / HTML / PDF / XML / RTF\\n\n resource.help.message=\\nUsage: resource [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --read \\n       Syntax: --read {RESOURCE-NAME} {RESOURCE-NAME} [...]\\n    --delete \\n       Syntax: --delete {RESOURCE-NAME} {RESOURCE-NAME} [...]\\n\n role.help.message=\\nUsage: role [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --read \\n       Syntax: --read {ROLE-ID} {ROLE-ID} [...]\\n    --delete \\n       Syntax: --delete {ROLE-ID} {ROLE-ID} [...]\\n\n schema.help.message=\\nUsage: schema [options]\\n  Options:\\n    --help \\n    --details \\n    --list-all\\n    --list-plain\\n    --list-derived\\n    --list-virtual\\n    --read {SCHEMA-TYPE} {SCHEMA-KEY}\\n        Schema type: PLAIN / DERIVED / VIRTUAL\\n    --delete {SCHEMA-TYPE} {SCHEMA-KEY}\\n        Schema type: PLAIN / DERIVED / VIRTUAL\\n\n-task.help.message=\\nUsage: task [options]\\n  Options:\\n    --help \\n    --details\\n    --list\\n       Syntax: --list {TASK-TYPE} \\n          Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / SYNCHRONIZATION\\n    --list-running-jobs \\n    --list-scheduled-jobs \\n    --read \\n       Syntax: --read {TASK-ID} {TASK-ID} [...]\\n    --read-execution \\n       Syntax: --read-execution {TASK-EXEC-ID} {TASK-EXEC-ID} [...]\\n    --delete \\n       Syntax: --delete {TASK-ID} {TASK-ID} [...]\\n    --delete-all-prop\\n    --delete-execution \\n       Syntax: --delete-execution {TASK-EXEC-ID} {TASK-EXEC-ID} [...]\\n    --execute \\n       Syntax: --execute {TASK-ID} {DRY-RUN}\\n          Dry run: true / false\\n\n+task.help.message=\\nUsage: task [options]\\n  Options:\\n    --help \\n    --details\\n    --list\\n       Syntax: --list {TASK-TYPE} \\n          Task type: NOTIFICATION / PROPAGATION / PUSH / SCHEDULED / SYNCHRONIZATION\\n    --list-running-jobs \\n    --list-scheduled-jobs \\n    --read \\n       Syntax: --read {TASK-ID} {TASK-ID} [...]\\n    --delete \\n       Syntax: --delete {TASK-ID} {TASK-ID} [...]\\n    --delete-all-prop\\n    --delete-execution \\n       Syntax: --delete-execution {TASK-EXEC-ID} {TASK-EXEC-ID} [...]\\n    --execute \\n       Syntax: --execute {TASK-ID} {DRY-RUN}\\n          Dry run: true / false\\n\n user.help.message=\\nUsage: user [options]\\n  Options:\\n    --help \\n    --details \\n    --list \\n    --get-user-key\\n       Syntax: --get-user-key {USERNAME}\\n    --get-username\\n       Syntax: --get-username {USER-ID}\\n    --read-by-userid \\n       Syntax: --read-by-userid {USER-ID} {USER-ID} [...]\\n    --read-by-username\\n       Syntax: --read-by-username {USERNAME} {USERNAME} [...]\\n    --search-by-attribute \\n       Syntax: --search-by-attribute {REALM} {ATTR-NAME}={ATTR-VALUE}\\n    --search-by-role \\n       Syntax: --search-by-role {REALM} {ROLE-NAME}\\n    --search-by-resource \\n       Syntax: --search-by-resource {REALM} {RESOURCE-NAME}\\n    --delete \\n       Syntax: --delete {USER-ID} {USER-ID} [...]\\n    --delete-all \\n       Syntax: --delete-all {REALM}\\n    --delete-by-attribute \\n       Syntax: --delete-by-attribute {REALM} {ATTR-NAME}={ATTR-VALUE}\\n\n workflow.help.message=\\nUsage: workflow [options]\\n  Options:\\n    --help \\n    --export-diagram {ANY-TYPE-KIND}\\n        Any type kind: ANY_OBJECT / USER / GROUP\\n    --export-definition {ANY-TYPE-KIND}\\n        Any type kind: ANY_OBJECT / USER / GROUP\\n"},{"sha":"85eeac6daa260b8f5749bc495886d2254accc763","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -32,6 +32,7 @@\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n import org.apache.cxf.staxutils.DocumentDepthProperties;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n+import org.apache.syncope.common.rest.api.DateParamConverterProvider;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n /**\n@@ -124,7 +125,8 @@ protected RestClientFactoryBean defaultRestClientFactoryBean() {\n         features.add(new LoggingFeature());\n         defaultRestClientFactoryBean.setFeatures(features);\n \n-        List<Object> providers = new ArrayList<>(3);\n+        List<Object> providers = new ArrayList<>(4);\n+        providers.add(new DateParamConverterProvider());\n         providers.add(getJaxbProvider());\n         providers.add(getJsonProvider());\n         providers.add(getExceptionMapper());"},{"sha":"2fad2117d8c2a7d12ba410a40c4bcdd13d6e0fb6","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/BulkAction.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FBulkAction.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -48,9 +48,6 @@ public enum Type {\n \n     private Type type;\n \n-    /**\n-     * Serialized identifiers.\n-     */\n     private final List<String> targets = new ArrayList<>();\n \n     public Type getType() {"},{"sha":"b7e3c52dc7751a520be63f555da08c5446b33df2","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/DateParamConverterProvider.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FDateParamConverterProvider.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api;\n+\n+import java.lang.annotation.Annotation;\n+import java.lang.reflect.Type;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import javax.ws.rs.ext.ParamConverter;\n+import javax.ws.rs.ext.ParamConverterProvider;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+\n+public class DateParamConverterProvider implements ParamConverterProvider {\n+\n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n+\n+        @Override\n+        protected SimpleDateFormat initialValue() {\n+            SimpleDateFormat sdf = new SimpleDateFormat();\n+            sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+            return sdf;\n+        }\n+    };\n+\n+    private static class DateParamConverter implements ParamConverter<Date> {\n+\n+        @Override\n+        public Date fromString(final String value) {\n+            try {\n+                return DATE_FORMAT.get().parse(value);\n+            } catch (final ParseException e) {\n+                throw new IllegalArgumentException(\"Unparsable date: \" + value, e);\n+            }\n+        }\n+\n+        @Override\n+        public String toString(final Date value) {\n+            return DATE_FORMAT.get().format(value);\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T> ParamConverter<T> getConverter(\n+            final Class<T> rawType, final Type genericType, final Annotation[] annotations) {\n+\n+        if (Date.class.equals(rawType)) {\n+            return (ParamConverter<T>) new DateParamConverter();\n+        }\n+\n+        return null;\n+    }\n+\n+}"},{"sha":"4030a15b9702b17abba85767eaf78d7387e7ab8d","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/BulkExecDeleteQuery.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FBulkExecDeleteQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FBulkExecDeleteQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FBulkExecDeleteQuery.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -0,0 +1,121 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+import java.util.Date;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.QueryParam;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+public class BulkExecDeleteQuery extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 3846547401120638351L;\n+\n+    public static class Builder {\n+\n+        private final BulkExecDeleteQuery instance = new BulkExecDeleteQuery();\n+\n+        public Builder key(final long key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public Builder startedBefore(final Date date) {\n+            instance.setStartedBefore(date);\n+            return this;\n+        }\n+\n+        public Builder startedAfter(final Date date) {\n+            instance.setStartedAfter(date);\n+            return this;\n+        }\n+\n+        public Builder endedBefore(final Date date) {\n+            instance.setEndedBefore(date);\n+            return this;\n+        }\n+\n+        public Builder endedAfter(final Date date) {\n+            instance.setEndedAfter(date);\n+            return this;\n+        }\n+\n+        public BulkExecDeleteQuery build() {\n+            return instance;\n+        }\n+    }\n+\n+    private Long key;\n+\n+    private Date startedBefore;\n+\n+    private Date startedAfter;\n+\n+    private Date endedBefore;\n+\n+    private Date endedAfter;\n+\n+    public Long getKey() {\n+        return key;\n+    }\n+\n+    @NotNull\n+    @PathParam(\"key\")\n+    public void setKey(final Long key) {\n+        this.key = key;\n+    }\n+\n+    public Date getStartedBefore() {\n+        return startedBefore;\n+    }\n+\n+    @QueryParam(\"startedBefore\")\n+    public void setStartedBefore(final Date startedBefore) {\n+        this.startedBefore = startedBefore;\n+    }\n+\n+    public Date getStartedAfter() {\n+        return startedAfter;\n+    }\n+\n+    @QueryParam(\"startedAfter\")\n+    public void setStartedAfter(final Date startedAfter) {\n+        this.startedAfter = startedAfter;\n+    }\n+\n+    public Date getEndedBefore() {\n+        return endedBefore;\n+    }\n+\n+    @QueryParam(\"endedBefore\")\n+    public void setEndedBefore(final Date endedBefore) {\n+        this.endedBefore = endedBefore;\n+    }\n+\n+    public Date getEndedAfter() {\n+        return endedAfter;\n+    }\n+\n+    @QueryParam(\"endedAfter\")\n+    public void setEndedAfter(final Date endedAfter) {\n+        this.endedAfter = endedAfter;\n+    }\n+\n+}"},{"sha":"811b6647cfed4c44985ca401a4f617ae8a90cda2","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -22,6 +22,7 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n+import javax.validation.constraints.NotNull;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n@@ -76,6 +77,7 @@ public SchemaType getType() {\n         return type;\n     }\n \n+    @NotNull\n     @PathParam(\"type\")\n     public void setType(final SchemaType type) {\n         this.type = type;"},{"sha":"91e5f178187c5fdf74e3b8943c1a5c3c362ba99a","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ReportService.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FReportService.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import javax.validation.constraints.NotNull;\n+import javax.ws.rs.BeanParam;\n import javax.ws.rs.Consumes;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.GET;\n@@ -32,11 +33,13 @@\n import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n \n /**\n  * REST operations for reports.\n@@ -55,17 +58,6 @@ public interface ReportService extends JAXRSService {\n     @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     ReportTO read(@NotNull @PathParam(\"key\") Long key);\n \n-    /**\n-     * Returns report execution with matching key.\n-     *\n-     * @param executionKey report execution id to be selected\n-     * @return report execution with matching key\n-     */\n-    @GET\n-    @Path(\"executions/{executionKey}\")\n-    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    ReportExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n-\n     /**\n      * Returns a list of all existing reports.\n      *\n@@ -113,6 +105,17 @@ public interface ReportService extends JAXRSService {\n     @Path(\"executions/{executionKey}\")\n     void deleteExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n+    /**\n+     * Deletes the report executions belonging matching the given query.\n+     *\n+     * @param query query conditions\n+     * @return bulk action result\n+     */\n+    @DELETE\n+    @Path(\"{key}/executions\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n+\n     /**\n      * Executes the report with matching key.\n      *"},{"sha":"071a7ccac538d5ec61128153b2afdcee8dc40347","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/TaskService.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FTaskService.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.lib.to.TaskExecTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n+import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n \n@@ -106,17 +107,6 @@ <T extends AbstractTaskTO> T read(\n     @Path(\"{key}\")\n     void delete(@NotNull @PathParam(\"key\") Long key);\n \n-    /*\n-     * Returns the task execution with the given id.\n-     *\n-     * @param executionKey key of task execution to be read\n-     * @return task execution with matching Id\n-     */\n-    @GET\n-    @Path(\"executions/{executionKey}\")\n-    @Produces({ JAXRSService.APPLICATION_XML, MediaType.APPLICATION_JSON })\n-    TaskExecTO readExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n-\n     /**\n      * Returns a paged list of task executions matching the given query.\n      *\n@@ -137,6 +127,17 @@ <T extends AbstractTaskTO> T read(\n     @Path(\"executions/{executionKey}\")\n     void deleteExecution(@NotNull @PathParam(\"executionKey\") Long executionKey);\n \n+    /**\n+     * Deletes the task executions belonging matching the given query.\n+     *\n+     * @param query query conditions\n+     * @return bulk action result\n+     */\n+    @DELETE\n+    @Path(\"{key}/executions\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    BulkActionResult deleteExecutions(@BeanParam BulkExecDeleteQuery query);\n+\n     /**\n      * Executes the task matching the given id.\n      *"},{"sha":"66954b0066f264f0c2f379d41de68a8d07be766f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":52,"deletions":37,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -55,6 +55,7 @@\n import org.apache.syncope.core.provisioning.api.job.JobInstanceLoader;\n import org.apache.syncope.core.logic.report.TextSerializer;\n import org.apache.syncope.common.lib.to.AbstractExecTO;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n@@ -64,7 +65,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class ReportLogic extends AbstractJobLogic<ReportTO> {\n@@ -131,11 +131,11 @@ public List<ReportTO> list() {\n         return CollectionUtils.collect(reportDAO.findAll(),\n                 new Transformer<Report, ReportTO>() {\n \n-                    @Override\n-                    public ReportTO transform(final Report input) {\n-                        return binder.getReportTO(input);\n-                    }\n-                }, new ArrayList<ReportTO>());\n+            @Override\n+            public ReportTO transform(final Report input) {\n+                return binder.getReportTO(input);\n+            }\n+        }, new ArrayList<ReportTO>());\n     }\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n@@ -147,16 +147,6 @@ public ReportTO read(final Long reportKey) {\n         return binder.getReportTO(report);\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n-    @Transactional(readOnly = true)\n-    public ReportExecTO readExecution(final Long executionKey) {\n-        ReportExec reportExec = reportExecDAO.find(executionKey);\n-        if (reportExec == null) {\n-            throw new NotFoundException(\"Report execution \" + executionKey);\n-        }\n-        return binder.getReportExecTO(reportExec);\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_READ + \"')\")\n     public void exportExecutionResult(final OutputStream os, final ReportExec reportExec,\n             final ReportExecExportFormat format) {\n@@ -293,6 +283,52 @@ public ReportExecTO deleteExecution(final Long executionKey) {\n         return reportExecToDelete;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_DELETE + \"')\")\n+    public BulkActionResult deleteExecutions(\n+            final Long reportKey,\n+            final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n+\n+        Report report = reportDAO.find(reportKey);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportKey);\n+        }\n+\n+        BulkActionResult result = new BulkActionResult();\n+\n+        for (ReportExec exec : reportExecDAO.findAll(report, startedBefore, startedAfter, endedBefore, endedAfter)) {\n+            try {\n+                reportExecDAO.delete(exec);\n+                result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.SUCCESS);\n+            } catch (Exception e) {\n+                LOG.error(\"Error deleting execution {} of report {}\", exec.getKey(), reportKey, e);\n+                result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.FAILURE);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    protected Long getKeyFromJobName(final JobKey jobKey) {\n+        return JobNamer.getReportKeyFromJobName(jobKey.getName());\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        return super.listJobs(type, reference);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n+    public void actionJob(final Long reportKey, final JobAction action) {\n+        Report report = reportDAO.find(reportKey);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportKey);\n+        }\n+        String jobName = JobNamer.getJobName(report);\n+        actionJob(jobName, action);\n+    }\n+\n     @Override\n     protected ReportTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n@@ -322,25 +358,4 @@ protected ReportTO resolveReference(final Method method, final Object... args)\n \n         throw new UnresolvedReferenceException();\n     }\n-\n-    @Override\n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n-    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n-        return super.listJobs(type, reference);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_EXECUTE + \"')\")\n-    public void actionJob(final Long reportKey, final JobAction action) {\n-        Report report = reportDAO.find(reportKey);\n-        if (report == null) {\n-            throw new NotFoundException(\"Report \" + reportKey);\n-        }\n-        String jobName = JobNamer.getJobName(report);\n-        actionJob(jobName, action);\n-    }\n-\n-    @Override\n-    protected Long getKeyFromJobName(final JobKey jobKey) {\n-        return JobNamer.getReportKeyFromJobName(jobKey.getName());\n-    }\n }"},{"sha":"9386262af03cc246894412f6aecd67bc36c96633","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/TaskLogic.java","status":"modified","additions":47,"deletions":30,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FTaskLogic.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractExecTO;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n@@ -257,15 +258,6 @@ public <T extends AbstractTaskTO> T delete(final Long taskKey) {\n         return taskToDelete;\n     }\n \n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n-    public TaskExecTO readExecution(final Long execKey) {\n-        TaskExec taskExec = taskExecDAO.find(execKey);\n-        if (taskExec == null) {\n-            throw new NotFoundException(\"Task execution \" + execKey);\n-        }\n-        return binder.getTaskExecTO(taskExec);\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_READ + \"')\")\n     public int countExecutions(final Long taskId) {\n         return taskExecDAO.count(taskId);\n@@ -297,6 +289,52 @@ public TaskExecTO deleteExecution(final Long execKey) {\n         return taskExecutionToDelete;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_DELETE + \"')\")\n+    public BulkActionResult deleteExecutions(\n+            final Long taskKey,\n+            final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n+\n+        Task task = taskDAO.find(taskKey);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskKey);\n+        }\n+\n+        BulkActionResult result = new BulkActionResult();\n+\n+        for (TaskExec exec : taskExecDAO.findAll(task, startedBefore, startedAfter, endedBefore, endedAfter)) {\n+            try {\n+                taskExecDAO.delete(exec);\n+                result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.SUCCESS);\n+            } catch (Exception e) {\n+                LOG.error(\"Error deleting execution {} of task {}\", exec.getKey(), taskKey, e);\n+                result.getResults().put(String.valueOf(exec.getKey()), BulkActionResult.Status.FAILURE);\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    protected Long getKeyFromJobName(final JobKey jobKey) {\n+        return JobNamer.getTaskKeyFromJobName(jobKey.getName());\n+    }\n+\n+    @Override\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n+    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n+        return super.listJobs(type, reference);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n+    public void actionJob(final Long taskKey, final JobAction action) {\n+        Task task = taskDAO.find(taskKey);\n+        if (task == null) {\n+            throw new NotFoundException(\"Task \" + taskKey);\n+        }\n+        String jobName = JobNamer.getJobName(task);\n+        actionJob(jobName, action);\n+    }\n+\n     @Override\n     protected AbstractTaskTO resolveReference(final Method method, final Object... args)\n             throws UnresolvedReferenceException {\n@@ -327,25 +365,4 @@ protected AbstractTaskTO resolveReference(final Method method, final Object... a\n \n         throw new UnresolvedReferenceException();\n     }\n-\n-    @Override\n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_LIST + \"')\")\n-    public <E extends AbstractExecTO> List<E> listJobs(final JobStatusType type, final Class<E> reference) {\n-        return super.listJobs(type, reference);\n-    }\n-\n-    @PreAuthorize(\"hasRole('\" + StandardEntitlement.TASK_EXECUTE + \"')\")\n-    public void actionJob(final Long taskKey, final JobAction action) {\n-        Task task = taskDAO.find(taskKey);\n-        if (task == null) {\n-            throw new NotFoundException(\"Task \" + taskKey);\n-        }\n-        String jobName = JobNamer.getJobName(task);\n-        actionJob(jobName, action);\n-    }\n-\n-    @Override\n-    protected Long getKeyFromJobName(final JobKey jobKey) {\n-        return JobNamer.getTaskKeyFromJobName(jobKey.getName());\n-    }\n }"},{"sha":"c6b5318706ad5b4018cf1ca45c61471e2fe91198","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/ReportExecDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportExecDAO.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Date;\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -30,7 +31,7 @@ public interface ReportExecDAO extends DAO<ReportExec, Long> {\n \n     ReportExec findLatestEnded(Report report);\n \n-    List<ReportExec> findAll();\n+    List<ReportExec> findAll(Report report, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n \n     ReportExec save(ReportExec execution);\n "},{"sha":"7d10dd37e5482d2ec4c0c8e187e521e84664931d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/TaskExecDAO.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FTaskExecDAO.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Date;\n import java.util.List;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n@@ -32,7 +32,8 @@ public interface TaskExecDAO extends DAO<TaskExec, Long> {\n \n     <T extends Task> TaskExec findLatestEnded(T task);\n \n-    List<TaskExec> findAll(TaskType type);\n+    <T extends Task> List<TaskExec> findAll(\n+            T task, Date startedBefore, Date startedAfter, Date endedBefore, Date endedAfter);\n \n     int count(Long taskKey);\n "},{"sha":"8c1ada54c3b97190fc109f9a07f84632a559c8c3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAReportExecDAO.java","status":"modified","additions":36,"deletions":3,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAReportExecDAO.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Date;\n import java.util.List;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.core.persistence.api.dao.ReportExecDAO;\n@@ -59,9 +60,41 @@ public ReportExec findLatestEnded(final Report report) {\n     }\n \n     @Override\n-    public List<ReportExec> findAll() {\n-        TypedQuery<ReportExec> query = entityManager().createQuery(\n-                \"SELECT e FROM \" + JPAReportExec.class.getSimpleName() + \" e\", ReportExec.class);\n+    public List<ReportExec> findAll(\n+            final Report report,\n+            final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n+\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAReportExec.class.getSimpleName()).\n+                append(\" e WHERE e.report=:report \");\n+\n+        if (startedBefore != null) {\n+            queryString.append(\" AND e.startDate < :startedBefore\");\n+        }\n+        if (startedAfter != null) {\n+            queryString.append(\" AND e.startDate > :startedAfter\");\n+        }\n+        if (endedBefore != null) {\n+            queryString.append(\" AND e.endDate < :endedBefore\");\n+        }\n+        if (endedAfter != null) {\n+            queryString.append(\" AND e.endDate > :endedAfter\");\n+        }\n+\n+        TypedQuery<ReportExec> query = entityManager().createQuery(queryString.toString(), ReportExec.class);\n+        query.setParameter(\"report\", report);\n+        if (startedBefore != null) {\n+            query.setParameter(\"startedBefore\", startedBefore);\n+        }\n+        if (startedAfter != null) {\n+            query.setParameter(\"startedAfter\", startedAfter);\n+        }\n+        if (endedBefore != null) {\n+            query.setParameter(\"endedBefore\", endedBefore);\n+        }\n+        if (endedAfter != null) {\n+            query.setParameter(\"endedAfter\", endedAfter);\n+        }\n+\n         return query.getResultList();\n     }\n "},{"sha":"d6b3a03af5b60abcc6b4feaf50cf32e3fe91a74c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskExecDAO.java","status":"modified","additions":35,"deletions":6,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskExecDAO.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Date;\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -69,12 +69,41 @@ public <T extends Task> TaskExec findLatestEnded(final T task) {\n     }\n \n     @Override\n-    public List<TaskExec> findAll(final TaskType type) {\n-        String queryString = \"SELECT e FROM \" + JPATaskExec.class.getSimpleName()\n-                + \" e WHERE e.task IN (\"\n-                + \"SELECT t FROM \" + taskDAO.getEntityReference(type).getSimpleName() + \" t)\";\n+    public <T extends Task> List<TaskExec> findAll(\n+            final T task,\n+            final Date startedBefore, final Date startedAfter, final Date endedBefore, final Date endedAfter) {\n+\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPATaskExec.class.getSimpleName()).\n+                append(\" e WHERE e.task=:task \");\n+\n+        if (startedBefore != null) {\n+            queryString.append(\" AND e.startDate < :startedBefore\");\n+        }\n+        if (startedAfter != null) {\n+            queryString.append(\" AND e.startDate > :startedAfter\");\n+        }\n+        if (endedBefore != null) {\n+            queryString.append(\" AND e.endDate < :endedBefore\");\n+        }\n+        if (endedAfter != null) {\n+            queryString.append(\" AND e.endDate > :endedAfter\");\n+        }\n+\n+        TypedQuery<TaskExec> query = entityManager().createQuery(queryString.toString(), TaskExec.class);\n+        query.setParameter(\"task\", task);\n+        if (startedBefore != null) {\n+            query.setParameter(\"startedBefore\", startedBefore);\n+        }\n+        if (startedAfter != null) {\n+            query.setParameter(\"startedAfter\", startedAfter);\n+        }\n+        if (endedBefore != null) {\n+            query.setParameter(\"endedBefore\", endedBefore);\n+        }\n+        if (endedAfter != null) {\n+            query.setParameter(\"endedAfter\", endedAfter);\n+        }\n \n-        TypedQuery<TaskExec> query = entityManager().createQuery(queryString, TaskExec.class);\n         return query.getResultList();\n     }\n "},{"sha":"7b9deac418504eb9ba4a735a5ad3121376b1a43c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractExec.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractExec.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -44,6 +44,7 @@ public abstract class AbstractExec extends AbstractEntity<Long> implements Exec\n     /**\n      * Start instant of this execution.\n      */\n+    @NotNull\n     @Temporal(TemporalType.TIMESTAMP)\n     protected Date startDate;\n "},{"sha":"1ec80692ef468d13aade34c9a1039298441bb40e","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskExecTest.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskExecTest.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -20,12 +20,11 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n-import static org.junit.Assert.assertTrue;\n \n+import java.util.Calendar;\n import java.util.Date;\n import java.util.List;\n import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n-import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n@@ -46,17 +45,16 @@ public class TaskExecTest extends AbstractTest {\n \n     @Test\n     public void findAll() {\n-        List<TaskExec> list = taskExecDAO.findAll(TaskType.PROPAGATION);\n-        assertEquals(2, list.size());\n-\n-        list = taskExecDAO.findAll(TaskType.SCHEDULED);\n-        assertTrue(list.isEmpty());\n+        PropagationTask task = taskDAO.find(1L);\n+        assertNotNull(task);\n \n-        list = taskExecDAO.findAll(TaskType.SYNCHRONIZATION);\n-        assertTrue(list.isEmpty());\n+        Calendar calendar = Calendar.getInstance();\n+        calendar.clear();\n+        calendar.set(2015, 11, 18, 0, 0, 0);\n \n-        list = taskExecDAO.findAll(TaskType.NOTIFICATION);\n-        assertTrue(list.isEmpty());\n+        List<TaskExec> execs = taskExecDAO.findAll(task, calendar.getTime(), null, null, null);\n+        assertNotNull(execs);\n+        assertEquals(1, execs.size());\n     }\n \n     @Test"},{"sha":"8e0875594e72fba901512c94a74cc576de9609ee","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -126,8 +126,8 @@ public void addPropagationTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n         execution.setStatus(PropagationTaskExecStatus.CREATED.name());\n-        task.addExec(execution);\n         execution.setStartDate(new Date());\n+        task.addExec(execution);\n \n         taskDAO.save(task);\n         taskDAO.flush();\n@@ -148,8 +148,9 @@ public void addSyncTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n-        task.addExec(execution);\n+        execution.setStartDate(new Date());\n         execution.setMessage(\"A message\");\n+        task.addExec(execution);\n \n         taskDAO.save(task);\n         taskDAO.flush();\n@@ -170,8 +171,9 @@ public void addPushTaskExecution() {\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setStatus(\"Text-free status\");\n         execution.setTask(task);\n-        task.addExec(execution);\n+        execution.setStartDate(new Date());\n         execution.setMessage(\"A message\");\n+        task.addExec(execution);\n \n         taskDAO.save(task);\n         taskDAO.flush();"},{"sha":"efe407ee333e27da695ce53b790b25bec8d0e7e9","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -973,7 +973,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"1\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"1\" task_id=\"1\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"1\" task_id=\"1\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"2\" operation=\"CREATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-2\" anyTypeKind=\"USER\" anyKey=\"1\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n@@ -992,7 +992,7 @@ under the License.\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_name=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" anyKey=\"1\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>\n-  <TaskExec id=\"6\" task_id=\"6\" status=\"SUCCESS\"/>\n+  <TaskExec id=\"6\" task_id=\"6\" startDate=\"2015-12-17 09:40:00.506\" endDate=\"2015-12-17 09:42:00.506\" status=\"SUCCESS\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" syncMode=\"FULL_RECONCILIATION\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>"},{"sha":"956fdb84f5a5176e3cdde2197af2b664196d2a39","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReportServiceImpl.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReportServiceImpl.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -25,12 +25,14 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.syncope.core.logic.ReportLogic;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n@@ -67,11 +69,6 @@ public ReportTO read(final Long key) {\n         return logic.read(key);\n     }\n \n-    @Override\n-    public ReportExecTO readExecution(final Long executionKey) {\n-        return logic.readExecution(executionKey);\n-    }\n-\n     @Override\n     public Response exportExecutionResult(final Long executionKey, final ReportExecExportFormat fmt) {\n         final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n@@ -105,6 +102,16 @@ public void deleteExecution(final Long executionKey) {\n         logic.deleteExecution(executionKey);\n     }\n \n+    @Override\n+    public BulkActionResult deleteExecutions(final BulkExecDeleteQuery query) {\n+        return logic.deleteExecutions(\n+                query.getKey(),\n+                query.getStartedBefore(),\n+                query.getStartedAfter(),\n+                query.getEndedBefore(),\n+                query.getEndedAfter());\n+    }\n+\n     @Override\n     public List<ReportExecTO> listJobs(final JobStatusType type) {\n         return logic.listJobs(type, ReportExecTO.class);"},{"sha":"12ff13efb86571355caa06dd30fa4dff812d87c1","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/TaskServiceImpl.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FTaskServiceImpl.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.types.JobAction;\n import org.apache.syncope.common.lib.types.JobStatusType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.beans.TaskExecQuery;\n import org.apache.syncope.common.rest.api.beans.TaskQuery;\n import org.apache.syncope.common.rest.api.service.TaskService;\n@@ -109,11 +110,6 @@ public void update(final AbstractTaskTO taskTO) {\n         }\n     }\n \n-    @Override\n-    public TaskExecTO readExecution(final Long executionKey) {\n-        return logic.readExecution(executionKey);\n-    }\n-\n     @Override\n     public PagedResult<TaskExecTO> listExecutions(final TaskExecQuery query) {\n         return buildPagedResult(\n@@ -132,6 +128,16 @@ public void deleteExecution(final Long executionKey) {\n         logic.deleteExecution(executionKey);\n     }\n \n+    @Override\n+    public BulkActionResult deleteExecutions(final BulkExecDeleteQuery query) {\n+        return logic.deleteExecutions(\n+                query.getKey(),\n+                query.getStartedBefore(),\n+                query.getStartedAfter(),\n+                query.getEndedBefore(),\n+                query.getEndedAfter());\n+    }\n+\n     @Override\n     public BulkActionResult bulk(final BulkAction bulkAction) {\n         BulkActionResult result = new BulkActionResult();"},{"sha":"c1cccb03adf7f7bf13838a9f9cee07733433771a","filename":"core/rest-cxf/src/main/resources/restCXFContext.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fresources%2FrestCXFContext.xml?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -61,6 +61,8 @@ under the License.\n     </property>\n   </bean>\n \n+  <bean id=\"dateParamConverterProvider\" class=\"org.apache.syncope.common.rest.api.DateParamConverterProvider\"/>\n+\n   <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.cxf.UnwrappedObjectMapper\"/>\n   <bean id=\"jsonProvider\" class=\"com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider\">\n     <property name=\"mapper\" ref=\"jacksonObjectMapper\"/>\n@@ -127,6 +129,7 @@ under the License.\n       <ref bean=\"validationOutInterceptor\"/>\n     </jaxrs:outInterceptors>\n     <jaxrs:providers>\n+      <ref bean=\"dateParamConverterProvider\"/>\n       <ref bean=\"jaxbProvider\"/>\n       <ref bean=\"jsonProvider\"/>\n       <ref bean=\"exceptionMapper\"/>"},{"sha":"01ee9277114089cdd576535f5a72ab5c2def9528","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/PropagationTaskITCase.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FPropagationTaskITCase.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -76,12 +76,6 @@ public void read() {\n         assertTrue(taskTO.getExecutions().isEmpty());\n     }\n \n-    @Test\n-    public void readExecution() {\n-        TaskExecTO taskTO = taskService.readExecution(6L);\n-        assertNotNull(taskTO);\n-    }\n-\n     @Test\n     public void bulkAction() {\n         PagedResult<PropagationTaskTO> before = taskService.list("},{"sha":"0360bd22d7b530e9325bf64c87dc509dff93edf9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ReportITCase.java","status":"modified","additions":65,"deletions":29,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1358b3552dba77195412093e233c81066e405e03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1358b3552dba77195412093e233c81066e405e03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FReportITCase.java?ref=1358b3552dba77195412093e233c81066e405e03","patch":"@@ -26,6 +26,7 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.Date;\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.core.HttpHeaders;\n@@ -34,10 +35,12 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.report.UserReportletConf;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n import org.apache.syncope.common.lib.to.ReportExecTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.lib.types.ReportExecStatus;\n+import org.apache.syncope.common.rest.api.beans.BulkExecDeleteQuery;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -78,12 +81,6 @@ public void read() {\n         assertFalse(reportTO.getExecutions().isEmpty());\n     }\n \n-    @Test\n-    public void readExecution() {\n-        ReportExecTO reportExecTO = reportService.readExecution(1L);\n-        assertNotNull(reportExecTO);\n-    }\n-\n     @Test\n     public void create() {\n         ReportTO report = new ReportTO();\n@@ -140,6 +137,35 @@ public void delete() {\n         }\n     }\n \n+    private Long execute(final Long reportKey) {\n+        ReportExecTO execution = reportService.execute(reportKey);\n+        assertNotNull(execution);\n+\n+        int i = 0;\n+        int maxit = 50;\n+\n+        ReportTO reportTO;\n+\n+        // wait for report execution completion (executions incremented)\n+        do {\n+            try {\n+                Thread.sleep(1000);\n+            } catch (InterruptedException e) {\n+            }\n+\n+            reportTO = reportService.read(reportKey);\n+\n+            assertNotNull(reportTO);\n+            assertNotNull(reportTO.getExecutions());\n+\n+            i++;\n+        } while (reportTO.getExecutions().isEmpty()\n+                || (!ReportExecStatus.SUCCESS.name().equals(reportTO.getExecutions().get(0).getStatus()) && i < maxit));\n+        assertEquals(ReportExecStatus.SUCCESS.name(), reportTO.getExecutions().get(0).getStatus());\n+\n+        return reportTO.getExecutions().get(0).getKey();\n+    }\n+\n     private void checkExport(final Long execId, final ReportExecExportFormat fmt) throws IOException {\n         Response response = reportService.exportExecutionResult(execId, fmt);\n         assertNotNull(response);\n@@ -162,36 +188,46 @@ public void executeAndExport() throws IOException {\n         reportTO = createReport(reportTO);\n         assertNotNull(reportTO);\n \n-        ReportExecTO execution = reportService.execute(reportTO.getKey());\n-        assertNotNull(execution);\n+        long execId = execute(reportTO.getKey());\n \n-        int i = 0;\n-        int maxit = 50;\n+        checkExport(execId, ReportExecExportFormat.XML);\n+        checkExport(execId, ReportExecExportFormat.HTML);\n+        checkExport(execId, ReportExecExportFormat.PDF);\n+        checkExport(execId, ReportExecExportFormat.RTF);\n+        checkExport(execId, ReportExecExportFormat.CSV);\n+    }\n \n-        // wait for report execution completion (executions incremented)\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n+    @Test\n+    public void deleteExecutions() {\n+        Date start = new Date();\n+        try {\n+            Thread.sleep(1000);\n+        } catch (InterruptedException e) {\n+        }\n \n-            reportTO = reportService.read(reportTO.getKey());\n+        ReportTO reportTO = reportService.read(1L);\n+        reportTO.setKey(0);\n+        reportTO.setName(\"deleteExecutions\" + getUUIDString());\n+        reportTO.getExecutions().clear();\n+        reportTO = createReport(reportTO);\n+        assertNotNull(reportTO);\n \n-            assertNotNull(reportTO);\n-            assertNotNull(reportTO.getExecutions());\n+        Long execId = execute(reportTO.getKey());\n+        assertNotNull(execId);\n \n-            i++;\n-        } while (reportTO.getExecutions().isEmpty()\n-                || (!ReportExecStatus.SUCCESS.name().equals(reportTO.getExecutions().get(0).getStatus()) && i < maxit));\n-        assertEquals(ReportExecStatus.SUCCESS.name(), reportTO.getExecutions().get(0).getStatus());\n+        try {\n+            Thread.sleep(1000);\n+        } catch (InterruptedException e) {\n+        }\n+        Date end = new Date();\n \n-        long execId = reportTO.getExecutions().get(0).getKey();\n+        BulkActionResult result = reportService.deleteExecutions(\n+                new BulkExecDeleteQuery.Builder().key(reportTO.getKey()).startedAfter(start).endedBefore(end).build());\n+        assertNotNull(result);\n \n-        checkExport(execId, ReportExecExportFormat.XML);\n-        checkExport(execId, ReportExecExportFormat.HTML);\n-        checkExport(execId, ReportExecExportFormat.PDF);\n-        checkExport(execId, ReportExecExportFormat.RTF);\n-        checkExport(execId, ReportExecExportFormat.CSV);\n+        assertEquals(1, result.getResults().size());\n+        assertEquals(execId.toString(), result.getResults().keySet().iterator().next());\n+        assertEquals(BulkActionResult.Status.SUCCESS, result.getResults().entrySet().iterator().next().getValue());\n     }\n \n     @Test"}]}