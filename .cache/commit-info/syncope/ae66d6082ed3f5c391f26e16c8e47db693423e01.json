{"sha":"ae66d6082ed3f5c391f26e16c8e47db693423e01","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFlNjZkNjA4MmVkM2Y1YzM5MWYyNmUxNmM4ZTQ3ZGI2OTM0MjNlMDE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-07T17:35:55Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-07T17:35:55Z"},"message":"fixed search with not condition\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246691 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7a53bd59a5d1ee4afc3417fc0e20b6086988a79b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7a53bd59a5d1ee4afc3417fc0e20b6086988a79b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ae66d6082ed3f5c391f26e16c8e47db693423e01","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ae66d6082ed3f5c391f26e16c8e47db693423e01","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ae66d6082ed3f5c391f26e16c8e47db693423e01","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ae66d6082ed3f5c391f26e16c8e47db693423e01/comments","author":null,"committer":null,"parents":[{"sha":"0b07e11f90f68fb7d4c8c894ef1014ad908d06b0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0b07e11f90f68fb7d4c8c894ef1014ad908d06b0","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0b07e11f90f68fb7d4c8c894ef1014ad908d06b0"}],"stats":{"total":49,"additions":47,"deletions":2},"files":[{"sha":"37a7231df3e4a421f5ecd7dd88d934a54dc0d090","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SyncopeUserDAOImpl.java","status":"modified","additions":47,"deletions":2,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ae66d6082ed3f5c391f26e16c8e47db693423e01/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ae66d6082ed3f5c391f26e16c8e47db693423e01/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSyncopeUserDAOImpl.java?ref=ae66d6082ed3f5c391f26e16c8e47db693423e01","patch":"@@ -364,8 +364,53 @@ private Criterion getCriterion(final USchema schema,\n                 break;\n \n             case NOT_LEAF:\n-                leafCond.setType(NodeCond.Type.LEAF);\n-                criterion = Restrictions.not(getCriterion(schema, leafCond));\n+                \n+                final AttributeCond attributeCondition =\n+                        leafCond.getAttributeCond();\n+\n+                if (attributeCondition != null) {\n+                    if (schema == null) {\n+                        LOG.warn(\"Ignoring invalid schema '\"\n+                                + leafCond.getAttributeCond().getSchema()\n+                                + \"'\");\n+                    } else {\n+                        UAttrValue attributeValue = new UAttrValue();\n+                        try {\n+                            if (leafCond.getAttributeCond().getType()\n+                                    == AttributeCond.Type.LIKE) {\n+\n+                                attributeValue.setStringValue(\n+                                        leafCond.getAttributeCond().\n+                                        getExpression());\n+                            } else {\n+                                attributeValue =\n+                                        schema.getValidator().\n+                                        getValue(\n+                                        leafCond.getAttributeCond().\n+                                        getExpression(),\n+                                        attributeValue);\n+                            }\n+\n+                            criterion = Restrictions.and(\n+                                    Restrictions.eq(\"a.schema.name\",\n+                                    leafCond.getAttributeCond().getSchema()),\n+                                    Restrictions.not(getCriterion(\n+                                    leafCond.getAttributeCond().getType(),\n+                                    attributeValue)));\n+\n+                            // if user doesn't have the attribute it won't be returned\n+\n+                        } catch (ValidationException e) {\n+                            LOG.error(\"Could not validate expression '\"\n+                                    + leafCond.getAttributeCond().\n+                                    getExpression() + \"'\", e);\n+                        }\n+                    }\n+                } else {\n+                    leafCond.setType(NodeCond.Type.LEAF);\n+                    criterion = Restrictions.not(\n+                            getCriterion(schema, leafCond));\n+                }\n                 break;\n \n             default:"}]}