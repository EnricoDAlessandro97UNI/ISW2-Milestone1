{"sha":"0dc6593ffccd559cd147e088a4832368d33532b5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjBkYzY1OTNmZmNjZDU1OWNkMTQ3ZTA4OGE0ODMyMzY4ZDMzNTMyYjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-22T16:39:03Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-06-22T16:39:31Z"},"message":"Removing warnings for local variable hiding class field + using UUID.randomUUID as other test cases","tree":{"sha":"7df391f8d05c155eb20034f8d25fdfa5bd97bf75","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7df391f8d05c155eb20034f8d25fdfa5bd97bf75"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/0dc6593ffccd559cd147e088a4832368d33532b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0dc6593ffccd559cd147e088a4832368d33532b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0dc6593ffccd559cd147e088a4832368d33532b5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0dc6593ffccd559cd147e088a4832368d33532b5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"a4f351196912442cd54b2e4329d952cd9855ea34","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a4f351196912442cd54b2e4329d952cd9855ea34","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a4f351196912442cd54b2e4329d952cd9855ea34"}],"stats":{"total":63,"additions":31,"deletions":32},"files":[{"sha":"27af84924fcfdc392b7b6e6a8f85bfcf58b23e7f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/JWTITCase.java","status":"modified","additions":31,"deletions":32,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0dc6593ffccd559cd147e088a4832368d33532b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0dc6593ffccd559cd147e088a4832368d33532b5/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FJWTITCase.java?ref=0dc6593ffccd559cd147e088a4832368d33532b5","patch":"@@ -18,17 +18,19 @@\n  */\n package org.apache.syncope.fit.core;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.security.AccessControlException;\n import java.text.ParseException;\n import java.text.SimpleDateFormat;\n import java.util.Calendar;\n import java.util.Date;\n-\n+import java.util.UUID;\n import javax.ws.rs.core.Response;\n import javax.xml.ws.WebServiceException;\n-\n import org.apache.cxf.rs.security.jose.common.JoseType;\n import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n import org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider;\n@@ -48,8 +50,6 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.Test;\n \n-import com.fasterxml.uuid.Generators;\n-\n /**\n  * Some tests for JWT Tokens\n  */\n@@ -58,8 +58,8 @@ public class JWTITCase extends AbstractITCase {\n     @Test\n     public void testGetJWTToken() throws ParseException {\n         // Get the token\n-        SyncopeClient adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        AccessTokenService accessTokenService = adminClient.getService(AccessTokenService.class);\n+        SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n \n         Response response = accessTokenService.login();\n         String token = response.getHeaderString(RESTHeaders.TOKEN);\n@@ -70,7 +70,7 @@ public void testGetJWTToken() throws ParseException {\n         // Validate the signature\n         JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(token);\n         JwsSignatureVerifier jwsSignatureVerifier =\n-            new HmacJwsSignatureVerifier(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n+                new HmacJwsSignatureVerifier(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         assertTrue(consumer.verifySignatureWith(jwsSignatureVerifier));\n \n         Date now = new Date();\n@@ -80,7 +80,7 @@ public void testGetJWTToken() throws ParseException {\n         assertNotNull(expiryTime);\n \n         SimpleDateFormat dateFormat = new SimpleDateFormat(\"yyyy-MM-dd'T'HH:mm:ssXXX\");\n-        Date tokenDate = dateFormat.parse(dateFormat.format(new Date(expiryTime.longValue())));\n+        Date tokenDate = dateFormat.parse(dateFormat.format(new Date(expiryTime)));\n         Date parsedDate = dateFormat.parse(expiry);\n \n         assertEquals(tokenDate, parsedDate);\n@@ -89,7 +89,7 @@ public void testGetJWTToken() throws ParseException {\n         // Verify issuedAt\n         Long issuedAt = consumer.getJwtClaims().getIssuedAt();\n         assertNotNull(issuedAt);\n-        assertTrue(new Date(issuedAt.longValue()).before(now));\n+        assertTrue(new Date(issuedAt).before(now));\n \n         // Validate subject + issuer\n         assertEquals(\"admin\", consumer.getJwtClaims().getSubject());\n@@ -98,14 +98,14 @@ public void testGetJWTToken() throws ParseException {\n         // Verify NotBefore\n         Long notBefore = consumer.getJwtClaims().getNotBefore();\n         assertNotNull(notBefore);\n-        assertTrue(new Date(notBefore.longValue()).before(now));\n+        assertTrue(new Date(notBefore).before(now));\n     }\n \n     @Test\n     public void testQueryUsingToken() throws ParseException {\n         // Get the token\n-        SyncopeClient adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        AccessTokenService accessTokenService = adminClient.getService(AccessTokenService.class);\n+        SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n \n         Response response = accessTokenService.login();\n         String token = response.getHeaderString(RESTHeaders.TOKEN);\n@@ -130,8 +130,8 @@ public void testQueryUsingToken() throws ParseException {\n     @Test\n     public void testTokenValidation() throws ParseException {\n         // Get an initial token\n-        SyncopeClient adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        AccessTokenService accessTokenService = adminClient.getService(AccessTokenService.class);\n+        SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n \n         Response response = accessTokenService.login();\n         String token = response.getHeaderString(RESTHeaders.TOKEN);\n@@ -159,7 +159,7 @@ public void testTokenValidation() throws ParseException {\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n         JwsSignatureProvider jwsSignatureProvider =\n-            new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n+                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -170,8 +170,8 @@ public void testTokenValidation() throws ParseException {\n     @Test\n     public void testInvalidIssuer() throws ParseException {\n         // Get an initial token\n-        SyncopeClient adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        AccessTokenService accessTokenService = adminClient.getService(AccessTokenService.class);\n+        SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n \n         Response response = accessTokenService.login();\n         String token = response.getHeaderString(RESTHeaders.TOKEN);\n@@ -199,7 +199,7 @@ public void testInvalidIssuer() throws ParseException {\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n         JwsSignatureProvider jwsSignatureProvider =\n-            new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n+                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -215,8 +215,8 @@ public void testInvalidIssuer() throws ParseException {\n     @Test\n     public void testExpiredToken() throws ParseException {\n         // Get an initial token\n-        SyncopeClient adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        AccessTokenService accessTokenService = adminClient.getService(AccessTokenService.class);\n+        SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n \n         Response response = accessTokenService.login();\n         String token = response.getHeaderString(RESTHeaders.TOKEN);\n@@ -244,7 +244,7 @@ public void testExpiredToken() throws ParseException {\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n         JwsSignatureProvider jwsSignatureProvider =\n-            new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n+                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -260,8 +260,8 @@ public void testExpiredToken() throws ParseException {\n     @Test\n     public void testNotBefore() throws ParseException {\n         // Get an initial token\n-        SyncopeClient adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        AccessTokenService accessTokenService = adminClient.getService(AccessTokenService.class);\n+        SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n \n         Response response = accessTokenService.login();\n         String token = response.getHeaderString(RESTHeaders.TOKEN);\n@@ -289,7 +289,7 @@ public void testNotBefore() throws ParseException {\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n         JwsSignatureProvider jwsSignatureProvider =\n-            new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n+                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);\n@@ -305,8 +305,8 @@ public void testNotBefore() throws ParseException {\n     @Test\n     public void testNoneSignature() throws ParseException {\n         // Get an initial token\n-        SyncopeClient adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        AccessTokenService accessTokenService = adminClient.getService(AccessTokenService.class);\n+        SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n \n         Response response = accessTokenService.login();\n         String token = response.getHeaderString(RESTHeaders.TOKEN);\n@@ -315,7 +315,6 @@ public void testNoneSignature() throws ParseException {\n         String tokenId = consumer.getJwtClaims().getTokenId();\n \n         // Create a new token using the Id of the first token\n-\n         JwtClaims jwtClaims = new JwtClaims();\n         jwtClaims.setTokenId(tokenId);\n         jwtClaims.setSubject(consumer.getJwtClaims().getSubject());\n@@ -344,8 +343,8 @@ public void testNoneSignature() throws ParseException {\n     @Test\n     public void testUnknownId() throws ParseException {\n         // Get an initial token\n-        SyncopeClient adminClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        AccessTokenService accessTokenService = adminClient.getService(AccessTokenService.class);\n+        SyncopeClient localClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        AccessTokenService accessTokenService = localClient.getService(AccessTokenService.class);\n \n         Response response = accessTokenService.login();\n         String token = response.getHeaderString(RESTHeaders.TOKEN);\n@@ -359,7 +358,7 @@ public void testUnknownId() throws ParseException {\n         expiry.add(Calendar.MINUTE, 5);\n \n         JwtClaims jwtClaims = new JwtClaims();\n-        jwtClaims.setTokenId(Generators.randomBasedGenerator().generate().toString());\n+        jwtClaims.setTokenId(UUID.randomUUID().toString());\n         jwtClaims.setSubject(\"admin\");\n         jwtClaims.setIssuedAt(now.getTime());\n         jwtClaims.setIssuer(JWT_ISSUER);\n@@ -371,7 +370,7 @@ public void testUnknownId() throws ParseException {\n         JwsJwtCompactProducer producer = new JwsJwtCompactProducer(jwtToken);\n \n         JwsSignatureProvider jwsSignatureProvider =\n-            new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n+                new HmacJwsSignatureProvider(JWS_KEY.getBytes(), SignatureAlgorithm.HS512);\n         String signed = producer.signWith(jwsSignatureProvider);\n \n         SyncopeClient jwtClient = clientFactory.create(signed);"}]}