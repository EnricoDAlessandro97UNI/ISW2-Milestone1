{"sha":"61385632208864e645e7a33d2db962c2fd8c99fd","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjYxMzg1NjMyMjA4ODY0ZTY0NWU3YTMzZDJkYjk2MmMyZmQ4Yzk5ZmQ=","commit":{"author":{"name":"Misagh Moayyed","email":"mm1844@gmail.com","date":"2019-09-04T10:53:47Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2019-09-09T10:15:39Z"},"message":"SYNCOPE-1332: use lambda's for anonymous types and/or method args/calls","tree":{"sha":"223f1f2a00ccdc57eb0705b4e9d56435514d4a39","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/223f1f2a00ccdc57eb0705b4e9d56435514d4a39"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/61385632208864e645e7a33d2db962c2fd8c99fd","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61385632208864e645e7a33d2db962c2fd8c99fd","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/61385632208864e645e7a33d2db962c2fd8c99fd","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/61385632208864e645e7a33d2db962c2fd8c99fd/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"3a59f86140728d66441d2a45cff2957553b24898","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3a59f86140728d66441d2a45cff2957553b24898","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3a59f86140728d66441d2a45cff2957553b24898"}],"stats":{"total":2617,"additions":1128,"deletions":1489},"files":[{"sha":"510be551b9024c4a96b1edd795ee85bbd1509258","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/HistoryConfDetails.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FHistoryConfDetails.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -98,9 +98,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n \n     private void showConfigurationDiffPanel(final List<T> historyConfTOs) {\n         List<Pair<String, String>> infos = new ArrayList<>();\n-        historyConfTOs.forEach(historyConfTO -> {\n-            infos.add(getJSONInfo(historyConfTO));\n-        });\n+        historyConfTOs.forEach(historyConfTO -> infos.add(getJSONInfo(historyConfTO)));\n \n         jsonPanel = new JsonDiffPanel(null, new PropertyModel<String>(infos.get(0), \"value\"),\n                 new PropertyModel<String>(infos.get(1), \"value\"), null) {"},{"sha":"cb12ded4d7efcb5d4f904bc7dc37ad63df161405","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/VirSchemaDetails.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirSchemaDetails.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -149,9 +149,8 @@ private void populateAnyTypes(final String resourceKey) {\n \n             if (SyncopeConsoleSession.get().owns(IdMEntitlement.RESOURCE_READ, adminRealm)) {\n                 selectedResource = resource;\n-                selectedResource.getProvisions().forEach(provisionTO -> {\n-                    anyTypes.put(provisionTO.getAnyType(), provisionTO.getObjectClass());\n-                });\n+                selectedResource.getProvisions().forEach(\n+                        provisionTO -> anyTypes.put(provisionTO.getAnyType(), provisionTO.getObjectClass()));\n             }\n         }\n     }"},{"sha":"5b85edb8e8e43be25deb4a09775fb97ac93254bc","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/policies/ProvisioningPolicyModalPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FProvisioningPolicyModalPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -122,9 +122,7 @@ public List<CorrelationRule> getObject() {\n             @Override\n             public void setObject(final List<CorrelationRule> object) {\n                 policyTO.getCorrelationRules().clear();\n-                rules.forEach(rule -> {\n-                    policyTO.getCorrelationRules().put(rule.getAnyType(), rule.getImpl().getKey());\n-                });\n+                rules.forEach(rule -> policyTO.getCorrelationRules().put(rule.getAnyType(), rule.getImpl().getKey()));\n             }\n         };\n "},{"sha":"9326a42a5cd21a3a3f591703a5447a70b6c37c8b","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -71,7 +71,7 @@ public List<String> getObjectClasses(final String connectorKey) {\n                     getLanguage());\n             if (connInstance != null) {\n                 result.addAll(service.buildObjectClassInfo(connInstance, true).stream().\n-                        map(input -> input.getType()).collect(Collectors.toList()));\n+                        map(ConnIdObjectClassTO::getType).collect(Collectors.toList()));\n             }\n         } catch (Exception e) {\n             LOG.error(\"While reading object classes for connector {}\", connectorKey, e);\n@@ -154,15 +154,11 @@ private List<ConnConfProperty> filterProperties(final Collection<ConnConfPropert\n             if (property.getValues() != null) {\n                 property.getValues().stream().\n                         filter(obj -> (obj != null && !obj.toString().isEmpty())).\n-                        forEachOrdered((obj) -> {\n-                            parsed.add(obj);\n-                        });\n+                        forEachOrdered(parsed::add);\n             }\n             prop.getValues().addAll(parsed);\n             return prop;\n-        }).forEachOrdered(prop -> {\n-            newProperties.add(prop);\n-        });\n+        }).forEachOrdered(newProperties::add);\n         return newProperties;\n     }\n "},{"sha":"00884dc4412ece0ff63f0f4c89f32a2b06d489e7","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/Topology.java","status":"modified","additions":5,"deletions":14,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopology.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -378,9 +378,8 @@ protected void populateItem(final ListItem<ConnInstanceTO> item) {\n         // Add Resources\n         // -----------------------------------------\n         final Collection<String> adminConns = new HashSet<>();\n-        connModel.getObject().values().forEach(connInstances -> {\n-            adminConns.addAll(connInstances.stream().map(EntityTO::getKey).collect(Collectors.toList()));\n-        });\n+        connModel.getObject().values().forEach(connInstances -> adminConns.addAll(\n+                connInstances.stream().map(EntityTO::getKey).collect(Collectors.toList())));\n \n         final Set<String> adminRes = new HashSet<>();\n         final List<String> connToBeProcessed = new ArrayList<>();\n@@ -473,9 +472,7 @@ public void renderHead(final Component component, final IHeaderResponse response\n                 final StringBuilder jsPlumbConf = new StringBuilder();\n                 jsPlumbConf.append(String.format(Locale.US, \"activate(%.2f);\", 0.68f));\n \n-                createConnections(connections).forEach(str -> {\n-                    jsPlumbConf.append(str);\n-                });\n+                createConnections(connections).forEach(jsPlumbConf::append);\n \n                 response.render(OnDomReadyHeaderItem.forScript(jsPlumbConf.toString()));\n             }\n@@ -532,14 +529,8 @@ protected void populateItem(final ListItem<TopologyNode> item) {\n     private List<String> createConnections(final Map<Serializable, Map<Serializable, TopologyNode>> targets) {\n         List<String> list = new ArrayList<>();\n \n-        targets.forEach((key, value) -> {\n-            value.forEach((label, node) -> {\n-                list.add(String.format(\"connect('%s','%s','%s');\",\n-                        key,\n-                        label,\n-                        node.getKind()));\n-            });\n-        });\n+        targets.forEach((key, value) -> value.forEach((label, node) -> list.add(\n+                String.format(\"connect('%s','%s','%s');\", key, label, node.getKind()))));\n         return list;\n     }\n "},{"sha":"abe12306c68df55e4dfca06fe89c4073fb5ac88e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorDetailsPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorDetailsPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -93,9 +93,7 @@ protected List<String> load() {\n         List<String> bundleNames = new ArrayList<>();\n         bundles.stream().\n                 filter(bundle -> (!bundleNames.contains(bundle.getBundleName()))).\n-                forEachOrdered(bundle -> {\n-                    bundleNames.add(bundle.getBundleName());\n-                });\n+                forEachOrdered(bundle -> bundleNames.add(bundle.getBundleName()));\n \n         bundleName.setChoices(bundleNames);\n         bundleName.addRequiredLabel();"},{"sha":"f7de8f9435fdb0e916bd8962ee6cbe83e078c74c","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceConnConfPanel.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceConnConfPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -92,18 +92,14 @@ protected final List<ConnConfProperty> getConnProperties(final ResourceTO resour\n \n         if (resourceTO.getConnector() != null) {\n             restClient.read(resourceTO.getConnector()).getConf().stream().\n-                    filter(property -> (property.isOverridable())).\n-                    forEachOrdered(property -> {\n-                        props.add(property);\n-                    });\n+                    filter(ConnConfProperty::isOverridable).\n+                    forEachOrdered(props::add);\n         }\n         if (createFlag || resourceTO.getConfOverride().isEmpty()) {\n             resourceTO.getConfOverride().clear();\n         } else {\n             Map<String, ConnConfProperty> valuedProps = new HashMap<>();\n-            resourceTO.getConfOverride().forEach(prop -> {\n-                valuedProps.put(prop.getSchema().getName(), prop);\n-            });\n+            resourceTO.getConfOverride().forEach(prop -> valuedProps.put(prop.getSchema().getName(), prop));\n \n             for (int i = 0; i < props.size(); i++) {\n                 if (valuedProps.containsKey(props.get(i).getSchema().getName())) {"},{"sha":"2fe458d385e5531d92b50e6b1ed0db057017cd4e","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ResourceProvisionPanel.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FResourceProvisionPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -138,9 +139,7 @@ protected ActionLinksTogglePanel<ResourceProvision> getTogglePanel() {\n         if (resourceTO.getOrgUnit() != null) {\n             provisions.add(new ResourceProvision(resourceTO.getOrgUnit()));\n         }\n-        resourceTO.getProvisions().forEach(provision -> {\n-            provisions.add(new ResourceProvision(provision));\n-        });\n+        resourceTO.getProvisions().forEach(provision -> provisions.add(new ResourceProvision(provision)));\n         // keep list ordered - SYNCOPE-1154\n         sortProvisions();\n \n@@ -283,7 +282,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n             }\n \n             new ArrayList<>(resourceTO.getProvisions()).stream().\n-                    filter(provision -> provision != null).\n+                    filter(Objects::nonNull).\n                     forEachOrdered(provision -> {\n                         if (provision.getMapping() == null || provision.getMapping().getItems().isEmpty()) {\n                             resourceTO.getProvisions().remove(provision);"},{"sha":"408216b11d5b068bf81c8086f74dfff33bba44d6","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -138,9 +138,7 @@ public List<T> getSelectedList() {\n \n                         // reduce number of method calls by building a lookup table\n                         final Map<T, String> idForChoice = new HashMap<>(choices.size());\n-                        choices.forEach(choice -> {\n-                            idForChoice.put(choice, renderer.getIdValue(choice, 0));\n-                        });\n+                        choices.forEach(choice -> idForChoice.put(choice, renderer.getIdValue(choice, 0)));\n \n                         final String value = getValue();\n                         int start = value.indexOf(';') + 1;\n@@ -319,9 +317,7 @@ private List<T> getSelectedList(final Collection<T> choices, final String select\n             final List<T> selected = new ArrayList<>();\n \n             final Map<T, String> idForChoice = new HashMap<>();\n-            choices.forEach(choice -> {\n-                idForChoice.put(choice, renderer.getIdValue(choice, 0));\n-            });\n+            choices.forEach(choice -> idForChoice.put(choice, renderer.getIdValue(choice, 0)));\n \n             for (final String id : Strings.split(selection, ',')) {\n                 final Iterator<T> iter = choices.iterator();\n@@ -344,9 +340,7 @@ protected List<T> getFilteredList(final Collection<T> choices, final String filt\n             final List<T> selected = new ArrayList<>(choices.size());\n \n             final Map<T, String> idForChoice = new HashMap<>();\n-            choices.forEach(choice -> {\n-                idForChoice.put(choice, renderer.getIdValue(choice, 0));\n-            });\n+            choices.forEach(choice -> idForChoice.put(choice, renderer.getIdValue(choice, 0)));\n \n             final Pattern pattern = Pattern.compile(filter, Pattern.CASE_INSENSITIVE);\n "},{"sha":"bf6555b76d63d177d91ca596dcdb65e6ece38afa","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AjaxTextFieldPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -121,7 +121,7 @@ public FieldPanel<String> enableJexlHelp(final String... jexlExamples) {\n \n     protected Iterator<String> getChoices(final String input) {\n         Pattern pattern = Pattern.compile(\".*\" + Pattern.quote(input) + \".*\", Pattern.CASE_INSENSITIVE);\n-        return choices.stream().filter(choice -> pattern.matcher(choice).matches()).iterator();\n+        return choices.stream().filter(pattern.asMatchPredicate()).iterator();\n     }\n \n     @Override"},{"sha":"0c59a3b635e0841a591b073e53f229b62be14492","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/wizards/any/AbstractAnyWizardBuilder.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FAbstractAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FAbstractAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fwizards%2Fany%2FAbstractAnyWizardBuilder.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -41,16 +41,16 @@ protected void fixPlainAndVirAttrs(final AnyTO updated, final AnyTO original) {\n                 filter(attr -> updated.getVirAttr(attr.getSchema()).isPresent()).\n                 forEach(attr -> updated.getVirAttrs().add(attr));\n         if (updated instanceof GroupableRelatableTO && original instanceof GroupableRelatableTO) {\n-            GroupableRelatableTO.class.cast(original).getMemberships().forEach(oMemb -> {\n-                GroupableRelatableTO.class.cast(updated).getMembership(oMemb.getGroupKey()).ifPresent(uMemb -> {\n-                    oMemb.getPlainAttrs().stream().\n-                            filter(attr -> uMemb.getPlainAttr(attr.getSchema()).isPresent()).\n-                            forEach(attr -> uMemb.getPlainAttrs().add(attr));\n-                    oMemb.getVirAttrs().stream().\n-                            filter(attr -> uMemb.getVirAttr(attr.getSchema()).isPresent()).\n-                            forEach(attr -> uMemb.getVirAttrs().add(attr));\n-                });\n-            });\n+            GroupableRelatableTO.class.cast(original).getMemberships()\n+                    .forEach(oMemb -> GroupableRelatableTO.class.cast(updated).getMembership(oMemb.getGroupKey())\n+                    .ifPresent(uMemb -> {\n+                        oMemb.getPlainAttrs().stream().\n+                                filter(attr -> uMemb.getPlainAttr(attr.getSchema()).isPresent()).\n+                                forEach(attr -> uMemb.getPlainAttrs().add(attr));\n+                        oMemb.getVirAttrs().stream().\n+                                filter(attr -> uMemb.getVirAttr(attr.getSchema()).isPresent()).\n+                                forEach(attr -> uMemb.getVirAttrs().add(attr));\n+                    }));\n         }\n \n         // remove from the updated object any plain or virtual attribute without values, thus triggering for removal in"},{"sha":"7280d832ba284945e0028de1094988d73b83a568","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/PreferenceManager.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FPreferenceManager.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -135,9 +135,7 @@ public void set(final Request request, final Response response, final Map<String\n         }\n \n         // after retrieved previous setting in order to overwrite the key ...\n-        prefs.forEach((key, values) -> {\n-            current.put(key, StringUtils.join(values, \";\"));\n-        });\n+        prefs.forEach((key, values) -> current.put(key, StringUtils.join(values, \";\")));\n \n         try {\n             COOKIE_UTILS.save(COOKIE_NAME, Base64.getEncoder().encodeToString(setPrefs(current).getBytes()));"},{"sha":"1c8a11a066e8aa98bff58aa71edf5ba17b5339d8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -224,9 +224,7 @@ public UserTO getSelfTO() {\n     public List<String> getAuthRealms() {\n         List<String> sortable = new ArrayList<>();\n         List<String> available = SetUniqueList.setUniqueList(sortable);\n-        auth.values().forEach(entitlement -> {\n-            available.addAll(entitlement);\n-        });\n+        auth.values().forEach(available::addAll);\n         Collections.sort(sortable);\n         return sortable;\n     }\n@@ -251,7 +249,7 @@ public boolean owns(final String entitlements, final String... realms) {\n                 Set<String> owned = auth.get(entitlement);\n                 for (String realm : requested) {\n                     if (realm.startsWith(SyncopeConstants.ROOT_REALM)) {\n-                        owns |= owned.stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm));\n+                        owns |= owned.stream().anyMatch(realm::startsWith);\n                     } else {\n                         owns |= owned.contains(realm);\n                     }"},{"sha":"5d864b38540788eb6afdc4c05a824707fc18b0f6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/batch/BatchContent.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fbatch%2FBatchContent.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -176,7 +176,7 @@ public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n \n                             // Group bean information by anyKey\n                             Map<String, List<StatusBean>> beans = new HashMap<>();\n-                            items.stream().map(bean -> StatusBean.class.cast(bean)).\n+                            items.stream().map(StatusBean.class::cast).\n                                     forEachOrdered(sb -> {\n                                         final List<StatusBean> sblist;\n                                         if (beans.containsKey(sb.getKey())) {"},{"sha":"fc419cff9f6ec8355708fe8a5e50e2fd13a15eca","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/ExternalResourceProvider.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FExternalResourceProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FExternalResourceProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FExternalResourceProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.List;\n \n+@FunctionalInterface\n public interface ExternalResourceProvider extends Serializable {\n \n     List<String> get();"},{"sha":"05882c57388ef97dce1b21f65a3fee841b05ef65","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/PolicyTabProvider.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPolicyTabProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPolicyTabProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPolicyTabProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -23,6 +23,7 @@\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n \n+@FunctionalInterface\n public interface PolicyTabProvider extends Serializable {\n \n     List<ITab> buildTabList(PageReference pageRef);"},{"sha":"d635e7d9a5675c8baa835586ae20428720c3d364","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/VirSchemaDetailsPanelProvider.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FVirSchemaDetailsPanelProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FVirSchemaDetailsPanelProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FVirSchemaDetailsPanelProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n import org.apache.wicket.markup.html.panel.Panel;\n \n+@FunctionalInterface\n public interface VirSchemaDetailsPanelProvider extends Serializable {\n \n     Panel get(String id, VirSchemaTO schemaTO);"},{"sha":"f7ce81579d726e99a0330a9484d5063f865714dc","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/events/EventCategoryPanel.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fevents%2FEventCategoryPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -264,9 +264,7 @@ private List<String> filter(final List<EventCategory> eventCategoryTOs, final Ev\n \n         eventCategoryTOs.stream().filter(eventCategory\n                 -> type == eventCategory.getType() && StringUtils.isNotEmpty(eventCategory.getCategory())).\n-                forEachOrdered(eventCategory -> {\n-                    res.add(eventCategory.getCategory());\n-                });\n+                forEachOrdered(eventCategory -> res.add(eventCategory.getCategory()));\n \n         List<String> filtered = new ArrayList<>(res);\n         Collections.sort(filtered);\n@@ -281,9 +279,7 @@ private List<String> filter(\n         eventCategoryTOs.stream().filter(eventCategory\n                 -> type == eventCategory.getType() && StringUtils.equals(category, eventCategory.getCategory())\n                 && StringUtils.isNotEmpty(eventCategory.getSubcategory())).\n-                forEachOrdered(eventCategory -> {\n-                    res.add(eventCategory.getSubcategory());\n-                });\n+                forEachOrdered(eventCategory -> res.add(eventCategory.getSubcategory()));\n \n         List<String> filtered = new ArrayList<>(res);\n         Collections.sort(filtered);\n@@ -431,9 +427,8 @@ protected void onEventAction(final IEvent<?> event) {\n     }\n \n     private void authorizeList() {\n-        getListAuthRoles().forEach(role -> {\n-            MetaDataRoleAuthorizationStrategy.authorize(selectedEventsPanel, RENDER, role);\n-        });\n+        getListAuthRoles().forEach(\n+                role -> MetaDataRoleAuthorizationStrategy.authorize(selectedEventsPanel, RENDER, role));\n     }\n \n     private void authorizeChanges() {"},{"sha":"b80f98fca8b1d31c5c7553b8097af3f10892375f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWrapper.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWrapper.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -53,9 +53,7 @@ public List<Pair<String, List<SearchClause>>> getAboutClauses() {\n         if (this.aboutClauses == null) {\n             this.aboutClauses = new ArrayList<>();\n             SearchUtils.getSearchClauses(this.notificationTO.getAbouts()).entrySet().\n-                    forEach(entry -> {\n-                        this.aboutClauses.add(Pair.of(entry.getKey(), (entry.getValue())));\n-                    });\n+                    forEach(entry -> this.aboutClauses.add(Pair.of(entry.getKey(), (entry.getValue()))));\n         }\n \n         return this.aboutClauses;"},{"sha":"17664d605429c98a6cef866f2c45ab64871d47d6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyDirectoryPanel.java","status":"modified","additions":13,"deletions":20,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyDirectoryPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -119,13 +119,11 @@ protected AnyDirectoryPanel(final String id, final Builder<A, E> builder, final\n         altDefaultModal.size(Modal.Size.Large);\n \n         this.pSchemaNames = new ArrayList<>();\n-        AnyDirectoryPanelBuilder.class.cast(builder).getAnyTypeClassTOs().forEach(anyTypeClassTO -> {\n-            this.pSchemaNames.addAll(anyTypeClassTO.getPlainSchemas());\n-        });\n+        AnyDirectoryPanelBuilder.class.cast(builder).getAnyTypeClassTOs()\n+                .forEach(anyTypeClassTO -> this.pSchemaNames.addAll(anyTypeClassTO.getPlainSchemas()));\n         this.dSchemaNames = new ArrayList<>();\n-        AnyDirectoryPanelBuilder.class.cast(builder).getAnyTypeClassTOs().forEach(anyTypeClassTO -> {\n-            this.dSchemaNames.addAll(anyTypeClassTO.getDerSchemas());\n-        });\n+        AnyDirectoryPanelBuilder.class.cast(builder).getAnyTypeClassTOs()\n+                .forEach(anyTypeClassTO -> this.dSchemaNames.addAll(anyTypeClassTO.getDerSchemas()));\n \n         initResultTable();\n \n@@ -155,24 +153,18 @@ protected List<IColumn<A, String>> getColumns() {\n \n         prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefDetailView(type)).stream().\n                 filter(name -> !Constants.KEY_FIELD_NAME.equalsIgnoreCase(name)).\n-                forEachOrdered(name -> {\n-                    addPropertyColumn(\n-                            name,\n-                            ReflectionUtils.findField(DisplayAttributesModalPanel.getTOClass(type), name),\n-                            prefcolumns);\n-                });\n+                forEachOrdered(name -> addPropertyColumn(\n+                name,\n+                ReflectionUtils.findField(DisplayAttributesModalPanel.getTOClass(type), name),\n+                prefcolumns));\n \n         prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefPlainAttributeView(type)).stream().\n-                filter(name -> pSchemaNames.contains(name)).\n-                forEachOrdered(name -> {\n-                    prefcolumns.add(new AttrColumn<>(name, SchemaType.PLAIN));\n-                });\n+                filter(pSchemaNames::contains).\n+                forEachOrdered(name -> prefcolumns.add(new AttrColumn<>(name, SchemaType.PLAIN)));\n \n         prefMan.getList(getRequest(), DisplayAttributesModalPanel.getPrefDerivedAttributeView(type)).stream().\n-                filter(name -> (dSchemaNames.contains(name))).\n-                forEachOrdered(name -> {\n-                    prefcolumns.add(new AttrColumn<>(name, SchemaType.DERIVED));\n-                });\n+                filter(dSchemaNames::contains).\n+                forEachOrdered(name -> prefcolumns.add(new AttrColumn<>(name, SchemaType.DERIVED)));\n \n         // Add defaults in case of no selection\n         if (prefcolumns.isEmpty()) {\n@@ -231,6 +223,7 @@ protected Collection<ActionLink.ActionType> getBatches() {\n         return batches;\n     }\n \n+    @FunctionalInterface\n     public interface AnyDirectoryPanelBuilder extends Serializable {\n \n         List<AnyTypeClassTO> getAnyTypeClassTOs();"},{"sha":"2c39540b3159bf24d15832e0fa7b685b65110923","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyObjectDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyObjectDirectoryPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -138,7 +138,7 @@ protected boolean statusCondition(final AnyObjectTO modelObject) {\n                     realm,\n                     altDefaultModal,\n                     getString(\"any.edit\", new Model<>(new AnyWrapper<>(model.getObject()))),\n-                    pageRef).forEach(action -> panel.add(action));\n+                    pageRef).forEach(panel::add);\n \n             panel.add(\n                     new ActionLink<AnyObjectTO>() {"},{"sha":"82bf9f3f1b0c4c08b1748c7cf91ff741f60b7125","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/GroupDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupDirectoryPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -316,7 +316,7 @@ public void onClick(final AjaxRequestTarget target, final GroupTO ignore) {\n                 realm,\n                 altDefaultModal,\n                 getString(\"any.edit\", new Model<>(new AnyWrapper<>(model.getObject()))),\n-                pageRef).forEach(action -> panel.add(action));\n+                pageRef).forEach(panel::add);\n \n         panel.add(new ActionLink<GroupTO>() {\n "},{"sha":"1e78c0a65d433655ca85195dcbfc3ef05c948413","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/ListViewPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FListViewPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -390,8 +390,9 @@ protected Component getValueComponent(final String key, final T bean) {\n         }\n \n         protected T getActualItem(final T item, final List<T> list) {\n-            return Optional.ofNullable(item)\n-                .map(t -> list.stream().filter(t::equals).findAny().orElse(null)).orElse(null);\n+            return item == null\n+                    ? null\n+                    : list.stream().filter(item::equals).findAny().orElse(null);\n         }\n \n         @Override"},{"sha":"13dbc1462dd9ca86357e06260fef900a7ca682ed","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -68,14 +68,14 @@ public class RealmChoicePanel extends Panel {\n \n     private final WebMarkupContainer container;\n \n-    private Model<RealmTO> model;\n-\n     private final Collection<String> availableRealms;\n \n     private final Map<String, Pair<RealmTO, List<RealmTO>>> tree;\n \n     private final List<AbstractLink> links = new ArrayList<>();\n \n+    private Model<RealmTO> model;\n+\n     public RealmChoicePanel(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n@@ -273,10 +273,9 @@ public void onClick(final AjaxRequestTarget target) {\n \n                             @Override\n                             public boolean isEnabled() {\n-                                return availableRealms.stream().anyMatch(availableRealm -> {\n-                                    return SyncopeConstants.ROOT_REALM.equals(availableRealm)\n-                                            || realmTO.getKey().equals(availableRealm);\n-                                });\n+                                return availableRealms.stream()\n+                                        .anyMatch(availableRealm -> SyncopeConstants.ROOT_REALM.equals(availableRealm)\n+                                        || realmTO.getKey().equals(availableRealm));\n                             }\n                         });\n                     }\n@@ -364,6 +363,10 @@ public RealmTO moveToParentRealm(final String key) {\n         return null;\n     }\n \n+    public List<AbstractLink> getLinks() {\n+        return links;\n+    }\n+\n     public static class ChosenRealm<T> {\n \n         private final AjaxRequestTarget target;\n@@ -383,8 +386,4 @@ public AjaxRequestTarget getTarget() {\n             return target;\n         }\n     }\n-\n-    public List<AbstractLink> getLinks() {\n-        return links;\n-    }\n }"},{"sha":"4dfc358988b82a8a723ee2f300e8638b08a781af","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.client.ui.commons.markup.html.form.FieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.PolicyRenderer;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.policy.PolicyTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n@@ -65,7 +66,7 @@ public class RealmDetails extends Panel {\n         @Override\n         protected Map<String, String> load() {\n             return policyRestClient.getPolicies(PolicyType.ACCOUNT).stream().\n-                    collect(Collectors.toMap(policyTO -> policyTO.getKey(), policyTO -> policyTO.getDescription()));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n \n@@ -76,7 +77,7 @@ protected Map<String, String> load() {\n         @Override\n         protected Map<String, String> load() {\n             return policyRestClient.getPolicies(PolicyType.PASSWORD).stream().\n-                    collect(Collectors.toMap(policyTO -> policyTO.getKey(), policyTO -> policyTO.getDescription()));\n+                    collect(Collectors.toMap(PolicyTO::getKey, PolicyTO::getDescription));\n         }\n     };\n "},{"sha":"9d3eadf97b7f8230792996f3ba7b4ac9ed13c606","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/SchemaTypeWizardBuilder.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchemaTypeWizardBuilder.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -137,9 +137,8 @@ public Labels(final SchemaTO modelObject) {\n             setOutputMarkupId(true);\n \n             translations.getObject().clear();\n-            modelObject.getLabels().forEach((locale, display) -> {\n-                translations.getObject().add(MutablePair.of(locale, display));\n-            });\n+            modelObject.getLabels().forEach(\n+                    (locale, display) -> translations.getObject().add(MutablePair.of(locale, display)));\n \n             ListView<MutablePair<Locale, String>> labels =\n                     new ListView<MutablePair<Locale, String>>(\"labels\", translations) {\n@@ -175,9 +174,8 @@ public void setObject(final String object) {\n                             LOG.error(\"Invalid Locale: {}\", validatable.getValue(), e);\n                             validatable.error(new ValidationError(\"Invalid Locale: \" + validatable.getValue()));\n \n-                            RequestCycle.get().find(AjaxRequestTarget.class).ifPresent(target -> {\n-                                target.add(Labels.this);\n-                            });\n+                            RequestCycle.get().find(AjaxRequestTarget.class).\n+                                    ifPresent(target -> target.add(Labels.this));\n                         }\n                     });\n                     item.add(locale);"},{"sha":"4e083cc229f2ddac1f05ee1c2291e2b718ab13cd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/UserDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDirectoryPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -242,7 +242,7 @@ public void onClick(final AjaxRequestTarget target, final UserTO ignore) {\n                     realm,\n                     altDefaultModal,\n                     getString(\"any.edit\", new Model<>(new AnyWrapper<>(model.getObject()))),\n-                    pageRef).forEach(action -> panel.add(action));\n+                    pageRef).forEach(panel::add);\n \n             panel.add(new ActionLink<UserTO>() {\n "},{"sha":"300e47031d4cc6ad22724392650f86af8fb94b10","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.search.SearchableFields;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -184,7 +185,7 @@ protected List<String> load() {\n             protected Map<String, PlainSchemaTO> load() {\n                 return schemaRestClient.<PlainSchemaTO>getSchemas(\n                         SchemaType.PLAIN, null, anyTypeRestClient.read(type).getClasses().toArray(new String[] {})).\n-                        stream().collect(Collectors.toMap(schema -> schema.getKey(), Function.identity()));\n+                        stream().collect(Collectors.toMap(SchemaTO::getKey, Function.identity()));\n             }\n         };\n "},{"sha":"9138471c9ae18ded1702fea44ea5d7218d79e4ab","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -25,6 +25,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -239,7 +240,7 @@ private List<ReportletWrapper> getReportletWrappers(final ReportTO reportTO) {\n                 }\n \n                 return wrapper;\n-            }).filter(wrapper -> wrapper != null).collect(Collectors.toList());\n+            }).filter(Objects::nonNull).collect(Collectors.toList());\n         }\n \n         @Override"},{"sha":"a90ad040b255376a7fdfefabd85c04dd1a70ab05","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -50,9 +50,7 @@ public List<LogStatement> getLastLogStatements(final String appender, final long\n         List<LogStatement> result = new ArrayList<>();\n         getService(LoggerService.class).getLastLogStatements(appender).stream().\n                 filter(statement -> statement.getTimeMillis() > lastStatementTime).\n-                forEachOrdered(statement -> {\n-                    result.add(statement);\n-                });\n+                forEachOrdered(result::add);\n \n         return result;\n     }"},{"sha":"f738a17b16d0f9e6a4db11b178f23d018b81dc09","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -61,9 +61,7 @@ public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, fina\n                 new AnyTypeRestClient().listAnyTypes().stream().filter(\n                         anyTypeTO -> (anyTypeTO.getKind() != AnyTypeKind.USER\n                         && anyTypeTO.getKind() != AnyTypeKind.GROUP)).\n-                        forEach((anyTypeTO) -> {\n-                            classes.addAll(anyTypeTO.getClasses());\n-                        });\n+                        forEach((anyTypeTO) -> classes.addAll(anyTypeTO.getClasses()));\n         }\n         return getSchemas(schemaType, null, classes.toArray(new String[] {}));\n     }"},{"sha":"a30ca95235f89daaa83bb7fd385d828f6a56e1ac","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/bootstrap/dialog/BaseModal.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -236,7 +236,7 @@ public void removeSubmitButton() {\n         components.stream().\n                 filter(component -> SUBMIT.equals(component.getId())).\n                 findFirst().\n-                ifPresent(button -> components.remove(button));\n+                ifPresent(components::remove);\n \n         submitButton = null;\n     }"},{"sha":"2f99589ac630fb759680b5c6d5f67bca9b8c416c","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/WizardMgtPanel.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -364,9 +364,7 @@ public WizardMgtPanel<T> setFooterVisibility(final boolean footerVisibility) {\n      * @param modal target modal.\n      */\n     protected void setWindowClosedReloadCallback(final BaseModal<?> modal) {\n-        modal.setWindowClosedCallback(target -> {\n-            modal.show(false);\n-        });\n+        modal.setWindowClosedCallback(target -> modal.show(false));\n     }\n \n     /**"},{"sha":"5544ca5222ac66fb0640c9d6077f1ba3ac12b8ba","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AbstractAttrs.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAbstractAttrs.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -166,9 +166,7 @@ private void setSchemas(final List<String> anyTypeClasses, final Map<String, S>\n                     filter(schemaTO -> !whichAttrs.contains(schemaTO.getKey())).collect(Collectors.toSet()));\n         }\n \n-        allSchemas.forEach(schemaTO -> {\n-            scs.put(schemaTO.getKey(), schemaTO);\n-        });\n+        allSchemas.forEach(schemaTO -> scs.put(schemaTO.getKey(), schemaTO));\n     }\n \n     @Override"},{"sha":"a6edfedda927d2ca847b9f1c36516ee8b17c7044","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -27,8 +27,8 @@\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n import org.apache.syncope.client.console.layout.GroupFormLayoutInfo;\n-import org.apache.syncope.client.ui.commons.layout.AbstractAnyFormLayout;\n import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n+import org.apache.syncope.client.ui.commons.layout.AbstractAnyFormLayout;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractAnyWizardBuilder;\n import org.apache.syncope.client.ui.commons.wizards.any.AnyForm;\n@@ -195,16 +195,16 @@ protected void fixPlainAndVirAttrs(final AnyTO updated, final AnyTO original) {\n         }\n \n         if (updated instanceof GroupableRelatableTO && original instanceof GroupableRelatableTO) {\n-            GroupableRelatableTO.class.cast(original).getMemberships().forEach(oMemb -> {\n-                GroupableRelatableTO.class.cast(updated).getMembership(oMemb.getGroupKey()).ifPresent(uMemb -> {\n-                    oMemb.getPlainAttrs().stream().\n-                            filter(attr -> uMemb.getPlainAttr(attr.getSchema()).isEmpty()).\n-                            forEach(attr -> uMemb.getPlainAttrs().add(attr));\n-                    oMemb.getVirAttrs().stream().\n-                            filter(attr -> uMemb.getVirAttr(attr.getSchema()).isEmpty()).\n-                            forEach(attr -> uMemb.getVirAttrs().add(attr));\n-                });\n-            });\n+            GroupableRelatableTO.class.cast(original).getMemberships().\n+                    forEach(oMemb -> GroupableRelatableTO.class.cast(updated).getMembership(oMemb.getGroupKey()).\n+                    ifPresent(uMemb -> {\n+                        oMemb.getPlainAttrs().stream().\n+                                filter(attr -> !uMemb.getPlainAttr(attr.getSchema()).isPresent()).\n+                                forEach(attr -> uMemb.getPlainAttrs().add(attr));\n+                        oMemb.getVirAttrs().stream().\n+                                filter(attr -> !uMemb.getVirAttr(attr.getSchema()).isPresent()).\n+                                forEach(attr -> uMemb.getVirAttrs().add(attr));\n+                    }));\n         }\n \n         // remove from the updated object any plain or virtual attribute without values, thus triggering for removal in"},{"sha":"8f55da94cd79348cd31938b0add5446af26859d2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Details.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDetails.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -29,6 +29,7 @@\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.link.AbstractLink;\n@@ -89,11 +90,9 @@ private List<RealmTO> getRealmsFromLinks(final List<AbstractLink> realmLinks) {\n         List<RealmTO> realms = new ArrayList<>();\n \n         realmLinks.stream().\n-                map(link -> link.getDefaultModelObject()).\n+                map(Component::getDefaultModelObject).\n                 filter(modelObject -> modelObject instanceof RealmTO).\n-                forEachOrdered(modelObject -> {\n-                    realms.add((RealmTO) modelObject);\n-                });\n+                forEachOrdered(modelObject -> realms.add((RealmTO) modelObject));\n \n         return realms;\n     }"},{"sha":"71d83a8e5ce2f0da669f8b03ce88d1d38e99aca6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":16,"deletions":17,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.client.console.wizards.any;\n \n-import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.List;\n@@ -27,47 +26,48 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n-import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractGroups;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractGroupsModel;\n+import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.DynRealmTO;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n-import org.apache.wicket.markup.html.form.IChoiceRenderer;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.model.util.ListModel;\n import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.ActionPermissions;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n \n public class Groups extends AbstractGroups {\n \n     private static final long serialVersionUID = 552437609667518888L;\n \n     private final GroupRestClient groupRestClient = new GroupRestClient();\n \n-    private boolean templateMode;\n+    private final ConsoleGroupsModel groupsModel;\n+\n+    private final List<DynRealmTO> allDynRealms = new ArrayList<>();\n \n     protected WebMarkupContainer dyngroupsContainer;\n \n     protected WebMarkupContainer dynrealmsContainer;\n \n-    private final ConsoleGroupsModel groupsModel;\n-\n-    private final List<DynRealmTO> allDynRealms = new ArrayList<>();\n+    private boolean templateMode;\n \n     public <T extends AnyTO> Groups(final AnyWrapper<T> modelObject, final boolean templateMode) {\n         super(modelObject);\n@@ -156,10 +156,8 @@ public List<MembershipTO> execute(final String filter) {\n                                             isAssignable().and().is(\"name\").equalTo(filter).query(),\n                                     1, MAX_GROUP_LIST_CARDINALITY,\n                                     new SortParam<>(\"name\", true),\n-                                    null)).stream().map(input -> {\n-\n-                                return new MembershipTO.Builder(input.getKey()).groupName(input.getName()).build();\n-                            }).collect(Collectors.toList());\n+                                    null)).stream().map(input -> new MembershipTO.Builder(input.getKey())\n+                            .groupName(input.getName()).build()).collect(Collectors.toList());\n                 }\n             }).hideLabel().setOutputMarkupId(true));\n \n@@ -173,7 +171,8 @@ public List<String> getObject() {\n                     return Groups.this.groupsModel.getDynMemberships();\n                 }\n \n-            }, new ListModel<>(groupsModel.getObject().stream().map(GroupTO::getName).collect(Collectors.toList()))).\n+            }, new ListModel<>(groupsModel.getObject().stream()\n+                            .map(GroupTO::getName).collect(Collectors.toList()))).\n                     hideLabel().setEnabled(false).setOutputMarkupId(true));\n \n             // ---------------------------------"},{"sha":"c34140f09250b5c0a545330a4104175109cfad2e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":20,"deletions":21,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -130,29 +130,28 @@ private Fragment getViewFragment() {\n         final Fragment viewFragment = new Fragment(\"relationships\", \"viewFragment\", this);\n         viewFragment.setOutputMarkupId(true);\n \n-        viewFragment.add(new Accordion(\"relationships\", relationships.keySet().stream().map(relationship -> {\n-            return new AbstractTab(new ResourceModel(\"relationship\", relationship)) {\n+        viewFragment.add(new Accordion(\"relationships\", relationships.keySet().stream().\n+                map(relationship -> new AbstractTab(new ResourceModel(\"relationship\", relationship)) {\n \n-                private static final long serialVersionUID = 1037272333056449378L;\n+            private static final long serialVersionUID = 1037272333056449378L;\n \n-                @Override\n-                public Panel getPanel(final String panelId) {\n-                    return new ListViewPanel.Builder<>(RelationshipTO.class, pageRef).\n-                            setItems(relationships.get(relationship)).\n-                            includes(\"otherEndType\", \"otherEndKey\", \"otherEndName\").\n-                            addAction(new ActionLink<RelationshipTO>() {\n-\n-                                private static final long serialVersionUID = -6847033126124401556L;\n-\n-                                @Override\n-                                public void onClick(final AjaxRequestTarget target, final RelationshipTO modelObject) {\n-                                    removeRelationships(relationships, modelObject);\n-                                    send(Relationships.this, Broadcast.DEPTH, new ListViewReload<>(target));\n-                                }\n-                            }, ActionType.DELETE, AnyEntitlement.UPDATE.getFor(anyTO.getType()), true).\n-                            build(panelId);\n-                }\n-            };\n+            @Override\n+            public Panel getPanel(final String panelId) {\n+                return new ListViewPanel.Builder<>(RelationshipTO.class, pageRef).\n+                        setItems(relationships.get(relationship)).\n+                        includes(\"otherEndType\", \"otherEndKey\", \"otherEndName\").\n+                        addAction(new ActionLink<RelationshipTO>() {\n+\n+                            private static final long serialVersionUID = -6847033126124401556L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target, final RelationshipTO modelObject) {\n+                                removeRelationships(relationships, modelObject);\n+                                send(Relationships.this, Broadcast.DEPTH, new ListViewReload<>(target));\n+                            }\n+                        }, ActionType.DELETE, AnyEntitlement.UPDATE.getFor(anyTO.getType()), true).\n+                        build(panelId);\n+            }\n         }).collect(Collectors.toList())) {\n \n             private static final long serialVersionUID = 1037272333056449379L;"},{"sha":"378649720a75cb6cf6cc90b7345b3605cecf4328","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/TemplateWizardBuilder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTemplateWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTemplateWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FTemplateWizardBuilder.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.AnyTO;\n \n+@FunctionalInterface\n public interface TemplateWizardBuilder<T extends AnyTO> {\n \n     AjaxWizard<AnyWrapper<T>> build(String id);"},{"sha":"49a62a2447188568762e5e3f22fb01cd42227ff4","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/navigation/Navbar.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fnavigation%2FNavbar.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -20,7 +20,6 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.ExtPage;\n import org.apache.syncope.client.enduser.pages.BaseExtPage;\n@@ -139,10 +138,9 @@ public ListView<Class<? extends BaseExtPage>> getExtPages() {\n     }\n \n     public void setActiveNavItem(final String id) {\n-        Optional<WebMarkupContainer> found = navbarItems.stream().filter(containingLI -> {\n-            return containingLI.getMarkupId().equals(id);\n-        }).findFirst();\n-        found.ifPresent(components -> components.add(new Behavior() {\n+        navbarItems.stream().\n+                filter(containingLI -> containingLI.getMarkupId().equals(id)).findFirst().\n+                ifPresent(found -> found.add(new Behavior() {\n \n             private static final long serialVersionUID = -5775607340182293596L;\n \n@@ -152,5 +150,4 @@ public void onComponentTag(final Component component, final ComponentTag tag) {\n             }\n         }));\n     }\n-\n }"},{"sha":"1fb40487a027ef2738c78dc89a4f06d0449a767e","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/rest/SchemaRestClient.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Frest%2FSchemaRestClient.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -61,9 +61,7 @@ public <T extends SchemaTO> List<T> getSchemas(final SchemaType schemaType, fina\n                 new AnyTypeRestClient().listAnyTypes().stream().filter(\n                         anyTypeTO -> (anyTypeTO.getKind() != AnyTypeKind.USER\n                         && anyTypeTO.getKind() != AnyTypeKind.GROUP)).\n-                        forEach((anyTypeTO) -> {\n-                            classes.addAll(anyTypeTO.getClasses());\n-                        });\n+                        forEach((anyTypeTO) -> classes.addAll(anyTypeTO.getClasses()));\n         }\n         return getSchemas(schemaType, null, classes.toArray(new String[] {}));\n     }"},{"sha":"9500d0c9b7c444d3c694e33a9d15664efdddfcd3","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/AbstractAttrs.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FAbstractAttrs.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -186,9 +186,7 @@ private void setSchemas(final List<String> anyTypeClasses, final String groupNam\n                     : !whichAttrs.containsKey(groupName + \"#\" + schemaTO.getKey())).collect(Collectors.toSet()));\n         }\n \n-        allSchemas.forEach(schemaTO -> {\n-            scs.put(schemaTO.getKey(), schemaTO);\n-        });\n+        allSchemas.forEach(schemaTO -> scs.put(schemaTO.getKey(), schemaTO));\n     }\n \n     @Override"},{"sha":"98c2166ccfed5a2d8c949c1788b5b9f08d93ca4f","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/Groups.java","status":"modified","additions":7,"deletions":8,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FGroups.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,24 +18,24 @@\n  */\n package org.apache.syncope.client.enduser.wizards.any;\n \n-import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.util.Collections;\n import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.rest.GroupRestClient;\n-import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractGroups;\n import org.apache.syncope.client.ui.commons.wizards.any.AbstractGroupsModel;\n+import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n-import org.apache.syncope.common.lib.to.GroupableRelatableTO;\n-import org.apache.wicket.markup.html.basic.Label;\n \n public class Groups extends AbstractGroups {\n \n@@ -109,10 +109,9 @@ public List<MembershipTO> execute(final String filter) {\n                                     anyTO.getRealm(),\n                                     SyncopeClient.getGroupSearchConditionBuilder().\n                                             isAssignable().and().is(\"name\").equalTo(filter).query(),\n-                                    1, MAX_GROUP_LIST_CARDINALITY)).stream().map(input -> {\n-\n-                                return new MembershipTO.Builder(input.getKey()).groupName(input.getName()).build();\n-                            }).collect(Collectors.toList());\n+                                    1, MAX_GROUP_LIST_CARDINALITY)).stream()\n+                            .map(input -> new MembershipTO.Builder(input.getKey())\n+                            .groupName(input.getName()).build()).collect(Collectors.toList());\n                 }\n             }).hideLabel().setOutputMarkupId(true));\n             // ---------------------------------"},{"sha":"5cd1156c5cf23b9e102b7656bc21dce294e9bf76","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/PlainAttrs.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FPlainAttrs.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -407,7 +407,7 @@ protected void populateItem(final ListItem<Attr> item) {\n                     Attr attrTO = item.getModelObject();\n \n                     // set default values, if any\n-                    if (attrTO.getValues().stream().noneMatch(value -> StringUtils.isNotBlank(value))) {\n+                    if (attrTO.getValues().stream().noneMatch(StringUtils::isNotBlank)) {\n                         attrTO.getValues().clear();\n                         attrTO.getValues().addAll(getDefaultValues(attrTO.getSchema(), groupName));\n                     }\n@@ -455,7 +455,7 @@ protected void populateItem(final ListItem<Attr> item) {\n                     Attr attrTO = item.getModelObject();\n \n                     // set default values, if any\n-                    if (attrTO.getValues().stream().noneMatch(value -> StringUtils.isNotBlank(value))) {\n+                    if (attrTO.getValues().stream().noneMatch(StringUtils::isNotBlank)) {\n                         attrTO.getValues().clear();\n                         attrTO.getValues().addAll(getDefaultValues(attrTO.getSchema()));\n                     }"},{"sha":"8a3b97496cb58f6d21699910f271d54af5bcf536","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/wizards/any/VirAttrs.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FVirAttrs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FVirAttrs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fwizards%2Fany%2FVirAttrs.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -200,7 +200,7 @@ protected void populateItem(final ListItem<Attr> item) {\n                     Attr attrTO = item.getModelObject();\n \n                     // set default values, if any\n-                    if (attrTO.getValues().stream().filter(value -> StringUtils.isNotBlank(value))\n+                    if (attrTO.getValues().stream().filter(StringUtils::isNotBlank)\n                             .collect(Collectors.toList()).isEmpty()) {\n                         attrTO.getValues().clear();\n                         attrTO.getValues().addAll(getDefaultValues(attrTO.getSchema(), groupName));"},{"sha":"ebf8e6f980d429a7ba56f436d338f3b4ad168068","filename":"client/idrepo/lib/src/test/java/org/apache/syncope/client/lib/ConcurrencyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/client%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -68,7 +68,7 @@ public void multiCallTest() {\n                 CLIENT.getService(SyncopeService.class);\n             }\n         } catch (Exception e) {\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         }\n     }\n }"},{"sha":"7064a598c0bf2b82957d107c02265e1cda5e87e8","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/MappingTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FMappingTO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -51,7 +51,7 @@ public void setConnObjectLink(final String connObjectLink) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().orElse(null);\n+        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().orElse(null);\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"f1db5c5f5a1c144bd87698e07bb4c84c53240a0a","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/to/OrgUnitTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOrgUnitTO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -90,7 +90,7 @@ public void setConnObjectLink(final String connObjectLink) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().orElse(null);\n+        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().orElse(null);\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"dd0b9651b405e3470ca8c9792a6fc85fd8a39284","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":40,"deletions":61,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -27,15 +27,15 @@\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.request.AbstractReplacePatchItem;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n+import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.RelationshipUR;\n-import org.apache.syncope.common.lib.request.AbstractReplacePatchItem;\n-import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserUR;\n@@ -92,17 +92,13 @@ private static void diff(\n \n         if (!incremental) {\n             original.getAuxClasses().stream().filter(auxClass -> !updated.getAuxClasses().contains(auxClass)).\n-                    forEach(auxClass -> {\n-                        result.getAuxClasses().add(new StringPatchItem.Builder().\n-                                operation(PatchOperation.DELETE).value(auxClass).build());\n-                    });\n+                    forEach(auxClass -> result.getAuxClasses().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.DELETE).value(auxClass).build()));\n         }\n \n         updated.getAuxClasses().stream().filter(auxClass -> !original.getAuxClasses().contains(auxClass)).\n-                forEach(auxClass -> {\n-                    result.getAuxClasses().add(new StringPatchItem.Builder().\n-                            operation(PatchOperation.ADD_REPLACE).value(auxClass).build());\n-                });\n+                forEach(auxClass -> result.getAuxClasses().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(auxClass).build()));\n \n         // 3. plain attributes\n         Map<String, Attr> updatedAttrs = EntityTOUtils.buildAttrMap(updated.getPlainAttrs());\n@@ -111,20 +107,21 @@ private static void diff(\n         result.getPlainAttrs().clear();\n \n         if (!incremental) {\n-            originalAttrs.keySet().stream().filter(attr -> !updatedAttrs.containsKey(attr)).\n-                    forEach(schema -> {\n-                        result.getPlainAttrs().add(new AttrPatch.Builder(new Attr.Builder(schema).build()).\n-                                operation(PatchOperation.DELETE).\n-                                build());\n-                    });\n+            originalAttrs.keySet().stream().\n+                    filter(attr -> !updatedAttrs.containsKey(attr)).forEach(\n+                    schema -> result.getPlainAttrs().add(\n+                            new AttrPatch.Builder(new Attr.Builder(schema).build()).\n+                                    operation(PatchOperation.DELETE).\n+                                    build()));\n         }\n \n         updatedAttrs.values().forEach(attr -> {\n             if (isEmpty(attr)) {\n                 if (!incremental) {\n-                    result.getPlainAttrs().add(new AttrPatch.Builder(new Attr.Builder(attr.getSchema()).build()).\n-                            operation(PatchOperation.DELETE).\n-                            build());\n+                    result.getPlainAttrs().add(\n+                            new AttrPatch.Builder(new Attr.Builder(attr.getSchema()).build()).\n+                                    operation(PatchOperation.DELETE).\n+                                    build());\n                 }\n             } else if (!originalAttrs.containsKey(attr.getSchema())\n                     || !originalAttrs.get(attr.getSchema()).getValues().equals(attr.getValues())) {\n@@ -145,17 +142,13 @@ private static void diff(\n \n         if (!incremental) {\n             original.getResources().stream().filter(resource -> !updated.getResources().contains(resource)).\n-                    forEach(resource -> {\n-                        result.getResources().add(new StringPatchItem.Builder().\n-                                operation(PatchOperation.DELETE).value(resource).build());\n-                    });\n+                    forEach(resource -> result.getResources().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.DELETE).value(resource).build()));\n         }\n \n         updated.getResources().stream().filter(resource -> !original.getResources().contains(resource)).\n-                forEach(resource -> {\n-                    result.getResources().add(new StringPatchItem.Builder().\n-                            operation(PatchOperation.ADD_REPLACE).value(resource).build());\n-                });\n+                forEach(resource -> result.getResources().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(resource).build()));\n     }\n \n     /**\n@@ -184,17 +177,13 @@ public static AnyObjectUR diff(\n \n         updatedRels.entrySet().stream().\n                 filter(entry -> (!originalRels.containsKey(entry.getKey()))).\n-                forEach(entry -> {\n-                    result.getRelationships().add(new RelationshipUR.Builder(entry.getValue()).\n-                            operation(PatchOperation.ADD_REPLACE).build());\n-                });\n+                forEach(entry -> result.getRelationships().add(new RelationshipUR.Builder(entry.getValue()).\n+                operation(PatchOperation.ADD_REPLACE).build()));\n \n         if (!incremental) {\n             originalRels.keySet().stream().filter(relationship -> !updatedRels.containsKey(relationship)).\n-                    forEach(key -> {\n-                        result.getRelationships().add(new RelationshipUR.Builder(originalRels.get(key)).\n-                                operation(PatchOperation.DELETE).build());\n-                    });\n+                    forEach(key -> result.getRelationships().add(new RelationshipUR.Builder(originalRels.get(key)).\n+                    operation(PatchOperation.DELETE).build()));\n         }\n \n         // 3. memberships\n@@ -216,10 +205,9 @@ public static AnyObjectUR diff(\n \n         if (!incremental) {\n             originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n-                    forEach(key -> {\n-                        result.getMemberships().add(new MembershipUR.Builder(originalMembs.get(key).getGroupKey()).\n-                                operation(PatchOperation.DELETE).build());\n-                    });\n+                    forEach(key -> result.getMemberships().add(\n+                    new MembershipUR.Builder(originalMembs.get(key).getGroupKey()).\n+                            operation(PatchOperation.DELETE).build()));\n         }\n \n         return result;\n@@ -284,17 +272,13 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n         // 4. roles\n         if (!incremental) {\n             original.getRoles().stream().filter(role -> !updated.getRoles().contains(role)).\n-                    forEach(toRemove -> {\n-                        result.getRoles().add(new StringPatchItem.Builder().\n-                                operation(PatchOperation.DELETE).value(toRemove).build());\n-                    });\n+                    forEach(toRemove -> result.getRoles().add(new StringPatchItem.Builder().\n+                    operation(PatchOperation.DELETE).value(toRemove).build()));\n         }\n \n         updated.getRoles().stream().filter(role -> !original.getRoles().contains(role)).\n-                forEach(toAdd -> {\n-                    result.getRoles().add(new StringPatchItem.Builder().\n-                            operation(PatchOperation.ADD_REPLACE).value(toAdd).build());\n-                });\n+                forEach(toAdd -> result.getRoles().add(new StringPatchItem.Builder().\n+                operation(PatchOperation.ADD_REPLACE).value(toAdd).build()));\n \n         // 5. relationships\n         Map<Pair<String, String>, RelationshipTO> updatedRels =\n@@ -304,17 +288,13 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n \n         updatedRels.entrySet().stream().\n                 filter(entry -> (!originalRels.containsKey(entry.getKey()))).\n-                forEach(entry -> {\n-                    result.getRelationships().add(new RelationshipUR.Builder(entry.getValue()).\n-                            operation(PatchOperation.ADD_REPLACE).build());\n-                });\n+                forEach(entry -> result.getRelationships().add(new RelationshipUR.Builder(entry.getValue()).\n+                operation(PatchOperation.ADD_REPLACE).build()));\n \n         if (!incremental) {\n             originalRels.keySet().stream().filter(relationship -> !updatedRels.containsKey(relationship)).\n-                    forEach(key -> {\n-                        result.getRelationships().add(new RelationshipUR.Builder(originalRels.get(key)).\n-                                operation(PatchOperation.DELETE).build());\n-                    });\n+                    forEach(key -> result.getRelationships().add(new RelationshipUR.Builder(originalRels.get(key)).\n+                    operation(PatchOperation.DELETE).build()));\n         }\n \n         // 6. memberships\n@@ -335,11 +315,10 @@ public static UserUR diff(final UserTO updated, final UserTO original, final boo\n         });\n \n         if (!incremental) {\n-            originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership)).\n-                    forEach(key -> {\n-                        result.getMemberships().add(new MembershipUR.Builder(originalMembs.get(key).getGroupKey()).\n-                                operation(PatchOperation.DELETE).build());\n-                    });\n+            originalMembs.keySet().stream().filter(membership -> !updatedMembs.containsKey(membership))\n+                    .forEach(key -> result.getMemberships()\n+                    .add(new MembershipUR.Builder(originalMembs.get(key).getGroupKey())\n+                            .operation(PatchOperation.DELETE).build()));\n         }\n \n         return result;\n@@ -612,7 +591,7 @@ public static UserTO patch(final UserTO userTO, final UserUR userUR) {\n      */\n     public static void cleanEmptyAttrs(final AnyTO anyTO, final AnyUR anyUR) {\n         anyUR.getPlainAttrs().addAll(anyTO.getPlainAttrs().stream().\n-                filter(plainAttr -> isEmpty(plainAttr)).\n+                filter(AnyOperations::isEmpty).\n                 map(plainAttr -> new AttrPatch.Builder(new Attr.Builder(plainAttr.getSchema()).build()).\n                 operation(PatchOperation.DELETE).\n                 build()).collect(Collectors.toSet()));"},{"sha":"7aef9426751a17c9a839bd0acf2980f4231302b9","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/collections/IteratorChain.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fcollections%2FIteratorChain.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -146,9 +146,7 @@ public IteratorChain(final Iterator<? extends E>... iteratorChain) {\n      */\n     public IteratorChain(final Collection<Iterator<? extends E>> iteratorChain) {\n         super();\n-        iteratorChain.forEach(iterator -> {\n-            addIterator(iterator);\n-        });\n+        iteratorChain.forEach(this::addIterator);\n     }\n \n     //-----------------------------------------------------------------------"},{"sha":"bdc1a96e1690d66430bbd89642de3d1226f1ed88","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/AccountRuleConf.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FAccountRuleConf.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n+@FunctionalInterface\n public interface AccountRuleConf extends RuleConf {\n \n }"},{"sha":"5307f67f3bb037c91aac409f7454a56913221047","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/ComposablePolicy.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FComposablePolicy.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.List;\n \n+@FunctionalInterface\n public interface ComposablePolicy extends Serializable {\n \n     /**"},{"sha":"8556ef509c07d2ef69cd7c12843e949f87b7ecac","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/PasswordRuleConf.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPasswordRuleConf.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n+@FunctionalInterface\n public interface PasswordRuleConf extends RuleConf {\n \n }"},{"sha":"9c6e8505dec43971a61e0afe8e0108de40c35efb","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/PullCorrelationRuleConf.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullCorrelationRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullCorrelationRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPullCorrelationRuleConf.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n+@FunctionalInterface\n public interface PullCorrelationRuleConf extends RuleConf {\n \n }"},{"sha":"c19236fe96ab0bee23063dbae5891ea743aebe59","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/PushCorrelationRuleConf.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushCorrelationRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushCorrelationRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FPushCorrelationRuleConf.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.common.lib.policy;\n \n+@FunctionalInterface\n public interface PushCorrelationRuleConf extends RuleConf {\n \n }"},{"sha":"56e3c5c678e586b66083639d654dc1fbcc69370a","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/policy/RuleConf.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fpolicy%2FRuleConf.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import java.io.Serializable;\n \n+@FunctionalInterface\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n public interface RuleConf extends Serializable {\n "},{"sha":"9eb50e209639af4250f86fd2c75b9dab304cd5e6","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/report/ReportletConf.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Freport%2FReportletConf.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import com.fasterxml.jackson.annotation.JsonTypeInfo;\n import java.io.Serializable;\n \n+@FunctionalInterface\n @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n public interface ReportletConf extends Serializable {\n "},{"sha":"2e77d1e0d126f0353332de3faf95300366806e05","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/TemplatableTO.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTemplatableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTemplatableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FTemplatableTO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.Map;\n \n+@FunctionalInterface\n public interface TemplatableTO extends Serializable {\n \n     Map<String, AnyTO> getTemplates();"},{"sha":"942ce1f31833a805e865fc4c6bb22f2234c839ef","filename":"common/idrepo/lib/src/test/java/org/apache/syncope/common/lib/JAXBTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FJAXBTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -44,7 +44,7 @@ public void marshal() {\n             marshaller.marshal(new UserTO(), new StringWriter());\n             marshaller.marshal(new UserUR(), new StringWriter());\n         } catch (JAXBException e) {\n-            fail(ExceptionUtils.getStackTrace(e));\n+            fail(() -> ExceptionUtils.getStackTrace(e));\n         }\n     }\n "},{"sha":"4e1ceb295c649829282b09019111b35dd74ebb90","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/batch/BatchPayloadGenerator.java","status":"modified","additions":2,"deletions":5,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbatch%2FBatchPayloadGenerator.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -54,11 +54,8 @@ public static <T extends BatchItem> String generate(final List<T> items, final S\n             }\n \n             if (item.getHeaders() != null && !item.getHeaders().isEmpty()) {\n-                item.getHeaders().forEach((key, values) -> {\n-                    values.forEach(value -> {\n-                        payload.append(key).append(\": \").append(value).append('\\n');\n-                    });\n-                });\n+                item.getHeaders().forEach((key, values) -> values.forEach(\n+                        value -> payload.append(key).append(\": \").append(value).append('\\n')));\n                 payload.append(SyncopeConstants.CRLF);\n             }\n "},{"sha":"14bc31eea7cc0fa59241b3d7f15925f59a006c1c","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/SchemaQuery.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FSchemaQuery.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -51,9 +51,7 @@ public Builder anyTypeClass(final String anyTypeClass) {\n         }\n \n         public Builder anyTypeClasses(final Collection<String> anyTypeClasses) {\n-            anyTypeClasses.forEach(anyTypeClass -> {\n-                anyTypeClass(anyTypeClass);\n-            });\n+            anyTypeClasses.forEach(this::anyTypeClass);\n             return this;\n         }\n "},{"sha":"232601c87fd63c4c6a5cbd89fbb735d93e234c46","filename":"common/keymaster/client-zookeeper/src/test/java/org/apache/syncope/common/keymaster/client/zookeper/ZookeeperDomainOpsITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fkeymaster%2Fclient-zookeeper%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fkeymaster%2Fclient%2Fzookeper%2FZookeeperDomainOpsITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -95,8 +95,6 @@ public void crud() {\n \n     @Test\n     public void createMaster() {\n-        assertThrows(KeymasterException.class, () -> {\n-            domainOps.create(new Domain.Builder(SyncopeConstants.MASTER_DOMAIN).build());\n-        });\n+        assertThrows(KeymasterException.class, () -> domainOps.create(new Domain.Builder(SyncopeConstants.MASTER_DOMAIN).build()));\n     }\n }"},{"sha":"6a0779cdae6f3d37446ae9cd2f816c65a5d518eb","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ConnectorLogic.java","status":"modified","additions":19,"deletions":20,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FConnectorLogic.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -22,6 +22,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -73,7 +74,7 @@ public class ConnectorLogic extends AbstractTransactionalLogic<ConnInstanceTO> {\n     private ConnectorFactory connFactory;\n \n     protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = effectiveRealms.stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm));\n+        boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, ConnInstance.class.getSimpleName(), key);\n         }\n@@ -124,9 +125,7 @@ public ConnInstanceTO delete(final String key) {\n         if (!connInstance.getResources().isEmpty()) {\n             SyncopeClientException associatedResources = SyncopeClientException.build(\n                     ClientExceptionType.AssociatedResources);\n-            connInstance.getResources().forEach(resource -> {\n-                associatedResources.getElements().add(resource.getKey());\n-            });\n+            connInstance.getResources().forEach(resource -> associatedResources.getElements().add(resource.getKey()));\n             throw associatedResources;\n         }\n \n@@ -141,7 +140,7 @@ public List<ConnInstanceTO> list(final String lang) {\n         CurrentLocale.set(StringUtils.isBlank(lang) ? Locale.ENGLISH : new Locale(lang));\n \n         return connInstanceDAO.findAll().stream().\n-                filter(connInstance -> connInstance != null).\n+                filter(Objects::nonNull).\n                 map(connInstance -> {\n                     ConnInstanceTO result = null;\n                     try {\n@@ -178,25 +177,25 @@ public List<ConnBundleTO> getBundles(final String lang) {\n         }\n \n         List<ConnBundleTO> connectorBundleTOs = new ArrayList<>();\n-        connIdBundleManager.getConnInfoManagers().forEach((uri, cim) -> {\n-            connectorBundleTOs.addAll(cim.getConnectorInfos().stream().map(bundle -> {\n-                ConnBundleTO connBundleTO = new ConnBundleTO();\n-                connBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n+        connIdBundleManager.getConnInfoManagers().forEach((uri, cim) -> connectorBundleTOs.addAll(\n+                cim.getConnectorInfos().stream().map(bundle -> {\n+                    ConnBundleTO connBundleTO = new ConnBundleTO();\n+                    connBundleTO.setDisplayName(bundle.getConnectorDisplayName());\n \n-                connBundleTO.setLocation(uri.toString());\n+                    connBundleTO.setLocation(uri.toString());\n \n-                ConnectorKey key = bundle.getConnectorKey();\n-                connBundleTO.setBundleName(key.getBundleName());\n-                connBundleTO.setConnectorName(key.getConnectorName());\n-                connBundleTO.setVersion(key.getBundleVersion());\n+                    ConnectorKey key = bundle.getConnectorKey();\n+                    connBundleTO.setBundleName(key.getBundleName());\n+                    connBundleTO.setConnectorName(key.getConnectorName());\n+                    connBundleTO.setVersion(key.getBundleVersion());\n \n-                ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(bundle);\n-                connBundleTO.getProperties().addAll(properties.getPropertyNames().stream().\n-                        map(propName -> binder.build(properties.getProperty(propName))).collect(Collectors.toList()));\n+                    ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(bundle);\n+                    connBundleTO.getProperties().addAll(properties.getPropertyNames().stream().\n+                            map(propName -> binder.build(properties.getProperty(propName))).\n+                            collect(Collectors.toList()));\n \n-                return connBundleTO;\n-            }).collect(Collectors.toList()));\n-        });\n+                    return connBundleTO;\n+                }).collect(Collectors.toList())));\n \n         return connectorBundleTOs;\n     }"},{"sha":"c0059a5af961f9cf503e953af920060828bad1be","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ReconciliationLogic.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReconciliationLogic.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -139,7 +140,7 @@ private ConnObjectTO getOnResource(final Any<?> any, final Provision provision)\n \n         // 2. determine attributes to query\n         Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(provision).stream().\n-                map(virSchema -> virSchema.asLinkingMappingItem()).collect(Collectors.toSet());\n+                map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n         Iterator<MappingItem> mapItems = new IteratorChain<>(\n                 provision.getMapping().getItems().iterator(),\n                 linkinMappingItems.iterator());"},{"sha":"1e14646f555f0b3561c3df416b4043ddd198f97c","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/ResourceLogic.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FResourceLogic.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -43,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -116,7 +117,7 @@ public class ResourceLogic extends AbstractTransactionalLogic<ResourceTO> {\n     private ConnectorFactory connFactory;\n \n     protected void securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = effectiveRealms.stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm));\n+        boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, ExternalResource.class.getSimpleName(), key);\n         }\n@@ -320,7 +321,7 @@ public ConnObjectTO readConnObject(final String key, final String anyTypeKey, fi\n \n         // 3. determine attributes to query\n         Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(init.getRight()).stream().\n-                map(virSchema -> virSchema.asLinkingMappingItem()).collect(Collectors.toSet());\n+                map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n         Iterator<MappingItem> mapItems = new IteratorChain<>(\n                 init.getRight().getMapping().getItems().iterator(),\n                 linkinMappingItems.iterator());\n@@ -377,7 +378,7 @@ public Pair<SearchResult, List<ConnObjectTO>> listConnObjects(final String key,\n             init.getRight().getMapping().getItems();\n \n             Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(init.getRight()).stream().\n-                    map(virSchema -> virSchema.asLinkingMappingItem()).collect(Collectors.toSet());\n+                    map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n             Iterator<MappingItem> mapItems = new IteratorChain<>(\n                     init.getRight().getMapping().getItems().iterator(),\n                     linkinMappingItems.iterator());"},{"sha":"da9f05638f2e47f9af3103f5cb3fedeacd08f5c8","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -225,15 +225,15 @@ protected ProvisioningResult<TO> afterDelete(\n     }\n \n     protected boolean securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = effectiveRealms.stream().anyMatch(ownedRealm -> realm.startsWith(ownedRealm));\n+        boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n         if (!authorized) {\n             AnyDAO<?> anyDAO = this instanceof UserLogic\n                     ? userDAO\n                     : this instanceof GroupLogic\n                             ? groupDAO\n                             : anyObjectDAO;\n             authorized = anyDAO.findDynRealms(key).stream().\n-                    anyMatch(dynRealm -> effectiveRealms.contains(dynRealm));\n+                    anyMatch(effectiveRealms::contains);\n         }\n         if (!authorized) {\n             throw new DelegatedAdministrationException("},{"sha":"c991055bd63c6d2ea3eec1929acfebc58f4789a4","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -124,7 +124,7 @@ protected boolean securityChecks(final Set<String> effectiveRealms, final String\n                 -> realm.startsWith(ownedRealm) || ownedRealm.equals(RealmUtils.getGroupOwnerRealm(realm, key)));\n         if (!authorized) {\n             authorized = groupDAO.findDynRealms(key).stream().\n-                    anyMatch(dynRealm -> effectiveRealms.contains(dynRealm));\n+                    anyMatch(effectiveRealms::contains);\n         }\n         if (!authorized) {\n             throw new DelegatedAdministrationException(realm, AnyTypeKind.GROUP.name(), key);"},{"sha":"ae4ecaa6c163dc98106de689b5e0cd09b9729a34","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/cocoon/XSLTTransformer.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fcocoon%2FXSLTTransformer.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -111,9 +111,7 @@ private void load(final Source source, final String localCacheKey, final Map<Str\n             transformerFactory = TRAX_FACTORY;\n         } else {\n             transformerFactory = createNewSAXTransformerFactory();\n-            attributes.forEach((key, values) -> {\n-                transformerFactory.setAttribute(key, values);\n-            });\n+            attributes.forEach(transformerFactory::setAttribute);\n         }\n \n         try {"},{"sha":"9884e14769f08cd98b0737197ffed31600eb343c","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":15,"deletions":19,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -87,9 +87,7 @@ public void load(final String domain, final DataSource datasource) {\n \n         ctx.getConfiguration().getAppenders().entrySet().stream().\n                 filter(entry -> (entry.getValue() instanceof MemoryAppender)).\n-                forEach(entry -> {\n-                    memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue());\n-                });\n+                forEach(entry -> memoryAppenders.put(entry.getKey(), (MemoryAppender) entry.getValue()));\n \n         // Audit table and DataSource for the given domain\n         Appender appender = ctx.getConfiguration().getAppender(\"audit_for_\" + domain);\n@@ -112,22 +110,20 @@ public void load(final String domain, final DataSource datasource) {\n             ctx.getConfiguration().addLogger(logConf.getName(), logConf);\n \n             // SYNCOPE-1144 For each custom audit appender class add related appenders to log4j logger\n-            auditAppenders(domain).forEach(auditAppender -> {\n-                auditAppender.getEvents().stream().\n-                        map(event -> AuditLoggerName.getAuditEventLoggerName(domain, event.toLoggerName())).\n-                        forEachOrdered(domainAuditLoggerName -> {\n-                            LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n-                            boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());\n-                            if (isRootLogConf) {\n-                                eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n-                            }\n-                            addAppenderToContext(ctx, auditAppender, eventLogConf);\n-                            eventLogConf.setLevel(Level.DEBUG);\n-                            if (isRootLogConf) {\n-                                ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n-                            }\n-                        });\n-            });\n+            auditAppenders(domain).forEach(auditAppender -> auditAppender.getEvents().stream().\n+                    map(event -> AuditLoggerName.getAuditEventLoggerName(domain, event.toLoggerName())).\n+                    forEachOrdered(domainAuditLoggerName -> {\n+                        LoggerConfig eventLogConf = ctx.getConfiguration().getLoggerConfig(domainAuditLoggerName);\n+                        boolean isRootLogConf = LogManager.ROOT_LOGGER_NAME.equals(eventLogConf.getName());\n+                        if (isRootLogConf) {\n+                            eventLogConf = new LoggerConfig(domainAuditLoggerName, null, false);\n+                        }\n+                        addAppenderToContext(ctx, auditAppender, eventLogConf);\n+                        eventLogConf.setLevel(Level.DEBUG);\n+                        if (isRootLogConf) {\n+                            ctx.getConfiguration().addLogger(domainAuditLoggerName, eventLogConf);\n+                        }\n+                    }));\n \n             AuthContextUtils.callAsAdmin(domain, () -> {\n                 loggerAccessor.synchronizeLog4J(ctx);"},{"sha":"a98eefce055a36e29773ca18cf8932e7439e85f0","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -297,9 +297,7 @@ private ResponseBuilder builder(final Response response) {\n         builder.entity(response.getEntity());\n         response.getMetadata().forEach((key, value) -> {\n             if (!HttpHeaders.CONTENT_TYPE.equals(key)) {\n-                value.forEach(headerValue -> {\n-                    builder.header(key, headerValue);\n-                });\n+                value.forEach(headerValue -> builder.header(key, headerValue));\n             }\n         });\n "},{"sha":"4ed20f48bb8b2c16298ad7e5cf7ee641fbcc275c","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractServiceImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractServiceImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -224,9 +224,7 @@ protected <T extends BaseBean> PagedResult<T> buildPagedResult(\n \n         UriBuilder builder = uriInfo.getAbsolutePathBuilder();\n         MultivaluedMap<String, String> queryParams = uriInfo.getQueryParameters();\n-        queryParams.forEach((key, value) -> {\n-            builder.queryParam(key, value.toArray());\n-        });\n+        queryParams.forEach((key, value) -> builder.queryParam(key, value.toArray()));\n \n         if (result.getPage() > 1) {\n             result.setPrev(builder."},{"sha":"688a36c022fc358639e940caa1afc1412658f866","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/DomainHolder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FDomainHolder.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -24,6 +24,7 @@\n /**\n  * Holds information about domain effectively available at runtime.\n  */\n+@FunctionalInterface\n public interface DomainHolder {\n \n     Map<String, DataSource> getDomains();"},{"sha":"786d37007b0cf58785537b95e611799ee458bb7c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/SyncopeCoreLoader.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FSyncopeCoreLoader.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import javax.sql.DataSource;\n import org.springframework.core.Ordered;\n \n+@FunctionalInterface\n public interface SyncopeCoreLoader extends Ordered {\n \n     /**"},{"sha":"045f47f0295f5c1b950e5ebbde4b6cb625da56ff","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/attrvalue/validation/InvalidEntityException.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fattrvalue%2Fvalidation%2FInvalidEntityException.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -116,9 +116,8 @@ public final Map<Class<?>, Set<EntityViolationType>> getViolations() {\n     public String getMessage() {\n         StringBuilder sb = new StringBuilder();\n \n-        violations.forEach((key, value) -> {\n-            sb.append(key.getSimpleName()).append(' ').append(value.toString()).append(\", \");\n-        });\n+        violations.forEach(\n+                (key, value) -> sb.append(key.getSimpleName()).append(' ').append(value.toString()).append(\", \"));\n         sb.delete(sb.lastIndexOf(\", \"), sb.length());\n \n         return sb.toString();"},{"sha":"225458980a6d1eea97525de2432126af9eefb77e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/content/ConfParamLoader.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FConfParamLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FConfParamLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FConfParamLoader.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -20,5 +20,6 @@\n \n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n \n+@FunctionalInterface\n public interface ConfParamLoader extends SyncopeCoreLoader {\n }"},{"sha":"7f6303f578583e979036b0fb14d3ed72e4f2b2c1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/content/ContentExporter.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentExporter.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -22,6 +22,7 @@\n import javax.xml.transform.TransformerConfigurationException;\n import org.xml.sax.SAXException;\n \n+@FunctionalInterface\n public interface ContentExporter extends ContentDealer {\n \n     void export("},{"sha":"06fa2cebe74191f1176d93f33750105c88b5e829","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/content/ContentLoader.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fcontent%2FContentLoader.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -20,5 +20,6 @@\n \n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n \n+@FunctionalInterface\n public interface ContentLoader extends SyncopeCoreLoader, ContentDealer {\n }"},{"sha":"6ecf8916bed2e4ae38f560e32a5974b8de10b923","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccountRule.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccountRule.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -24,6 +24,7 @@\n /**\n  * Interface for enforcing a given account rule to user.\n  */\n+@FunctionalInterface\n public interface AccountRule {\n \n     default void setConf(AccountRuleConf conf) {"},{"sha":"ee91b7a6053a5f6885a00ffdefaf0998bec0a1d7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PasswordRule.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPasswordRule.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -24,6 +24,7 @@\n /**\n  * Interface for enforcing a given password rule to user.\n  */\n+@FunctionalInterface\n public interface PasswordRule {\n \n     default PasswordRuleConf getConf() {"},{"sha":"7c5b2d4025ceadbd3dbbd067e6a87fcb7051f776","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PullCorrelationRule.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPullCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPullCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPullCorrelationRule.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -26,6 +26,7 @@\n /**\n  * Interface for correlation rule to be evaluated during PullJob execution.\n  */\n+@FunctionalInterface\n public interface PullCorrelationRule {\n \n     default void setConf(PullCorrelationRuleConf conf) {"},{"sha":"050cdce1cc018d3165816bd89f27b344331a9fea","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PushCorrelationRule.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -26,6 +26,7 @@\n /**\n  * Interface for correlation rule to be evaluated during PushJob execution.\n  */\n+@FunctionalInterface\n public interface PushCorrelationRule {\n \n     default void setConf(PushCorrelationRuleConf conf) {"},{"sha":"83a260f6be098824e162c93f7673d2d154aca406","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/Reportlet.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FReportlet.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -28,6 +28,7 @@\n  *\n  * @see org.apache.syncope.core.persistence.api.entity.Report\n  */\n+@FunctionalInterface\n public interface Reportlet {\n \n     /**"},{"sha":"a90489ac47799aa752a3422c32ff7aae98400cd5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Entity.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FEntity.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n \n+@FunctionalInterface\n public interface Entity extends Serializable {\n \n     String getKey();"},{"sha":"98abd47fa6ccc9cd8c3e27acfb73edb2bf0889d0","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondVisitor.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondVisitor.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -252,11 +252,9 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n \n     private SearchCond visitCompount(final SearchCondition<SearchBean> sc) {\n         List<SearchCond> searchConds = new ArrayList<>();\n-        sc.getSearchConditions().forEach(searchCondition -> {\n-            searchConds.add(searchCondition.getStatement() == null\n-                    ? visitCompount(searchCondition)\n-                    : visitPrimitive(searchCondition));\n-        });\n+        sc.getSearchConditions().forEach(searchCondition -> searchConds.add(searchCondition.getStatement() == null\n+                ? visitCompount(searchCondition)\n+                : visitPrimitive(searchCondition)));\n \n         SearchCond compound;\n         switch (sc.getConditionType()) {"},{"sha":"88855a81f2fc926cf871e6ec8561021feb330273","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAJSONEntityListener.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAJSONEntityListener.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -42,7 +42,7 @@ protected void json2list(final JSONAny<A> entity, final boolean clearFirst) {\n                             attr.getUniqueValue().setAttr(attr);\n                         }\n                         return attr;\n-                    }).forEach(attr -> entity.add(attr));\n+                    }).forEach(entity::add);\n         }\n     }\n "},{"sha":"59605e63bc8fc1e31c479e4a5365a483e3315ea1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/content/XMLContentExporter.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fcontent%2FXMLContentExporter.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -312,15 +312,13 @@ private void exportTable(\n             if (tableName.equalsIgnoreCase(JPARealm.TABLE)) {\n                 List<Map<String, String>> realmRows = new ArrayList<>(rows);\n                 rows.clear();\n-                realmDAO.findAll().forEach(realm -> {\n-                    realmRows.stream().filter(row -> {\n-                        String id = row.get(\"ID\");\n-                        if (id == null) {\n-                            id = row.get(\"id\");\n-                        }\n-                        return realm.getKey().equals(id);\n-                    }).findFirst().ifPresent(row -> rows.add(row));\n-                });\n+                realmDAO.findAll().forEach(realm -> realmRows.stream().filter(row -> {\n+                    String id = row.get(\"ID\");\n+                    if (id == null) {\n+                        id = row.get(\"id\");\n+                    }\n+                    return realm.getKey().equals(id);\n+                }).findFirst().ifPresent(rows::add));\n             }\n \n             for (Map<String, String> row : rows) {"},{"sha":"ffa141f137b758a7acfb1165e8e90dfaafc1631d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":21,"deletions":26,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -472,38 +472,33 @@ public <S extends Schema> AllowedSchemas<S> findAllowedSchemas(final A any, fina\n         // schemas given by type extensions\n         Map<Group, List<? extends AnyTypeClass>> typeExtensionClasses = new HashMap<>();\n         if (any instanceof User) {\n-            ((User) any).getMemberships().forEach(memb -> {\n-                memb.getRightEnd().getTypeExtensions().forEach(typeExtension -> {\n-                    typeExtensionClasses.put(memb.getRightEnd(), typeExtension.getAuxClasses());\n-                });\n-            });\n+            ((User) any).getMemberships().forEach(\n+                    memb -> memb.getRightEnd().getTypeExtensions().forEach(\n+                            typeExtension -> typeExtensionClasses.put(\n+                                    memb.getRightEnd(), typeExtension.getAuxClasses())));\n         } else if (any instanceof AnyObject) {\n-            ((AnyObject) any).getMemberships().forEach(memb -> {\n-                memb.getRightEnd().getTypeExtensions().stream().\n-                        filter(typeExtension -> any.getType().equals(typeExtension.getAnyType())).\n-                        forEachOrdered((typeExtension) -> {\n-                            typeExtensionClasses.put(memb.getRightEnd(), typeExtension.getAuxClasses());\n-                        });\n-            });\n+            ((AnyObject) any).getMemberships().\n+                    forEach(memb -> memb.getRightEnd().getTypeExtensions().stream().\n+                    filter(typeExtension -> any.getType().equals(typeExtension.getAnyType())).\n+                    forEach(typeExtension -> typeExtensionClasses.put(\n+                    memb.getRightEnd(), typeExtension.getAuxClasses())));\n         }\n \n         typeExtensionClasses.entrySet().stream().map(entry -> {\n             result.getForMemberships().put(entry.getKey(), new HashSet<>());\n             return entry;\n-        }).forEachOrdered((entry) -> {\n-            entry.getValue().forEach(typeClass -> {\n-                if (reference.equals(PlainSchema.class)) {\n-                    result.getForMemberships().get(entry.getKey()).\n-                            addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n-                } else if (reference.equals(DerSchema.class)) {\n-                    result.getForMemberships().get(entry.getKey()).\n-                            addAll((Collection<? extends S>) typeClass.getDerSchemas());\n-                } else if (reference.equals(VirSchema.class)) {\n-                    result.getForMemberships().get(entry.getKey()).\n-                            addAll((Collection<? extends S>) typeClass.getVirSchemas());\n-                }\n-            });\n-        });\n+        }).forEachOrdered((entry) -> entry.getValue().forEach(typeClass -> {\n+            if (reference.equals(PlainSchema.class)) {\n+                result.getForMemberships().get(entry.getKey()).\n+                        addAll((Collection<? extends S>) typeClass.getPlainSchemas());\n+            } else if (reference.equals(DerSchema.class)) {\n+                result.getForMemberships().get(entry.getKey()).\n+                        addAll((Collection<? extends S>) typeClass.getDerSchemas());\n+            } else if (reference.equals(VirSchema.class)) {\n+                result.getForMemberships().get(entry.getKey()).\n+                        addAll((Collection<? extends S>) typeClass.getVirSchemas());\n+            }\n+        }));\n \n         return result;\n     }"},{"sha":"ab4c2584b16021991ea3b6fcf527450d734a3af1","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -34,6 +34,7 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n@@ -125,7 +126,7 @@ protected void securityChecks(final AnyObject anyObject) {\n                 anyMatch(realm -> anyObject.getRealm().getFullPath().startsWith(realm));\n         if (!authorized) {\n             authorized = findDynRealms(anyObject.getKey()).stream().\n-                    filter(dynRealm -> authRealms.contains(dynRealm)).\n+                    filter(authRealms::contains).\n                     count() > 0;\n         }\n         if (authRealms.isEmpty() || !authorized) {\n@@ -289,7 +290,7 @@ public List<Group> findDynGroups(final String key) {\n     public Collection<Group> findAllGroups(final AnyObject anyObject) {\n         Set<Group> result = new HashSet<>();\n         result.addAll(anyObject.getMemberships().stream().\n-                map(membership -> membership.getRightEnd()).collect(Collectors.toSet()));\n+                map(Relationship::getRightEnd).collect(Collectors.toSet()));\n         result.addAll(findDynGroups(anyObject.getKey()));\n \n         return result;\n@@ -298,7 +299,7 @@ public Collection<Group> findAllGroups(final AnyObject anyObject) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<String> findAllGroupKeys(final AnyObject anyObject) {\n-        return findAllGroups(anyObject).stream().map(group -> group.getKey()).collect(Collectors.toList());\n+        return findAllGroups(anyObject).stream().map(Entity::getKey).collect(Collectors.toList());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n@@ -314,6 +315,6 @@ public Collection<ExternalResource> findAllResources(final AnyObject anyObject)\n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return findAllResources(authFind(key)).stream().map(resource -> resource.getKey()).collect(Collectors.toList());\n+        return findAllResources(authFind(key)).stream().map(Entity::getKey).collect(Collectors.toList());\n     }\n }"},{"sha":"db705aaa2985f839666887e2552a1d0b47666ca4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":13,"deletions":22,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -35,28 +35,28 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n-import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n-import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n-import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n \n /**\n  * Search engine implementation for users, groups and any objects, based on self-updating SQL views.\n@@ -235,9 +235,7 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n     private StringBuilder buildSelect(final OrderBySupport obs) {\n         StringBuilder select = new StringBuilder(\"SELECT DISTINCT u.any_id\");\n \n-        obs.items.forEach(item -> {\n-            select.append(',').append(item.select);\n-        });\n+        obs.items.forEach(item -> select.append(',').append(item.select));\n         select.append(\" FROM \");\n \n         return select;\n@@ -303,25 +301,19 @@ private StringBuilder buildWhere(\n         StringBuilder where = new StringBuilder(\" u\");\n         processOBS(svs, involvedPlainAttrs, obs, where);\n         where.append(\" WHERE \");\n-        obs.views.forEach(searchView -> {\n-            where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \");\n-        });\n+        obs.views.forEach(searchView -> where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \"));\n \n         obs.items.stream().\n                 filter(item -> StringUtils.isNotBlank(item.where)).\n-                forEachOrdered((item) -> {\n-                    where.append(item.where).append(\" AND \");\n-                });\n+                forEachOrdered((item) -> where.append(item.where).append(\" AND \"));\n \n         return where;\n     }\n \n     private StringBuilder buildOrderBy(final OrderBySupport obs) {\n         StringBuilder orderBy = new StringBuilder();\n \n-        obs.items.forEach(item -> {\n-            orderBy.append(item.orderBy).append(',');\n-        });\n+        obs.items.forEach(item -> orderBy.append(item.orderBy).append(','));\n         if (!obs.items.isEmpty()) {\n             orderBy.insert(0, \" ORDER BY \");\n             orderBy.deleteCharAt(orderBy.length() - 1);\n@@ -795,9 +787,8 @@ protected String getQuery(\n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n         if (cond.isFromGroup()) {\n-            realmDAO.findDescendants(realm).forEach(current -> {\n-                query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n-            });\n+            realmDAO.findDescendants(realm).forEach(current -> query.append(\"realm_id=?\")\n+                    .append(setParameter(parameters, current.getKey())).append(\" OR \"));\n             query.setLength(query.length() - 4);\n         } else {\n             for (Realm current = realm; current.getParent() != null; current = current.getParent()) {"},{"sha":"41c9ffec9c636f7900d95c4826be035b6c5d0533","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAApplicationDAO.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAApplicationDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -60,9 +60,7 @@ public Application save(final Application application) {\n     @Override\n     public void delete(final Application application) {\n         application.getPrivileges().forEach(privilege -> {\n-            roleDAO.findByPrivilege(privilege).forEach(role -> {\n-                role.getPrivileges().remove(privilege);\n-            });\n+            roleDAO.findByPrivilege(privilege).forEach(role -> role.getPrivileges().remove(privilege));\n \n             privilege.setApplication(null);\n         });"},{"sha":"a78fb394ba712a93edf69c4f3057adc7884ef1e3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADerSchemaDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADerSchemaDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -47,9 +47,9 @@ public List<DerSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTy\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(JPADerSchema.class.getSimpleName()).\n                 append(\" e WHERE \");\n-        anyTypeClasses.forEach(anyTypeClass -> {\n-            queryString.append(\"e.anyTypeClass.id='\").append(anyTypeClass.getKey()).append(\"' OR \");\n-        });\n+        anyTypeClasses.forEach(anyTypeClass -> queryString.\n+                append(\"e.anyTypeClass.id='\").\n+                append(anyTypeClass.getKey()).append(\"' OR \"));\n \n         TypedQuery<DerSchema> query = entityManager().createQuery(\n                 queryString.substring(0, queryString.length() - 4), DerSchema.class);"},{"sha":"0a63f168d3229af64e4713849b02a2dac4dba452","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -75,17 +75,15 @@ public DynRealm saveAndRefreshDynMemberships(final DynRealm dynRealm) {\n \n         merged.getDynMemberships().stream().map(memb -> searchDAO.search(\n                 SearchCondConverter.convert(memb.getFIQLCond()), memb.getAnyType().getKind())).\n-                forEach(matching -> {\n-                    matching.forEach(any -> {\n-                        Query insert = entityManager().createNativeQuery(\n-                                \"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n-                        insert.setParameter(1, any.getKey());\n-                        insert.setParameter(2, merged.getKey());\n-                        insert.executeUpdate();\n-\n-                        publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n-                    });\n-                });\n+                forEach(matching -> matching.forEach(any -> {\n+                    Query insert = entityManager().createNativeQuery(\n+                            \"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n+                    insert.setParameter(1, any.getKey());\n+                    insert.setParameter(2, merged.getKey());\n+                    insert.executeUpdate();\n+\n+                    publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, any, AuthContextUtils.getDomain()));\n+                }));\n \n         return merged;\n     }"},{"sha":"a366f536547fa4c0aa1a0425ad0c2827526d7a93","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.Query;\n@@ -216,7 +217,7 @@ public void deleteMapping(final String intAttrName) {\n         Set<String> itemKeys = new HashSet<>();\n         query.getResultList().forEach(item -> itemKeys.add(item.getKey()));\n         itemKeys.stream().map(itemKey -> entityManager().find(JPAMappingItem.class, itemKey)).\n-                filter(item -> item != null).map(item -> {\n+                filter(Objects::nonNull).map(item -> {\n             item.getMapping().getItems().remove(item);\n             return item;\n         }).map(item -> {"},{"sha":"efc188c2f79e0a3c025e978ad4b829e558835d3b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -139,7 +139,7 @@ protected void securityChecks(final Group group) {\n                 || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())));\n         if (!authorized) {\n             authorized = findDynRealms(group.getKey()).stream().\n-                    filter(dynRealm -> authRealms.contains(dynRealm)).\n+                    filter(authRealms::contains).\n                     count() > 0;\n         }\n         if (authRealms.isEmpty() || !authorized) {\n@@ -172,11 +172,10 @@ public List<Group> findOwnedByUser(final String userKey) {\n             return Collections.<Group>emptyList();\n         }\n \n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(anyUtils().anyClass().getSimpleName()).\n-                append(\" e WHERE e.userOwner=:owner \");\n-        userDAO.findAllGroupKeys(owner).forEach(groupKey -> {\n-            queryString.append(\"OR e.groupOwner.id='\").append(groupKey).append(\"' \");\n-        });\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(anyUtils().anyClass().getSimpleName())\n+                .append(\" e WHERE e.userOwner=:owner \");\n+        userDAO.findAllGroupKeys(owner).forEach(groupKey -> queryString\n+                .append(\"OR e.groupOwner.id='\").append(groupKey).append(\"' \"));\n \n         TypedQuery<Group> query = entityManager().createQuery(queryString.toString(), Group.class);\n         query.setParameter(\"owner\", owner);\n@@ -372,9 +371,7 @@ public List<String> findADynMembers(final Group group) {\n                     ? (String) ((Object[]) key)[0]\n                     : ((String) key)).\n                     filter(anyObject -> !result.contains((String) anyObject)).\n-                    forEach(anyObject -> {\n-                        result.add((String) anyObject);\n-                    });\n+                    forEach(anyObject -> result.add((String) anyObject));\n         });\n \n         return result;"},{"sha":"dac7d8d371a3d82e4ebc134fc92180bdb454bc32","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPANotificationDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPANotificationDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -88,7 +88,7 @@ public void delete(final String key) {\n \n         taskDAO.findAll(\n                 TaskType.NOTIFICATION, null, notification, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n-                stream().map(Entity::getKey).forEach(task -> delete(task));\n+                stream().map(Entity::getKey).forEach(this::delete);\n \n         entityManager().remove(notification);\n     }"},{"sha":"81dee85c27fb94e5a97a00989f36c51d879804c6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -57,9 +57,9 @@ public List<PlainSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> any\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAPlainSchema.class.getSimpleName()).\n                 append(\" e WHERE \");\n-        anyTypeClasses.forEach(anyTypeClass -> {\n-            queryString.append(\"e.anyTypeClass.id='\").append(anyTypeClass.getKey()).append(\"' OR \");\n-        });\n+        anyTypeClasses.forEach(anyTypeClass -> queryString.\n+                append(\"e.anyTypeClass.id='\").\n+                append(anyTypeClass.getKey()).append(\"' OR \"));\n \n         TypedQuery<PlainSchema> query = entityManager().createQuery(\n                 queryString.substring(0, queryString.length() - 4), PlainSchema.class);\n@@ -112,9 +112,7 @@ protected void deleteAttrs(final PlainSchema schema) {\n         for (AnyTypeKind anyTypeKind : AnyTypeKind.values()) {\n             AnyUtils anyUtils = anyUtilsFactory.getInstance(anyTypeKind);\n \n-            findAttrs(schema, anyUtils.plainAttrClass()).forEach(attr -> {\n-                plainAttrDAO.delete(attr);\n-            });\n+            findAttrs(schema, anyUtils.plainAttrClass()).forEach(attr -> plainAttrDAO.delete(attr));\n         }\n     }\n "},{"sha":"1d215041c54093a094d429844d02e8636765398c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -452,9 +452,7 @@ public void delete(final String id) {\n     @Override\n     public void delete(final Task task) {\n         if (task instanceof PullTask) {\n-            remediationDAO.findByPullTask((PullTask) task).forEach(remediation -> {\n-                remediation.setPullTask(null);\n-            });\n+            remediationDAO.findByPullTask((PullTask) task).forEach(remediation -> remediation.setPullTask(null));\n         }\n \n         entityManager().remove(task);\n@@ -463,7 +461,7 @@ public void delete(final Task task) {\n     @Override\n     public void deleteAll(final ExternalResource resource, final TaskType type) {\n         findAll(type, resource, null, null, null, -1, -1, Collections.<OrderByClause>emptyList()).\n-                stream().map(Entity::getKey).forEach(task -> delete(task));\n+                stream().map(Entity::getKey).forEach(this::delete);\n     }\n \n     private <T extends Task> List<T> buildResult(final List<Object> raw) {"},{"sha":"66e878f932455c9d5bb48a53f293de24f040c3ae","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -25,6 +25,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.regex.Pattern;\n@@ -40,6 +41,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.core.persistence.api.entity.Relationship;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n@@ -162,7 +164,7 @@ protected void securityChecks(final User user) {\n                     anyMatch(realm -> user.getRealm().getFullPath().startsWith(realm));\n             if (!authorized) {\n                 authorized = findDynRealms(user.getKey()).stream().\n-                        filter(dynRealm -> authRealms.contains(dynRealm)).\n+                        filter(authRealms::contains).\n                         count() > 0;\n             }\n             if (authRealms.isEmpty() || !authorized) {\n@@ -264,15 +266,15 @@ protected List<AccountPolicy> getAccountPolicies(final User user) {\n \n         // add resource policies\n         findAllResources(user).stream().\n-                map(resource -> resource.getAccountPolicy()).\n-                filter(policy -> policy != null).\n-                forEachOrdered(policy -> policies.add(policy));\n+                map(ExternalResource::getAccountPolicy).\n+                filter(Objects::nonNull).\n+                forEachOrdered(policies::add);\n \n         // add realm policies\n         realmDAO.findAncestors(user.getRealm()).stream().\n-                map(realm -> realm.getAccountPolicy()).\n-                filter(policy -> policy != null).\n-                forEachOrdered(policy -> policies.add(policy));\n+                map(Realm::getAccountPolicy).\n+                filter(Objects::nonNull).\n+                forEachOrdered(policies::add);\n \n         return policies;\n     }\n@@ -490,7 +492,7 @@ public List<Group> findDynGroups(final String key) {\n     public Collection<Group> findAllGroups(final User user) {\n         Set<Group> result = new HashSet<>();\n         result.addAll(user.getMemberships().stream().\n-                map(membership -> membership.getRightEnd()).collect(Collectors.toSet()));\n+                map(Relationship::getRightEnd).collect(Collectors.toSet()));\n         result.addAll(findDynGroups(user.getKey()));\n \n         return result;"},{"sha":"85d0091618d851ecd9e24d793e7867c70d20675d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -59,9 +59,9 @@ public List<VirSchema> findByAnyTypeClasses(final Collection<AnyTypeClass> anyTy\n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n                 append(JPAVirSchema.class.getSimpleName()).\n                 append(\" e WHERE \");\n-        anyTypeClasses.forEach(anyTypeClass -> {\n-            queryString.append(\"e.anyTypeClass.id='\").append(anyTypeClass.getKey()).append(\"' OR \");\n-        });\n+        anyTypeClasses.forEach(anyTypeClass -> queryString.\n+                append(\"e.anyTypeClass.id='\").\n+                append(anyTypeClass.getKey()).append(\"' OR \"));\n \n         TypedQuery<VirSchema> query = entityManager().createQuery(\n                 queryString.substring(0, queryString.length() - 4), VirSchema.class);"},{"sha":"d13ca581774100f5479ad993ef010d972f8ddb56","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractPlainAttr.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractPlainAttr.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -102,7 +102,7 @@ public void add(final String value, final AnyUtils anyUtils) {\n     public List<String> getValuesAsStrings() {\n         List<String> result;\n         if (getUniqueValue() == null) {\n-            result = getValues().stream().map(value -> value.getValueAsString()).collect(Collectors.toList());\n+            result = getValues().stream().map(PlainAttrValue::getValueAsString).collect(Collectors.toList());\n         } else {\n             result = Collections.singletonList(getUniqueValue().getValueAsString());\n         }"},{"sha":"a0ad3956197fec6e4c8720de26493da05aa3ec17","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -90,7 +90,8 @@ public class JPARealm extends AbstractGeneratedKeyEntity implements Realm {\n             @JoinColumn(name = \"realm_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"resource_id\"),\n-            uniqueConstraints = @UniqueConstraint(columnNames = { \"realm_id\", \"resource_id\" }))\n+            uniqueConstraints =\n+            @UniqueConstraint(columnNames = { \"realm_id\", \"resource_id\" }))\n     private List<JPAExternalResource> resources = new ArrayList<>();\n \n     @Override\n@@ -181,7 +182,9 @@ public boolean add(final ExternalResource resource) {\n \n     @Override\n     public List<String> getResourceKeys() {\n-        return getResources().stream().map(resource -> resource.getKey()).collect(Collectors.toList());\n+        return getResources().stream().\n+                map(org.apache.syncope.core.persistence.api.entity.Entity::getKey).\n+                collect(Collectors.toList());\n     }\n \n     @Override"},{"sha":"d962da714133575b260b7935ba1f177cb5c6f10a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnyTypeTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnyTypeTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -116,8 +116,6 @@ public void delete() {\n \n     @Test\n     public void deleteInvalid() {\n-        assertThrows(IllegalArgumentException.class, () -> {\n-            anyTypeDAO.delete(anyTypeDAO.findUser().getKey());\n-        });\n+        assertThrows(IllegalArgumentException.class, () -> anyTypeDAO.delete(anyTypeDAO.findUser().getKey()));\n     }\n }"},{"sha":"896c43f9d69a44b4e19bc8d0d2fc52df1259bc9b","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/ConnInstanceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FConnInstanceTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -137,7 +137,7 @@ public void save() throws ClassNotFoundException {\n         // perform save operation\n         ConnInstance actual = connInstanceDAO.save(connInstance);\n \n-        assertNotNull(\"save did not work\", actual.getKey());\n+        assertNotNull(\"save did not work\", actual::getKey);\n \n         assertEquals(\"WebService\", actual.getConnectorName());\n "},{"sha":"b08fd3757eecb6984169347112673c4bd331464d","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/RealmTest.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FRealmTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -78,9 +79,7 @@ public void find() {\n \n     @Test\n     public void findInvalidPath() {\n-        assertThrows(MalformedPathException.class, () -> {\n-            realmDAO.findByFullPath(\"even/two\");\n-        });\n+        assertThrows(MalformedPathException.class, () -> realmDAO.findByFullPath(\"even/two\"));\n     }\n \n     @Test\n@@ -99,9 +98,7 @@ public void findAll() {\n         List<Realm> list = realmDAO.findAll();\n         assertNotNull(list);\n         assertFalse(list.isEmpty());\n-        list.forEach(realm -> {\n-            assertNotNull(realm);\n-        });\n+        list.forEach(Assertions::assertNotNull);\n     }\n \n     @Test"},{"sha":"9302f32fc7d27a113cd620e68eba2c92d03b0666","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FUserTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -283,7 +283,7 @@ public void testPasswordGenerator() {\n         try {\n             password = passwordGenerator.generate(resourceDAO.find(\"ws-target-resource-nopropagation\"));\n         } catch (InvalidPasswordRuleConf e) {\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         }\n         assertNotNull(password);\n "},{"sha":"5fe509255a73e86d4e738bdb7a28e44b8dfa08a1","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -94,9 +94,7 @@ public void searchByDynMembership() {\n \n     @Test\n     public void issueSYNCOPE95() {\n-        groupDAO.findAll(1, 100).forEach(group -> {\n-            groupDAO.delete(group.getKey());\n-        });\n+        groupDAO.findAll(1, 100).forEach(group -> groupDAO.delete(group.getKey()));\n         entityManager().flush();\n \n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);"},{"sha":"fcb024acc903416e35049f885f49f6aec340a64f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/ResourceTest.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FResourceTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -236,10 +236,8 @@ public void delete() {\n                 map(actualUser -> {\n                     assertNotNull(actualUser);\n                     return actualUser;\n-                }).forEachOrdered((actualUser) -> {\n-            userDAO.findAllResources(actualUser).\n-                    forEach(res -> assertFalse(res.getKey().equalsIgnoreCase(resource.getKey())));\n-        });\n+                }).forEachOrdered((actualUser) -> userDAO.findAllResources(actualUser).\n+                        forEach(res -> assertFalse(res.getKey().equalsIgnoreCase(resource.getKey()))));\n \n         // resource must be not referenced any more from the connector\n         ConnInstance actualConnector = connInstanceDAO.find(connector.getKey());"},{"sha":"cafc60377fdd64f5382cb2b74c40e6e9eadf696c","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/PropagationByResource.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FPropagationByResource.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -274,9 +274,7 @@ public final Set<String> get(final ResourceOperation type) {\n     public Map<String, ResourceOperation> asMap() {\n         Map<String, ResourceOperation> result = new HashMap<>();\n         Stream.of(ResourceOperation.values()).\n-                forEach(operation -> get(operation).forEach(resource -> {\n-            result.put(resource, operation);\n-        }));\n+                forEach(operation -> get(operation).forEach(resource -> result.put(resource, operation)));\n \n         return result;\n     }"},{"sha":"f43aef3e8f8fc71ba409fdf4eac303c2d1170086","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/cache/VirAttrCacheValue.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fcache%2FVirAttrCacheValue.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -54,9 +54,7 @@ public void setValues(final Collection<Object> values) {\n         this.values.clear();\n \n         if (values != null) {\n-            values.forEach(value -> {\n-                this.values.add(value.toString());\n-            });\n+            values.forEach(value -> this.values.add(value.toString()));\n         }\n     }\n "},{"sha":"11d4e6c57a46e9819f87bb887a05d641b0704aa5","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/RemediationDataBinder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRemediationDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRemediationDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FRemediationDataBinder.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.common.lib.to.RemediationTO;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n \n+@FunctionalInterface\n public interface RemediationDataBinder {\n \n     RemediationTO getRemediationTO(Remediation remediation);"},{"sha":"6b3cef3cb2f68b50c7b89349c36389c41a56c27f","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/notification/RecipientsProvider.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FRecipientsProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FRecipientsProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fnotification%2FRecipientsProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,6 +21,7 @@\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n \n+@FunctionalInterface\n public interface RecipientsProvider {\n \n     Set<String> provideRecipients(Notification notification);"},{"sha":"591303689c22fbecb763ac3fb617915e8a5ab42a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePullExecutor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePullExecutor.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.quartz.JobExecutionException;\n \n+@FunctionalInterface\n public interface SyncopeSinglePullExecutor {\n \n     List<ProvisioningReport> pull("},{"sha":"1f8c344779cd5375e5a8b1395fcffd91354a602a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/pushpull/SyncopeSinglePushExecutor.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fpushpull%2FSyncopeSinglePushExecutor.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.core.provisioning.api.Connector;\n import org.quartz.JobExecutionException;\n \n+@FunctionalInterface\n public interface SyncopeSinglePushExecutor {\n \n     List<ProvisioningReport> push("},{"sha":"603553fa855025d79a07f5a8ed32e3ca9cdc0904","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/FormatUtils.java","status":"modified","additions":2,"deletions":7,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FFormatUtils.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -32,13 +32,8 @@\n  */\n public final class FormatUtils {\n \n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n-\n-        @Override\n-        protected SimpleDateFormat initialValue() {\n-            return new SimpleDateFormat();\n-        }\n-    };\n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT =\n+        ThreadLocal.withInitial(() -> new SimpleDateFormat());\n \n     private static final ThreadLocal<DecimalFormat> DECIMAL_FORMAT = new ThreadLocal<DecimalFormat>() {\n "},{"sha":"66c308c1066aa3d0a8037f8fcd64c635fd0ea7c7","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/RealmUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -67,7 +67,7 @@ private static class StartsWithPredicate implements Predicate<String> {\n \n         @Override\n         public boolean test(final String realm) {\n-            return targets.stream().anyMatch(target -> realm.startsWith(target));\n+            return targets.stream().anyMatch(realm::startsWith);\n         }\n \n     }"},{"sha":"a814b2b87a27f525de4b7878668fff4840dae422","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnIdBundleManagerImpl.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnIdBundleManagerImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -215,11 +215,8 @@ public Map<URI, ConnectorInfoManager> getConnManagers() {\n             connInfoManagers.entrySet().stream().map(entry -> {\n                 LOG.debug(\"Connector bundles found at {}\", entry.getKey());\n                 return entry;\n-            }).forEachOrdered(entry -> {\n-                entry.getValue().getConnectorInfos().forEach(connInfo -> {\n-                    LOG.debug(\"\\t{}\", connInfo.getConnectorDisplayName());\n-                });\n-            });\n+            }).forEach(entry -> entry.getValue().getConnectorInfos().forEach(\n+                    connInfo -> LOG.debug(\"\\t{}\", connInfo.getConnectorDisplayName())));\n         }\n \n         return connInfoManagers;\n@@ -278,12 +275,10 @@ public ConfigurationProperties getConfigurationProperties(final ConnectorInfo in\n         }\n \n         if (LOG.isDebugEnabled()) {\n-            properties.getPropertyNames().forEach(propName -> {\n-                LOG.debug(\"Property Name: {}\"\n-                        + \"\\nProperty Type: {}\",\n-                        properties.getProperty(propName).getName(),\n-                        properties.getProperty(propName).getType());\n-            });\n+            properties.getPropertyNames().forEach(propName -> LOG.debug(\"Property Name: {}\"\n+                    + \"\\nProperty Type: {}\",\n+                    properties.getProperty(propName).getName(),\n+                    properties.getProperty(propName).getType()));\n         }\n \n         return properties;"},{"sha":"9c0b1cb773583e5699993d77faec97650e6e7886","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ConnectorFacadeProxy.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FConnectorFacadeProxy.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -62,6 +62,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ClassUtils;\n+import org.springframework.util.CollectionUtils;\n \n public class ConnectorFacadeProxy implements Connector {\n \n@@ -109,11 +110,10 @@ public ConnectorFacadeProxy(final ConnInstance connInstance) {\n         // set connector configuration according to conninstance's\n         ConfigurationProperties properties = apiConfig.getConfigurationProperties();\n         connInstance.getConf().stream().\n-                filter(property -> (property.getValues() != null && !property.getValues().isEmpty())).\n-                forEachOrdered(property -> {\n-                    properties.setPropertyValue(property.getSchema().getName(),\n-                            getPropertyValue(property.getSchema().getType(), property.getValues()));\n-                });\n+                filter(property -> !CollectionUtils.isEmpty(property.getValues())).\n+                forEach(property -> properties.setPropertyValue(\n+                property.getSchema().getName(),\n+                getPropertyValue(property.getSchema().getType(), property.getValues())));\n \n         // set pooling configuration (if supported) according to conninstance's\n         if (connInstance.getPoolConf() != null) {"},{"sha":"f43ce9390704daf10bc6bfae5ec56c86335cccdb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":10,"deletions":14,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -151,21 +151,17 @@ public List<PropagationStatus> delete(\n         // Generate propagation tasks for deleting users and any objects from group resources, \n         // if they are on those resources only because of the reason being deleted (see SYNCOPE-357)\n         groupDataBinder.findUsersWithTransitiveResources(key).entrySet().\n-                forEach(entry -> {\n-                    taskInfos.addAll(propagationManager.getDeleteTasks(\n-                            AnyTypeKind.USER,\n-                            entry.getKey(),\n-                            entry.getValue(),\n-                            excludedResources));\n-                });\n+                forEach(entry -> taskInfos.addAll(propagationManager.getDeleteTasks(\n+                        AnyTypeKind.USER,\n+                        entry.getKey(),\n+                        entry.getValue(),\n+                        excludedResources)));\n         groupDataBinder.findAnyObjectsWithTransitiveResources(key).entrySet().\n-                forEach(entry -> {\n-                    taskInfos.addAll(propagationManager.getDeleteTasks(\n-                            AnyTypeKind.ANY_OBJECT,\n-                            entry.getKey(),\n-                            entry.getValue(),\n-                            excludedResources));\n-                });\n+                forEach(entry -> taskInfos.addAll(propagationManager.getDeleteTasks(\n+                        AnyTypeKind.ANY_OBJECT,\n+                        entry.getKey(),\n+                        entry.getValue(),\n+                        excludedResources)));\n \n         // Generate propagation tasks for deleting this group from resources\n         taskInfos.addAll(propagationManager.getDeleteTasks("},{"sha":"921ee50cf6f76bde9405368bc35c7a79efa13cd5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -25,6 +25,7 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n@@ -807,7 +808,7 @@ public void setIntValues(final Item mapItem, final Attribute attr, final AnyTO a\n                     // virtual attributes don't get transformed, iterate over original attr.getValue()\n                     if (attr.getValue() != null && !attr.getValue().isEmpty()) {\n                         attr.getValue().stream().\n-                                filter(value -> value != null).\n+                                filter(Objects::nonNull).\n                                 forEachOrdered(value -> attrTO.getValues().add(value.toString()));\n                     }\n "},{"sha":"446bf83760d35bee85ed0222750f14dff2c30b4d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandlerImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandlerImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -109,7 +109,7 @@ private Map<VirSchema, List<String>> getValues(final Any<?> any, final Set<VirSc\n                 Set<MappingItem> linkingMappingItems = new HashSet<>();\n                 linkingMappingItems.add(connObjectKeyItem.get());\n                 linkingMappingItems.addAll(schemasToRead.stream().\n-                        map(schema -> schema.asLinkingMappingItem()).collect(Collectors.toSet()));\n+                        map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet()));\n \n                 Connector connector = connFactory.getConnector(provision.getResource());\n                 try {"},{"sha":"04e472a6e449937a0310e9287a10dffa467fd4ef","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":170,"deletions":178,"changes":348,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,26 +18,16 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.text.ParseException;\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Optional;\n-import java.util.Set;\n-import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n import org.apache.syncope.common.lib.request.AttrPatch;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n@@ -88,6 +78,17 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n \n+import java.text.ParseException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n+import java.util.Set;\n+import java.util.stream.Collectors;\n+\n abstract class AbstractAnyDataBinder {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractAnyDataBinder.class);\n@@ -169,19 +170,19 @@ protected PlainSchema getPlainSchema(final String schemaName) {\n     }\n \n     private void fillAttr(\n-            final List<String> values,\n-            final AnyUtils anyUtils,\n-            final PlainSchema schema,\n-            final PlainAttr<?> attr,\n-            final SyncopeClientException invalidValues) {\n+        final List<String> values,\n+        final AnyUtils anyUtils,\n+        final PlainSchema schema,\n+        final PlainAttr<?> attr,\n+        final SyncopeClientException invalidValues) {\n \n         // if schema is multivalue, all values are considered for addition;\n         // otherwise only the fist one - if provided - is considered\n         List<String> valuesProvided = schema.isMultivalue()\n-                ? values\n-                : (values.isEmpty()\n-                ? Collections.<String>emptyList()\n-                : Collections.singletonList(values.get(0)));\n+            ? values\n+            : (values.isEmpty()\n+            ? Collections.<String>emptyList()\n+            : Collections.singletonList(values.get(0)));\n \n         valuesProvided.forEach(value -> {\n             if (StringUtils.isBlank(value)) {\n@@ -191,8 +192,8 @@ private void fillAttr(\n                     attr.add(value, anyUtils);\n                 } catch (InvalidPlainAttrValueException e) {\n                     String valueToPrint = value.length() > 40\n-                            ? value.substring(0, 20) + \"...\"\n-                            : value;\n+                        ? value.substring(0, 20) + \"...\"\n+                        : value;\n                     LOG.warn(\"Invalid value for attribute \" + schema.getKey() + \": \" + valueToPrint, e);\n \n                     invalidValues.getElements().add(schema.getKey() + \": \" + valueToPrint + \" - \" + e.getMessage());\n@@ -213,13 +214,13 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n             }\n             if (intAttrName != null && intAttrName.getSchema() != null) {\n                 AttrSchemaType schemaType = intAttrName.getSchema() instanceof PlainSchema\n-                        ? ((PlainSchema) intAttrName.getSchema()).getType()\n-                        : AttrSchemaType.String;\n+                    ? ((PlainSchema) intAttrName.getSchema()).getType()\n+                    : AttrSchemaType.String;\n \n                 Pair<AttrSchemaType, List<PlainAttrValue>> intValues =\n-                        mappingManager.getIntValues(provision, mapItem, intAttrName, schemaType, any);\n+                    mappingManager.getIntValues(provision, mapItem, intAttrName, schemaType, any);\n                 if (intValues.getRight().isEmpty()\n-                        && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n+                    && JexlUtils.evaluateMandatoryCondition(mapItem.getMandatoryCondition(), any)) {\n \n                     missingAttrNames.add(mapItem.getIntAttrName());\n                 }\n@@ -230,7 +231,7 @@ private List<String> evaluateMandatoryCondition(final Provision provision, final\n     }\n \n     private SyncopeClientException checkMandatoryOnResources(\n-            final Any<?> any, final Collection<? extends ExternalResource> resources) {\n+        final Any<?> any, final Collection<? extends ExternalResource> resources) {\n \n         SyncopeClientException reqValMissing = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n \n@@ -250,14 +251,14 @@ private SyncopeClientException checkMandatoryOnResources(\n     }\n \n     private void checkMandatory(\n-            final PlainSchema schema,\n-            final PlainAttr<?> attr,\n-            final Any<?> any,\n-            final SyncopeClientException reqValMissing) {\n+        final PlainSchema schema,\n+        final PlainAttr<?> attr,\n+        final Any<?> any,\n+        final SyncopeClientException reqValMissing) {\n \n         if (attr == null\n-                && !schema.isReadonly()\n-                && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)) {\n+            && !schema.isReadonly()\n+            && JexlUtils.evaluateMandatoryCondition(schema.getMandatoryCondition(), any)) {\n \n             LOG.error(\"Mandatory schema \" + schema.getKey() + \" not provided with values\");\n \n@@ -270,41 +271,41 @@ private SyncopeClientException checkMandatory(final Any<?> any, final AnyUtils a\n \n         // Check if there is some mandatory schema defined for which no value has been provided\n         AllowedSchemas<PlainSchema> allowedPlainSchemas = anyUtils.dao().findAllowedSchemas(any, PlainSchema.class);\n-        allowedPlainSchemas.getForSelf().forEach(schema -> {\n-            checkMandatory(schema, any.getPlainAttr(schema.getKey()).orElse(null), any, reqValMissing);\n-        });\n+        allowedPlainSchemas.getForSelf()\n+            .forEach(schema -> checkMandatory(schema, any.getPlainAttr(schema.getKey())\n+                .orElse(null), any, reqValMissing));\n         if (any instanceof GroupableRelatable) {\n             allowedPlainSchemas.getForMemberships().forEach((group, schemas) -> {\n                 GroupableRelatable<?, ?, ?, ?, ?> groupable = GroupableRelatable.class.cast(any);\n                 Membership<?> membership = groupable.getMembership(group.getKey()).orElse(null);\n-                schemas.forEach(schema -> {\n-                    checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership).orElse(null),\n-                            any, reqValMissing);\n-                });\n+                schemas\n+                    .forEach(schema -> checkMandatory(schema, groupable.getPlainAttr(schema.getKey(), membership)\n+                            .orElse(null),\n+                        any, reqValMissing));\n             });\n         }\n \n         return reqValMissing;\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     protected void processAttrPatch(\n-            final Any any,\n-            final AttrPatch patch,\n-            final PlainSchema schema,\n-            final PlainAttr<?> attr,\n-            final AnyUtils anyUtils,\n-            final Collection<ExternalResource> resources,\n-            final PropagationByResource propByRes,\n-            final SyncopeClientException invalidValues) {\n+        final Any any,\n+        final AttrPatch patch,\n+        final PlainSchema schema,\n+        final PlainAttr<?> attr,\n+        final AnyUtils anyUtils,\n+        final Collection<ExternalResource> resources,\n+        final PropagationByResource propByRes,\n+        final SyncopeClientException invalidValues) {\n \n         switch (patch.getOperation()) {\n             case ADD_REPLACE:\n                 // 1.1 remove values\n                 if (attr.getSchema().isUniqueConstraint()) {\n                     if (attr.getUniqueValue() != null\n-                            && !patch.getAttr().getValues().isEmpty()\n-                            && !patch.getAttr().getValues().get(0).equals(attr.getUniqueValue().getValueAsString())) {\n+                        && !patch.getAttr().getValues().isEmpty()\n+                        && !patch.getAttr().getValues().get(0).equals(attr.getUniqueValue().getValueAsString())) {\n \n                         plainAttrValueDAO.deleteAll(attr, anyUtils);\n                     }\n@@ -315,8 +316,8 @@ protected void processAttrPatch(\n                 // 1.2 add values\n                 List<String> valuesToBeAdded = patch.getAttr().getValues();\n                 if (!valuesToBeAdded.isEmpty()\n-                        && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null\n-                        || !valuesToBeAdded.get(0).equals(attr.getUniqueValue().getValueAsString()))) {\n+                    && (!schema.isUniqueConstraint() || attr.getUniqueValue() == null\n+                    || !valuesToBeAdded.get(0).equals(attr.getUniqueValue().getValueAsString()))) {\n \n                     fillAttr(valuesToBeAdded, anyUtils, schema, attr, invalidValues);\n                 }\n@@ -334,28 +335,26 @@ protected void processAttrPatch(\n         }\n \n         resources.stream().\n-                filter(resource -> resource.getProvision(any.getType()).isPresent()\n+            filter(resource -> resource.getProvision(any.getType()).isPresent()\n                 && resource.getProvision(any.getType()).get().getMapping() != null).\n-                forEach(resource -> {\n-                    MappingUtils.getPropagationItems(\n-                            resource.getProvision(any.getType()).get().getMapping().getItems()).stream().\n-                            filter(item -> (schema.getKey().equals(item.getIntAttrName()))).\n-                            forEach(item -> {\n-                                propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-\n-                                if (item.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n-                                    propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n-                                }\n-                            });\n-                });\n+            forEach(resource -> MappingUtils.getPropagationItems(\n+                resource.getProvision(any.getType()).get().getMapping().getItems()).stream().\n+                filter(item -> (schema.getKey().equals(item.getIntAttrName()))).\n+                forEach(item -> {\n+                    propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n+\n+                    if (item.isConnObjectKey() && !attr.getValuesAsStrings().isEmpty()) {\n+                        propByRes.addOldConnObjectKey(resource.getKey(), attr.getValuesAsStrings().get(0));\n+                    }\n+                }));\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     protected PropagationByResource fill(\n-            final Any any,\n-            final AnyUR anyUR,\n-            final AnyUtils anyUtils,\n-            final SyncopeClientCompositeException scce) {\n+        final Any any,\n+        final AnyUR anyUR,\n+        final AnyUtils anyUtils,\n+        final SyncopeClientCompositeException scce) {\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n@@ -402,11 +401,11 @@ protected PropagationByResource fill(\n \n         // 3. plain attributes\n         anyUR.getPlainAttrs().stream().\n-                filter(patch -> patch.getAttr() != null).forEach(patch -> {\n+            filter(patch -> patch.getAttr() != null).forEach(patch -> {\n             PlainSchema schema = getPlainSchema(patch.getAttr().getSchema());\n             if (schema == null) {\n                 LOG.debug(\"Invalid \" + PlainSchema.class.getSimpleName() + \" {}, ignoring...\",\n-                        patch.getAttr().getSchema());\n+                    patch.getAttr().getSchema());\n             } else {\n                 PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n                 if (attr == null) {\n@@ -441,48 +440,48 @@ protected PropagationByResource fill(\n         return propByRes;\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     protected void fill(\n-            final Any any,\n-            final AnyCR anyCR,\n-            final AnyUtils anyUtils,\n-            final SyncopeClientCompositeException scce) {\n+        final Any any,\n+        final AnyCR anyCR,\n+        final AnyUtils anyUtils,\n+        final SyncopeClientCompositeException scce) {\n \n         // 0. aux classes\n         any.getAuxClasses().clear();\n         anyCR.getAuxClasses().stream().\n-                map(className -> anyTypeClassDAO.find(className)).\n-                forEachOrdered(auxClass -> {\n-                    if (auxClass == null) {\n-                        LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", auxClass);\n-                    } else {\n-                        any.add(auxClass);\n-                    }\n-                });\n+            map(className -> anyTypeClassDAO.find(className)).\n+            forEachOrdered(auxClass -> {\n+                if (auxClass == null) {\n+                    LOG.debug(\"Invalid \" + AnyTypeClass.class.getSimpleName() + \" {}, ignoring...\", auxClass);\n+                } else {\n+                    any.add(auxClass);\n+                }\n+            });\n \n         // 1. attributes\n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         anyCR.getPlainAttrs().stream().\n-                filter(attrTO -> !attrTO.getValues().isEmpty()).\n-                forEach(attrTO -> {\n-                    PlainSchema schema = getPlainSchema(attrTO.getSchema());\n-                    if (schema != null) {\n-                        PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n-                        if (attr == null) {\n-                            attr = anyUtils.newPlainAttr();\n-                            ((PlainAttr) attr).setOwner(any);\n-                            attr.setSchema(schema);\n-                        }\n-                        fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n-\n-                        if (attr.getValuesAsStrings().isEmpty()) {\n-                            attr.setOwner(null);\n-                        } else {\n-                            any.add(attr);\n-                        }\n+            filter(attrTO -> !attrTO.getValues().isEmpty()).\n+            forEach(attrTO -> {\n+                PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                if (schema != null) {\n+                    PlainAttr<?> attr = (PlainAttr<?>) any.getPlainAttr(schema.getKey()).orElse(null);\n+                    if (attr == null) {\n+                        attr = anyUtils.newPlainAttr();\n+                        ((PlainAttr) attr).setOwner(any);\n+                        attr.setSchema(schema);\n                     }\n-                });\n+                    fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n+\n+                    if (attr.getValuesAsStrings().isEmpty()) {\n+                        attr.setOwner(null);\n+                    } else {\n+                        any.add(attr);\n+                    }\n+                }\n+            });\n \n         if (!invalidValues.isEmpty()) {\n             scce.addException(invalidValues);\n@@ -509,107 +508,100 @@ protected void fill(\n         }\n     }\n \n-    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    @SuppressWarnings({\"unchecked\", \"rawtypes\"})\n     protected void fill(\n-            final Any any,\n-            final Membership membership,\n-            final MembershipTO membershipTO,\n-            final AnyUtils anyUtils,\n-            final SyncopeClientCompositeException scce) {\n+        final Any any,\n+        final Membership membership,\n+        final MembershipTO membershipTO,\n+        final AnyUtils anyUtils,\n+        final SyncopeClientCompositeException scce) {\n \n         SyncopeClientException invalidValues = SyncopeClientException.build(ClientExceptionType.InvalidValues);\n \n         membershipTO.getPlainAttrs().stream().\n-                filter(attrTO -> !attrTO.getValues().isEmpty()).\n-                forEach(attrTO -> {\n-                    PlainSchema schema = getPlainSchema(attrTO.getSchema());\n-                    if (schema != null) {\n-                        GroupablePlainAttr attr = (GroupablePlainAttr) GroupableRelatable.class.cast(any).\n-                                getPlainAttr(schema.getKey(), membership).orElse(null);\n-                        if (attr == null) {\n-                            attr = anyUtils.newPlainAttr();\n-                            attr.setOwner(any);\n-                            attr.setMembership(membership);\n-                            attr.setSchema(schema);\n-                        }\n-                        fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n-\n-                        if (attr.getValuesAsStrings().isEmpty()) {\n-                            attr.setOwner(null);\n-                        } else {\n-                            any.add(attr);\n-                        }\n+            filter(attrTO -> !attrTO.getValues().isEmpty()).\n+            forEach(attrTO -> {\n+                PlainSchema schema = getPlainSchema(attrTO.getSchema());\n+                if (schema != null) {\n+                    GroupablePlainAttr attr = (GroupablePlainAttr) GroupableRelatable.class.cast(any).\n+                        getPlainAttr(schema.getKey(), membership).orElse(null);\n+                    if (attr == null) {\n+                        attr = anyUtils.newPlainAttr();\n+                        attr.setOwner(any);\n+                        attr.setMembership(membership);\n+                        attr.setSchema(schema);\n                     }\n-                });\n+                    fillAttr(attrTO.getValues(), anyUtils, schema, attr, invalidValues);\n+\n+                    if (attr.getValuesAsStrings().isEmpty()) {\n+                        attr.setOwner(null);\n+                    } else {\n+                        any.add(attr);\n+                    }\n+                }\n+            });\n \n         if (!invalidValues.isEmpty()) {\n             scce.addException(invalidValues);\n         }\n     }\n \n     protected void fillTO(\n-            final AnyTO anyTO,\n-            final String realmFullPath,\n-            final Collection<? extends AnyTypeClass> auxClasses,\n-            final Collection<? extends PlainAttr<?>> plainAttrs,\n-            final Map<DerSchema, String> derAttrs,\n-            final Map<VirSchema, List<String>> virAttrs,\n-            final Collection<? extends ExternalResource> resources,\n-            final boolean details) {\n+        final AnyTO anyTO,\n+        final String realmFullPath,\n+        final Collection<? extends AnyTypeClass> auxClasses,\n+        final Collection<? extends PlainAttr<?>> plainAttrs,\n+        final Map<DerSchema, String> derAttrs,\n+        final Map<VirSchema, List<String>> virAttrs,\n+        final Collection<? extends ExternalResource> resources,\n+        final boolean details) {\n \n         anyTO.setRealm(realmFullPath);\n \n         anyTO.getAuxClasses().addAll(auxClasses.stream().map(Entity::getKey).collect(Collectors.toList()));\n \n-        plainAttrs.forEach(plainAttr -> {\n-            anyTO.getPlainAttrs().add(new Attr.Builder(plainAttr.getSchema().getKey()).\n-                    values(plainAttr.getValuesAsStrings()).build());\n-        });\n \n-        derAttrs.forEach((schema, value) -> {\n-            anyTO.getDerAttrs().add(new Attr.Builder(schema.getKey()).value(value).build());\n-        });\n+        plainAttrs\n+            .forEach(plainAttr -> anyTO.getPlainAttrs().add(new Attr.Builder(plainAttr.getSchema().getKey())\n+                .values(plainAttr.getValuesAsStrings()).build()));\n \n-        virAttrs.forEach((schema, values) -> {\n-            anyTO.getVirAttrs().add(new Attr.Builder(schema.getKey()).values(values).build());\n-        });\n+        derAttrs.forEach((schema, value) -> anyTO.getDerAttrs()\n+            .add(new Attr.Builder(schema.getKey()).value(value).build()));\n+\n+        virAttrs.forEach((schema, values) -> anyTO.getVirAttrs()\n+            .add(new Attr.Builder(schema.getKey()).values(values).build()));\n \n         anyTO.getResources().addAll(resources.stream().map(Entity::getKey).collect(Collectors.toSet()));\n     }\n \n     protected RelationshipTO getRelationshipTO(final String relationshipType, final AnyObject otherEnd) {\n         return new RelationshipTO.Builder().\n-                type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).\n-                build();\n+            type(relationshipType).otherEnd(otherEnd.getType().getKey(), otherEnd.getKey(), otherEnd.getName()).\n+            build();\n     }\n \n     protected MembershipTO getMembershipTO(\n-            final Collection<? extends PlainAttr<?>> plainAttrs,\n-            final Map<DerSchema, String> derAttrs,\n-            final Map<VirSchema, List<String>> virAttrs,\n-            final Membership<? extends Any<?>> membership) {\n-\n-        MembershipTO membershipTO = new MembershipTO.Builder(membership.getRightEnd().getKey()).\n-                groupName(membership.getRightEnd().getName()).\n-                build();\n-\n-        plainAttrs.forEach(plainAttr -> {\n-            membershipTO.getPlainAttrs().add(new Attr.Builder(plainAttr.getSchema().getKey()).\n-                    values(plainAttr.getValuesAsStrings()).\n-                    build());\n-        });\n+        final Collection<? extends PlainAttr<?>> plainAttrs,\n+        final Map<DerSchema, String> derAttrs,\n+        final Map<VirSchema, List<String>> virAttrs,\n+        final Membership<? extends Any<?>> membership) {\n \n-        derAttrs.forEach((schema, value) -> {\n-            membershipTO.getDerAttrs().add(new Attr.Builder(schema.getKey()).\n-                    value(value).\n-                    build());\n-        });\n+        MembershipTO membershipTO = new MembershipTO.Builder(membership.getRightEnd().getKey())\n+            .groupName(membership.getRightEnd().getName())\n+            .build();\n \n-        virAttrs.forEach((schema, values) -> {\n-            membershipTO.getVirAttrs().add(new Attr.Builder(schema.getKey()).\n-                    values(values).\n-                    build());\n-        });\n+        plainAttrs.forEach(plainAttr -> membershipTO.getPlainAttrs()\n+            .add(new Attr.Builder(plainAttr.getSchema().getKey())\n+                .values(plainAttr.getValuesAsStrings()).\n+                    build()));\n+\n+        derAttrs.forEach((schema, value) -> membershipTO.getDerAttrs().add(new Attr.Builder(schema.getKey()).\n+            value(value).\n+            build()));\n+\n+        virAttrs.forEach((schema, values) -> membershipTO.getVirAttrs().add(new Attr.Builder(schema.getKey()).\n+            values(values).\n+            build()));\n \n         return membershipTO;\n     }\n@@ -618,16 +610,16 @@ protected Map<String, String> getConnObjectKeys(final Any<?> any, final AnyUtils\n         Map<String, String> connObjectKeys = new HashMap<>();\n \n         anyUtils.getAllResources(any).\n-                forEach(resource -> resource.getProvision(any.getType()).\n+            forEach(resource -> resource.getProvision(any.getType()).\n                 filter(provision -> provision.getMapping() != null).\n                 ifPresent(provision -> {\n                     MappingItem connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision).\n-                            orElseThrow(() -> new NotFoundException(\n+                        orElseThrow(() -> new NotFoundException(\n                             \"ConnObjectKey mapping for \" + any.getType().getKey() + \" \" + any.getKey()\n-                            + \" on resource '\" + resource.getKey() + \"'\"));\n+                                + \" on resource '\" + resource.getKey() + \"'\"));\n \n                     mappingManager.getConnObjectKeyValue(any, provision).\n-                            ifPresent(value -> connObjectKeys.put(resource.getKey(), value));\n+                        ifPresent(value -> connObjectKeys.put(resource.getKey(), value));\n                 }));\n \n         return connObjectKeys;"},{"sha":"343dd8416d1a81059f3758b603a9ce473bf90914","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -84,9 +84,7 @@ public Pair<String, Date> generateJWT(\n         jwtClaims.setIssuer(jwtIssuer);\n         jwtClaims.setExpiryTime(expiryTime);\n         jwtClaims.setNotBefore(currentTime);\n-        claims.forEach((key, value) -> {\n-            jwtClaims.setClaim(key, value);\n-        });\n+        claims.forEach(jwtClaims::setClaim);\n \n         JwsHeaders jwsHeaders = new JwsHeaders(JoseType.JWT, jwsSignatureProvider.getAlgorithm());\n         JwtToken token = new JwtToken(jwsHeaders, jwtClaims);"},{"sha":"4341e875bbe2214b85393aede82b9c752276f560","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":25,"deletions":40,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -111,13 +111,11 @@ public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean detai\n \n             // memberships\n             anyObjectTO.getMemberships().addAll(\n-                    anyObject.getMemberships().stream().map(membership -> {\n-                        return getMembershipTO(\n-                                anyObject.getPlainAttrs(membership),\n-                                derAttrHandler.getValues(anyObject, membership),\n-                                virAttrHandler.getValues(anyObject, membership),\n-                                membership);\n-                    }).collect(Collectors.toList()));\n+                    anyObject.getMemberships().stream().map(membership -> getMembershipTO(\n+                    anyObject.getPlainAttrs(membership),\n+                    derAttrHandler.getValues(anyObject, membership),\n+                    virAttrHandler.getValues(anyObject, membership),\n+                    membership)).collect(Collectors.toList()));\n \n             // dynamic memberships\n             anyObjectTO.getDynMemberships().addAll(\n@@ -317,17 +315,16 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         Collection<ExternalResource> resources = anyObjectDAO.findAllResources(anyObject);\n \n         Map<String, Set<String>> reasons = new HashMap<>();\n-        anyObject.getResources().forEach(resource -> {\n-            reasons.put(resource.getKey(), new HashSet<>(Collections.singleton(anyObject.getKey())));\n-        });\n-        anyObjectDAO.findAllGroupKeys(anyObject).forEach(group -> {\n-            groupDAO.findAllResourceKeys(group).forEach(resource -> {\n-                if (!reasons.containsKey(resource)) {\n-                    reasons.put(resource, new HashSet<>());\n-                }\n-                reasons.get(resource).add(group);\n-            });\n-        });\n+        anyObject.getResources().forEach(\n+                resource -> reasons.put(resource.getKey(),\n+                        new HashSet<>(Collections.singleton(anyObject.getKey()))));\n+        anyObjectDAO.findAllGroupKeys(anyObject).forEach(\n+                group -> groupDAO.findAllResourceKeys(group).forEach(resource -> {\n+                    if (!reasons.containsKey(resource)) {\n+                        reasons.put(resource, new HashSet<>());\n+                    }\n+                    reasons.get(resource).add(group);\n+                }));\n \n         Set<String> toBeDeprovisioned = new HashSet<>();\n         Set<String> toBeProvisioned = new HashSet<>();\n@@ -349,7 +346,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n \n                 if (membPatch.getOperation() == PatchOperation.DELETE) {\n                     groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()).stream().\n-                            filter(resource -> reasons.containsKey(resource)).\n+                            filter(reasons::containsKey).\n                             forEach(resource -> {\n                                 reasons.get(resource).remove(membership.getRightEnd().getKey());\n                                 toBeProvisioned.add(resource);\n@@ -438,31 +435,19 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         // finally check if any resource assignment is to be processed due to dynamic group membership change\n         dynGroupMembs.getLeft().stream().\n                 filter(group -> !dynGroupMembs.getRight().contains(group)).\n-                forEach(delete -> {\n-                    groupDAO.find(delete).getResources().stream().\n-                            filter(resource -> !propByRes.contains(resource.getKey())).\n-                            forEach(resource -> {\n-                                propByRes.add(ResourceOperation.DELETE, resource.getKey());\n-                            });\n-                });\n+                forEach(delete -> groupDAO.find(delete).getResources().stream().\n+                filter(resource -> !propByRes.contains(resource.getKey())).\n+                forEach(resource -> propByRes.add(ResourceOperation.DELETE, resource.getKey())));\n         dynGroupMembs.getLeft().stream().\n                 filter(group -> dynGroupMembs.getRight().contains(group)).\n-                forEach(update -> {\n-                    groupDAO.find(update).getResources().stream().\n-                            filter(resource -> !propByRes.contains(resource.getKey())).\n-                            forEach(resource -> {\n-                                propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                            });\n-                });\n+                forEach(update -> groupDAO.find(update).getResources().stream().\n+                filter(resource -> !propByRes.contains(resource.getKey())).\n+                forEach(resource -> propByRes.add(ResourceOperation.UPDATE, resource.getKey())));\n         dynGroupMembs.getRight().stream().\n                 filter(group -> !dynGroupMembs.getLeft().contains(group)).\n-                forEach(create -> {\n-                    groupDAO.find(create).getResources().stream().\n-                            filter(resource -> !propByRes.contains(resource.getKey())).\n-                            forEach(resource -> {\n-                                propByRes.add(ResourceOperation.CREATE, resource.getKey());\n-                            });\n-                });\n+                forEach(create -> groupDAO.find(create).getResources().stream().\n+                filter(resource -> !propByRes.contains(resource.getKey())).\n+                forEach(resource -> propByRes.add(ResourceOperation.CREATE, resource.getKey())));\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {"},{"sha":"9f468d9261d07061a6c45c03b1d9c248fe04813f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeClassDataBinderImpl.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeClassDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import java.util.Collections;\n+import java.util.List;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -70,9 +70,8 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             anyTypeClass.setKey(anyTypeClassTO.getKey());\n         }\n \n-        plainSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass)).forEach(schema -> {\n-            schema.setAnyTypeClass(null);\n-        });\n+        plainSchemaDAO.findByAnyTypeClasses(List.of(anyTypeClass)).\n+                forEach(schema -> schema.setAnyTypeClass(null));\n \n         anyTypeClass.getPlainSchemas().clear();\n         anyTypeClassTO.getPlainSchemas().forEach(schemaName -> {\n@@ -85,9 +84,8 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             }\n         });\n \n-        derSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass)).forEach((schema) -> {\n-            schema.setAnyTypeClass(null);\n-        });\n+        derSchemaDAO.findByAnyTypeClasses(List.of(anyTypeClass)).\n+                forEach((schema) -> schema.setAnyTypeClass(null));\n \n         anyTypeClass.getDerSchemas().clear();\n         anyTypeClassTO.getDerSchemas().forEach(schemaName -> {\n@@ -100,9 +98,8 @@ public void update(final AnyTypeClass anyTypeClass, final AnyTypeClassTO anyType\n             }\n         });\n \n-        virSchemaDAO.findByAnyTypeClasses(Collections.singletonList(anyTypeClass)).forEach(schema -> {\n-            schema.setAnyTypeClass(null);\n-        });\n+        virSchemaDAO.findByAnyTypeClasses(List.of(anyTypeClass)).\n+                forEach(schema -> schema.setAnyTypeClass(null));\n \n         anyTypeClass.getVirSchemas().clear();\n         anyTypeClassTO.getVirSchemas().forEach(schemaName -> {\n@@ -134,5 +131,4 @@ public AnyTypeClassTO getAnyTypeClassTO(final AnyTypeClass anyTypeClass) {\n \n         return anyTypeClassTO;\n     }\n-\n }"},{"sha":"dcdef11de0a2c4f5dd6c30f69ef4d206455996b7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyTypeDataBinderImpl.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyTypeDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -84,9 +84,8 @@ public AnyType create(final AnyTypeTO anyTypeTO) {\n                         new TypeReference<Set<SyncopeGrantedAuthority>>() {\n                 }));\n \n-                added.forEach(entitlement -> {\n-                    authorities.add(new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM));\n-                });\n+                added.forEach(entitlement -> authorities.add(\n+                    new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM)));\n \n                 accessToken.setAuthorities(ENCRYPTOR.encode(\n                         POJOHelper.serialize(authorities), CipherAlgorithm.AES).\n@@ -164,9 +163,7 @@ public AnyTypeTO getAnyTypeTO(final AnyType anyType) {\n \n         anyTypeTO.setKey(anyType.getKey());\n         anyTypeTO.setKind(anyType.getKind());\n-        anyType.getClasses().forEach(anyTypeClass -> {\n-            anyTypeTO.getClasses().add(anyTypeClass.getKey());\n-        });\n+        anyType.getClasses().forEach(anyTypeClass -> anyTypeTO.getClasses().add(anyTypeClass.getKey()));\n \n         return anyTypeTO;\n     }"},{"sha":"1a78c79acd02642b32ffad378da34ebbb9fefd1a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ApplicationDataBinderImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FApplicationDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -112,10 +112,8 @@ public ApplicationTO getApplicationTO(final Application application) {\n         applicationTO.setKey(application.getKey());\n         applicationTO.setDescription(application.getDescription());\n         applicationTO.getPrivileges().addAll(\n-                application.getPrivileges().stream().map(privilege -> getPrivilegeTO(privilege)).\n-                        collect(Collectors.toList()));\n+                application.getPrivileges().stream().map(this::getPrivilegeTO).collect(Collectors.toList()));\n \n         return applicationTO;\n     }\n-\n }"},{"sha":"8c9ff619aa5aadd68d6ae5d4ebf220cd1214833f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DynRealmDataBinderImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -105,9 +105,8 @@ public DynRealmTO getDynRealmTO(final DynRealm dynRealm) {\n \n         dynRealmTO.setKey(dynRealm.getKey());\n \n-        dynRealm.getDynMemberships().forEach(memb -> {\n-            dynRealmTO.getDynMembershipConds().put(memb.getAnyType().getKey(), memb.getFIQLCond());\n-        });\n+        dynRealm.getDynMemberships()\n+            .forEach(memb -> dynRealmTO.getDynMembershipConds().put(memb.getAnyType().getKey(), memb.getFIQLCond()));\n \n         return dynRealmTO;\n     }"},{"sha":"eca8252a18e7f36a6a146aca6bc6eb567588420f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":8,"deletions":12,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -371,13 +371,11 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n         if (group.getUDynMembership() != null) {\n             groupTO.setUDynMembershipCond(group.getUDynMembership().getFIQLCond());\n         }\n-        group.getADynMemberships().forEach(memb -> {\n-            groupTO.getADynMembershipConds().put(memb.getAnyType().getKey(), memb.getFIQLCond());\n-        });\n+        group.getADynMemberships().\n+                forEach(memb -> groupTO.getADynMembershipConds().put(memb.getAnyType().getKey(), memb.getFIQLCond()));\n \n-        group.getTypeExtensions().forEach(typeExt -> {\n-            groupTO.getTypeExtensions().add(getTypeExtensionTO(typeExt));\n-        });\n+        group.getTypeExtensions().\n+                forEach(typeExt -> groupTO.getTypeExtensions().add(getTypeExtensionTO(typeExt)));\n \n         return groupTO;\n     }\n@@ -410,9 +408,8 @@ public Map<String, PropagationByResource> findAnyObjectsWithTransitiveResources(\n \n         Map<String, PropagationByResource> result = new HashMap<>();\n \n-        groupDAO.findAMemberships(group).forEach((membership) -> {\n-            populateTransitiveResources(group, membership.getLeftEnd(), result);\n-        });\n+        groupDAO.findAMemberships(group).\n+                forEach((membership) -> populateTransitiveResources(group, membership.getLeftEnd(), result));\n \n         return result;\n     }\n@@ -424,9 +421,8 @@ public Map<String, PropagationByResource> findUsersWithTransitiveResources(final\n \n         Map<String, PropagationByResource> result = new HashMap<>();\n \n-        groupDAO.findUMemberships(group).forEach((membership) -> {\n-            populateTransitiveResources(group, membership.getLeftEnd(), result);\n-        });\n+        groupDAO.findUMemberships(group).\n+                forEach((membership) -> populateTransitiveResources(group, membership.getLeftEnd(), result));\n \n         return result;\n     }"},{"sha":"c06d18d63bea7c7460c540ebd803fd9f3857da43","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -77,9 +77,8 @@ public NotificationTO getNotificationTO(final Notification notification) {\n         notificationTO.setTraceLevel(notification.getTraceLevel());\n         notificationTO.setActive(notification.isActive());\n \n-        notification.getAbouts().forEach(about -> {\n-            notificationTO.getAbouts().put(about.getAnyType().getKey(), about.get());\n-        });\n+        notification.getAbouts().forEach(about -> notificationTO.getAbouts().\n+                put(about.getAnyType().getKey(), about.get()));\n \n         if (notification.getRecipientsProvider() != null) {\n             notificationTO.setRecipientsProvider(notification.getRecipientsProvider().getKey());"},{"sha":"e22e31fb8b2af0dd2527f9e0e3fd4d3cf05ddf69","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/PolicyDataBinderImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FPolicyDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -245,18 +245,18 @@ public <T extends PolicyTO> T getPolicyTO(final Policy policy) {\n             policyTO = (T) pullPolicyTO;\n \n             pullPolicyTO.setConflictResolutionAction(((PullPolicy) policy).getConflictResolutionAction());\n-            pullPolicy.getCorrelationRules().forEach(rule -> {\n-                pullPolicyTO.getCorrelationRules().put(rule.getAnyType().getKey(), rule.getImplementation().getKey());\n-            });\n+            pullPolicy.getCorrelationRules().\n+                    forEach(rule -> pullPolicyTO.getCorrelationRules().\n+                    put(rule.getAnyType().getKey(), rule.getImplementation().getKey()));\n         } else if (policy instanceof PushPolicy) {\n             PushPolicy pushPolicy = PushPolicy.class.cast(policy);\n             PushPolicyTO pushPolicyTO = new PushPolicyTO();\n             policyTO = (T) pushPolicyTO;\n \n             pushPolicyTO.setConflictResolutionAction(((PushPolicy) policy).getConflictResolutionAction());\n-            pushPolicy.getCorrelationRules().forEach(rule -> {\n-                pushPolicyTO.getCorrelationRules().put(rule.getAnyType().getKey(), rule.getImplementation().getKey());\n-            });\n+            pushPolicy.getCorrelationRules().\n+                    forEach(rule -> pushPolicyTO.getCorrelationRules().\n+                    put(rule.getAnyType().getKey(), rule.getImplementation().getKey()));\n         }\n \n         if (policyTO != null) {"},{"sha":"0ef038226e858f233f841b7203c03df77888c641","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -229,20 +229,14 @@ public RealmTO getRealmTO(final Realm realm, final boolean admin) {\n             realmTO.setAccountPolicy(realm.getAccountPolicy() == null ? null : realm.getAccountPolicy().getKey());\n             realmTO.setPasswordPolicy(realm.getPasswordPolicy() == null ? null : realm.getPasswordPolicy().getKey());\n \n-            realm.getActions().forEach(action -> {\n-                realmTO.getActions().add(action.getKey());\n-            });\n+            realm.getActions().forEach(action -> realmTO.getActions().add(action.getKey()));\n \n-            realm.getTemplates().forEach(template -> {\n-                realmTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n-            });\n+            realm.getTemplates().\n+                    forEach(template -> realmTO.getTemplates().put(template.getAnyType().getKey(), template.get()));\n \n-            realm.getResources().forEach(resource -> {\n-                realmTO.getResources().add(resource.getKey());\n-            });\n+            realm.getResources().forEach(resource -> realmTO.getResources().add(resource.getKey()));\n         }\n \n         return realmTO;\n     }\n-\n }"},{"sha":"3fe89645037e72956dfbe9a5cc94e40f425e254f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -112,7 +112,7 @@ public ReportTO getReportTO(final Report report) {\n         }\n \n         reportTO.getExecutions().addAll(report.getExecs().stream().\n-                map(reportExec -> getExecTO(reportExec)).collect(Collectors.toList()));\n+                map(this::getExecTO).collect(Collectors.toList()));\n \n         String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(report).getName());\n         try {"},{"sha":"87c2570737a319c558228aea214870456cf12ad6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -268,9 +268,7 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n         for (Iterator<? extends Provision> itor = resource.getProvisions().iterator(); itor.hasNext();) {\n             Provision provision = itor.next();\n             if (resourceTO.getProvision(provision.getAnyType().getKey()) == null) {\n-                virSchemaDAO.findByProvision(provision).forEach(schema -> {\n-                    virSchemaDAO.delete(schema.getKey());\n-                });\n+                virSchemaDAO.findByProvision(provision).forEach(schema -> virSchemaDAO.delete(schema.getKey()));\n \n                 itor.remove();\n             }"},{"sha":"eb778e58b24dedc133945fc1c44229f92fb218cf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -423,9 +423,9 @@ public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils\n                     pullTaskTO.setReconFilterBuilder(pullTask.getReconFilterBuilder().getKey());\n                 }\n \n-                pullTask.getTemplates().forEach(template -> {\n-                    pullTaskTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n-                });\n+                pullTask.getTemplates().\n+                        forEach(template -> pullTaskTO.getTemplates().\n+                        put(template.getAnyType().getKey(), template.get()));\n \n                 pullTaskTO.setRemediation(pullTask.isRemediation());\n                 break;\n@@ -442,9 +442,9 @@ public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils\n                 pushTaskTO.setUnmatchingRule(pushTask.getUnmatchingRule() == null\n                         ? UnmatchingRule.ASSIGN : pushTask.getUnmatchingRule());\n \n-                pushTask.getFilters().forEach(filter -> {\n-                    pushTaskTO.getFilters().put(filter.getAnyType().getKey(), filter.getFIQLCond());\n-                });\n+                pushTask.getFilters().\n+                        forEach(filter -> pushTaskTO.getFilters().\n+                        put(filter.getAnyType().getKey(), filter.getFIQLCond()));\n                 break;\n \n             case NOTIFICATION:"},{"sha":"7484f3045c7da15269087f1fab1af365e3e4ec0d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":27,"deletions":45,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n@@ -261,7 +262,7 @@ private boolean isPasswordMapped(final ExternalResource resource) {\n \n         Optional<? extends Provision> provision = resource.getProvision(anyTypeDAO.findUser());\n         if (provision.isPresent() && provision.get().getMapping() != null) {\n-            result = provision.get().getMapping().getItems().stream().anyMatch(item -> item.isPassword());\n+            result = provision.get().getMapping().getItems().stream().anyMatch(Item::isPassword);\n         }\n \n         return result;\n@@ -403,17 +404,14 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n         Collection<ExternalResource> resources = userDAO.findAllResources(user);\n \n         Map<String, Set<String>> reasons = new HashMap<>();\n-        user.getResources().forEach(resource -> {\n-            reasons.put(resource.getKey(), new HashSet<>(Collections.singleton(user.getKey())));\n-        });\n-        userDAO.findAllGroupKeys(user).forEach(group -> {\n-            groupDAO.findAllResourceKeys(group).forEach(resource -> {\n-                if (!reasons.containsKey(resource)) {\n-                    reasons.put(resource, new HashSet<>());\n-                }\n-                reasons.get(resource).add(group);\n-            });\n-        });\n+        user.getResources().\n+                forEach(resource -> reasons.put(resource.getKey(), Set.of(user.getKey())));\n+        userDAO.findAllGroupKeys(user).forEach(group -> groupDAO.findAllResourceKeys(group).forEach(resource -> {\n+            if (!reasons.containsKey(resource)) {\n+                reasons.put(resource, new HashSet<>());\n+            }\n+            reasons.get(resource).add(group);\n+        }));\n \n         Set<String> toBeDeprovisioned = new HashSet<>();\n         Set<String> toBeProvisioned = new HashSet<>();\n@@ -436,7 +434,7 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n \n                 if (membPatch.getOperation() == PatchOperation.DELETE) {\n                     groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()).stream().\n-                            filter(resource -> reasons.containsKey(resource)).\n+                            filter(reasons::containsKey).\n                             forEach(resource -> {\n                                 reasons.get(resource).remove(membership.getRightEnd().getKey());\n                                 toBeProvisioned.add(resource);\n@@ -491,10 +489,8 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n                             userUR.setPassword(new PasswordPatch());\n                         }\n                         group.getResources().stream().\n-                                filter(resource -> isPasswordMapped(resource)).\n-                                forEachOrdered(resource -> {\n-                                    userUR.getPassword().getResources().add(resource.getKey());\n-                                });\n+                                filter(this::isPasswordMapped).\n+                                forEachOrdered(resource -> userUR.getPassword().getResources().add(resource.getKey()));\n                     }\n                 } else {\n                     LOG.error(\"{} cannot be assigned to {}\", group, user);\n@@ -537,31 +533,19 @@ public PropagationByResource update(final User toBeUpdated, final UserUR userUR)\n         // finally check if any resource assignment is to be processed due to dynamic group membership change\n         dynGroupMembs.getLeft().stream().\n                 filter(group -> !dynGroupMembs.getRight().contains(group)).\n-                forEach(delete -> {\n-                    groupDAO.find(delete).getResources().stream().\n-                            filter(resource -> !propByRes.contains(resource.getKey())).\n-                            forEach(resource -> {\n-                                propByRes.add(ResourceOperation.DELETE, resource.getKey());\n-                            });\n-                });\n+                forEach(delete -> groupDAO.find(delete).getResources().stream().\n+                filter(resource -> !propByRes.contains(resource.getKey())).\n+                forEach(resource -> propByRes.add(ResourceOperation.DELETE, resource.getKey())));\n         dynGroupMembs.getLeft().stream().\n                 filter(group -> dynGroupMembs.getRight().contains(group)).\n-                forEach(update -> {\n-                    groupDAO.find(update).getResources().stream().\n-                            filter(resource -> !propByRes.contains(resource.getKey())).\n-                            forEach(resource -> {\n-                                propByRes.add(ResourceOperation.UPDATE, resource.getKey());\n-                            });\n-                });\n+                forEach(update -> groupDAO.find(update).getResources().stream().\n+                filter(resource -> !propByRes.contains(resource.getKey())).\n+                forEach(resource -> propByRes.add(ResourceOperation.UPDATE, resource.getKey())));\n         dynGroupMembs.getRight().stream().\n                 filter(group -> !dynGroupMembs.getLeft().contains(group)).\n-                forEach(create -> {\n-                    groupDAO.find(create).getResources().stream().\n-                            filter(resource -> !propByRes.contains(resource.getKey())).\n-                            forEach(resource -> {\n-                                propByRes.add(ResourceOperation.CREATE, resource.getKey());\n-                            });\n-                });\n+                forEach(create -> groupDAO.find(create).getResources().stream().\n+                filter(resource -> !propByRes.contains(resource.getKey())).\n+                forEach(resource -> propByRes.add(ResourceOperation.CREATE, resource.getKey())));\n \n         // Throw composite exception if there is at least one element set in the composing exceptions\n         if (scce.hasExceptions()) {\n@@ -631,13 +615,11 @@ public UserTO getUserTO(final User user, final boolean details) {\n \n             // memberships\n             userTO.getMemberships().addAll(\n-                    user.getMemberships().stream().map(membership -> {\n-                        return getMembershipTO(\n-                                user.getPlainAttrs(membership),\n-                                derAttrHandler.getValues(user, membership),\n-                                virAttrHandler.getValues(user, membership),\n-                                membership);\n-                    }).collect(Collectors.toList()));\n+                    user.getMemberships().stream().map(membership -> getMembershipTO(\n+                    user.getPlainAttrs(membership),\n+                    derAttrHandler.getValues(user, membership),\n+                    virAttrHandler.getValues(user, membership),\n+                    membership)).collect(Collectors.toList()));\n \n             // dynamic memberships\n             userTO.getDynMemberships().addAll("},{"sha":"83ee4cf4065993471fa9c859631c376a33f8b702","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/jexl/JexlUtils.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjexl%2FJexlUtils.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -231,9 +231,7 @@ public static void addDerAttrsToContext(final Any<?> any, final JexlContext jexl\n         Map<DerSchema, String> derAttrs =\n                 ApplicationContextProvider.getBeanFactory().getBean(DerAttrHandler.class).getValues(any);\n \n-        derAttrs.forEach((schema, value) -> {\n-            jexlContext.set(schema.getKey(), value);\n-        });\n+        derAttrs.forEach((schema, value) -> jexlContext.set(schema.getKey(), value));\n     }\n \n     public static boolean evaluateMandatoryCondition(final String mandatoryCondition, final Any<?> any) {"},{"sha":"3d1ea84e1cdcfd1fee79807805e2a6c7b3b619bf","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/report/ReconciliationReportlet.java","status":"modified","additions":9,"deletions":17,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Freport%2FReconciliationReportlet.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -258,9 +258,7 @@ private Set<Object> getValues(final Attribute attr) {\n             values = Collections.emptySet();\n         } else if (attr.getValue().get(0) instanceof byte[]) {\n             values = new HashSet<>(attr.getValue().size());\n-            attr.getValue().forEach(single -> {\n-                values.add(Base64.getEncoder().encode((byte[]) single));\n-            });\n+            attr.getValue().forEach(single -> values.add(Base64.getEncoder().encode((byte[]) single)));\n         } else {\n             values = new HashSet<>(attr.getValue());\n         }\n@@ -310,28 +308,22 @@ private void doExtract(final ContentHandler handler, final List<? extends Any<?>\n                                 connObjectKeyItem.get().getExtAttrName(), preparedAttrs.getLeft()));\n \n                         final Map<String, Set<Object>> syncopeAttrs = new HashMap<>();\n-                        preparedAttrs.getRight().forEach(attr -> {\n-                            syncopeAttrs.put(attr.getName(), getValues(attr));\n-                        });\n+                        preparedAttrs.getRight().forEach(attr -> syncopeAttrs.put(attr.getName(), getValues(attr)));\n \n                         final Map<String, Set<Object>> resourceAttrs = new HashMap<>();\n                         connectorObject.getAttributes().stream().\n                                 filter(attr -> (!OperationalAttributes.PASSWORD_NAME.equals(attr.getName())\n                                 && !OperationalAttributes.ENABLE_NAME.equals(attr.getName()))).\n-                                forEachOrdered(attr -> {\n-                                    resourceAttrs.put(attr.getName(), getValues(attr));\n-                                });\n+                                forEachOrdered(attr -> resourceAttrs.put(attr.getName(), getValues(attr)));\n \n                         syncopeAttrs.keySet().stream().\n                                 filter(syncopeAttr -> !resourceAttrs.containsKey(syncopeAttr)).\n-                                forEach(name -> {\n-                                    misaligned.add(new Misaligned(\n-                                            resource.getKey(),\n-                                            connObjectKeyValue,\n-                                            name,\n-                                            syncopeAttrs.get(name),\n-                                            Collections.emptySet()));\n-                                });\n+                                forEach(name -> misaligned.add(new Misaligned(\n+                                        resource.getKey(),\n+                                        connObjectKeyValue,\n+                                        name,\n+                                        syncopeAttrs.get(name),\n+                                        Collections.emptySet())));\n \n                         resourceAttrs.forEach((key, values) -> {\n                             if (syncopeAttrs.containsKey(key)) {"},{"sha":"19aeaadfde36ef45344d86eccf73d845a9c31607","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/notification/DefaultNotificationManager.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fnotification%2FDefaultNotificationManager.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -331,9 +331,8 @@ public List<NotificationTask> createTasks(\n         List<NotificationTask> notifications = new ArrayList<>();\n         for (Notification notification : notificationDAO.findAll()) {\n             if (LOG.isDebugEnabled()) {\n-                notification.getAbouts().forEach(about -> {\n-                    LOG.debug(\"Notification about {} defined: {}\", about.getAnyType(), about.get());\n-                });\n+                notification.getAbouts().forEach(\n+                        about -> LOG.debug(\"Notification about {} defined: {}\", about.getAnyType(), about.get()));\n             }\n \n             if (notification.isActive()) {"},{"sha":"33bab0b07f32fb3a20fe85811982903d7339e99d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -28,6 +28,7 @@\n import java.util.Map;\n import java.util.Optional;\n import java.util.Set;\n+import java.util.function.Function;\n import java.util.stream.Collectors;\n import java.util.concurrent.atomic.AtomicReference;\n import org.apache.commons.lang3.StringUtils;\n@@ -42,6 +43,7 @@\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.Connector;\n@@ -237,16 +239,14 @@ protected Uid createOrUpdate(\n             // 2. check wether anything is actually needing to be propagated, i.e. if there is attribute\n             // difference between beforeObj - just read above from the connector - and the values to be propagated\n             Map<String, Attribute> originalAttrMap = beforeObj.getAttributes().stream().\n-                    collect(Collectors.toMap(attr -> attr.getName().toUpperCase(), attr -> attr));\n+                    collect(Collectors.toMap(attr -> attr.getName().toUpperCase(), Function.identity()));\n             Map<String, Attribute> updateAttrMap = attributes.stream().\n-                    collect(Collectors.toMap(attr -> attr.getName().toUpperCase(), attr -> attr));\n+                    collect(Collectors.toMap(attr -> attr.getName().toUpperCase(), Function.identity()));\n \n             // Only compare attribute from beforeObj that are also being updated\n             Set<String> skipAttrNames = originalAttrMap.keySet();\n             skipAttrNames.removeAll(updateAttrMap.keySet());\n-            new HashSet<>(skipAttrNames).forEach(attrName -> {\n-                originalAttrMap.remove(attrName);\n-            });\n+            new HashSet<>(skipAttrNames).forEach(originalAttrMap::remove);\n \n             Set<Attribute> originalAttrs = new HashSet<>(originalAttrMap.values());\n \n@@ -257,10 +257,7 @@ protected Uid createOrUpdate(\n                 LOG.debug(\"Attributes that would be updated {}\", attributes);\n \n                 Set<Attribute> strictlyModified = new HashSet<>();\n-                attributes.stream().filter(attr -> (!originalAttrs.contains(attr))).\n-                        forEachOrdered(attr -> {\n-                            strictlyModified.add(attr);\n-                        });\n+                attributes.stream().filter(attr -> (!originalAttrs.contains(attr))).forEach(strictlyModified::add);\n \n                 // 3. provision entry\n                 LOG.debug(\"Update {} on {}\", strictlyModified, task.getResource().getKey());\n@@ -462,9 +459,7 @@ public TaskExec execute(final PropagationTaskInfo taskInfo, final PropagationRep\n \n             propagationAttempted.set(true);\n \n-            actions.forEach(action -> {\n-                action.onError(task, execution, e);\n-            });\n+            actions.forEach(action -> action.onError(task, execution, e));\n         } finally {\n             // Try to read remote object AFTER any actual operation\n             if (connector != null) {\n@@ -633,7 +628,7 @@ protected ConnectorObject getRemoteObject(\n                 : task.getOldConnObjectKey();\n \n         Set<MappingItem> linkingMappingItems = virSchemaDAO.findByProvision(provision).stream().\n-                map(schema -> schema.asLinkingMappingItem()).collect(Collectors.toSet());\n+                map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n \n         ConnectorObject obj = null;\n         Optional<? extends MappingItem> connObjectKeyItem = MappingUtils.getConnObjectKeyItem(provision);"},{"sha":"f786387ae28cc0053b5e9ca60881491a21398906","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -107,9 +107,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n                 Set<String> groups = new HashSet<>(groupConnObjectLinks);\n                 Attribute ldapGroups = AttributeUtil.find(getGroupMembershipAttrName(), attributes);\n                 if (ldapGroups != null) {\n-                    ldapGroups.getValue().forEach(obj -> {\n-                        groups.add(obj.toString());\n-                    });\n+                    ldapGroups.getValue().forEach(obj -> groups.add(obj.toString()));\n                     attributes.remove(ldapGroups);\n \n                     if (beforeObj != null && beforeObj.getAttributeByName(getGroupMembershipAttrName()) != null) {\n@@ -152,8 +150,6 @@ private String evaluateGroupConnObjectLink(final String connObjectLinkTemplate,\n     private void buildManagedGroupConnObjectLinks(final ExternalResource externalResource,\n             final String connObjectLinkTemplate, final Set<String> connObjectLinks) {\n         List<Group> managedGroups = groupDAO.findByResource(externalResource);\n-        managedGroups.forEach(group -> {\n-            connObjectLinks.add(evaluateGroupConnObjectLink(connObjectLinkTemplate, group));\n-        });\n+        managedGroups.forEach(group -> connObjectLinks.add(evaluateGroupConnObjectLink(connObjectLinkTemplate, group)));\n     }\n }"},{"sha":"08d519a83417c6d4d899b61261e2478447b1cb08","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PriorityPropagationTaskExecutor.java","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPriorityPropagationTaskExecutor.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -125,7 +125,7 @@ protected void doExecute(\n             }\n             if (execStatus != ExecStatus.SUCCESS) {\n                 throw new PropagationException(task.getResource(), Optional.ofNullable(execution)\n-                    .map(Exec::getMessage).orElse(null));\n+                        .map(Exec::getMessage).orElse(null));\n             }\n         });\n \n@@ -144,9 +144,8 @@ protected void doExecute(\n         // ...waiting for all callables to complete, if async processing was not required\n         if (!nullPriority.isEmpty()) {\n             if (nullPriorityAsync) {\n-                nullPriority.forEach((task, exec) -> {\n-                    reporter.onSuccessOrNonPriorityResourceFailures(task, ExecStatus.CREATED, null, null, null);\n-                });\n+                nullPriority.forEach((task, exec)\n+                        -> reporter.onSuccessOrNonPriorityResourceFailures(task, ExecStatus.CREATED, null, null, null));\n             } else {\n                 final Set<Future<TaskExec>> nullPriorityFutures = new HashSet<>(nullPriority.values());\n                 try {\n@@ -162,9 +161,7 @@ protected void doExecute(\n                 } catch (Exception e) {\n                     LOG.error(\"Unexpected exception\", e);\n                 } finally {\n-                    nullPriorityFutures.forEach(future -> {\n-                        future.cancel(true);\n-                    });\n+                    nullPriorityFutures.forEach(future -> future.cancel(true));\n                     nullPriorityFutures.clear();\n                     nullPriority.clear();\n                 }"},{"sha":"3c675fbb4b5c6682a13010f2836f16d2dbfffdd6","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":95,"deletions":94,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -67,11 +67,12 @@\n import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n+import org.apache.syncope.common.lib.request.AbstractPatchItem;\n \n /**\n  * Manage the data propagation to external resources.\n  */\n-@Transactional(rollbackFor = {Throwable.class})\n+@Transactional(rollbackFor = { Throwable.class })\n public class PropagationManagerImpl implements PropagationManager {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(PropagationManager.class);\n@@ -136,35 +137,35 @@ protected AnyDAO<? extends Any<?>> dao(final AnyTypeKind kind) {\n \n     @Override\n     public List<PropagationTaskInfo> getCreateTasks(\n-        final AnyTypeKind kind,\n-        final String key,\n-        final Boolean enable,\n-        final PropagationByResource propByRes,\n-        final Collection<Attr> vAttrs,\n-        final Collection<String> noPropResourceKeys) {\n+            final AnyTypeKind kind,\n+            final String key,\n+            final Boolean enable,\n+            final PropagationByResource propByRes,\n+            final Collection<Attr> vAttrs,\n+            final Collection<String> noPropResourceKeys) {\n \n         return getCreateTasks(dao(kind).authFind(key), null, enable, propByRes, vAttrs, noPropResourceKeys);\n     }\n \n     @Override\n     public List<PropagationTaskInfo> getUserCreateTasks(\n-        final String key,\n-        final String password,\n-        final Boolean enable,\n-        final PropagationByResource propByRes,\n-        final Collection<Attr> vAttrs,\n-        final Collection<String> noPropResourceKeys) {\n+            final String key,\n+            final String password,\n+            final Boolean enable,\n+            final PropagationByResource propByRes,\n+            final Collection<Attr> vAttrs,\n+            final Collection<String> noPropResourceKeys) {\n \n         return getCreateTasks(userDAO.authFind(key), password, enable, propByRes, vAttrs, noPropResourceKeys);\n     }\n \n     protected List<PropagationTaskInfo> getCreateTasks(\n-        final Any<?> any,\n-        final String password,\n-        final Boolean enable,\n-        final PropagationByResource propByRes,\n-        final Collection<Attr> vAttrs,\n-        final Collection<String> noPropResourceKeys) {\n+            final Any<?> any,\n+            final String password,\n+            final Boolean enable,\n+            final PropagationByResource propByRes,\n+            final Collection<Attr> vAttrs,\n+            final Collection<String> noPropResourceKeys) {\n \n         if (propByRes == null || propByRes.isEmpty()) {\n             return Collections.<PropagationTaskInfo>emptyList();\n@@ -179,33 +180,33 @@ protected List<PropagationTaskInfo> getCreateTasks(\n \n     @Override\n     public List<PropagationTaskInfo> getUpdateTasks(\n-        final AnyTypeKind kind,\n-        final String key,\n-        final boolean changePwd,\n-        final Boolean enable,\n-        final PropagationByResource propByRes,\n-        final Collection<Attr> vAttrs,\n-        final Collection<String> noPropResourceKeys) {\n+            final AnyTypeKind kind,\n+            final String key,\n+            final boolean changePwd,\n+            final Boolean enable,\n+            final PropagationByResource propByRes,\n+            final Collection<Attr> vAttrs,\n+            final Collection<String> noPropResourceKeys) {\n \n         return getUpdateTasks(dao(kind).authFind(key), null, changePwd, enable, propByRes, vAttrs, noPropResourceKeys);\n     }\n \n     @Override\n     public List<PropagationTaskInfo> getUserUpdateTasks(\n-        final WorkflowResult<Pair<UserUR, Boolean>> wfResult,\n-        final boolean changePwd,\n-        final Collection<String> noPropResourceKeys) {\n+            final WorkflowResult<Pair<UserUR, Boolean>> wfResult,\n+            final boolean changePwd,\n+            final Collection<String> noPropResourceKeys) {\n \n         return getUpdateTasks(\n-            userDAO.authFind(wfResult.getResult().getLeft().getKey()),\n-            wfResult.getResult().getKey().getPassword() == null\n+                userDAO.authFind(wfResult.getResult().getLeft().getKey()),\n+                wfResult.getResult().getKey().getPassword() == null\n                 ? null\n                 : wfResult.getResult().getKey().getPassword().getValue(),\n-            changePwd,\n-            wfResult.getResult().getValue(),\n-            wfResult.getPropByRes(),\n-            wfResult.getResult().getKey().getVirAttrs(),\n-            noPropResourceKeys);\n+                changePwd,\n+                wfResult.getResult().getValue(),\n+                wfResult.getPropByRes(),\n+                wfResult.getResult().getKey().getVirAttrs(),\n+                noPropResourceKeys);\n     }\n \n     @Override\n@@ -223,7 +224,7 @@ public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<Us\n             // b. generate the propagation task list in two phases: first the ones containing password,\n             // the the rest (with no password)\n             WorkflowResult<Pair<UserUR, Boolean>> pwdWFResult = new WorkflowResult<>(\n-                wfResult.getResult(), new PropagationByResource(), wfResult.getPerformedTasks());\n+                    wfResult.getResult(), new PropagationByResource(), wfResult.getPerformedTasks());\n \n             Set<String> pwdResourceNames = new HashSet<>(userUR.getPassword().getResources());\n             Collection<String> allResourceNames = userDAO.findAllResourceKeys(userUR.getKey());\n@@ -233,14 +234,14 @@ public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<Us\n             if (!pwdWFResult.getPropByRes().isEmpty()) {\n                 Set<String> toBeExcluded = new HashSet<>(allResourceNames);\n                 toBeExcluded.addAll(userUR.getResources().stream().\n-                    map(patchItem -> patchItem.getValue()).collect(Collectors.toList()));\n+                        map(AbstractPatchItem::getValue).collect(Collectors.toList()));\n                 toBeExcluded.removeAll(pwdResourceNames);\n \n                 tasks.addAll(getUserUpdateTasks(pwdWFResult, true, toBeExcluded));\n             }\n \n             WorkflowResult<Pair<UserUR, Boolean>> noPwdWFResult = new WorkflowResult<>(\n-                wfResult.getResult(), new PropagationByResource(), wfResult.getPerformedTasks());\n+                    wfResult.getResult(), new PropagationByResource(), wfResult.getPerformedTasks());\n \n             noPwdWFResult.getPropByRes().merge(wfResult.getPropByRes());\n             noPwdWFResult.getPropByRes().removeAll(pwdResourceNames);\n@@ -256,34 +257,34 @@ public List<PropagationTaskInfo> getUserUpdateTasks(final WorkflowResult<Pair<Us\n     }\n \n     protected List<PropagationTaskInfo> getUpdateTasks(\n-        final Any<?> any,\n-        final String password,\n-        final boolean changePwd,\n-        final Boolean enable,\n-        final PropagationByResource propByRes,\n-        final Collection<Attr> vAttrs,\n-        final Collection<String> noPropResourceKeys) {\n+            final Any<?> any,\n+            final String password,\n+            final boolean changePwd,\n+            final Boolean enable,\n+            final PropagationByResource propByRes,\n+            final Collection<Attr> vAttrs,\n+            final Collection<String> noPropResourceKeys) {\n \n         if (noPropResourceKeys != null && propByRes != null) {\n             propByRes.removeAll(noPropResourceKeys);\n         }\n \n         return createTasks(\n-            any,\n-            password,\n-            changePwd,\n-            enable,\n-            false,\n-            Optional.ofNullable(propByRes).orElseGet(PropagationByResource::new),\n-            vAttrs);\n+                any,\n+                password,\n+                changePwd,\n+                enable,\n+                false,\n+                Optional.ofNullable(propByRes).orElseGet(PropagationByResource::new),\n+                vAttrs);\n     }\n \n     @Override\n     public List<PropagationTaskInfo> getDeleteTasks(\n-        final AnyTypeKind kind,\n-        final String key,\n-        final PropagationByResource propByRes,\n-        final Collection<String> noPropResourceKeys) {\n+            final AnyTypeKind kind,\n+            final String key,\n+            final PropagationByResource propByRes,\n+            final Collection<String> noPropResourceKeys) {\n \n         Any<?> any = dao(kind).authFind(key);\n \n@@ -303,30 +304,30 @@ public List<PropagationTaskInfo> getDeleteTasks(\n     }\n \n     protected List<PropagationTaskInfo> getDeleteTasks(\n-        final Any<?> any,\n-        final PropagationByResource propByRes,\n-        final Collection<String> noPropResourceKeys) {\n+            final Any<?> any,\n+            final PropagationByResource propByRes,\n+            final Collection<String> noPropResourceKeys) {\n \n         return createTasks(any, null, false, false, true, propByRes, null);\n     }\n \n     /**\n      * Create propagation tasks.\n      *\n-     * @param any              to be provisioned\n-     * @param password         clear text password to be provisioned\n-     * @param changePwd        whether password should be included for propagation attributes or not\n-     * @param enable           whether user must be enabled or not\n+     * @param any to be provisioned\n+     * @param password clear text password to be provisioned\n+     * @param changePwd whether password should be included for propagation attributes or not\n+     * @param enable whether user must be enabled or not\n      * @param deleteOnResource whether any must be deleted anyway from external resource or not\n-     * @param propByRes        operation to be performed per resource\n-     * @param vAttrs           virtual attributes to be set\n+     * @param propByRes operation to be performed per resource\n+     * @param vAttrs virtual attributes to be set\n      * @return list of propagation tasks created\n      */\n     protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n-                                                    final String password, final boolean changePwd,\n-                                                    final Boolean enable, final boolean deleteOnResource,\n-                                                    final PropagationByResource propByRes,\n-                                                    final Collection<Attr> vAttrs) {\n+            final String password, final boolean changePwd,\n+            final Boolean enable, final boolean deleteOnResource,\n+            final PropagationByResource propByRes,\n+            final Collection<Attr> vAttrs) {\n \n         LOG.debug(\"Provisioning {}:\\n{}\", any, propByRes);\n \n@@ -349,8 +350,8 @@ protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n                 } else if (schema.isReadonly()) {\n                     LOG.warn(\"Ignoring read-only {} {}\", VirSchema.class.getSimpleName(), vAttr.getSchema());\n                 } else if (anyUtilsFactory.getInstance(any).dao().\n-                    findAllowedSchemas(any, VirSchema.class).contains(schema)\n-                    && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n+                        findAllowedSchemas(any, VirSchema.class).contains(schema)\n+                        && virtualResources.contains(schema.getProvision().getResource().getKey())) {\n \n                     Set<Attribute> values = vAttrMap.get(schema.getProvision().getResource().getKey());\n                     if (values == null) {\n@@ -364,7 +365,7 @@ protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n                     }\n                 } else {\n                     LOG.warn(\"{} not owned by or {} not allowed for {}\",\n-                        schema.getProvision().getResource(), schema, any);\n+                            schema.getProvision().getResource(), schema, any);\n                 }\n             });\n         }\n@@ -375,20 +376,20 @@ protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n         propByRes.asMap().forEach((resourceKey, operation) -> {\n             ExternalResource resource = resourceDAO.find(resourceKey);\n             Provision provision = Optional.ofNullable(resource)\n-                .map(externalResource -> externalResource.getProvision(any.getType())\n+                    .map(externalResource -> externalResource.getProvision(any.getType())\n                     .orElse(null)).orElse(null);\n             List<? extends Item> mappingItems = provision == null\n-                ? Collections.<Item>emptyList()\n-                : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n+                    ? Collections.<Item>emptyList()\n+                    : MappingUtils.getPropagationItems(provision.getMapping().getItems());\n \n             if (resource == null) {\n                 LOG.error(\"Invalid resource name specified: {}, ignoring...\", resourceKey);\n             } else if (provision == null) {\n                 LOG.error(\"No provision specified on resource {} for type {}, ignoring...\",\n-                    resource, any.getType());\n+                        resource, any.getType());\n             } else if (mappingItems.isEmpty()) {\n                 LOG.warn(\"Requesting propagation for {} but no propagation mapping provided for {}\",\n-                    any.getType(), resource);\n+                        any.getType(), resource);\n             } else {\n                 PropagationTaskInfo task = new PropagationTaskInfo();\n                 task.setResource(resource.getKey());\n@@ -402,30 +403,30 @@ protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n                 task.setOldConnObjectKey(propByRes.getOldConnObjectKey(resource.getKey()));\n \n                 Pair<String, Set<Attribute>> preparedAttrs =\n-                    mappingManager.prepareAttrs(any, password, changePwd, enable, provision);\n+                        mappingManager.prepareAttrs(any, password, changePwd, enable, provision);\n                 task.setConnObjectKey(preparedAttrs.getKey());\n \n                 // Check if any of mandatory attributes (in the mapping) is missing or not received any value: \n                 // if so, add special attributes that will be evaluated by PropagationTaskExecutor\n                 List<String> mandatoryMissing = new ArrayList<>();\n                 List<String> mandatoryNullOrEmpty = new ArrayList<>();\n                 mappingItems.stream().filter(item -> (!item.isConnObjectKey()\n-                    && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any))).\n-                    forEachOrdered(item -> {\n-                        Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n-                        if (attr == null) {\n-                            mandatoryMissing.add(item.getExtAttrName());\n-                        } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n-                            mandatoryNullOrEmpty.add(item.getExtAttrName());\n-                        }\n-                    });\n+                        && JexlUtils.evaluateMandatoryCondition(item.getMandatoryCondition(), any))).\n+                        forEachOrdered(item -> {\n+                            Attribute attr = AttributeUtil.find(item.getExtAttrName(), preparedAttrs.getValue());\n+                            if (attr == null) {\n+                                mandatoryMissing.add(item.getExtAttrName());\n+                            } else if (attr.getValue() == null || attr.getValue().isEmpty()) {\n+                                mandatoryNullOrEmpty.add(item.getExtAttrName());\n+                            }\n+                        });\n                 if (!mandatoryMissing.isEmpty()) {\n                     preparedAttrs.getValue().add(AttributeBuilder.build(\n-                        PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n+                            PropagationTaskExecutor.MANDATORY_MISSING_ATTR_NAME, mandatoryMissing));\n                 }\n                 if (!mandatoryNullOrEmpty.isEmpty()) {\n                     preparedAttrs.getValue().add(AttributeBuilder.build(\n-                        PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n+                            PropagationTaskExecutor.MANDATORY_NULL_OR_EMPTY_ATTR_NAME, mandatoryNullOrEmpty));\n                 }\n \n                 if (vAttrMap.containsKey(resource.getKey())) {\n@@ -445,9 +446,9 @@ protected List<PropagationTaskInfo> createTasks(final Any<?> any,\n \n     @Override\n     public List<PropagationTaskInfo> createTasks(\n-        final Realm realm,\n-        final PropagationByResource propByRes,\n-        final Collection<String> noPropResourceKeys) {\n+            final Realm realm,\n+            final PropagationByResource propByRes,\n+            final Collection<String> noPropResourceKeys) {\n \n         if (noPropResourceKeys != null) {\n             propByRes.removeAll(noPropResourceKeys);\n@@ -471,7 +472,7 @@ public List<PropagationTaskInfo> createTasks(\n                 LOG.error(\"No orgUnit specified on resource {}, ignoring...\", resource);\n             } else if (StringUtils.isBlank(orgUnit.getConnObjectLink())) {\n                 LOG.warn(\"Requesting propagation for {} but no ConnObjectLink provided for {}\",\n-                    realm.getFullPath(), resource);\n+                        realm.getFullPath(), resource);\n             } else {\n                 PropagationTaskInfo task = new PropagationTaskInfo();\n                 task.setResource(resource.getKey());"},{"sha":"e391d5d0b4f066cc77b9b217f6c36b5ac8935eea","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":27,"deletions":31,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -27,45 +27,50 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.collections.IteratorChain;\n-import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.commons.lang3.tuple.MutablePair;\n+import org.apache.syncope.common.lib.collections.IteratorChain;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ConflictResolutionAction;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.VirSchemaDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.Connector;\n-import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n-import org.quartz.JobExecutionException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.apache.syncope.core.persistence.api.entity.task.PullTask;\n+import org.apache.syncope.core.provisioning.api.Connector;\n import org.apache.syncope.core.provisioning.api.pushpull.AnyObjectPullResultHandler;\n-import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.api.pushpull.GroupPullResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.provisioning.api.pushpull.RealmPullResultHandler;\n+import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullExecutor;\n import org.apache.syncope.core.provisioning.api.pushpull.SyncopePullResultHandler;\n import org.apache.syncope.core.provisioning.api.pushpull.UserPullResultHandler;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.identityconnectors.framework.common.objects.Name;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.identityconnectors.framework.common.objects.OperationOptions;\n import org.identityconnectors.framework.common.objects.SyncToken;\n-import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n-import org.apache.syncope.core.spring.ImplementationManager;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> implements SyncopePullExecutor {\n \n+    protected final Map<ObjectClass, SyncToken> latestSyncTokens = new HashMap<>();\n+\n+    protected final Map<ObjectClass, MutablePair<Integer, String>> handled = new HashMap<>();\n+\n     @Autowired\n     protected UserDAO userDAO;\n \n@@ -81,10 +86,6 @@ public class PullJobDelegate extends AbstractProvisioningJobDelegate<PullTask> i\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n-    protected final Map<ObjectClass, SyncToken> latestSyncTokens = new HashMap<>();\n-\n-    protected final Map<ObjectClass, MutablePair<Integer, String>> handled = new HashMap<>();\n-\n     protected ProvisioningProfile<PullTask, PullActions> profile;\n \n     @Override\n@@ -118,12 +119,10 @@ public String currentStatus() {\n         synchronized (status) {\n             if (!handled.isEmpty()) {\n                 StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n-                handled.forEach((key, value) -> {\n-                    builder.append(' ').append(value.getLeft()).append('\\t').\n-                            append(key.getObjectClassValue()).\n-                            append(\" / latest: \").append(value.getRight()).\n-                            append('\\n');\n-                });\n+                handled.forEach((key, value) -> builder.append(' ').append(value.getLeft()).append('\\t').\n+                        append(key.getObjectClassValue()).\n+                        append(\" / latest: \").append(value.getRight()).\n+                        append('\\n'));\n                 status.set(builder.toString());\n             }\n         }\n@@ -163,9 +162,7 @@ protected void setGroupOwners(\n                 }\n             }\n             return group;\n-        }).forEachOrdered(group -> {\n-            groupDAO.save(group);\n-        });\n+        }).forEachOrdered(group -> groupDAO.save(group));\n     }\n \n     protected RealmPullResultHandler buildRealmHandler() {\n@@ -311,7 +308,7 @@ protected String doExecuteProvisioning(\n \n                 try {\n                     Set<MappingItem> linkingMappingItems = virSchemaDAO.findByProvision(provision).stream().\n-                            map(schema -> schema.asLinkingMappingItem()).collect(Collectors.toSet());\n+                            map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n                     Iterator<MappingItem> mapItems = new IteratorChain<>(\n                             provision.getMapping().getItems().iterator(),\n                             linkingMappingItems.iterator());\n@@ -354,12 +351,11 @@ protected String doExecuteProvisioning(\n \n                     if (provision.getUidOnCreate() != null) {\n                         AnyUtils anyUtils = anyUtilsFactory.getInstance(provision.getAnyType().getKind());\n-                        profile.getResults().stream().\n-                                filter(result -> result.getUidValue() != null\n-                                && result.getOperation() == ResourceOperation.CREATE).\n-                                forEach(result -> {\n-                                    anyUtils.addAttr(result.getKey(), provision.getUidOnCreate(), result.getUidValue());\n-                                });\n+                        profile.getResults().stream()\n+                                .filter(result -> result.getUidValue() != null\n+                                && result.getOperation() == ResourceOperation.CREATE)\n+                                .forEach(result -> anyUtils.addAttr(result.getKey(),\n+                                provision.getUidOnCreate(), result.getUidValue()));\n                     }\n                 } catch (Throwable t) {\n                     throw new JobExecutionException(\"While pulling from connector\", t);"},{"sha":"3389d2b1a7058e4bb2fa0fc0ce783ce3531d859c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PushJobDelegate.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPushJobDelegate.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -91,12 +91,10 @@ public String currentStatus() {\n         synchronized (status) {\n             if (!handled.isEmpty()) {\n                 StringBuilder builder = new StringBuilder(\"Processed:\\n\");\n-                handled.forEach((key, value) -> {\n-                    builder.append(' ').append(value.getLeft()).append('\\t').\n-                            append(key).\n-                            append(\" / latest: \").append(value.getRight()).\n-                            append('\\n');\n-                });\n+                handled.forEach((key, value) -> builder.append(' ').append(value.getLeft()).append('\\t').\n+                        append(key).\n+                        append(\" / latest: \").append(value.getRight()).\n+                        append('\\n'));\n                 status.set(builder.toString());\n             }\n         }"},{"sha":"01372423c4f48fefd9502f8709371e06dd0f0341","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/SinglePullJobDelegate.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FSinglePullJobDelegate.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.AnyTemplatePullTask;\n@@ -95,7 +96,7 @@ public List<ProvisioningReport> pull(\n \n         try {\n             Set<MappingItem> linkinMappingItems = virSchemaDAO.findByProvision(provision).stream().\n-                    map(virSchema -> virSchema.asLinkingMappingItem()).collect(Collectors.toSet());\n+                    map(VirSchema::asLinkingMappingItem).collect(Collectors.toSet());\n             Iterator<MappingItem> mapItems = new IteratorChain<>(\n                     provision.getMapping().getItems().iterator(),\n                     linkinMappingItems.iterator());"},{"sha":"37ed7ccecffaac97aaa98048a2afb904855e691b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/ConnObjectUtils.java","status":"modified","additions":9,"deletions":14,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FConnObjectUtils.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -22,6 +22,7 @@\n import java.util.Base64;\n import java.util.List;\n import java.util.Optional;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n@@ -118,7 +119,7 @@ public static String getPassword(final Object pwd) {\n      */\n     public static ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n         return Optional.ofNullable(connObject)\n-            .map(object -> getConnObjectTO(object.getAttributes())).orElseGet(ConnObjectTO::new);\n+                .map(object -> getConnObjectTO(object.getAttributes())).orElseGet(ConnObjectTO::new);\n     }\n \n     /**\n@@ -135,7 +136,7 @@ public static ConnObjectTO getConnObjectTO(final Set<Attribute> attrs) {\n                 Attr attrTO = new Attr();\n                 attrTO.setSchema(attr.getName());\n                 if (attr.getValue() != null) {\n-                    attr.getValue().stream().filter(value -> value != null).forEachOrdered(value -> {\n+                    attr.getValue().stream().filter(Objects::nonNull).forEachOrdered(value -> {\n                         if (value instanceof GuardedString || value instanceof GuardedByteArray) {\n                             attrTO.getValues().add(getPassword(value));\n                         } else if (value instanceof byte[]) {\n@@ -184,17 +185,13 @@ public AnyCR getAnyCR(\n             if (realm != null) {\n                 realmDAO.findAncestors(realm).stream().\n                         filter(ancestor -> ancestor.getPasswordPolicy() != null).\n-                        forEach(ancestor -> {\n-                            passwordPolicies.add(ancestor.getPasswordPolicy());\n-                        });\n+                        forEach(ancestor -> passwordPolicies.add(ancestor.getPasswordPolicy()));\n             }\n \n             userCR.getResources().stream().\n                     map(resource -> resourceDAO.find(resource)).\n                     filter(resource -> resource != null && resource.getPasswordPolicy() != null).\n-                    forEach(resource -> {\n-                        passwordPolicies.add(resource.getPasswordPolicy());\n-                    });\n+                    forEach(resource -> passwordPolicies.add(resource.getPasswordPolicy()));\n \n             String password;\n             try {\n@@ -312,9 +309,8 @@ private <T extends AnyTO> T getAnyTOFromConnObject(\n \n         // 1. fill with data from connector object\n         anyTO.setRealm(pullTask.getDestinatioRealm().getFullPath());\n-        MappingUtils.getPullItems(provision.getMapping().getItems()).forEach(item -> {\n-            mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), anyTO);\n-        });\n+        MappingUtils.getPullItems(provision.getMapping().getItems()).forEach(\n+                item -> mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), anyTO));\n \n         // 2. add data from defined template (if any)\n         templateUtils.apply(anyTO, pullTask.getTemplate(provision.getAnyType()));\n@@ -325,9 +321,8 @@ private <T extends AnyTO> T getAnyTOFromConnObject(\n     public RealmTO getRealmTO(final ConnectorObject obj, final PullTask task, final OrgUnit orgUnit) {\n         RealmTO realmTO = new RealmTO();\n \n-        MappingUtils.getPullItems(orgUnit.getItems()).forEach(item -> {\n-            mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), realmTO);\n-        });\n+        MappingUtils.getPullItems(orgUnit.getItems()).forEach(\n+                item -> mappingManager.setIntValues(item, obj.getAttributeByName(item.getExtAttrName()), realmTO));\n \n         return realmTO;\n     }"},{"sha":"bcdad56f0f9ec29d8b3f5efc04b375a41e6e8cda","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/TemplateUtils.java","status":"modified","additions":7,"deletions":15,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FTemplateUtils.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -125,19 +125,15 @@ private void fill(final RealmMember realmMember, final RealmMember template) {\n \n     private void fillRelationships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n         template.getRelationships().stream().\n-                filter(relationship -> any.getRelationship(\n-                relationship.getOtherEndKey(), relationship.getOtherEndKey()).isEmpty()).\n-                forEachOrdered(relationship -> {\n-                    any.getRelationships().add(relationship);\n-                });\n+                filter(relationship -> !any.getRelationship(\n+                relationship.getOtherEndKey(), relationship.getOtherEndKey()).isPresent()).\n+                forEachOrdered(relationship -> any.getRelationships().add(relationship));\n     }\n \n     private void fillMemberships(final GroupableRelatableTO any, final GroupableRelatableTO template) {\n         template.getMemberships().stream().\n-                filter(membership -> any.getMembership(membership.getGroupKey()).isEmpty()).\n-                forEachOrdered(membership -> {\n-                    any.getMemberships().add(membership);\n-                });\n+                filter(membership -> !any.getMembership(membership.getGroupKey()).isPresent()).\n+                forEachOrdered(membership -> any.getMemberships().add(membership));\n     }\n \n     @Transactional(readOnly = true)\n@@ -230,16 +226,12 @@ public void check(final Map<String, AnyTO> templates, final ClientExceptionType\n             value.getPlainAttrs().stream().\n                     filter(attrTO -> !attrTO.getValues().isEmpty()\n                     && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))).\n-                    forEachOrdered(attrTO -> {\n-                        sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n-                    });\n+                    forEachOrdered(attrTO -> sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0)));\n \n             value.getVirAttrs().stream().\n                     filter(attrTO -> !attrTO.getValues().isEmpty()\n                     && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))).\n-                    forEachOrdered((attrTO) -> {\n-                        sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n-                    });\n+                    forEachOrdered((attrTO) -> sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0)));\n \n             if (value instanceof UserTO) {\n                 UserTO template = (UserTO) value;"},{"sha":"d5e0719f27f3641d53512604e0351d846de89e94","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultAccountRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultAccountRule.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -49,7 +49,7 @@ public void setConf(final AccountRuleConf conf) {\n     @Override\n     public void enforce(final User user) {\n         this.conf.getSchemasNotPermitted().stream().\n-                map(schema -> user.getPlainAttr(schema)).\n+                map(user::getPlainAttr).\n                 filter(Optional::isPresent).\n                 map(attr -> attr.get().getValuesAsStrings()).\n                 filter(values -> (values != null && !values.isEmpty()))."},{"sha":"fd0de4087288e413282190f485414fb324357100","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/policy/DefaultPasswordRule.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fpolicy%2FDefaultPasswordRule.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -51,7 +51,7 @@ public void setConf(final PasswordRuleConf conf) {\n     @Override\n     public void enforce(final User user) {\n         this.conf.getSchemasNotPermitted().stream().\n-                map(schema -> user.getPlainAttr(schema)).\n+                map(user::getPlainAttr).\n                 filter(Optional::isPresent).\n                 map(attr -> attr.get().getValuesAsStrings()).\n                 filter(values -> (values != null && !values.isEmpty())).\n@@ -94,14 +94,14 @@ public void enforce(final User user) {\n \n             // check prefix\n             this.conf.getPrefixesNotPermitted().stream().\n-                    filter(prefix -> clearPassword.startsWith(prefix)).\n+                    filter(clearPassword::startsWith).\n                     forEachOrdered(item -> {\n                         throw new PasswordPolicyException(\"Prefix not permitted\");\n                     });\n \n             // check suffix\n             this.conf.getSuffixesNotPermitted().stream().\n-                    filter(suffix -> clearPassword.endsWith(suffix)).\n+                    filter(clearPassword::endsWith).\n                     forEachOrdered(item -> {\n                         throw new PasswordPolicyException(\"Suffix not permitted\");\n                     });"},{"sha":"13adcd600a7ab6556d311b6bedbd5b3600b773ce","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":21,"deletions":24,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.spring.security;\n \n import java.util.Arrays;\n-import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashMap;\n@@ -30,30 +29,33 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n@@ -134,9 +136,7 @@ public JWTSSOProvider getJWTSSOProvider(final String issuer) {\n                 implementationLookup.getJWTSSOProviderClasses().stream().\n                         map(clazz -> (JWTSSOProvider) ApplicationContextProvider.getBeanFactory().\n                         createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true)).\n-                        forEachOrdered(jwtSSOProvider -> {\n-                            jwtSSOProviders.put(jwtSSOProvider.getIssuer(), jwtSSOProvider);\n-                        });\n+                        forEach(jwtSSOProvider -> jwtSSOProviders.put(jwtSSOProvider.getIssuer(), jwtSSOProvider));\n             }\n         }\n \n@@ -191,9 +191,9 @@ public Pair<User, Boolean> authenticate(final String domain, final Authenticatio\n                 throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n             }\n \n-            List<String> authStatuses = Arrays.asList(confParamOps.get(domain,\n-                    \"authentication.statuses\", new String[] {}, String[].class));\n-            if (!authStatuses.contains(user.getStatus())) {\n+            String[] authStatuses = confParamOps.get(\n+                    domain, \"authentication.statuses\", new String[] {}, String[].class);\n+            if (!ArrayUtils.contains(authStatuses, user.getStatus())) {\n                 throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n             }\n \n@@ -293,20 +293,18 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n \n             // Give entitlements as assigned by roles (with static or dynamic realms, where applicable) - assigned\n             // either statically and dynamically\n-            userDAO.findAllRoles(user).forEach(role -> {\n-                role.getEntitlements().forEach(entitlement -> {\n-                    Set<String> realms = entForRealms.get(entitlement);\n-                    if (realms == null) {\n-                        realms = new HashSet<>();\n-                        entForRealms.put(entitlement, realms);\n-                    }\n-                    realms.addAll(role.getRealms().stream().\n-                            map(realm -> realm.getFullPath()).collect(Collectors.toSet()));\n-                    if (!entitlement.endsWith(\"_CREATE\") && !entitlement.endsWith(\"_DELETE\")) {\n-                        realms.addAll(role.getDynRealms().stream().map(r -> r.getKey()).collect(Collectors.toList()));\n-                    }\n-                });\n-            });\n+            userDAO.findAllRoles(user).forEach(role -> role.getEntitlements().forEach(entitlement -> {\n+                Set<String> realms = entForRealms.get(entitlement);\n+                if (realms == null) {\n+                    realms = new HashSet<>();\n+                    entForRealms.put(entitlement, realms);\n+                }\n+                realms.addAll(role.getRealms().stream().\n+                        map(Realm::getFullPath).collect(Collectors.toSet()));\n+                if (!entitlement.endsWith(\"_CREATE\") && !entitlement.endsWith(\"_DELETE\")) {\n+                    realms.addAll(role.getDynRealms().stream().map(Entity::getKey).collect(Collectors.toList()));\n+                }\n+            }));\n \n             // Give group entitlements for owned groups\n             groupDAO.findOwnedByUser(user.getKey()).forEach((group) -> {\n@@ -326,7 +324,7 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n                 SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entry.getKey());\n                 authority.addRealms(RealmUtils.normalize(entry.getValue()));\n                 return authority;\n-            }).forEachOrdered(authority -> authorities.add(authority));\n+            }).forEachOrdered(authorities::add);\n         }\n \n         return authorities;\n@@ -422,5 +420,4 @@ public void audit(\n \n         auditManager.audit(who, type, category, subcategory, event, result, before, output, input);\n     }\n-\n }"},{"sha":"4dc56939045a233bb256ba81f695e172fd414021","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -55,7 +55,7 @@ public boolean addRealm(final String newRealm) {\n     }\n \n     public void addRealms(final Collection<String> newRealms) {\n-        newRealms.forEach(newRealm -> addRealm(newRealm));\n+        newRealms.forEach(this::addRealm);\n     }\n \n     public Set<String> getRealms() {"},{"sha":"c9aa3afa6b92195d068c1207211a5b40d11f7217","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/ImplementationManagerTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManagerTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -98,7 +98,7 @@ public void concurrentPasswordRuleBuilding() {\n \n             assertTrue(\n                     errorMessages.isEmpty(),\n-                    errorMessages.stream().collect(Collectors.joining(System.lineSeparator())));\n+                () -> errorMessages.stream().collect(Collectors.joining(System.lineSeparator())));\n         });\n     }\n }"},{"sha":"cc9e26d8a719540a7c65bd04fb02654abe8f2f42","filename":"core/spring/src/test/java/org/apache/syncope/core/spring/security/PasswordGeneratorTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FPasswordGeneratorTest.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -165,7 +165,7 @@ public void issueSYNCOPE678() {\n         try {\n             password = passwordGenerator.generate(Collections.<PasswordPolicy>emptyList());\n         } catch (InvalidPasswordRuleConf e) {\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         }\n         assertNotNull(password);\n \n@@ -179,7 +179,7 @@ public void issueSYNCOPE678() {\n         try {\n             password = passwordGenerator.generate(Collections.<PasswordPolicy>singletonList(policy1));\n         } catch (InvalidPasswordRuleConf e) {\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         }\n         assertNotNull(password);\n     }"},{"sha":"e674751134f0c25da4b2c18fd1694f60191e4247","filename":"core/workflow-api/src/main/java/org/apache/syncope/core/workflow/api/WorkflowAdapter.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fapi%2FWorkflowAdapter.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.workflow.api;\n \n+@FunctionalInterface\n public interface WorkflowAdapter {\n \n     /**"},{"sha":"901450c168e1ae42b73c9ab0e9efe56e93b00ccb","filename":"ext/camel/client-console/src/main/java/org/apache/syncope/client/console/widgets/CamelMetricsWidget.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FCamelMetricsWidget.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -91,10 +91,10 @@ private Bar build(final List<CamelMetrics.MeanRate> meanRates) {\n         bar.getOptions().setMaintainAspectRatio(true);\n \n         bar.getData().getLabels().addAll(\n-                meanRates.stream().map(input -> input.getRouteId()).collect(Collectors.toList()));\n+                meanRates.stream().map(CamelMetrics.MeanRate::getRouteId).collect(Collectors.toList()));\n \n         BarDataSet dataset = new BarDataSet(\n-                meanRates.stream().map(input -> input.getValue()).collect(Collectors.toList()));\n+                meanRates.stream().map(CamelMetrics.MeanRate::getValue).collect(Collectors.toList()));\n         dataset.setFillColor(\"blue\");\n         bar.getData().getDatasets().add(dataset);\n "},{"sha":"12d74bd53eb53ee2f105fa77023c56a3f0490af2","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/CamelRouteLogic.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FCamelRouteLogic.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -61,9 +61,7 @@ public class CamelRouteLogic extends AbstractTransactionalLogic<CamelRouteTO> {\n     public List<CamelRouteTO> list(final AnyTypeKind anyTypeKind) {\n         List<CamelRouteTO> routes = new ArrayList<>();\n \n-        routeDAO.find(anyTypeKind).forEach(route -> {\n-            routes.add(binder.getRouteTO(route));\n-        });\n+        routeDAO.find(anyTypeKind).forEach(route -> routes.add(binder.getRouteTO(route)));\n         return routes;\n     }\n \n@@ -132,9 +130,7 @@ public CamelMetrics metrics() {\n                 meanRate.setRouteId(StringUtils.substringBetween(entry.getKey(), \".\", \".\"));\n                 meanRate.setValue(entry.getValue().getMeanRate());\n                 return meanRate;\n-            }).forEachOrdered(meanRate -> {\n-                metrics.getResponseMeanRates().add(meanRate);\n-            });\n+            }).forEachOrdered(meanRate -> metrics.getResponseMeanRates().add(meanRate));\n \n             Collections.sort(metrics.getResponseMeanRates(),\n                     (o1, o2) -> Collections.reverseOrder(Comparator.<Double>naturalOrder())."},{"sha":"bca885c579e46a4e0a08414cb527075028789f27","filename":"ext/camel/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/CamelEntityFactory.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FCamelEntityFactory.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+@FunctionalInterface\n public interface CamelEntityFactory {\n \n     CamelRoute newCamelRoute();"},{"sha":"ce73acc1437a34ead2e2a54953a3f21cb0ffce81","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/DeleteProducer.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FDeleteProducer.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -90,13 +90,12 @@ public void process(final Exchange exchange) throws Exception {\n                                 entry.getValue(),\n                                 excludedResources));\n                     }\n-                    groupDataBinder.findAnyObjectsWithTransitiveResources(key).forEach((k, pbr) -> {\n-                        taskInfos.addAll(getPropagationManager().getDeleteTasks(\n-                                AnyTypeKind.ANY_OBJECT,\n-                                k,\n-                                pbr,\n-                                excludedResources));\n-                    }); // Generate propagation tasks for deleting this group from resources\n+                    groupDataBinder.findAnyObjectsWithTransitiveResources(key).\n+                            forEach((k, pbr) -> taskInfos.addAll(getPropagationManager().getDeleteTasks(\n+                            AnyTypeKind.ANY_OBJECT,\n+                            k,\n+                            pbr,\n+                            excludedResources))); // Generate propagation tasks for deleting this group from resources\n                     taskInfos.addAll(getPropagationManager().getDeleteTasks(\n                             AnyTypeKind.GROUP,\n                             key,"},{"sha":"bc5791af0029ff4a6d90429446a55911c454f230","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -170,7 +171,7 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n                     field(\"mustChangePassword\", user.isMustChangePassword());\n \n             List<Object> roles = userDAO.findAllRoles(user).stream().\n-                    map(r -> r.getKey()).collect(Collectors.toList());\n+                    map(Entity::getKey).collect(Collectors.toList());\n             builder = builder.field(\"roles\", roles);\n \n             Set<Object> privileges = userDAO.findAllRoles(user).stream().\n@@ -185,17 +186,15 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n             user.getRelationships().stream().map(relationship -> {\n                 relationships.add(relationship.getRightEnd().getKey());\n                 return relationship;\n-            }).forEachOrdered(relationship -> {\n-                relationshipTypes.add(relationship.getType().getKey());\n-            });\n+            }).forEachOrdered(relationship -> relationshipTypes.add(relationship.getType().getKey()));\n             builder = builder.field(\"relationships\", relationships);\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n         }\n \n         if (any.getPlainAttrs() != null) {\n             for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n                 List<Object> values = plainAttr.getValues().stream().\n-                        map(value -> value.getValue()).collect(Collectors.toList());\n+                        map(PlainAttrValue::getValue).collect(Collectors.toList());\n \n                 if (plainAttr.getUniqueValue() != null) {\n                     values.add(plainAttr.getUniqueValue().getValue());"},{"sha":"e1916e067371b92832f2c7de271e950c513908e2","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":8,"deletions":11,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -98,9 +98,8 @@ private Pair<DisMaxQueryBuilder, Set<String>> adminRealmsFilter(final Set<String\n                     noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n                     throw noRealm;\n                 } else {\n-                    realmDAO.findDescendants(realm).forEach(descendant -> {\n-                        builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath()));\n-                    });\n+                    realmDAO.findDescendants(realm).forEach(\n+                            descendant -> builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath())));\n                 }\n             } else {\n                 DynRealm dynRealm = dynRealmDAO.find(realmPath);\n@@ -113,9 +112,8 @@ private Pair<DisMaxQueryBuilder, Set<String>> adminRealmsFilter(final Set<String\n             }\n         });\n         if (!dynRealmKeys.isEmpty()) {\n-            realmDAO.findAll().forEach(descendant -> {\n-                builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath()));\n-            });\n+            realmDAO.findAll().forEach(\n+                    descendant -> builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath())));\n         }\n \n         return Pair.of(builder, dynRealmKeys);\n@@ -138,7 +136,7 @@ private SearchRequest searchRequest(\n                                 must(getQueryBuilder(buildEffectiveCond(cond, filter.getRight()), kind))).\n                 from(from).\n                 size(size);\n-        sortBuilders.forEach(sort -> sourceBuilder.sort(sort));\n+        sortBuilders.forEach(sourceBuilder::sort);\n \n         return new SearchRequest(elasticsearchUtils.getContextDomainName(AuthContextUtils.getDomain(), kind)).\n                 searchType(SearchType.QUERY_THEN_FETCH).\n@@ -214,7 +212,7 @@ protected <T extends Any<?>> List<T> doSearch(\n \n         return ArrayUtils.isEmpty(esResult)\n                 ? Collections.emptyList()\n-                : buildResult(Stream.of(esResult).map(hit -> hit.getId()).collect(Collectors.toList()), kind);\n+                : buildResult(Stream.of(esResult).map(SearchHit::getId).collect(Collectors.toList()), kind);\n     }\n \n     private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {\n@@ -321,9 +319,8 @@ private QueryBuilder getQueryBuilder(final AssignableCond cond) {\n \n         DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n         if (cond.isFromGroup()) {\n-            realmDAO.findDescendants(realm).forEach(current -> {\n-                builder.add(QueryBuilders.termQuery(\"realm\", current.getFullPath()));\n-            });\n+            realmDAO.findDescendants(realm).forEach(\n+                    current -> builder.add(QueryBuilders.termQuery(\"realm\", current.getFullPath())));\n         } else {\n             for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n                 builder.add(QueryBuilders.termQuery(\"realm\", current.getFullPath()));"},{"sha":"6fc6b0959ca5bb2eddacd52083663c7119fca993","filename":"ext/flowable/client-enduser/src/main/java/org/apache/syncope/client/enduser/pages/Flowable.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-enduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fpages%2FFlowable.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.BpmnProcess;\n import org.apache.syncope.common.lib.to.UserRequest;\n import org.apache.syncope.common.lib.to.UserRequestForm;\n import org.apache.syncope.ext.client.common.ui.panels.UserRequestFormPanel;\n@@ -148,7 +149,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                 });\n         bpmnProcesses.setChoices(restClient.getDefinitions().stream()\n                 .filter(definition -> !definition.isUserWorkflow())\n-                .map(definition -> definition.getKey()).collect(Collectors.toList()));\n+                .map(BpmnProcess::getKey).collect(Collectors.toList()));\n         container.add(bpmnProcesses);\n \n         body.add(container);"},{"sha":"0591b6bf69a53ac1c1cb729a2d235604de73b39b","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/api/DropdownValueProvider.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FDropdownValueProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FDropdownValueProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fapi%2FDropdownValueProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -23,6 +23,7 @@\n /**\n  * Implementations of this interface are used with {@link org.apache.syncope.core.flowable.support.DropdownFormType}.\n  */\n+@FunctionalInterface\n public interface DropdownValueProvider {\n \n     String NAME = \"dropdownValueProvider\";"},{"sha":"908f27f24e74501ba1be4fbf9e8fc693350b9f3f","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":11,"deletions":19,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -180,7 +180,7 @@ public Pair<Integer, List<UserRequest>> getUserRequests(\n         List<UserRequest> result = engine.getRuntimeService().createNativeProcessInstanceQuery().\n                 sql(query.toString()).\n                 listPage(size * (page <= 0 ? 0 : page - 1), size).stream().\n-                map(procInst -> getUserRequest(procInst)).\n+                map(this::getUserRequest).\n                 collect(Collectors.toList());\n \n         return Pair.of(count, result);\n@@ -246,10 +246,8 @@ public void cancel(final ProcessInstance procInst, final String reason) {\n     public void cancelByProcessDefinition(final String processDefinitionId) {\n         engine.getRuntimeService().\n                 createProcessInstanceQuery().processDefinitionId(processDefinitionId).list().\n-                forEach(procInst -> {\n-                    engine.getRuntimeService().deleteProcessInstance(\n-                            procInst.getId(), \"Cascade Delete process definition \" + processDefinitionId);\n-                });\n+                forEach(procInst -> engine.getRuntimeService().deleteProcessInstance(\n+                procInst.getId(), \"Cascade Delete process definition \" + processDefinitionId));\n     }\n \n     @Override\n@@ -258,10 +256,8 @@ public void cancelByUser(final AnyDeletedEvent event) {\n             String username = event.getAnyName();\n             engine.getRuntimeService().createNativeProcessInstanceQuery().\n                     sql(createProcessInstanceQuery(event.getAnyKey()).toString()).\n-                    list().forEach(procInst -> {\n-                        engine.getRuntimeService().deleteProcessInstance(\n-                                procInst.getId(), \"Cascade Delete user \" + username);\n-                    });\n+                    list().forEach(procInst -> engine.getRuntimeService().deleteProcessInstance(\n+                    procInst.getId(), \"Cascade Delete user \" + username));\n         }\n     }\n \n@@ -300,9 +296,9 @@ protected UserRequestFormPropertyType fromFlowableFormType(final FormType flowab\n     }\n \n     protected UserRequestForm getForm(final Task task) {\n-        return Optional.ofNullable(task)\n-            .map(t -> FlowableUserRequestHandler.this.getForm(t, engine.getFormService().getTaskFormData(t.getId())))\n-            .orElse(null);\n+        return Optional.ofNullable(task).\n+                map(t -> getForm(t, engine.getFormService().getTaskFormData(t.getId()))).\n+                orElse(null);\n     }\n \n     protected UserRequestForm getForm(final Task task, final TaskFormData fd) {\n@@ -576,10 +572,8 @@ public UserRequestForm claimForm(final String taskId) {\n             }\n         }\n \n-        boolean hasAssignees =\n-                engine.getTaskService().getIdentityLinksForTask(taskId).stream().anyMatch(identityLink -> {\n-                    return IdentityLinkType.ASSIGNEE.equals(identityLink.getType());\n-                });\n+        boolean hasAssignees = engine.getTaskService().getIdentityLinksForTask(taskId).stream().\n+                anyMatch(identityLink -> IdentityLinkType.ASSIGNEE.equals(identityLink.getType()));\n         if (hasAssignees) {\n             try {\n                 engine.getTaskService().unclaim(taskId);\n@@ -618,9 +612,7 @@ private Map<String, String> getPropertiesForSubmit(final UserRequestForm form) {\n         Map<String, String> props = new HashMap<>();\n         form.getProperties().stream().\n                 filter(UserRequestFormProperty::isWritable).\n-                forEach(prop -> {\n-                    props.put(prop.getId(), prop.getValue());\n-                });\n+                forEach(prop -> props.put(prop.getId(), prop.getValue()));\n         return Collections.unmodifiableMap(props);\n     }\n "},{"sha":"f54a244451d3f14e23687f078618232c2771755d","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -267,7 +267,7 @@ protected WorkflowResult<Pair<UserUR, Boolean>> doUpdate(final User user, final\n                 dataBinder.getUserTO(updated, true),\n                 userUR.getPassword() == null ? null : userUR.getPassword().getValue(),\n                 null,\n-            Optional.ofNullable(propByResBeforeUpdate).orElse(propByRes));\n+                Optional.ofNullable(propByResBeforeUpdate).orElse(propByRes));\n \n         Boolean propagateEnable = engine.getRuntimeService().getVariable(\n                 procInstID, FlowableRuntimeUtils.PROPAGATE_ENABLE, Boolean.class);\n@@ -468,10 +468,8 @@ public List<WorkflowTask> getAvailableTasks(final String userKey) {\n             process.getFlowElements().stream().\n                     filter(SequenceFlow.class::isInstance).\n                     map(SequenceFlow.class::cast).\n-                    filter(sequenceFlow -> sequenceFlow.getSourceRef().equals(currentTask.getTaskDefinitionKey())).\n-                    forEach(sequenceFlow -> {\n-                        navigateAvailableTasks(sequenceFlow.getTargetFlowElement(), availableTasks);\n-                    });\n+                    filter(flow -> flow.getSourceRef().equals(currentTask.getTaskDefinitionKey())).\n+                    forEach(flow -> navigateAvailableTasks(flow.getTargetFlowElement(), availableTasks));\n         } catch (FlowableException e) {\n             throw new WorkflowException(\n                     \"While reading available tasks for workflow instance \" + procInstID, e);"},{"sha":"f78b4f0bc4620b20fc0b174e58c4e056a6398248","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngine.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngine.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngine.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngine.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -57,9 +57,7 @@ public String getName() {\n \n     @Override\n     public void close() {\n-        engines.values().forEach(engine -> {\n-            engine.close();\n-        });\n+        engines.values().forEach(ProcessEngine::close);\n     }\n \n     @Override"},{"sha":"c245c4d1d1fa30ddcc7494e22267792ce2b181f3","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/DomainProcessEngineFactoryBean.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FDomainProcessEngineFactoryBean.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -106,9 +106,8 @@ public DomainProcessEngine getObject() throws Exception {\n         if (engine == null) {\n             Map<String, ProcessEngine> engines = new HashMap<>();\n \n-            ctx.getBean(DomainHolder.class).getDomains().forEach((domain, datasource) -> {\n-                engines.put(domain, build(domain, datasource));\n-            });\n+            ctx.getBean(DomainHolder.class).getDomains().forEach(\n+                    (domain, datasource) -> engines.put(domain, build(domain, datasource)));\n \n             engine = new DomainProcessEngine(engines);\n         }"},{"sha":"fdbf8b7a633fb322a2ddd07f8b4654682c0e54f3","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeGroupQueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeGroupQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeGroupQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeGroupQueryImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -58,7 +58,7 @@ private void execute() {\n             }\n         } else if (userId != null) {\n             result = userDAO.findAllGroupNames(userDAO.findByUsername(userId)).stream().\n-                    map(groupName -> fromSyncopeGroup(groupName)).\n+                    map(this::fromSyncopeGroup).\n                     collect(Collectors.toList());\n         }\n     }"},{"sha":"61f61cb822618cfb69eefed4d08ee7633fe52d3a","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeTaskFormHandler.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskFormHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskFormHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeTaskFormHandler.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -89,7 +89,7 @@ public void parseConfiguration(\n             formPropertyHandler.setName(formProperty.getName());\n \n             AbstractFormType type = parseFormPropertyType(formProperty, expressionManager).\n-                    orElse(formTypes.parseFormPropertyType(formProperty));\n+                orElseGet(() -> formTypes.parseFormPropertyType(formProperty));\n             formPropertyHandler.setType(type);\n             formPropertyHandler.setRequired(formProperty.isRequired());\n             formPropertyHandler.setReadable(formProperty.isReadable());"},{"sha":"b2d3fe33f4da4c7053d0474bd40152d563439801","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/support/SyncopeUserQueryImpl.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fsupport%2FSyncopeUserQueryImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -67,9 +67,7 @@ private void execute() {\n                 List<UMembership> memberships = groupDAO.findUMemberships(group);\n                 memberships.stream().map(membership -> fromSyncopeUser(membership.getLeftEnd())).\n                         filter(user -> (!result.contains(user))).\n-                        forEachOrdered(user -> {\n-                            result.add(user);\n-                        });\n+                        forEachOrdered(user -> result.add(user));\n             }\n         }\n     }"},{"sha":"b08ffb4c639ec4c625d7ea9da47464659ad62a8c","filename":"ext/oidcclient/client-common-ui/src/main/java/org/apache/syncope/client/common/ui/panels/AbstractOIDCSSOLoginFormPanel.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Foidcclient%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcommon%2Fui%2Fpanels%2FAbstractOIDCSSOLoginFormPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Foidcclient%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcommon%2Fui%2Fpanels%2FAbstractOIDCSSOLoginFormPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-common-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcommon%2Fui%2Fpanels%2FAbstractOIDCSSOLoginFormPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -21,8 +21,6 @@\n import java.net.URLEncoder;\n import java.nio.charset.StandardCharsets;\n import java.util.List;\n-import org.apache.commons.collections4.IterableUtils;\n-import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.ui.commons.BaseSession;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxDropDownChoicePanel;\n@@ -72,13 +70,9 @@ public String getIdValue(final OIDCProviderTO object, final int index) {\n             @Override\n             public OIDCProviderTO getObject(final String id,\n                     final IModel<? extends List<? extends OIDCProviderTO>> choices) {\n-                return IterableUtils.find(choices.getObject(), new Predicate<OIDCProviderTO>() {\n \n-                    @Override\n-                    public boolean evaluate(final OIDCProviderTO object) {\n-                        return object.getName().equals(id);\n-                    }\n-                });\n+                return choices.getObject().stream().\n+                        filter(object -> object.getName().equals(id)).findFirst().orElse(null);\n             }\n         });\n \n@@ -92,8 +86,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     try {\n                         RequestCycle.get().scheduleRequestHandlerAfterCurrent(new RedirectRequestHandler(\n                                 UrlUtils.rewriteToContextRelative(\"oidcclient/login?op=\"\n-                                        + URLEncoder.encode(\n-                                                model.getObject().getName(), StandardCharsets.UTF_8),\n+                                        + URLEncoder.encode(model.getObject().getName(), StandardCharsets.UTF_8),\n                                         RequestCycle.get())));\n                     } catch (Exception e) {\n                         LOG.error(\"Could not redirect to the selected OP {}\", model.getObject().getName(), e);\n@@ -105,5 +98,4 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         ops.setVisible(!available.isEmpty());\n         add(ops);\n     }\n-\n }"},{"sha":"e6154adc8570bd00d172c3d869013e7645dcf2e3","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCProviderTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -194,7 +194,7 @@ public void setSelfRegUnmatching(final boolean selfRegUnmatching) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().orElse(null);\n+        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().orElse(null);\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"6cb3c08d99f8f1ccded067530fb335c506894e00","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCProvider.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.jpa.validation.entity.OIDCProviderCheck;\n \n @Entity\n@@ -257,7 +258,7 @@ public List<? extends OIDCProviderItem> getItems() {\n \n     @Override\n     public Optional<? extends OIDCProviderItem> getConnObjectKeyItem() {\n-        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst();\n+        return getItems().stream().filter(Item::isConnObjectKey).findFirst();\n     }\n \n     @Override"},{"sha":"ee6223f4cc5ac34bcf3be38ff6d293cbe8f08bd4","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/OIDCProviderValidator.java","status":"modified","additions":19,"deletions":21,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FOIDCProviderValidator.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -67,28 +67,26 @@ public boolean isValid(final OIDCProvider oidcProvider, final ConstraintValidato\n             isValid[0] = false;\n         }\n \n-        oidcProvider.getItems().forEach(item -> {\n-            item.getTransformers().stream().\n-                    filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n-                    forEach(transformer -> {\n-                        Class<?> actionsClass = null;\n-                        boolean isAssignable = false;\n-                        try {\n-                            actionsClass = Class.forName(transformer.getBody());\n-                            isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Invalid ItemTransformer specified: {}\", transformer.getBody(), e);\n-                        }\n+        oidcProvider.getItems().forEach(item -> item.getTransformers().stream().\n+                filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n+                forEach(transformer -> {\n+                    Class<?> actionsClass = null;\n+                    boolean isAssignable = false;\n+                    try {\n+                        actionsClass = Class.forName(transformer.getBody());\n+                        isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Invalid ItemTransformer specified: {}\", transformer.getBody(), e);\n+                    }\n \n-                        if (actionsClass == null || !isAssignable) {\n-                            context.buildConstraintViolationWithTemplate(\n-                                    getTemplate(EntityViolationType.InvalidMapping,\n-                                            \"Invalid item trasformer class name\")).\n-                                    addPropertyNode(\"itemTransformers\").addConstraintViolation();\n-                            isValid[0] = false;\n-                        }\n-                    });\n-        });\n+                    if (actionsClass == null || !isAssignable) {\n+                        context.buildConstraintViolationWithTemplate(\n+                                getTemplate(EntityViolationType.InvalidMapping,\n+                                        \"Invalid item trasformer class name\")).\n+                                addPropertyNode(\"itemTransformers\").addConstraintViolation();\n+                        isValid[0] = false;\n+                    }\n+                }));\n \n         return isValid[0];\n     }"},{"sha":"3d94a0adcd1dd61289e93a5205c237dba3f0b010","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -167,7 +167,7 @@ public void setUserTemplate(final UserTO userTemplate) {\n \n     @Override\n     public ItemTO getConnObjectKeyItem() {\n-        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst().orElse(null);\n+        return getItems().stream().filter(ItemTO::isConnObjectKey).findFirst().orElse(null);\n     }\n \n     protected boolean addConnObjectKeyItem(final ItemTO connObjectItem) {"},{"sha":"1378ee76e4b0aaafa4c072bcc2098c76ab13852b","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -477,9 +477,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n                     attrTO.setSchema(attrName);\n                     attr.getAttributeValues().stream().\n                             filter(value -> value.getDOM() != null).\n-                            forEachOrdered(value -> {\n-                                attrTO.getValues().add(value.getDOM().getTextContent());\n-                            });\n+                            forEachOrdered(value -> attrTO.getValues().add(value.getDOM().getTextContent()));\n                     responseTO.getAttrs().add(attrTO);\n                 }\n             }"},{"sha":"74c39307f8f219c3f7a1e538c6b61991dc98a211","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n import org.apache.syncope.core.persistence.api.entity.SAML2IdPItem;\n import org.apache.syncope.core.persistence.api.entity.SAML2UserTemplate;\n+import org.apache.syncope.core.persistence.api.entity.resource.Item;\n import org.apache.syncope.core.persistence.jpa.validation.entity.SAML2IdPCheck;\n \n @Entity\n@@ -213,7 +214,7 @@ public List<? extends SAML2IdPItem> getItems() {\n \n     @Override\n     public Optional<? extends SAML2IdPItem> getConnObjectKeyItem() {\n-        return getItems().stream().filter(item -> item.isConnObjectKey()).findFirst();\n+        return getItems().stream().filter(Item::isConnObjectKey).findFirst();\n     }\n \n     @Override"},{"sha":"132eb11a41debb80aa7f513b9d7c9c075a8446f1","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java","status":"modified","additions":19,"deletions":21,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -68,28 +68,26 @@ public boolean isValid(final SAML2IdP saml2IdP, final ConstraintValidatorContext\n             isValid[0] = false;\n         }\n \n-        saml2IdP.getItems().forEach(item -> {\n-            item.getTransformers().stream().\n-                    filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n-                    forEach(transformer -> {\n-                        Class<?> actionsClass = null;\n-                        boolean isAssignable = false;\n-                        try {\n-                            actionsClass = Class.forName(transformer.getBody());\n-                            isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n-                        } catch (Exception e) {\n-                            LOG.error(\"Invalid ItemTransformer specified: {}\", transformer.getBody(), e);\n-                        }\n+        saml2IdP.getItems().forEach(item -> item.getTransformers().stream().\n+                filter(transformer -> transformer.getEngine() == ImplementationEngine.JAVA).\n+                forEach(transformer -> {\n+                    Class<?> actionsClass = null;\n+                    boolean isAssignable = false;\n+                    try {\n+                        actionsClass = Class.forName(transformer.getBody());\n+                        isAssignable = ItemTransformer.class.isAssignableFrom(actionsClass);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Invalid ItemTransformer specified: {}\", transformer.getBody(), e);\n+                    }\n \n-                        if (actionsClass == null || !isAssignable) {\n-                            context.buildConstraintViolationWithTemplate(\n-                                    getTemplate(EntityViolationType.InvalidMapping,\n-                                            \"Invalid item trasformer class name\")).\n-                                    addPropertyNode(\"itemTransformers\").addConstraintViolation();\n-                            isValid[0] = false;\n-                        }\n-                    });\n-        });\n+                    if (actionsClass == null || !isAssignable) {\n+                        context.buildConstraintViolationWithTemplate(\n+                                getTemplate(EntityViolationType.InvalidMapping,\n+                                        \"Invalid item trasformer class name\")).\n+                                addPropertyNode(\"itemTransformers\").addConstraintViolation();\n+                        isValid[0] = false;\n+                    }\n+                }));\n \n         return isValid[0];\n     }"},{"sha":"cdf5fc190feeffab7cc31fcb5b753f3353616108","filename":"ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/RequestedAuthnContextProvider.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FRequestedAuthnContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FRequestedAuthnContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FRequestedAuthnContextProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -20,6 +20,7 @@\n \n import org.opensaml.saml.saml2.core.RequestedAuthnContext;\n \n+@FunctionalInterface\n public interface RequestedAuthnContextProvider {\n \n     RequestedAuthnContext provide();"},{"sha":"a57150850e72cb387881e8dcfe60cc93c263f093","filename":"ext/scimv2/client-console/src/main/java/org/apache/syncope/client/console/panels/SCIMConfTabPanel.java","status":"modified","additions":5,"deletions":19,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSCIMConfTabPanel.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,12 +18,8 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import java.util.ArrayList;\n-import java.util.Collections;\n import java.util.List;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.syncope.client.console.init.ClassPathScanImplementationLookup;\n+import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.scim.SCIMConf;\n@@ -45,19 +41,9 @@ public SCIMConfTabPanel(\n     }\n \n     private static List<String> getPlainSchemas() {\n-        final List<String> names = new ArrayList<>(ClassPathScanImplementationLookup.USER_FIELD_NAMES);\n-        names.addAll(CollectionUtils.collect(new SchemaRestClient().getSchemas(SchemaType.PLAIN, AnyTypeKind.USER),\n-                new Transformer<SchemaTO, String>() {\n-\n-            @Override\n-            public String transform(final SchemaTO input) {\n-                return input.getKey();\n-            }\n-        }, new ArrayList<String>()));\n-        names.remove(\"password\");\n-        Collections.sort(names);\n-\n-        return names;\n+        return new SchemaRestClient().getSchemas(SchemaType.PLAIN, AnyTypeKind.USER).stream().\n+                map(SchemaTO::getKey).\n+                filter(name -> !\"password\".equals(name)).\n+                sorted().collect(Collectors.toList());\n     }\n-\n }"},{"sha":"1277af3761ef604d6b84e46aa530fece4c034059","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":46,"deletions":59,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.util.ArrayList;\n-import java.util.Arrays;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.List;\n@@ -44,7 +43,6 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.spring.security.AuthDataAccessor;\n import org.apache.syncope.ext.scimv2.api.BadRequestException;\n-import org.apache.syncope.ext.scimv2.api.data.Value;\n import org.apache.syncope.ext.scimv2.api.data.Group;\n import org.apache.syncope.ext.scimv2.api.data.Member;\n import org.apache.syncope.ext.scimv2.api.data.Meta;\n@@ -55,6 +53,7 @@\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserAddress;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserManager;\n import org.apache.syncope.ext.scimv2.api.data.SCIMUserName;\n+import org.apache.syncope.ext.scimv2.api.data.Value;\n import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n import org.apache.syncope.ext.scimv2.api.type.Function;\n import org.apache.syncope.ext.scimv2.api.type.Resource;\n@@ -71,7 +70,7 @@ public class SCIMDataBinder {\n     private static final List<String> USER_SCHEMAS = Collections.singletonList(Resource.User.schema());\n \n     private static final List<String> ENTERPRISE_USER_SCHEMAS =\n-            Arrays.asList(Resource.User.schema(), Resource.EnterpriseUser.schema());\n+            List.of(Resource.User.schema(), Resource.EnterpriseUser.schema());\n \n     private static final List<String> GROUP_SCHEMAS = Collections.singletonList(Resource.Group.schema());\n \n@@ -299,11 +298,10 @@ public SCIMUser toSCIMUser(\n                 });\n             }\n             if (output(attributes, excludedAttributes, \"x509Certificates\")) {\n-                conf.getUserConf().getX509Certificates().stream().\n-                        filter(certificate -> attrs.containsKey(certificate)).\n-                        forEachOrdered(certificate -> {\n-                            user.getX509Certificates().add(new Value(attrs.get(certificate).getValues().get(0)));\n-                        });\n+                conf.getUserConf().getX509Certificates().stream()\n+                        .filter(attrs::containsKey)\n+                        .forEachOrdered(certificate -> user.getX509Certificates().add(\n+                        new Value(attrs.get(certificate).getValues().get(0))));\n             }\n \n             if (conf.getEnterpriseUserConf() != null) {\n@@ -390,33 +388,25 @@ public SCIMUser toSCIMUser(\n             }\n \n             if (output(attributes, excludedAttributes, \"groups\")) {\n-                userTO.getMemberships().forEach(membership -> {\n-                    user.getGroups().add(new Group(\n-                            membership.getGroupKey(),\n-                            StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),\n-                            membership.getGroupName(),\n-                            Function.direct));\n-                });\n-                userTO.getDynMemberships().forEach(membership -> {\n-                    user.getGroups().add(new Group(\n-                            membership.getGroupKey(),\n-                            StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),\n-                            membership.getGroupName(),\n-                            Function.indirect));\n-                });\n+                userTO.getMemberships().forEach(membership -> user.getGroups().add(new Group(\n+                        membership.getGroupKey(),\n+                        StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),\n+                        membership.getGroupName(),\n+                        Function.direct)));\n+                userTO.getDynMemberships().forEach(membership -> user.getGroups().add(new Group(\n+                        membership.getGroupKey(),\n+                        StringUtils.substringBefore(location, \"/Users\") + \"/Groups/\" + membership.getGroupKey(),\n+                        membership.getGroupName(),\n+                        Function.indirect)));\n             }\n \n             if (output(attributes, excludedAttributes, \"entitlements\")) {\n-                authDataAccessor.getAuthorities(userTO.getUsername()).forEach(authority -> {\n-                    user.getEntitlements().\n-                            add(new Value(authority.getAuthority() + \" on Realm(s) \" + authority.getRealms()));\n-                });\n+                authDataAccessor.getAuthorities(userTO.getUsername()).forEach(authority -> user.getEntitlements().\n+                        add(new Value(authority.getAuthority() + \" on Realm(s) \" + authority.getRealms())));\n             }\n \n             if (output(attributes, excludedAttributes, \"roles\")) {\n-                userTO.getRoles().forEach(role -> {\n-                    user.getRoles().add(new Value(role));\n-                });\n+                userTO.getRoles().forEach(role -> user.getRoles().add(new Value(role)));\n             }\n         }\n \n@@ -522,30 +512,29 @@ public UserTO toUserTO(final SCIMUser user) {\n             fill(userTO.getPlainAttrs(), conf.getUserConf().getIms(), user.getIms());\n             fill(userTO.getPlainAttrs(), conf.getUserConf().getPhotos(), user.getPhotos());\n \n-            user.getAddresses().stream().filter(address -> address.getType() != null).forEach(address -> {\n-                conf.getUserConf().getAddresses().stream().\n-                        filter(object -> address.getType().equals(object.getType().name())).findFirst().\n-                        ifPresent(addressConf -> {\n-                            if (addressConf.getFormatted() != null && address.getFormatted() != null) {\n-                                setAttribute(userTO, addressConf.getFormatted(), address.getFormatted());\n-                            }\n-                            if (addressConf.getStreetAddress() != null && address.getStreetAddress() != null) {\n-                                setAttribute(userTO, addressConf.getStreetAddress(), address.getStreetAddress());\n-                            }\n-                            if (addressConf.getLocality() != null && address.getLocality() != null) {\n-                                setAttribute(userTO, addressConf.getLocality(), address.getLocality());\n-                            }\n-                            if (addressConf.getRegion() != null && address.getRegion() != null) {\n-                                setAttribute(userTO, addressConf.getRegion(), address.getRegion());\n-                            }\n-                            if (addressConf.getPostalCode() != null && address.getPostalCode() != null) {\n-                                setAttribute(userTO, addressConf.getPostalCode(), address.getPostalCode());\n-                            }\n-                            if (addressConf.getCountry() != null && address.getCountry() != null) {\n-                                setAttribute(userTO, addressConf.getCountry(), address.getCountry());\n-                            }\n-                        });\n-            });\n+            user.getAddresses().stream().filter(address -> address.getType() != null).\n+                    forEach(address -> conf.getUserConf().getAddresses().stream().\n+                    filter(object -> address.getType().equals(object.getType().name())).findFirst().\n+                    ifPresent(addressConf -> {\n+                        if (addressConf.getFormatted() != null && address.getFormatted() != null) {\n+                            setAttribute(userTO, addressConf.getFormatted(), address.getFormatted());\n+                        }\n+                        if (addressConf.getStreetAddress() != null && address.getStreetAddress() != null) {\n+                            setAttribute(userTO, addressConf.getStreetAddress(), address.getStreetAddress());\n+                        }\n+                        if (addressConf.getLocality() != null && address.getLocality() != null) {\n+                            setAttribute(userTO, addressConf.getLocality(), address.getLocality());\n+                        }\n+                        if (addressConf.getRegion() != null && address.getRegion() != null) {\n+                            setAttribute(userTO, addressConf.getRegion(), address.getRegion());\n+                        }\n+                        if (addressConf.getPostalCode() != null && address.getPostalCode() != null) {\n+                            setAttribute(userTO, addressConf.getPostalCode(), address.getPostalCode());\n+                        }\n+                        if (addressConf.getCountry() != null && address.getCountry() != null) {\n+                            setAttribute(userTO, addressConf.getCountry(), address.getCountry());\n+                        }\n+                    }));\n \n             for (int i = 0; i < user.getX509Certificates().size(); i++) {\n                 Value certificate = user.getX509Certificates().get(i);\n@@ -660,12 +649,10 @@ public SCIMGroup toSCIMGroup(\n                         SyncopeConstants.ROOT_REALM,\n                         false).\n                         getRight();\n-                users.forEach(userTO -> {\n-                    group.getMembers().add(new Member(\n-                            userTO.getKey(),\n-                            StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),\n-                            userTO.getUsername()));\n-                });\n+                users.forEach(userTO -> group.getMembers().add(new Member(\n+                        userTO.getKey(),\n+                        StringUtils.substringBefore(location, \"/Groups\") + \"/Users/\" + userTO.getKey(),\n+                        userTO.getUsername())));\n             }\n         }\n "},{"sha":"f15901a580c1149a492b1e3fdfec307bdc4a297e","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMJacksonJsonProvider.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMJacksonJsonProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMJacksonJsonProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMJacksonJsonProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -33,15 +33,11 @@\n @Produces(SCIMConstants.APPLICATION_SCIM_JSON)\n public class SCIMJacksonJsonProvider extends JacksonJsonProvider {\n \n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n-\n-        @Override\n-        protected SimpleDateFormat initialValue() {\n-            SimpleDateFormat sdf = new SimpleDateFormat();\n-            sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-            return sdf;\n-        }\n-    };\n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = ThreadLocal.withInitial(() -> {\n+        SimpleDateFormat sdf = new SimpleDateFormat();\n+        sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+        return sdf;\n+    });\n \n     public SCIMJacksonJsonProvider() {\n         super(new ObjectMapper(), BASIC_ANNOTATIONS);"},{"sha":"20169d9911030298de077f4df1eebd29da77d343","filename":"ext/self-keymaster/rest-cxf/src/main/java/org/apache/syncope/ext/self/keymaster/cxf/client/SelfKeymasterInternalDomainOps.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fself-keymaster%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fself%2Fkeymaster%2Fcxf%2Fclient%2FSelfKeymasterInternalDomainOps.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -39,16 +39,14 @@ public class SelfKeymasterInternalDomainOps implements DomainOps {\n \n     @Override\n     public List<Domain> list() {\n-        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n-            return logic.list();\n-        });\n+        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(),\n+            () -> logic.list());\n     }\n \n     @Override\n     public Domain read(final String key) {\n-        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(), () -> {\n-            return logic.read(key);\n-        });\n+        return AuthContextUtils.callAs(SyncopeConstants.MASTER_DOMAIN, keymasterUser, Collections.emptyList(),\n+            () -> logic.read(key));\n     }\n \n     @Override"},{"sha":"69fbbe33c1000c9e68f4bd9a26e2cb8820de572c","filename":"fit/build-tools/src/main/java/org/apache/syncope/fit/buildtools/cxf/ProvisioningImpl.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fbuild-tools%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fbuildtools%2Fcxf%2FProvisioningImpl.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -107,9 +107,7 @@ public String update(final String accountid, final List<WSAttributeValue> data)\n \n         List<WSAttribute> schema = schema();\n         Set<String> schemaNames = new HashSet<>();\n-        schema.forEach(attr -> {\n-            schemaNames.add(attr.getName());\n-        });\n+        schema.forEach(attr -> schemaNames.add(attr.getName()));\n         schemaNames.add(\"__NAME__\");\n         schemaNames.add(\"__PASSWORD__\");\n \n@@ -241,9 +239,7 @@ public String create(final List<WSAttributeValue> data) throws ProvisioningExcep\n \n         final List<WSAttribute> schema = schema();\n         final Set<String> schemaNames = new HashSet<>();\n-        schema.forEach(attr -> {\n-            schemaNames.add(attr.getName());\n-        });\n+        schema.forEach(attr -> schemaNames.add(attr.getName()));\n         schemaNames.add(\"__NAME__\");\n         schemaNames.add(\"__PASSWORD__\");\n "},{"sha":"9b715f2ce37a0aa196bbed8896433a2febc00ca9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -616,9 +616,7 @@ protected void updateLdapRemoteObject(\n             ctx = getLdapResourceDirContext(bindDn, bindPwd);\n \n             List<ModificationItem> items = new ArrayList<>();\n-            attributes.forEach((key, value) -> {\n-                items.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE, new BasicAttribute(key, value)));\n-            });\n+            attributes.forEach((key, value) -> items.add(new ModificationItem(DirContext.REPLACE_ATTRIBUTE, new BasicAttribute(key, value))));\n \n             ctx.modifyAttributes(objectDn, items.toArray(new ModificationItem[] {}));\n         } catch (Exception e) {"},{"sha":"68427f3802d2cd5f4d6aeeb48400ae5158d01f00","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AnyObjectITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAnyObjectITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.AnyQuery;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class AnyObjectITCase extends AbstractITCase {\n@@ -125,7 +126,7 @@ public void list() {\n                         build());\n         assertNotNull(anyObjectTOs);\n         assertTrue(anyObjectTOs.getResult().size() >= 2);\n-        anyObjectTOs.getResult().forEach(anyObjectTO -> assertNotNull(anyObjectTO));\n+        anyObjectTOs.getResult().forEach(Assertions::assertNotNull);\n     }\n \n     @Test"},{"sha":"5bc8af358b733602cf6ba56303506e7b13268dbd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ApplicationITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FApplicationITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -55,7 +55,7 @@ public void read() {\n         RoleTO role = roleService.read(\"Other\");\n         assertFalse(role.getPrivileges().isEmpty());\n         assertEquals(1, role.getPrivileges().size());\n-        assertTrue(role.getPrivileges().stream().anyMatch(privilege -> \"postMighty\".equals(privilege)));\n+        assertTrue(role.getPrivileges().stream().anyMatch(\"postMighty\"::equals));\n     }\n \n     @Test"},{"sha":"a7e82c45e302468ec033b31c1c5f326b695f9787","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.common.lib.request.StringReplacePatchItem;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -198,7 +199,7 @@ public void userSearch() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n         Set<String> matchingUserKeys = matchingUsers.getResult().stream().\n-                map(user -> user.getKey()).collect(Collectors.toSet());\n+                map(AnyTO::getKey).collect(Collectors.toSet());\n         assertTrue(matchingUserKeys.contains(\"1417acbe-cbf6-4277-9372-e75e04f97000\"));\n         assertFalse(matchingUserKeys.contains(\"74cd8ece-715a-44a4-a736-e17b46c4e7e6\"));\n         assertFalse(matchingUserKeys.contains(\"823074dc-d280-436d-a7dd-07399fae48ec\"));"},{"sha":"c5e9625e40e300fb05fa566d262dd0051b35b372","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/BpmnProcessITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FBpmnProcessITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -44,9 +44,7 @@ public static void findDefault() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));\n         bpmnProcessService.list().stream().\n                 filter(BpmnProcess::isUserWorkflow).findAny().\n-                ifPresent(process -> {\n-                    userWorkflowKey = process.getKey();\n-                });\n+                ifPresent(process -> userWorkflowKey = process.getKey());\n         assertNotNull(userWorkflowKey);\n     }\n "},{"sha":"a0337180c6a4bb8e11447bc9c8ce5ed69f18446e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ConnectorITCase.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FConnectorITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.fit.AbstractITCase;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.BeforeAll;\n import org.junit.jupiter.api.Test;\n \n@@ -290,7 +291,7 @@ public void list() {\n         List<ConnInstanceTO> connectorInstanceTOs = connectorService.list(null);\n         assertNotNull(connectorInstanceTOs);\n         assertFalse(connectorInstanceTOs.isEmpty());\n-        connectorInstanceTOs.forEach(instance -> assertNotNull(instance));\n+        connectorInstanceTOs.forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n@@ -305,7 +306,7 @@ public void getBundles() {\n         List<ConnBundleTO> bundles = connectorService.getBundles(Locale.ENGLISH.getLanguage());\n         assertNotNull(bundles);\n         assertFalse(bundles.isEmpty());\n-        bundles.forEach(bundle -> assertNotNull(bundle));\n+        bundles.forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n@@ -470,7 +471,7 @@ public void buildObjectClassInfo() {\n         assertNotNull(objectClassInfo);\n \n         Collection<String> objectClasses = objectClassInfo.stream().\n-                map(info -> info.getType()).collect(Collectors.toSet());\n+                map(ConnIdObjectClassTO::getType).collect(Collectors.toSet());\n         assertTrue(objectClasses.contains(ObjectClass.ACCOUNT_NAME));\n         assertTrue(objectClasses.contains(ObjectClass.GROUP_NAME));\n     }"},{"sha":"f6e2fa0e16db1c1265b2bdcd1d9668f122a30cf9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/DerSchemaITCase.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FDerSchemaITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class DerSchemaITCase extends AbstractITCase {\n@@ -42,15 +43,11 @@ public class DerSchemaITCase extends AbstractITCase {\n     public void search() {\n         List<DerSchemaTO> schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.DERIVED).build());\n         assertFalse(schemas.isEmpty());\n-        schemas.forEach(schemaTO -> {\n-            assertNotNull(schemaTO);\n-        });\n+        schemas.forEach(Assertions::assertNotNull);\n \n         schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.DERIVED).keyword(\"mder*\").build());\n         assertFalse(schemas.isEmpty());\n-        schemas.forEach(schemaTO -> {\n-            assertNotNull(schemaTO);\n-        });\n+        schemas.forEach(Assertions::assertNotNull);\n     }\n \n     @Test"},{"sha":"2f3825d69a2e1d2e786040e80f8d185660cb87fb","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -94,6 +94,7 @@\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class GroupITCase extends AbstractITCase {\n@@ -180,7 +181,7 @@ public void list() {\n                 groupService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build());\n         assertNotNull(groupTOs);\n         assertTrue(groupTOs.getResult().size() >= 8);\n-        groupTOs.getResult().forEach(groupTO -> assertNotNull(groupTO));\n+        groupTOs.getResult().forEach(Assertions::assertNotNull);\n     }\n \n     @Test"},{"sha":"abcc88c302b26d9c5be8dcb9ad8bf668d74fc873","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/KeymasterITCase.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FKeymasterITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -297,16 +297,12 @@ public void domainCRUD() throws Exception {\n \n     @Test\n     public void domainCreateMaster() {\n-        assertThrows(KeymasterException.class, () -> {\n-            domainOps.create(new Domain.Builder(SyncopeConstants.MASTER_DOMAIN).build());\n-        });\n+        assertThrows(KeymasterException.class, () -> domainOps.create(new Domain.Builder(SyncopeConstants.MASTER_DOMAIN).build()));\n     }\n \n     @Test\n     public void domainCreateDuplicateKey() {\n-        assertThrows(KeymasterException.class, () -> {\n-            domainOps.create(new Domain.Builder(\"Two\").build());\n-        });\n+        assertThrows(KeymasterException.class, () -> domainOps.create(new Domain.Builder(\"Two\").build()));\n     }\n \n     @Test"},{"sha":"73d57eed17882b21bcea4bcb4b71d5e57d8adf71","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/LoggerITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FLoggerITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.UserLogic;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class LoggerITCase extends AbstractITCase {\n@@ -97,9 +98,7 @@ public void listLogs() {\n         List<LoggerTO> loggers = loggerService.list(LoggerType.LOG);\n         assertNotNull(loggers);\n         assertFalse(loggers.isEmpty());\n-        loggers.forEach(logger -> {\n-            assertNotNull(logger);\n-        });\n+        loggers.forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n@@ -371,7 +370,7 @@ public void issueSYNCOPE976() {\n         EventCategory userLogic = events.stream().\n                 filter(object -> \"UserLogic\".equals(object.getCategory())).findAny().get();\n         assertNotNull(userLogic);\n-        assertEquals(1, userLogic.getEvents().stream().filter(event -> \"create\".equals(event)).count());\n+        assertEquals(1, userLogic.getEvents().stream().filter(\"create\"::equals).count());\n     }\n \n     @Test\n@@ -426,7 +425,7 @@ public void issueSYNCOPE1446() {\n                     AnyTypeKind.ANY_OBJECT, \"fc6dbc3a-6c07-4965-8781-921e7401a4a5\", RESOURCE_NAME_DBSCRIPTED, pushTask);\n         } catch (Exception e) {\n             LOG.error(\"Unexpected exception\", e);\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         } finally {\n             try {\n                 loggerService.delete(LoggerType.AUDIT, createSuccess.toLoggerName());"},{"sha":"0362c713b76f4da9139d725ebbecbf3ebc3e2bc7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MembershipITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMembershipITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -293,7 +293,7 @@ public void pull() {\n                     getPlainAttr(\"aLong\").get().getValues().get(0));\n         } catch (Exception e) {\n             LOG.error(\"Unexpected error\", e);\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         } finally {\n             if (newTask != null && !\"83f7e85d-9774-43fe-adba-ccd856312994\".equals(newTask.getKey())) {\n                 taskService.delete(TaskType.PULL, newTask.getKey());"},{"sha":"2fb16c76993e1aad1be719748820db1e450792bd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/OIDCClientITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FOIDCClientITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -68,9 +68,7 @@ public static void clearProviders() throws Exception {\n             return;\n         }\n \n-        oidcProviderService.list().forEach(op -> {\n-            oidcProviderService.delete(op.getKey());\n-        });\n+        oidcProviderService.list().forEach(op -> oidcProviderService.delete(op.getKey()));\n     }\n \n     @Test"},{"sha":"5d43ec1d7dee599767cbce40a22b256edbfbb02a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n import org.apache.cxf.helpers.IOUtils;\n import org.apache.syncope.common.lib.request.UserCR;\n@@ -257,15 +258,11 @@ public void delete() {\n     public void search() {\n         List<PlainSchemaTO> schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.PLAIN).build());\n         assertFalse(schemas.isEmpty());\n-        schemas.forEach(schemaTO -> {\n-            assertNotNull(schemaTO);\n-        });\n+        schemas.forEach(Assertions::assertNotNull);\n \n         schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.PLAIN).keyword(\"fullna*\").build());\n         assertFalse(schemas.isEmpty());\n-        schemas.forEach(schemaTO -> {\n-            assertNotNull(schemaTO);\n-        });\n+        schemas.forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n@@ -275,13 +272,11 @@ public void searchByAnyTypeClass() {\n \n         assertTrue(userSchemas.stream().anyMatch(object -> \"fullname\".equals(object.getKey())));\n \n-        assertFalse(userSchemas.stream().anyMatch(object -> {\n-            return \"password.cipher.algorithm\".equals(object.getKey())\n-                    || \"rderived_dx\".equals(object.getKey())\n-                    || \"icon\".equals(object.getKey())\n-                    || \"mderived_sx\".equals(object.getKey())\n-                    || \"self.membership.layout\".equals(object.getKey());\n-        }));\n+        assertFalse(userSchemas.stream().anyMatch(object -> \"password.cipher.algorithm\".equals(object.getKey())\n+                || \"rderived_dx\".equals(object.getKey())\n+                || \"icon\".equals(object.getKey())\n+                || \"mderived_sx\".equals(object.getKey())\n+                || \"self.membership.layout\".equals(object.getKey())));\n     }\n \n     @Test"},{"sha":"9c56b91185754806f88bd1e07322c46439bef365","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -194,7 +194,7 @@ public void fromCSV() throws Exception {\n \n             IOUtils.copy(srcStream, dstStream);\n         } catch (IOException e) {\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         } finally {\n             if (propStream != null) {\n                 propStream.close();\n@@ -960,7 +960,7 @@ public void issueSYNCOPE258() throws IOException {\n \n         // asser for just one match\n         assertTrue(executed.getExecutions().get(0).getMessage().contains(\"[updated/failures]: 1/0\"),\n-                executed.getExecutions().get(0).getMessage().substring(0, 55) + \"...\");\n+            () -> executed.getExecutions().get(0).getMessage().substring(0, 55) + \"...\");\n     }\n \n     @Test\n@@ -1179,7 +1179,7 @@ public void issueSYNCOPE313LDAP() throws Exception {\n             self = clientFactory.create(user.getUsername(), oldCleanPassword).self();\n             assertNotNull(self);\n         } catch (Exception e) {\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         } finally {\n             // Delete PullTask + user + reset the connector\n             if (pullTask != null) {\n@@ -1283,7 +1283,7 @@ public void issueSYNCOPE1062() {\n             assertEquals(2, propagationTasks.getSize());\n         } catch (Exception e) {\n             LOG.error(\"Unexpected during issueSYNCOPE1062()\", e);\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         } finally {\n             if (pullTask != null) {\n                 taskService.delete(TaskType.PULL, pullTask.getKey());"},{"sha":"dec5789a6ba53edd6ffa838ca76804cdb0061ff7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.common.rest.api.service.RealmService;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class RealmITCase extends AbstractITCase {\n@@ -59,9 +60,7 @@ public void list() {\n         List<RealmTO> realms = realmService.list();\n         assertNotNull(realms);\n         assertFalse(realms.isEmpty());\n-        realms.forEach(realm -> {\n-            assertNotNull(realm);\n-        });\n+        realms.forEach(Assertions::assertNotNull);\n \n         try {\n             realmService.list(\"a name\");"},{"sha":"b33d838ee6c722e06102ff89e8c2b3f61bf3a465","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ReportITCase.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FReportITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -55,6 +55,7 @@\n import org.apache.syncope.common.rest.api.beans.ExecuteQuery;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class ReportITCase extends AbstractITCase {\n@@ -107,9 +108,7 @@ public void list() {\n         List<ReportTO> reports = reportService.list();\n         assertNotNull(reports);\n         assertFalse(reports.isEmpty());\n-        reports.forEach(report -> {\n-            assertNotNull(report);\n-        });\n+        reports.forEach(Assertions::assertNotNull);\n     }\n \n     @Test"},{"sha":"61d47631b117b65a10f11036e5a772a8aec8acb5","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.identityconnectors.framework.common.objects.ObjectClass;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class ResourceITCase extends AbstractITCase {\n@@ -503,7 +504,7 @@ public void list() {\n         List<ResourceTO> actuals = resourceService.list();\n         assertNotNull(actuals);\n         assertFalse(actuals.isEmpty());\n-        actuals.forEach(resourceTO -> assertNotNull(resourceTO));\n+        actuals.forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n@@ -563,9 +564,7 @@ public void listConnObjects() {\n             assertEquals(totalRead, read.size());\n             assertTrue(totalRead >= 10);\n         } finally {\n-            groupKeys.forEach(key -> {\n-                groupService.delete(key);\n-            });\n+            groupKeys.forEach(key -> groupService.delete(key));\n         }\n     }\n "},{"sha":"8c5aa7d631a436c173afc7860a16c335144b9e12","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -167,9 +167,7 @@ public static void clearIdPs() throws Exception {\n             return;\n         }\n \n-        saml2IdPService.list().forEach(idp -> {\n-            saml2IdPService.delete(idp.getKey());\n-        });\n+        saml2IdPService.list().forEach(idp -> saml2IdPService.delete(idp.getKey()));\n \n         Files.delete(keystorePath);\n         Files.delete(truststorePath);\n@@ -203,7 +201,7 @@ public void spMetadata() {\n             assertTrue(signature.checkSignatureValue((X509Certificate) keystore.getCertificate(\"sp\")));\n         } catch (Exception e) {\n             LOG.error(\"During SAML 2.0 SP metadata parsing\", e);\n-            fail(e.getMessage());\n+            fail(e::getMessage);\n         }\n     }\n "},{"sha":"2c01e7d66b29cf9dfe113ce3fd494f2f11f982bd","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":5,"deletions":9,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -76,15 +76,11 @@ public class SCIMITCase extends AbstractITCase {\n \n     private static Boolean ENABLED;\n \n-    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = new ThreadLocal<SimpleDateFormat>() {\n-\n-        @Override\n-        protected SimpleDateFormat initialValue() {\n-            SimpleDateFormat sdf = new SimpleDateFormat();\n-            sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n-            return sdf;\n-        }\n-    };\n+    private static final ThreadLocal<SimpleDateFormat> DATE_FORMAT = ThreadLocal.withInitial(() -> {\n+        SimpleDateFormat sdf = new SimpleDateFormat();\n+        sdf.applyPattern(SyncopeConstants.DEFAULT_DATE_PATTERN);\n+        return sdf;\n+    });\n \n     static {\n         CONF = new SCIMConf();"},{"sha":"2dabfcfa4c0ba3d3d04c9852c8bdce1a9929c8d3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SchedTaskITCase.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSchedTaskITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -65,9 +65,7 @@ public void list() {\n         assertFalse(tasks.getResult().isEmpty());\n         tasks.getResult().stream().filter(\n                 task -> !(task instanceof SchedTaskTO) || task instanceof PullTaskTO || task instanceof PushTaskTO).\n-                forEachOrdered(item -> {\n-                    fail(\"This should not happen\");\n-                });\n+                forEachOrdered(item -> fail(\"This should not happen\"));\n     }\n \n     @Test\n@@ -196,7 +194,7 @@ public void issueSYNCOPE660() {\n                 // ignore\n             }\n \n-            jobs = taskService.listJobs().stream().filter(job -> job.isRunning()).collect(Collectors.toList());\n+            jobs = taskService.listJobs().stream().filter(JobTO::isRunning).collect(Collectors.toList());\n             i++;\n         } while (jobs.size() < 1 && i < maxit);\n \n@@ -214,7 +212,7 @@ public void issueSYNCOPE660() {\n                 // ignore\n             }\n \n-            jobs = taskService.listJobs().stream().filter(job -> job.isRunning()).collect(Collectors.toList());\n+            jobs = taskService.listJobs().stream().filter(JobTO::isRunning).collect(Collectors.toList());\n             i++;\n         } while (jobs.size() >= 1 && i < maxit);\n "},{"sha":"35b298d3679009d6df9adee29f90dff143860b65","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":6,"deletions":13,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.common.rest.api.service.RoleService;\n import org.apache.syncope.fit.AbstractITCase;\n import org.apache.syncope.fit.ElasticsearchDetector;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class SearchITCase extends AbstractITCase {\n@@ -74,10 +75,8 @@ public void searchUser() {\n         assertNotNull(matchingUsers);\n         assertFalse(matchingUsers.getResult().isEmpty());\n \n-        assertEquals(2, matchingUsers.getResult().stream().filter(user -> {\n-            return \"74cd8ece-715a-44a4-a736-e17b46c4e7e6\".equals(user.getKey())\n-                    || \"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\".equals(user.getKey());\n-        }).count());\n+        assertEquals(2, matchingUsers.getResult().stream().filter(user -> \"74cd8ece-715a-44a4-a736-e17b46c4e7e6\".equals(user.getKey())\n+                || \"b3cbc78d-32e6-4bd4-92e0-bbe07566a2ee\".equals(user.getKey())).count());\n     }\n \n     @Test\n@@ -320,9 +319,7 @@ public void nested() {\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());\n-        matchingUsers.getResult().forEach(user -> {\n-            assertNotNull(user);\n-        });\n+        matchingUsers.getResult().forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n@@ -444,9 +441,7 @@ public void orderBy() {\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());\n-        matchingUsers.getResult().forEach(user -> {\n-            assertNotNull(user);\n-        });\n+        matchingUsers.getResult().forEach(Assertions::assertNotNull);\n     }\n \n     @Test\n@@ -477,9 +472,7 @@ public void issueSYNCOPE929() {\n         assertNotNull(matchingUsers);\n \n         assertFalse(matchingUsers.getResult().isEmpty());\n-        matchingUsers.getResult().forEach(user -> {\n-            assertTrue(user.getUsername().startsWith(\"bellini\"));\n-        });\n+        matchingUsers.getResult().forEach(user -> assertTrue(user.getUsername().startsWith(\"bellini\")));\n     }\n \n     @Test"},{"sha":"e6c3f53e3f1375ed2b98fc4d7c7baf6a29814980","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -860,9 +860,7 @@ private void verifyAsyncResult(final List<PropagationStatus> statuses) {\n         assertEquals(3, statuses.size());\n \n         Map<String, PropagationStatus> byResource = new HashMap<>(3);\n-        statuses.forEach(status -> {\n-            byResource.put(status.getResource(), status);\n-        });\n+        statuses.forEach(status -> byResource.put(status.getResource(), status));\n         assertEquals(ExecStatus.SUCCESS, byResource.get(RESOURCE_NAME_LDAP).getStatus());\n         assertTrue(byResource.get(RESOURCE_NAME_TESTDB).getStatus() == ExecStatus.CREATED\n                 || byResource.get(RESOURCE_NAME_TESTDB).getStatus() == ExecStatus.SUCCESS);\n@@ -1036,10 +1034,8 @@ public void batch() throws IOException {\n         BatchRequest batchRequest = adminClient.batch();\n \n         UserService batchUserService = batchRequest.getService(UserService.class);\n-        users.forEach(user -> {\n-            batchUserService.status(new StatusR.Builder().key(user).type(StatusRType.SUSPEND).onSyncope(true).\n-                    build());\n-        });\n+        users.forEach(user -> batchUserService.status(new StatusR.Builder().key(user).type(StatusRType.SUSPEND).onSyncope(true).\n+                build()));\n         List<BatchResponseItem> batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n         assertEquals(10, batchResponseItems.stream().\n                 filter(item -> Response.Status.OK.getStatusCode() == item.getStatus()).count());\n@@ -1048,10 +1044,8 @@ public void batch() throws IOException {\n         assertEquals(\"suspended\", userService.read(users.get(3)).getStatus());\n \n         UserService batchUserService2 = batchRequest.getService(UserService.class);\n-        users.forEach(user -> {\n-            batchUserService2.status(new StatusR.Builder().key(user).type(StatusRType.REACTIVATE).onSyncope(true).\n-                    build());\n-        });\n+        users.forEach(user -> batchUserService2.status(new StatusR.Builder().key(user).type(StatusRType.REACTIVATE).onSyncope(true).\n+                build()));\n         batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n         assertEquals(10, batchResponseItems.stream().\n                 filter(item -> Response.Status.OK.getStatusCode() == item.getStatus()).count());\n@@ -1060,9 +1054,7 @@ public void batch() throws IOException {\n         assertEquals(\"active\", userService.read(users.get(3)).getStatus());\n \n         UserService batchUserService3 = batchRequest.getService(UserService.class);\n-        users.forEach(user -> {\n-            batchUserService3.delete(user);\n-        });\n+        users.forEach(batchUserService3::delete);\n         batchResponseItems = parseBatchResponse(batchRequest.commit().getResponse());\n         assertEquals(10, batchResponseItems.stream().\n                 filter(item -> Response.Status.OK.getStatusCode() == item.getStatus()).count());"},{"sha":"6f3419e015e64bd8d434c61b1b351778040d1481","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -602,9 +602,7 @@ public void issueSYNCOPE354() {\n         ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n         ldap.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getItems().stream().\n                 filter(item -> (\"description\".equals(item.getExtAttrName()))).\n-                forEachOrdered(item -> {\n-                    item.setExtAttrName(\"uniqueMember\");\n-                });\n+                forEachOrdered(item -> item.setExtAttrName(\"uniqueMember\"));\n         resourceService.update(ldap);\n \n         // 1. create group with LDAP resource\n@@ -655,9 +653,7 @@ public void issueSYNCOPE354() {\n         // 7. restore original resource-ldap group mapping\n         ldap.getProvision(AnyTypeKind.GROUP.name()).get().getMapping().getItems().stream().\n                 filter(item -> (\"uniqueMember\".equals(item.getExtAttrName()))).\n-                forEachOrdered(item -> {\n-                    item.setExtAttrName(\"description\");\n-                });\n+                forEachOrdered(item -> item.setExtAttrName(\"description\"));\n         resourceService.update(ldap);\n     }\n "},{"sha":"88554fee6ad8a1f612b821260af608cd0f70c414","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirSchemaITCase.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Assertions;\n import org.junit.jupiter.api.Test;\n \n public class VirSchemaITCase extends AbstractITCase {\n@@ -46,15 +47,11 @@ public class VirSchemaITCase extends AbstractITCase {\n     public void search() {\n         List<VirSchemaTO> schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build());\n         assertFalse(schemas.isEmpty());\n-        schemas.forEach(schemaTO -> {\n-            assertNotNull(schemaTO);\n-        });\n+        schemas.forEach(Assertions::assertNotNull);\n \n         schemas = schemaService.search(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).keyword(\"rvirtual*\").build());\n         assertFalse(schemas.isEmpty());\n-        schemas.forEach(schemaTO -> {\n-            assertNotNull(schemaTO);\n-        });\n+        schemas.forEach(Assertions::assertNotNull);\n     }\n \n     @Test"},{"sha":"ced5a7f2bcad08e6b710e20a495617115b7f2e8e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/ui/UtilityUIT.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FUtilityUIT.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FUtilityUIT.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fui%2FUtilityUIT.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -97,9 +97,7 @@ public Component findComponentByMarkupId(final String searchPath, final String m\n     public void closeCallBack(final Component modal) {\n         modal.getBehaviors().stream().\n                 filter(behavior -> (behavior instanceof AbstractAjaxBehavior)).\n-                forEachOrdered(behavior -> {\n-                    tester.executeBehavior((AbstractAjaxBehavior) behavior);\n-                });\n+                forEachOrdered(behavior -> tester.executeBehavior((AbstractAjaxBehavior) behavior));\n     }\n \n     public WicketTester getTester() {"},{"sha":"f24eb4a9f4992dbfdc9301c70485f8081467257c","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ResourceExplorerTopComponent.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FResourceExplorerTopComponent.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -297,17 +297,14 @@ void readProperties(final java.util.Properties p) {\n \n     private void addMailTemplates() {\n         List<MailTemplateTO> mailTemplateList = mailTemplateManagerService.list();\n-        mailTemplateList.forEach(mailTemplate -> {\n-            this.mailTemplates.add(new DefaultMutableTreeNode(mailTemplate.getKey()));\n-        });\n+        mailTemplateList\n+            .forEach(mailTemplate -> this.mailTemplates.add(new DefaultMutableTreeNode(mailTemplate.getKey())));\n         treeModel.reload();\n     }\n \n     private void addReportXslts() {\n         List<ReportTemplateTO> reportTemplates = reportTemplateManagerService.list();\n-        reportTemplates.forEach(reportTemplate -> {\n-            reportXslts.add(new DefaultMutableTreeNode(reportTemplate.getKey()));\n-        });\n+        reportTemplates.forEach(reportTemplate -> reportXslts.add(new DefaultMutableTreeNode(reportTemplate.getKey())));\n         treeModel.reload();\n     }\n \n@@ -560,7 +557,7 @@ private void openMailEditor(final String name) throws IOException {\n                 mailTemplatesDir.mkdirs();\n             }\n             File file = new File(mailTemplatesDirName + name + \".\" + type);\n-            FileWriter fw = new FileWriter(file);\n+            FileWriter fw = new FileWriter(file, StandardCharsets.UTF_8);\n             fw.write(content);\n             fw.flush();\n             FileObject fob = FileUtil.toFileObject(file.getAbsoluteFile());\n@@ -585,7 +582,7 @@ private void openScriptEditor(final String name, final String type) throws IOExc\n             groovyScriptsDir.mkdirs();\n         }\n         File file = new File(groovyScriptsDirName + name + \".groovy\");\n-        FileWriter fw = new FileWriter(file);\n+        FileWriter fw = new FileWriter(file, StandardCharsets.UTF_8);\n         fw.write(node.getBody());\n         fw.flush();\n         FileObject fob = FileUtil.toFileObject(file.getAbsoluteFile());\n@@ -631,7 +628,7 @@ private void openReportEditor(final String name) throws IOException {\n             }\n             File file = new File(reportTemplatesDirName + name + \".\" + format.\n                     name().toLowerCase());\n-            FileWriter fw = new FileWriter(file);\n+            FileWriter fw = new FileWriter(file, StandardCharsets.UTF_8);\n             fw.write(content);\n             fw.flush();\n             FileObject fob = FileUtil.toFileObject(file.getAbsoluteFile());"},{"sha":"b9f8dc22e93c92d8bca2082c0646b88a5541727e","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ServerDetailsView.form","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FServerDetailsView.form","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FServerDetailsView.form","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FServerDetailsView.form?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -1,4 +1,5 @@\n <?xml version=\"1.0\" encoding=\"UTF-8\" ?>\n+\n <!--\n Licensed to the Apache Software Foundation (ASF) under one\n or more contributor license agreements.  See the NOTICE file"},{"sha":"fc628f52908cffcd6772a421f2e9c0139412d7c4","filename":"ide/netbeans/src/main/java/org/apache/syncope/ide/netbeans/view/ServerDetailsView.java","status":"modified","additions":14,"deletions":20,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FServerDetailsView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FServerDetailsView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ide%2Fnetbeans%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fide%2Fnetbeans%2Fview%2FServerDetailsView.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -18,11 +18,13 @@\n  */\n package org.apache.syncope.ide.netbeans.view;\n \n+import java.awt.EventQueue;\n+import java.awt.event.WindowAdapter;\n+import java.awt.event.WindowEvent;\n import java.util.ArrayList;\n import java.util.List;\n import java.util.logging.Logger;\n import java.util.prefs.Preferences;\n-\n import javax.swing.GroupLayout;\n import javax.swing.JButton;\n import javax.swing.JDialog;\n@@ -34,7 +36,6 @@\n import javax.swing.LayoutStyle;\n import javax.swing.SwingConstants;\n import javax.swing.WindowConstants;\n-\n import org.apache.commons.lang3.StringUtils;\n import org.openide.util.NbPreferences;\n \n@@ -46,6 +47,7 @@ public class ServerDetailsView extends JDialog {\n \n     /**\n      * Creates new form LoginView\n+     *\n      * @param parent Parent Frame\n      * @param modal Whether it is modal or not\n      */\n@@ -92,11 +94,7 @@ private void initComponents() {\n         schemeTxt.setToolTipText(\"\");\n \n         org.openide.awt.Mnemonics.setLocalizedText(okButton, \"submit\");\n-        okButton.addActionListener(new java.awt.event.ActionListener() {\n-            public void actionPerformed(java.awt.event.ActionEvent evt) {\n-                okButtonActionPerformed(evt);\n-            }\n-        });\n+        okButton.addActionListener(this::okButtonActionPerformed);\n \n         jLabel4.setHorizontalAlignment(SwingConstants.CENTER);\n         org.openide.awt.Mnemonics.setLocalizedText(jLabel4, \"Apache Syncope connection\");\n@@ -212,20 +210,16 @@ public void setDetails(\n \n     public static void main(final String[] args) {\n         /* Create and display the dialog */\n-        java.awt.EventQueue.invokeLater(new Runnable() {\n-\n-            @Override\n-            public void run() {\n-                ServerDetailsView dialog = new ServerDetailsView(new JFrame(), true);\n-                dialog.addWindowListener(new java.awt.event.WindowAdapter() {\n+        EventQueue.invokeLater(() -> {\n+            ServerDetailsView dialog = new ServerDetailsView(new JFrame(), true);\n+            dialog.addWindowListener(new WindowAdapter() {\n \n-                    @Override\n-                    public void windowClosing(final java.awt.event.WindowEvent e) {\n-                        System.exit(0);\n-                    }\n-                });\n-                dialog.setVisible(true);\n-            }\n+                @Override\n+                public void windowClosing(final WindowEvent e) {\n+                    System.exit(0);\n+                }\n+            });\n+            dialog.setVisible(true);\n         });\n     }\n "},{"sha":"876a012de7e0f20de0399063b7dbd2d2b83945ee","filename":"sra/src/main/java/org/apache/syncope/sra/RouteProvider.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FRouteProvider.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -466,7 +466,7 @@ public List<Route.AsyncBuilder> fetch() {\n \n         return client.getService(GatewayRouteService.class).list().stream().\n                 filter(gwroute -> gwroute.getStatus() == GatewayRouteStatus.PUBLISHED).\n-                map(gwroute -> toRoute(gwroute)).\n+                map(this::toRoute).\n                 collect(Collectors.toList());\n     }\n }"},{"sha":"62665be8fa4a63ef6996081f3593528849aada90","filename":"sra/src/main/java/org/apache/syncope/sra/SyncopeSRAApplication.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FSyncopeSRAApplication.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -22,6 +22,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.boot.SpringApplication;\n import org.springframework.boot.autoconfigure.SpringBootApplication;\n+import org.springframework.cloud.gateway.route.Route;\n import org.springframework.cloud.gateway.route.RouteLocator;\n import org.springframework.cloud.gateway.route.builder.RouteLocatorBuilder;\n import org.springframework.context.EnvironmentAware;\n@@ -60,7 +61,7 @@ public void setEnvironment(final Environment env) {\n \n     @Bean\n     public RouteLocator routes(final RouteLocatorBuilder builder) {\n-        return () -> Flux.fromIterable(provider.fetch()).map(routeBuilder -> routeBuilder.build());\n+        return () -> Flux.fromIterable(provider.fetch()).map(Route.AbstractBuilder::build);\n     }\n \n     @Bean"},{"sha":"d849771d273406a42786a72085a56808cfffd54b","filename":"sra/src/test/java/org/apache/syncope/sra/BodyPropertyAddingGatewayFilterFactory.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/61385632208864e645e7a33d2db962c2fd8c99fd/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyAddingGatewayFilterFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/61385632208864e645e7a33d2db962c2fd8c99fd/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyAddingGatewayFilterFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/sra%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fsra%2FBodyPropertyAddingGatewayFilterFactory.java?ref=61385632208864e645e7a33d2db962c2fd8c99fd","patch":"@@ -24,6 +24,7 @@\n import java.io.ByteArrayOutputStream;\n import java.io.IOException;\n import java.io.InputStream;\n+import java.util.function.Function;\n import java.util.zip.GZIPInputStream;\n import java.util.zip.GZIPOutputStream;\n import org.apache.commons.lang3.ArrayUtils;\n@@ -142,7 +143,7 @@ public Mono<Void> writeWith(Publisher<? extends DataBuffer> body) {\n \n                 @Override\n                 public Mono<Void> writeAndFlushWith(final Publisher<? extends Publisher<? extends DataBuffer>> body) {\n-                    return writeWith(Flux.from(body).flatMapSequential(p -> p));\n+                    return writeWith(Flux.from(body).flatMapSequential(Function.identity()));\n                 }\n             };\n         }"}]}