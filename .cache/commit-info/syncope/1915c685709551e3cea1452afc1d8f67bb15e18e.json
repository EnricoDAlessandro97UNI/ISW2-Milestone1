{"sha":"1915c685709551e3cea1452afc1d8f67bb15e18e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE5MTVjNjg1NzA5NTUxZTNjZWExNDUyYWZjMWQ4ZjY3YmIxNWUxOGU=","commit":{"author":{"name":"DmitriyBrashevets","email":"47774349+DmitriyBrashevets@users.noreply.github.com","date":"2021-05-21T03:55:46Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2021-05-21T03:56:25Z"},"message":"[SYNCOPE-1635] Use singleton bean for each domain for each rule with conf (#264)","tree":{"sha":"8432798003a0fa20cd59de272e91deca38ad0f3f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8432798003a0fa20cd59de272e91deca38ad0f3f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1915c685709551e3cea1452afc1d8f67bb15e18e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1915c685709551e3cea1452afc1d8f67bb15e18e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1915c685709551e3cea1452afc1d8f67bb15e18e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1915c685709551e3cea1452afc1d8f67bb15e18e/comments","author":{"login":"DmitriyBrashevets","id":47774349,"node_id":"MDQ6VXNlcjQ3Nzc0MzQ5","avatar_url":"https://avatars.githubusercontent.com/u/47774349?v=4","gravatar_id":"","url":"https://api.github.com/users/DmitriyBrashevets","html_url":"https://github.com/DmitriyBrashevets","followers_url":"https://api.github.com/users/DmitriyBrashevets/followers","following_url":"https://api.github.com/users/DmitriyBrashevets/following{/other_user}","gists_url":"https://api.github.com/users/DmitriyBrashevets/gists{/gist_id}","starred_url":"https://api.github.com/users/DmitriyBrashevets/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/DmitriyBrashevets/subscriptions","organizations_url":"https://api.github.com/users/DmitriyBrashevets/orgs","repos_url":"https://api.github.com/users/DmitriyBrashevets/repos","events_url":"https://api.github.com/users/DmitriyBrashevets/events{/privacy}","received_events_url":"https://api.github.com/users/DmitriyBrashevets/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"26d4bb7dc8c161e0bd95b6ecbb27a03cd497c4a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/26d4bb7dc8c161e0bd95b6ecbb27a03cd497c4a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/26d4bb7dc8c161e0bd95b6ecbb27a03cd497c4a1"}],"stats":{"total":39,"additions":20,"deletions":19},"files":[{"sha":"6b637d89932c82ca9004931bd1c623748689cce3","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/ImplementationManager.java","status":"modified","additions":20,"deletions":19,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1915c685709551e3cea1452afc1d8f67bb15e18e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1915c685709551e3cea1452afc1d8f67bb15e18e/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FImplementationManager.java?ref=1915c685709551e3cea1452afc1d8f67bb15e18e","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.spring;\n \n-import groovy.lang.GroovyClassLoader;\n import java.util.Collections;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Optional;\n+import groovy.lang.GroovyClassLoader;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PullCorrelationRuleConf;\n@@ -31,14 +31,16 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n-import org.apache.syncope.core.persistence.api.dao.Reportlet;\n-import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.persistence.api.dao.Reportlet;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n \n public final class ImplementationManager {\n \n@@ -217,27 +219,26 @@ private static <T> T buildJava(final Implementation impl)\n \n     @SuppressWarnings(\"unchecked\")\n     private static <T> T buildJavaWithConf(final Class<T> clazz) {\n-        T bean = null;\n-\n         if (clazz != null) {\n-            if (ApplicationContextProvider.getBeanFactory().containsSingleton(clazz.getName())) {\n-                bean = (T) ApplicationContextProvider.getBeanFactory().getSingleton(clazz.getName());\n-            } else {\n-                try {\n-                    bean = (T) ApplicationContextProvider.getBeanFactory().\n-                            createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                    ApplicationContextProvider.getBeanFactory().registerSingleton(clazz.getName(), bean);\n-                } catch (IllegalStateException e) {\n-                    LOG.debug(\"While attempting to register {}\", clazz.getName(), e);\n+            String domainableBeanNameWithConf = AuthContextUtils.getDomain() + clazz.getName();\n+            DefaultListableBeanFactory beanFactory = ApplicationContextProvider.getBeanFactory();\n+\n+            if (beanFactory.containsSingleton(domainableBeanNameWithConf)) {\n+                return (T) beanFactory.getSingleton(domainableBeanNameWithConf);\n+            }\n \n-                    // if this exception was raised, it means another bean for same name is already registered,\n-                    // revert to it\n-                    bean = (T) ApplicationContextProvider.getBeanFactory().getSingleton(clazz.getName());\n+            synchronized (beanFactory.getSingletonMutex()) {\n+                if (beanFactory.containsSingleton(domainableBeanNameWithConf)) {\n+                    return (T) beanFactory.getSingleton(domainableBeanNameWithConf);\n+                } else {\n+                    T bean = (T) beanFactory.\n+                            createBean(clazz, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                    beanFactory.registerSingleton(domainableBeanNameWithConf, bean);\n+                    return bean;\n                 }\n             }\n         }\n-\n-        return bean;\n+        return null;\n     }\n \n     public static Class<?> purge(final String implementation) {"}]}