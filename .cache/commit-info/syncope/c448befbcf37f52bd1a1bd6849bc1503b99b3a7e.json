{"sha":"c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM0NDhiZWZiY2YzN2Y1MmJkMWExYmQ2ODQ5YmMxNTAzYjk5YjNhN2U=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-05T13:35:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-10-05T14:23:56Z"},"message":"Fixing OpenAPI quirks on 200 responses not derived from Java when not specified as @ApiResponse","tree":{"sha":"ecdf793e93e1c737cb34fe1366943a7687abe110","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ecdf793e93e1c737cb34fe1366943a7687abe110"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"04f0dcb87957323827bed5a792ac15ac96b4f788","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04f0dcb87957323827bed5a792ac15ac96b4f788","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04f0dcb87957323827bed5a792ac15ac96b4f788"}],"stats":{"total":274,"additions":153,"deletions":121},"files":[{"sha":"f6133703f867e6a2668dadf53f8f68fc2f6638a7","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/JAXRSService.java","status":"modified","additions":0,"deletions":21,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FJAXRSService.java?ref=c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","patch":"@@ -18,27 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.headers.Header;\n-import io.swagger.v3.oas.annotations.media.Content;\n-import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n-import org.apache.syncope.common.lib.to.ErrorTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n-\n-@ApiResponses(\n-        @ApiResponse(responseCode = \"400\",\n-                description = \"An error occurred; HTTP status code can vary depending on the actual error: \"\n-                + \"400, 403, 404, 409, 412\",\n-                content =\n-                @Content(schema =\n-                        @Schema(implementation = ErrorTO.class)),\n-                headers = {\n-                    @Header(name = RESTHeaders.ERROR_CODE, schema =\n-                            @Schema(type = \"string\"), description = \"Error code\"),\n-                    @Header(name = RESTHeaders.ERROR_INFO, schema =\n-                            @Schema(type = \"string\"), description = \"Error message\") })\n-)\n public interface JAXRSService {\n \n     String PARAM_FIQL = \"fiql\";"},{"sha":"fe8283d850518a06ad3b7563d8bd05175d313361","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/LoggerService.java","status":"modified","additions":0,"deletions":36,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FLoggerService.java?ref=c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","patch":"@@ -20,8 +20,6 @@\n \n import io.swagger.v3.oas.annotations.Parameter;\n import io.swagger.v3.oas.annotations.enums.ParameterIn;\n-import io.swagger.v3.oas.annotations.media.ArraySchema;\n-import io.swagger.v3.oas.annotations.media.Content;\n import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n@@ -60,13 +58,6 @@ public interface LoggerService extends JAXRSService {\n      *\n      * @return the list of memory appenders available in the current logging configuration\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\",\n-                    description = \"list of memory appenders available in the current logging configuration\",\n-                    content =\n-                    @Content(array =\n-                            @ArraySchema(schema =\n-                                    @Schema(implementation = LogAppender.class)))))\n     @GET\n     @Path(\"memoryAppenders\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -78,13 +69,6 @@ public interface LoggerService extends JAXRSService {\n      * @param memoryAppender memory appender name\n      * @return the last log statements available in the provided memory appender\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\",\n-                    description = \"last log statements available in the provided memory appender\",\n-                    content =\n-                    @Content(array =\n-                            @ArraySchema(schema =\n-                                    @Schema(implementation = LogStatement.class)))))\n     @GET\n     @Path(\"memoryAppenders/{memoryAppender}/lastLogStatements\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -95,13 +79,6 @@ public interface LoggerService extends JAXRSService {\n      *\n      * @return list of all managed events in audit\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\",\n-                    description = \"list of all managed events in audit\",\n-                    content =\n-                    @Content(array =\n-                            @ArraySchema(schema =\n-                                    @Schema(implementation = EventCategory.class)))))\n     @GET\n     @Path(\"events\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -114,12 +91,6 @@ public interface LoggerService extends JAXRSService {\n      * @param name Logger name to be read\n      * @return logger with matching type and name\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\",\n-                    description = \"logger with matching type and name\",\n-                    content =\n-                    @Content(schema =\n-                            @Schema(implementation = LoggerTO.class))))\n     @GET\n     @Path(\"{type}/{name}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -131,13 +102,6 @@ public interface LoggerService extends JAXRSService {\n      * @param type LoggerType to be selected\n      * @return list of loggers with matching type\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\",\n-                    description = \"list of loggers with matching type\",\n-                    content =\n-                    @Content(array =\n-                            @ArraySchema(schema =\n-                                    @Schema(implementation = LoggerTO.class)))))\n     @GET\n     @Path(\"{type}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"c3134b663749cac929540717ea02b6728620756b","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/SyncopeOpenApiCustomizer.java","status":"modified","additions":149,"deletions":20,"changes":169,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FSyncopeOpenApiCustomizer.java?ref=c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","patch":"@@ -18,20 +18,32 @@\n  */\n package org.apache.syncope.core.rest.cxf;\n \n-import io.swagger.v3.oas.integration.api.OpenAPIConfiguration;\n+import io.swagger.v3.jaxrs2.Reader;\n+import io.swagger.v3.oas.models.OpenAPI;\n+import io.swagger.v3.oas.models.Operation;\n+import io.swagger.v3.oas.models.PathItem;\n import io.swagger.v3.oas.models.headers.Header;\n import io.swagger.v3.oas.models.media.Content;\n import io.swagger.v3.oas.models.media.MediaType;\n import io.swagger.v3.oas.models.media.Schema;\n import io.swagger.v3.oas.models.parameters.HeaderParameter;\n import io.swagger.v3.oas.models.parameters.Parameter;\n import io.swagger.v3.oas.models.responses.ApiResponse;\n+import io.swagger.v3.oas.models.responses.ApiResponses;\n+import io.swagger.v3.oas.models.tags.Tag;\n import java.net.URL;\n import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashMap;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\n+import org.apache.cxf.jaxrs.model.doc.JavaDocProvider;\n import org.apache.cxf.jaxrs.openapi.OpenApiCustomizer;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.ErrorTO;\n@@ -41,40 +53,109 @@\n \n public class SyncopeOpenApiCustomizer extends OpenApiCustomizer {\n \n+    // remove the line below with CXF 3.2.7\n+    private JavaDocProvider javadocProvider;\n+\n+    // remove the line below with CXF 3.2.7\n+    private boolean replaceTags;\n+\n+    // remove the line below with CXF 3.2.7\n+    private List<ClassResourceInfo> cris;\n+\n     private List<String> domains;\n \n     public SyncopeOpenApiCustomizer() {\n         super();\n \n         URL[] javaDocURLs = JavaDocUtils.getJavaDocURLs();\n         if (javaDocURLs != null) {\n+            // remove the line below with CXF 3.2.7\n+            this.javadocProvider = new JavaDocProvider(javaDocURLs);\n             super.setJavaDocURLs(javaDocURLs);\n         }\n     }\n \n     @Override\n-    public OpenAPIConfiguration customize(final OpenAPIConfiguration configuration) {\n-        Map<String, Header> headers = new LinkedHashMap<>();\n-        headers.put(\n-                RESTHeaders.ERROR_CODE,\n-                new Header().schema(new Schema<>().type(\"string\")).description(\"Error code\"));\n-        headers.put(\n-                RESTHeaders.ERROR_INFO,\n-                new Header().schema(new Schema<>().type(\"string\")).description(\"Error message\"));\n+    public void setReplaceTags(final boolean replaceTags) {\n+        // remove this method with CXF 3.2.7\n+        this.replaceTags = replaceTags;\n+        super.setReplaceTags(replaceTags);\n+    }\n \n-        Content content = new Content();\n-        content.addMediaType(\n-                javax.ws.rs.core.MediaType.APPLICATION_JSON, new MediaType().schema(new Schema<ErrorTO>()));\n-        content.addMediaType(\n-                javax.ws.rs.core.MediaType.APPLICATION_XML, new MediaType().schema(new Schema<ErrorTO>()));\n+    @Override\n+    public void setClassResourceInfos(final List<ClassResourceInfo> classResourceInfos) {\n+        // remove this method with CXF 3.2.7\n+        this.cris = classResourceInfos;\n+        super.setClassResourceInfos(classResourceInfos);\n+    }\n \n-        configuration.getOpenAPI().getComponents().addResponses(\"400\", new ApiResponse().\n-                description(\"An error occurred; HTTP status code can vary depending on the actual error: \"\n-                        + \"400, 403, 404, 409, 412\").\n-                headers(headers).\n-                content(content));\n+    @Override\n+    public void customize(final OpenAPI oas) {\n+        // remove this method with CXF 3.2.7\n+        if (replaceTags || javadocProvider != null) {\n+            Map<String, ClassResourceInfo> operations = new HashMap<>();\n+            Map<Pair<String, String>, OperationResourceInfo> methods = new HashMap<>();\n+            cris.forEach(cri -> {\n+                cri.getMethodDispatcher().getOperationResourceInfos().forEach(ori -> {\n+                    String normalizedPath = getNormalizedPath(\n+                            cri.getURITemplate().getValue(), ori.getURITemplate().getValue());\n+\n+                    operations.put(normalizedPath, cri);\n+                    methods.put(Pair.of(ori.getHttpMethod(), normalizedPath), ori);\n+                });\n+            });\n+\n+            List<Tag> tags = new ArrayList<>();\n+            oas.getPaths().forEach((pathKey, pathItem) -> {\n+                Tag tag = null;\n+                if (replaceTags && operations.containsKey(pathKey)) {\n+                    ClassResourceInfo cri = operations.get(pathKey);\n+\n+                    tag = new Tag();\n+                    tag.setName(cri.getURITemplate().getValue().replaceAll(\"/\", \"_\"));\n+                    if (javadocProvider != null) {\n+                        tag.setDescription(javadocProvider.getClassDoc(cri));\n+                    }\n+\n+                    if (!tags.contains(tag)) {\n+                        tags.add(tag);\n+                    }\n+                }\n+\n+                for (Map.Entry<PathItem.HttpMethod, Operation> subentry : pathItem.readOperationsMap().entrySet()) {\n+                    if (replaceTags && tag != null) {\n+                        subentry.getValue().setTags(Collections.singletonList(tag.getName()));\n+                    }\n+\n+                    Pair<String, String> key = Pair.of(subentry.getKey().name(), pathKey);\n+                    if (methods.containsKey(key) && javadocProvider != null) {\n+                        OperationResourceInfo ori = methods.get(key);\n+\n+                        if (StringUtils.isBlank(subentry.getValue().getSummary())) {\n+                            subentry.getValue().setSummary(javadocProvider.getMethodDoc(ori));\n+                        }\n+                        if (subentry.getValue().getParameters() == null) {\n+                            List<Parameter> parameters = new ArrayList<>();\n+                            addParameters(parameters);\n+                            subentry.getValue().setParameters(parameters);\n+                        } else {\n+                            for (int i = 0; i < subentry.getValue().getParameters().size(); i++) {\n+                                if (StringUtils.isBlank(subentry.getValue().getParameters().get(i).getDescription())) {\n+                                    subentry.getValue().getParameters().get(i).\n+                                            setDescription(javadocProvider.getMethodParameterDoc(ori, i));\n+                                }\n+                            }\n+                            addParameters(subentry.getValue().getParameters());\n+                        }\n \n-        return super.customize(configuration);\n+                        customizeResponses(subentry.getValue(), ori);\n+                    }\n+                }\n+            });\n+            if (replaceTags && oas.getTags() != null) {\n+                oas.setTags(tags);\n+            }\n+        }\n     }\n \n     @Override\n@@ -102,4 +183,52 @@ protected void addParameters(final List<Parameter> parameters) {\n             parameters.add(parameter);\n         }\n     }\n+\n+    protected void customizeResponses(final Operation operation, final OperationResourceInfo ori) {\n+        // this will be replaced by super.customizeResponses(operation, ori);\n+        if (operation.getResponses() != null && !operation.getResponses().isEmpty()) {\n+            ApiResponse response = operation.getResponses().entrySet().iterator().next().getValue();\n+            if (StringUtils.isBlank(response.getDescription())\n+                    || (StringUtils.isNotBlank(javadocProvider.getMethodResponseDoc(ori))\n+                    && Reader.DEFAULT_DESCRIPTION.equals(response.getDescription()))) {\n+\n+                response.setDescription(javadocProvider.getMethodResponseDoc(ori));\n+            }\n+        }\n+        //\n+\n+        ApiResponses responses = operation.getResponses();\n+        if (responses == null) {\n+            responses = new ApiResponses();\n+            operation.setResponses(responses);\n+        }\n+\n+        ApiResponse defaultResponse = responses.getDefault();\n+        if (defaultResponse != null) {\n+            responses.remove(ApiResponses.DEFAULT);\n+            responses.addApiResponse(\"200\", defaultResponse);\n+        }\n+\n+        Map<String, Header> headers = new LinkedHashMap<>();\n+        headers.put(\n+                RESTHeaders.ERROR_CODE,\n+                new Header().schema(new Schema<>().type(\"string\")).description(\"Error code\"));\n+        headers.put(\n+                RESTHeaders.ERROR_INFO,\n+                new Header().schema(new Schema<>().type(\"string\")).description(\"Error message\"));\n+\n+        Content content = new Content();\n+        content.addMediaType(\n+                javax.ws.rs.core.MediaType.APPLICATION_JSON, new MediaType().schema(new Schema<ErrorTO>()));\n+        content.addMediaType(\n+                RESTHeaders.APPLICATION_YAML, new MediaType().schema(new Schema<ErrorTO>()));\n+        content.addMediaType(\n+                javax.ws.rs.core.MediaType.APPLICATION_XML, new MediaType().schema(new Schema<ErrorTO>()));\n+\n+        responses.addApiResponse(\"400\", new ApiResponse().\n+                description(\"An error occurred; HTTP status code can vary depending on the actual error: \"\n+                        + \"400, 403, 404, 409, 412\").\n+                headers(headers).\n+                content(content));\n+    }\n }"},{"sha":"fcf02201e2ac2be1ca70a5bec0aa549e434f0023","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/BpmnProcessService.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FBpmnProcessService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FBpmnProcessService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FBpmnProcessService.java?ref=c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","patch":"@@ -19,9 +19,6 @@\n package org.apache.syncope.common.rest.api.service;\n \n import io.swagger.v3.oas.annotations.Operation;\n-import io.swagger.v3.oas.annotations.media.ArraySchema;\n-import io.swagger.v3.oas.annotations.media.Content;\n-import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n@@ -56,11 +53,6 @@ public interface BpmnProcessService extends JAXRSService {\n      *\n      * @return available BPMN processs\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\", description = \"available BPMN processes\", content =\n-                    @Content(array =\n-                            @ArraySchema(schema =\n-                                    @Schema(implementation = BpmnProcess.class)))))\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     List<BpmnProcess> list();"},{"sha":"11aac5085b316a396f45a7cd81fc9da33b9aefc6","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserRequestService.java","status":"modified","additions":0,"deletions":23,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserRequestService.java?ref=c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.media.Content;\n-import io.swagger.v3.oas.annotations.media.Schema;\n import io.swagger.v3.oas.annotations.responses.ApiResponse;\n import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n@@ -60,10 +58,6 @@ public interface UserRequestService extends JAXRSService {\n      * @param query query conditions\n      * @return list of all running user requests\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\", description = \"list of all running user requests\", content =\n-                    @Content(schema =\n-                            @Schema(implementation = PagedResult.class))))\n     @GET\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n     PagedResult<UserRequest> list(@BeanParam UserRequestQuery query);\n@@ -75,11 +69,6 @@ public interface UserRequestService extends JAXRSService {\n      * @param user if value looks like a UUID then it is interpreted as key otherwise as a username\n      * @return data about the started request service, including execution id\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\",\n-                    description = \"data about the started request service, including execution id\", content =\n-                    @Content(schema =\n-                            @Schema(implementation = UserRequest.class))))\n     @POST\n     @Path(\"start/{bpmnProcess}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -108,10 +97,6 @@ void cancel(\n      * @param query query conditions\n      * @return list of all available user request forms\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\", description = \"list of all available user request forms\", content =\n-                    @Content(schema =\n-                            @Schema(implementation = PagedResult.class))))\n     @GET\n     @Path(\"forms\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -123,10 +108,6 @@ void cancel(\n      * @param taskId workflow task id\n      * @return the form for the given task id\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\", description = \"the form for the given task id\", content =\n-                    @Content(schema =\n-                            @Schema(implementation = UserRequestForm.class))))\n     @POST\n     @Path(\"forms/{taskId}/claim\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -138,10 +119,6 @@ void cancel(\n      * @param form user request form.\n      * @return updated user\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\", description = \"updated user\", content =\n-                    @Content(schema =\n-                            @Schema(implementation = UserTO.class))))\n     @POST\n     @Path(\"forms\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"},{"sha":"f379ecad3373672243e2fc94a2a78f30638ab406","filename":"ext/flowable/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserWorkflowTaskService.java","status":"modified","additions":4,"deletions":13,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c448befbcf37f52bd1a1bd6849bc1503b99b3a7e/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserWorkflowTaskService.java?ref=c448befbcf37f52bd1a1bd6849bc1503b99b3a7e","patch":"@@ -18,11 +18,9 @@\n  */\n package org.apache.syncope.common.rest.api.service;\n \n-import io.swagger.v3.oas.annotations.media.ArraySchema;\n-import io.swagger.v3.oas.annotations.media.Content;\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n import io.swagger.v3.oas.annotations.media.Schema;\n-import io.swagger.v3.oas.annotations.responses.ApiResponse;\n-import io.swagger.v3.oas.annotations.responses.ApiResponses;\n import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n@@ -53,11 +51,6 @@ public interface UserWorkflowTaskService extends JAXRSService {\n      * @param userKey user key\n      * @return list of available tasks for the given user key\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\", description = \"list of available tasks for the given user key\", content =\n-                    @Content(array =\n-                            @ArraySchema(schema =\n-                                    @Schema(implementation = WorkflowTask.class)))))\n     @GET\n     @Path(\"tasks/{userKey}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n@@ -69,10 +62,8 @@ public interface UserWorkflowTaskService extends JAXRSService {\n      * @param workflowTaskExecInput input for task execution\n      * @return updated user\n      */\n-    @ApiResponses(\n-            @ApiResponse(responseCode = \"200\", description = \"updated user\", content =\n-                    @Content(schema =\n-                            @Schema(implementation = UserTO.class))))\n+    @Parameter(name = \"userKey\", description = \"user key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n     @POST\n     @Path(\"tasks/{userKey}\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })"}]}