{"sha":"a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE2ZTljZDhmZWYyMTEyY2VmYjVjOTYyZGQ3NmI2Y2QzMWU4OWUzMTI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-06T16:15:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-11-06T16:16:50Z"},"message":"[SYNCOPE-1392] Removing BeanUtils#copyProperties","tree":{"sha":"a86ec7641ba3d682bcc555c89d2f3b13a84060ea","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a86ec7641ba3d682bcc555c89d2f3b13a84060ea"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8bbfe71a3e556fb7ef57fc092dc297b65b807253","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8bbfe71a3e556fb7ef57fc092dc297b65b807253","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8bbfe71a3e556fb7ef57fc092dc297b65b807253"}],"stats":{"total":980,"additions":374,"deletions":606},"files":[{"sha":"57e200722fdc3585989a9478bbd40944110e2a70","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -55,7 +55,6 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Logger;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n@@ -116,7 +115,8 @@ public List<LogStatement> getLastLogStatements(final String memoryAppender) {\n     private List<LoggerTO> list(final LoggerType type) {\n         return loggerDAO.findAll(type).stream().map(logger -> {\n             LoggerTO loggerTO = new LoggerTO();\n-            BeanUtils.copyProperties(logger, loggerTO);\n+            loggerTO.setKey(logger.getKey());\n+            loggerTO.setLevel(logger.getLevel());\n             return loggerTO;\n         }).collect(Collectors.toList());\n     }\n@@ -230,7 +230,8 @@ private LoggerTO setLevel(final String name, final Level level, final LoggerType\n         ctx.updateLoggers();\n \n         LoggerTO result = new LoggerTO();\n-        BeanUtils.copyProperties(syncopeLogger, result);\n+        result.setKey(syncopeLogger.getKey());\n+        result.setLevel(syncopeLogger.getLevel());\n \n         return result;\n     }\n@@ -262,7 +263,8 @@ private LoggerTO delete(final String name, final LoggerType expectedType) {\n         }\n \n         LoggerTO loggerToDelete = new LoggerTO();\n-        BeanUtils.copyProperties(syncopeLogger, loggerToDelete);\n+        loggerToDelete.setKey(syncopeLogger.getKey());\n+        loggerToDelete.setLevel(syncopeLogger.getLevel());\n \n         // remove SyncopeLogger from local storage, so that LoggerLoader won't load this next time\n         loggerDAO.delete(syncopeLogger);"},{"sha":"568b00796e58cfca09a0c036ce48feb25cf78ec5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":9,"deletions":34,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -58,7 +58,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n import org.springframework.transaction.annotation.Propagation;\n@@ -69,41 +68,17 @@\n     @Autowired\n     protected ApplicationEventPublisher publisher;\n \n+    @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n+    @Autowired\n     private DerSchemaDAO derSchemaDAO;\n \n-    private DynRealmDAO dynRealmDAO;\n+    @Autowired\n+    protected DynRealmDAO dynRealmDAO;\n \n     private AnyUtils anyUtils;\n \n-    private PlainSchemaDAO plainSchemaDAO() {\n-        synchronized (this) {\n-            if (plainSchemaDAO == null) {\n-                plainSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(PlainSchemaDAO.class);\n-            }\n-        }\n-        return plainSchemaDAO;\n-    }\n-\n-    private DerSchemaDAO derSchemaDAO() {\n-        synchronized (this) {\n-            if (derSchemaDAO == null) {\n-                derSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(DerSchemaDAO.class);\n-            }\n-        }\n-        return derSchemaDAO;\n-    }\n-\n-    protected DynRealmDAO dynRealmDAO() {\n-        synchronized (this) {\n-            if (dynRealmDAO == null) {\n-                dynRealmDAO = ApplicationContextProvider.getApplicationContext().getBean(DynRealmDAO.class);\n-            }\n-        }\n-        return dynRealmDAO;\n-    }\n-\n     protected abstract AnyUtils init();\n \n     protected AnyUtils anyUtils() {\n@@ -197,7 +172,7 @@ public List<A> findByPlainAttrValue(\n             final PlainAttrValue attrValue,\n             final boolean ignoreCaseMatch) {\n \n-        PlainSchema schema = plainSchemaDAO().find(schemaKey);\n+        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n         if (schema == null) {\n             LOG.error(\"Invalid schema '{}'\", schemaKey);\n             return Collections.<A>emptyList();\n@@ -235,7 +210,7 @@ public A findByPlainAttrUniqueValue(\n             final PlainAttrValue attrUniqueValue,\n             final boolean ignoreCaseMatch) {\n \n-        PlainSchema schema = plainSchemaDAO().find(schemaKey);\n+        PlainSchema schema = plainSchemaDAO.find(schemaKey);\n         if (schema == null) {\n             LOG.error(\"Invalid schema '{}'\", schemaKey);\n             return null;\n@@ -334,7 +309,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n         for (int i = 0; i < identifiers.size(); i++) {\n             if (!used.contains(identifiers.get(i))) {\n                 // verify schema existence and get schema type\n-                PlainSchema schema = plainSchemaDAO().find(identifiers.get(i));\n+                PlainSchema schema = plainSchemaDAO.find(identifiers.get(i));\n                 if (schema == null) {\n                     LOG.error(\"Invalid schema '{}', ignoring\", identifiers.get(i));\n                 } else {\n@@ -394,7 +369,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n \n     @Override\n     public List<A> findByDerAttrValue(final String schemaKey, final String value, final boolean ignoreCaseMatch) {\n-        DerSchema schema = derSchemaDAO().find(schemaKey);\n+        DerSchema schema = derSchemaDAO.find(schemaKey);\n         if (schema == null) {\n             LOG.error(\"Invalid schema '{}'\", schemaKey);\n             return Collections.<A>emptyList();\n@@ -541,7 +516,7 @@ public List<String> findDynRealms(final String key) {\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n                 forEachOrdered((actualKey) -> {\n-                    DynRealm dynRealm = dynRealmDAO().find(actualKey.toString());\n+                    DynRealm dynRealm = dynRealmDAO.find(actualKey.toString());\n                     if (dynRealm == null) {\n                         LOG.error(\"Could not find dynRealm with id {}, even though returned by the native query\",\n                                 actualKey);"},{"sha":"278434f07c67aaf691e6d6a804b5b933c78cb804","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":9,"deletions":25,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -55,36 +55,20 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAAnyObjectDAO extends AbstractAnyDAO<AnyObject> implements AnyObjectDAO {\n \n+    @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n     private GroupDAO groupDAO;\n \n-    private UserDAO userDAO() {\n-        synchronized (this) {\n-            if (userDAO == null) {\n-                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);\n-            }\n-        }\n-        return userDAO;\n-    }\n-\n-    private GroupDAO groupDAO() {\n-        synchronized (this) {\n-            if (groupDAO == null) {\n-                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);\n-            }\n-        }\n-        return groupDAO;\n-    }\n-\n     @Override\n     protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);\n@@ -211,8 +195,8 @@ private Pair<AnyObject, Pair<Set<String>, Set<String>>> doSave(final AnyObject a\n         AnyObject merged = super.save(anyObject);\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n-        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO().refreshDynMemberships(merged);\n-        dynRealmDAO().refreshDynMemberships(merged);\n+        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n+        dynRealmDAO.refreshDynMemberships(merged);\n \n         return Pair.of(merged, dynGroupMembs);\n     }\n@@ -247,8 +231,8 @@ private List<URelationship> findURelationships(final AnyObject anyObject) {\n \n     @Override\n     public void delete(final AnyObject anyObject) {\n-        groupDAO().removeDynMemberships(anyObject);\n-        dynRealmDAO().removeDynMemberships(anyObject.getKey());\n+        groupDAO.removeDynMemberships(anyObject);\n+        dynRealmDAO.removeDynMemberships(anyObject.getKey());\n \n         findARelationships(anyObject).forEach(relationship -> {\n             relationship.getLeftEnd().getRelationships().remove(relationship);\n@@ -258,7 +242,7 @@ public void delete(final AnyObject anyObject) {\n         });\n         findURelationships(anyObject).forEach(relationship -> {\n             relationship.getLeftEnd().getRelationships().remove(relationship);\n-            userDAO().save(relationship.getLeftEnd());\n+            userDAO.save(relationship.getLeftEnd());\n \n             entityManager().remove(relationship);\n         });\n@@ -281,7 +265,7 @@ public List<Group> findDynGroups(final String key) {\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n                 forEachOrdered(actualKey -> {\n-                    Group group = groupDAO().find(actualKey.toString());\n+                    Group group = groupDAO.find(actualKey.toString());\n                     if (group == null) {\n                         LOG.error(\"Could not find group with id {}, even though returned by the native query\",\n                                 actualKey);"},{"sha":"7fc9585ca9fdf0a7a2d3fd77a8bf286729f78489","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADynRealmDAO.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADynRealmDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -47,24 +47,16 @@ public class JPADynRealmDAO extends AbstractDAO<DynRealm> implements DynRealmDAO\n     @Autowired\n     private ApplicationEventPublisher publisher;\n \n+    @Autowired\n     private AnySearchDAO searchDAO;\n \n     private AnySearchDAO jpaAnySearchDAO;\n \n-    private AnySearchDAO searchDAO() {\n-        synchronized (this) {\n-            if (searchDAO == null) {\n-                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);\n-            }\n-        }\n-        return searchDAO;\n-    }\n-\n     private AnySearchDAO jpaAnySearchDAO() {\n         synchronized (this) {\n             if (jpaAnySearchDAO == null) {\n-                if (AopUtils.getTargetClass(searchDAO()).equals(JPAAnySearchDAO.class)) {\n-                    jpaAnySearchDAO = searchDAO();\n+                if (AopUtils.getTargetClass(searchDAO).equals(JPAAnySearchDAO.class)) {\n+                    jpaAnySearchDAO = searchDAO;\n                 } else {\n                     jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().\n                             createBean(JPAAnySearchDAO.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);"},{"sha":"f684a154033ad21eec03fd1c7acd396c7c20d2b6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":19,"deletions":85,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -52,7 +52,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.provisioning.api.ConnectorRegistry;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -65,95 +64,30 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource> implem\n     @Autowired\n     private ConnectorRegistry connRegistry;\n \n+    @Autowired\n     private TaskDAO taskDAO;\n \n+    @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n+    @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n     private PolicyDAO policyDAO;\n \n+    @Autowired\n     private VirSchemaDAO virSchemaDAO;\n \n+    @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n     private ExternalResourceHistoryConfDAO externalResourceHistoryConfDAO;\n \n-    private TaskDAO taskDAO() {\n-        synchronized (this) {\n-            if (taskDAO == null) {\n-                taskDAO = ApplicationContextProvider.getApplicationContext().getBean(TaskDAO.class);\n-            }\n-        }\n-        return taskDAO;\n-    }\n-\n-    private AnyObjectDAO anyObjectDAO() {\n-        synchronized (this) {\n-            if (anyObjectDAO == null) {\n-                anyObjectDAO = ApplicationContextProvider.getApplicationContext().getBean(AnyObjectDAO.class);\n-            }\n-        }\n-        return anyObjectDAO;\n-    }\n-\n-    private UserDAO userDAO() {\n-        synchronized (this) {\n-            if (userDAO == null) {\n-                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);\n-            }\n-        }\n-        return userDAO;\n-    }\n-\n-    private GroupDAO groupDAO() {\n-        synchronized (this) {\n-            if (groupDAO == null) {\n-                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);\n-            }\n-        }\n-        return groupDAO;\n-    }\n-\n-    private PolicyDAO policyDAO() {\n-        synchronized (this) {\n-            if (policyDAO == null) {\n-                policyDAO = ApplicationContextProvider.getApplicationContext().getBean(PolicyDAO.class);\n-            }\n-        }\n-        return policyDAO;\n-    }\n-\n-    private VirSchemaDAO virSchemaDAO() {\n-        synchronized (this) {\n-            if (virSchemaDAO == null) {\n-                virSchemaDAO = ApplicationContextProvider.getApplicationContext().getBean(VirSchemaDAO.class);\n-            }\n-        }\n-        return virSchemaDAO;\n-    }\n-\n-    private RealmDAO realmDAO() {\n-        synchronized (this) {\n-            if (realmDAO == null) {\n-                realmDAO = ApplicationContextProvider.getApplicationContext().getBean(RealmDAO.class);\n-            }\n-        }\n-        return realmDAO;\n-    }\n-\n-    private ExternalResourceHistoryConfDAO externalResourceHistoryConfDAO() {\n-        synchronized (this) {\n-            if (externalResourceHistoryConfDAO == null) {\n-                externalResourceHistoryConfDAO = ApplicationContextProvider.getApplicationContext().\n-                        getBean(ExternalResourceHistoryConfDAO.class);\n-            }\n-        }\n-        return externalResourceHistoryConfDAO;\n-    }\n-\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n@@ -302,19 +236,19 @@ public void delete(final String name) {\n             return;\n         }\n \n-        taskDAO().deleteAll(resource, TaskType.PROPAGATION);\n-        taskDAO().deleteAll(resource, TaskType.PULL);\n-        taskDAO().deleteAll(resource, TaskType.PUSH);\n+        taskDAO.deleteAll(resource, TaskType.PROPAGATION);\n+        taskDAO.deleteAll(resource, TaskType.PULL);\n+        taskDAO.deleteAll(resource, TaskType.PUSH);\n \n-        realmDAO().findByResource(resource).\n+        realmDAO.findByResource(resource).\n                 forEach(realm -> realm.getResources().remove(resource));\n-        anyObjectDAO().findByResource(resource).\n+        anyObjectDAO.findByResource(resource).\n                 forEach(anyObject -> anyObject.getResources().remove(resource));\n-        userDAO().findByResource(resource).\n+        userDAO.findByResource(resource).\n                 forEach(user -> user.getResources().remove(resource));\n-        groupDAO().findByResource(resource).\n+        groupDAO.findByResource(resource).\n                 forEach(group -> group.getResources().remove(resource));\n-        policyDAO().findByResource(resource).\n+        policyDAO.findByResource(resource).\n                 forEach(policy -> policy.getResources().remove(resource));\n \n         resource.getProvisions().stream().\n@@ -327,10 +261,10 @@ public void delete(final String name) {\n                     provision.setMapping(null);\n                     provision.setResource(null);\n                 }).\n-                forEach(provision -> virSchemaDAO().findByProvision(provision).\n-                forEach(schema -> virSchemaDAO().delete(schema.getKey())));\n+                forEach(provision -> virSchemaDAO.findByProvision(provision).\n+                forEach(schema -> virSchemaDAO.delete(schema.getKey())));\n \n-        externalResourceHistoryConfDAO().deleteByEntity(resource);\n+        externalResourceHistoryConfDAO.deleteByEntity(resource);\n \n         if (resource.getConnector() != null && resource.getConnector().getResources() != null\n                 && !resource.getConnector().getResources().isEmpty()) {"},{"sha":"b8125ef19145a393605c37f1f340904cee62e709","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":18,"deletions":42,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -86,46 +86,22 @@ public class JPAGroupDAO extends AbstractAnyDAO<Group> implements GroupDAO {\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n+    @Autowired\n     private UserDAO userDAO;\n \n+    @Autowired\n     private AnyObjectDAO anyObjectDAO;\n \n+    @Autowired\n     private AnySearchDAO searchDAO;\n \n     private AnySearchDAO jpaAnySearchDAO;\n \n-    private UserDAO userDAO() {\n-        synchronized (this) {\n-            if (userDAO == null) {\n-                userDAO = ApplicationContextProvider.getApplicationContext().getBean(UserDAO.class);\n-            }\n-        }\n-        return userDAO;\n-    }\n-\n-    private AnyObjectDAO anyObjectDAO() {\n-        synchronized (this) {\n-            if (anyObjectDAO == null) {\n-                anyObjectDAO = ApplicationContextProvider.getApplicationContext().getBean(AnyObjectDAO.class);\n-            }\n-        }\n-        return anyObjectDAO;\n-    }\n-\n-    private AnySearchDAO searchDAO() {\n-        synchronized (this) {\n-            if (searchDAO == null) {\n-                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);\n-            }\n-        }\n-        return searchDAO;\n-    }\n-\n     private AnySearchDAO jpaAnySearchDAO() {\n         synchronized (this) {\n             if (jpaAnySearchDAO == null) {\n-                if (AopUtils.getTargetClass(searchDAO()).equals(JPAAnySearchDAO.class)) {\n-                    jpaAnySearchDAO = searchDAO();\n+                if (AopUtils.getTargetClass(searchDAO).equals(JPAAnySearchDAO.class)) {\n+                    jpaAnySearchDAO = searchDAO;\n                 } else {\n                     jpaAnySearchDAO = (AnySearchDAO) ApplicationContextProvider.getBeanFactory().\n                             createBean(JPAAnySearchDAO.class, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n@@ -210,16 +186,16 @@ public Group findByName(final String name) {\n     @Transactional(readOnly = true)\n     @Override\n     public List<Group> findOwnedByUser(final String userKey) {\n-        User owner = userDAO().find(userKey);\n+        User owner = userDAO.find(userKey);\n         if (owner == null) {\n             return Collections.<Group>emptyList();\n         }\n \n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAGroup.class.getSimpleName()).\n                 append(\" e WHERE e.userOwner=:owner \");\n-        for (String groupKey : userDAO().findAllGroupKeys(owner)) {\n+        userDAO.findAllGroupKeys(owner).forEach(groupKey -> {\n             queryString.append(\"OR e.groupOwner.id='\").append(groupKey).append(\"' \");\n-        }\n+        });\n \n         TypedQuery<Group> query = entityManager().createQuery(queryString.toString(), Group.class);\n         query.setParameter(\"owner\", owner);\n@@ -289,10 +265,10 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         clearUDynMembers(merged);\n         if (merged.getUDynMembership() != null) {\n             SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm());\n-            int count = searchDAO().count(\n+            int count = searchDAO.count(\n                     Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-                List<User> matching = searchDAO().search(\n+                List<User> matching = searchDAO.search(\n                         Collections.<String>singleton(merged.getRealm().getFullPath()),\n                         cond,\n                         page,\n@@ -313,10 +289,10 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n         clearADynMembers(merged);\n         merged.getADynMemberships().stream().forEach(memb -> {\n             SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());\n-            int count = searchDAO().count(\n+            int count = searchDAO.count(\n                     Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n             for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n-                List<AnyObject> matching = searchDAO().search(\n+                List<AnyObject> matching = searchDAO.search(\n                         Collections.<String>singleton(merged.getRealm().getFullPath()),\n                         cond,\n                         page,\n@@ -337,14 +313,14 @@ public Group saveAndRefreshDynMemberships(final Group group) {\n             }\n         });\n \n-        dynRealmDAO().refreshDynMemberships(merged);\n+        dynRealmDAO.refreshDynMemberships(merged);\n \n         return merged;\n     }\n \n     @Override\n     public void delete(final Group group) {\n-        dynRealmDAO().removeDynMemberships(group.getKey());\n+        dynRealmDAO.removeDynMemberships(group.getKey());\n \n         findAMemberships(group).forEach(membership -> {\n             AnyObject leftEnd = membership.getLeftEnd();\n@@ -357,7 +333,7 @@ public void delete(final Group group) {\n                 return attr;\n             }).forEachOrdered(attr -> plainAttrDAO.delete(attr));\n \n-            anyObjectDAO().save(leftEnd);\n+            anyObjectDAO.save(leftEnd);\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n         });\n \n@@ -372,7 +348,7 @@ public void delete(final Group group) {\n                 return attr;\n             }).forEachOrdered(attr -> plainAttrDAO.delete(attr));\n \n-            userDAO().save(leftEnd);\n+            userDAO.save(leftEnd);\n             publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, leftEnd, AuthContextUtils.getDomain()));\n         });\n \n@@ -506,7 +482,7 @@ public Pair<Set<String>, Set<String>> refreshDynMemberships(final AnyObject anyO\n \n     @Override\n     public Set<String> removeDynMemberships(final AnyObject anyObject) {\n-        List<Group> dynGroups = anyObjectDAO().findDynGroups(anyObject.getKey());\n+        List<Group> dynGroups = anyObjectDAO.findDynGroups(anyObject.getKey());\n \n         Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + ADYNMEMB_TABLE + \" WHERE any_id=?\");\n         delete.setParameter(1, anyObject.getKey());\n@@ -591,7 +567,7 @@ public Pair<Set<String>, Set<String>> refreshDynMemberships(final User user) {\n \n     @Override\n     public Set<String> removeDynMemberships(final User user) {\n-        List<Group> dynGroups = userDAO().findDynGroups(user.getKey());\n+        List<Group> dynGroups = userDAO.findDynGroups(user.getKey());\n \n         Query delete = entityManager().createNativeQuery(\"DELETE FROM \" + UDYNMEMB_TABLE + \" WHERE any_id=?\");\n         delete.setParameter(1, user.getKey());"},{"sha":"ef569d75b2113da51d913f62a9e66d4e6f68a67b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAPlainSchemaDAO.java","status":"modified","additions":2,"deletions":11,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAPlainSchemaDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n@@ -43,17 +42,9 @@ public class JPAPlainSchemaDAO extends AbstractDAO<PlainSchema> implements Plain\n     @Autowired\n     private PlainAttrDAO plainAttrDAO;\n \n+    @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    private ExternalResourceDAO resourceDAO() {\n-        synchronized (this) {\n-            if (resourceDAO == null) {\n-                resourceDAO = ApplicationContextProvider.getApplicationContext().getBean(ExternalResourceDAO.class);\n-            }\n-        }\n-        return resourceDAO;\n-    }\n-\n     @Override\n     public PlainSchema find(final String key) {\n         return entityManager().find(JPAPlainSchema.class, key);\n@@ -132,7 +123,7 @@ public void delete(final String key) {\n                 plainAttrDAO.delete(attr.getKey(), anyUtils.plainAttrClass());\n             });\n \n-            resourceDAO().deleteMapping(key);\n+            resourceDAO.deleteMapping(key);\n         }\n \n         if (schema.getAnyTypeClass() != null) {"},{"sha":"4e8295df7af1917cd4eb10552a4035f169e6f61d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":3,"deletions":12,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -49,17 +48,9 @@ public class JPARoleDAO extends AbstractDAO<Role> implements RoleDAO {\n     @Autowired\n     private ApplicationEventPublisher publisher;\n \n+    @Autowired\n     private AnySearchDAO searchDAO;\n \n-    private AnySearchDAO searchDAO() {\n-        synchronized (this) {\n-            if (searchDAO == null) {\n-                searchDAO = ApplicationContextProvider.getApplicationContext().getBean(AnySearchDAO.class);\n-            }\n-        }\n-        return searchDAO;\n-    }\n-\n     @Override\n     public int count() {\n         Query query = entityManager().createQuery(\n@@ -108,7 +99,7 @@ public Role saveAndRefreshDynMemberships(final Role role) {\n         // refresh dynamic memberships\n         clearDynMembers(merged);\n         if (merged.getDynMembership() != null) {\n-            List<User> matching = searchDAO().search(\n+            List<User> matching = searchDAO.search(\n                     SearchCondConverter.convert(merged.getDynMembership().getFIQLCond()), AnyTypeKind.USER);\n \n             matching.forEach((user) -> {\n@@ -187,7 +178,7 @@ public void refreshDynMemberships(final User user) {\n             delete.setParameter(2, user.getKey());\n             delete.executeUpdate();\n \n-            if (searchDAO().matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n+            if (searchDAO.matches(user, SearchCondConverter.convert(role.getDynMembership().getFIQLCond()))) {\n                 Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + DYNMEMB_TABLE + \" VALUES(?, ?)\");\n                 insert.setParameter(1, user.getKey());\n                 insert.setParameter(2, role.getKey());"},{"sha":"a86ee8e9e65f6828f271e4af66f49fbad26809f7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":13,"deletions":30,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -43,7 +43,6 @@\n import org.apache.syncope.core.provisioning.api.utils.policy.PasswordPolicyException;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n@@ -88,33 +87,17 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     @Autowired\n     private AccessTokenDAO accessTokenDAO;\n \n-    @Resource(name = \"adminUser\")\n-    private String adminUser;\n-\n-    @Resource(name = \"anonymousUser\")\n-    private String anonymousUser;\n-\n+    @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n     private GroupDAO groupDAO;\n \n-    private RealmDAO realmDAO() {\n-        synchronized (this) {\n-            if (realmDAO == null) {\n-                realmDAO = ApplicationContextProvider.getApplicationContext().getBean(RealmDAO.class);\n-            }\n-        }\n-        return realmDAO;\n-    }\n+    @Resource(name = \"adminUser\")\n+    private String adminUser;\n \n-    private GroupDAO groupDAO() {\n-        synchronized (this) {\n-            if (groupDAO == null) {\n-                groupDAO = ApplicationContextProvider.getApplicationContext().getBean(GroupDAO.class);\n-            }\n-        }\n-        return groupDAO;\n-    }\n+    @Resource(name = \"anonymousUser\")\n+    private String anonymousUser;\n \n     @Override\n     protected AnyUtils init() {\n@@ -244,7 +227,7 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n         }\n \n         // add realm policies\n-        for (Realm realm : realmDAO().findAncestors(user.getRealm())) {\n+        for (Realm realm : realmDAO.findAncestors(user.getRealm())) {\n             policy = realm.getPasswordPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n@@ -274,7 +257,7 @@ private List<AccountPolicy> getAccountPolicies(final User user) {\n                 forEachOrdered(policy -> policies.add(policy));\n \n         // add realm policies\n-        realmDAO().findAncestors(user.getRealm()).stream().\n+        realmDAO.findAncestors(user.getRealm()).stream().\n                 map(realm -> realm.getAccountPolicy()).\n                 filter(policy -> policy != null).\n                 forEachOrdered(policy -> policies.add(policy));\n@@ -401,8 +384,8 @@ private Pair<User, Pair<Set<String>, Set<String>>> doSave(final User user) {\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n         roleDAO.refreshDynMemberships(merged);\n-        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO().refreshDynMemberships(merged);\n-        dynRealmDAO().refreshDynMemberships(merged);\n+        Pair<Set<String>, Set<String>> dynGroupMembs = groupDAO.refreshDynMemberships(merged);\n+        dynRealmDAO.refreshDynMemberships(merged);\n \n         return Pair.of(merged, dynGroupMembs);\n     }\n@@ -420,8 +403,8 @@ public Pair<Set<String>, Set<String>> saveAndGetDynGroupMembs(final User user) {\n     @Override\n     public void delete(final User user) {\n         roleDAO.removeDynMemberships(user.getKey());\n-        groupDAO().removeDynMemberships(user);\n-        dynRealmDAO().removeDynMemberships(user.getKey());\n+        groupDAO.removeDynMemberships(user);\n+        dynRealmDAO.removeDynMemberships(user.getKey());\n \n         AccessToken accessToken = accessTokenDAO.findByOwner(user.getUsername());\n         if (accessToken != null) {\n@@ -480,7 +463,7 @@ public List<Group> findDynGroups(final String key) {\n                 ? (String) ((Object[]) resultKey)[0]\n                 : ((String) resultKey)).\n                 forEachOrdered(actualKey -> {\n-                    Group group = groupDAO().find(actualKey.toString());\n+                    Group group = groupDAO.find(actualKey.toString());\n                     if (group == null) {\n                         LOG.error(\"Could not find group with id {}, even though returned by the native query\",\n                                 actualKey);"},{"sha":"1d3043be9eaeb54ed09922cb0823ad99398e2b8a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAVirSchemaDAO.java","status":"modified","additions":3,"deletions":11,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAVirSchemaDAO.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -38,23 +38,15 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMapping;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n @Repository\n public class JPAVirSchemaDAO extends AbstractDAO<VirSchema> implements VirSchemaDAO {\n \n+    @Autowired\n     private ExternalResourceDAO resourceDAO;\n \n-    private ExternalResourceDAO resourceDAO() {\n-        synchronized (this) {\n-            if (resourceDAO == null) {\n-                resourceDAO = ApplicationContextProvider.getApplicationContext().getBean(ExternalResourceDAO.class);\n-            }\n-        }\n-        return resourceDAO;\n-    }\n-\n     @Override\n     public VirSchema find(final String key) {\n         return entityManager().find(JPAVirSchema.class, key);\n@@ -137,7 +129,7 @@ public void delete(final String key) {\n \n         schema.getLabels().forEach(label -> label.setSchema(null));\n \n-        resourceDAO().deleteMapping(key);\n+        resourceDAO.deleteMapping(key);\n \n         if (schema.getAnyTypeClass() != null) {\n             schema.getAnyTypeClass().getVirSchemas().remove(schema);"},{"sha":"9e1c8c91add3ff0734374f47531f5f8a7f5cb7c5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -34,7 +34,6 @@\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.spring.security.DefaultCredentialChecker;\n import org.apache.syncope.core.spring.security.SecureRandomUtils;\n import org.apache.syncope.core.spring.security.jws.AccessTokenJwsSignatureProvider;\n@@ -176,7 +175,10 @@ public Pair<String, Date> update(final AccessToken accessToken, final byte[] aut\n     @Override\n     public AccessTokenTO getAccessTokenTO(final AccessToken accessToken) {\n         AccessTokenTO accessTokenTO = new AccessTokenTO();\n-        BeanUtils.copyProperties(accessToken, accessTokenTO);\n+        accessTokenTO.setKey(accessToken.getKey());\n+        accessTokenTO.setBody(accessToken.getBody());\n+        accessTokenTO.setExpiryTime(accessToken.getExpiryTime());\n+        accessTokenTO.setOwner(accessToken.getOwner());\n \n         return accessTokenTO;\n     }"},{"sha":"3bab7fe1fc781bcb28639bff01967881e9b228d1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":7,"deletions":9,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -40,7 +40,6 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -63,11 +62,6 @@\n @Transactional(rollbackFor = { Throwable.class })\n public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements AnyObjectDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = {\n-        \"type\", \"realm\", \"auxClasses\", \"relationships\", \"memberships\", \"dynMemberships\",\n-        \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\"\n-    };\n-\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n@@ -80,9 +74,14 @@ public AnyObjectTO getAnyObjectTO(final String key) {\n     @Override\n     public AnyObjectTO getAnyObjectTO(final AnyObject anyObject, final boolean details) {\n         AnyObjectTO anyObjectTO = new AnyObjectTO();\n+        anyObjectTO.setKey(anyObject.getKey());\n+        anyObjectTO.setName(anyObject.getName());\n         anyObjectTO.setType(anyObject.getType().getKey());\n-\n-        BeanUtils.copyProperties(anyObject, anyObjectTO, IGNORE_PROPERTIES);\n+        anyObjectTO.setCreationDate(anyObject.getCreationDate());\n+        anyObjectTO.setCreator(anyObject.getCreator());\n+        anyObjectTO.setLastChangeDate(anyObject.getLastChangeDate());\n+        anyObjectTO.setLastModifier(anyObject.getLastModifier());\n+        anyObjectTO.setStatus(anyObject.getStatus());\n \n         Map<VirSchema, List<String>> virAttrValues = details\n                 ? virAttrHandler.getValues(anyObject)\n@@ -471,5 +470,4 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n \n         return propByRes;\n     }\n-\n }"},{"sha":"d08338fba6242f9784ee0906b945790425617968","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ConnInstanceDataBinderImpl.java","status":"modified","additions":20,"deletions":8,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FConnInstanceDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -48,7 +48,6 @@\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -57,8 +56,6 @@\n @Component\n public class ConnInstanceDataBinderImpl implements ConnInstanceDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = { \"key\", \"poolConf\", \"location\", \"adminRealm\", \"conf\" };\n-\n     @Autowired\n     private ConnIdBundleManager connIdBundleManager;\n \n@@ -103,7 +100,13 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n \n         ConnInstance connInstance = entityFactory.newEntity(ConnInstance.class);\n \n-        BeanUtils.copyProperties(connInstanceTO, connInstance, IGNORE_PROPERTIES);\n+        connInstance.setBundleName(connInstanceTO.getBundleName());\n+        connInstance.setConnectorName(connInstanceTO.getConnectorName());\n+        connInstance.setVersion(connInstanceTO.getVersion());\n+        connInstance.setDisplayName(connInstanceTO.getDisplayName());\n+        connInstance.setConnRequestTimeout(connInstanceTO.getConnRequestTimeout());\n+        connInstance.getCapabilities().addAll(connInstanceTO.getCapabilities());\n+\n         if (connInstanceTO.getAdminRealm() != null) {\n             connInstance.setAdminRealm(realmDAO.findByFullPath(connInstanceTO.getAdminRealm()));\n         }\n@@ -242,13 +245,18 @@ public ConnConfPropSchema build(final ConfigurationProperty property) {\n \n     @Override\n     public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n-        ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n-\n         Pair<URI, ConnectorInfo> info = connIdBundleManager.getConnectorInfo(connInstance);\n-        BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n+\n+        ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n         connInstanceTO.setKey(connInstance.getKey());\n+        connInstanceTO.setBundleName(connInstance.getBundleName());\n+        connInstanceTO.setConnectorName(connInstance.getConnectorName());\n+        connInstanceTO.setVersion(connInstance.getVersion());\n+        connInstanceTO.setDisplayName(connInstance.getDisplayName());\n+        connInstanceTO.setConnRequestTimeout(connInstance.getConnRequestTimeout());\n         connInstanceTO.setAdminRealm(connInstance.getAdminRealm().getFullPath());\n         connInstanceTO.setLocation(info.getLeft().toASCIIString());\n+        connInstanceTO.getCapabilities().addAll(connInstance.getCapabilities());\n         connInstanceTO.getConf().addAll(connInstance.getConf());\n         // refresh stored properties in the given connInstance with direct information from underlying connector\n         ConfigurationProperties properties = connIdBundleManager.getConfigurationProperties(info.getRight());\n@@ -273,7 +281,11 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n                 || connInstance.getPoolConf().getMinIdle() != null)) {\n \n             ConnPoolConfTO poolConf = new ConnPoolConfTO();\n-            BeanUtils.copyProperties(connInstance.getPoolConf(), poolConf);\n+            poolConf.setMaxIdle(connInstance.getPoolConf().getMaxIdle());\n+            poolConf.setMaxObjects(connInstance.getPoolConf().getMaxObjects());\n+            poolConf.setMaxWait(connInstance.getPoolConf().getMaxWait());\n+            poolConf.setMinEvictableIdleTimeMillis(connInstance.getPoolConf().getMinEvictableIdleTimeMillis());\n+            poolConf.setMinIdle(connInstance.getPoolConf().getMinIdle());\n             connInstanceTO.setPoolConf(poolConf);\n         }\n "},{"sha":"1346a91c1a9e60f720dcaf356ec0c81a37a4bee7","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ImplementationDataBinderImpl.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FImplementationDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -41,15 +41,14 @@\n import org.apache.syncope.core.provisioning.api.pushpull.PullActions;\n import org.apache.syncope.core.persistence.api.dao.PullCorrelationRule;\n import org.apache.syncope.core.persistence.api.dao.PushCorrelationRule;\n+import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;\n import org.apache.syncope.core.provisioning.api.pushpull.PushActions;\n import org.apache.syncope.core.provisioning.api.pushpull.ReconFilterBuilder;\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-import org.apache.syncope.core.provisioning.api.notification.RecipientsProvider;\n \n @Component\n public class ImplementationDataBinderImpl implements ImplementationDataBinder {\n@@ -80,7 +79,10 @@ public void update(final Implementation implementation, final ImplementationTO i\n             throw sce;\n         }\n \n-        BeanUtils.copyProperties(implementationTO, implementation);\n+        implementation.setKey(implementationTO.getKey());\n+        implementation.setEngine(implementationTO.getEngine());\n+        implementation.setType(implementationTO.getType());\n+        implementation.setBody(implementationTO.getBody());\n \n         if (implementation.getEngine() == ImplementationEngine.JAVA) {\n             Class<?> base = null;\n@@ -191,7 +193,11 @@ public void update(final Implementation implementation, final ImplementationTO i\n     @Override\n     public ImplementationTO getImplementationTO(final Implementation implementation) {\n         ImplementationTO implementationTO = new ImplementationTO();\n-        BeanUtils.copyProperties(implementation, implementationTO);\n+        implementationTO.setKey(implementation.getKey());\n+        implementationTO.setEngine(implementation.getEngine());\n+        implementationTO.setType(implementation.getType());\n+        implementationTO.setBody(implementation.getBody());\n+\n         return implementationTO;\n     }\n }"},{"sha":"edbe242337c8dc2d31be55aff252eb8506d6d13d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/NotificationDataBinderImpl.java","status":"modified","additions":23,"deletions":6,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FNotificationDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -29,7 +29,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n@@ -48,8 +47,6 @@ public class NotificationDataBinderImpl implements NotificationDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(NotificationDataBinder.class);\n \n-    private static final String[] IGNORE_PROPERTIES = { \"key\", \"template\", \"abouts\", \"recipientsProvider\" };\n-\n     @Autowired\n     private MailTemplateDAO mailTemplateDAO;\n \n@@ -70,8 +67,15 @@ public NotificationTO getNotificationTO(final Notification notification) {\n         NotificationTO notificationTO = new NotificationTO();\n         notificationTO.setKey(notification.getKey());\n         notificationTO.setTemplate(notification.getTemplate().getKey());\n-\n-        BeanUtils.copyProperties(notification, notificationTO, IGNORE_PROPERTIES);\n+        notificationTO.getEvents().addAll(notification.getEvents());\n+        notificationTO.setRecipientsFIQL(notification.getRecipientsFIQL());\n+        notificationTO.getStaticRecipients().addAll(notification.getStaticRecipients());\n+        notificationTO.setRecipientAttrName(notification.getRecipientAttrName());\n+        notificationTO.setSelfAsRecipient(notification.isSelfAsRecipient());\n+        notificationTO.setSender(notification.getSender());\n+        notificationTO.setSubject(notification.getSubject());\n+        notificationTO.setTraceLevel(notification.getTraceLevel());\n+        notificationTO.setActive(notification.isActive());\n \n         notification.getAbouts().forEach(about -> {\n             notificationTO.getAbouts().put(about.getAnyType().getKey(), about.get());\n@@ -93,7 +97,20 @@ public Notification create(final NotificationTO notificationTO) {\n \n     @Override\n     public void update(final Notification notification, final NotificationTO notificationTO) {\n-        BeanUtils.copyProperties(notificationTO, notification, IGNORE_PROPERTIES);\n+        notification.setRecipientsFIQL(notificationTO.getRecipientsFIQL());\n+\n+        notification.getStaticRecipients().clear();\n+        notification.getStaticRecipients().addAll(notificationTO.getStaticRecipients());\n+\n+        notification.setRecipientAttrName(notificationTO.getRecipientAttrName());\n+        notification.setSelfAsRecipient(notificationTO.isSelfAsRecipient());\n+        notification.setSender(notificationTO.getSender());\n+        notification.setSubject(notificationTO.getSubject());\n+        notification.setTraceLevel(notificationTO.getTraceLevel());\n+        notification.setActive(notificationTO.isActive());\n+\n+        notification.getEvents().clear();\n+        notification.getEvents().addAll(notificationTO.getEvents());\n \n         SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.RequiredValuesMissing);\n "},{"sha":"c445d93a7d622cd12586b0f6d0145872efcbed19","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RemediationDataBinderImpl.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRemediationDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -21,20 +21,19 @@\n import org.apache.syncope.common.lib.to.RemediationTO;\n import org.apache.syncope.core.persistence.api.entity.Remediation;\n import org.apache.syncope.core.provisioning.api.data.RemediationDataBinder;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.springframework.stereotype.Component;\n \n @Component\n public class RemediationDataBinderImpl implements RemediationDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = {\n-        \"anyType\", \"payload\", \"anyTOPayload\", \"anyPatchPayload\", \"keyPayload\", \"pullTask\" };\n-\n     @Override\n     public RemediationTO getRemediationTO(final Remediation remediation) {\n         RemediationTO remediationTO = new RemediationTO();\n-\n-        BeanUtils.copyProperties(remediation, remediationTO);\n+        remediationTO.setKey(remediation.getKey());\n+        remediationTO.setOperation(remediation.getOperation());\n+        remediationTO.setError(remediation.getError());\n+        remediationTO.setInstant(remediation.getInstant());\n+        remediationTO.setRemoteName(remediation.getRemoteName());\n \n         switch (remediation.getOperation()) {\n             case CREATE:\n@@ -63,5 +62,4 @@ public RemediationTO getRemediationTO(final Remediation remediation) {\n \n         return remediationTO;\n     }\n-\n }"},{"sha":"f1d6537b8ff5996f974f562a5694fe9c75ad311d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ReportDataBinderImpl.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FReportDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.persistence.api.entity.Report;\n import org.apache.syncope.core.persistence.api.entity.ReportExec;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.ReportTemplateDAO;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -51,10 +50,6 @@ public class ReportDataBinderImpl implements ReportDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ReportDataBinder.class);\n \n-    private static final String[] IGNORE_REPORT_PROPERTIES = { \"key\", \"template\", \"reportlets\", \"executions\" };\n-\n-    private static final String[] IGNORE_REPORT_EXECUTION_PROPERTIES = { \"key\", \"report\", \"execResult\" };\n-\n     @Autowired\n     private ReportTemplateDAO reportTemplateDAO;\n \n@@ -69,7 +64,9 @@ public class ReportDataBinderImpl implements ReportDataBinder {\n \n     @Override\n     public void getReport(final Report report, final ReportTO reportTO) {\n-        BeanUtils.copyProperties(reportTO, report, IGNORE_REPORT_PROPERTIES);\n+        report.setName(reportTO.getName());\n+        report.setCronExpression(reportTO.getCronExpression());\n+        report.setActive(reportTO.isActive());\n \n         ReportTemplate template = reportTemplateDAO.find(reportTO.getTemplate());\n         if (template == null) {\n@@ -96,8 +93,9 @@ public ReportTO getReportTO(final Report report) {\n         ReportTO reportTO = new ReportTO();\n         reportTO.setKey(report.getKey());\n         reportTO.setTemplate(report.getTemplate().getKey());\n-\n-        BeanUtils.copyProperties(report, reportTO, IGNORE_REPORT_PROPERTIES);\n+        reportTO.setName(report.getName());\n+        reportTO.setCronExpression(report.getCronExpression());\n+        reportTO.setActive(report.isActive());\n \n         reportTO.getReportlets().addAll(\n                 report.getReportlets().stream().map(Entity::getKey).collect(Collectors.toList()));\n@@ -142,13 +140,13 @@ public String buildRefDesc(final Report report) {\n     public ExecTO getExecTO(final ReportExec execution) {\n         ExecTO execTO = new ExecTO();\n         execTO.setKey(execution.getKey());\n-        BeanUtils.copyProperties(execution, execTO, IGNORE_REPORT_EXECUTION_PROPERTIES);\n-        if (execution.getKey() != null) {\n-            execTO.setKey(execution.getKey());\n-        }\n         execTO.setJobType(JobType.REPORT);\n         execTO.setRefKey(execution.getReport().getKey());\n         execTO.setRefDesc(buildRefDesc(execution.getReport()));\n+        execTO.setStatus(execution.getStatus());\n+        execTO.setMessage(execution.getMessage());\n+        execTO.setStart(execution.getStart());\n+        execTO.setEnd(execution.getEnd());\n \n         return execTO;\n     }"},{"sha":"c9f6eb0f45cf1e9ea51e29eae026754c2ba1660e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ResourceDataBinderImpl.java","status":"modified","additions":32,"deletions":7,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FResourceDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -51,7 +51,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceHistoryConfDAO;\n@@ -86,8 +85,6 @@ public class ResourceDataBinderImpl implements ResourceDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ResourceDataBinder.class);\n \n-    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"mapping\", \"transformers\" };\n-\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n@@ -337,7 +334,14 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n                         }\n \n                         OrgUnitItem item = entityFactory.newEntity(OrgUnitItem.class);\n-                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n+                        item.setIntAttrName(itemTO.getIntAttrName());\n+                        item.setExtAttrName(itemTO.getExtAttrName());\n+                        item.setPurpose(itemTO.getPurpose());\n+                        item.setMandatoryCondition(itemTO.getMandatoryCondition());\n+                        item.setConnObjectKey(itemTO.isConnObjectKey());\n+                        item.setPassword(itemTO.isPassword());\n+                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n+                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n                         item.setOrgUnit(orgUnit);\n                         if (item.isConnObjectKey()) {\n                             orgUnit.setConnObjectKeyItem(item);\n@@ -476,7 +480,14 @@ private void populateMapping(\n                         }\n \n                         MappingItem item = entityFactory.newEntity(MappingItem.class);\n-                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n+                        item.setIntAttrName(itemTO.getIntAttrName());\n+                        item.setExtAttrName(itemTO.getExtAttrName());\n+                        item.setPurpose(itemTO.getPurpose());\n+                        item.setMandatoryCondition(itemTO.getMandatoryCondition());\n+                        item.setConnObjectKey(itemTO.isConnObjectKey());\n+                        item.setPassword(itemTO.isPassword());\n+                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n+                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n                         item.setMapping(mapping);\n \n                         if (item.isConnObjectKey()) {\n@@ -581,7 +592,14 @@ private void populateItems(final List<? extends Item> items, final ItemContainer\n         items.forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n-            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);\n+            itemTO.setIntAttrName(item.getIntAttrName());\n+            itemTO.setExtAttrName(item.getExtAttrName());\n+            itemTO.setPurpose(item.getPurpose());\n+            itemTO.setMandatoryCondition(item.getMandatoryCondition());\n+            itemTO.setConnObjectKey(item.isConnObjectKey());\n+            itemTO.setPassword(item.isPassword());\n+            itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());\n+            itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n \n             if (itemTO.isConnObjectKey()) {\n                 containerTO.setConnObjectKeyItem(itemTO);\n@@ -635,7 +653,14 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n \n                 ItemTO itemTO = new ItemTO();\n                 itemTO.setKey(linkingMappingItem.getKey());\n-                BeanUtils.copyProperties(linkingMappingItem, itemTO, ITEM_IGNORE_PROPERTIES);\n+                itemTO.setIntAttrName(linkingMappingItem.getIntAttrName());\n+                itemTO.setExtAttrName(linkingMappingItem.getExtAttrName());\n+                itemTO.setPurpose(linkingMappingItem.getPurpose());\n+                itemTO.setMandatoryCondition(linkingMappingItem.getMandatoryCondition());\n+                itemTO.setConnObjectKey(linkingMappingItem.isConnObjectKey());\n+                itemTO.setPassword(linkingMappingItem.isPassword());\n+                itemTO.setPropagationJEXLTransformer(linkingMappingItem.getPropagationJEXLTransformer());\n+                itemTO.setPullJEXLTransformer(linkingMappingItem.getPullJEXLTransformer());\n \n                 provisionTO.getMapping().getLinkingItems().add(itemTO);\n             });"},{"sha":"623c3dfe63d63b2dd2c4a4f9c0e72070881ffa4c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SchemaDataBinderImpl.java","status":"modified","additions":37,"deletions":9,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSchemaDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -33,7 +33,6 @@\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -62,8 +61,6 @@ public class SchemaDataBinderImpl implements SchemaDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SchemaDataBinder.class);\n \n-    private static final String[] IGNORE_PROPERTIES = { \"anyTypeClass\", \"provision\", \"resource\", \"validator\" };\n-\n     @Autowired\n     private AnyTypeClassDAO anyTypeClassDAO;\n \n@@ -119,7 +116,19 @@ private PlainSchema fill(final PlainSchema schema, final PlainSchemaTO schemaTO)\n             throw sce;\n         }\n \n-        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);\n+        schema.setKey(schemaTO.getKey());\n+        schema.setType(schemaTO.getType());\n+        schema.setCipherAlgorithm(schemaTO.getCipherAlgorithm());\n+        schema.setConversionPattern(schemaTO.getConversionPattern());\n+        schema.setEnumerationKeys(schemaTO.getEnumerationKeys());\n+        schema.setEnumerationValues(schemaTO.getEnumerationValues());\n+        schema.setMandatoryCondition(schemaTO.getMandatoryCondition());\n+        schema.setMimeType(schemaTO.getMimeType());\n+        schema.setMultivalue(schemaTO.isMultivalue());\n+        schema.setReadonly(schemaTO.isReadonly());\n+        schema.setSecretKey(schemaTO.getSecretKey());\n+        schema.setUniqueConstraint(schemaTO.isUniqueConstraint());\n+\n         labels(schemaTO, schema);\n \n         if (schemaTO.getValidator() == null) {\n@@ -201,8 +210,19 @@ public PlainSchemaTO getPlainSchemaTO(final String key) {\n         }\n \n         PlainSchemaTO schemaTO = new PlainSchemaTO();\n+        schemaTO.setKey(schema.getKey());\n+        schemaTO.setType(schema.getType());\n+        schemaTO.setCipherAlgorithm(schema.getCipherAlgorithm());\n+        schemaTO.setConversionPattern(schema.getConversionPattern());\n+        schemaTO.setEnumerationKeys(schema.getEnumerationKeys());\n+        schemaTO.setEnumerationValues(schema.getEnumerationValues());\n+        schemaTO.setMandatoryCondition(schema.getMandatoryCondition());\n+        schemaTO.setMimeType(schema.getMimeType());\n+        schemaTO.setMultivalue(schema.isMultivalue());\n+        schemaTO.setReadonly(schema.isReadonly());\n+        schemaTO.setSecretKey(schema.getSecretKey());\n+        schemaTO.setUniqueConstraint(schema.isUniqueConstraint());\n \n-        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);\n         labels(schema, schemaTO);\n \n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n@@ -234,7 +254,9 @@ private DerSchema fill(final DerSchema schema, final DerSchemaTO schemaTO) {\n             throw scce;\n         }\n \n-        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);\n+        schema.setKey(schemaTO.getKey());\n+        schema.setExpression(schemaTO.getExpression());\n+\n         labels(schemaTO, schema);\n \n         DerSchema merged = derSchemaDAO.save(schema);\n@@ -277,8 +299,9 @@ public DerSchemaTO getDerSchemaTO(final String key) {\n         }\n \n         DerSchemaTO schemaTO = new DerSchemaTO();\n+        schemaTO.setKey(schema.getKey());\n+        schemaTO.setExpression(schema.getExpression());\n \n-        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);\n         labels(schema, schemaTO);\n \n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());\n@@ -288,7 +311,10 @@ public DerSchemaTO getDerSchemaTO(final String key) {\n \n     // --------------- VIRTUAL -----------------\n     private VirSchema fill(final VirSchema schema, final VirSchemaTO schemaTO) {\n-        BeanUtils.copyProperties(schemaTO, schema, IGNORE_PROPERTIES);\n+        schema.setKey(schemaTO.getKey());\n+        schema.setExtAttrName(schemaTO.getExtAttrName());\n+        schema.setReadonly(schema.isReadonly());\n+\n         labels(schemaTO, schema);\n \n         if (schemaTO.getAnyTypeClass() != null\n@@ -350,8 +376,10 @@ public VirSchemaTO getVirSchemaTO(final String key) {\n         }\n \n         VirSchemaTO schemaTO = new VirSchemaTO();\n+        schemaTO.setKey(schema.getKey());\n+        schemaTO.setExtAttrName(schema.getExtAttrName());\n+        schemaTO.setReadonly(schema.isReadonly());\n \n-        BeanUtils.copyProperties(schema, schemaTO, IGNORE_PROPERTIES);\n         labels(schema, schemaTO);\n \n         schemaTO.setAnyTypeClass(schema.getAnyTypeClass() == null ? null : schema.getAnyTypeClass().getKey());"},{"sha":"a291bafe148245cc7ca24b9d8206e90f7564ed0b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SecurityQuestionDataBinderImpl.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSecurityQuestionDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSecurityQuestionDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSecurityQuestionDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -22,7 +22,6 @@\n import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -35,8 +34,8 @@ public class SecurityQuestionDataBinderImpl implements SecurityQuestionDataBinde\n     @Override\n     public SecurityQuestionTO getSecurityQuestionTO(final SecurityQuestion securityQuestion) {\n         SecurityQuestionTO securityQuestionTO = new SecurityQuestionTO();\n-\n-        BeanUtils.copyProperties(securityQuestion, securityQuestionTO);\n+        securityQuestionTO.setKey(securityQuestion.getKey());\n+        securityQuestionTO.setContent(securityQuestion.getContent());\n \n         return securityQuestionTO;\n     }\n@@ -50,6 +49,6 @@ public SecurityQuestion create(final SecurityQuestionTO securityQuestionTO) {\n \n     @Override\n     public void update(final SecurityQuestion securityQuestion, final SecurityQuestionTO securityQuestionTO) {\n-        BeanUtils.copyProperties(securityQuestionTO, securityQuestion, \"key\");\n+        securityQuestion.setContent(securityQuestionTO.getContent());\n     }\n }"},{"sha":"aae4c62fd945077b757fb3fdecc201fa108907a1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":67,"deletions":47,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Objects;\n import java.util.stream.Collectors;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.commons.lang3.StringUtils;\n@@ -50,7 +51,6 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -80,12 +80,6 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(TaskDataBinder.class);\n \n-    private static final String[] IGNORE_TASK_PROPERTIES = {\n-        \"destinationRealm\", \"templates\", \"filters\", \"executions\", \"resource\", \"matchingRule\", \"unmatchingRule\",\n-        \"notification\", \"jobDelegate\", \"actions\" };\n-\n-    private static final String[] IGNORE_TASK_EXECUTION_PROPERTIES = { \"key\", \"task\" };\n-\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -113,10 +107,10 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     @Autowired\n     private TaskUtilsFactory taskUtilsFactory;\n \n-    private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO) {\n-        if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n-            PushTask pushTask = (PushTask) task;\n-            PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n+    private void fill(final ProvisioningTask provisioningTask, final ProvisioningTaskTO provisioningTaskTO) {\n+        if (provisioningTask instanceof PushTask && provisioningTaskTO instanceof PushTaskTO) {\n+            PushTask pushTask = (PushTask) provisioningTask;\n+            PushTaskTO pushTaskTO = (PushTaskTO) provisioningTaskTO;\n \n             Implementation jobDelegate = pushTaskTO.getJobDelegate() == null\n                     ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n@@ -158,9 +152,9 @@ private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO)\n             // remove all filters not contained in the TO\n             pushTask.getFilters().\n                     removeIf(anyFilter -> !pushTaskTO.getFilters().containsKey(anyFilter.getAnyType().getKey()));\n-        } else if (task instanceof PullTask && taskTO instanceof PullTaskTO) {\n-            PullTask pullTask = (PullTask) task;\n-            PullTaskTO pullTaskTO = (PullTaskTO) taskTO;\n+        } else if (provisioningTask instanceof PullTask && provisioningTaskTO instanceof PullTaskTO) {\n+            PullTask pullTask = (PullTask) provisioningTask;\n+            PullTaskTO pullTaskTO = (PullTaskTO) provisioningTaskTO;\n \n             Implementation jobDelegate = pullTaskTO.getJobDelegate() == null\n                     ? implementationDAO.find(ImplementationType.TASKJOB_DELEGATE).stream().\n@@ -224,21 +218,21 @@ private void fill(final ProvisioningTask task, final ProvisioningTaskTO taskTO)\n         }\n \n         // 3. fill the remaining fields\n-        task.setPerformCreate(taskTO.isPerformCreate());\n-        task.setPerformUpdate(taskTO.isPerformUpdate());\n-        task.setPerformDelete(taskTO.isPerformDelete());\n-        task.setSyncStatus(taskTO.isSyncStatus());\n+        provisioningTask.setPerformCreate(provisioningTaskTO.isPerformCreate());\n+        provisioningTask.setPerformUpdate(provisioningTaskTO.isPerformUpdate());\n+        provisioningTask.setPerformDelete(provisioningTaskTO.isPerformDelete());\n+        provisioningTask.setSyncStatus(provisioningTaskTO.isSyncStatus());\n \n-        taskTO.getActions().forEach(action -> {\n+        provisioningTaskTO.getActions().forEach(action -> {\n             Implementation implementation = implementationDAO.find(action);\n             if (implementation == null) {\n                 LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", action);\n             } else {\n-                task.add(implementation);\n+                provisioningTask.add(implementation);\n             }\n         });\n         // remove all implementations not contained in the TO\n-        task.getActions().removeIf(implementation -> !taskTO.getActions().contains(implementation.getKey()));\n+        provisioningTask.getActions().removeIf(impl -> !provisioningTaskTO.getActions().contains(impl.getKey()));\n     }\n \n     @Override\n@@ -313,11 +307,11 @@ public String buildRefDesc(final Task task) {\n     @Override\n     public ExecTO getExecTO(final TaskExec execution) {\n         ExecTO execTO = new ExecTO();\n-        BeanUtils.copyProperties(execution, execTO, IGNORE_TASK_EXECUTION_PROPERTIES);\n-\n-        if (execution.getKey() != null) {\n-            execTO.setKey(execution.getKey());\n-        }\n+        execTO.setKey(execution.getKey());\n+        execTO.setStatus(execution.getStatus());\n+        execTO.setMessage(execution.getMessage());\n+        execTO.setStart(execution.getStart());\n+        execTO.setEnd(execution.getEnd());\n \n         if (execution.getTask() != null && execution.getTask().getKey() != null) {\n             execTO.setJobType(JobType.TASK);\n@@ -328,26 +322,47 @@ public ExecTO getExecTO(final TaskExec execution) {\n         return execTO;\n     }\n \n-    private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n-        taskTO.setLastExec(taskTO.getStart());\n+    private void fill(final SchedTaskTO schedTaskTO, final SchedTask schedTask) {\n+        schedTaskTO.setName(schedTask.getName());\n+        schedTaskTO.setDescription(schedTask.getDescription());\n+        schedTaskTO.setStart(schedTask.getStartAt());\n+        schedTaskTO.setCronExpression(schedTask.getCronExpression());\n+        schedTaskTO.setActive(schedTask.isActive());\n \n-        String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(task).getName());\n+        schedTaskTO.setLastExec(schedTaskTO.getStart());\n+\n+        String triggerName = JobNamer.getTriggerName(JobNamer.getJobKey(schedTask).getName());\n         try {\n             Trigger trigger = scheduler.getScheduler().getTrigger(new TriggerKey(triggerName, Scheduler.DEFAULT_GROUP));\n \n             if (trigger != null) {\n-                taskTO.setLastExec(trigger.getPreviousFireTime());\n-                taskTO.setNextExec(trigger.getNextFireTime());\n+                schedTaskTO.setLastExec(trigger.getPreviousFireTime());\n+                schedTaskTO.setNextExec(trigger.getNextFireTime());\n             }\n         } catch (SchedulerException e) {\n             LOG.warn(\"While trying to get to \" + triggerName, e);\n         }\n+\n+        if (schedTaskTO instanceof ProvisioningTaskTO && schedTask instanceof ProvisioningTask) {\n+            ProvisioningTaskTO provisioningTaskTO = (ProvisioningTaskTO) schedTaskTO;\n+            ProvisioningTask provisioningTask = (ProvisioningTask) schedTask;\n+\n+            provisioningTaskTO.setResource(provisioningTask.getResource().getKey());\n+\n+            provisioningTaskTO.getActions().addAll(\n+                    provisioningTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n+\n+            provisioningTaskTO.setPerformCreate(provisioningTask.isPerformCreate());\n+            provisioningTaskTO.setPerformUpdate(provisioningTask.isPerformUpdate());\n+            provisioningTaskTO.setPerformDelete(provisioningTask.isPerformDelete());\n+            provisioningTaskTO.setSyncStatus(provisioningTask.isSyncStatus());\n+        }\n     }\n \n     @Override\n     public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils, final boolean details) {\n         T taskTO = taskUtils.newTaskTO();\n-        BeanUtils.copyProperties(task, taskTO, IGNORE_TASK_PROPERTIES);\n+        taskTO.setKey(task.getKey());\n \n         TaskExec latestExec = taskExecDAO.findLatestStarted(task);\n         if (latestExec == null) {\n@@ -360,26 +375,31 @@ public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils\n \n         if (details) {\n             task.getExecs().stream().\n-                    filter(execution -> execution != null).\n-                    forEachOrdered(execution -> taskTO.getExecutions().add(getExecTO(execution)));\n+                    filter(Objects::nonNull).\n+                    forEach(execution -> taskTO.getExecutions().add(getExecTO(execution)));\n         }\n \n         switch (taskUtils.getType()) {\n             case PROPAGATION:\n                 PropagationTask propagationTask = (PropagationTask) task;\n                 PropagationTaskTO propagationTaskTO = (PropagationTaskTO) taskTO;\n \n+                propagationTaskTO.setOperation(propagationTask.getOperation());\n+                propagationTaskTO.setConnObjectKey(propagationTask.getConnObjectKey());\n+                propagationTaskTO.setOldConnObjectKey(propagationTask.getOldConnObjectKey());\n+                propagationTaskTO.setAttributes(propagationTask.getSerializedAttributes());\n+                propagationTaskTO.setResource(propagationTask.getResource().getKey());\n+                propagationTaskTO.setObjectClassName(propagationTask.getObjectClassName());\n                 propagationTaskTO.setAnyTypeKind(propagationTask.getAnyTypeKind());\n+                propagationTaskTO.setAnyType(propagationTask.getAnyType());\n                 propagationTaskTO.setEntityKey(propagationTask.getEntityKey());\n-                propagationTaskTO.setResource(propagationTask.getResource().getKey());\n-                propagationTaskTO.setAttributes(propagationTask.getSerializedAttributes());\n                 break;\n \n             case SCHEDULED:\n                 SchedTask schedTask = (SchedTask) task;\n                 SchedTaskTO schedTaskTO = (SchedTaskTO) taskTO;\n \n-                setExecTime(schedTaskTO, task);\n+                fill(schedTaskTO, schedTask);\n \n                 if (schedTask.getJobDelegate() != null) {\n                     schedTaskTO.setJobDelegate(schedTask.getJobDelegate().getKey());\n@@ -390,22 +410,19 @@ public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils\n                 PullTask pullTask = (PullTask) task;\n                 PullTaskTO pullTaskTO = (PullTaskTO) taskTO;\n \n-                setExecTime(pullTaskTO, task);\n+                fill(pullTaskTO, pullTask);\n \n                 pullTaskTO.setDestinationRealm(pullTask.getDestinatioRealm().getFullPath());\n-                pullTaskTO.setResource(pullTask.getResource().getKey());\n                 pullTaskTO.setMatchingRule(pullTask.getMatchingRule() == null\n                         ? MatchingRule.UPDATE : pullTask.getMatchingRule());\n                 pullTaskTO.setUnmatchingRule(pullTask.getUnmatchingRule() == null\n                         ? UnmatchingRule.PROVISION : pullTask.getUnmatchingRule());\n+                pullTaskTO.setPullMode(pullTask.getPullMode());\n \n                 if (pullTask.getReconFilterBuilder() != null) {\n                     pullTaskTO.setReconFilterBuilder(pullTask.getReconFilterBuilder().getKey());\n                 }\n \n-                pullTaskTO.getActions().addAll(\n-                        pullTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n-\n                 pullTask.getTemplates().forEach(template -> {\n                     pullTaskTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n                 });\n@@ -417,18 +434,14 @@ public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils\n                 PushTask pushTask = (PushTask) task;\n                 PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n \n-                setExecTime(pushTaskTO, task);\n+                fill(pushTaskTO, pushTask);\n \n                 pushTaskTO.setSourceRealm(pushTask.getSourceRealm().getFullPath());\n-                pushTaskTO.setResource(pushTask.getResource().getKey());\n                 pushTaskTO.setMatchingRule(pushTask.getMatchingRule() == null\n                         ? MatchingRule.LINK : pushTask.getMatchingRule());\n                 pushTaskTO.setUnmatchingRule(pushTask.getUnmatchingRule() == null\n                         ? UnmatchingRule.ASSIGN : pushTask.getUnmatchingRule());\n \n-                pushTaskTO.getActions().addAll(\n-                        pushTask.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n-\n                 pushTask.getFilters().forEach(filter -> {\n                     pushTaskTO.getFilters().put(filter.getAnyType().getKey(), filter.getFIQLCond());\n                 });\n@@ -441,9 +454,16 @@ public <T extends TaskTO> T getTaskTO(final Task task, final TaskUtils taskUtils\n                 notificationTaskTO.setNotification(notificationTask.getNotification().getKey());\n                 notificationTaskTO.setAnyTypeKind(notificationTask.getAnyTypeKind());\n                 notificationTaskTO.setEntityKey(notificationTask.getEntityKey());\n+                notificationTaskTO.setSender(notificationTask.getSender());\n+                notificationTaskTO.getRecipients().addAll(notificationTask.getRecipients());\n+                notificationTaskTO.setSubject(notificationTask.getSubject());\n+                notificationTaskTO.setHtmlBody(notificationTask.getHtmlBody());\n+                notificationTaskTO.setTextBody(notificationTask.getTextBody());\n+                notificationTaskTO.setExecuted(notificationTask.isExecuted());\n                 if (notificationTask.isExecuted() && StringUtils.isBlank(taskTO.getLatestExecStatus())) {\n                     taskTO.setLatestExecStatus(\"[EXECUTED]\");\n                 }\n+                notificationTaskTO.setTraceLevel(notificationTask.getTraceLevel());\n                 break;\n \n             default:"},{"sha":"e50f59e6c2d366720057f43eebb497dd9a528a86","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":15,"deletions":8,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -54,7 +54,6 @@\n import org.apache.syncope.core.provisioning.api.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n@@ -79,11 +78,6 @@\n @Transactional(rollbackFor = { Throwable.class })\n public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDataBinder {\n \n-    private static final String[] IGNORE_PROPERTIES = {\n-        \"type\", \"realm\", \"auxClasses\", \"roles\", \"dynRoles\", \"relationships\", \"memberships\", \"dynMemberships\",\n-        \"plainAttrs\", \"derAttrs\", \"virAttrs\", \"resources\", \"securityQuestion\", \"securityAnswer\"\n-    };\n-\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -567,9 +561,22 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n     @Override\n     public UserTO getUserTO(final User user, final boolean details) {\n         UserTO userTO = new UserTO();\n-\n-        BeanUtils.copyProperties(user, userTO, IGNORE_PROPERTIES);\n+        userTO.setKey(user.getKey());\n+        userTO.setUsername(user.getUsername());\n+        userTO.setPassword(user.getPassword());\n+        userTO.setType(user.getType().getKey());\n+        userTO.setCreationDate(user.getCreationDate());\n+        userTO.setCreator(user.getCreator());\n+        userTO.setLastChangeDate(user.getLastChangeDate());\n+        userTO.setLastModifier(user.getLastModifier());\n+        userTO.setStatus(user.getStatus());\n         userTO.setSuspended(BooleanUtils.isTrue(user.isSuspended()));\n+        userTO.setChangePwdDate(user.getChangePwdDate());\n+        userTO.setFailedLogins(user.getFailedLogins());\n+        userTO.setLastLoginDate(user.getLastLoginDate());\n+        userTO.setMustChangePassword(user.isMustChangePassword());\n+        userTO.setToken(user.getToken());\n+        userTO.setTokenExpireTime(user.getTokenExpireTime());\n \n         if (user.getSecurityQuestion() != null) {\n             userTO.setSecurityQuestion(user.getSecurityQuestion().getKey());"},{"sha":"980b02274edf324f04aaf2127d0e495f3f26ce85","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/BeanUtils.java","status":"removed","additions":0,"deletions":193,"changes":193,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FBeanUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/8bbfe71a3e556fb7ef57fc092dc297b65b807253/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FBeanUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2FBeanUtils.java?ref=8bbfe71a3e556fb7ef57fc092dc297b65b807253","patch":"@@ -1,193 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.spring;\n-\n-import static org.springframework.beans.BeanUtils.getPropertyDescriptor;\n-import static org.springframework.beans.BeanUtils.getPropertyDescriptors;\n-\n-import java.beans.PropertyDescriptor;\n-import java.lang.reflect.Method;\n-import java.lang.reflect.Modifier;\n-import java.util.Arrays;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Map;\n-import org.springframework.beans.FatalBeanException;\n-import org.springframework.util.Assert;\n-import org.springframework.util.ClassUtils;\n-\n-/**\n- * Overrides Spring's BeanUtils not using collection setters but instead getters + addAll() / putAll(),\n- * in a JAXB friendly way.\n- *\n- * Refer to <a href=\"https://issues.apache.org/jira/browse/SYNCOPE-246\">SYNCOPE-246</a> for more information.\n- *\n- * @see org.springframework.beans.BeanUtils\n- */\n-public final class BeanUtils {\n-\n-    private BeanUtils() {\n-        // Empty private constructor for static utility classes\n-    }\n-\n-    /**\n-     * Copy the property values of the given source bean into the target bean.\n-     * <p>\n-     * Note: The source and target classes do not have to match or even be derived\n-     * from each other, as long as the properties match. Any bean properties that the\n-     * source bean exposes but the target bean does not will silently be ignored.\n-     * </p><p>\n-     * This is just a convenience method. For more complex transfer needs,\n-     * consider using a full BeanWrapper.\n-     * </p>\n-     *\n-     * @param source the source bean\n-     * @param target the target bean\n-     * @see org.springframework.beans.BeanWrapper\n-     */\n-    public static void copyProperties(final Object source, final Object target) {\n-        copyProperties(source, target, null, (String[]) null);\n-    }\n-\n-    /**\n-     * Copy the property values of the given source bean into the given target bean,\n-     * only setting properties defined in the given \"editable\" class (or interface).\n-     * <p>\n-     * Note: The source and target classes do not have to match or even be derived\n-     * from each other, as long as the properties match. Any bean properties that the\n-     * source bean exposes but the target bean does not will silently be ignored.\n-     * </p><p>\n-     * This is just a convenience method. For more complex transfer needs,\n-     * consider using a full BeanWrapper.\n-     * </p>\n-     *\n-     * @param source the source bean\n-     * @param target the target bean\n-     * @param editable the class (or interface) to restrict property setting to\n-     * @see org.springframework.beans.BeanWrapper\n-     */\n-    public static void copyProperties(final Object source, final Object target, final Class<?> editable) {\n-        copyProperties(source, target, editable, (String[]) null);\n-    }\n-\n-    /**\n-     * Copy the property values of the given source bean into the given target bean,\n-     * ignoring the given \"ignoreProperties\".\n-     * <p>\n-     * Note: The source and target classes do not have to match or even be derived\n-     * from each other, as long as the properties match. Any bean properties that the\n-     * source bean exposes but the target bean does not will silently be ignored.\n-     * </p><p>\n-     * This is just a convenience method. For more complex transfer needs,\n-     * consider using a full BeanWrapper.\n-     * </p>\n-     *\n-     * @param source the source bean\n-     * @param target the target bean\n-     * @param ignoreProperties array of property names to ignore\n-     * @see org.springframework.beans.BeanWrapper\n-     */\n-    public static void copyProperties(final Object source, final Object target, final String... ignoreProperties) {\n-        copyProperties(source, target, null, ignoreProperties);\n-    }\n-\n-    /**\n-     * Copy the property values of the given source bean into the given target bean.\n-     * <p>\n-     * Note: The source and target classes do not have to match or even be derived\n-     * from each other, as long as the properties match. Any bean properties that the\n-     * source bean exposes but the target bean does not will silently be ignored.\n-     * </p>\n-     *\n-     * @param source the source bean\n-     * @param target the target bean\n-     * @param editable the class (or interface) to restrict property setting to\n-     * @param ignoreProperties array of property names to ignore\n-     * @see org.springframework.beans.BeanWrapper\n-     */\n-    @SuppressWarnings(\"unchecked\")\n-    private static void copyProperties(\n-            final Object source, final Object target, final Class<?> editable, final String... ignoreProperties) {\n-\n-        Assert.notNull(source, \"Source must not be null\");\n-        Assert.notNull(target, \"Target must not be null\");\n-\n-        Class<?> actualEditable = target.getClass();\n-        if (editable != null) {\n-            if (!editable.isInstance(target)) {\n-                throw new IllegalArgumentException(\"Target class [\" + target.getClass().getName()\n-                        + \"] not assignable to Editable class [\" + editable.getName() + \"]\");\n-            }\n-            actualEditable = editable;\n-        }\n-        PropertyDescriptor[] targetPds = getPropertyDescriptors(actualEditable);\n-        List<String> ignoreList = (ignoreProperties == null)\n-                ? Collections.<String>emptyList() : Arrays.asList(ignoreProperties);\n-\n-        for (PropertyDescriptor targetPd : targetPds) {\n-            if (ignoreProperties == null || (!ignoreList.contains(targetPd.getName()))) {\n-                PropertyDescriptor sourcePd = getPropertyDescriptor(source.getClass(), targetPd.getName());\n-                if (sourcePd != null) {\n-                    Method readMethod = sourcePd.getReadMethod();\n-                    if (readMethod != null) {\n-                        Method writeMethod = targetPd.getWriteMethod();\n-\n-                        try {\n-                            // Diverts from Spring's BeanUtils: if no write method is found and property is collection,\n-                            // try to use addAll() / putAll().\n-                            if (writeMethod == null) {\n-                                Object value = readMethod.invoke(source);\n-                                Method targetReadMethod = targetPd.getReadMethod();\n-                                if (targetReadMethod != null) {\n-                                    if (!Modifier.isPublic(targetReadMethod.getDeclaringClass().getModifiers())) {\n-                                        targetReadMethod.setAccessible(true);\n-                                    }\n-                                    Object destValue = targetReadMethod.invoke(target);\n-\n-                                    if (value instanceof Collection && destValue instanceof Collection) {\n-                                        ((Collection) destValue).clear();\n-                                        ((Collection) destValue).addAll((Collection) value);\n-                                    } else if (value instanceof Map && destValue instanceof Map) {\n-                                        ((Map) destValue).clear();\n-                                        ((Map) destValue).putAll((Map) value);\n-                                    }\n-                                }\n-                            } else if (ClassUtils.isAssignable(\n-                                    writeMethod.getParameterTypes()[0], readMethod.getReturnType())) {\n-\n-                                if (!Modifier.isPublic(readMethod.getDeclaringClass().getModifiers())) {\n-                                    readMethod.setAccessible(true);\n-                                }\n-                                Object value = readMethod.invoke(source);\n-                                if (!Modifier.isPublic(writeMethod.getDeclaringClass().getModifiers())) {\n-                                    writeMethod.setAccessible(true);\n-                                }\n-                                writeMethod.invoke(target, value);\n-                            }\n-                        } catch (Throwable ex) {\n-                            throw new FatalBeanException(\n-                                    \"Could not copy property '\" + targetPd.getName() + \"' from source to target\", ex);\n-                        }\n-                    }\n-                }\n-            }\n-        }\n-    }\n-}"},{"sha":"e96f7db98dd7cea1eff4e11a466fcbc728adae57","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/data/CamelRouteDataBinderImpl.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fdata%2FCamelRouteDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.provisioning.camel.data;\n \n import org.apache.syncope.common.lib.to.CamelRouteTO;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.CamelRouteDAO;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n import org.apache.syncope.core.provisioning.api.data.CamelRouteDataBinder;\n@@ -35,7 +34,10 @@ public class CamelRouteDataBinderImpl implements CamelRouteDataBinder {\n     @Override\n     public CamelRouteTO getRouteTO(final CamelRoute route) {\n         CamelRouteTO routeTO = new CamelRouteTO();\n-        BeanUtils.copyProperties(route, routeTO);\n+        routeTO.setKey(route.getKey());\n+        routeTO.setAnyTypeKind(route.getAnyTypeKind());\n+        routeTO.setContent(route.getContent());\n+\n         return routeTO;\n     }\n \n@@ -44,5 +46,4 @@ public void update(final CamelRoute route, final CamelRouteTO routeTO) {\n         route.setContent(routeTO.getContent());\n         routeDAO.save(route);\n     }\n-\n }"},{"sha":"ac28126799abc255fba36f1379e9e889742a5513","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserRequestHandler.java","status":"modified","additions":17,"deletions":6,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserRequestHandler.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -51,7 +51,6 @@\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.WorkflowException;\n import org.flowable.common.engine.api.FlowableException;\n@@ -68,6 +67,7 @@\n import org.flowable.task.api.history.HistoricTaskInstance;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -77,8 +77,6 @@ public class FlowableUserRequestHandler implements UserRequestHandler {\n \n     protected static final Logger LOG = LoggerFactory.getLogger(UserRequestHandler.class);\n \n-    protected static final String[] PROPERTY_IGNORE_PROPS = { \"type\" };\n-\n     @Autowired\n     protected WorkflowTaskManager wfTaskManager;\n \n@@ -308,7 +306,11 @@ protected UserRequestForm getForm(final Task task) {\n     protected UserRequestForm getForm(final Task task, final TaskFormData fd) {\n         UserRequestForm formTO =\n                 getForm(task.getProcessInstanceId(), task.getId(), fd.getFormKey(), fd.getFormProperties());\n-        BeanUtils.copyProperties(task, formTO);\n+        formTO.setCreateTime(task.getCreateTime());\n+        formTO.setDueDate(task.getDueDate());\n+        formTO.setExecutionId(task.getExecutionId());\n+        formTO.setFormKey(task.getFormKey());\n+        formTO.setOwner(task.getOwner());\n \n         return formTO;\n     }\n@@ -322,7 +324,11 @@ protected UserRequestForm getForm(final HistoricTaskInstance task) {\n \n         UserRequestForm formTO = getHistoricFormTO(\n                 task.getProcessInstanceId(), task.getId(), task.getFormKey(), props);\n-        BeanUtils.copyProperties(task, formTO);\n+        formTO.setCreateTime(task.getCreateTime());\n+        formTO.setDueDate(task.getDueDate());\n+        formTO.setExecutionId(task.getExecutionId());\n+        formTO.setFormKey(task.getFormKey());\n+        formTO.setOwner(task.getOwner());\n \n         HistoricActivityInstance historicActivityInstance = engine.getHistoryService().\n                 createHistoricActivityInstanceQuery().\n@@ -408,7 +414,12 @@ protected UserRequestForm getForm(\n \n         formTO.getProperties().addAll(props.stream().map(fProp -> {\n             UserRequestFormProperty propertyTO = new UserRequestFormProperty();\n-            BeanUtils.copyProperties(fProp, propertyTO, PROPERTY_IGNORE_PROPS);\n+            propertyTO.setId(fProp.getId());\n+            propertyTO.setName(fProp.getName());\n+            propertyTO.setReadable(fProp.isReadable());\n+            propertyTO.setRequired(fProp.isRequired());\n+            propertyTO.setWritable(fProp.isWritable());\n+            propertyTO.setValue(fProp.getValue());\n             propertyTO.setType(fromFlowableFormType(fProp.getType()));\n             switch (propertyTO.getType()) {\n                 case Date:"},{"sha":"24e765d78eb776703135c4a25995d0501c5949df","filename":"ext/flowable/flowable-bpmn/src/main/java/org/apache/syncope/core/flowable/impl/FlowableUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fflowable-bpmn%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fflowable%2Fimpl%2FFlowableUserWorkflowAdapter.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -35,7 +35,6 @@\n import org.apache.syncope.core.flowable.api.UserRequestHandler;\n import org.apache.syncope.core.flowable.api.WorkflowTaskManager;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.flowable.support.DomainProcessEngine;\n@@ -48,6 +47,7 @@\n import org.flowable.common.engine.api.FlowableException;\n import org.flowable.engine.runtime.ProcessInstance;\n import org.flowable.task.api.Task;\n+import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n \n public class FlowableUserWorkflowAdapter extends AbstractUserWorkflowAdapter implements WorkflowTaskManager {"},{"sha":"bf3c5bb4e3d7df037bdfbe3e6a94413a9d30a8e7","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java","status":"modified","additions":14,"deletions":3,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -41,7 +41,6 @@\n import org.apache.syncope.core.provisioning.api.data.OIDCProviderDataBinder;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -135,7 +134,13 @@ private void populateItems(\n                         }\n \n                         OIDCProviderItem item = entityFactory.newEntity(OIDCProviderItem.class);\n-                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n+                        item.setIntAttrName(itemTO.getIntAttrName());\n+                        item.setExtAttrName(itemTO.getExtAttrName());\n+                        item.setMandatoryCondition(itemTO.getMandatoryCondition());\n+                        item.setConnObjectKey(itemTO.isConnObjectKey());\n+                        item.setPassword(itemTO.isPassword());\n+                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n+                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n                         item.setOP(op);\n                         item.setPurpose(MappingPurpose.NONE);\n                         if (item.isConnObjectKey()) {\n@@ -219,7 +224,13 @@ private void populateItems(final OIDCProvider op, final OIDCProviderTO opTO) {\n         op.getItems().forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n-            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);\n+            itemTO.setIntAttrName(item.getIntAttrName());\n+            itemTO.setExtAttrName(item.getExtAttrName());\n+            itemTO.setMandatoryCondition(item.getMandatoryCondition());\n+            itemTO.setConnObjectKey(item.isConnObjectKey());\n+            itemTO.setPassword(item.isPassword());\n+            itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());\n+            itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n             itemTO.setPurpose(MappingPurpose.NONE);\n \n             if (itemTO.isConnObjectKey()) {"},{"sha":"fe0f8f03050932c559c66ca396e2c621240a9ebb","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -42,7 +42,6 @@\n import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n-import org.apache.syncope.core.spring.BeanUtils;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -53,8 +52,6 @@ public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(SAML2IdPDataBinder.class);\n \n-    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"purpose\" };\n-\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n@@ -135,7 +132,13 @@ private void populateItems(\n                         }\n \n                         SAML2IdPItem item = entityFactory.newEntity(SAML2IdPItem.class);\n-                        BeanUtils.copyProperties(itemTO, item, ITEM_IGNORE_PROPERTIES);\n+                        item.setIntAttrName(itemTO.getIntAttrName());\n+                        item.setExtAttrName(itemTO.getExtAttrName());\n+                        item.setMandatoryCondition(itemTO.getMandatoryCondition());\n+                        item.setConnObjectKey(itemTO.isConnObjectKey());\n+                        item.setPassword(itemTO.isPassword());\n+                        item.setPropagationJEXLTransformer(itemTO.getPropagationJEXLTransformer());\n+                        item.setPullJEXLTransformer(itemTO.getPullJEXLTransformer());\n                         item.setIdP(idp);\n                         item.setPurpose(MappingPurpose.NONE);\n                         if (item.isConnObjectKey()) {\n@@ -217,7 +220,13 @@ private void populateItems(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n         idp.getItems().forEach(item -> {\n             ItemTO itemTO = new ItemTO();\n             itemTO.setKey(item.getKey());\n-            BeanUtils.copyProperties(item, itemTO, ITEM_IGNORE_PROPERTIES);\n+            itemTO.setIntAttrName(item.getIntAttrName());\n+            itemTO.setExtAttrName(item.getExtAttrName());\n+            itemTO.setMandatoryCondition(item.getMandatoryCondition());\n+            itemTO.setConnObjectKey(item.isConnObjectKey());\n+            itemTO.setPassword(item.isPassword());\n+            itemTO.setPropagationJEXLTransformer(item.getPropagationJEXLTransformer());\n+            itemTO.setPullJEXLTransformer(item.getPullJEXLTransformer());\n             itemTO.setPurpose(MappingPurpose.NONE);\n \n             if (itemTO.isConnObjectKey()) {"},{"sha":"7a6159b5d89d061475905c3ff828ba179985ee4c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationITCase.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -89,10 +89,9 @@ public void create() {\n \n     @Test\n     public void update() {\n-        NotificationTO notificationTO = notificationService.read(\n-                \"9e2b911c-25de-4c77-bcea-b86ed9451050\");\n-        notificationTO.setRecipientsFIQL(SyncopeClient.getUserSearchConditionBuilder().inGroups(\n-                \"bf825fe1-7320-4a54-bd64-143b5c18ab97\").query());\n+        NotificationTO notificationTO = notificationService.read(\"9e2b911c-25de-4c77-bcea-b86ed9451050\");\n+        notificationTO.setRecipientsFIQL(SyncopeClient.getUserSearchConditionBuilder().\n+                inGroups(\"bf825fe1-7320-4a54-bd64-143b5c18ab97\").query());\n \n         notificationService.update(notificationTO);\n         NotificationTO actual = notificationService.read(notificationTO.getKey());"},{"sha":"3135834ddff12c7f086d4a3bd3dcb4c87dd15bf9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PlainSchemaITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPlainSchemaITCase.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -100,7 +100,7 @@ public void createWithNotPermittedName() {\n     }\n \n     @Test\n-    public void createREnumWithoutEnumeration() {\n+    public void createEnumWithNoValues() {\n         PlainSchemaTO schemaTO = new PlainSchemaTO();\n         schemaTO.setKey(\"enumcheck\");\n         schemaTO.setType(AttrSchemaType.Enum);\n@@ -151,7 +151,7 @@ public void createBinary() {\n     }\n \n     @Test\n-    public void testBinaryValidation() throws IOException {\n+    public void binaryValidation() throws IOException {\n         // pdf - with validator\n         PlainSchemaTO schemaTOpdf = new PlainSchemaTO();\n         schemaTOpdf.setKey(\"BinaryPDF\");"},{"sha":"4b6b8641a4a52a1b7975e4f3360508b5f051c194","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/PullTaskITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a6e9cd8fef2112cefb5c962dd76b6cd31e89e312/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FPullTaskITCase.java?ref=a6e9cd8fef2112cefb5c962dd76b6cd31e89e312","patch":"@@ -446,7 +446,7 @@ public void reconcileFromLDAP() {\n                                 query()).\n                         build());\n         assertNull(matchingUsers.getResult().get(0).getPlainAttr(\"title\").orElse(null));\n-        \n+\n         // SYNCOPE-1356 remove group membership from LDAP, pull and check in Syncope\n         ConnObjectTO groupConnObject = resourceService.readConnObject(\n                 RESOURCE_NAME_LDAP, AnyTypeKind.GROUP.name(), matchingGroups.getResult().get(0).getKey());"}]}