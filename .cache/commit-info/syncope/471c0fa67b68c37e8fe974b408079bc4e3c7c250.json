{"sha":"471c0fa67b68c37e8fe974b408079bc4e3c7c250","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ3MWMwZmE2N2I2OGMzN2U4ZmU5NzRiNDA4MDc5YmM0ZTNjN2MyNTA=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-15T07:41:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-12-15T07:42:12Z"},"message":"[SYNCOPE-1249] Better management of User, Group and AnyObject field mapping - including mustChangePassword","tree":{"sha":"92aa4c16d0771c4f75fb1171a6a832aaf29ce548","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/92aa4c16d0771c4f75fb1171a6a832aaf29ce548"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/471c0fa67b68c37e8fe974b408079bc4e3c7c250","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/471c0fa67b68c37e8fe974b408079bc4e3c7c250","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/471c0fa67b68c37e8fe974b408079bc4e3c7c250","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/471c0fa67b68c37e8fe974b408079bc4e3c7c250/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"76c1140167e59386ad2854ffc7f5ba00fc21e503","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/76c1140167e59386ad2854ffc7f5ba00fc21e503","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/76c1140167e59386ad2854ffc7f5ba00fc21e503"}],"stats":{"total":61,"additions":36,"deletions":25},"files":[{"sha":"f09cd0621976f9fbecd11900c22614133b1e5f38","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/MappingManagerImpl.java","status":"modified","additions":36,"deletions":25,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/471c0fa67b68c37e8fe974b408079bc4e3c7c250/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/471c0fa67b68c37e8fe974b408079bc4e3c7c250/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FMappingManagerImpl.java?ref=471c0fa67b68c37e8fe974b408079bc4e3c7c250","patch":"@@ -20,12 +20,14 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n+import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.reflect.FieldUtils;\n+import org.apache.commons.lang3.time.DateFormatUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n@@ -65,7 +67,6 @@\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnit;\n import org.apache.syncope.core.persistence.api.entity.resource.OrgUnitItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.DerAttrHandler;\n import org.apache.syncope.core.provisioning.api.IntAttrName;\n@@ -442,28 +443,13 @@ public List<PlainAttrValue> getIntValues(\n                     values.add(attrValue);\n                     break;\n \n-                case \"password\":\n-                    // ignore\n-                    break;\n-\n-                case \"username\":\n-                    if (reference instanceof User) {\n-                        attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n-                        attrValue.setStringValue(((User) reference).getUsername());\n-                        values.add(attrValue);\n-                    }\n+                case \"realm\":\n+                    attrValue.setStringValue(reference.getRealm().getFullPath());\n+                    values.add(attrValue);\n                     break;\n \n-                case \"name\":\n-                    if (reference instanceof Group) {\n-                        attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n-                        attrValue.setStringValue(((Group) reference).getName());\n-                        values.add(attrValue);\n-                    } else if (reference instanceof AnyObject) {\n-                        attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n-                        attrValue.setStringValue(((AnyObject) reference).getName());\n-                        values.add(attrValue);\n-                    }\n+                case \"password\":\n+                    // ignore\n                     break;\n \n                 case \"userOwner\":\n@@ -486,19 +472,44 @@ public List<PlainAttrValue> getIntValues(\n                         }\n \n                         if (StringUtils.isNotBlank(groupOwnerValue)) {\n-                            attrValue = entityFactory.newEntity(UPlainAttrValue.class);\n                             attrValue.setStringValue(groupOwnerValue);\n                             values.add(attrValue);\n                         }\n                     }\n                     break;\n \n+                case \"suspended\":\n+                    if (reference instanceof User) {\n+                        attrValue.setBooleanValue(((User) reference).isSuspended());\n+                        values.add(attrValue);\n+                    }\n+                    break;\n+\n+                case \"mustChangePassword\":\n+                    if (reference instanceof User) {\n+                        attrValue.setBooleanValue(((User) reference).isMustChangePassword());\n+                        values.add(attrValue);\n+                    }\n+                    break;\n+\n                 default:\n                     try {\n-                        attrValue.setStringValue(FieldUtils.readField(\n-                                reference, intAttrName.getField(), true).toString());\n+                        Object fieldValue = FieldUtils.readField(reference, intAttrName.getField(), true);\n+                        if (fieldValue instanceof Date) {\n+                            // needed because ConnId does not natively supports the Date type\n+                            attrValue.setStringValue(DateFormatUtils.ISO_8601_EXTENDED_DATETIME_TIME_ZONE_FORMAT.\n+                                    format((Date) fieldValue));\n+                        } else if (Boolean.TYPE.isInstance(fieldValue)) {\n+                            attrValue.setBooleanValue((Boolean) fieldValue);\n+                        } else if (Double.TYPE.isInstance(fieldValue) || Float.TYPE.isInstance(fieldValue)) {\n+                            attrValue.setDoubleValue((Double) fieldValue);\n+                        } else if (Long.TYPE.isInstance(fieldValue) || Integer.TYPE.isInstance(fieldValue)) {\n+                            attrValue.setLongValue((Long) fieldValue);\n+                        } else {\n+                            attrValue.setStringValue(fieldValue.toString());\n+                        }\n                         values.add(attrValue);\n-                    } catch (IllegalAccessException e) {\n+                    } catch (Exception e) {\n                         LOG.error(\"Could not read value of '{}' from {}\", intAttrName.getField(), reference, e);\n                     }\n             }"}]}