{"sha":"e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU1MTBhMGI4NjNhMDk3YmExY2YyY2U2ZTFmYjYzMDUzY2NhNmZiNGM=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-18T13:51:53Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-18T13:51:53Z"},"message":"[SYNCOPE-231]\n* Enabling some first CXF Webservices.\n* Code cleanup (adding final to method parameters)\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1435135 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"12a0c395fccbc4151acc6c68cd1330f4dea629b9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/12a0c395fccbc4151acc6c68cd1330f4dea629b9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/comments","author":null,"committer":null,"parents":[{"sha":"8784318740cecee652e4c55433f05b4f8189882b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8784318740cecee652e4c55433f05b4f8189882b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8784318740cecee652e4c55433f05b4f8189882b"}],"stats":{"total":1862,"additions":1495,"deletions":367},"files":[{"sha":"963ed725d99ccea1256c9de59e6cbe4c8714a5b3","filename":"client/src/main/java/org/apache/syncope/client/to/ConfigurationTO.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -18,8 +18,13 @@\n  */\n package org.apache.syncope.client.to;\n \n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+\n import org.apache.syncope.client.AbstractBaseBean;\n \n+@XmlRootElement(name = \"configuration\")\n+@XmlType\n public class ConfigurationTO extends AbstractBaseBean {\n \n     private static final long serialVersionUID = -3825039700228595590L;\n@@ -32,15 +37,15 @@ public String getKey() {\n         return key;\n     }\n \n-    public void setKey(String key) {\n+    public void setKey(final String key) {\n         this.key = key;\n     }\n \n     public String getValue() {\n         return value;\n     }\n \n-    public void setValue(String value) {\n+    public void setValue(final String value) {\n         this.value = value;\n     }\n }"},{"sha":"bf1741a9e4cb5613dd19da2fc096a805d78d6f07","filename":"client/src/main/java/org/apache/syncope/client/to/EntitlementTO.java","status":"modified","additions":11,"deletions":48,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FEntitlementTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FEntitlementTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FEntitlementTO.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -18,73 +18,36 @@\n  */\r\n package org.apache.syncope.client.to;\r\n \r\n-import java.io.Serializable;\r\n-\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n-import javax.xml.bind.annotation.XmlValue;\r\n \r\n-@XmlRootElement\r\n+import org.apache.syncope.client.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"entitlement\")\r\n @XmlType\r\n-public class EntitlementTO implements Serializable {\r\n+public class EntitlementTO extends AbstractBaseBean {\r\n \r\n-    private static final long serialVersionUID = 7233619557177034458L;\r\n+    private static final long serialVersionUID = 7133614577172038452L;\r\n \r\n     private String name;\r\n \r\n-    public EntitlementTO() {\r\n-    }\r\n-\r\n-    public EntitlementTO(String name) {\r\n-        this.name = name;\r\n+    public static EntitlementTO instance(final String name) {\r\n+        EntitlementTO instance = new EntitlementTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n     }\r\n \r\n     /**\r\n      * @return the name\r\n      */\r\n-    @XmlValue\r\n     public String getName() {\r\n         return name;\r\n     }\r\n \r\n     /**\r\n-     * @param name\r\n-     *            the name to set\r\n+     * @param name the name to set\r\n      */\r\n-    public void setName(String name) {\r\n+    public void setName(final String name) {\r\n         this.name = name;\r\n     }\r\n-\r\n-    @Override\r\n-    public int hashCode() {\r\n-        final int prime = 31;\r\n-        int result = 1;\r\n-        result = prime * result + ((name == null)\r\n-                ? 0\r\n-                : name.hashCode());\r\n-        return result;\r\n-    }\r\n-\r\n-    @Override\r\n-    public boolean equals(Object obj) {\r\n-        if (this == obj)\r\n-            return true;\r\n-        if (obj == null)\r\n-            return false;\r\n-        if (!(obj instanceof EntitlementTO))\r\n-            return false;\r\n-        EntitlementTO other = (EntitlementTO) obj;\r\n-        if (name == null) {\r\n-            if (other.name != null)\r\n-                return false;\r\n-        } else if (!name.equals(other.name))\r\n-            return false;\r\n-        return true;\r\n-    }\r\n-\r\n-    @Override\r\n-    public String toString() {\r\n-        return \"EntitlementTO [\" + name + \"]\";\r\n-    }\r\n-\r\n }\r"},{"sha":"4dbe8bc0b002801be4c95f78147dff054fd367a2","filename":"client/src/main/java/org/apache/syncope/client/to/MailTemplateTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMailTemplateTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMailTemplateTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FMailTemplateTO.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.client.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"mailTemplate\")\r\n+@XmlType\r\n+public class MailTemplateTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 7232619557172031478L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static MailTemplateTO instance(final String name) {\r\n+        MailTemplateTO templateTO = new MailTemplateTO();\r\n+        templateTO.setName(name);\r\n+        return templateTO;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"16c1aaa98c2adb02e89f32909df525ff04a5776a","filename":"client/src/main/java/org/apache/syncope/client/to/ValidatorTO.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FValidatorTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FValidatorTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FValidatorTO.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,53 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.client.AbstractBaseBean;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class ValidatorTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 7233619557177034453L;\r\n+\r\n+    private String name;\r\n+\r\n+    public static ValidatorTO instance(final String name) {\r\n+        ValidatorTO instance = new ValidatorTO();\r\n+        instance.setName(name);\r\n+        return instance;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name\r\n+     */\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param name the name to set\r\n+     */\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r"},{"sha":"c65446265d2a29b180f76cad7c7b4a574670bf00","filename":"client/src/main/java/org/apache/syncope/client/util/CollectionWrapper.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Futil%2FCollectionWrapper.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,111 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.client.util;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.syncope.client.to.EntitlementTO;\r\n+import org.apache.syncope.client.to.MailTemplateTO;\r\n+import org.apache.syncope.client.to.ValidatorTO;\r\n+import org.springframework.web.servlet.ModelAndView;\r\n+\r\n+public final class CollectionWrapper {\r\n+\r\n+    private CollectionWrapper() {\r\n+    }\r\n+\r\n+    public static Set<EntitlementTO> wrap(final Set<String> collection) {\r\n+        Set<EntitlementTO> respons = new HashSet<EntitlementTO>();\r\n+        for (String e : collection) {\r\n+            respons.add(EntitlementTO.instance(e));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<EntitlementTO> wrap(final List<String> collection) {\r\n+        List<EntitlementTO> respons = new ArrayList<EntitlementTO>();\r\n+        for (String e : collection) {\r\n+            respons.add(EntitlementTO.instance(e));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<String> unwrap(final Set<EntitlementTO> collection) {\r\n+        Set<String> respons = new HashSet<String>();\r\n+        for (EntitlementTO e : collection) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrap(final List<EntitlementTO> collection) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (EntitlementTO e : collection) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<MailTemplateTO> wrapMailTemplates(final ModelAndView mailTemplates) {\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        Set<String> collection = (Set<String>) mailTemplates.getModel().values().iterator().next();\r\n+        return wrapMailTemplates(collection);\r\n+    }\r\n+\r\n+    public static Set<MailTemplateTO> wrapMailTemplates(final Set<String> collection) {\r\n+        Set<MailTemplateTO> respons = new HashSet<MailTemplateTO>();\r\n+        for (String e : collection) {\r\n+            respons.add(MailTemplateTO.instance(e));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<ValidatorTO> wrapValidator(final ModelAndView validators) {\r\n+        @SuppressWarnings(\"unchecked\")\r\n+        Set<String> collection = (Set<String>) validators.getModel().values().iterator().next();\r\n+        return wrapValidator(collection);\r\n+    }\r\n+\r\n+    public static List<String> unwrapValidator(final List<ValidatorTO> collection) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (ValidatorTO e : collection) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static List<String> unwrapMailTemplates(final List<MailTemplateTO> collection) {\r\n+        List<String> respons = new ArrayList<String>();\r\n+        for (MailTemplateTO e : collection) {\r\n+            respons.add(e.getName());\r\n+        }\r\n+        return respons;\r\n+    }\r\n+\r\n+    public static Set<ValidatorTO> wrapValidator(final Set<String> collection) {\r\n+        Set<ValidatorTO> respons = new HashSet<ValidatorTO>();\r\n+        for (String e : collection) {\r\n+            respons.add(ValidatorTO.instance(e));\r\n+        }\r\n+        return respons;\r\n+    }\r\n+}\r"},{"sha":"020816912ea1d3dbd6cf146bfe46a7de2621bd44","filename":"client/src/main/java/org/apache/syncope/services/ConfigurationService.java","status":"modified","additions":8,"deletions":4,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FConfigurationService.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -20,6 +20,7 @@\n \r\n import java.util.List;\r\n import java.util.Set;\r\n+\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n@@ -29,29 +30,32 @@\n import javax.ws.rs.Produces;\r\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n+\r\n import org.apache.syncope.client.to.ConfigurationTO;\r\n+import org.apache.syncope.client.to.MailTemplateTO;\r\n+import org.apache.syncope.client.to.ValidatorTO;\r\n \r\n @Path(\"configurations\")\r\n public interface ConfigurationService {\r\n \r\n     @POST\r\n-    ConfigurationTO create(ConfigurationTO configurationTO);\r\n+    Response create(ConfigurationTO configurationTO);\r\n \r\n     @GET\r\n     @Produces(MediaType.APPLICATION_OCTET_STREAM)\r\n     Response dbExport();\r\n \r\n     @DELETE\r\n     @Path(\"{key}\")\r\n-    ConfigurationTO delete(@PathParam(\"key\") String key);\r\n+    void delete(@PathParam(\"key\") String key);\r\n \r\n     @GET\r\n     @Path(\"mailTemplates\")\r\n-    Set<String> getMailTemplates();\r\n+    Set<MailTemplateTO> getMailTemplates();\r\n \r\n     @GET\r\n     @Path(\"validators\")\r\n-    Set<String> getValidators();\r\n+    Set<ValidatorTO> getValidators();\r\n \r\n     @GET\r\n     List<ConfigurationTO> list();\r"},{"sha":"4be660378bc608413e4d2bfbf6c449f1687b368b","filename":"client/src/main/java/org/apache/syncope/services/EntitlementService.java","status":"modified","additions":11,"deletions":2,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FEntitlementService.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -19,16 +19,25 @@\n package org.apache.syncope.services;\r\n \r\n import java.util.Set;\r\n+\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.Path;\r\n \r\n+import org.apache.syncope.client.to.EntitlementTO;\r\n+\r\n @Path(\"entitlements\")\r\n public interface EntitlementService {\r\n \r\n+    /**\r\n+     * @return Returns a collection of all known entitlements.\r\n+     */\r\n     @GET\r\n-    Set<String> getAllEntitlements();\r\n+    Set<EntitlementTO> getAllEntitlements();\r\n \r\n+    /**\r\n+     * @return Returns a collection of entitlements assigned to user making this request (Service Call).\r\n+     */\r\n     @GET\r\n     @Path(\"own\")\r\n-    Set<String> getMyEntitlements();\r\n+    Set<EntitlementTO> getMyEntitlements();\r\n }\r"},{"sha":"72466cc56bce7ea41dc78453407ecef47beba4fd","filename":"client/src/main/java/org/apache/syncope/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":22,"deletions":11,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -19,12 +19,18 @@\n package org.apache.syncope.services.proxy;\r\n \r\n import java.io.InputStream;\r\n+import java.net.URI;\r\n import java.util.Arrays;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n+\r\n import javax.ws.rs.core.Response;\r\n+\r\n import org.apache.syncope.client.to.ConfigurationTO;\r\n+import org.apache.syncope.client.to.MailTemplateTO;\r\n+import org.apache.syncope.client.to.ValidatorTO;\r\n+import org.apache.syncope.client.util.CollectionWrapper;\r\n import org.apache.syncope.services.ConfigurationService;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n@@ -35,14 +41,16 @@ public ConfigurationServiceProxy(final String baseUrl, final RestTemplate restTe\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO create(final ConfigurationTO configurationTO) {\r\n-        return getRestTemplate().postForObject(\r\n-                baseUrl + \"configuration/create\", configurationTO, ConfigurationTO.class);\r\n+    public Response create(final ConfigurationTO configurationTO) {\r\n+        ConfigurationTO created = getRestTemplate().postForObject(baseUrl + \"configuration/create\",\r\n+                configurationTO, ConfigurationTO.class);\r\n+        URI location = URI.create(baseUrl + \"configuration/read/\" + created.getKey() + \".json\");\r\n+        return Response.created(location).entity(created).build();\r\n     }\r\n \r\n     @Override\r\n-    public ConfigurationTO delete(final String key) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\r\n+    public void delete(final String key) {\r\n+        getRestTemplate().getForObject(baseUrl + \"configuration/delete/{key}.json\", ConfigurationTO.class, key);\r\n     }\r\n \r\n     @Override\r\n@@ -58,25 +66,28 @@ public ConfigurationTO read(final String key) {\n \r\n     @Override\r\n     public ConfigurationTO update(final String key, final ConfigurationTO configurationTO) {\r\n-        return getRestTemplate()\r\n-                .postForObject(baseUrl + \"configuration/update\", configurationTO, ConfigurationTO.class);\r\n+        return getRestTemplate().postForObject(baseUrl + \"configuration/update\", configurationTO,\r\n+                ConfigurationTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public Set<String> getValidators() {\r\n-        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n+    public Set<ValidatorTO> getValidators() {\r\n+        Set<String> response = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n                 baseUrl + \"configuration/validators.json\", String[].class)));\r\n+        return CollectionWrapper.wrapValidator(response);\r\n     }\r\n \r\n     @Override\r\n-    public Set<String> getMailTemplates() {\r\n-        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n+    public Set<MailTemplateTO> getMailTemplates() {\r\n+        Set<String> response = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n                 baseUrl + \"configuration/mailTemplates.json\", String[].class)));\r\n+        return CollectionWrapper.wrapMailTemplates(response);\r\n     }\r\n \r\n     @Override\r\n     public Response dbExport() {\r\n         return Response.ok(getRestTemplate().getForObject(baseUrl + \"configuration/dbexport\", InputStream.class))\r\n                 .build();\r\n     }\r\n+\r\n }\r"},{"sha":"cef2c1d2a9856b95eb4edf53cc6e8c1d388b5d17","filename":"client/src/main/java/org/apache/syncope/services/proxy/EntitlementServiceProxy.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FEntitlementServiceProxy.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -21,6 +21,8 @@\n import java.util.Arrays;\r\n import java.util.HashSet;\r\n import java.util.Set;\r\n+import org.apache.syncope.client.to.EntitlementTO;\r\n+import org.apache.syncope.client.util.CollectionWrapper;\r\n import org.apache.syncope.services.EntitlementService;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n@@ -31,14 +33,16 @@ public EntitlementServiceProxy(final String baseUrl, final RestTemplate restTemp\n     }\r\n \r\n     @Override\r\n-    public Set<String> getAllEntitlements() {\r\n-        return new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(baseUrl + \"auth/allentitlements.json\",\r\n-                String[].class)));\r\n+    public Set<EntitlementTO> getAllEntitlements() {\r\n+        Set<String> entitlements = new HashSet<String>(Arrays.asList(new RestTemplate().getForObject(\r\n+                baseUrl + \"auth/allentitlements.json\", String[].class)));\r\n+        return CollectionWrapper.wrap(entitlements);\r\n     }\r\n \r\n     @Override\r\n-    public Set<String> getMyEntitlements() {\r\n-        return new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(baseUrl + \"auth/entitlements.json\",\r\n-                String[].class)));\r\n+    public Set<EntitlementTO> getMyEntitlements() {\r\n+        Set<String> entitlements = new HashSet<String>(Arrays.asList(getRestTemplate().getForObject(\r\n+                baseUrl + \"auth/entitlements.json\", String[].class)));\r\n+        return CollectionWrapper.wrap(entitlements);\r\n     }\r\n }\r"},{"sha":"64b6c6b70c6c77c7649413b4d6b88be11d694fcd","filename":"client/src/main/java/org/apache/syncope/services/proxy/SpringServiceProxy.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -36,7 +36,6 @@ public void setRestTemplate(final RestTemplate restTemplate) {\n     }\r\n \r\n     public RestTemplate getRestTemplate() {\r\n-        //return callback.getRestTemplate();\r\n         return restTemplate;\r\n     }\r\n }\r"},{"sha":"3eeaaf93fa3c444c1324f5e2fbd9fb23181b1541","filename":"console/src/main/java/org/apache/syncope/console/pages/Login.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -21,13 +21,17 @@\n import java.util.Arrays;\n import java.util.List;\n import java.util.Locale;\n+import java.util.Set;\n+\n import org.apache.http.HttpResponse;\n import org.apache.http.auth.UsernamePasswordCredentials;\n import org.apache.http.client.methods.HttpGet;\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.http.util.EntityUtils;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n+import org.apache.syncope.client.to.EntitlementTO;\n import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.client.util.CollectionWrapper;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.wicket.markup.html.form.LinkPanel;\n import org.apache.syncope.services.EntitlementService;\n@@ -187,7 +191,8 @@ private String[] authenticate(final String userId, final String password) {\n                 requestFactory.getAuthScope(), new UsernamePasswordCredentials(userId, password));\n \n         // 2. Search authorizations for user specified by credentials\n-        return SyncopeSession.get().getService(EntitlementService.class).getMyEntitlements().toArray(new String[0]);\n+        Set<EntitlementTO> entitlements = SyncopeSession.get().getService(EntitlementService.class).getMyEntitlements();\n+        return CollectionWrapper.unwrap(entitlements).toArray(new String[0]);\n     }\n \n     private boolean isSelfRegistrationAllowed() {"},{"sha":"cbff548b0b641ce7e2a841f5d996fc967f7e8391","filename":"console/src/main/java/org/apache/syncope/console/rest/AuthRestClient.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -20,7 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import java.util.Set;\n \n+import org.apache.syncope.client.to.EntitlementTO;\n+import org.apache.syncope.client.util.CollectionWrapper;\n import org.apache.syncope.services.EntitlementService;\n import org.springframework.stereotype.Component;\n \n@@ -38,7 +41,9 @@ public class AuthRestClient extends BaseRestClient {\n      * @return List<String>\n      */\n     public List<String> getAllEntitlements() {\n-        return new ArrayList<String>(getService(EntitlementService.class).getAllEntitlements());\n+        List<EntitlementTO> entitlemens = new ArrayList<EntitlementTO>(getService(EntitlementService.class)\n+                .getAllEntitlements());\n+        return CollectionWrapper.unwrap(entitlemens);\n     }\n \n     /**\n@@ -47,6 +52,8 @@ public List<String> getAllEntitlements() {\n      * @return List<String>\n      */\n     public List<String> getOwnedEntitlements() {\n-        return new ArrayList<String>(getService(EntitlementService.class).getMyEntitlements());\n+        List<EntitlementTO> entitlemens = new ArrayList<EntitlementTO>(getService(EntitlementService.class)\n+                .getMyEntitlements());\n+        return CollectionWrapper.unwrap(entitlemens);\n     }\n }"},{"sha":"ec6d4c472fbe8cfb9973cbbab77a1edbc084123c","filename":"console/src/main/java/org/apache/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -64,6 +64,8 @@ public void updateConfiguration(final ConfigurationTO configurationTO) {\n      * Delete a configuration by key.\n      */\n     public ConfigurationTO deleteConfiguration(final String key) {\n-        return getService(ConfigurationService.class).delete(key);\n+        ConfigurationTO response = getService(ConfigurationService.class).read(key);\n+        getService(ConfigurationService.class).delete(key);\n+        return response;\n     }\n }"},{"sha":"4335041301fb7f2401a6a65b91d25ed427b1da70","filename":"console/src/main/java/org/apache/syncope/console/rest/NotificationRestClient.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -20,7 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+import org.apache.syncope.client.to.MailTemplateTO;\n import org.apache.syncope.client.to.NotificationTO;\n+import org.apache.syncope.client.to.ValidatorTO;\n+import org.apache.syncope.client.util.CollectionWrapper;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.services.ConfigurationService;\n import org.apache.syncope.services.NotificationService;\n@@ -53,7 +56,8 @@ public void deleteNotification(final Long id) throws SyncopeClientCompositeError\n     }\n \n     public List<String> getMailTemplates() throws SyncopeClientCompositeErrorException {\n-        return new ArrayList<String>(getService(ConfigurationService.class).getMailTemplates());\n+        return CollectionWrapper.unwrapMailTemplates(new ArrayList<MailTemplateTO>(getService(\n+                ConfigurationService.class).getMailTemplates()));\n     }\n \n     public List<String> getEvents() throws SyncopeClientCompositeErrorException {"},{"sha":"f8d24ffdc4d9d750be18d8f5398e6c7f500d7e35","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -23,7 +23,9 @@\n \n import org.apache.syncope.client.to.DerivedSchemaTO;\n import org.apache.syncope.client.to.SchemaTO;\n+import org.apache.syncope.client.to.ValidatorTO;\n import org.apache.syncope.client.to.VirtualSchemaTO;\n+import org.apache.syncope.client.util.CollectionWrapper;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.services.ConfigurationService;\n import org.apache.syncope.services.SchemaService;\n@@ -104,7 +106,8 @@ public List<String> getDerivedSchemaNames(final AttributableType type) {\n         final List<String> userDerivedSchemasNames = new ArrayList<String>();\n \n         try {\n-            final List<DerivedSchemaTO> userDerivedSchemas = getService(SchemaService.class).list(type, SchemaType.DERIVED);\n+            final List<DerivedSchemaTO> userDerivedSchemas = getService(SchemaService.class).list(type,\n+                    SchemaType.DERIVED);\n \n             for (DerivedSchemaTO schemaTO : userDerivedSchemas) {\n                 userDerivedSchemasNames.add(schemaTO.getName());\n@@ -143,7 +146,8 @@ public List<String> getVirtualSchemaNames(final AttributableType type) {\n         final List<String> userVirtualSchemasNames = new ArrayList<String>();\n \n         try {\n-            final List<VirtualSchemaTO> userVirtualSchemas = getService(SchemaService.class).list(type, SchemaType.VIRTUAL);\n+            final List<VirtualSchemaTO> userVirtualSchemas = getService(SchemaService.class).list(type,\n+                    SchemaType.VIRTUAL);\n             for (VirtualSchemaTO schemaTO : userVirtualSchemas) {\n                 userVirtualSchemasNames.add(schemaTO.getName());\n             }\n@@ -273,13 +277,15 @@ public VirtualSchemaTO deleteVirtualSchema(final AttributableType type, final St\n      * Populator for Validator Schema DropDown components.\n      */\n     public List<String> getAllValidatorClasses() {\n-        List<String> validators = null;\n+        List<String> response = null;\n \n         try {\n-            validators = new ArrayList<String>(getService(ConfigurationService.class).getValidators());\n+            List<ValidatorTO> validators = new ArrayList<ValidatorTO>(getService(ConfigurationService.class)\n+                    .getValidators());\n+            response = CollectionWrapper.unwrapValidator(validators);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While getting all validators\", e);\n         }\n-        return validators;\n+        return response;\n     }\n }"},{"sha":"dc9733d6913743039a3048532bd48f03fa28fcc1","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -58,11 +58,11 @@ public List<UserTO> list(final int page, final int size) {\n         return getService(UserService.class).list(page, size);\n     }\n \n-    public UserTO create(final UserTO userTO) throws SyncopeClientCompositeErrorException {\n+    public UserTO create(final UserTO userTO) {\n         return getService(UserService.class).create(userTO);\n     }\n \n-    public UserTO update(UserMod userModTO) throws SyncopeClientCompositeErrorException {\n+    public UserTO update(final UserMod userModTO) {\n         return getService(UserService.class).update(userModTO.getId(), userModTO);\n     }\n \n@@ -101,27 +101,24 @@ public Integer searchCount(final NodeCond searchCond) {\n     }\n \n     @Override\n-    public List<UserTO> search(final NodeCond searchCond, final int page, final int size)\n-            throws SyncopeClientCompositeErrorException {\n+    public List<UserTO> search(final NodeCond searchCond, final int page, final int size) {\n         return getService(UserService.class).search(searchCond, page, size);\n     }\n \n     @Override\n-    public ConnObjectTO getRemoteObject(final String resourceName, final String objectId)\n-            throws SyncopeClientCompositeErrorException {\n+    public ConnObjectTO getRemoteObject(final String resourceName, final String objectId) {\n         return getService(ResourceService.class).getConnector(resourceName, AttributableType.USER, objectId);\n     }\n \n-    public UserTO reactivate(long userId, List<StatusBean> statuses) throws SyncopeClientCompositeErrorException {\n+    public UserTO reactivate(final long userId, final List<StatusBean> statuses) {\n         return enable(userId, statuses, true);\n     }\n \n-    public UserTO suspend(long userId, List<StatusBean> statuses) throws SyncopeClientCompositeErrorException {\n+    public UserTO suspend(final long userId, final List<StatusBean> statuses) {\n         return enable(userId, statuses, false);\n     }\n \n-    private UserTO enable(final long userId, final List<StatusBean> statuses, final boolean enable)\n-            throws SyncopeClientCompositeErrorException {\n+    private UserTO enable(final long userId, final List<StatusBean> statuses, final boolean enable) {\n \n         StatusMod statusMod = new StatusMod();\n         statusMod.setId(userId);"},{"sha":"903b10f92d8704188f88db3747f2b4a97015e6ca","filename":"console/src/main/resources/applicationContext.xml","status":"modified","additions":92,"deletions":92,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2FapplicationContext.xml?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -18,14 +18,11 @@ specific language governing permissions and limitations\n under the License.\n \n -->\n-<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n-       xmlns:p=\"http://www.springframework.org/schema/p\"\n-       xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n-       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+   xmlns:aop=\"http://www.springframework.org/schema/aop\" xmlns:p=\"http://www.springframework.org/schema/p\"\n+   xmlns:context=\"http://www.springframework.org/schema/context\" xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n+   xmlns:tx=\"http://www.springframework.org/schema/tx\"\n+   xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n@@ -34,89 +31,92 @@ under the License.\n        http://www.springframework.org/schema/tx\n        http://www.springframework.org/schema/tx/spring-tx.xsd\n        http://www.springframework.org/schema/aop\n-       http://www.springframework.org/schema/aop/spring-aop.xsd\">\n-\n-  <context:component-scan base-package=\"org.apache.syncope.console.rest\"/>\n-\n-  <bean id=\"systemPropertyConfigurer\"\n-        class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n-    <property name=\"order\" value=\"1\"/> \n-    <property name=\"location\" value=\"file:#{(systemProperties['syncope.console.configuration'])}\"/> \n-    <property name=\"ignoreResourceNotFound\" value=\"true\"/> \n-    <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/> \n-  </bean>\n-  <bean id=\"defaultPropertyConfigurer\"\n-        class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n-    <property name=\"locations\">\n-      <list>\n-        <value>classpath:configuration.properties</value>\n-      </list>\n-    </property>\n-  </bean>\n-  \n-  <bean id=\"baseURL\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${scheme}://${host}:${port}${rootPath}\"/>\n-  </bean>\n-\n-  <bean id=\"version\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${version}\"/>\n-  </bean>\n-\n-  <bean id=\"authorizations\" class=\"java.lang.String\">\n-    <constructor-arg value=\"authorizations.xml\"/>\n-  </bean>\n-\n-  <bean id=\"syncopeApplication\" class=\"org.apache.syncope.console.SyncopeApplication\"/>\n-\n-  <bean id=\"jacksonObjectMapper\" class=\"org.codehaus.jackson.map.ObjectMapper\"/>\n-        \n-  <bean id=\"mappingJacksonHttpMessageConverter\"\n-        class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n-    <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n-  </bean>\n-\n-  <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.PoolingClientConnectionManager\"/>\n-  \n-  <bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n-    <property name=\"parameterMap\">\n-      <map key-type=\"java.lang.String\">\n-        <entry>\n-          <key>\n-            <value>http.protocol.handle-authentication</value>\n-          </key>\n-          <value type=\"java.lang.Boolean\">false</value>\n-        </entry>\n-        <entry>\n-          <key>\n-            <value>http.auth.credential-charset</value>\n-          </key>\n-          <value type=\"java.lang.String\">UTF-8</value>\n-        </entry>\n-      </map>\n-    </property>\n-  </bean>\n-  \n-  <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\" scope=\"prototype\">\n-    <constructor-arg value=\"${host}\"/>\n-    <constructor-arg value=\"${port}\"/>\n-    <constructor-arg value=\"${scheme}\"/>\n-    <constructor-arg ref=\"httpClientConnManager\"/>\n-    <constructor-arg ref=\"httpClientParams\"/>\n-  </bean>\n-  \n-  <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\" scope=\"prototype\">\n-    <constructor-arg ref=\"httpClientFactory\"/>\n-\n-    <property name=\"errorHandler\">\n-      <bean id=\"syncopeClientErrorHandler\"\n-            class=\"org.apache.syncope.client.validation.SyncopeClientErrorHandler\"/>\n-    </property>\n-  </bean>\n-\n-  <bean id=\"preferenceManager\" class=\"org.apache.syncope.console.commons.PreferenceManager\"/>\n-\n-  <bean id=\"xmlRolesReader\" class=\"org.apache.syncope.console.commons.XMLRolesReader\"/>\n-\n-  <bean id=\"roleTreeBuilder\" class=\"org.apache.syncope.console.commons.RoleTreeBuilder\"/>\n+       http://www.springframework.org/schema/aop/spring-aop.xsd\"\n+>\n+\n+   <context:component-scan base-package=\"org.apache.syncope.console.rest\" />\n+\n+   <bean id=\"systemPropertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n+      <property name=\"order\" value=\"1\" />\n+      <property name=\"location\" value=\"file:#{(systemProperties['syncope.console.configuration'])}\" />\n+      <property name=\"ignoreResourceNotFound\" value=\"true\" />\n+      <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\" />\n+   </bean>\n+   <bean id=\"defaultPropertyConfigurer\" class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n+      <property name=\"locations\">\n+         <list>\n+            <value>classpath:configuration.properties</value>\n+         </list>\n+      </property>\n+   </bean>\n+\n+   <bean id=\"baseURL\" class=\"java.lang.String\">\n+      <constructor-arg value=\"${scheme}://${host}:${port}${rootPath}\" />\n+   </bean>\n+\n+   <bean id=\"version\" class=\"java.lang.String\">\n+      <constructor-arg value=\"${version}\" />\n+   </bean>\n+\n+   <bean id=\"authorizations\" class=\"java.lang.String\">\n+      <constructor-arg value=\"authorizations.xml\" />\n+   </bean>\n+\n+   <bean id=\"syncopeApplication\" class=\"org.apache.syncope.console.SyncopeApplication\" />\n+\n+   <bean id=\"jacksonObjectMapper\" class=\"org.codehaus.jackson.map.ObjectMapper\" />\n+\n+   <bean id=\"mappingJacksonHttpMessageConverter\" class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n+      <property name=\"objectMapper\" ref=\"jacksonObjectMapper\" />\n+   </bean>\n+\n+   <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.PoolingClientConnectionManager\" />\n+\n+   <bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n+      <property name=\"parameterMap\">\n+         <map key-type=\"java.lang.String\">\n+            <entry>\n+               <key>\n+                  <value>http.protocol.handle-authentication</value>\n+               </key>\n+               <value type=\"java.lang.Boolean\">false</value>\n+            </entry>\n+            <entry>\n+               <key>\n+                  <value>http.auth.credential-charset</value>\n+               </key>\n+               <value type=\"java.lang.String\">UTF-8</value>\n+            </entry>\n+         </map>\n+      </property>\n+   </bean>\n+\n+   <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\"\n+      scope=\"prototype\"\n+   >\n+      <constructor-arg value=\"${host}\" />\n+      <constructor-arg value=\"${port}\" />\n+      <constructor-arg value=\"${scheme}\" />\n+      <constructor-arg ref=\"httpClientConnManager\" />\n+      <constructor-arg ref=\"httpClientParams\" />\n+   </bean>\n+\n+   <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n+      <constructor-arg ref=\"httpClientFactory\" />\n+      <property name=\"messageConverters\">\n+         <list>\n+            <ref bean=\"mappingJacksonHttpMessageConverter\" />\n+         </list>\n+      </property>\n+      <property name=\"errorHandler\">\n+         <bean id=\"syncopeClientErrorHandler\" class=\"org.apache.syncope.client.validation.SyncopeClientErrorHandler\" />\n+      </property>\n+   </bean>\n+\n+   <bean id=\"preferenceManager\" class=\"org.apache.syncope.console.commons.PreferenceManager\" />\n+\n+   <bean id=\"xmlRolesReader\" class=\"org.apache.syncope.console.commons.XMLRolesReader\" />\n+\n+   <bean id=\"roleTreeBuilder\" class=\"org.apache.syncope.console.commons.RoleTreeBuilder\" />\n \n </beans>"},{"sha":"651580efffd52ba8f0c177b81b81f91decbd3708","filename":"core/pom.xml","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -93,6 +93,23 @@ under the License.\n       <groupId>org.activiti</groupId>\n       <artifactId>activiti-spring</artifactId>\n     </dependency>\n+\t\n+\t<dependency>\n+\t  <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n+    </dependency>\n+  \t<dependency>\n+\t  <groupId>org.apache.cxf</groupId>\n+\t  <artifactId>cxf-rt-rs-extension-providers</artifactId>\n+\t</dependency>\n+\t<dependency>\n+\t  <groupId>org.apache.cxf</groupId>\n+\t  <artifactId>cxf-rt-rs-extension-search</artifactId>\n+\t</dependency>\n+\t<dependency>\n+\t  <groupId>org.apache.cxf</groupId>\n+\t  <artifactId>cxf-rt-frontend-jaxws</artifactId>\n+\t</dependency>\n \n     <dependency>\n       <groupId>org.springframework</groupId>\n@@ -172,6 +189,11 @@ under the License.\n       <groupId>org.aspectj</groupId>\n       <artifactId>aspectjweaver</artifactId>\n     </dependency>\n+\t\n+\t<dependency>\n+\t  <groupId>org.codehaus.jackson</groupId>\n+\t  <artifactId>jackson-jaxrs</artifactId>\n+\t</dependency>\n \n     <dependency>\n       <groupId>com.thoughtworks.xstream</groupId>"},{"sha":"e6eaae19316444b061ec75a7806f707fb5d38fea","filename":"core/src/main/java/org/apache/syncope/core/rest/QueryResourceInfoComperator.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FQueryResourceInfoComperator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FQueryResourceInfoComperator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FQueryResourceInfoComperator.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,116 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.rest;\r\n+\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.cxf.jaxrs.ext.ResourceComparator;\r\n+import org.apache.cxf.jaxrs.model.ClassResourceInfo;\r\n+import org.apache.cxf.jaxrs.model.OperationResourceInfo;\r\n+import org.apache.cxf.jaxrs.model.OperationResourceInfoComparator;\r\n+import org.apache.cxf.jaxrs.model.Parameter;\r\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\r\n+import org.apache.cxf.message.Message;\r\n+\r\n+public class QueryResourceInfoComperator extends OperationResourceInfoComparator implements ResourceComparator {\r\n+\r\n+    public QueryResourceInfoComperator() {\r\n+        super(null, null);\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compare(final ClassResourceInfo cri1, final ClassResourceInfo cri2, final Message message) {\r\n+        // Leave Class selection to CXF\r\n+        return 0;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compare(final OperationResourceInfo oper1, final OperationResourceInfo oper2, final Message message) {\r\n+\r\n+        // Check if CXF can make a decision\r\n+        int cxfResult = super.compare(oper1, oper2);\r\n+        if (cxfResult != 0) {\r\n+            return cxfResult;\r\n+        }\r\n+\r\n+        int op1Counter = getMatchingRate(oper1, message);\r\n+        int op2Counter = getMatchingRate(oper2, message);\r\n+\r\n+        return op1Counter == op2Counter\r\n+                ? 0\r\n+                : op1Counter < op2Counter\r\n+                        ? 1\r\n+                        : -1;\r\n+    }\r\n+\r\n+    /**\r\n+     * This method calculates a number indicating a good or bad match between values provided within the request and\r\n+     * expected method parameters. A higher number means a better match.\r\n+     *\r\n+     * @param operation The operation to be rated, based on contained parameterInfo values.\r\n+     * @param message A message containing query and header values from user request\r\n+     * @return A positive or negative number, indicating a good match between query and method\r\n+     */\r\n+    protected int getMatchingRate(final OperationResourceInfo operation, final Message message) {\r\n+\r\n+        List<Parameter> params = operation.getParameters();\r\n+        if (params == null || params.isEmpty()) {\r\n+            return 0;\r\n+        }\r\n+\r\n+        // Get Request QueryParams\r\n+        String query = (String) message.get(Message.QUERY_STRING);\r\n+        String path = (String) message.get(Message.REQUEST_URI);\r\n+        Map<String, List<String>> qParams = JAXRSUtils.getStructuredParams(query, \"&\", true, false);\r\n+        Map<String, List<String>> mParams = JAXRSUtils.getMatrixParams(path, true);\r\n+        // Get Request Headers\r\n+        Map<?, ?> qHeader = (java.util.Map<?, ?>) message.get(Message.PROTOCOL_HEADERS);\r\n+\r\n+        int rate = 0;\r\n+        for (Parameter p : params) {\r\n+            switch (p.getType()) {\r\n+                case QUERY:\r\n+                    if (qParams.containsKey(p.getName())) {\r\n+                        rate += 2;\r\n+                    } else if (p.getDefaultValue() == null) {\r\n+                        rate -= 1;\r\n+                    }\r\n+                    break;\r\n+                case MATRIX:\r\n+                    if (mParams.containsKey(p.getName())) {\r\n+                        rate += 2;\r\n+                    } else if (p.getDefaultValue() == null) {\r\n+                        rate -= 1;\r\n+                    }\r\n+                    break;\r\n+                case HEADER:\r\n+                    if (qHeader.containsKey(p.getName())) {\r\n+                        rate += 2;\r\n+                    } else if (p.getDefaultValue() == null) {\r\n+                        rate -= 1;\r\n+                    }\r\n+                    break;\r\n+                default:\r\n+                    break;\r\n+            }\r\n+        }\r\n+        return rate;\r\n+    }\r\n+}\r"},{"sha":"408199e5bb2f821632e17359a6eac697354e656c","filename":"core/src/main/java/org/apache/syncope/core/rest/RestServiceExceptionMapper.java","status":"added","additions":282,"deletions":0,"changes":282,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRestServiceExceptionMapper.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,282 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.rest;\r\n+\r\n+import java.util.Map.Entry;\r\n+import java.util.Set;\r\n+\r\n+import javax.persistence.PersistenceException;\r\n+import javax.ws.rs.core.HttpHeaders;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.Response.ResponseBuilder;\r\n+import javax.ws.rs.ext.ExceptionMapper;\r\n+import javax.ws.rs.ext.Provider;\r\n+\r\n+import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n+import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\r\n+import org.apache.syncope.client.validation.SyncopeClientErrorHandler;\r\n+import org.apache.syncope.client.validation.SyncopeClientException;\r\n+import org.apache.syncope.core.persistence.dao.InvalidSearchConditionException;\r\n+import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\r\n+import org.apache.syncope.core.propagation.PropagationException;\r\n+import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\r\n+import org.apache.syncope.core.util.NotFoundException;\r\n+import org.apache.syncope.core.workflow.WorkflowException;\r\n+import org.apache.syncope.types.EntityViolationType;\r\n+import org.apache.syncope.types.SyncopeClientExceptionType;\r\n+import org.identityconnectors.framework.common.exceptions.ConfigurationException;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+import org.springframework.dao.DataIntegrityViolationException;\r\n+import org.springframework.orm.jpa.JpaSystemException;\r\n+\r\n+@Provider\r\n+public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\r\n+\r\n+    private static final String BASIC_REALM_UNAUTHORIZED = \"Basic realm=\\\"Spring Security Application\\\"\";\r\n+    private static final Logger LOG = LoggerFactory.getLogger(RestServiceExceptionMapper.class);\r\n+    public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\r\n+\r\n+    @Override\r\n+    public Response toResponse(final Exception ex) {\r\n+\r\n+        LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\r\n+\r\n+        // 1. Process SyncopeClientCompositeErrorException\r\n+        Response response = processCompositeExceptions(ex);\r\n+        if (response != null) {\r\n+            return response;\r\n+        }\r\n+\r\n+        // 2. Process Bad Requests\r\n+        response = processBadRequestExceptions(ex);\r\n+        if (response != null) {\r\n+            return response;\r\n+        }\r\n+\r\n+        // 3. Process Unauthorized\r\n+        response = processUnauthorizedExceptions(ex);\r\n+        if (response != null) {\r\n+            return response;\r\n+        }\r\n+\r\n+        // 4. Process Forbidden\r\n+        response = processForbiddenExceptions(ex);\r\n+        if (response != null) {\r\n+            return response;\r\n+        }\r\n+\r\n+        // 4. Process NotFound\r\n+        response = processNotFoundExceptions(ex);\r\n+        if (response != null) {\r\n+            return response;\r\n+        }\r\n+\r\n+        // 5. Process Conflict\r\n+        response = processConflictExceptions(ex);\r\n+        if (response != null) {\r\n+            return response;\r\n+        }\r\n+\r\n+        // 5. Process InternalServerError\r\n+        response = processServerErrorExceptions(ex);\r\n+        if (response != null) {\r\n+            return response;\r\n+        }\r\n+\r\n+        // 6. Rest is interpreted as InternalServerError\r\n+        ResponseBuilder responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\r\n+        responseBuilder.header(SyncopeClientExceptionType.Unknown.getElementHeaderName(), ex.getCause() == null\r\n+                ? ex.getMessage()\r\n+                : ex.getCause().getMessage());\r\n+\r\n+        return responseBuilder.build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Exception fromResponse(final Response r) {\r\n+        throw new UnsupportedOperationException(\r\n+                \"Call of fromResponse() method is not expected in RestServiceExceptionMapper\");\r\n+    }\r\n+\r\n+    private Response processCompositeExceptions(Exception ex) {\r\n+        Response response = null;\r\n+\r\n+        if (ex instanceof SyncopeClientCompositeErrorException) {\r\n+            ResponseBuilder responseBuilder = Response.status(((SyncopeClientCompositeErrorException) ex)\r\n+                    .getStatusCode().value());\r\n+            for (SyncopeClientException sce : ((SyncopeClientCompositeErrorException) ex).getExceptions()) {\r\n+                responseBuilder.header(EXCEPTION_TYPE_HEADER, sce.getType().getHeaderValue());\r\n+\r\n+                for (String attributeName : sce.getElements()) {\r\n+                    responseBuilder.header(sce.getType().getElementHeaderName(), attributeName);\r\n+                }\r\n+            }\r\n+            response = responseBuilder.build();\r\n+        }\r\n+        return response;\r\n+    }\r\n+\r\n+    private Response processForbiddenExceptions(Exception ex) {\r\n+        Response response = null;\r\n+        ResponseBuilder responseBuilder = Response.status(Response.Status.FORBIDDEN);\r\n+\r\n+        if (ex instanceof UnauthorizedRoleException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.UnauthorizedRole.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.UnauthorizedRole.getElementHeaderName(), ex.getMessage());\r\n+            response = responseBuilder.build();\r\n+        }\r\n+        return response;\r\n+    }\r\n+\r\n+    private Response processUnauthorizedExceptions(Exception ex) {\r\n+        Response response = null;\r\n+        ResponseBuilder responseBuilder = Response.status(Response.Status.UNAUTHORIZED);\r\n+\r\n+        if (ex instanceof org.springframework.security.access.AccessDeniedException) {\r\n+            response = responseBuilder.header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED).build();\r\n+        }\r\n+        return response;\r\n+    }\r\n+\r\n+    private Response processConflictExceptions(Exception ex) {\r\n+        Response response = null;\r\n+        ResponseBuilder responseBuilder = Response.status(Response.Status.CONFLICT);\r\n+\r\n+        if (ex instanceof DataIntegrityViolationException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.DataIntegrityViolation.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.DataIntegrityViolation.getElementHeaderName(),\r\n+                    ex.getCause() == null\r\n+                            ? ex.getMessage()\r\n+                            : ex.getCause().getMessage());\r\n+            response = responseBuilder.build();\r\n+        }\r\n+        return response;\r\n+    }\r\n+\r\n+    private Response processServerErrorExceptions(Exception ex) {\r\n+        Response response = null;\r\n+        ResponseBuilder responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\r\n+\r\n+        if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.Workflow.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.Workflow.getElementHeaderName(),\r\n+                    \"Currently unavailable. Please try later.\");\r\n+            response = responseBuilder.build();\r\n+\r\n+        } else if (ex instanceof JpaSystemException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.DataIntegrityViolation.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.DataIntegrityViolation.getElementHeaderName(),\r\n+                    ex.getCause() == null\r\n+                            ? ex.getMessage()\r\n+                            : ex.getCause().getMessage());\r\n+            response = responseBuilder.build();\r\n+\r\n+        } else if (ex instanceof PersistenceException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.GenericPersistence.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.GenericPersistence.getElementHeaderName(),\r\n+                    ex.getCause() == null\r\n+                            ? ex.getMessage()\r\n+                            : ex.getCause().getMessage());\r\n+            response = responseBuilder.build();\r\n+\r\n+        } else if (ex instanceof ConfigurationException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.InvalidExternalResource.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.InvalidExternalResource.getElementHeaderName(),\r\n+                    ex.getCause() == null\r\n+                            ? ex.getMessage()\r\n+                            : ex.getCause().getMessage());\r\n+            response = responseBuilder.build();\r\n+        }\r\n+\r\n+        return response;\r\n+    }\r\n+\r\n+    private Response processNotFoundExceptions(Exception ex) {\r\n+        Response response = null;\r\n+        ResponseBuilder responseBuilder = Response.status(Response.Status.NOT_FOUND);\r\n+\r\n+        if (ex instanceof NotFoundException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.NotFound.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.NotFound.getElementHeaderName(), ex.getMessage());\r\n+            response = responseBuilder.build();\r\n+\r\n+        } else if (ex instanceof MissingConfKeyException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.NotFound.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.NotFound.getElementHeaderName(),\r\n+                    ((MissingConfKeyException) ex).getConfKey());\r\n+            response = responseBuilder.build();\r\n+        }\r\n+\r\n+        return response;\r\n+    }\r\n+\r\n+    private Response processBadRequestExceptions(Exception ex) {\r\n+        Response response = null;\r\n+        ResponseBuilder responseBuilder = Response.status(Response.Status.BAD_REQUEST);\r\n+\r\n+        if (ex instanceof InvalidEntityException) {\r\n+            SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\"Invalid\"\r\n+                    + ((InvalidEntityException) ex).getEntityClassSimpleName());\r\n+\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n+\r\n+            for (@SuppressWarnings(\"rawtypes\")\r\n+            Entry<Class, Set<EntityViolationType>> violation : ((InvalidEntityException) ex).getViolations().entrySet()) {\r\n+\r\n+                for (EntityViolationType violationType : violation.getValue()) {\r\n+                    responseBuilder.header(exType.getElementHeaderName(), violation.getClass().getSimpleName() + \": \"\r\n+                            + violationType);\r\n+                }\r\n+            }\r\n+            response = responseBuilder.build();\r\n+\r\n+        } else if (ex instanceof WorkflowException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.Workflow.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.Workflow.getElementHeaderName(), ex.getCause()\r\n+                    .getMessage());\r\n+            response = responseBuilder.build();\r\n+\r\n+        } else if (ex instanceof PropagationException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.Propagation.getHeaderValue());\r\n+            responseBuilder.header(SyncopeClientExceptionType.Propagation.getElementHeaderName(),\r\n+                    ((PropagationException) ex).getResourceName());\r\n+            response = responseBuilder.build();\r\n+\r\n+        } else if (ex instanceof InvalidSearchConditionException) {\r\n+            responseBuilder.header(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER,\r\n+                    SyncopeClientExceptionType.InvalidSearchCondition.getHeaderValue());\r\n+            response = responseBuilder.build();\r\n+        }\r\n+\r\n+        return response;\r\n+    }\r\n+\r\n+}\r"},{"sha":"6e6de40ef076b634b7fb16470d1ae2de73490124","filename":"core/src/main/java/org/apache/syncope/core/services/ConfigurationServiceImpl.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConfigurationServiceImpl.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,106 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import javax.ws.rs.NotFoundException;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.UriInfo;\r\n+\r\n+import org.apache.syncope.client.to.ConfigurationTO;\r\n+import org.apache.syncope.client.to.MailTemplateTO;\r\n+import org.apache.syncope.client.to.ValidatorTO;\r\n+import org.apache.syncope.client.util.CollectionWrapper;\r\n+import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\r\n+import org.apache.syncope.core.rest.controller.ConfigurationController;\r\n+import org.apache.syncope.services.ConfigurationService;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class ConfigurationServiceImpl implements ConfigurationService, ContextAware {\r\n+\r\n+    @Autowired\r\n+    private ConfigurationController configurationController;\r\n+    private UriInfo uriInfo;\r\n+\r\n+    @Override\r\n+    public Response create(final ConfigurationTO configurationTO) {\r\n+        ConfigurationTO created = configurationController.create(new DummyHTTPServletResponse(), configurationTO);\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\r\n+        return Response.created(location).entity(created).build();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response dbExport() {\r\n+        configurationController.dbExport(new DummyHTTPServletResponse());\r\n+        // TODO catch output-stream and forward it to response\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void delete(final String key) {\r\n+        try {\r\n+            configurationController.delete(key);\r\n+        } catch (MissingConfKeyException e) {\r\n+            throw new NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<MailTemplateTO> getMailTemplates() {\r\n+        return CollectionWrapper.wrapMailTemplates(configurationController.getMailTemplates());\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<ValidatorTO> getValidators() {\r\n+        return CollectionWrapper.wrapValidator(configurationController.getValidators());\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<ConfigurationTO> list() {\r\n+        return configurationController.list(null);\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConfigurationTO read(String key) {\r\n+        try {\r\n+            return configurationController.read(null, key);\r\n+        } catch (MissingConfKeyException e) {\r\n+            throw new NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public ConfigurationTO update(String key, ConfigurationTO configurationTO) {\r\n+        try {\r\n+            return configurationController.update(null, configurationTO);\r\n+        } catch (MissingConfKeyException e) {\r\n+            throw new NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setUriInfo(UriInfo ui) {\r\n+        this.uriInfo = ui;\r\n+    }\r\n+}\r"},{"sha":"1f26d8fea1413b8df70a05ed96d17e4dbd52fa25","filename":"core/src/main/java/org/apache/syncope/core/services/ContextAware.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FContextAware.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,28 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import javax.ws.rs.core.Context;\r\n+import javax.ws.rs.core.UriInfo;\r\n+\r\n+public interface ContextAware {\r\n+\r\n+    @Context\r\n+    void setUriInfo(UriInfo ui);\r\n+}\r"},{"sha":"e20e97ca6582e9ffbcbbcacb3fa0ee1cc4391207","filename":"core/src/main/java/org/apache/syncope/core/services/DummyHTTPServletResponse.java","status":"added","additions":171,"deletions":0,"changes":171,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FDummyHTTPServletResponse.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,171 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import java.io.IOException;\r\n+import java.io.PrintWriter;\r\n+import java.util.Locale;\r\n+\r\n+import javax.servlet.ServletOutputStream;\r\n+import javax.servlet.http.Cookie;\r\n+import javax.servlet.http.HttpServletResponse;\r\n+\r\n+public class DummyHTTPServletResponse implements HttpServletResponse {\r\n+\r\n+    @Override\r\n+    public void flushBuffer() throws IOException {\r\n+    }\r\n+\r\n+    @Override\r\n+    public int getBufferSize() {\r\n+        return 0;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getCharacterEncoding() {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getContentType() {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Locale getLocale() {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public ServletOutputStream getOutputStream() throws IOException {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public PrintWriter getWriter() throws IOException {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean isCommitted() {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void reset() {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void resetBuffer() {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setBufferSize(int arg0) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setCharacterEncoding(String arg0) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setContentLength(int arg0) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setContentType(String arg0) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setLocale(Locale arg0) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void addCookie(Cookie arg0) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void addDateHeader(String arg0, long arg1) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void addHeader(String arg0, String arg1) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void addIntHeader(String arg0, int arg1) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean containsHeader(String arg0) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String encodeRedirectURL(String arg0) {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String encodeRedirectUrl(String arg0) {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String encodeURL(String arg0) {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String encodeUrl(String arg0) {\r\n+        return null;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void sendError(int arg0) throws IOException {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void sendError(int arg0, String arg1) throws IOException {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void sendRedirect(String arg0) throws IOException {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setDateHeader(String arg0, long arg1) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setHeader(String arg0, String arg1) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setIntHeader(String arg0, int arg1) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setStatus(int arg0) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setStatus(int arg0, String arg1) {\r\n+    }\r\n+\r\n+}\r"},{"sha":"9b19225749723aa36d95e2b0f5bdf1ab16f964b5","filename":"core/src/main/java/org/apache/syncope/core/services/EntitlementServiceImpl.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FEntitlementServiceImpl.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -0,0 +1,48 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.syncope.client.to.EntitlementTO;\r\n+import org.apache.syncope.client.util.CollectionWrapper;\r\n+import org.apache.syncope.core.rest.controller.AuthenticationController;\r\n+import org.apache.syncope.services.EntitlementService;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class EntitlementServiceImpl implements EntitlementService {\r\n+\r\n+    @Autowired\r\n+    private AuthenticationController authenticationController;\r\n+\r\n+    @Override\r\n+    public Set<EntitlementTO> getAllEntitlements() {\r\n+        Set<String> entitlements = new HashSet<String>(authenticationController.listEntitlements());\r\n+        return CollectionWrapper.wrap(entitlements);\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<EntitlementTO> getMyEntitlements() {\r\n+        Set<String> entitlements = authenticationController.getEntitlements();\r\n+        return CollectionWrapper.wrap(entitlements);\r\n+    }\r\n+}\r"},{"sha":"3a2969eecb04df412719c684acbc621a2004f982","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":118,"deletions":71,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -18,83 +18,130 @@ specific language governing permissions and limitations\n under the License.\n \n -->\n-<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xmlns:context=\"http://www.springframework.org/schema/context\"\n-       xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+   xmlns:jaxrs=\"http://cxf.apache.org/jaxrs\" xmlns:context=\"http://www.springframework.org/schema/context\"\n+   xmlns:oxm=\"http://www.springframework.org/schema/oxm\"\n+   xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n        http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://cxf.apache.org/jaxrs\n+       http://cxf.apache.org/schemas/jaxrs.xsd\n        http://www.springframework.org/schema/context\n        http://www.springframework.org/schema/context/spring-context.xsd\n        http://www.springframework.org/schema/oxm\n-       http://www.springframework.org/schema/oxm/spring-oxm.xsd\">\n+       http://www.springframework.org/schema/oxm/spring-oxm.xsd\"\n+>\n \n-  <context:component-scan base-package=\"org.apache.syncope.core.rest.controller\"/>\n+   <import resource=\"classpath:META-INF/cxf/cxf.xml\" />\n+   <import resource=\"classpath:META-INF/cxf/cxf-servlet.xml\" />\n+\n+   <context:component-scan base-package=\"org.apache.syncope.core.rest.controller\" />\n+\n+   <bean id=\"adminUser\" class=\"java.lang.String\">\n+      <constructor-arg value=\"${adminUser}\" />\n+   </bean>\n+  \n+  <!-- CXF Configuration - BEGINN -->\n+   <context:component-scan base-package=\"org.apache.syncope.core.services\" />\n+\n+   <bean id=\"jaxbProvider\" class=\"org.apache.cxf.jaxrs.provider.JAXBElementProvider\">\n+      <property name=\"depthProperties\">\n+         <bean id=\"depthProperties\" class=\"org.apache.cxf.staxutils.DocumentDepthProperties\">\n+            <property name=\"innerElementCountThreshold\" value=\"500\" />\n+         </bean>\n+      </property>\n+      <property name=\"marshallerProperties\">\n+         <map>\n+            <entry key=\"jaxb.formatted.output\">\n+               <value type=\"java.lang.Boolean\">true</value>\n+            </entry>\n+         </map>\n+      </property>\n+   </bean>\n+\n+   <bean id=\"jsonProvider\" class=\"org.codehaus.jackson.jaxrs.JacksonJaxbJsonProvider\">\n+      <property name=\"mapper\" ref=\"jacksonObjectMapper\" />\n+   </bean>\n+\n+   <bean id=\"exceptionMapper\" class=\"org.apache.syncope.core.rest.RestServiceExceptionMapper\" />\n+\n+   <jaxrs:server id=\"restContainer\" address=\"/\">\n+      <jaxrs:serviceBeans>\n+         <ref bean=\"configurationServiceImpl\" />\n+         <ref bean=\"entitlementServiceImpl\" />\n+      </jaxrs:serviceBeans>\n+      <jaxrs:resourceComparator>\n+         <bean id=\"myServiceComparator\" class=\"org.apache.syncope.core.rest.QueryResourceInfoComperator\" />\n+      </jaxrs:resourceComparator>\n+      <jaxrs:providers>\n+         <ref bean=\"jaxbProvider\" />\n+         <ref bean=\"jsonProvider\" />\n+         <ref bean=\"exceptionMapper\" />\n+      </jaxrs:providers>\n+      <jaxrs:extensionMappings>\n+         <entry key=\"json\" value=\"application/json;charset=UTF-8\" />\n+         <entry key=\"xml\" value=\"application/xml;charset=UTF-8\" />\n+      </jaxrs:extensionMappings>\n+   </jaxrs:server>\n+   <!-- CXF Configuration - END -->\n \n-  <bean id=\"adminUser\" class=\"java.lang.String\">\n-    <constructor-arg value=\"${adminUser}\"/>\n-  </bean>\n-    \n     <!-- JSON (via Jackson) -->\n-  <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\"/>\n-  <bean id=\"mappingJacksonHttpMessageConverter\"\n-          class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n-    <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n-  </bean>\n-    \n+   <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\" />\n+   <bean id=\"mappingJacksonHttpMessageConverter\" class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n+      <property name=\"objectMapper\" ref=\"jacksonObjectMapper\" />\n+   </bean>\n+\n     <!-- XML (via XStream) -->\n-  <bean id=\"xStreamXmlMarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n-    <property name=\"autodetectAnnotations\" value=\"true\" />\n-  </bean> \n-  <bean id=\"mappingXstreamHttpMessageConverter\" class=\"org.springframework.http.converter.xml.MarshallingHttpMessageConverter\">\n-    <constructor-arg ref=\"xStreamXmlMarshaller\" />\n-  </bean>\n-   \n-  <bean class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\"/>\n-  <bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n-    <property name=\"messageConverters\">\n-      <list>\n-        <ref bean=\"mappingJacksonHttpMessageConverter\"/>\n-        <ref bean=\"mappingXstreamHttpMessageConverter\" />\n-      </list>\n-    </property>\n-  </bean>\n-    \n-  <bean class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">\n-    <property name=\"mediaTypes\">\n-      <map>\n-        <entry key=\"json\" value=\"application/json;charset=UTF-8\"/>\n-        <entry key=\"xml\" value=\"application/xml;charset=UTF-8\"/>\n-        <entry key=\"html\" value=\"text/html;charset=UTF-8\"/>\n-      </map>\n-    </property>\n-    <property name=\"viewResolvers\">\n-      <list>\n-        <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n-          <property name=\"prefix\" value=\"/\"/>\n-          <property name=\"suffix\" value=\".jsp\"/>\n-        </bean>\n-      </list>\n-    </property>\n-    <property name=\"defaultViews\">\n-      <list>\n-        <bean class=\"org.springframework.web.servlet.view.json.MappingJacksonJsonView\">\n-          <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>\n-        </bean>\n-        <bean class=\"org.springframework.web.servlet.view.xml.MarshallingView\">\n-          <constructor-arg ref=\"xStreamXmlMarshaller\"/>\n-        </bean>\n-      </list>\n-    </property>\n-    <property name=\"defaultContentType\">        \n-      <bean id=\"jsonMediaType\" class=\"org.springframework.http.MediaType\">\n-        <constructor-arg value=\"application\"/>\n-        <constructor-arg value=\"json\"/>\n-        <constructor-arg value=\"UTF-8\"/>\n-      </bean>\n-    </property>\n-        \n-    <property name=\"ignoreAcceptHeader\" value=\"false\"/>\n-  </bean>\n+   <bean id=\"xStreamXmlMarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n+      <property name=\"autodetectAnnotations\" value=\"true\" />\n+   </bean>\n+   <bean id=\"mappingXstreamHttpMessageConverter\" class=\"org.springframework.http.converter.xml.MarshallingHttpMessageConverter\">\n+      <constructor-arg ref=\"xStreamXmlMarshaller\" />\n+   </bean>\n+\n+   <bean class=\"org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping\" />\n+   <bean class=\"org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter\">\n+      <property name=\"messageConverters\">\n+         <list>\n+            <ref bean=\"mappingJacksonHttpMessageConverter\" />\n+            <ref bean=\"mappingXstreamHttpMessageConverter\" />\n+         </list>\n+      </property>\n+   </bean>\n+\n+   <bean class=\"org.springframework.web.servlet.view.ContentNegotiatingViewResolver\">\n+      <property name=\"mediaTypes\">\n+         <map>\n+            <entry key=\"json\" value=\"application/json;charset=UTF-8\" />\n+            <entry key=\"xml\" value=\"application/xml;charset=UTF-8\" />\n+            <entry key=\"html\" value=\"text/html;charset=UTF-8\" />\n+         </map>\n+      </property>\n+      <property name=\"viewResolvers\">\n+         <list>\n+            <bean class=\"org.springframework.web.servlet.view.InternalResourceViewResolver\">\n+               <property name=\"prefix\" value=\"/\" />\n+               <property name=\"suffix\" value=\".jsp\" />\n+            </bean>\n+         </list>\n+      </property>\n+      <property name=\"defaultViews\">\n+         <list>\n+            <bean class=\"org.springframework.web.servlet.view.json.MappingJacksonJsonView\">\n+               <property name=\"objectMapper\" ref=\"jacksonObjectMapper\" />\n+            </bean>\n+            <bean class=\"org.springframework.web.servlet.view.xml.MarshallingView\">\n+               <constructor-arg ref=\"xStreamXmlMarshaller\" />\n+            </bean>\n+         </list>\n+      </property>\n+      <property name=\"defaultContentType\">\n+         <bean id=\"jsonMediaType\" class=\"org.springframework.http.MediaType\">\n+            <constructor-arg value=\"application\" />\n+            <constructor-arg value=\"json\" />\n+            <constructor-arg value=\"UTF-8\" />\n+         </bean>\n+      </property>\n \n-</beans>\n\\ No newline at end of file\n+      <property name=\"ignoreAcceptHeader\" value=\"false\" />\n+   </bean>\n+</beans>"},{"sha":"a331b920e0e5bbeec911d016efe1cb07180a3f7c","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -34,6 +34,19 @@ under the License.\n   <listener>\n     <listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>\n   </listener>\n+  <servlet>\n+    <servlet-name>CXFServlet</servlet-name>\n+    <servlet-class>\n+       org.apache.cxf.transport.servlet.CXFServlet\n+    </servlet-class>\n+    <load-on-startup>1</load-on-startup> \n+  </servlet>\n+\n+  <servlet-mapping>\n+    <servlet-name>CXFServlet</servlet-name>\n+    <url-pattern>/cxf/*</url-pattern>\n+  </servlet-mapping>\n+  \n \n   <servlet>\n     <servlet-name>syncope-core-rest</servlet-name>"},{"sha":"28cd20b40879847334f8b43288949cca4968e9d5","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -18,14 +18,20 @@\n  */\n package org.apache.syncope.core.rest;\n \n-import static org.junit.Assert.*;\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertFalse;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n+import static org.junit.Assert.fail;\n \n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n import org.apache.syncope.client.search.AttributeCond;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.AttributeTO;\n+import org.apache.syncope.client.to.EntitlementTO;\n import org.apache.syncope.client.to.MembershipTO;\n import org.apache.syncope.client.to.RoleTO;\n import org.apache.syncope.client.to.SchemaTO;\n@@ -48,14 +54,14 @@ public class AuthenticationTestITCase extends AbstractTest {\n     @Test\n     public void testAdminEntitlements() {\n         // 1. as anonymous, read all available entitlements\n-        Set<String> allEntitlements = entitlementService.getAllEntitlements();\n+        Set<EntitlementTO> allEntitlements = entitlementService.getAllEntitlements();\n         assertNotNull(allEntitlements);\n         assertFalse(allEntitlements.isEmpty());\n \n         // 2. as admin, read own entitlements\n         super.resetRestTemplate();\n \n-        Set<String> adminEntitlements = entitlementService.getMyEntitlements();\n+        Set<EntitlementTO> adminEntitlements = entitlementService.getMyEntitlements();\n \n         assertEquals(allEntitlements, adminEntitlements);\n     }"},{"sha":"d438aa158d0e81f27b5f3b8b5483ba3b3c8d5470","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":70,"deletions":67,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -20,10 +20,13 @@\n \n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertTrue;\n \n import java.io.UnsupportedEncodingException;\n import java.util.List;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.client.to.ConfigurationTO;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -34,71 +37,71 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class ConfigurationTestITCase extends AbstractTest {\n \n-\t@Test\n-\tpublic void create() {\n-\t\tConfigurationTO configurationTO = new ConfigurationTO();\n-\t\tconfigurationTO.setKey(\"testKey\");\n-\t\tconfigurationTO.setValue(\"testValue\");\n-\n-\t\tConfigurationTO newConfigurationTO = configurationService\n-\t\t\t\t.create(configurationTO);\n-\t\tassertEquals(configurationTO, newConfigurationTO);\n-\t}\n-\n-\t@Test\n-\tpublic void delete() throws UnsupportedEncodingException {\n-\n-\t\ttry {\n-\t\t\tconfigurationService.delete(\"nonExistent\");\n-\t\t} catch (HttpStatusCodeException e) {\n-\t\t\tassertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n-\t\t}\n-\n-\t\tConfigurationTO tokenLengthTO = configurationService\n-\t\t\t\t.read(\"token.length\");\n-\n-\t\tConfigurationTO deletedConfig = configurationService\n-\t\t\t\t.delete(\"token.length\");\n-\t\tassertNotNull(deletedConfig);\n-\t\ttry {\n-\t\t\tconfigurationService.read(\"token.length\");\n-\t\t} catch (HttpStatusCodeException e) {\n-\t\t\tassertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n-\t\t}\n-\n-\t\tConfigurationTO newConfigurationTO = configurationService\n-\t\t\t\t.create(tokenLengthTO);\n-\t\tassertEquals(tokenLengthTO, newConfigurationTO);\n-\t}\n-\n-\t@Test\n-\tpublic void list() {\n-\t\tList<ConfigurationTO> configurations = configurationService.list();\n-\t\tassertNotNull(configurations);\n-\t\tfor (ConfigurationTO configuration : configurations) {\n-\t\t\tassertNotNull(configuration);\n-\t\t}\n-\t}\n-\n-\t@Test\n-\tpublic void read() {\n-\t\tConfigurationTO configurationTO = configurationService\n-\t\t\t\t.read(\"token.expireTime\");\n-\n-\t\tassertNotNull(configurationTO);\n-\t}\n-\n-\t@Test\n-\tpublic void update() {\n-\t\tConfigurationTO configurationTO = configurationService.read(\"token.expireTime\");\n-\t\tint value = Integer.parseInt(configurationTO.getValue());\n-\t\tvalue++;\n-\t\tconfigurationTO.setValue(value + \"\");\n-\n-\t\tConfigurationTO newConfigurationTO = configurationService.update(configurationTO.getKey(), configurationTO);\n-\t\tassertEquals(configurationTO, newConfigurationTO);\n-\n-\t\tnewConfigurationTO = configurationService.read(\"token.expireTime\");\n-\t\tassertEquals(configurationTO, newConfigurationTO);\n-\t}\n+    @Test\n+    public void create() {\n+        ConfigurationTO configurationTO = new ConfigurationTO();\n+        configurationTO.setKey(\"testKey\");\n+        configurationTO.setValue(\"testValue\");\n+\n+        Response response = configurationService.create(configurationTO);\n+        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n+        assertTrue(response.hasEntity());\n+        ConfigurationTO newConfigurationTO = (ConfigurationTO) response.getEntity();\n+        assertEquals(configurationTO, newConfigurationTO);\n+    }\n+\n+    @Test\n+    public void delete() throws UnsupportedEncodingException {\n+\n+        try {\n+            configurationService.delete(\"nonExistent\");\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+\n+        ConfigurationTO tokenLengthTO = configurationService.read(\"token.length\");\n+\n+        configurationService.delete(\"token.length\");\n+        try {\n+            configurationService.read(\"token.length\");\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+\n+        Response response = configurationService.create(tokenLengthTO);\n+        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n+        assertTrue(response.hasEntity());\n+        ConfigurationTO newConfigurationTO = (ConfigurationTO) response.getEntity();\n+        assertEquals(tokenLengthTO, newConfigurationTO);\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<ConfigurationTO> configurations = configurationService.list();\n+        assertNotNull(configurations);\n+        for (ConfigurationTO configuration : configurations) {\n+            assertNotNull(configuration);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        ConfigurationTO configurationTO = configurationService.read(\"token.expireTime\");\n+\n+        assertNotNull(configurationTO);\n+    }\n+\n+    @Test\n+    public void update() {\n+        ConfigurationTO configurationTO = configurationService.read(\"token.expireTime\");\n+        int value = Integer.parseInt(configurationTO.getValue());\n+        value++;\n+        configurationTO.setValue(value + \"\");\n+\n+        ConfigurationTO newConfigurationTO = configurationService.update(configurationTO.getKey(), configurationTO);\n+        assertEquals(configurationTO, newConfigurationTO);\n+\n+        newConfigurationTO = configurationService.read(\"token.expireTime\");\n+        assertEquals(configurationTO, newConfigurationTO);\n+    }\n }"},{"sha":"ee08c91ef8ca2bba4a1b37beb23dd01869b10a30","filename":"core/src/test/java/org/apache/syncope/core/rest/UserRequestTestITCase.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserRequestTestITCase.java?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -26,6 +26,8 @@\n \n import java.util.List;\n \n+import javax.ws.rs.core.Response;\n+\n import org.apache.syncope.client.mod.UserMod;\n import org.apache.syncope.client.search.AttributeCond;\n import org.apache.syncope.client.search.NodeCond;\n@@ -51,7 +53,10 @@ public void create() {\n         configurationTO.setKey(\"createRequest.allowed\");\n         configurationTO.setValue(\"false\");\n \n-        configurationTO = configurationService.create(configurationTO);\n+        Response response = configurationService.create(configurationTO);\n+        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n+        assertTrue(response.hasEntity());\n+        configurationTO = (ConfigurationTO) response.getEntity();\n         assertNotNull(configurationTO);\n \n         UserTO userTO = UserTestITCase.getUniqueSampleTO(\"selfcreate@syncope.apache.org\");\n@@ -69,7 +74,10 @@ public void create() {\n         // 3. set create request allowed\n         configurationTO.setValue(\"true\");\n \n-        configurationTO = configurationService.create(configurationTO);\n+        response = configurationService.create(configurationTO);\n+        assertEquals(org.apache.http.HttpStatus.SC_CREATED, response.getStatus());\n+        assertTrue(response.hasEntity());\n+        configurationTO = (ConfigurationTO) response.getEntity();\n         assertNotNull(configurationTO);\n \n         // 4. as anonymous, request user create works"},{"sha":"bd9e9252ea91ccdbcafe6b4e0a5ce25a3d910be1","filename":"core/src/test/resources/restClientContext.xml","status":"modified","additions":56,"deletions":38,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FrestClientContext.xml?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -18,43 +18,61 @@ specific language governing permissions and limitations\n under the License.\n \n -->\n-<beans xmlns=\"http://www.springframework.org/schema/beans\"\n-       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n-                           http://www.springframework.org/schema/beans/spring-beans.xsd\">\n-\n-  <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.PoolingClientConnectionManager\"/>\n-  \n-  <bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n-    <property name=\"parameterMap\">\n-      <map key-type=\"java.lang.String\">\n-        <entry>\n-          <key>\n-            <value>http.protocol.handle-authentication</value>\n-          </key>\n-          <value type=\"java.lang.Boolean\">\n-            false\n-          </value>\n-        </entry>\n-      </map>\n-    </property>\n-  </bean>\n-  \n-  <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n-    <constructor-arg value=\"localhost\"/>\n-    <constructor-arg value=\"9080\"/>\n-    <constructor-arg value=\"http\"/>\n-    <constructor-arg ref=\"httpClientConnManager\"/>\n-    <constructor-arg ref=\"httpClientParams\"/>\n-  </bean>\n-  \n-  <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n-    <constructor-arg ref=\"httpClientFactory\"/>\n-\n-    <property name=\"errorHandler\">\n-      <bean id=\"syncopeClientErrorHandler\"\n-            class=\"org.apache.syncope.client.validation.SyncopeClientErrorHandler\"/>\n-    </property>\n-  </bean>\n+<beans xmlns=\"http://www.springframework.org/schema/beans\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+   xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd\"\n+>\n+\n+   <bean id=\"httpClientConnManager\" class=\"org.apache.http.impl.conn.PoolingClientConnectionManager\" />\n+\n+   <bean id=\"httpClientParams\" class=\"org.apache.syncope.client.http.HttpClientParams\">\n+      <property name=\"parameterMap\">\n+         <map key-type=\"java.lang.String\">\n+            <entry>\n+               <key>\n+                  <value>http.protocol.handle-authentication</value>\n+               </key>\n+               <value type=\"java.lang.Boolean\">\n+                  false\n+               </value>\n+            </entry>\n+         </map>\n+      </property>\n+   </bean>\n+\n+   <bean id=\"httpClientFactory\" class=\"org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory\">\n+      <constructor-arg value=\"localhost\" />\n+      <constructor-arg value=\"9080\" />\n+      <constructor-arg value=\"http\" />\n+      <constructor-arg ref=\"httpClientConnManager\" />\n+      <constructor-arg ref=\"httpClientParams\" />\n+   </bean>\n+\n+   <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n+      <constructor-arg ref=\"httpClientFactory\" />\n+      <property name=\"messageConverters\">\n+         <list>\n+            <ref bean=\"mappingJacksonHttpMessageConverter\" />\n+            <ref bean=\"mappingXstreamHttpMessageConverter\" />\n+         </list>\n+      </property>\n+      <property name=\"errorHandler\">\n+         <bean id=\"syncopeClientErrorHandler\" class=\"org.apache.syncope.client.validation.SyncopeClientErrorHandler\" />\n+      </property>\n+   </bean>\n+   \n+    <!-- JSON (via Jackson) -->\n+   <bean id=\"jacksonObjectMapper\" class=\"org.apache.syncope.core.rest.data.UnwrappedObjectMapper\" />\n+   <bean id=\"mappingJacksonHttpMessageConverter\" class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n+      <property name=\"objectMapper\" ref=\"jacksonObjectMapper\" />\n+   </bean>\n+   \n+   <!-- XML (via XStream) -->\n+   <bean id=\"xStreamXmlMarshaller\" class=\"org.springframework.oxm.xstream.XStreamMarshaller\">\n+      <property name=\"autodetectAnnotations\" value=\"true\" />\n+   </bean>\n+   <bean id=\"mappingXstreamHttpMessageConverter\" class=\"org.springframework.http.converter.xml.MarshallingHttpMessageConverter\">\n+      <constructor-arg ref=\"xStreamXmlMarshaller\" />\n+   </bean>\n \n </beans>"},{"sha":"c5d913913a742ad282a1144abfbaede2fa1fbcb9","filename":"pom.xml","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=e510a0b863a097ba1cf2ce6e1fb63053cca6fb4c","patch":"@@ -280,6 +280,7 @@ under the License.\n \n     <activiti.version>5.10</activiti.version>\n \n+\t<cxf.version>2.7.0</cxf.version>\t\n     <spring.version>3.1.3.RELEASE</spring.version>\n     <spring-security.version>3.1.3.RELEASE</spring-security.version>\n     <aspectj.version>1.7.1</aspectj.version>\n@@ -564,6 +565,27 @@ under the License.\n         <artifactId>aspectjweaver</artifactId>\n         <version>${aspectj.version}</version>\n       </dependency>\n+\t  \n+\t  <dependency>\n+        <groupId>org.apache.cxf</groupId>\n+        <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n+        <version>${cxf.version}</version>\n+      </dependency>\n+  \t  <dependency>\n+\t\t<groupId>org.apache.cxf</groupId>\n+\t\t<artifactId>cxf-rt-rs-extension-providers</artifactId>\n+\t\t<version>${cxf.version}</version>\n+\t  </dependency>\n+\t  <dependency>\n+\t\t<groupId>org.apache.cxf</groupId>\n+\t\t<artifactId>cxf-rt-rs-extension-search</artifactId>\n+\t\t<version>${cxf.version}</version>\n+\t  </dependency>\n+\t  <dependency>\n+\t\t<groupId>org.apache.cxf</groupId>\n+\t\t<artifactId>cxf-rt-frontend-jaxws</artifactId>\n+\t\t<version>${cxf.version}</version>\n+\t  </dependency>\n \n       <dependency>\n         <groupId>org.codehaus.jackson</groupId>\n@@ -575,6 +597,11 @@ under the License.\n         <artifactId>jackson-mapper-asl</artifactId>\n         <version>${jackson.version}</version>\n       </dependency>\n+\t  <dependency>\n+\t    <groupId>org.codehaus.jackson</groupId>\n+\t    <artifactId>jackson-jaxrs</artifactId>\n+\t    <version>${jackson.version}</version>\n+\t  </dependency>\n \n       <dependency>\n         <groupId>com.thoughtworks.xstream</groupId>"}]}