{"sha":"4eba23a2844fecef7402e73f8ce5f10af73afaf5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjRlYmEyM2EyODQ0ZmVjZWY3NDAyZTczZjhjZTVmMTBhZjczYWZhZjU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-07-09T16:08:41Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-07-09T16:08:41Z"},"message":"Small enhancements and fixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1359245 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be8254d6ed215374aedbf12f6b4d77849f3481e1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/be8254d6ed215374aedbf12f6b4d77849f3481e1"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/4eba23a2844fecef7402e73f8ce5f10af73afaf5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4eba23a2844fecef7402e73f8ce5f10af73afaf5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4eba23a2844fecef7402e73f8ce5f10af73afaf5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4eba23a2844fecef7402e73f8ce5f10af73afaf5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"33386146b8dc615e810fba749661debbde1b0fa1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/33386146b8dc615e810fba749661debbde1b0fa1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/33386146b8dc615e810fba749661debbde1b0fa1"}],"stats":{"total":79,"additions":36,"deletions":43},"files":[{"sha":"048495ee9399c2bd47629c4cf65973f59478d457","filename":"core/src/main/java/org/apache/syncope/core/propagation/ConnectorFacadeProxy.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4eba23a2844fecef7402e73f8ce5f10af73afaf5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4eba23a2844fecef7402e73f8ce5f10af73afaf5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFacadeProxy.java?ref=4eba23a2844fecef7402e73f8ce5f10af73afaf5","patch":"@@ -25,6 +25,16 @@\n import java.util.List;\n import java.util.Set;\n import javassist.NotFoundException;\n+import org.apache.syncope.core.persistence.beans.ConnInstance;\n+import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.SchemaMapping;\n+import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n+import org.apache.syncope.core.util.ConnBundleManager;\n+import org.apache.syncope.core.util.SchemaMappingUtil;\n+import org.apache.syncope.types.ConnConfProperty;\n+import org.apache.syncope.types.ConnectorCapability;\n+import org.apache.syncope.types.PropagationMode;\n+import org.apache.syncope.types.PropagationOperation;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.api.APIConfiguration;\n@@ -53,16 +63,6 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.util.ClassUtils;\n import org.springframework.util.StringUtils;\n-import org.apache.syncope.core.persistence.beans.ConnInstance;\n-import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.beans.SchemaMapping;\n-import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n-import org.apache.syncope.core.util.ConnBundleManager;\n-import org.apache.syncope.core.util.SchemaMappingUtil;\n-import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.ConnectorCapability;\n-import org.apache.syncope.types.PropagationMode;\n-import org.apache.syncope.types.PropagationOperation;\n \n /**\n  * Intercept calls to ConnectorFacade's methods and check if the corresponding connector instance has been configured to"},{"sha":"67d2d002e2182c7205db59540abdd19a781ab892","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":16,"deletions":23,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4eba23a2844fecef7402e73f8ce5f10af73afaf5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4eba23a2844fecef7402e73f8ce5f10af73afaf5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=4eba23a2844fecef7402e73f8ce5f10af73afaf5","patch":"@@ -30,21 +30,6 @@\n import java.util.Set;\n import javassist.NotFoundException;\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n-import org.identityconnectors.framework.common.FrameworkUtil;\n-import org.identityconnectors.framework.common.exceptions.ConnectorException;\n-import org.identityconnectors.framework.common.objects.Attribute;\n-import org.identityconnectors.framework.common.objects.AttributeBuilder;\n-import org.identityconnectors.framework.common.objects.AttributeUtil;\n-import org.identityconnectors.framework.common.objects.ConnectorObject;\n-import org.identityconnectors.framework.common.objects.Name;\n-import org.identityconnectors.framework.common.objects.ObjectClass;\n-import org.identityconnectors.framework.common.objects.Uid;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.transaction.annotation.Transactional;\n-import org.springframework.util.StringUtils;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n@@ -61,7 +46,6 @@\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n-import org.apache.syncope.core.persistence.dao.TaskExecDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -75,6 +59,21 @@\n import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.syncope.types.SchemaType;\n import org.apache.syncope.types.TraceLevel;\n+import org.identityconnectors.framework.common.FrameworkUtil;\n+import org.identityconnectors.framework.common.exceptions.ConnectorException;\n+import org.identityconnectors.framework.common.objects.Attribute;\n+import org.identityconnectors.framework.common.objects.AttributeBuilder;\n+import org.identityconnectors.framework.common.objects.AttributeUtil;\n+import org.identityconnectors.framework.common.objects.ConnectorObject;\n+import org.identityconnectors.framework.common.objects.Name;\n+import org.identityconnectors.framework.common.objects.ObjectClass;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.NoSuchBeanDefinitionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.StringUtils;\n \n /**\n  * Manage the data propagation to external resources.\n@@ -123,12 +122,6 @@ public class PropagationManager {\n     @Autowired\n     private TaskDAO taskDAO;\n \n-    /**\n-     * Task execution DAO.\n-     */\n-    @Autowired\n-    private TaskExecDAO taskExecDAO;\n-\n     /**\n      * JEXL engine for evaluating connector's account link.\n      */\n@@ -793,7 +786,7 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n \n                 // Flush call is needed to value the id field of execution (used by deal test of TaskTestITCase).\n                 taskDAO.flush();\n-                \n+\n                 // An alternative to the flush call could be the following statement but we should accept the risk to  \n                 // have a not so probable trouble coming from concurrent calls.\n                 //final TaskExec latestExec = taskExecDAO.findLatestStarted(taskDAO.save(task));"},{"sha":"fae9c7da0fbbb383a642cc7101cf6b48651b1470","filename":"core/src/main/java/org/apache/syncope/core/util/SchemaMappingUtil.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/4eba23a2844fecef7402e73f8ce5f10af73afaf5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/4eba23a2844fecef7402e73f8ce5f10af73afaf5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FSchemaMappingUtil.java?ref=4eba23a2844fecef7402e73f8ce5f10af73afaf5","patch":"@@ -27,10 +27,6 @@\n import java.util.Map;\n import java.util.Set;\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n-import org.identityconnectors.framework.common.objects.OperationalAttributes;\n-import org.identityconnectors.framework.common.objects.Uid;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -45,13 +41,16 @@\n import org.apache.syncope.core.persistence.beans.role.RSchema;\n import org.apache.syncope.core.persistence.beans.role.RVirSchema;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n-import org.apache.syncope.core.persistence.beans.user.UAttr;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n import org.apache.syncope.core.persistence.beans.user.UDerSchema;\n import org.apache.syncope.core.persistence.beans.user.USchema;\n import org.apache.syncope.core.persistence.beans.user.UVirSchema;\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.types.IntMappingType;\n+import org.identityconnectors.framework.common.objects.OperationalAttributes;\n+import org.identityconnectors.framework.common.objects.Uid;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n public class SchemaMappingUtil {\n \n@@ -253,7 +252,8 @@ public static List<String> getIntValueAsStrings(\n             switch (mapping.getIntMappingType()) {\n                 case Username:\n                     if (!(attributable instanceof SyncopeUser)) {\n-                        throw new ClassCastException(\"mappingtype is Username, but attributable is not SyncopeUser: \" + attributable.getClass().getName());\n+                        throw new ClassCastException(\"mappingtype is Username, but attributable is not SyncopeUser: \"\n+                                + attributable.getClass().getName());\n                     }\n                     value.add(((SyncopeUser) attributable).getUsername());\n                     break;\n@@ -350,8 +350,7 @@ public static Class getIntMappingTypeClass(final IntMappingType intMappingType)\n      * @param mappings collection of SchemaMapping.\n      * @return AccountId mapping or null if no occurences found.\n      */\n-    public static final SchemaMapping getAccountIdMapping(final Collection<SchemaMapping> mappings) {\n-\n+    public static SchemaMapping getAccountIdMapping(final Collection<SchemaMapping> mappings) {\n         for (SchemaMapping mapping : mappings) {\n             if (mapping.isAccountid()) {\n                 return mapping;\n@@ -368,8 +367,9 @@ public static final SchemaMapping getAccountIdMapping(final Collection<SchemaMap\n      * @param mappings collection of SchemaMapping.\n      * @return accountId internal value.\n      */\n-    public static final String getAccountIdValue(final AbstractAttributable attributable,\n+    public static String getAccountIdValue(final AbstractAttributable attributable,\n             final Collection<SchemaMapping> mappings) {\n+\n         final List<String> values = getIntValueAsStrings(attributable, getAccountIdMapping(mappings));\n         return values == null || values.isEmpty()\n                 ? null\n@@ -383,7 +383,7 @@ public static final String getAccountIdValue(final AbstractAttributable attribut\n      * @param mappings accountId mapping.\n      * @return accountId internal value.\n      */\n-    public static final String getAccountIdValue(final AbstractAttributable attributable, final SchemaMapping mapping) {\n+    public static String getAccountIdValue(final AbstractAttributable attributable, final SchemaMapping mapping) {\n         final List<String> values = getIntValueAsStrings(attributable, mapping);\n         return values == null || values.isEmpty()\n                 ? null"}]}