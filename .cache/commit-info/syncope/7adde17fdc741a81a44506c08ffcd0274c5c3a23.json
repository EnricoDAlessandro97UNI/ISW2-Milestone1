{"sha":"7adde17fdc741a81a44506c08ffcd0274c5c3a23","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdhZGRlMTdmZGM3NDFhODFhNDQ1MDZjMDhmZmNkMDI3NGM1YzNhMjM=","commit":{"author":{"name":"Davide Cortellucci","email":"davide.cor94@gmail.com","date":"2020-01-08T13:30:02Z"},"committer":{"name":"Francesco Chicchiricc√≤","email":"ilgrosso@apache.org","date":"2020-01-08T16:20:06Z"},"message":"More Unit Tests for provisioning-java (#155)","tree":{"sha":"6c7605b35b32fd1f323f4ed7efd690275453d996","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/6c7605b35b32fd1f323f4ed7efd690275453d996"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7adde17fdc741a81a44506c08ffcd0274c5c3a23","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7adde17fdc741a81a44506c08ffcd0274c5c3a23","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7adde17fdc741a81a44506c08ffcd0274c5c3a23","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7adde17fdc741a81a44506c08ffcd0274c5c3a23/comments","author":{"login":"Dodoveloper","id":17781050,"node_id":"MDQ6VXNlcjE3NzgxMDUw","avatar_url":"https://avatars.githubusercontent.com/u/17781050?v=4","gravatar_id":"","url":"https://api.github.com/users/Dodoveloper","html_url":"https://github.com/Dodoveloper","followers_url":"https://api.github.com/users/Dodoveloper/followers","following_url":"https://api.github.com/users/Dodoveloper/following{/other_user}","gists_url":"https://api.github.com/users/Dodoveloper/gists{/gist_id}","starred_url":"https://api.github.com/users/Dodoveloper/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/Dodoveloper/subscriptions","organizations_url":"https://api.github.com/users/Dodoveloper/orgs","repos_url":"https://api.github.com/users/Dodoveloper/repos","events_url":"https://api.github.com/users/Dodoveloper/events{/privacy}","received_events_url":"https://api.github.com/users/Dodoveloper/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f3314bbc1beefabb1d82fe3bf17f8b5a4a7aba23","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f3314bbc1beefabb1d82fe3bf17f8b5a4a7aba23","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f3314bbc1beefabb1d82fe3bf17f8b5a4a7aba23"}],"stats":{"total":130,"additions":130,"deletions":0},"files":[{"sha":"de4a6bb38e17b92e808d164a578388182961d74c","filename":"core/provisioning-java/src/test/java/org/apache/syncope/core/provisioning/java/pushpull/LDAPPasswordPullActionsTest.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7adde17fdc741a81a44506c08ffcd0274c5c3a23/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7adde17fdc741a81a44506c08ffcd0274c5c3a23/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FLDAPPasswordPullActionsTest.java?ref=7adde17fdc741a81a44506c08ffcd0274c5c3a23","patch":"@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.pushpull;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.ArgumentMatchers.any;\n+import static org.mockito.ArgumentMatchers.anyString;\n+import static org.mockito.Mockito.when;\n+import static org.mockito.Mockito.verify;\n+\n+import org.apache.syncope.common.lib.patch.AnyPatch;\n+import org.apache.syncope.common.lib.patch.PasswordPatch;\n+import org.apache.syncope.common.lib.patch.UserPatch;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import org.apache.syncope.common.lib.to.ProvisioningReport;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.pushpull.ProvisioningProfile;\n+import org.apache.syncope.core.provisioning.java.AbstractTest;\n+import org.identityconnectors.framework.common.objects.SyncDelta;\n+import org.junit.jupiter.api.BeforeEach;\n+import org.junit.jupiter.api.Test;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.quartz.JobExecutionException;\n+import org.springframework.test.util.ReflectionTestUtils;\n+\n+public class LDAPPasswordPullActionsTest extends AbstractTest {\n+\n+    @Mock\n+    private SyncDelta syncDelta;\n+\n+    @Mock\n+    private ProvisioningProfile<?, ?> profile;\n+\n+    @Mock\n+    private AnyPatch anyPatch;\n+\n+    @Mock\n+    private UserDAO userDAO;\n+\n+    @Mock\n+    private ProvisioningReport result;\n+\n+    @InjectMocks\n+    private LDAPPasswordPullActions ldapPasswordPullActions;\n+\n+    private EntityTO entity;\n+\n+    private String encodedPassword;\n+\n+    private CipherAlgorithm cipher;\n+\n+    @BeforeEach\n+    public void initTest() {\n+        entity = new UserTO();\n+        encodedPassword = \"s3cureP4ssw0rd\";\n+        cipher = CipherAlgorithm.SHA512;\n+\n+        ReflectionTestUtils.setField(ldapPasswordPullActions, \"encodedPassword\", encodedPassword);\n+        ReflectionTestUtils.setField(ldapPasswordPullActions, \"cipher\", cipher);\n+    }\n+\n+    @Test\n+    public void beforeProvision() throws JobExecutionException {\n+        String digest = \"SHA256\";\n+        String password = \"t3stPassw0rd\";\n+        ReflectionTestUtils.setField(entity, \"password\", String.format(\"{%s}%s\", digest, password));\n+\n+        ldapPasswordPullActions.beforeProvision(profile, syncDelta, entity);\n+\n+        assertEquals(CipherAlgorithm.valueOf(digest), ReflectionTestUtils.getField(ldapPasswordPullActions, \"cipher\"));\n+        assertEquals(password, ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n+    }\n+\n+    @Test\n+    public void beforeUpdate() throws JobExecutionException {\n+        anyPatch = new UserPatch();\n+        PasswordPatch passwordPatch = new PasswordPatch();\n+        String digest = \"MD5\";\n+        String password = \"an0therTestP4ss\";\n+        ReflectionTestUtils.setField(passwordPatch, \"value\", String.format(\"{%s}%s\", digest, password));\n+        ReflectionTestUtils.setField(anyPatch, \"password\", passwordPatch);\n+\n+        ldapPasswordPullActions.beforeUpdate(profile, syncDelta, entity, anyPatch);\n+\n+        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n+    }\n+\n+    @Test\n+    public void afterWithNullUser() throws JobExecutionException {\n+        when(userDAO.find(entity.getKey())).thenReturn(null);\n+\n+        ldapPasswordPullActions.after(profile, syncDelta, entity, result);\n+\n+        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n+        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"cipher\"));\n+    }\n+\n+    @Test\n+    public void after(@Mock User user) throws JobExecutionException {\n+        when(userDAO.find(entity.getKey())).thenReturn(user);\n+\n+        ldapPasswordPullActions.after(profile, syncDelta, entity, result);\n+\n+        verify(user).setEncodedPassword(anyString(), any(CipherAlgorithm.class));\n+        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"encodedPassword\"));\n+        assertNull(ReflectionTestUtils.getField(ldapPasswordPullActions, \"cipher\"));\n+    }\n+\n+}"}]}