{"sha":"66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY2YmQwMjdiOGQzM2U3ZDRiMWQ0ZjJlZDQwY2M3ODg5ZmFiYjQ3YWI=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-20T11:27:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-20T11:27:04Z"},"message":"[SYNCOPE-319][SYNCOPE-209] Introducing new REST operation ConnectorService#reload() and refactoring the ConnId layer\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1448090 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"2a89da815faaf4162cc40128496113e56c603f85","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2a89da815faaf4162cc40128496113e56c603f85"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"fddac7c6bc576cb5637db96d8f9843d561d13b51","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/fddac7c6bc576cb5637db96d8f9843d561d13b51","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/fddac7c6bc576cb5637db96d8f9843d561d13b51"}],"stats":{"total":1358,"additions":688,"deletions":670},"files":[{"sha":"bbb9578d2dded31aad0e98f2831e495cfcc7965b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConnectorServiceProxy.java","status":"modified","additions":25,"deletions":21,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -22,9 +22,7 @@\n import java.util.ArrayList;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import javax.ws.rs.core.Response;\r\n-\r\n import org.apache.syncope.common.services.ConnectorService;\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n@@ -39,22 +37,22 @@ public ConnectorServiceProxy(final String baseUrl, final RestTemplate restTempla\n     }\r\n \r\n     @Override\r\n-    public Response create(final ConnInstanceTO connectorTO) {\r\n-        ConnInstanceTO response = getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connectorTO,\r\n+    public Response create(final ConnInstanceTO connInstanceTO) {\r\n+        ConnInstanceTO response = getRestTemplate().postForObject(baseUrl + \"connector/create.json\", connInstanceTO,\r\n                 ConnInstanceTO.class);\r\n         URI location = URI.create(baseUrl + \"connector/read/\" + response.getId() + \".json\");\r\n         return Response.created(location).build();\r\n     }\r\n \r\n     @Override\r\n-    public void update(final Long connectorId, final ConnInstanceTO connectorTO) {\r\n-        getRestTemplate().postForObject(baseUrl + \"connector/update.json\", connectorTO, ConnInstanceTO.class);\r\n+    public void update(final Long connInstanceId, final ConnInstanceTO connInstanceTO) {\r\n+        getRestTemplate().postForObject(baseUrl + \"connector/update.json\", connInstanceTO, ConnInstanceTO.class);\r\n     }\r\n \r\n     @Override\r\n-    public void delete(final Long connectorId) {\r\n-        getRestTemplate().getForObject(baseUrl + \"connector/delete/{connectorId}.json\", ConnInstanceTO.class,\r\n-                connectorId);\r\n+    public void delete(final Long connInstanceId) {\r\n+        getRestTemplate().getForObject(baseUrl + \"connector/delete/{connInstanceId}.json\", ConnInstanceTO.class,\r\n+                connInstanceId);\r\n     }\r\n \r\n     @Override\r\n@@ -68,9 +66,9 @@ public List<ConnInstanceTO> list(final String lang) {\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO read(final Long connectorId) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"connector/read/{connectorId}\", ConnInstanceTO.class,\r\n-                connectorId);\r\n+    public ConnInstanceTO read(final Long connInstanceId) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"connector/read/{connInstanceId}\", ConnInstanceTO.class,\r\n+                connInstanceId);\r\n     }\r\n \r\n     @Override\r\n@@ -84,12 +82,12 @@ public List<ConnBundleTO> getBundles(final String lang) {\n     }\r\n \r\n     @Override\r\n-    public List<SchemaTO> getSchemaNames(final Long connectorId, final ConnInstanceTO connectorTO,\r\n+    public List<SchemaTO> getSchemaNames(final Long connInstanceId, final ConnInstanceTO connInstanceTO,\r\n             final boolean showall) {\r\n         final String queryString = \"?showall=\" + showall;\r\n \r\n         List<String> response = Arrays.asList(getRestTemplate().postForObject(\r\n-                baseUrl + \"connector/schema/list\" + queryString, connectorTO, String[].class));\r\n+                baseUrl + \"connector/schema/list\" + queryString, connInstanceTO, String[].class));\r\n         List<SchemaTO> schemaNames = new ArrayList<SchemaTO>();\r\n         for (String name : response) {\r\n             SchemaTO schemaTO = new SchemaTO();\r\n@@ -100,19 +98,25 @@ public List<SchemaTO> getSchemaNames(final Long connectorId, final ConnInstanceT\n     }\r\n \r\n     @Override\r\n-    public List<ConnConfProperty> getConfigurationProperties(final Long connectorId) {\r\n+    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\r\n         return Arrays.asList(getRestTemplate().getForObject(\r\n-                baseUrl + \"connector/{connectorId}/configurationProperty/list\", ConnConfProperty[].class, connectorId));\r\n+                baseUrl + \"connector/{connInstanceId}/configurationProperty/list\", ConnConfProperty[].class,\r\n+                connInstanceId));\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean check(final ConnInstanceTO connInstanceTO) {\r\n+        return getRestTemplate().postForObject(baseUrl + \"connector/check.json\", connInstanceTO, Boolean.class);\r\n     }\r\n \r\n     @Override\r\n-    public boolean check(final ConnInstanceTO connectorTO) {\r\n-        return getRestTemplate().postForObject(baseUrl + \"connector/check.json\", connectorTO, Boolean.class);\r\n+    public ConnInstanceTO readByResource(final String resourceName) {\r\n+        return getRestTemplate().getForObject(baseUrl + \"connector/{resourceName}/readByResource\",\r\n+                ConnInstanceTO.class, resourceName);\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO readConnectorBean(final String resourceName) {\r\n-        return getRestTemplate().getForObject(baseUrl + \"connector/{resourceName}/connectorBean\", ConnInstanceTO.class,\r\n-                resourceName);\r\n+    public void reload() {\r\n+        getRestTemplate().put(baseUrl + \"connector/reload\", null);\r\n     }\r\n }\r"},{"sha":"9d9e392fdb674e58d447a3ed52e0630609507ad0","filename":"common/src/main/java/org/apache/syncope/common/services/ConnectorService.java","status":"modified","additions":41,"deletions":39,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n-\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.DefaultValue;\r\n import javax.ws.rs.GET;\r\n@@ -30,7 +29,6 @@\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.QueryParam;\r\n import javax.ws.rs.core.Response;\r\n-\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n import org.apache.syncope.common.to.ConnInstanceTO;\r\n import org.apache.syncope.common.to.SchemaTO;\r\n@@ -40,85 +38,89 @@\n public interface ConnectorService {\r\n \r\n     /**\r\n-     * Creates a new connector instance.\r\n+     * Create a new connector instance.\r\n      *\r\n-     * @param connectorTO Connector to be created.\r\n-     * @return Response containing URI location for created resource.\r\n+     * @param connInstanceTO connector instance to be created\r\n+     * @return response containing URI location for created resource\r\n      */\r\n     @POST\r\n-    Response create(ConnInstanceTO connectorTO);\r\n+    Response create(ConnInstanceTO connInstanceTO);\r\n \r\n     /**\r\n-     * @param connectorId Deletes connector with matching id.\r\n+     * @param connInstanceId connector instance id to be deleted\r\n      */\r\n     @DELETE\r\n-    @Path(\"{connectorId}\")\r\n-    void delete(@PathParam(\"connectorId\") Long connectorId);\r\n+    @Path(\"{connInstanceId}\")\r\n+    void delete(@PathParam(\"connInstanceId\") Long connInstanceId);\r\n \r\n     /**\r\n-     * @param lang Language to select bundles from. Default language is English.\r\n-     * @return Returns known bundles in selected language.\r\n+     * @param lang language to select property keys; default language is English\r\n+     * @return available connector bundles with property keys in selected language\r\n      */\r\n     @GET\r\n     @Path(\"bundles\")\r\n     List<ConnBundleTO> getBundles(@QueryParam(\"lang\") String lang);\r\n \r\n     /**\r\n-     * @param connectorId ConnectorID to read configuration from.\r\n-     * @return Returns configuration for selected connector.\r\n+     * @param connInstanceId connector instance id to read configuration from\r\n+     * @return configuration for selected connector instance\r\n      */\r\n     @GET\r\n-    @Path(\"{connectorId}/configuration\")\r\n-    List<ConnConfProperty> getConfigurationProperties(@PathParam(\"connectorId\") Long connectorId);\r\n+    @Path(\"{connInstanceId}/configuration\")\r\n+    List<ConnConfProperty> getConfigurationProperties(@PathParam(\"connInstanceId\") Long connInstanceId);\r\n \r\n     /**\r\n-     * @param connectorId ConnectorID to be used for schema lookup.\r\n-     * @param connectorTO Connector object to provide special configuration properties.\r\n-     * @param showAll If set to true, all schema names will be shown, including special ones like '__PASSWORD__'.\r\n-     * Default is false.\r\n-     * @return Returns schema names for matching connector.\r\n+     * @param connInstanceId connector instance id to be used for schema lookup\r\n+     * @param connInstanceTO connector instance object to provide special configuration properties\r\n+     * @param showAll if set to true, special schema names (like '__PASSWORD__') will be included; default is false\r\n+     * @return schema names for connector bundle matching the given connector instance id\r\n      */\r\n     @POST\r\n-    @Path(\"{connectorId}/schemas\")\r\n-    List<SchemaTO> getSchemaNames(@PathParam(\"connectorId\") Long connectorId, ConnInstanceTO connectorTO,\r\n+    @Path(\"{connInstanceId}/schemas\")\r\n+    List<SchemaTO> getSchemaNames(@PathParam(\"connInstanceId\") Long connInstanceId, ConnInstanceTO connInstanceTO,\r\n             @QueryParam(\"showAll\") @DefaultValue(\"false\") boolean showAll);\r\n \r\n     /**\r\n-     * @param lang Language to select connectors for. Default language is English.\r\n-     * @return Returns a list of all connectors with matching language.\r\n+     * @param lang language to select property keys; default language is English\r\n+     * @return list of all connector instances with property keys in the matching language\r\n      */\r\n     @GET\r\n     List<ConnInstanceTO> list(@QueryParam(\"lang\") String lang);\r\n \r\n     /**\r\n-     * @param connectorId ConnectorID to be read.\r\n-     * @return Returns connector with matching id.\r\n+     * @param connInstanceId connector instance id to be read\r\n+     * @return connector instance with matching id\r\n      */\r\n     @GET\r\n-    @Path(\"{connectorId}\")\r\n-    ConnInstanceTO read(@PathParam(\"connectorId\") Long connectorId);\r\n+    @Path(\"{connInstanceId}\")\r\n+    ConnInstanceTO read(@PathParam(\"connInstanceId\") Long connInstanceId);\r\n \r\n     /**\r\n-     * @param resourceName Resource name to be used for connector lookup.\r\n-     * @return Returns connector for matching resourceName.\r\n+     * @param resourceName resource name to be used for connector lookup\r\n+     * @return connector instance for matching resource\r\n      */\r\n     @GET\r\n-    ConnInstanceTO readConnectorBean(@MatrixParam(\"resourceName\") String resourceName);\r\n+    ConnInstanceTO readByResource(@MatrixParam(\"resourceName\") String resourceName);\r\n \r\n     /**\r\n-     * @param connectorId Overwrites connector with matching key.\r\n-     * @param connectorTO Connector to be stored.\r\n+     * @param connInstanceId connector instance id to be updated\r\n+     * @param connInstaceTO connector instance to be stored\r\n      */\r\n     @PUT\r\n-    @Path(\"{connectorId}\")\r\n-    void update(@PathParam(\"connectorId\") Long connectorId, ConnInstanceTO connectorTO);\r\n+    @Path(\"{connInstanceId}\")\r\n+    void update(@PathParam(\"connInstanceId\") Long connInstanceId, ConnInstanceTO connInstaceTO);\r\n \r\n     /**\r\n-     * @param connectorTO ConnectorTO to be used for connection check\r\n-     * @return True is connection could be established.\r\n+     * @param connInstaceTO connector instance to be used for connection check\r\n+     * @return true if connection could be established\r\n      */\r\n     @POST\r\n     @Path(\"check\")\r\n-    boolean check(ConnInstanceTO connectorTO);\r\n+    boolean check(ConnInstanceTO connInstaceTO);\r\n \r\n-}\r\n+    /**\r\n+     * Reload all connector bundles and instances.\r\n+     */\r\n+    @PUT\r\n+    void reload();\r\n+}\n\\ No newline at end of file"},{"sha":"1a77cd7777f5793481818b947e3c077cedf0d941","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -102,7 +102,8 @@ public enum ConnectorSubCategory {\n         getSchemaNames,\r\n         getConfigurationProperties,\r\n         check,\r\n-        readConnectorBean\r\n+        readConnectorBean,\r\n+        reload\r\n \r\n     }\r\n \r"},{"sha":"1303e4acdd6360198b34ae12ca9ed176fa331f06","filename":"console/src/main/java/org/apache/syncope/console/pages/Resources.java","status":"modified","additions":38,"deletions":1,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -34,8 +34,11 @@\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.console.wicket.markup.html.form.LinkPanel;\n+import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxCallListener;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -103,7 +106,41 @@ public Resources(final PageParameters parameters) {\n         add(createConnectorWin = new ModalWindow(\"createConnectorWin\"));\n         add(editConnectorWin = new ModalWindow(\"editConnectorWin\"));\n \n-        add(feedbackPanel);\n+        AjaxLink<Void> reloadLink = new ClearIndicatingAjaxLink<Void>(\"reloadLink\", getPageReference()) {\n+\n+            private static final long serialVersionUID = 3109256773218160485L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                try {\n+                    connectorRestClient.reload();\n+                    info(getString(\"operation_succeeded\"));\n+                } catch (Exception e) {\n+                    error(getString(\"error\") + \": \" + e.getMessage());\n+                }\n+                target.add(feedbackPanel);\n+            }\n+\n+            @Override\n+            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+                super.updateAjaxAttributes(attributes);\n+\n+                final AjaxCallListener ajaxCallListener = new AjaxCallListener() {\n+\n+                    private static final long serialVersionUID = 7160235486520935153L;\n+\n+                    @Override\n+                    public CharSequence getPrecondition(final Component component) {\n+                        return \"if (!confirm('\" + getString(\"confirmReloadConnectors\") + \"')) \"\n+                                + \"{return false;} else {return true;}\";\n+                    }\n+                };\n+                attributes.getAjaxCallListeners().add(ajaxCallListener);\n+            }\n+        };\n+        MetaDataRoleAuthorizationStrategy.authorize(reloadLink, ENABLE, xmlRolesReader.getAllAllowedRoles(\n+                \"Connectors\", \"reload\"));\n+        add(reloadLink);\n \n         resourcePaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_RESOURCES_PAGINATOR_ROWS);\n         connectorPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_CONNECTORS_PAGINATOR_ROWS);"},{"sha":"e4638de838546a0474d74165867e4c78014055a4","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -198,4 +198,8 @@ public List<String> getSchemaNames(final ConnInstanceTO connectorTO) {\n \n         return schemaNames;\n     }\n+\n+    public void reload() {\n+        getService(ConnectorService.class).reload();\n+    }\n }"},{"sha":"272601020a8d2959b822d6576b8edf1dc05d0f79","filename":"console/src/main/java/org/apache/syncope/console/wicket/ajax/markup/html/IndicatingDeleteOnConfirmAjaxLink.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingDeleteOnConfirmAjaxLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingDeleteOnConfirmAjaxLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingDeleteOnConfirmAjaxLink.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -37,7 +37,7 @@ public IndicatingDeleteOnConfirmAjaxLink(final String id, final IModel<T> model,\n     }\n \n     @Override\n-    protected void updateAjaxAttributes(AjaxRequestAttributes attributes) {\n+    protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n         super.updateAjaxAttributes(attributes);\n \n         final AjaxCallListener ajaxCallListener = new AjaxCallListener() {"},{"sha":"5beb6d3b5d50e8821b43421e2bb16db30703d78c","filename":"console/src/main/resources/authorizations.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -159,6 +159,11 @@ under the License.\n     <action id=\"delete\">\n       <entitlement>CONNECTOR_DELETE</entitlement>\n     </action>\n+    \n+    <action id=\"reload\">\n+      <entitlement>CONNECTOR_RELOAD</entitlement>\n+    </action>\n+\n   </page>\n \n   <page id=\"Approval\">"},{"sha":"1a0230b7719a6489d4267d4c933d43408e5c4470","filename":"console/src/main/resources/org/apache/syncope/console/pages/Configuration.html","status":"modified","additions":139,"deletions":138,"changes":277,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -17,155 +17,156 @@\n under the License.\n -->\n <wicket:head>\n-    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/codemirror.css\" />\n-    <link rel=\"stylesheet\" type=\"text/css\" href=\"css/codemirror_default_theme.css\" />\n+  <link rel=\"stylesheet\" type=\"text/css\" href=\"css/codemirror.css\" />\n+  <link rel=\"stylesheet\" type=\"text/css\" href=\"css/codemirror_default_theme.css\" />\n \n-    <script type=\"text/javascript\" src=\"scripts/codemirror.js\"></script>\n-    <script type=\"text/javascript\" src=\"scripts/xmlpure.js\"></script>\n-    <script type=\"text/javascript\">\n-        function updateTextArea(editor) {\n-            document.getElementById(\"workflowDefArea\").value = editor.getValue();\n-        }\n-    </script>\n+  <script type=\"text/javascript\" src=\"scripts/codemirror.js\"></script>\n+  <script type=\"text/javascript\" src=\"scripts/xmlpure.js\"></script>\n+  <script type=\"text/javascript\">\n+    function updateTextArea(editor) {\n+      document.getElementById(\"workflowDefArea\").value = editor.getValue();\n+    }\n+  </script>\n </wicket:head>\n \n <wicket:extend>\n \n-    <div id=\"tabs\">\n-        <ul>\n-            <li class=\"tabs-selected\">\n-                <a href=\"#tabs-1\"><span><wicket:message key=\"tab1\"/></span></a>\n-            </li>\n-            <li><a href=\"#tabs-2\"><span><wicket:message key=\"tab2\"/></span></a></li>\n-            <li><a href=\"#tabs-3\"><span><wicket:message key=\"tab3\"/></span></a></li>\n-            <li><a href=\"#tabs-4\"><span><wicket:message key=\"tab4\"/></span></a></li>\n-            <li><a href=\"#tabs-5\"><span><wicket:message key=\"tab5\"/></span></a></li>\n-            <li><a href=\"#tabs-6\"><span><wicket:message key=\"tab6\"/></span></a></li>\n-            <li><a href=\"#tabs-7\"><span><wicket:message key=\"tab7\"/></span></a></li>\n-            <li><a href=\"#tabs-8\"><span><wicket:message key=\"tab8\"/></span></a></li>\n-        </ul>\n-        <div id=\"tabs-1\">\n+  <div id=\"tabs\">\n+    <ul>\n+      <li class=\"tabs-selected\">\n+        <a href=\"#tabs-1\"><span><wicket:message key=\"tab1\"/></span></a>\n+      </li>\n+      <li><a href=\"#tabs-2\"><span><wicket:message key=\"tab2\"/></span></a></li>\n+      <li><a href=\"#tabs-3\"><span><wicket:message key=\"tab3\"/></span></a></li>\n+      <li><a href=\"#tabs-4\"><span><wicket:message key=\"tab4\"/></span></a></li>\n+      <li><a href=\"#tabs-5\"><span><wicket:message key=\"tab5\"/></span></a></li>\n+      <li><a href=\"#tabs-6\"><span><wicket:message key=\"tab6\"/></span></a></li>\n+      <li><a href=\"#tabs-7\"><span><wicket:message key=\"tab7\"/></span></a></li>\n+      <li><a href=\"#tabs-8\"><span><wicket:message key=\"tab8\"/></span></a></li>\n+    </ul>\n+    <div id=\"tabs-1\">\n \n-            <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-                <span wicket:id=\"confContainer\">\n-                    <table class=\"ui-widget ui-widget-content table-hover\"\n-                           wicket:id=\"syncopeconf\"/>\n-                </span>\n+      <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+        <span wicket:id=\"confContainer\">\n+          <table class=\"ui-widget ui-widget-content table-hover\"\n+                 wicket:id=\"syncopeconf\"/>\n+        </span>\n \n-                <span style=\"float:right\">\n-                    <form wicket:id=\"confPaginatorForm\" style=\"display:inline\">\n-                        <label><wicket:message key=\"displayRows\"/></label>\n-                        <select class=\"text ui-widget-content ui-corner-all\"\n-                                wicket:id=\"rowsChooser\"/>\n-                    </form>\n-                </span>\n-            </div>\n+        <span style=\"float:right\">\n+          <form wicket:id=\"confPaginatorForm\" style=\"display:inline\">\n+            <label><wicket:message key=\"displayRows\"/></label>\n+            <select class=\"text ui-widget-content ui-corner-all\"\n+                    wicket:id=\"rowsChooser\"/>\n+          </form>\n+        </span>\n+      </div>\n \n-            <div wicket:id=\"createConfigurationWin\">[Show modal window for creating configuration]</div>\n-            <div wicket:id=\"editConfigurationWin\">[Show modal window for editing configuration]</div>\n+      <div wicket:id=\"createConfigurationWin\">[Show modal window for creating configuration]</div>\n+      <div wicket:id=\"editConfigurationWin\">[Show modal window for editing configuration]</div>\n \n-            <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n-               wicket:id=\"createConfigurationLink\">\n-                <wicket:message key=\"create_configuration\"/>\n-            </a>\n-        </div>\n-        <div id=\"tabs-2\">\n-            <span wicket:id=\"passwordPoliciesPanel\">[password policies]</span>\n-        </div>\n-        <div id=\"tabs-3\">\n-            <span wicket:id=\"accountPoliciesPanel\">[account policies]</span>\n-        </div>\n-        <div id=\"tabs-4\">\n-            <span wicket:id=\"syncPoliciesPanel\">[sync policies]</span>\n-        </div>\n-        <div id=\"tabs-5\">\n-            <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-                <span wicket:id=\"notificationContainer\">\n-                    <table class=\"ui-widget ui-widget-content table-hover\"\n-                           wicket:id=\"notificationTable\"/>\n-                </span>\n+      <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n+         wicket:id=\"createConfigurationLink\">\n+        <wicket:message key=\"create_configuration\"/>\n+      </a>\n+    </div>\n+    <div id=\"tabs-2\">\n+      <span wicket:id=\"passwordPoliciesPanel\">[password policies]</span>\n+    </div>\n+    <div id=\"tabs-3\">\n+      <span wicket:id=\"accountPoliciesPanel\">[account policies]</span>\n+    </div>\n+    <div id=\"tabs-4\">\n+      <span wicket:id=\"syncPoliciesPanel\">[sync policies]</span>\n+    </div>\n+    <div id=\"tabs-5\">\n+      <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+        <span wicket:id=\"notificationContainer\">\n+          <table class=\"ui-widget ui-widget-content table-hover\"\n+                 wicket:id=\"notificationTable\"/>\n+        </span>\n \n-                <span style=\"float:right\">\n-                    <form wicket:id=\"notificationPaginatorForm\" style=\"display:inline\">\n-                        <label><wicket:message key=\"displayRows\"/></label>\n-                        <select class=\"text ui-widget-content ui-corner-all\"\n-                                wicket:id=\"rowsChooser\"/>\n-                    </form>\n-                </span>\n-            </div>\n+        <span style=\"float:right\">\n+          <form wicket:id=\"notificationPaginatorForm\" style=\"display:inline\">\n+            <label><wicket:message key=\"displayRows\"/></label>\n+            <select class=\"text ui-widget-content ui-corner-all\"\n+                    wicket:id=\"rowsChooser\"/>\n+          </form>\n+        </span>\n+      </div>\n \n-            <div wicket:id=\"createNotificationWin\">[Show modal window for creating notification]</div>\n-            <div wicket:id=\"editNotificationWin\">[Show modal window for editing notification]</div>\n+      <div wicket:id=\"createNotificationWin\">[Show modal window for creating notification]</div>\n+      <div wicket:id=\"editNotificationWin\">[Show modal window for editing notification]</div>\n \n-            <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n-               wicket:id=\"createNotificationLink\">\n-                <wicket:message key=\"create_notification\"/>\n-            </a>\n-        </div>\n-        <div id=\"tabs-6\">\n-            <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-                <span wicket:id=\"workflowDefContainer\">\n-                    <form wicket:id=\"workflowDefForm\">\n-                        <textarea wicket:id=\"workflowDefArea\" id=\"workflowDefArea\" style=\"width:100%;height:350px;\">\n-                        </textarea>\n-                        <div style=\"margin: 10px 0px 0\">\n-                            <input type=\"submit\"\n-                                   class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n-                                   wicket:id=\"apply\"/>\n-                        </div>\n-                    </form>\n-                    <script>\n-                        var editor = CodeMirror.fromTextArea(document.getElementById(\"workflowDefArea\"), \n-                        {mode: {name: \"xmlpure\"}, lineNumbers: true, onChange: updateTextArea});\n-                    </script>\n-                </span>\n-            </div>\n-        </div>\n-        <div id=\"tabs-7\">\n-            <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-                <span wicket:id=\"coreLoggerContainer\">\n-                    <table class=\"ui-widget ui-widget-content table-hover\">\n-                        <thead class=\"ui-widget-header\">\n-                            <tr class=\"heaaders\">\n-                                <th><wicket:message key=\"logger\"/></th>\n-                        <th><wicket:message key=\"level\"/></th>\n-                        </tr>\n-                        </thead>\n-                        <tbody>\n-                            <tr wicket:id=\"corelogger\">\n-                                <td><span wicket:id=\"name\"/></td>\n-                                <td><select wicket:id=\"level\"/></td>\n-                            </tr>\n-                        </tbody>\n-                    </table>\n-                </span>\n-            </div>\n-        </div>\n-        <div id=\"tabs-8\">\n-            <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n-                <span wicket:id=\"consoleLoggerContainer\">\n-                    <table class=\"ui-widget ui-widget-content table-hover\">\n-                        <thead class=\"ui-widget-header\">\n-                            <tr class=\"heaaders\">\n-                                <th><wicket:message key=\"logger\"/></th>\n-                        <th><wicket:message key=\"level\"/></th>\n-                        </tr>\n-                        </thead>\n-                        <tbody>\n-                            <tr wicket:id=\"consolelogger\">\n-                                <td><span wicket:id=\"name\"/></td>\n-                                <td><select wicket:id=\"level\"/></td>\n-                            </tr>\n-                        </tbody>\n-                    </table>\n-                </span>\n+      <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n+         wicket:id=\"createNotificationLink\">\n+        <wicket:message key=\"create_notification\"/>\n+      </a>\n+    </div>\n+    <div id=\"tabs-6\">\n+      <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+        <span wicket:id=\"workflowDefContainer\">\n+          <form wicket:id=\"workflowDefForm\">\n+            <textarea wicket:id=\"workflowDefArea\" id=\"workflowDefArea\" style=\"width:100%;height:350px;\">\n+            </textarea>\n+            <div style=\"margin: 10px 0px 0\">\n+              <input type=\"submit\"\n+                     class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n+                     wicket:id=\"apply\"/>\n             </div>\n-        </div>\n-        <div>\n-            <label style=\"position: absolute; top: 10px; right:55px;\"><wicket:message key=\"db_export\"/></label>\n-            <a style=\"position: absolute; top: 2px; right:20px;\" wicket:id=\"dbExportLink\">\n-                <img src=\"img/db_export.png\" alt=\"DB export\" width=\"30\" height=\"30\" /></a>\n-        </div>    \n-\n+          </form>\n+          <script>\n+            var editor = CodeMirror.fromTextArea(document.getElementById(\"workflowDefArea\"), \n+            {mode: {name: \"xmlpure\"}, lineNumbers: true, onChange: updateTextArea});\n+          </script>\n+        </span>\n+      </div>\n     </div>\n-</wicket:extend>\n+    <div id=\"tabs-7\">\n+      <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+        <span wicket:id=\"coreLoggerContainer\">\n+          <table class=\"ui-widget ui-widget-content table-hover\">\n+            <thead class=\"ui-widget-header\">\n+              <tr class=\"heaaders\">\n+                <th><wicket:message key=\"logger\"/></th>\n+            <th><wicket:message key=\"level\"/></th>\n+            </tr>\n+            </thead>\n+            <tbody>\n+              <tr wicket:id=\"corelogger\">\n+                <td><span wicket:id=\"name\"/></td>\n+                <td><select wicket:id=\"level\"/></td>\n+              </tr>\n+            </tbody>\n+          </table>\n+        </span>\n+      </div>\n+    </div>\n+    <div id=\"tabs-8\">\n+      <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n+        <span wicket:id=\"consoleLoggerContainer\">\n+          <table class=\"ui-widget ui-widget-content table-hover\">\n+            <thead class=\"ui-widget-header\">\n+              <tr class=\"heaaders\">\n+                <th><wicket:message key=\"logger\"/></th>\n+            <th><wicket:message key=\"level\"/></th>\n+            </tr>\n+            </thead>\n+            <tbody>\n+              <tr wicket:id=\"consolelogger\">\n+                <td><span wicket:id=\"name\"/></td>\n+                <td><select wicket:id=\"level\"/></td>\n+              </tr>\n+            </tbody>\n+          </table>\n+        </span>\n+      </div>\n+    </div>\n+    <div>\n+      <a style=\"position: absolute; top: 2px; right:20px;\" wicket:id=\"dbExportLink\">\n+        <img src=\"img/db_export.png\"width=\"30\" height=\"30\"\n+             alt=\"DB export\" title=\"title\" wicket:message=\"title:db_export\"/>\n+      </a>\n+    </div>    \n+\n+  </div>\n+</wicket:extend>\n\\ No newline at end of file"},{"sha":"86d845bfa618b74842cd34a63a6e4e88b6e60e8c","filename":"console/src/main/resources/org/apache/syncope/console/pages/Resources.html","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.html?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -71,6 +71,13 @@\n         <wicket:message key=\"create-connector\"/>\n       </a>\n     </div>\n+\n+    <div>\n+      <a href=\"#\" style=\"position: absolute; top: 4px; right:20px;\" wicket:id=\"reloadLink\">\n+        <img src=\"img/reload_30.png\" width=\"25\" height=\"25\"\n+             alt=\"Reload connectors\" title=\"title\" wicket:message=\"title:reloadConnectors\"/>\n+      </a>\n+    </div>    \n   </div>\n \n-</wicket:extend>\n+</wicket:extend>\n\\ No newline at end of file"},{"sha":"539c4d9422a1e4e03bb4c07c893ce79c228687a6","filename":"console/src/main/resources/org/apache/syncope/console/pages/Resources.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.properties?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -30,3 +30,5 @@ delete=Delete\n create-connector=Create new connector\n delete_error=Operation forbidden:the connector you're trying to delete is connected to a Resource\n connector=Connector\n+reloadConnectors=Reload connectors\n+confirmReloadConnectors=This request is potentially dangerous for running operations, continue?"},{"sha":"230c5ef84beca5bf1568e2bd5bffd3c96d239676","filename":"console/src/main/resources/org/apache/syncope/console/pages/Resources_it.properties","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources_it.properties?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -30,3 +30,6 @@ delete=Elimina\n delete_error=Operazione vietata: il connettore che si desidera rimuovere \\u00e8 correlato ad una risorsa\n displayName=Nome visualizzato\n connector=Connettore\n+reloadConnectors=Ricarica connettori\n+confirmReloadConnectors=QQuesta richiesta \\u00e8 potenzialmente dannosa per le operazioni in corso, proseguire?\n+uesta richiesta \\u00e8 potenzialmente dannosa per le operazioni in corso, proseguire?"},{"sha":"52130b35888bd4cc0396f7fc0c6512110cc1c130","filename":"console/src/main/webapp/img/reload_30.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Freload_30.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Freload_30.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Freload_30.png?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab"},{"sha":"39f93620aff0872c0b62cfeeafc516df2796b1c1","filename":"console/src/test/java/org/apache/syncope/console/ConnInstanceTestITCase.java","status":"modified","additions":0,"deletions":24,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FConnInstanceTestITCase.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -18,34 +18,10 @@\n  */\n package org.apache.syncope.console;\n \n-import java.io.IOException;\n-import java.io.InputStream;\n-import java.util.Properties;\n-import org.junit.BeforeClass;\n import org.junit.Test;\n \n public class ConnInstanceTestITCase extends AbstractTest {\n \n-    private static String connidSoapVersion;\n-\n-    @BeforeClass\n-    public static void init() throws IOException {\n-        Properties props = new Properties();\n-        InputStream propStream = null;\n-        try {\n-            propStream = ConnInstanceTestITCase.class.getResourceAsStream(\"/bundles.properties\");\n-            props.load(propStream);\n-            connidSoapVersion = props.getProperty(\"connid.soap.version\");\n-        } catch (Exception e) {\n-            LOG.error(\"Could not load bundles.properties\", e);\n-        } finally {\n-            if (propStream != null) {\n-                propStream.close();\n-            }\n-        }\n-        assertNotNull(connidSoapVersion);\n-    }\n-\n     @Test\n     public void browseCreateModal() {\n         selenium.click(\"css=img[alt=\\\"Resources\\\"]\");"},{"sha":"553c306412c7e3b87cf2b4c78f47c438449b8ac9","filename":"core/src/main/java/org/apache/syncope/core/audit/JNDIFallbackConnectionSource.java","status":"modified","additions":8,"deletions":13,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -18,28 +18,23 @@\n  */\n package org.apache.syncope.core.audit;\n \n+import ch.qos.logback.core.db.ConnectionSource;\n+import ch.qos.logback.core.db.ConnectionSourceBase;\n+import ch.qos.logback.core.db.DataSourceConnectionSource;\n+import ch.qos.logback.core.db.JNDIConnectionSource;\n+import ch.qos.logback.core.db.dialect.SQLDialectCode;\n+import ch.qos.logback.core.spi.ContextAwareBase;\n import java.sql.Connection;\n import java.sql.SQLException;\n-\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import javax.rmi.PortableRemoteObject;\n import javax.sql.DataSource;\n \n-import ch.qos.logback.core.db.ConnectionSource;\n-import ch.qos.logback.core.db.ConnectionSourceBase;\n-import ch.qos.logback.core.db.DataSourceConnectionSource;\n-import ch.qos.logback.core.db.JNDIConnectionSource;\n-import ch.qos.logback.core.db.dialect.SQLDialectCode;\n-import ch.qos.logback.core.spi.ContextAwareBase;\n-\n /**\n- * The <id>FallbackConnectionSource</id> is an implementation of\n- * {@link ConnectionSource} that attempts at first to obtain a {@link javax.sql.DataSource} from a JNDI provider and, if\n- * not found, from a provided {@link javax.sql.DataSource DataSource}.\n- *\n- * @author <a href=\"mailto:rdecampo@twcny.rr.com\">Ray DeCampo</a>\n+ * Implementation of {@link ConnectionSource} that attempts at first to obtain a {@link javax.sql.DataSource} from a\n+ * JNDI provider and, if not found, from a provided {@link javax.sql.DataSource DataSource}.\n  */\n public class JNDIFallbackConnectionSource extends ContextAwareBase implements ConnectionSource {\n "},{"sha":"c0fed6b050bde77cc9bd39d80f6ca6a60793db64","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -53,7 +53,7 @@\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n@@ -474,7 +474,7 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n      */\n     public void retrieveVirAttrValues(final AbstractAttributable owner, final AttributableUtil attrUtil) {\n         final ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n-        final ConnectorFactory connInstanceLoader = context.getBean(ConnectorFactory.class);\n+        final ConnectorFactory connFactory = context.getBean(ConnectorFactory.class);\n \n         final IntMappingType type = attrUtil.getType() == AttributableType.USER\n                 ? IntMappingType.UserVirtualSchema : attrUtil.getType() == AttributableType.ROLE\n@@ -488,7 +488,7 @@ public void retrieveVirAttrValues(final AbstractAttributable owner, final Attrib\n         for (AbstractVirAttr virAttr : owner.getVirtualAttributes()) {\n             // reset value set\n             if (virAttr.getValues().isEmpty()) {\n-                retrieveVirAttrValue(owner, virAttr, attrUtil, type, externalResources, connInstanceLoader);\n+                retrieveVirAttrValue(owner, virAttr, attrUtil, type, externalResources, connFactory);\n             }\n         }\n         // -----------------------\n@@ -500,7 +500,7 @@ private void retrieveVirAttrValue(\n             final AttributableUtil attrUtil,\n             final IntMappingType type,\n             final Map<String, ConnectorObject> externalResources,\n-            final ConnectorFactory connInstanceLoader) {\n+            final ConnectorFactory connFactory) {\n \n         final String schemaName = virAttr.getVirtualSchema().getName();\n         final List<String> values = virAttrCache.get(attrUtil.getType(), owner.getId(), schemaName);\n@@ -530,7 +530,7 @@ private void retrieveVirAttrValue(\n                             throw new IllegalArgumentException(\"No AccountId found for \" + resource.getName());\n                         }\n \n-                        final SyncopeConnector connector = connInstanceLoader.getConnector(resource);\n+                        final Connector connector = connFactory.getConnector(resource);\n \n                         final OperationOptions oo =\n                                 connector.getOperationOptions(MappingUtil.getMatchingMappingItems(mappings, type));"},{"sha":"2c4ab00dc395797d599abe4c7d3082e664da7384","filename":"core/src/main/java/org/apache/syncope/core/init/ConnectorManager.java","status":"renamed","additions":33,"deletions":47,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnectorManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnectorManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnectorManager.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -25,15 +25,14 @@\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.dao.ConnectorRegistry;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n import org.apache.syncope.core.propagation.impl.ConnectorFacadeProxy;\n import org.apache.syncope.core.rest.data.ResourceDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n-import org.apache.syncope.core.util.ConnBundleManager;\n import org.identityconnectors.common.l10n.CurrentLocale;\n+import org.identityconnectors.framework.api.ConnectorFacadeFactory;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeansException;\n@@ -45,75 +44,46 @@\n  * Load ConnId connector instances.\n  */\n @Component\n-class ConnInstanceLoader implements ConnectorRegistry, ConnectorFactory {\n+class ConnectorManager implements ConnectorRegistry, ConnectorFactory {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnInstanceLoader.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(ConnectorManager.class);\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n \n-    @Autowired\n-    private ConnBundleManager connBundleManager;\n-\n     @Autowired\n     private ResourceDataBinder resourceDataBinder;\n \n     private String getBeanName(final ExternalResource resource) {\n         return String.format(\"connInstance-%d-%s\", resource.getConnector().getId(), resource.getName());\n     }\n \n-    /* (non-Javadoc)\n-     * @see ConnectorFactory#getConnector(org.apache.syncope.core.persistence.beans.ExternalResource)\n-     */\n     @Override\n-    public SyncopeConnector getConnector(final ExternalResource resource)\n-            throws BeansException, NotFoundException {\n+    public Connector getConnector(final ExternalResource resource)\n+            throws BeansException {\n \n         // Try to re-create connector bean from underlying resource (useful for managing failover scenarios)\n         if (!ApplicationContextProvider.getBeanFactory().containsBean(getBeanName(resource))) {\n             registerConnector(resource);\n         }\n \n-        return (SyncopeConnector) ApplicationContextProvider.getBeanFactory().getBean(getBeanName(resource));\n-    }\n-\n-    public SyncopeConnector createConnectorBean(final ExternalResource resource)\n-            throws NotFoundException {\n-\n-        final ConnInstance connInstanceClone = resourceDataBinder.getConnInstance(resource);\n-        return createConnectorBean(resource.getConnector(), connInstanceClone.getConfiguration());\n+        return (Connector) ApplicationContextProvider.getBeanFactory().getBean(getBeanName(resource));\n     }\n \n-    /**\n-     * Create connector bean starting from connector instance and configuration properties. This method must be used to\n-     * create a connector instance without any linked external resource.\n-     *\n-     * @param connInstance connector instance.\n-     * @param configuration configuration properties.\n-     * @return connector facade proxy.\n-     * @throws NotFoundException when not able to fetch all the required data.\n-     */\n     @Override\n-    public SyncopeConnector createConnectorBean(final ConnInstance connInstance,\n-            final Set<ConnConfProperty> configuration)\n-            throws NotFoundException {\n-\n+    public Connector createConnector(final ConnInstance connInstance, final Set<ConnConfProperty> configuration) {\n         final ConnInstance connInstanceClone = (ConnInstance) SerializationUtils.clone(connInstance);\n \n         connInstanceClone.setConfiguration(configuration);\n \n         return ApplicationContextProvider.getBeanFactory().getBean(\n-                \"connectorFacadeProxy\", ConnectorFacadeProxy.class, connInstanceClone, connBundleManager);\n+                \"connectorFacadeProxy\", ConnectorFacadeProxy.class, connInstanceClone);\n     }\n \n-    /* (non-Javadoc)\n-     * @see ConnectorRegistry#registerConnector(org.apache.syncope.core.persistence.beans.ExternalResource)\n-     */\n     @Override\n-    public void registerConnector(final ExternalResource resource)\n-            throws NotFoundException {\n-\n-        final SyncopeConnector connector = createConnectorBean(resource);\n+    public void registerConnector(final ExternalResource resource) {\n+        final ConnInstance connInstance = resourceDataBinder.getConnInstance(resource);\n+        final Connector connector = createConnector(resource.getConnector(), connInstance.getConfiguration());\n         LOG.debug(\"Connector to be registered: {}\", connector);\n \n         final String beanName = getBeanName(resource);\n@@ -126,9 +96,6 @@ public void registerConnector(final ExternalResource resource)\n         LOG.debug(\"Successfully registered bean {}\", beanName);\n     }\n \n-    /* (non-Javadoc)\n-     * @see org.apache.syncope.core.init.ConnectorRegistry#unregisterConnector(java.lang.String)\n-     */\n     @Override\n     public void unregisterConnector(final String id) {\n         ApplicationContextProvider.getBeanFactory().destroySingleton(id);\n@@ -142,15 +109,34 @@ public void load() {\n \n         // Next load all resource-specific connectors.\n         for (ExternalResource resource : resourceDAO.findAll()) {\n+            LOG.info(\"Registering resource-connector pair {}-{}\", resource, resource.getConnector());\n             try {\n-                LOG.info(\"Registering resource-connector pair {}-{}\", resource, resource.getConnector());\n                 registerConnector(resource);\n             } catch (Exception e) {\n                 LOG.error(\"While registering resource-connector pair {}-{}\", resource, resource.getConnector(), e);\n             }\n         }\n \n-        LOG.info(\"Done loading {} connectors.\", ApplicationContextProvider.getBeanFactory().getBeansOfType(\n+        LOG.info(\"Done loading {} connectors\", ApplicationContextProvider.getBeanFactory().getBeansOfType(\n                 ConnectorFacadeProxy.class, false, true).size());\n     }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public void unload() {\n+        int connectors = 0;\n+        for (ExternalResource resource : resourceDAO.findAll()) {\n+            final String beanName = getBeanName(resource);\n+            if (ApplicationContextProvider.getBeanFactory().containsSingleton(beanName)) {\n+                LOG.info(\"Unegistering resource-connector pair {}-{}\", resource, resource.getConnector());\n+                unregisterConnector(beanName);\n+                connectors++;\n+            }\n+        }\n+\n+        LOG.info(\"Done unloading {} connectors\", connectors);\n+\n+        ConnectorFacadeFactory.getInstance().dispose();\n+        LOG.info(\"All connector resources disposed\");\n+    }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/init/ConnInstanceLoader.java"},{"sha":"9f1f6a2e88780fb9fc497c00ee57fac5105da2e1","filename":"core/src/main/java/org/apache/syncope/core/init/SpringContextInitializer.java","status":"modified","additions":3,"deletions":9,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FSpringContextInitializer.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -18,22 +18,20 @@\n  */\n package org.apache.syncope.core.init;\n \n-import javax.servlet.ServletContext;\n import org.apache.syncope.core.persistence.dao.impl.ContentLoader;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n-import org.springframework.web.context.ServletContextAware;\n \n /**\n  * Take care of all initializations needed by Syncope to run up and safe.\n  */\n @Component\n-public class SpringContextInitializer implements ServletContextAware, InitializingBean {\n+public class SpringContextInitializer implements InitializingBean {\n \n     @Autowired\n-    private ConnectorFactory connInstanceLoader;\n+    private ConnectorFactory connFactory;\n \n     @Autowired\n     private ContentLoader contentLoader;\n@@ -50,14 +48,10 @@ public class SpringContextInitializer implements ServletContextAware, Initializi\n     @Autowired\n     private WorkflowAdapterLoader workflowAdapterLoader;\n \n-    @Override\n-    public void setServletContext(final ServletContext servletContext) {\n-    }\n-\n     @Override\n     public void afterPropertiesSet() throws Exception {\n         contentLoader.load(workflowAdapterLoader.getInitSQLStatements());\n-        connInstanceLoader.load();\n+        connFactory.load();\n         jobInstanceLoader.load();\n         loggerLoader.load();\n         classNamesLoader.load();"},{"sha":"d9c6845696f948b331a0f82f4131f9b952b94d44","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/ConnectorRegistry.java","status":"modified","additions":16,"deletions":2,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FConnectorRegistry.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -20,10 +20,24 @@\n \n import org.apache.syncope.core.persistence.beans.ExternalResource;\n \n+/**\n+ * Manage Spring beans lifecycle for connectors.\n+ *\n+ * @see org.apache.syncope.core.propagation.Connector\n+ */\n public interface ConnectorRegistry {\n \n-    void registerConnector(ExternalResource resource)\n-            throws NotFoundException;\n+    /**\n+     * Create and register into Spring context a bean for the given resource.\n+     *\n+     * @param resource external resource\n+     */\n+    void registerConnector(ExternalResource resource);\n \n+    /**\n+     * Removes the Spring bean for the given id from the context.\n+     *\n+     * @param id Spring bean id\n+     */\n     void unregisterConnector(String id);\n }\n\\ No newline at end of file"},{"sha":"95c3bd65f20c18109b57fca8311b7ad1ab064769","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ConnInstanceDAOImpl.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FConnInstanceDAOImpl.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -38,7 +38,7 @@ public class ConnInstanceDAOImpl extends AbstractDAOImpl implements ConnInstance\n     private ResourceDAO resourceDAO;\n \n     @Autowired\n-    private ConnectorRegistry connInstanceLoader;\n+    private ConnectorRegistry connRegistry;\n \n     @Override\n     public ConnInstance find(final Long id) {\n@@ -58,7 +58,7 @@ public ConnInstance save(final ConnInstance connector) {\n \n         for (ExternalResource resource : merged.getResources()) {\n             try {\n-                connInstanceLoader.registerConnector(resource);\n+                connRegistry.registerConnector(resource);\n             } catch (NotFoundException e) {\n                 LOG.error(\"While registering connector for resource\", e);\n             }\n@@ -84,6 +84,6 @@ public void delete(final Long id) {\n \n         entityManager.remove(connInstance);\n \n-        connInstanceLoader.unregisterConnector(id.toString());\n+        connRegistry.unregisterConnector(id.toString());\n     }\n }"},{"sha":"ed6ab4748c4de9f216f7a11405a8c4731e637265","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -54,7 +54,7 @@ public class ResourceDAOImpl extends AbstractDAOImpl implements ResourceDAO {\n     private RoleDAO roleDAO;\n \n     @Autowired\n-    private ConnectorRegistry connInstanceLoader;\n+    private ConnectorRegistry connRegistry;\n \n     @Override\n     public ExternalResource find(final String name) {\n@@ -101,7 +101,7 @@ public List<ExternalResource> findAllByPriority() {\n     public ExternalResource save(final ExternalResource resource) {\n         ExternalResource merged = entityManager.merge(resource);\n         try {\n-            connInstanceLoader.registerConnector(merged);\n+            connRegistry.registerConnector(merged);\n         } catch (NotFoundException e) {\n             LOG.error(\"While registering connector for resource\", e);\n         }"},{"sha":"cdd093565088a393aef3f3076cffc94eb664afc8","filename":"core/src/main/java/org/apache/syncope/core/propagation/Connector.java","status":"renamed","additions":11,"deletions":4,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnector.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -34,7 +34,10 @@\n import org.identityconnectors.framework.common.objects.Uid;\n import org.identityconnectors.framework.common.objects.filter.Filter;\n \n-public interface SyncopeConnector {\n+/**\n+ * Entry point for making requests on underlying connector bundles.\n+ */\n+public interface Connector {\n \n     /**\n      * Create user on a connector instance.\n@@ -185,8 +188,12 @@ ConnectorObject getObject(PropagationMode propagationMode,\n      */\n     ConnInstance getActiveConnInstance();\n \n+    /**\n+     * Build options for requesting all mapped connector attributes.\n+     *\n+     * @param mapItems mapping items\n+     * @return options for requesting all mapped connector attributes\n+     * @see OperationOptions\n+     */\n     OperationOptions getOperationOptions(Collection<AbstractMappingItem> mapItems);\n-\n-    @Override\n-    String toString();\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/propagation/SyncopeConnector.java"},{"sha":"7f1bbe853bcf5caf3138226ba6395053efbd2902","filename":"core/src/main/java/org/apache/syncope/core/propagation/ConnectorFactory.java","status":"modified","additions":28,"deletions":9,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FConnectorFactory.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -19,28 +19,47 @@\n package org.apache.syncope.core.propagation;\n \n import java.util.Set;\n-\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.springframework.beans.BeansException;\n \n+/**\n+ * Entry point for creating and destroying connectors for external resources.\n+ *\n+ * @see org.apache.syncope.core.propagation.Connector\n+ */\n public interface ConnectorFactory {\n \n-    SyncopeConnector createConnectorBean(ConnInstance connInstance, Set<ConnConfProperty> configuration)\n-            throws NotFoundException;\n+    /**\n+     * Create connector from given connector instance and configuration properties.\n+     *\n+     * @param connInstance connector instance\n+     * @param configuration configuration properties\n+     * @return connector\n+     */\n+    Connector createConnector(ConnInstance connInstance, Set<ConnConfProperty> configuration);\n \n     /**\n-     * Get a live connector bean that is registered with the given resource.\n+     * Get existing connector for the given resource.\n      *\n      * @param resource the resource.\n      * @return live connector bran for given resource\n      * @throws BeansException if there is any problem with Spring\n-     * @throws NotFoundException if the connector is not registered in the context\n      */\n-    SyncopeConnector getConnector(ExternalResource resource)\n-            throws BeansException, NotFoundException;\n+    Connector getConnector(ExternalResource resource) throws BeansException;\n \n+    /**\n+     * Load connectors for all existing resources.\n+     *\n+     * @see ExternalResource\n+     */\n     void load();\n-}\n\\ No newline at end of file\n+\n+    /**\n+     * Unload connectors for all existing resources.\n+     *\n+     * @see ExternalResource\n+     */\n+    void unload();\n+}"},{"sha":"5a64162601d074ebd7bf7bb0890f340d2c349bb8","filename":"core/src/main/java/org/apache/syncope/core/propagation/TimeoutException.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FTimeoutException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FTimeoutException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FTimeoutException.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -18,17 +18,16 @@\n  */\n package org.apache.syncope.core.propagation;\n \n-/**\n- *\n- * @author fabio\n- */\n public class TimeoutException extends RuntimeException {\n \n+    private static final long serialVersionUID = -6577300049818278323L;\n+\n     /**\n      * Creates a new instance of\n      * <code>TimeoutException</code> without detail message.\n      */\n     public TimeoutException() {\n+        super();\n     }\n \n     /**\n@@ -37,7 +36,7 @@ public TimeoutException() {\n      *\n      * @param msg the detail message.\n      */\n-    public TimeoutException(String msg) {\n+    public TimeoutException(final String msg) {\n         super(msg);\n     }\n }"},{"sha":"072c8be76d6a9c3a9dfcfaadd2e7f90f3ddb8325","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/AbstractPropagationTaskExecutor.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FAbstractPropagationTaskExecutor.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -43,7 +43,7 @@\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationHandler;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.TimeoutException;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n@@ -122,7 +122,7 @@ protected PropagationActions getPropagationActions(final ExternalResource resour\n     }\n \n     protected void createOrUpdate(final PropagationTask task, final ConnectorObject beforeObj,\n-            final SyncopeConnector connector, final Set<String> propagationAttempted) {\n+            final Connector connector, final Set<String> propagationAttempted) {\n \n         // set of attributes to be propagated\n         final Set<Attribute> attributes = new HashSet<Attribute>(task.getAttributes());\n@@ -230,7 +230,7 @@ protected AbstractAttributable getSubject(final PropagationTask task) {\n     }\n \n     protected void delete(final PropagationTask task, final ConnectorObject beforeObj,\n-            final SyncopeConnector connector, final Set<String> propagationAttempted) {\n+            final Connector connector, final Set<String> propagationAttempted) {\n \n         if (beforeObj == null) {\n             LOG.debug(\"{} not found on external resource: ignoring delete\", task.getAccountId());\n@@ -281,7 +281,7 @@ public TaskExec execute(final PropagationTask task, final PropagationHandler han\n         ConnectorObject beforeObj = null;\n         ConnectorObject afterObj = null;\n \n-        SyncopeConnector connector = null;\n+        Connector connector = null;\n         try {\n             connector = connLoader.getConnector(task.getResource());\n \n@@ -433,7 +433,7 @@ protected boolean hasToBeregistered(final PropagationTask task, final TaskExec e\n      * @param latest 'FALSE' to retrieve object using old accountId if not null.\n      * @return remote connector object.\n      */\n-    protected ConnectorObject getRemoteObject(final PropagationTask task, final SyncopeConnector connector,\n+    protected ConnectorObject getRemoteObject(final PropagationTask task, final Connector connector,\n             final boolean latest) {\n \n         String accountId = latest || task.getOldAccountId() == null"},{"sha":"23fddd3ef4908438e220d93922304c38073618ec","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/ConnectorFacadeProxy.java","status":"modified","additions":16,"deletions":70,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FConnectorFacadeProxy.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -35,9 +35,9 @@\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.TimeoutException;\n-import org.apache.syncope.core.util.ConnBundleManager;\n+import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.api.APIConfiguration;\n@@ -69,7 +69,7 @@\n  * Intercept calls to ConnectorFacade's methods and check if the corresponding connector instance has been configured to\n  * allow every single operation: if not, simply do nothing.\n  */\n-public class ConnectorFacadeProxy implements SyncopeConnector {\n+public class ConnectorFacadeProxy implements Connector {\n \n     /**\n      * Logger.\n@@ -82,9 +82,7 @@ public class ConnectorFacadeProxy implements SyncopeConnector {\n     private final ConnectorFacade connector;\n \n     /**\n-     * Active Connector instance.\n-     *\n-     * @see ConnInstance\n+     * Active connector instance.\n      */\n     private final ConnInstance activeConnInstance;\n \n@@ -95,32 +93,29 @@ public class ConnectorFacadeProxy implements SyncopeConnector {\n      * Use the passed connector instance to build a ConnectorFacade that will be used to make all wrapped calls.\n      *\n      * @param connInstance the connector instance configuration\n-     * @param connBundleManager connector bundle loader\n-     * @throws NotFoundException when not able to fetch all the required data\n      * @see ConnectorKey\n      * @see ConnectorInfo\n      * @see APIConfiguration\n      * @see ConfigurationProperties\n      * @see ConnectorFacade\n      */\n-    public ConnectorFacadeProxy(final ConnInstance connInstance, final ConnBundleManager connBundleManager)\n-            throws NotFoundException {\n-\n+    public ConnectorFacadeProxy(final ConnInstance connInstance) {\n         this.activeConnInstance = connInstance;\n \n         // specify a connector.\n-        ConnectorKey key = new ConnectorKey(connInstance.getBundleName(), connInstance.getVersion(), connInstance.\n-                getConnectorName());\n+        ConnectorKey key = new ConnectorKey(\n+                connInstance.getBundleName(), connInstance.getVersion(), connInstance.getConnectorName());\n \n         if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"\\nBundle name: \" + key.getBundleName() + \"\\nBundle version: \" + key.getBundleVersion()\n+            LOG.debug(\"Bundle name: \" + key.getBundleName()\n+                    + \"\\nBundle version: \" + key.getBundleVersion()\n                     + \"\\nBundle class: \" + key.getConnectorName());\n         }\n \n         // get the specified connector.\n         ConnectorInfo info;\n         try {\n-            info = connBundleManager.getConnectorManager().findConnectorInfo(key);\n+            info = ConnIdBundleManager.getConnManager().findConnectorInfo(key);\n             if (info == null) {\n                 throw new NotFoundException(\"Connector Info for key \" + key);\n             }\n@@ -143,8 +138,8 @@ public ConnectorFacadeProxy(final ConnInstance connInstance, final ConnBundleMan\n         // Print out what the properties are (not necessary)\n         if (LOG.isDebugEnabled()) {\n             for (String propName : properties.getPropertyNames()) {\n-                LOG.debug(\"\\nProperty Name: {}\\nProperty Type: {}\", properties.getProperty(propName).getName(),\n-                        properties.getProperty(propName).getType());\n+                LOG.debug(\"Property Name: {}\\nProperty Type: {}\",\n+                        properties.getProperty(propName).getName(), properties.getProperty(propName).getType());\n             }\n         }\n \n@@ -166,9 +161,6 @@ public ConnectorFacadeProxy(final ConnInstance connInstance, final ConnBundleMan\n         connector.validate();\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#create(PropagationMode, ObjectClass, Set, OperationOptions, Set)\n-     */\n     @Override\n     public Uid create(final PropagationMode propagationMode, final ObjectClass objectClass, final Set<Attribute> attrs,\n             final OperationOptions options, final Set<String> propagationAttempted) {\n@@ -203,9 +195,6 @@ public Uid create(final PropagationMode propagationMode, final ObjectClass objec\n         return result;\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#update(PropagationMode, ObjectClass, Uid, Set, OperationOptions, Set)\n-     */\n     @Override\n     public Uid update(final PropagationMode propagationMode, final ObjectClass objectClass, final Uid uid,\n             final Set<Attribute> attrs, final OperationOptions options, final Set<String> propagationAttempted) {\n@@ -242,9 +231,6 @@ public Uid update(final PropagationMode propagationMode, final ObjectClass objec\n         return result;\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#delete(PropagationMode, ObjectClass, Uid, OperationOptions, Set)\n-     */\n     @Override\n     public void delete(final PropagationMode propagationMode, final ObjectClass objectClass, final Uid uid,\n             final OperationOptions options, final Set<String> propagationAttempted) {\n@@ -276,9 +262,6 @@ public void delete(final PropagationMode propagationMode, final ObjectClass obje\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#sync(ObjectClass, SyncToken, SyncResultsHandler, OperationOptions)\n-     */\n     @Override\n     public void sync(final ObjectClass objectClass, final SyncToken token, final SyncResultsHandler handler,\n             final OperationOptions options) {\n@@ -291,9 +274,6 @@ public void sync(final ObjectClass objectClass, final SyncToken token, final Syn\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getLatestSyncToken(ObjectClass)\n-     */\n     @Override\n     public SyncToken getLatestSyncToken(final ObjectClass objectClass) {\n         SyncToken result = null;\n@@ -322,17 +302,11 @@ public SyncToken getLatestSyncToken(final ObjectClass objectClass) {\n         return result;\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getObject(ObjectClass, Uid, OperationOptions)\n-     */\n     @Override\n     public ConnectorObject getObject(final ObjectClass objectClass, final Uid uid, final OperationOptions options) {\n         return getObject(null, null, objectClass, uid, options);\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getObject(PropagationMode, ResourceOperation, ObjectClass, Uid, OperationOptions)\n-     */\n     @Override\n     public ConnectorObject getObject(final PropagationMode propagationMode, final ResourceOperation operationType,\n             final ObjectClass objectClass, final Uid uid, final OperationOptions options) {\n@@ -388,12 +362,9 @@ public ConnectorObject getObject(final PropagationMode propagationMode, final Re\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#search(ObjectClass, filter.Filter, OperationOptions)\n-     */\n     @Override\n-    public List<ConnectorObject> search(\n-            final ObjectClass objectClass, final Filter filter, final OperationOptions options) {\n+    public List<ConnectorObject> search(final ObjectClass objectClass, final Filter filter,\n+            final OperationOptions options) {\n \n         final List<ConnectorObject> result = new ArrayList<ConnectorObject>();\n \n@@ -408,9 +379,6 @@ public boolean handle(final ConnectorObject obj) {\n         return result;\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getAllObjects(ObjectClass, SyncResultsHandler, OperationOptions)\n-     */\n     @Override\n     public void getAllObjects(\n             final ObjectClass objectClass, final SyncResultsHandler handler, final OperationOptions options) {\n@@ -430,12 +398,10 @@ public boolean handle(final ConnectorObject obj) {\n         }, options);\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getObjectAttribute(ObjectClass, Uid, OperationOptions, String)\n-     */\n     @Override\n     public Attribute getObjectAttribute(final ObjectClass objectClass, final Uid uid, final OperationOptions options,\n             final String attributeName) {\n+\n         final Future<Attribute> future = asyncFacade.getObjectAttribute(connector, objectClass, uid, options,\n                 attributeName);\n         try {\n@@ -453,12 +419,10 @@ public Attribute getObjectAttribute(final ObjectClass objectClass, final Uid uid\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getObjectAttributes(ObjectClass, Uid, OperationOptions)\n-     */\n     @Override\n     public Set<Attribute> getObjectAttributes(final ObjectClass objectClass, final Uid uid,\n             final OperationOptions options) {\n+\n         final Future<Set<Attribute>> future = asyncFacade.getObjectAttributes(connector, objectClass, uid, options);\n         try {\n             return future.get(activeConnInstance.getConnRequestTimeout(), TimeUnit.SECONDS);\n@@ -475,9 +439,6 @@ public Set<Attribute> getObjectAttributes(final ObjectClass objectClass, final U\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getSchema(boolean)\n-     */\n     @Override\n     public Set<String> getSchema(final boolean showall) {\n         final Future<Set<String>> future = asyncFacade.getSchema(connector, showall);\n@@ -496,9 +457,6 @@ public Set<String> getSchema(final boolean showall) {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#validate()\n-     */\n     @Override\n     public void validate() {\n         final Future<String> future = asyncFacade.test(connector);\n@@ -517,9 +475,6 @@ public void validate() {\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#test()\n-     */\n     @Override\n     public void test() {\n         final Future<String> future = asyncFacade.test(connector);\n@@ -553,17 +508,11 @@ private void search(\n         }\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getActiveConnInstance()\n-     */\n     @Override\n     public ConnInstance getActiveConnInstance() {\n         return activeConnInstance;\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#getOperationOptions(Collection)\n-     */\n     @Override\n     public OperationOptions getOperationOptions(final Collection<AbstractMappingItem> mapItems) {\n         // -------------------------------------\n@@ -625,9 +574,6 @@ private Object getPropertyValue(final String propType, final List<?> values) {\n         return value;\n     }\n \n-    /* (non-Javadoc)\n-     * @see SyncopeConnector#toString()\n-     */\n     @Override\n     public String toString() {\n         return \"ConnectorFacadeProxy{\""},{"sha":"e7f17e5264de22f87d20fc66123ba235c63b0fea","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":62,"deletions":108,"changes":170,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -20,13 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Locale;\n import java.util.Set;\n-\n import javax.servlet.http.HttpServletResponse;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n@@ -42,13 +39,12 @@\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n-import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n import org.apache.syncope.core.rest.data.ConnInstanceDataBinder;\n-import org.apache.syncope.core.util.ConnBundleManager;\n+import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConnectorInfo;\n@@ -84,29 +80,24 @@ public class ConnInstanceController extends AbstractController {\n     private ConnInstanceDataBinder binder;\n \n     @Autowired\n-    private ConnBundleManager bundleManager;\n-\n-    @Autowired\n-    private ConnectorFactory connLoader;\n+    private ConnectorFactory connFactory;\n \n     @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/create\")\n-    public ConnInstanceTO create(final HttpServletResponse response, @RequestBody final ConnInstanceTO connectorTO)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n-\n-        LOG.debug(\"ConnInstance create called with configuration {}\", connectorTO);\n-\n-        ConnInstance connInstance = binder.getConnInstance(connectorTO);\n+    public ConnInstanceTO create(final HttpServletResponse response, @RequestBody final ConnInstanceTO connInstanceTO) {\n+        LOG.debug(\"ConnInstance create called with configuration {}\", connInstanceTO);\n \n+        ConnInstance connInstance = binder.getConnInstance(connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n             auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.success,\n                     \"Successfully created connector instance: \" + connInstance.getDisplayName());\n         } catch (Exception e) {\n             auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n-                    \"Could not create connector instance: \" + connectorTO.getDisplayName(), e);\n+                    \"Could not create connector instance: \" + connInstanceTO.getDisplayName(), e);\n \n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException invalidConnInstance = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidConnInstance);\n@@ -122,22 +113,20 @@ public ConnInstanceTO create(final HttpServletResponse response, @RequestBody fi\n \n     @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/update\")\n-    public ConnInstanceTO update(@RequestBody final ConnInstanceTO connectorTO)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n-\n-        LOG.debug(\"Connector update called with configuration {}\", connectorTO);\n-\n-        ConnInstance connInstance = binder.updateConnInstance(connectorTO.getId(), connectorTO);\n+    public ConnInstanceTO update(@RequestBody final ConnInstanceTO connInstanceTO) {\n+        LOG.debug(\"Connector update called with configuration {}\", connInstanceTO);\n \n+        ConnInstance connInstance = binder.updateConnInstance(connInstanceTO.getId(), connInstanceTO);\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n             auditManager.audit(Category.connector, ConnectorSubCategory.update, Result.success,\n                     \"Successfully update connector instance: \" + connInstance.getDisplayName());\n         } catch (Exception e) {\n             auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n-                    \"Could not update connector instance: \" + connectorTO.getDisplayName(), e);\n+                    \"Could not update connector instance: \" + connInstanceTO.getDisplayName(), e);\n \n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException invalidConnInstance = new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidConnInstance);\n@@ -151,17 +140,17 @@ public ConnInstanceTO update(@RequestBody final ConnInstanceTO connectorTO)\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{connectorId}\")\n-    public ConnInstanceTO delete(@PathVariable(\"connectorId\") Long connectorId)\n-            throws NotFoundException {\n+    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{connInstanceId}\")\n+    public ConnInstanceTO delete(@PathVariable(\"connInstanceId\") final Long connInstanceId) {\n \n-        ConnInstance connInstance = connInstanceDAO.find(connectorId);\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connectorId + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n         }\n \n         if (!connInstance.getResources().isEmpty()) {\n-            SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException invalidConnInstance = new SyncopeClientException(\n                     SyncopeClientExceptionType.ExistingResource);\n@@ -175,9 +164,9 @@ public ConnInstanceTO delete(@PathVariable(\"connectorId\") Long connectorId)\n \n         ConnInstanceTO connToDelete = binder.getConnInstanceTO(connInstance);\n \n-        connInstanceDAO.delete(connectorId);\n+        connInstanceDAO.delete(connInstanceId);\n         auditManager.audit(Category.connector, ConnectorSubCategory.delete, Result.success,\n-                \"Successfully deleted connector instance: \" + connectorId);\n+                \"Successfully deleted connector instance: \" + connInstanceId);\n \n         return connToDelete;\n     }\n@@ -211,14 +200,12 @@ public List<ConnInstanceTO> list(@RequestParam(value = \"lang\", required = false)\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{connectorId}\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/read/{connInstanceId}\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO read(@PathVariable(\"connectorId\") Long connectorId)\n-            throws NotFoundException {\n-\n-        ConnInstance connInstance = connInstanceDAO.find(connectorId);\n+    public ConnInstanceTO read(@PathVariable(\"connInstanceId\") final Long connInstanceId) {\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connectorId + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n         }\n \n         auditManager.audit(Category.connector, ConnectorSubCategory.read, Result.success,\n@@ -230,16 +217,14 @@ public ConnInstanceTO read(@PathVariable(\"connectorId\") Long connectorId)\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/bundle/list\")\n     @Transactional(readOnly = true)\n-    public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = false) final String lang)\n-            throws NotFoundException, MissingConfKeyException {\n-\n+    public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = false) final String lang) {\n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n             CurrentLocale.set(new Locale(lang));\n         }\n \n-        ConnectorInfoManager manager = bundleManager.getConnectorManager();\n+        ConnectorInfoManager manager = ConnIdBundleManager.getConnManager();\n \n         List<ConnectorInfo> bundles = manager.getConnectorInfos();\n \n@@ -259,14 +244,14 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n \n                 ConnectorKey key = bundle.getConnectorKey();\n \n-                LOG.debug(\"\\nBundle name: {}\" + \"\\nBundle version: {}\" + \"\\nBundle class: {}\",\n+                LOG.debug(\"Bundle name: {}\\nBundle version: {}\\nBundle class: {}\",\n                         key.getBundleName(), key.getBundleVersion(), key.getConnectorName());\n \n                 connectorBundleTO.setBundleName(key.getBundleName());\n                 connectorBundleTO.setConnectorName(key.getConnectorName());\n                 connectorBundleTO.setVersion(key.getBundleVersion());\n \n-                ConfigurationProperties properties = bundleManager.getConfigurationProperties(bundle);\n+                ConfigurationProperties properties = ConnIdBundleManager.getConfProps(bundle);\n \n                 for (String propName : properties.getPropertyNames()) {\n                     ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n@@ -313,25 +298,23 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/schema/list\")\n     @Transactional(readOnly = true)\n-    public List<String> getSchemaNames(final HttpServletResponse response,\n-            @RequestBody final ConnInstanceTO connectorTO,\n-            @RequestParam(required = false, value = \"showall\", defaultValue = \"false\") final boolean showall)\n-            throws NotFoundException {\n+    public List<String> getSchemaNames(@RequestBody final ConnInstanceTO connInstanceTO,\n+            @RequestParam(required = false, value = \"showall\", defaultValue = \"false\") final boolean showall) {\n \n-        final ConnInstance connInstance = connInstanceDAO.find(connectorTO.getId());\n+        final ConnInstance connInstance = connInstanceDAO.find(connInstanceTO.getId());\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connectorTO.getId() + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connInstanceTO.getId() + \"'\");\n         }\n \n         // consider the possibility to receive overridden properties only\n-        final Set<ConnConfProperty> conf = mergeConnConfProperties(connectorTO.getConfiguration(),\n+        final Set<ConnConfProperty> conf = binder.mergeConnConfProperties(connInstanceTO.getConfiguration(),\n                 connInstance.getConfiguration());\n \n         // We cannot use Spring bean because this method could be used during resource definition or modification:\n         // bean couldn't exist or couldn't be updated.\n         // This is the reason why we should take a \"not mature\" connector facade proxy to ask for schema names.\n-        final List<String> result = new ArrayList<String>(connLoader.createConnectorBean(connInstance, conf).\n-                getSchema(showall));\n+        final List<String> result =\n+                new ArrayList<String>(connFactory.createConnector(connInstance, conf).getSchema(showall));\n         Collections.sort(result);\n \n         auditManager.audit(Category.connector, ConnectorSubCategory.getSchemaNames, Result.success,\n@@ -342,14 +325,12 @@ public List<String> getSchemaNames(final HttpServletResponse response,\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{connectorId}/configurationProperty/list\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{connInstanceId}/configurationProperty/list\")\n     @Transactional(readOnly = true)\n-    public List<ConnConfProperty> getConfigurationProperties(@PathVariable(\"connectorId\") final Long connectorId)\n-            throws NotFoundException {\n-\n-        final ConnInstance connInstance = connInstanceDAO.find(connectorId);\n+    public List<ConnConfProperty> getConfigurationProperties(@PathVariable(\"connInstanceId\") final Long connInstanceId) {\n+        final ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n         if (connInstance == null) {\n-            throw new NotFoundException(\"Connector '\" + connectorId + \"'\");\n+            throw new NotFoundException(\"Connector '\" + connInstanceId + \"'\");\n         }\n \n         List<ConnConfProperty> result = new ArrayList<ConnConfProperty>(connInstance.getConfiguration());\n@@ -364,22 +345,20 @@ public List<ConnConfProperty> getConfigurationProperties(@PathVariable(\"connecto\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.POST, value = \"/check\")\n     @Transactional(readOnly = true)\n-    public ModelAndView check(final HttpServletResponse response, @RequestBody final ConnInstanceTO connectorTO)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n-\n-        final SyncopeConnector connector =\n-                connLoader.createConnectorBean(binder.getConnInstance(connectorTO), connectorTO.getConfiguration());\n+    public ModelAndView check(@RequestBody final ConnInstanceTO connInstanceTO) {\n+        final Connector connector =\n+                connFactory.createConnector(binder.getConnInstance(connInstanceTO), connInstanceTO.getConfiguration());\n \n         boolean result;\n         try {\n             connector.test();\n             result = true;\n \n             auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.success,\n-                    \"Successfully checked connector: \" + connectorTO);\n+                    \"Successfully checked connector: \" + connInstanceTO);\n         } catch (Exception ex) {\n             auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.failure,\n-                    \"Unsuccessful check for connector: \" + connectorTO, ex);\n+                    \"Unsuccessful check for connector: \" + connInstanceTO, ex);\n \n             LOG.error(\"Test connection failure {}\", ex);\n             result = false;\n@@ -388,56 +367,31 @@ public ModelAndView check(final HttpServletResponse response, @RequestBody final\n         return new ModelAndView().addObject(result);\n     }\n \n-    /**\n-     * Merge connector configuration properties avoiding repetition but giving priority to primary set.\n-     *\n-     * @param primary primary set.\n-     * @param secondary secondary set.\n-     * @return merged set.\n-     */\n-    private Set<ConnConfProperty> mergeConnConfProperties(final Set<ConnConfProperty> primary,\n-            final Set<ConnConfProperty> secondary) {\n-\n-        final Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n-\n-        // to be used to control managed prop (needed by overridden mechanism)\n-        final Set<String> propertyNames = new HashSet<String>();\n-\n-        // get overridden connector configuration properties\n-        for (ConnConfProperty prop : primary) {\n-            if (!propertyNames.contains(prop.getSchema().getName())) {\n-                conf.add(prop);\n-                propertyNames.add(prop.getSchema().getName());\n-            }\n-        }\n-\n-        // get connector configuration properties\n-        for (ConnConfProperty prop : secondary) {\n-            if (!propertyNames.contains(prop.getSchema().getName())) {\n-                conf.add(prop);\n-                propertyNames.add(prop.getSchema().getName());\n-            }\n-        }\n-\n-        return conf;\n-    }\n-\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/connectorBean\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{resourceName}/readByResource\")\n     @Transactional(readOnly = true)\n-    public ConnInstanceTO readConnectorBean(@PathVariable(\"resourceName\") String resourceName)\n-            throws NotFoundException {\n-\n+    public ConnInstanceTO readByResource(@PathVariable(\"resourceName\") final String resourceName) {\n         ExternalResource resource = resourceDAO.find(resourceName);\n         if (resource == null) {\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n-        final SyncopeConnector connector = connLoader.getConnector(resource);\n+        final Connector connector = connFactory.getConnector(resource);\n \n         auditManager.audit(Category.connector, ConnectorSubCategory.readConnectorBean, Result.success,\n                 \"Successfully read connector for resource: \" + resourceName);\n \n         return binder.getConnInstanceTO(connector.getActiveConnInstance());\n     }\n-}\n+\n+    @PreAuthorize(\"hasRole('CONNECTOR_RELOAD')\")\n+    @RequestMapping(method = RequestMethod.PUT, value = \"/reload\")\n+    @Transactional(readOnly = true)\n+    public void reload() {\n+        connFactory.unload();\n+        connFactory.load();\n+\n+        auditManager.audit(Category.connector, ConnectorSubCategory.reload, Result.success,\n+                \"Successfully reloaded all connector bundles and instances\");\n+    }\n+}\n\\ No newline at end of file"},{"sha":"198206b97a8713f7063be9f7870a7a36cb30f6f6","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.rest.data.ResourceDataBinder;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -215,7 +215,7 @@ public ConnObjectTO getObject(@PathVariable(\"resourceName\") final String resourc\n         AttributableUtil attrUtil = AttributableUtil.getInstance(type);\n         ObjectClass objectClass = AttributableType.USER == type ? ObjectClass.ACCOUNT : ObjectClass.GROUP;\n \n-        final SyncopeConnector connector = connLoader.getConnector(resource);\n+        final Connector connector = connLoader.getConnector(resource);\n \n         final ConnectorObject connectorObject = connector.getObject(objectClass, new Uid(objectId),\n                 connector.getOperationOptions(attrUtil.getMappingItems(resource, MappingPurpose.BOTH)));\n@@ -245,7 +245,7 @@ public ModelAndView check(final HttpServletResponse response, @RequestBody final\n \n         final ConnInstance connInstance = binder.getConnInstance(resourceTO);\n \n-        final SyncopeConnector connector = connLoader.createConnectorBean(connInstance, connInstance.getConfiguration());\n+        final Connector connector = connLoader.createConnector(connInstance, connInstance.getConfiguration());\n \n         boolean result;\n         try {"},{"sha":"47403815ab81eb09e8e79c2f6b120e85a94327da","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ConnInstanceDataBinder.java","status":"modified","additions":51,"deletions":27,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FConnInstanceDataBinder.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -18,8 +18,9 @@\n  */\n package org.apache.syncope.core.rest.data;\n \n+import java.util.HashSet;\n import java.util.Map;\n-\n+import java.util.Set;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.types.ConnConfPropSchema;\n import org.apache.syncope.common.types.ConnConfProperty;\n@@ -28,8 +29,7 @@\n import org.apache.syncope.common.validation.SyncopeClientException;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.dao.ConnInstanceDAO;\n-import org.apache.syncope.core.persistence.dao.NotFoundException;\n-import org.apache.syncope.core.util.ConnBundleManager;\n+import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.impl.api.ConfigurationPropertyImpl;\n import org.springframework.beans.BeanUtils;\n@@ -43,14 +43,43 @@ public class ConnInstanceDataBinder {\n     private static final String[] IGNORE_PROPERTIES = {\"id\", \"resources\"};\n \n     @Autowired\n-    private ConnInstanceDAO connectorInstanceDAO;\n+    private ConnInstanceDAO connInstanceDAO;\n+\n+    /**\n+     * Merge connector configuration properties avoiding repetition but giving priority to primary set.\n+     *\n+     * @param primary primary set.\n+     * @param secondary secondary set.\n+     * @return merged set.\n+     */\n+    public Set<ConnConfProperty> mergeConnConfProperties(final Set<ConnConfProperty> primary,\n+            final Set<ConnConfProperty> secondary) {\n+\n+        final Set<ConnConfProperty> conf = new HashSet<ConnConfProperty>();\n+\n+        // to be used to control managed prop (needed by overridden mechanism)\n+        final Set<String> propertyNames = new HashSet<String>();\n+\n+        // get overridden connector configuration properties\n+        for (ConnConfProperty prop : primary) {\n+            if (!propertyNames.contains(prop.getSchema().getName())) {\n+                conf.add(prop);\n+                propertyNames.add(prop.getSchema().getName());\n+            }\n+        }\n \n-    @Autowired\n-    private ConnBundleManager connBundleManager;\n+        // get connector configuration properties\n+        for (ConnConfProperty prop : secondary) {\n+            if (!propertyNames.contains(prop.getSchema().getName())) {\n+                conf.add(prop);\n+                propertyNames.add(prop.getSchema().getName());\n+            }\n+        }\n \n-    public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO)\n-            throws SyncopeClientCompositeErrorException {\n+        return conf;\n+    }\n \n+    public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO) {\n         SyncopeClientCompositeErrorException scee = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n         SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n@@ -90,11 +119,8 @@ public ConnInstance getConnInstance(final ConnInstanceTO connInstanceTO)\n         return connectorInstance;\n     }\n \n-    public ConnInstance updateConnInstance(final long connInstanceId, final ConnInstanceTO connInstanceTO)\n-            throws SyncopeClientCompositeErrorException {\n-\n-        SyncopeClientCompositeErrorException compositeErrorException = new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST);\n+    public ConnInstance updateConnInstance(final long connInstanceId, final ConnInstanceTO connInstanceTO) {\n+        SyncopeClientCompositeErrorException scce = new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n         SyncopeClientException requiredValuesMissing = new SyncopeClientException(\n                 SyncopeClientExceptionType.RequiredValuesMissing);\n@@ -103,7 +129,7 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n             requiredValuesMissing.addElement(\"connector id\");\n         }\n \n-        ConnInstance connInstance = connectorInstanceDAO.find(connInstanceId);\n+        ConnInstance connInstance = connInstanceDAO.find(connInstanceId);\n \n         if (connInstanceTO.getBundleName() != null) {\n             connInstance.setBundleName(connInstanceTO.getBundleName());\n@@ -124,34 +150,32 @@ public ConnInstance updateConnInstance(final long connInstanceId, final ConnInst\n         if (connInstanceTO.getDisplayName() != null) {\n             connInstance.setDisplayName(connInstanceTO.getDisplayName());\n         }\n-        \n+\n         if (connInstanceTO.getConnRequestTimeout() != null) {\n             connInstance.setConnRequestTimeout(connInstanceTO.getConnRequestTimeout());\n         }\n \n         connInstance.setCapabilities(connInstanceTO.getCapabilities());\n \n         if (!requiredValuesMissing.isEmpty()) {\n-            compositeErrorException.addException(requiredValuesMissing);\n+            scce.addException(requiredValuesMissing);\n         }\n \n         // Throw composite exception if there is at least one element set\n         // in the composing exceptions\n-        if (compositeErrorException.hasExceptions()) {\n-            throw compositeErrorException;\n+        if (scce.hasExceptions()) {\n+            throw scce;\n         }\n \n         return connInstance;\n     }\n \n-    public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n-            throws NotFoundException {\n-\n+    public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance) {\n         ConnInstanceTO connInstanceTO = new ConnInstanceTO();\n-        connInstanceTO.setId(connInstance.getId() != null ? connInstance.getId().longValue() : 0L);\n+        connInstanceTO.setId(connInstance.getId() == null ? 0L : connInstance.getId().longValue());\n \n         // retrieve the ConfigurationProperties.\n-        ConfigurationProperties properties = connBundleManager.getConfigurationProperties(\n+        ConfigurationProperties properties = ConnIdBundleManager.getConfProps(\n                 connInstance.getBundleName(), connInstance.getVersion(), connInstance.getConnectorName());\n \n         BeanUtils.copyProperties(connInstance, connInstanceTO, IGNORE_PROPERTIES);\n@@ -162,7 +186,10 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n             ConfigurationPropertyImpl configurationProperty =\n                     (ConfigurationPropertyImpl) properties.getProperty(propName);\n \n-            if (!connInstanceToConfMap.containsKey(propName)) {\n+            if (connInstanceToConfMap.containsKey(propName)) {\n+                connInstanceToConfMap.get(propName).getSchema().setDisplayName(\n+                        configurationProperty.getDisplayName(propName));\n+            } else {\n                 ConnConfPropSchema connConfPropSchema = new ConnConfPropSchema();\n                 connConfPropSchema.setName(configurationProperty.getName());\n                 connConfPropSchema.setDisplayName(configurationProperty.getDisplayName(propName));\n@@ -175,9 +202,6 @@ public ConnInstanceTO getConnInstanceTO(final ConnInstance connInstance)\n                 ConnConfProperty property = new ConnConfProperty();\n                 property.setSchema(connConfPropSchema);\n                 connInstanceTO.addConfiguration(property);\n-            } else {\n-                connInstanceToConfMap.get(propName).getSchema().setDisplayName(\n-                        configurationProperty.getDisplayName(propName));\n             }\n         }\n         return connInstanceTO;"},{"sha":"a0bafe9df9033f39b56f85c8bc6178c97768f11d","filename":"core/src/main/java/org/apache/syncope/core/services/ConnectorServiceImpl.java","status":"modified","additions":27,"deletions":25,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FConnectorServiceImpl.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -21,10 +21,8 @@\n import java.net.URI;\r\n import java.util.ArrayList;\r\n import java.util.List;\r\n-\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.core.UriInfo;\r\n-\r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.ConnectorService;\r\n import org.apache.syncope.common.to.ConnBundleTO;\r\n@@ -39,37 +37,37 @@\n public class ConnectorServiceImpl implements ConnectorService, ContextAware {\r\n \r\n     @Autowired\r\n-    private ConnInstanceController connectorController;\r\n+    private ConnInstanceController connInstanceController;\r\n \r\n     private UriInfo uriInfo;\r\n \r\n     @Override\r\n-    public Response create(final ConnInstanceTO connectorTO) {\r\n-        ConnInstanceTO connector = connectorController.create(new DummyHTTPServletResponse(), connectorTO);\r\n-        URI location = uriInfo.getAbsolutePathBuilder().path(connector.getId() + \"\").build();\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, connector.getId()).build();\r\n+    public Response create(final ConnInstanceTO connInstanceTO) {\r\n+        ConnInstanceTO connInstance = connInstanceController.create(new DummyHTTPServletResponse(), connInstanceTO);\r\n+        URI location = uriInfo.getAbsolutePathBuilder().path(connInstance.getId() + \"\").build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, connInstance.getId()).build();\r\n     }\r\n \r\n     @Override\r\n-    public void delete(final Long connectorId) {\r\n-        connectorController.delete(connectorId);\r\n+    public void delete(final Long connInstanceId) {\r\n+        connInstanceController.delete(connInstanceId);\r\n     }\r\n \r\n     @Override\r\n     public List<ConnBundleTO> getBundles(final String lang) {\r\n-        return connectorController.getBundles(lang);\r\n+        return connInstanceController.getBundles(lang);\r\n     }\r\n \r\n     @Override\r\n-    public List<ConnConfProperty> getConfigurationProperties(final Long connectorId) {\r\n-        return connectorController.getConfigurationProperties(connectorId);\r\n+    public List<ConnConfProperty> getConfigurationProperties(final Long connInstanceId) {\r\n+        return connInstanceController.getConfigurationProperties(connInstanceId);\r\n     }\r\n \r\n     @Override\r\n-    public List<SchemaTO> getSchemaNames(final Long connectorId, final ConnInstanceTO connectorTO,\r\n+    public List<SchemaTO> getSchemaNames(final Long connInstanceId, final ConnInstanceTO connInstanceTO,\r\n             final boolean showall) {\r\n-        List<String> schemaNames = connectorController.getSchemaNames(new DummyHTTPServletResponse(), connectorTO,\r\n-                showall);\r\n+\r\n+        List<String> schemaNames = connInstanceController.getSchemaNames(connInstanceTO, showall);\r\n         List<SchemaTO> schemas = new ArrayList<SchemaTO>();\r\n         for (String name : schemaNames) {\r\n             SchemaTO schemaTO = new SchemaTO();\r\n@@ -81,32 +79,36 @@ public List<SchemaTO> getSchemaNames(final Long connectorId, final ConnInstanceT\n \r\n     @Override\r\n     public List<ConnInstanceTO> list(final String lang) {\r\n-        return connectorController.list(lang);\r\n+        return connInstanceController.list(lang);\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO read(final Long connectorId) {\r\n-        return connectorController.read(connectorId);\r\n+    public ConnInstanceTO read(final Long connInstanceId) {\r\n+        return connInstanceController.read(connInstanceId);\r\n     }\r\n \r\n     @Override\r\n-    public ConnInstanceTO readConnectorBean(final String resourceName) {\r\n-        return connectorController.readConnectorBean(resourceName);\r\n+    public ConnInstanceTO readByResource(final String resourceName) {\r\n+        return connInstanceController.readByResource(resourceName);\r\n     }\r\n \r\n     @Override\r\n-    public void update(final Long connectorId, final ConnInstanceTO connectorTO) {\r\n-        connectorController.update(connectorTO);\r\n+    public void update(final Long connInstanceId, final ConnInstanceTO connInstanceTO) {\r\n+        connInstanceController.update(connInstanceTO);\r\n     }\r\n \r\n     @Override\r\n-    public boolean check(final ConnInstanceTO connectorTO) {\r\n-        return (Boolean) connectorController.check(new DummyHTTPServletResponse(), connectorTO).getModel().values()\r\n-                .iterator().next();\r\n+    public boolean check(final ConnInstanceTO connInstanceTO) {\r\n+        return (Boolean) connInstanceController.check(connInstanceTO).getModel().values().iterator().next();\r\n     }\r\n \r\n     @Override\r\n     public void setUriInfo(final UriInfo ui) {\r\n         this.uriInfo = ui;\r\n     }\r\n+\r\n+    @Override\r\n+    public void reload() {\r\n+        connInstanceController.reload();\r\n+    }\r\n }\r"},{"sha":"6e6549409b6d681318517233bd4684a8fc49aef8","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/LDAPMembershipSyncActions.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPMembershipSyncActions.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -37,7 +37,7 @@\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.sync.DefaultSyncActions;\n import org.apache.syncope.core.sync.SyncResult;\n@@ -151,7 +151,7 @@ protected UserMod getUserMod(final Long userId, final RoleTO roleTO) {\n      * @return value of attribute returned by getGroupMembershipAttrName()\n      * @see getGroupMembershipAttrName()\n      */\n-    protected List<Object> getMembAttrValues(final SyncDelta delta, final SyncopeConnector connector) {\n+    protected List<Object> getMembAttrValues(final SyncDelta delta, final Connector connector) {\n         List<Object> result = Collections.<Object>emptyList();\n \n         // first, try to read the configured attribute from delta, returned by the ongoing synchronization\n@@ -212,7 +212,7 @@ protected void synchronizeMemberships(final SyncopeSyncResultHandler handler, fi\n \n         final SyncTask task = handler.getSyncTask();\n         final ExternalResource resource = task.getResource();\n-        final SyncopeConnector connector = handler.getConnector();\n+        final Connector connector = handler.getConnector();\n \n         for (Object membValue : getMembAttrValues(delta, connector)) {\n             Long userId = handler.findMatchingAttributableId(ObjectClass.ACCOUNT, membValue.toString());"},{"sha":"253d9b05ba9175e04e4d701f8c9da10f8f1ebed6","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncJob.java","status":"modified","additions":4,"deletions":18,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncJob.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -37,10 +37,8 @@\n import org.apache.syncope.core.persistence.dao.EntitlementDAO;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.persistence.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.propagation.ConnectorFactory;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.quartz.AbstractTaskJob;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.sync.SyncActions;\n@@ -72,7 +70,7 @@ public class SyncJob extends AbstractTaskJob {\n      * ConnInstance loader.\n      */\n     @Autowired\n-    private ConnectorFactory connInstanceLoader;\n+    private ConnectorFactory connFactory;\n \n     /**\n      * Resource DAO.\n@@ -86,18 +84,6 @@ public class SyncJob extends AbstractTaskJob {\n     @Autowired\n     private EntitlementDAO entitlementDAO;\n \n-    /**\n-     * Role DAO.\n-     */\n-    @Autowired\n-    private UserDAO userDAO;\n-\n-    /**\n-     * Role DAO.\n-     */\n-    @Autowired\n-    private RoleDAO roleDAO;\n-\n     /**\n      * Role workflow adapter.\n      */\n@@ -366,9 +352,9 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n         }\n         final SyncTask syncTask = (SyncTask) this.task;\n \n-        SyncopeConnector connector;\n+        Connector connector;\n         try {\n-            connector = connInstanceLoader.getConnector(syncTask.getResource());\n+            connector = connFactory.getConnector(syncTask.getResource());\n         } catch (Exception e) {\n             final String msg = String.format(\"Connector instance bean for resource %s and connInstance %s not found\",\n                     syncTask.getResource(), syncTask.getResource().getConnector());"},{"sha":"8d2e2bcbb99b8c1982c50914d3b09dd679b617c6","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -63,7 +63,7 @@\n import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n@@ -179,7 +179,7 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n     /**\n      * Syncing connector.\n      */\n-    private SyncopeConnector connector;\n+    private Connector connector;\n \n     /**\n      * SyncJob actions.\n@@ -196,11 +196,11 @@ public class SyncopeSyncResultHandler implements SyncResultsHandler {\n \n     private Map<Long, String> roleOwnerMap = new HashMap<Long, String>();\n \n-    public SyncopeConnector getConnector() {\n+    public Connector getConnector() {\n         return connector;\n     }\n \n-    public void setConnector(final SyncopeConnector connector) {\n+    public void setConnector(final Connector connector) {\n         this.connector = connector;\n     }\n "},{"sha":"f0cfaf09b12ada468c3a88fb2066a9b7cad8d8a0","filename":"core/src/main/java/org/apache/syncope/core/util/ConnIdBundleManager.java","status":"renamed","additions":76,"deletions":43,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FConnIdBundleManager.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -19,13 +19,13 @@\n package org.apache.syncope.core.util;\n \n import java.io.File;\n+import java.io.IOException;\n+import java.io.InputStream;\n import java.net.URL;\n import java.util.ArrayList;\n import java.util.List;\n-\n-import org.apache.syncope.core.persistence.beans.SyncopeConf;\n-import org.apache.syncope.core.persistence.dao.ConfDAO;\n-import org.apache.syncope.core.persistence.dao.MissingConfKeyException;\n+import java.util.Properties;\n+import org.apache.commons.io.IOUtils;\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.identityconnectors.common.IOUtil;\n import org.identityconnectors.framework.api.APIConfiguration;\n@@ -36,60 +36,95 @@\n import org.identityconnectors.framework.api.ConnectorKey;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n-@Component\n-public class ConnBundleManager {\n+/**\n+ * Manage information about ConnId connector bundles.\n+ */\n+public final class ConnIdBundleManager {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(ConnIdBundleManager.class);\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnBundleManager.class);\n+    /**\n+     * Where to find conf properties for ConnId.\n+     */\n+    public static final String CONNID_PROPS = \"/connid.properties\";\n \n-    @Autowired\n-    private ConfDAO confDAO;\n+    /**\n+     * Directory path containing ConnId bundles.\n+     */\n+    private static String connIdBundlesDir;\n \n-    public ConnectorInfoManager getConnectorManager() throws NotFoundException, MissingConfKeyException {\n-        // 1. Bundles directory\n-        SyncopeConf connectorBundleDir = confDAO.find(\"connid.bundles.directory\");\n+    /**\n+     * Lock for operating on ConnectorInfoManager shared instance.\n+     */\n+    private static final Object LOCK = new Object();\n \n-        // 2. Find bundles inside that directory\n-        File bundleDirectory = new File(connectorBundleDir.getValue());\n+    /**\n+     * ConnectorInfoManager shared instance.\n+     */\n+    private static ConnectorInfoManager connManager;\n+\n+    static {\n+        InputStream propStream = null;\n+        try {\n+            propStream = ConnIdBundleManager.class.getResourceAsStream(CONNID_PROPS);\n+            Properties props = new Properties();\n+            props.load(propStream);\n+            connIdBundlesDir = props.getProperty(\"bundles.directory\");\n+        } catch (Exception e) {\n+            LOG.error(\"Could not load {}\", CONNID_PROPS, e);\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+    }\n+\n+    private static void initConnManager() {\n+        // 1. Find bundles inside connidBundlesDir\n+        File bundleDirectory = new File(connIdBundlesDir);\n         String[] bundleFiles = bundleDirectory.list();\n         if (bundleFiles == null) {\n-            throw new NotFoundException(\"Bundles from dir \" + connectorBundleDir.getValue());\n+            throw new NotFoundException(\"Connector bundles directory \" + connIdBundlesDir);\n         }\n \n         List<URL> bundleFileURLs = new ArrayList<URL>();\n         for (String file : bundleFiles) {\n             try {\n                 bundleFileURLs.add(IOUtil.makeURL(bundleDirectory, file));\n-            } catch (Exception ignore) {\n+            } catch (IOException ignore) {\n                 // ignore exception and don't add bundle\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(bundleDirectory.toString() + \"/\" + file + \"\\\"\" + \" is not a valid connector bundle.\",\n-                            ignore);\n-                }\n+                LOG.debug(\"{}/{} is not a valid connector bundle\", bundleDirectory.toString(), file, ignore);\n             }\n         }\n+\n         if (bundleFileURLs.isEmpty()) {\n-            throw new NotFoundException(\"Bundles from dir \" + connectorBundleDir.getValue());\n+            LOG.warn(\"No connector bundles found in {}\", connIdBundlesDir);\n         }\n         LOG.debug(\"Bundle file URLs: {}\", bundleFileURLs);\n \n-        // 3. Get connector info manager\n+        // 2. Get connector info manager\n         ConnectorInfoManager manager = ConnectorInfoManagerFactory.getInstance().getLocalManager(\n                 bundleFileURLs.toArray(new URL[bundleFileURLs.size()]));\n         if (manager == null) {\n             throw new NotFoundException(\"Connector Info Manager\");\n         }\n \n-        return manager;\n+        connManager = manager;\n     }\n \n-    public ConfigurationProperties getConfigurationProperties(final String bundleName, final String version,\n-            final String connectorName) throws NotFoundException {\n+    public static ConnectorInfoManager getConnManager() {\n+        synchronized (LOCK) {\n+            if (connManager == null) {\n+                initConnManager();\n+            }\n+        }\n+        return connManager;\n+    }\n \n-        //Create key for search all properties\n-        final ConnectorKey key = new ConnectorKey(bundleName, version, connectorName);\n+    public static ConfigurationProperties getConfProps(\n+            final String bundleName, final String bundleVersion, final String connectorName) {\n+\n+        // create key for search all properties\n+        final ConnectorKey key = new ConnectorKey(bundleName, bundleVersion, connectorName);\n         if (key == null) {\n             throw new NotFoundException(\"Connector Key\");\n         }\n@@ -100,21 +135,16 @@ public ConfigurationProperties getConfigurationProperties(final String bundleNam\n                     + \"\\nBundle class: \" + key.getConnectorName());\n         }\n \n-        //get the specified connector.\n-        ConnectorInfo info;\n-        try {\n-            info = getConnectorManager().findConnectorInfo(key);\n-            if (info == null) {\n-                throw new NotFoundException(\"Connector Info for key \" + key);\n-            }\n-        } catch (MissingConfKeyException e) {\n-            throw new NotFoundException(\"Connector Info for key \" + key, e);\n+        // get the specified connector\n+        ConnectorInfo info = getConnManager().findConnectorInfo(key);\n+        if (info == null) {\n+            throw new NotFoundException(\"Connector Info for key \" + key);\n         }\n \n-        return getConfigurationProperties(info);\n+        return getConfProps(info);\n     }\n \n-    public ConfigurationProperties getConfigurationProperties(final ConnectorInfo info) throws NotFoundException {\n+    public static ConfigurationProperties getConfProps(final ConnectorInfo info) {\n         if (info == null) {\n             throw new NotFoundException(\"Invalid: connector info is null\");\n         }\n@@ -131,14 +161,17 @@ public ConfigurationProperties getConfigurationProperties(final ConnectorInfo in\n             throw new NotFoundException(\"Configuration properties\");\n         }\n \n-        // Print out what the properties are (not necessary)\n         if (LOG.isDebugEnabled()) {\n             for (String propName : properties.getPropertyNames()) {\n-                LOG.debug(\"\\nProperty Name: \" + properties.getProperty(propName).getName()\n-                        + \"\\nProperty Type: \" + properties.getProperty(propName).getType());\n+                LOG.debug(\"Property Name: {}\\nProperty Type: {}\",\n+                        properties.getProperty(propName).getName(), properties.getProperty(propName).getType());\n             }\n         }\n \n         return properties;\n     }\n+\n+    private ConnIdBundleManager() {\n+        // Empty constructor for static utility class.\n+    }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/util/ConnBundleManager.java"},{"sha":"77efc72813667bde1d8409fe388f4d3baeca4449","filename":"core/src/main/resources/connid.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fresources%2Fconnid.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fresources%2Fconnid.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fconnid.properties?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+bundles.directory=${bundles.directory}"},{"sha":"a30626c1cf599101d1169cc1655a342ee0bd53ab","filename":"core/src/main/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -18,7 +18,6 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n   <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"SHA1\"/>\n   <SyncopeConf confKey=\"smtp.host\" confValue=\"not-existing\"/>\n   <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n@@ -56,6 +55,7 @@ under the License.\n   <Entitlement name=\"CONNECTOR_READ\"/>\n   <Entitlement name=\"CONNECTOR_UPDATE\"/>\n   <Entitlement name=\"CONNECTOR_DELETE\"/>\n+  <Entitlement name=\"CONNECTOR_RELOAD\"/>\n   <Entitlement name=\"CONFIGURATION_LIST\"/>\n   <Entitlement name=\"CONFIGURATION_CREATE\"/>\n   <Entitlement name=\"CONFIGURATION_READ\"/>"},{"sha":"e5731d864cff14b973580f22dcdb3cb702ec03e1","filename":"core/src/test/java/org/apache/syncope/core/AbstractTest.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractTest.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -24,6 +24,7 @@\n import java.io.InputStream;\n import java.util.Properties;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.junit.BeforeClass;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -40,20 +41,21 @@ public abstract class AbstractTest {\n     protected static String bundlesDirectory;\n \n     @BeforeClass\n-    public static void setUpIdentityConnectorsBundles() throws IOException {\n-        Properties props = new Properties();\n+    public static void setUpConnIdBundles() throws IOException {\n         InputStream propStream = null;\n         try {\n-            propStream = AbstractTest.class.getResourceAsStream(\"/bundles.properties\");\n+            propStream = AbstractTest.class.getResourceAsStream(ConnIdBundleManager.CONNID_PROPS);\n+            Properties props = new Properties();\n             props.load(propStream);\n-            connidSoapVersion = props.getProperty(\"connid.soap.version\");\n+\n             bundlesDirectory = props.getProperty(\"bundles.directory\");\n+            connidSoapVersion = props.getProperty(\"connid.soap.version\");\n         } catch (Exception e) {\n-            LOG.error(\"Could not load bundles.properties\", e);\n+            LOG.error(\"Could not load {}\", ConnIdBundleManager.CONNID_PROPS, e);\n         } finally {\n             IOUtils.closeQuietly(propStream);\n         }\n-        assertNotNull(connidSoapVersion);\n         assertNotNull(bundlesDirectory);\n+        assertNotNull(connidSoapVersion);\n     }\n }"},{"sha":"23ab3769edd797a9f2937bf37e135c146962187f","filename":"core/src/test/java/org/apache/syncope/core/init/ConnInstanceLoaderTest.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoaderTest.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -22,10 +22,9 @@\n \n import org.apache.syncope.core.AbstractNonDAOTest;\n import org.apache.syncope.core.persistence.dao.ResourceDAO;\n-import org.apache.syncope.core.propagation.SyncopeConnector;\n+import org.apache.syncope.core.propagation.Connector;\n import org.apache.syncope.core.rest.data.ResourceDataBinder;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n-import org.apache.syncope.core.util.ConnBundleManager;\n import org.junit.Before;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -35,28 +34,24 @@\n @Transactional\n public class ConnInstanceLoaderTest extends AbstractNonDAOTest {\n \n-    private ConnInstanceLoader cil;\n+    private ConnectorManager cil;\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n \n-    @Autowired\n-    private ConnBundleManager connBundleManager;\n-\n     @Autowired\n     private ResourceDataBinder resourceDataBinder;\n \n     @Before\n     public void before() {\n-        cil = new ConnInstanceLoader();\n+        cil = new ConnectorManager();\n         ReflectionTestUtils.setField(cil, \"resourceDAO\", resourceDAO);\n-        ReflectionTestUtils.setField(cil, \"connBundleManager\", connBundleManager);\n         ReflectionTestUtils.setField(cil, \"resourceDataBinder\", resourceDataBinder);\n \n         // Remove any other connector instance bean set up by\n         // standard ConnInstanceLoader.load()\n         for (String bean : ApplicationContextProvider.getApplicationContext().\n-                getBeanNamesForType(SyncopeConnector.class)) {\n+                getBeanNamesForType(Connector.class)) {\n \n             cil.unregisterConnector(bean);\n         }\n@@ -68,6 +63,6 @@ public void load() {\n \n         assertEquals(resourceDAO.findAll().size(),\n                 ApplicationContextProvider.getApplicationContext().\n-                getBeanNamesForType(SyncopeConnector.class, false, true).length);\n+                getBeanNamesForType(Connector.class, false, true).length);\n     }\n }"},{"sha":"3042b939947b75f82dfde4165840167377c35950","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -23,7 +23,6 @@\n import static org.junit.Assert.assertTrue;\n \n import java.util.List;\n-\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.junit.Test;\n@@ -42,8 +41,7 @@ public class EntitlementTest extends AbstractDAOTest {\n     @Test\n     public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n-        // 69 real entitlements + 9 role entitlements\n-        assertEquals(\"did not get expected number of entitlements \", 83, list.size());\n+        assertEquals(\"did not get expected number of entitlements \", 84, list.size());\n     }\n \n     @Test"},{"sha":"4ba6ec5fc924caf1f685d86271e9a53dff502701","filename":"core/src/test/java/org/apache/syncope/core/rest/ConnInstanceTestITCase.java","status":"modified","additions":23,"deletions":18,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConnInstanceTestITCase.java?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -32,9 +32,8 @@\n import java.util.Map;\n import java.util.Properties;\n import java.util.Set;\n-\n import javax.ws.rs.core.Response;\n-\n+import org.apache.commons.io.IOUtils;\n import org.apache.syncope.common.to.ConnBundleTO;\n import org.apache.syncope.common.to.ConnInstanceTO;\n import org.apache.syncope.common.to.MappingItemTO;\n@@ -46,6 +45,7 @@\n import org.apache.syncope.common.types.ConnectorCapability;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.core.util.ConnIdBundleManager;\n import org.identityconnectors.common.security.GuardedString;\n import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n@@ -64,25 +64,25 @@ public class ConnInstanceTestITCase extends AbstractTest {\n     private static String bundlesDirectory;\n \n     @BeforeClass\n-    public static void init()\n-            throws IOException {\n-        Properties props = new Properties();\n+    public static void setUpConnIdBundles() throws IOException {\n         InputStream propStream = null;\n         try {\n-            propStream = ConnInstanceTestITCase.class.getResourceAsStream(\"/bundles.properties\");\n+            Properties props = new Properties();\n+            propStream = org.apache.syncope.core.AbstractTest.class.\n+                    getResourceAsStream(ConnIdBundleManager.CONNID_PROPS);\n             props.load(propStream);\n+\n+            bundlesDirectory = props.getProperty(\"bundles.directory\");\n             connidSoapVersion = props.getProperty(\"connid.soap.version\");\n             connidDbTableVersion = props.getProperty(\"connid.db.table.version\");\n-            bundlesDirectory = props.getProperty(\"bundles.directory\");\n         } catch (Exception e) {\n-            LOG.error(\"Could not load bundles.properties\", e);\n+            LOG.error(\"Could not load {}\", ConnIdBundleManager.CONNID_PROPS, e);\n         } finally {\n-            if (propStream != null) {\n-                propStream.close();\n-            }\n+            IOUtils.closeQuietly(propStream);\n         }\n-        assertNotNull(connidSoapVersion);\n         assertNotNull(bundlesDirectory);\n+        assertNotNull(connidSoapVersion);\n+        assertNotNull(connidDbTableVersion);\n     }\n \n     @Test(expected = SyncopeClientCompositeErrorException.class)\n@@ -155,7 +155,7 @@ public void create() {\n         assertEquals(actual.getConnectorName(), connectorTO.getConnectorName());\n         assertEquals(actual.getVersion(), connectorTO.getVersion());\n         assertEquals(\"Display name\", actual.getDisplayName());\n-        assertEquals(new Integer(15), actual.getConnRequestTimeout());\n+        assertEquals(Integer.valueOf(15), actual.getConnRequestTimeout());\n         assertEquals(connectorTO.getCapabilities(), actual.getCapabilities());\n \n         Throwable t = null;\n@@ -249,7 +249,7 @@ public void update() {\n         assertEquals(actual.getBundleName(), connectorTO.getBundleName());\n         assertEquals(actual.getConnectorName(), connectorTO.getConnectorName());\n         assertEquals(actual.getVersion(), connectorTO.getVersion());\n-        assertEquals(new Integer(20), actual.getConnRequestTimeout());\n+        assertEquals(Integer.valueOf(20), actual.getConnRequestTimeout());\n     }\n \n     @Test\n@@ -313,7 +313,7 @@ public void issueSYNCOPE10() {\n         // ----------------------------------\n         // Check for spring bean.\n         // ----------------------------------\n-        ConnInstanceTO connInstanceBean = connectorService.readConnectorBean(resourceTO.getName());\n+        ConnInstanceTO connInstanceBean = connectorService.readByResource(resourceTO.getName());\n \n         assertNotNull(connInstanceBean);\n         assertTrue(connInstanceBean.getCapabilities().isEmpty());\n@@ -331,7 +331,7 @@ public void issueSYNCOPE10() {\n         assertFalse(connInstanceTO.getCapabilities().isEmpty());\n \n         // check for spring bean update\n-        connInstanceBean = connectorService.readConnectorBean(resourceTO.getName());\n+        connInstanceBean = connectorService.readByResource(resourceTO.getName());\n \n         assertFalse(connInstanceBean.getCapabilities().isEmpty());\n         // ----------------------------------\n@@ -582,8 +582,8 @@ public void issueSYNCOPE112() {\n         keyColumnSchema.setRequired(true);\n         ConnConfProperty servicename = new ConnConfProperty();\n         servicename.setSchema(keyColumnSchema);\n-        servicename\n-                .setValues(Collections.singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n+        servicename.setValues(\n+                Collections.singletonList(\"org.connid.bundles.soap.provisioning.interfaces.Provisioning\"));\n         servicename.setOverridable(false);\n \n         conf.add(endpoint);\n@@ -641,4 +641,9 @@ public void issueSYNCOPE112() {\n             connectorService.delete(connectorTO.getId());\n         }\n     }\n+\n+    @Test\n+    public void reload() {\n+        connectorService.reload();\n+    }\n }"},{"sha":"f5457bedf7b4b5445f2b5d904100408215114c2f","filename":"core/src/test/resources/connid.properties","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fresources%2Fconnid.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fresources%2Fconnid.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fconnid.properties?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","previous_filename":"core/src/test/resources/bundles.properties"},{"sha":"930f1c795d95089b8a9a58392696a04e2e09b8e3","filename":"core/src/test/resources/content.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=66bd027b8d33e7d4b1d4f2ed40cc7889fabb47ab","patch":"@@ -18,7 +18,6 @@ specific language governing permissions and limitations\n under the License.\n -->\n <dataset>\n-  <SyncopeConf confKey=\"connid.bundles.directory\" confValue=\"${bundles.directory}\"/>\n   <SyncopeConf confKey=\"password.cipher.algorithm\" confValue=\"SHA1\"/>\n   <SyncopeConf confKey=\"smtp.host\" confValue=\"not-existing\"/>\n   <SyncopeConf confKey=\"smtp.port\" confValue=\"25\"/>\n@@ -688,6 +687,7 @@ under the License.\n   <Entitlement name=\"CONNECTOR_READ\"/>\n   <Entitlement name=\"CONNECTOR_UPDATE\"/>\n   <Entitlement name=\"CONNECTOR_DELETE\"/>\n+  <Entitlement name=\"CONNECTOR_RELOAD\"/>\n   <Entitlement name=\"CONFIGURATION_LIST\"/>\n   <Entitlement name=\"CONFIGURATION_CREATE\"/>\n   <Entitlement name=\"CONFIGURATION_READ\"/>"}]}