{"sha":"dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmRjOWE1YTg1OTRlN2I2ZGMzNzdjOWI0MmJmYTRmYmFlYTQ0OWZkN2Q=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-20T08:31:14Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-12-20T08:31:14Z"},"message":"[SYNCOPE-349] Using orderby for users', roles', tasks' and reports' tables sorting\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1552531 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"5b56704950934d0a49272c969b514cbdab765006","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5b56704950934d0a49272c969b514cbdab765006"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"90e89addb59464ed5eb311ba9a8c698788eaef46","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90e89addb59464ed5eb311ba9a8c698788eaef46","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90e89addb59464ed5eb311ba9a8c698788eaef46"}],"stats":{"total":537,"additions":341,"deletions":196},"files":[{"sha":"186fe2e2d2efd13ecd16dece2f092e9dad3cde2a","filename":"common/src/main/java/org/apache/syncope/common/search/OrderByClauseBuilder.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FOrderByClauseBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FOrderByClauseBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FOrderByClauseBuilder.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.common.search;\n \n+import org.apache.commons.lang3.StringUtils;\n+\n /**\n  * Simple builder for generating <tt>orderby</tt> values.\n  */\n@@ -36,6 +38,8 @@ public OrderByClauseBuilder desc(final String key) {\n     }\n \n     public String build() {\n-        return builder.deleteCharAt(builder.length() - 1).toString();\n+        return builder.length() == 0\n+                ? StringUtils.EMPTY\n+                : builder.deleteCharAt(builder.length() - 1).toString();\n     }\n }"},{"sha":"7c12ace3c32c44f5b72670bca01b90a46aa2ddec","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -94,6 +94,13 @@ Response exportExecutionResult(@PathParam(\"executionId\") Long executionId,\n     @GET\r\n     PagedResult<ReportTO> list();\r\n \r\n+    /**\r\n+     * @param orderBy list of ordering clauses, separated by comma\r\n+     * @return Paged list of all existing reports\r\n+     */\r\n+    @GET\r\n+    PagedResult<ReportTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\r\n+\r\n     /**\r\n      * @param page selected page in relation to size\r\n      * @param size number of entries per page\r\n@@ -103,6 +110,17 @@ Response exportExecutionResult(@PathParam(\"executionId\") Long executionId,\n     PagedResult<ReportTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n             @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\r\n \r\n+    /**\r\n+     * @param page selected page in relation to size\r\n+     * @param size number of entries per page\r\n+     * @param orderBy list of ordering clauses, separated by comma\r\n+     * @return Paged list of existing reports matching page/size conditions\r\n+     */\r\n+    @GET\r\n+    PagedResult<ReportTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size,\r\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n+\r\n     /**\r\n      * @param reportId ID of report to be read\r\n      * @return Report with matching ID\r"},{"sha":"2c34d6b35d066dfd5123d4c7c7bf8a2cd0db1e0b","filename":"common/src/main/java/org/apache/syncope/common/services/RoleService.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -73,6 +73,13 @@ public interface RoleService extends JAXRSService {\n     @GET\r\n     PagedResult<RoleTO> list();\r\n \r\n+    /**\r\n+     * @param orderBy list of ordering clauses, separated by comma\r\n+     * @return Paged list of all existing roles\r\n+     */\r\n+    @GET\r\n+    PagedResult<RoleTO> list(@QueryParam(PARAM_ORDERBY) String orderBy);\r\n+\r\n     /**\r\n      * @param page result page number\r\n      * @param size number of entries per page\r\n@@ -82,6 +89,17 @@ public interface RoleService extends JAXRSService {\n     PagedResult<RoleTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n             @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size);\r\n \r\n+    /**\r\n+     * @param page result page number\r\n+     * @param size number of entries per page\r\n+     * @param orderBy list of ordering clauses, separated by comma\r\n+     * @return Paged list of existing roles matching page/size conditions\r\n+     */\r\n+    @GET\r\n+    PagedResult<RoleTO> list(@QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size,\r\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n+\r\n     /**\r\n      * @param roleId Id of role to get parent role from\r\n      * @return Returns parent role or null if no parent exists\r"},{"sha":"21bdd76ef70268b267f54222f93c173a7dad07e5","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"modified","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -103,6 +103,30 @@ public interface TaskService extends JAXRSService {\n     @GET\r\n     <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType);\r\n \r\n+    /**\r\n+     * @param taskType Type of tasks to be listed\r\n+     * @param orderBy list of ordering clauses, separated by comma\r\n+     * @param <T> type of taskTO\r\n+     * @return Returns list of tasks with matching type\r\n+     */\r\n+    @GET\r\n+    <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType,\r\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n+\r\n+    /**\r\n+     * @param taskType Type of tasks to be listed\r\n+     * @param page Page number of tasks in relation to page size\r\n+     * @param size Number of tasks listed per page\r\n+     * @param orderBy list of ordering clauses, separated by comma\r\n+     * @param <T> type of taskTO\r\n+     * @return Returns paginated list of task with matching type\r\n+     */\r\n+    @GET\r\n+    <T extends AbstractTaskTO> PagedResult<T> list(@MatrixParam(\"type\") TaskType taskType,\r\n+            @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\r\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size,\r\n+            @QueryParam(PARAM_ORDERBY) String orderBy);\r\n+\r\n     /**\r\n      * @param taskType Type of tasks to be listed\r\n      * @param page Page number of tasks in relation to page size\r"},{"sha":"2b27e36ee5449e6afd11e28d2b9fb84b7b8cdba7","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"modified","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -82,6 +82,41 @@ public interface UserService extends JAXRSService {\n     })\n     PagedResult<UserTO> list();\n \n+    /**\n+     * Returns a paged list of existing users.\n+     *\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return Paged list of all existing users\n+     */\n+    @GET\n+    @Descriptions({\n+        @Description(target = DocTarget.METHOD, value = \"Returns a list of all existing users\"),\n+        @Description(target = DocTarget.RETURN, value = \"Paged list of all existing users\")\n+    })\n+    PagedResult<UserTO> list(\n+            @Description(\"list of ordering clauses, separated by comma\") @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n+    /**\n+     * Returns a paged list of existing users matching page/size conditions.\n+     *\n+     * @param page result page number\n+     * @param size number of entries per page\n+     * @param orderBy list of ordering clauses, separated by comma\n+     * @return Paged list of existing users matching page/size conditions\n+     */\n+    @GET\n+    @Descriptions({\n+        @Description(target = DocTarget.METHOD,\n+                value = \"Returns a list of all existing users matching page/size conditions\"),\n+        @Description(target = DocTarget.RETURN, value = \"Paged list of existing users matching page/size conditions\")\n+    })\n+    PagedResult<UserTO> list(\n+            @Description(\"result page number\")\n+            @QueryParam(PARAM_PAGE) @DefaultValue(DEFAULT_PARAM_PAGE) int page,\n+            @Description(\"number of entries per page\")\n+            @QueryParam(PARAM_SIZE) @DefaultValue(DEFAULT_PARAM_SIZE) int size,\n+            @Description(\"list of ordering clauses, separated by comma\") @QueryParam(PARAM_ORDERBY) String orderBy);\n+\n     /**\n      * Returns a paged list of existing users matching page/size conditions.\n      *"},{"sha":"41764a029a380479010b9eefa471c15ec166c54a","filename":"console/src/main/java/org/apache/syncope/console/commons/AttributableDataProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -72,9 +72,9 @@ public Iterator<? extends AbstractAttributableTO> iterator(final long first, fin\n         if (filtered) {\n             result = fiql == null\n                     ? Collections.<AbstractAttributableTO>emptyList()\n-                    : restClient.search(fiql, ((int) first / paginatorRows) + 1, paginatorRows);\n+                    : restClient.search(fiql, ((int) first / paginatorRows) + 1, paginatorRows, getSort());\n         } else {\n-            result = restClient.list(((int) first / paginatorRows) + 1, paginatorRows);\n+            result = restClient.list(((int) first / paginatorRows) + 1, paginatorRows, getSort());\n         }\n \n         Collections.sort(result, comparator);"},{"sha":"7edf45f0f2b6f593f14b1a872bacd50dfcc355b8","filename":"console/src/main/java/org/apache/syncope/console/pages/ProvisioningModalPage.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FProvisioningModalPage.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -45,6 +45,7 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.markup.repeater.Item;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.StringResourceModel;\n@@ -190,9 +191,11 @@ public List<StatusBean> getStatusBeans() {\n \n             final List<T> attributables = new ArrayList<T>();\n             if (UserTO.class.isAssignableFrom(typeRef)) {\n-                attributables.addAll((List<T>) userRestClient.search(fiql, 0, rowsPerPage));\n+                attributables.addAll((List<T>) userRestClient.search(fiql, 0, rowsPerPage,\n+                        new SortParam<String>(\"id\", true)));\n             } else {\n-                attributables.addAll((List<T>) roleRestClient.search(fiql, 0, rowsPerPage));\n+                attributables.addAll((List<T>) roleRestClient.search(fiql, 0, rowsPerPage,\n+                        new SortParam<String>(\"id\", true)));\n             }\n \n             final List<ConnObjectWrapper> connObjects = statusUtils.getConnectorObjects("},{"sha":"04b0fdc3f4c95d91727381acd6b7c4e6cb49aed5","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -381,7 +381,8 @@ public ReportProvider() {\n \n         @Override\n         public Iterator<ReportTO> iterator(final long first, final long count) {\n-            final List<ReportTO> list = reportRestClient.list(((int) first / paginatorRows) + 1, paginatorRows);\n+            final List<ReportTO> list =\n+                    reportRestClient.list(((int) first / paginatorRows) + 1, paginatorRows, getSort());\n             Collections.sort(list, comparator);\n             return list.iterator();\n         }"},{"sha":"741f30cf6d44b425f5b802b58ba6a8393c8341ba","filename":"console/src/main/java/org/apache/syncope/console/pages/Resources.java","status":"modified","additions":34,"deletions":32,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -182,44 +182,47 @@ private void setupResources() {\n         columns.add(new AbstractColumn<ResourceTO, String>(\n                 new StringResourceModel(\"connector\", this, null, \"connector\")) {\n \n-            private static final long serialVersionUID = 8263694778917279290L;\n+                    private static final long serialVersionUID = 8263694778917279290L;\n \n-            @Override\n-            public void populateItem(final Item<ICellPopulator<ResourceTO>> cellItem, final String componentId,\n-                    final IModel<ResourceTO> rowModel) {\n+                    @Override\n+                    public void populateItem(final Item<ICellPopulator<ResourceTO>> cellItem, final String componentId,\n+                            final IModel<ResourceTO> rowModel) {\n \n-                final AjaxLink<String> editLink = new ClearIndicatingAjaxLink<String>(\"link\", getPageReference()) {\n+                        final AjaxLink<String> editLink =\n+                        new ClearIndicatingAjaxLink<String>(\"link\", getPageReference()) {\n \n-                    private static final long serialVersionUID = -7978723352517770644L;\n+                            private static final long serialVersionUID = -7978723352517770644L;\n \n-                    @Override\n-                    protected void onClickInternal(final AjaxRequestTarget target) {\n+                            @Override\n+                            protected void onClickInternal(final AjaxRequestTarget target) {\n \n-                        editConnectorWin.setPageCreator(new ModalWindow.PageCreator() {\n+                                editConnectorWin.setPageCreator(new ModalWindow.PageCreator() {\n \n-                            private static final long serialVersionUID = -7834632442532690940L;\n+                                    private static final long serialVersionUID = -7834632442532690940L;\n \n-                            @Override\n-                            public Page createPage() {\n-                                return new ConnectorModalPage(Resources.this.getPageReference(), editConnectorWin,\n-                                        connectorRestClient.read(rowModel.getObject().getConnectorId()));\n-                            }\n-                        });\n+                                    @Override\n+                                    public Page createPage() {\n+                                        return new ConnectorModalPage(Resources.this.getPageReference(),\n+                                                editConnectorWin,\n+                                                connectorRestClient.read(rowModel.getObject().getConnectorId()));\n+                                    }\n+                                });\n \n-                        editConnectorWin.show(target);\n-                    }\n-                };\n-                editLink.add(new Label(\"linkTitle\", rowModel.getObject().getConnectorDisplayName()));\n+                                editConnectorWin.show(target);\n+                            }\n+                        };\n+                        editLink.add(new Label(\"linkTitle\", rowModel.getObject().getConnectorDisplayName()));\n \n-                LinkPanel editConnPanel = new LinkPanel(componentId);\n-                editConnPanel.add(editLink);\n+                        LinkPanel editConnPanel = new LinkPanel(componentId);\n+                        editConnPanel.add(editLink);\n \n-                cellItem.add(editConnPanel);\n+                        cellItem.add(editConnPanel);\n \n-                MetaDataRoleAuthorizationStrategy.authorize(editConnPanel, ENABLE, xmlRolesReader.getAllAllowedRoles(\n-                        \"Connectors\", \"read\"));\n-            }\n-        });\n+                        MetaDataRoleAuthorizationStrategy.authorize(editConnPanel, ENABLE, xmlRolesReader.\n+                                getAllAllowedRoles(\n+                                        \"Connectors\", \"read\"));\n+                    }\n+                });\n \n         columns.add(new PropertyColumn<ResourceTO, String>(new StringResourceModel(\n                 \"propagationPrimary\", this, null), \"propagationPrimary\", \"propagationPrimary\"));\n@@ -286,7 +289,6 @@ public Page createPage() {\n                     }\n                 }, ActionLink.ActionType.MANAGE_ROLES, \"Resources\");\n \n-\n                 panel.add(new ActionLink() {\n \n                     private static final long serialVersionUID = -3722207913631435501L;\n@@ -340,7 +342,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 columns,\n                 (ISortableDataProvider<ResourceTO, String>) new ResourcesProvider(),\n                 resourcePaginatorRows,\n-                Arrays.asList(new ActionLink.ActionType[] {ActionLink.ActionType.DELETE}),\n+                Arrays.asList(new ActionLink.ActionType[] { ActionLink.ActionType.DELETE }),\n                 resourceRestClient,\n                 \"name\",\n                 \"Resources\",\n@@ -495,7 +497,7 @@ public void onClick(final AjaxRequestTarget target) {\n                 columns,\n                 (ISortableDataProvider<ConnInstanceTO, String>) new ConnectorsProvider(),\n                 connectorPaginatorRows,\n-                Arrays.asList(new ActionLink.ActionType[] {ActionLink.ActionType.DELETE}),\n+                Arrays.asList(new ActionLink.ActionType[] { ActionLink.ActionType.DELETE }),\n                 connectorRestClient,\n                 \"id\",\n                 \"Connectors\",\n@@ -558,7 +560,7 @@ public Page createPage() {\n         final DropDownChoice<Integer> rowsChooser = new DropDownChoice<Integer>(\n                 \"rowsChooser\",\n                 new PropertyModel<Integer>(this,\n-                \"connectorPaginatorRows\"),\n+                        \"connectorPaginatorRows\"),\n                 prefMan.getPaginatorChoices());\n \n         rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n@@ -675,4 +677,4 @@ public void onEvent(final IEvent<?> event) {\n             ((AbstractSearchResultPanel.EventDataWrapper) event.getPayload()).getTarget().add(connectorContainer);\n         }\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"b77698f24bd94106ecda2d513ce01d8902718eb9","filename":"console/src/main/java/org/apache/syncope/console/pages/Tasks.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -151,16 +151,14 @@ public TasksProvider(\n         public Iterator<T> iterator(final long first, final long count) {\n             final List<T> tasks = new ArrayList<T>();\n \n-            for (T task : restClient.listTasks(reference, ((int) first / paginatorRows) + 1, paginatorRows)) {\n-\n+            for (T task : restClient.list(reference, ((int) first / paginatorRows) + 1, paginatorRows, getSort())) {\n                 if (task instanceof SchedTaskTO && ((SchedTaskTO) task).getLastExec() == null\n                         && task.getExecutions() != null && !task.getExecutions().isEmpty()) {\n \n                     Collections.sort(task.getExecutions(), new Comparator<TaskExecTO>() {\n \n                         @Override\n                         public int compare(final TaskExecTO left, final TaskExecTO right) {\n-\n                             return left.getStartDate().compareTo(right.getStartDate());\n                         }\n                     });\n@@ -210,7 +208,7 @@ public static AjaxDataTablePanel<AbstractTaskTO, String> updateTaskTable(\n                 (ISortableDataProvider<AbstractTaskTO, String>) dataProvider,\n                 dataProvider.paginatorRows,\n                 Arrays.asList(new ActionLink.ActionType[] {\n-            ActionLink.ActionType.DELETE, ActionLink.ActionType.DRYRUN, ActionLink.ActionType.EXECUTE}),\n+                    ActionLink.ActionType.DELETE, ActionLink.ActionType.DRYRUN, ActionLink.ActionType.EXECUTE }),\n                 restClient,\n                 \"id\",\n                 TASKS,"},{"sha":"7f4576e8d684f5217295b88d9760c785e704083f","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AjaxDataTablePanel.java","status":"modified","additions":4,"deletions":32,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAjaxDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAjaxDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAjaxDataTablePanel.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -41,49 +41,21 @@\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.panel.Fragment;\n import org.apache.wicket.markup.html.panel.Panel;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n \n public class AjaxDataTablePanel<T, S> extends Panel {\n \n-    /**\n-     * Logger.\n-     */\n-    protected static final Logger LOG = LoggerFactory.getLogger(AjaxDataTablePanel.class);\n-\n     private static final long serialVersionUID = -8826989026203543957L;\n \n-    private final CheckGroup<T> group;\n-\n-    private final Form bulkActionForm;\n-\n     private final AjaxFallbackDefaultDataTable<T, S> dataTable;\n \n-    public AjaxDataTablePanel(\n-            final String id,\n-            final List<IColumn<T, S>> columns,\n-            final ISortableDataProvider<T, S> dataProvider,\n-            final int rowsPerPage) {\n-        super(id);\n-\n-        this.bulkActionForm = null;\n-        this.group = null;\n-        dataTable = new AjaxFallbackDefaultDataTable<T, S>(\"dataTable\", columns, dataProvider, rowsPerPage);\n-\n-        Fragment fragment = new Fragment(\"tablePanel\", \"bulkNotAvailable\", this);\n-        fragment.add(dataTable);\n-\n-        add(fragment);\n-    }\n-\n     public AjaxDataTablePanel(\n             final String id,\n             final List<IColumn<T, S>> columns,\n             final ISortableDataProvider<T, S> dataProvider,\n             final int rowsPerPage,\n             final Collection<ActionLink.ActionType> actions,\n             final BaseRestClient bulkActionExecutor,\n-            final String itemIdFiled,\n+            final String itemIdField,\n             final String pageId,\n             final PageReference pageRef) {\n \n@@ -124,10 +96,10 @@ public void onClose(final AjaxRequestTarget target) {\n         Fragment fragment = new Fragment(\"tablePanel\", \"bulkAvailable\", this);\n         add(fragment);\n \n-        bulkActionForm = new Form(\"groupForm\");\n+        Form<T> bulkActionForm = new Form<T>(\"groupForm\");\n         fragment.add(bulkActionForm);\n \n-        group = new CheckGroup<T>(\"checkgroup\", new ArrayList<T>());\n+        final CheckGroup<T> group = new CheckGroup<T>(\"checkgroup\", new ArrayList<T>());\n         bulkActionForm.add(group);\n \n         columns.add(0, new CheckGroupColumn<T, S>(group));\n@@ -152,7 +124,7 @@ public Page createPage() {\n                                 columns,\n                                 actions,\n                                 bulkActionExecutor,\n-                                itemIdFiled,\n+                                itemIdField,\n                                 pageId);\n                     }\n                 });"},{"sha":"df48566420471dc0340e446bd674148fd8cedd1d","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SearchView.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -161,6 +161,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     if (comparator.getModelObject() == SearchClause.Comparator.IS_NULL\n                             || comparator.getModelObject() == SearchClause.Comparator.IS_NOT_NULL) {\n \n+                        value.setModelObject(null);\n                         value.setEnabled(false);\n                     } else {\n                         value.setEnabled(true);"},{"sha":"affd866f99b68226ae00988e6cf0f1e79382157b","filename":"console/src/main/java/org/apache/syncope/console/rest/AbstractAttributableRestClient.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -23,18 +23,20 @@\n import org.apache.syncope.common.reqres.BulkAction;\n import org.apache.syncope.common.reqres.BulkActionResult;\n import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n \n public abstract class AbstractAttributableRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = 1962529678091410544L;\n \n     public abstract int count();\n \n-    public abstract List<? extends AbstractAttributableTO> list(int page, int size);\n+    public abstract List<? extends AbstractAttributableTO> list(int page, int size, final SortParam<String> sort);\n \n     public abstract int searchCount(String fiql);\n \n-    public abstract List<? extends AbstractAttributableTO> search(String fiql, int page, int size);\n+    public abstract List<? extends AbstractAttributableTO> search(String fiql,\n+            int page, int size, final SortParam<String> sort);\n \n     public abstract ConnObjectTO getConnectorObject(String resourceName, Long id);\n "},{"sha":"88df1b47bda08b12f8c22d794969957585ab6059","filename":"console/src/main/java/org/apache/syncope/console/rest/BaseRestClient.java","status":"modified","additions":20,"deletions":0,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -19,8 +19,11 @@\n package org.apache.syncope.console.rest;\n \n import java.io.Serializable;\n+import org.apache.syncope.client.SyncopeClient;\n+import org.apache.syncope.common.search.OrderByClauseBuilder;\n \n import org.apache.syncope.console.SyncopeSession;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n@@ -40,4 +43,21 @@ protected <T> T getAnonymousService(final Class<T> serviceClass) {\n     protected <T> T getService(final Class<T> serviceClass) {\n         return SyncopeSession.get().getService(serviceClass);\n     }\n+\n+    protected String toOrderBy(final SortParam<String> sort) {\n+        OrderByClauseBuilder builder = SyncopeClient.getOrderByClauseBuilder();\n+\n+        String property = sort.getProperty();\n+        if (property.indexOf('#') != -1) {\n+            property = property.substring(property.indexOf('#') + 1);\n+        }\n+\n+        if (sort.isAscending()) {\n+            builder.asc(property);\n+        } else {\n+            builder.desc(property);\n+        }\n+\n+        return builder.build();\n+    }\n }"},{"sha":"5f7d80f7f64864ca5718982c8e03d3af3a1e3a73","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.wrap.ReportletConfClass;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n \n @Component\n@@ -56,8 +57,8 @@ public List<ReportTO> list() {\n         return getService(ReportService.class).list().getResult();\n     }\n \n-    public List<ReportTO> list(final int page, final int size) {\n-        return getService(ReportService.class).list(page, size).getResult();\n+    public List<ReportTO> list(final int page, final int size, final SortParam<String> sort) {\n+        return getService(ReportService.class).list(page, size, toOrderBy(sort)).getResult();\n     }\n \n     public int count() {"},{"sha":"cb3282864e2b981ab7e3244951aa44b06e5b5745","filename":"console/src/main/java/org/apache/syncope/console/rest/RoleRestClient.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.console.commons.status.StatusBean;\n import org.apache.syncope.console.commons.status.StatusUtils;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -55,8 +56,8 @@ public List<RoleTO> list() {\n     }\n \n     @Override\n-    public List<RoleTO> list(final int page, final int size) {\n-        return getService(RoleService.class).list(page, size).getResult();\n+    public List<RoleTO> list(final int page, final int size, final SortParam<String> sort) {\n+        return getService(RoleService.class).list(page, size, toOrderBy(sort)).getResult();\n     }\n \n     @Override\n@@ -65,8 +66,8 @@ public int searchCount(final String fiql) {\n     }\n \n     @Override\n-    public List<RoleTO> search(final String fiql, final int page, final int size) {\n-        return getService(RoleService.class).search(fiql, page, size).getResult();\n+    public List<RoleTO> search(final String fiql, final int page, final int size, final SortParam<String> sort) {\n+        return getService(RoleService.class).search(fiql, page, size, toOrderBy(sort)).getResult();\n     }\n \n     @Override"},{"sha":"db232f18bb677f4fa74aee8f35c7a657dc0b6fd8","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -33,6 +33,7 @@\n import org.apache.syncope.common.types.TaskType;\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -81,10 +82,11 @@ public int count(final String kind) {\n     }\n \n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> List<T> listTasks(\n-            final Class<T> reference, final int page, final int size) {\n+    public <T extends AbstractTaskTO> List<T> list(final Class<T> reference,\n+            final int page, final int size, final SortParam<String> sort) {\n \n-        return (List<T>) getService(TaskService.class).list(getTaskType(reference), page, size).getResult();\n+        return (List<T>) getService(TaskService.class).list(getTaskType(reference), page, size, toOrderBy(sort)).\n+                getResult();\n     }\n \n     private TaskType getTaskType(final Class<?> reference) {"},{"sha":"4eb4dd318bf87a1dc2c72cfcaf3318e0562c6c46","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.console.commons.status.StatusBean;\n import org.apache.syncope.console.commons.status.StatusUtils;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.springframework.stereotype.Component;\n \n /**\n@@ -58,8 +59,8 @@ public int count() {\n      * @return list of TaskTO objects\n      */\n     @Override\n-    public List<UserTO> list(final int page, final int size) {\n-        return getService(UserService.class).list(page, size).getResult();\n+    public List<UserTO> list(final int page, final int size, final SortParam<String> sort) {\n+        return getService(UserService.class).list(page, size, toOrderBy(sort)).getResult();\n     }\n \n     public UserTO create(final UserTO userTO) {\n@@ -92,8 +93,8 @@ public int searchCount(final String fiql) {\n     }\n \n     @Override\n-    public List<UserTO> search(final String fiql, final int page, final int size) {\n-        return getService(UserService.class).search(fiql, page, size).getResult();\n+    public List<UserTO> search(final String fiql, final int page, final int size, final SortParam<String> sort) {\n+        return getService(UserService.class).search(fiql, page, size, toOrderBy(sort)).getResult();\n     }\n \n     @Override"},{"sha":"b363b97cd7b0d37d0778a8e7ffc54c00c0592129","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/ReportDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportDAO.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n \n import org.apache.syncope.core.persistence.beans.Report;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface ReportDAO extends DAO {\n@@ -29,7 +30,7 @@ public interface ReportDAO extends DAO {\n \n     List<Report> findAll();\n \n-    List<Report> findAll(int page, int itemsPerPage);\n+    List<Report> findAll(int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n \n     int count();\n "},{"sha":"be95ed64f375fd7ccb1f0d89ddd23b0a3c7ceef0","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/RoleDAO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleDAO.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.RAttrValue;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface RoleDAO extends AttributableDAO {\n@@ -57,7 +58,7 @@ public interface RoleDAO extends AttributableDAO {\n \n     List<SyncopeRole> findAll();\n \n-    List<SyncopeRole> findAll(int page, int itemsPerPage);\n+    List<SyncopeRole> findAll(int page, int itemsPerPage, List<OrderByClause> orderBy);\n \n     List<Membership> findMemberships(SyncopeRole role);\n "},{"sha":"ee36c1c64e2ac6fa75a3bd5d4fd1f774a59a5f7e","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/TaskDAO.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -22,6 +22,7 @@\n \n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.Task;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface TaskDAO extends DAO {\n@@ -34,7 +35,8 @@ public interface TaskDAO extends DAO {\n \n     <T extends Task> List<T> findAll(Class<T> reference);\n \n-    <T extends Task> List<T> findAll(int page, int itemsPerPage, Class<T> reference);\n+    <T extends Task> List<T> findAll(int page, int itemsPerPage, List<OrderByClause> orderByClauses,\n+            Class<T> reference);\n \n     <T extends Task> int count(Class<T> reference);\n "},{"sha":"1f3d77a5653bc9c740cb51acaef3d4832774677f","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/UserDAO.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n public interface UserDAO extends AttributableDAO {\n@@ -42,10 +43,10 @@ public interface UserDAO extends AttributableDAO {\n \n     List<SyncopeUser> findByResource(ExternalResource resource);\n \n-    List<SyncopeUser> findAll(Set<Long> adminRoles);\n-\n     List<SyncopeUser> findAll(Set<Long> adminRoles, int page, int itemsPerPage);\n \n+    List<SyncopeUser> findAll(Set<Long> adminRoles, int page, int itemsPerPage, List<OrderByClause> orderBy);\n+\n     int count(Set<Long> adminRoles);\n \n     SyncopeUser save(SyncopeUser user) throws InvalidEntityException;"},{"sha":"f2312b8faa6cd679284e108d62c72235a3d34095","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AbstractAttributableDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractAttributableDAOImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -32,6 +32,7 @@\n import org.apache.commons.jexl2.parser.Parser;\n import org.apache.commons.jexl2.parser.ParserConstants;\n import org.apache.commons.jexl2.parser.Token;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractDerSchema;\n@@ -42,7 +43,6 @@\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.util.StringUtils;\n \n public abstract class AbstractAttributableDAOImpl extends AbstractDAOImpl implements AttributableDAO {\n \n@@ -93,7 +93,7 @@ private Set<String> getWhereClause(final String expression, final String value,\n \n         // Get schema names and literals\n         Token token;\n-        while ((token = parser.getNextToken()) != null && StringUtils.hasText(token.toString())) {\n+        while ((token = parser.getNextToken()) != null && StringUtils.isNotBlank(token.toString())) {\n             if (token.kind == ParserConstants.STRING_LITERAL) {\n                 literals.add(token.toString().substring(1, token.toString().length() - 1));\n             }"},{"sha":"6a0cfa5d44e6a82c85f1cce98e85dff7dafdbc3a","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":21,"deletions":2,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -18,14 +18,17 @@\n  */\n package org.apache.syncope.core.persistence.dao.impl;\n \n+import java.util.List;\n import javax.persistence.CacheRetrieveMode;\n import javax.persistence.CacheStoreMode;\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n import javax.persistence.PersistenceContextType;\n \n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.core.persistence.beans.AbstractBaseBean;\n import org.apache.syncope.core.persistence.dao.DAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Configurable;\n@@ -39,9 +42,9 @@ public abstract class AbstractDAOImpl implements DAO {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractDAOImpl.class);\n \n-    private String CACHE_STORE_MODE = \"javax.persistence.cache.storeMode\";\n+    private final String CACHE_STORE_MODE = \"javax.persistence.cache.storeMode\";\n \n-    private String CACHE_RETRIEVE_MODE = \"javax.persistence.cache.retrieveMode\";\n+    private final String CACHE_RETRIEVE_MODE = \"javax.persistence.cache.retrieveMode\";\n \n     @Value(\"#{entityManager}\")\n     @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n@@ -71,6 +74,22 @@ protected void setCacheStoreMode(final CacheStoreMode storeMode) {\n         }\n     }\n \n+    protected String toOrderByStatement(final String prefix, final List<OrderByClause> orderByClauses) {\n+        StringBuilder statement = new StringBuilder();\n+\n+        for (OrderByClause clause : orderByClauses) {\n+            if (StringUtils.isNotBlank(prefix)) {\n+                statement.append(prefix).append('.');\n+            }\n+            statement.append(clause.getField().trim()).append(' ').append(clause.getDirection().name());\n+        }\n+\n+        if (statement.length() > 0) {\n+            statement.insert(0, \"ORDER BY \");\n+        }\n+        return statement.toString();\n+    }\n+\n     @Override\n     public <T extends AbstractBaseBean> void refresh(final T entity) {\n         entityManager.refresh(entity);"},{"sha":"3f008feb0bf53c4a5eb41e75125e53b0de97cf07","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/ReportDAOImpl.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -18,13 +18,15 @@\n  */\n package org.apache.syncope.core.persistence.dao.impl;\n \n+import java.util.Collections;\n import java.util.List;\n \n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n \n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n@@ -40,13 +42,14 @@ public Report find(final Long id) {\n \n     @Override\n     public List<Report> findAll() {\n-        return findAll(-1, -1);\n+        return findAll(-1, -1, Collections.<OrderByClause>emptyList());\n     }\n \n     @Override\n-    public List<Report> findAll(final int page, final int itemsPerPage) {\n+    public List<Report> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n         final TypedQuery<Report> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + Report.class.getSimpleName() + \" e\", Report.class);\n+                \"SELECT e FROM \" + Report.class.getSimpleName() + \" e \" + toOrderByStatement(\"e\", orderByClauses),\n+                Report.class);\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n                 ? 0"},{"sha":"48c131c4829e26bd63c0cef694507449ba26ed9d","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":7,"deletions":5,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.persistence.dao.VirAttrDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -277,13 +278,14 @@ public List<SyncopeRole> findByResource(final ExternalResource resource) {\n \n     @Override\n     public List<SyncopeRole> findAll() {\n-        return findAll(-1, -1);\n+        return findAll(-1, -1, Collections.<OrderByClause>emptyList());\n     }\n \n     @Override\n-    public List<SyncopeRole> findAll(final int page, final int itemsPerPage) {\n+    public List<SyncopeRole> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n         TypedQuery<SyncopeRole> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + SyncopeRole.class.getSimpleName() + \" e\", SyncopeRole.class);\n+                \"SELECT e FROM \" + SyncopeRole.class.getSimpleName() + \" e \" + toOrderByStatement(\"e\", orderBy),\n+                SyncopeRole.class);\n \n         query.setFirstResult(itemsPerPage * (page <= 0\n                 ? 0\n@@ -299,8 +301,8 @@ public List<SyncopeRole> findAll(final int page, final int itemsPerPage) {\n     @Override\n     public List<Membership> findMemberships(final SyncopeRole role) {\n         TypedQuery<Membership> query = entityManager.createQuery(\n-                \"SELECT e FROM \" + Membership.class.getSimpleName() + \" e\"\n-                + \" WHERE e.syncopeRole=:role\", Membership.class);\n+                \"SELECT e FROM \" + Membership.class.getSimpleName() + \" e\" + \" WHERE e.syncopeRole=:role\",\n+                Membership.class);\n         query.setParameter(\"role\", role);\n \n         return query.getResultList();"},{"sha":"a58e5c8b91793f4f29ef84022c497ad352562d1a","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":10,"deletions":4,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.dao.impl;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n@@ -28,6 +29,7 @@\n import org.apache.syncope.core.persistence.beans.SyncTask;\n import org.apache.syncope.core.persistence.beans.Task;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n \n@@ -93,13 +95,17 @@ public <T extends Task> List<T> findAll(final ExternalResource resource, final C\n \n     @Override\n     public <T extends Task> List<T> findAll(final Class<T> reference) {\n-        return findAll(-1, -1, reference);\n+        return findAll(-1, -1, Collections.<OrderByClause>emptyList(), reference);\n     }\n \n     @Override\n-    public <T extends Task> List<T> findAll(final int page, final int itemsPerPage, final Class<T> reference) {\n+    public <T extends Task> List<T> findAll(final int page, final int itemsPerPage,\n+            final List<OrderByClause> orderByClauses, final Class<T> reference) {\n+\n         StringBuilder queryString = buildfindAllQuery(reference);\n-        queryString.append(\"ORDER BY e.id DESC\");\n+        queryString.append(orderByClauses.isEmpty()\n+                ? \"ORDER BY e.id DESC\"\n+                : toOrderByStatement(\"e\", orderByClauses));\n \n         final TypedQuery<T> query = entityManager.createQuery(queryString.toString(), reference);\n \n@@ -122,7 +128,7 @@ public <T extends Task> int count(final Class<T> reference) {\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(rollbackFor = { Throwable.class })\n     @Override\n     public <T extends Task> T save(final T task) {\n         return entityManager.merge(task);"},{"sha":"b94483aac3da47c967b6aa00cec1e2d191849bb4","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":21,"deletions":63,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -18,11 +18,10 @@\n  */\n package org.apache.syncope.core.persistence.dao.impl;\n \n-import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n import javax.persistence.NoResultException;\n-import javax.persistence.Query;\n import javax.persistence.TypedQuery;\n \n import org.apache.syncope.common.types.AttributableType;\n@@ -33,15 +32,23 @@\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.beans.user.UAttrValue;\n+import org.apache.syncope.core.persistence.dao.AttributableSearchDAO;\n import org.apache.syncope.core.persistence.dao.RoleDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n+import org.apache.syncope.core.persistence.dao.search.AttributableCond;\n+import org.apache.syncope.core.persistence.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n \n @Repository\n public class UserDAOImpl extends AbstractAttributableDAOImpl implements UserDAO {\n \n+    @Autowired\n+    private AttributableSearchDAO searchDAO;\n+\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -132,77 +139,28 @@ public List<SyncopeUser> findByResource(final ExternalResource resource) {\n         return findByResource(resource, SyncopeUser.class);\n     }\n \n-    private StringBuilder getFindAllQuery(final Set<Long> adminRoles) {\n-        final StringBuilder queryString = new StringBuilder(\"SELECT id FROM SyncopeUser WHERE id NOT IN (\");\n-\n-        if (adminRoles == null || adminRoles.isEmpty()) {\n-            queryString.append(\"SELECT syncopeUser_id AS id FROM Membership\");\n-        } else {\n-            queryString.append(\"SELECT syncopeUser_id FROM Membership M1 \").append(\"WHERE syncopeRole_id IN (\");\n-            queryString.append(\"SELECT syncopeRole_id FROM Membership M2 \").append(\n-                    \"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").append(\"AND syncopeRole_id NOT IN (\");\n-\n-            queryString.append(\"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n-            boolean firstRole = true;\n-            for (Long adminRoleId : adminRoles) {\n-                if (firstRole) {\n-                    queryString.append(\" WHERE\");\n-                    firstRole = false;\n-                } else {\n-                    queryString.append(\" OR\");\n-                }\n-\n-                queryString.append(\" id=\").append(adminRoleId);\n-            }\n-\n-            queryString.append(\"))\");\n-        }\n-        queryString.append(\")\");\n-\n-        return queryString;\n+    @Override\n+    public final List<SyncopeUser> findAll(final Set<Long> adminRoles, final int page, final int itemsPerPage) {\n+        return findAll(adminRoles, page, itemsPerPage, Collections.<OrderByClause>emptyList());\n     }\n \n-    @Override\n-    public final List<SyncopeUser> findAll(final Set<Long> adminRoles) {\n-        return findAll(adminRoles, -1, -1);\n+    private SearchCond getAllMatchingCond() {\n+        AttributableCond idCond = new AttributableCond(AttributeCond.Type.ISNOTNULL);\n+        idCond.setSchema(\"id\");\n+        return SearchCond.getLeafCond(idCond);\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n     @Override\n-    public final List<SyncopeUser> findAll(final Set<Long> adminRoles, final int page, final int itemsPerPage) {\n-        final Query query = entityManager.createNativeQuery(getFindAllQuery(adminRoles).toString());\n-\n-        query.setFirstResult(itemsPerPage * (page <= 0\n-                ? 0\n-                : page - 1));\n-\n-        if (itemsPerPage > 0) {\n-            query.setMaxResults(itemsPerPage);\n-        }\n-\n-        List<SyncopeUser> result = new ArrayList<SyncopeUser>();\n+    public List<SyncopeUser> findAll(final Set<Long> adminRoles,\n+            final int page, final int itemsPerPage, final List<OrderByClause> orderBy) {\n \n-        for (Object userId : query.getResultList()) {\n-            SyncopeUser user = findInternal(((Number) userId).longValue());\n-            if (user == null) {\n-                LOG.error(\"Could not find user with id {}, even though returned by the native query\", userId);\n-            } else {\n-                result.add(user);\n-            }\n-        }\n-\n-        return result;\n+        return searchDAO.search(adminRoles, getAllMatchingCond(), page, itemsPerPage, orderBy,\n+                AttributableUtil.getInstance(AttributableType.USER));\n     }\n \n     @Override\n     public final int count(final Set<Long> adminRoles) {\n-        StringBuilder queryString = getFindAllQuery(adminRoles);\n-        queryString.insert(0, \"SELECT COUNT(id) FROM (\");\n-        queryString.append(\") count_user_id\");\n-\n-        Query countQuery = entityManager.createNativeQuery(queryString.toString());\n-\n-        return ((Number) countQuery.getSingleResult()).intValue();\n+        return searchDAO.count(adminRoles, getAllMatchingCond(), AttributableUtil.getInstance(AttributableType.USER));\n     }\n \n     @Override"},{"sha":"f83726493a59a59c31715b192cf617ebcf1ad9f5","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -51,6 +51,7 @@\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n import org.apache.syncope.core.persistence.dao.ReportExecDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.report.Reportlet;\n import org.apache.syncope.core.report.cocoon.TextSerializer;\n import org.apache.syncope.core.rest.data.ReportDataBinder;\n@@ -129,8 +130,8 @@ public int count() {\n     }\n \n     @PreAuthorize(\"hasRole('REPORT_LIST')\")\n-    public List<ReportTO> list(final int page, final int size) {\n-        List<Report> reports = reportDAO.findAll(page, size);\n+    public List<ReportTO> list(final int page, final int size, final List<OrderByClause> orderByClauses) {\n+        List<Report> reports = reportDAO.findAll(page, size, orderByClauses);\n         List<ReportTO> result = new ArrayList<ReportTO>(reports.size());\n         for (Report report : reports) {\n             result.add(binder.getReportTO(report));"},{"sha":"a31862febec62277e33b21c924f8d45938c42f9e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -181,8 +181,8 @@ public int count() {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n-    public List<RoleTO> list(final int page, final int size) {\n-        List<SyncopeRole> roles = roleDAO.findAll(page, size);\n+    public List<RoleTO> list(final int page, final int size, final List<OrderByClause> orderBy) {\n+        List<SyncopeRole> roles = roleDAO.findAll(page, size, orderBy);\n \n         List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n         for (SyncopeRole role : roles) {"},{"sha":"8644ebb821daa2a009ab0d9045bfc829a43d2c88","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/TaskController.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -46,6 +46,7 @@\n import org.apache.syncope.core.persistence.dao.NotFoundException;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.persistence.dao.TaskExecDAO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.quartz.AbstractTaskJob;\n import org.apache.syncope.core.rest.data.TaskDataBinder;\n@@ -142,10 +143,12 @@ public int count(final TaskType taskType) {\n \n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType, final int page, final int size) {\n+    public <T extends AbstractTaskTO> List<T> list(final TaskType taskType,\n+            final int page, final int size, final List<OrderByClause> orderByClauses) {\n+\n         TaskUtil taskUtil = TaskUtil.getInstance(taskType);\n \n-        List<Task> tasks = taskDAO.findAll(page, size, taskUtil.taskClass());\n+        List<Task> tasks = taskDAO.findAll(page, size, orderByClauses, taskUtil.taskClass());\n         List<T> taskTOs = new ArrayList<T>(tasks.size());\n         for (Task task : tasks) {\n             taskTOs.add((T) binder.getTaskTO(task, taskUtil));"},{"sha":"72c3275443b4bb2df6745673c7141a67928160d7","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -127,10 +127,10 @@ public int searchCount(final SearchCond searchCondition) {\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n-    public List<UserTO> list(final int page, final int size) {\n+    public List<UserTO> list(final int page, final int size, final List<OrderByClause> orderBy) {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n-        List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size);\n+        List<SyncopeUser> users = userDAO.findAll(adminRoleIds, page, size, orderBy);\n         List<UserTO> userTOs = new ArrayList<UserTO>(users.size());\n         for (SyncopeUser user : users) {\n             userTOs.add(binder.getUserTO(user));"},{"sha":"f693f19ada572bb9465f267bd01ff99b11fadf67","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":14,"deletions":2,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.common.wrap.ReportletConfClass;\n import org.apache.syncope.core.persistence.beans.ReportExec;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n import org.apache.syncope.core.rest.controller.ReportController;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n@@ -60,13 +61,24 @@ public void update(final Long reportId, final ReportTO reportTO) {\n \n     @Override\n     public PagedResult<ReportTO> list() {\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public PagedResult<ReportTO> list(final String orderBy) {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n     }\n \n     @Override\n     public PagedResult<ReportTO> list(final int page, final int size) {\n+        return list(page, size, null);\n+    }\n+\n+    @Override\n+    public PagedResult<ReportTO> list(final int page, final int size, final String orderBy) {\n         checkPageSize(page, size);\n-        return buildPagedResult(controller.list(page, size), page, size, controller.count());\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(controller.list(page, size, orderByClauses), page, size, controller.count());\n     }\n \n     @Override"},{"sha":"088ef1cbc2a64c95e35ecb7836f04b389cb0d0c0","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"modified","additions":13,"deletions":2,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -69,13 +69,24 @@ public Response delete(final Long roleId) {\n \r\n     @Override\r\n     public PagedResult<RoleTO> list() {\r\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\r\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\r\n+    }\r\n+\r\n+    @Override\r\n+    public PagedResult<RoleTO> list(final String orderBy) {\r\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\r\n     }\r\n \r\n     @Override\r\n     public PagedResult<RoleTO> list(final int page, final int size) {\r\n+        return list(page, size, null);\r\n+    }\r\n+\r\n+    @Override\r\n+    public PagedResult<RoleTO> list(final int page, final int size, final String orderBy) {\r\n         checkPageSize(page, size);\r\n-        return buildPagedResult(controller.list(page, size), page, size, controller.count());\r\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\r\n+        return buildPagedResult(controller.list(page, size, orderByClauses), page, size, controller.count());\r\n     }\r\n \r\n     @Override\r"},{"sha":"0bfeb79a68c7c49373fe2571d0e1683b376703b7","filename":"core/src/main/java/org/apache/syncope/core/services/TaskServiceImpl.java","status":"modified","additions":17,"deletions":3,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FTaskServiceImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n import org.apache.syncope.common.types.TaskType;\r\n import org.apache.syncope.common.util.CollectionWrapper;\r\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\r\n import org.apache.syncope.core.rest.controller.TaskController;\r\n import org.springframework.beans.factory.annotation.Autowired;\r\n import org.springframework.stereotype.Service;\r\n@@ -89,15 +90,28 @@ public List<SyncActionClass> getSyncActionsClasses() {\n \r\n     @Override\r\n     public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType) {\r\n-        return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\r\n+        return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\r\n+    }\r\n+\r\n+    @Override\r\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType, final String orderBy) {\r\n+        return list(taskType, DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\r\n     }\r\n \r\n     @Override\r\n-    @SuppressWarnings(\"unchecked\")\r\n     public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType, final int page, final int size) {\r\n+        return list(taskType, page, size, null);\r\n+    }\r\n+\r\n+    @Override\r\n+    @SuppressWarnings(\"unchecked\")\r\n+    public <T extends AbstractTaskTO> PagedResult<T> list(final TaskType taskType,\r\n+            final int page, final int size, final String orderBy) {\r\n+\r\n         checkPageSize(page, size);\r\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\r\n         return (PagedResult<T>) buildPagedResult(\r\n-                controller.list(taskType, page, size), page, size, controller.count(taskType));\r\n+                controller.list(taskType, page, size, orderByClauses), page, size, controller.count(taskType));\r\n     }\r\n \r\n     @Override\r"},{"sha":"436c0e6c3b0cc870fabf1d5190a855a085abe0c8","filename":"core/src/main/java/org/apache/syncope/core/services/UserServiceImpl.java","status":"modified","additions":13,"deletions":4,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FUserServiceImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.services;\n \n-import static org.apache.syncope.common.services.JAXRSService.DEFAULT_PARAM_PAGE_VALUE;\n-import static org.apache.syncope.common.services.JAXRSService.DEFAULT_PARAM_SIZE_VALUE;\n import java.util.List;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.HttpHeaders;\n@@ -83,13 +81,24 @@ public Response delete(final Long userId) {\n \n     @Override\n     public PagedResult<UserTO> list() {\n-        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE);\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, null);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> list(final String orderBy) {\n+        return list(DEFAULT_PARAM_PAGE_VALUE, DEFAULT_PARAM_SIZE_VALUE, orderBy);\n     }\n \n     @Override\n     public PagedResult<UserTO> list(final int page, final int size) {\n+        return list(page, size, null);\n+    }\n+\n+    @Override\n+    public PagedResult<UserTO> list(final int page, final int size, final String orderBy) {\n         checkPageSize(page, size);\n-        return buildPagedResult(controller.list(page, size), page, size, controller.count());\n+        List<OrderByClause> orderByClauses = getOrderByClauses(orderBy);\n+        return buildPagedResult(controller.list(page, size, orderByClauses), page, size, controller.count());\n     }\n \n     @Override"},{"sha":"b6e69fc4d46c65c6ea1942278b8626b9f5aa29dd","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/activiti/SyncopeUserQueryImpl.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2Factiviti%2FSyncopeUserQueryImpl.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -169,9 +169,8 @@ private void execute(final int page, final int itemsPerPage) {\n         if (result == null) {\n             result = new ArrayList<User>();\n \n-            List<SyncopeUser> users = page == -1 && itemsPerPage == -1\n-                    ? userDAO.findAll(EntitlementUtil.getRoleIds(entitlementDAO.findAll()))\n-                    : userDAO.findAll(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), page, itemsPerPage);\n+            List<SyncopeUser> users =\n+                    userDAO.findAll(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), page, itemsPerPage);\n             for (SyncopeUser user : users) {\n                 result.add(fromSyncopeUser(user));\n             }"},{"sha":"6d62aff03bebc26562c1514df6e3af3aeb0fd79f","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=dc9a5a8594e7b6dc377c9b42bfa4fbaea449fd7d","patch":"@@ -46,7 +46,7 @@ public class UserTest extends AbstractDAOTest {\n \n     @Test\n     public void findAll() {\n-        List<SyncopeUser> list = userDAO.findAll(EntitlementUtil.getRoleIds(entitlementDAO.findAll()));\n+        List<SyncopeUser> list = userDAO.findAll(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), 1, 100);\n         assertEquals(\"did not get expected number of users \", 5, list.size());\n     }\n "}]}