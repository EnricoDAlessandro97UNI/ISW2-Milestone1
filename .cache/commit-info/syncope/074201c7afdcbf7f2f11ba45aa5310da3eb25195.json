{"sha":"074201c7afdcbf7f2f11ba45aa5310da3eb25195","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA3NDIwMWM3YWZkY2JmN2YyZjExYmE0NWFhNTMxMGRhM2ViMjUxOTU=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-04-04T11:34:15Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2012-04-04T11:34:15Z"},"message":"SYNCOPE-52 #comment NotificationManager used to execute user search without admin role entitlements\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1309335 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"f36edd4a01e20d5998c8013f98c73ee3bc90166e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/f36edd4a01e20d5998c8013f98c73ee3bc90166e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/074201c7afdcbf7f2f11ba45aa5310da3eb25195","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/074201c7afdcbf7f2f11ba45aa5310da3eb25195","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/074201c7afdcbf7f2f11ba45aa5310da3eb25195","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/074201c7afdcbf7f2f11ba45aa5310da3eb25195/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"98226ba7a0c93866765f172a00b9fdbf3a84aba9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/98226ba7a0c93866765f172a00b9fdbf3a84aba9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/98226ba7a0c93866765f172a00b9fdbf3a84aba9"}],"stats":{"total":174,"additions":97,"deletions":77},"files":[{"sha":"2fd6a625cf6715d8dbb6b5e697531b2b49417084","filename":"core/src/main/java/org/syncope/core/notification/NotificationManager.java","status":"modified","additions":31,"deletions":7,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=074201c7afdcbf7f2f11ba45aa5310da3eb25195","patch":"@@ -41,12 +41,15 @@\n import org.syncope.core.persistence.beans.user.UDerAttr;\n import org.syncope.core.persistence.beans.user.UVirAttr;\n import org.syncope.core.persistence.dao.ConfDAO;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.dao.NotificationDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n+import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.persistence.dao.UserSearchDAO;\n import org.syncope.core.scheduling.NotificationJob;\n import org.syncope.core.util.ConnObjectUtil;\n+import org.syncope.core.util.EntitlementUtil;\n import org.syncope.core.workflow.WorkflowResult;\n import org.syncope.types.IntMappingType;\n \n@@ -93,6 +96,12 @@ public class NotificationManager {\n     @Autowired\n     private TaskDAO taskDAO;\n \n+    /**\n+     * TaskExec DAO.\n+     */\n+    @Autowired\n+    private TaskExecDAO taskExecDAO;\n+\n     /**\n      * Velocity template engine.\n      */\n@@ -102,8 +111,12 @@ public class NotificationManager {\n     @Autowired\n     private NotificationJob notificationJob;\n \n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n     @Autowired\n     private ConnObjectUtil connObjectUtil;\n+\n     /**\n      * Create a notification task.\n      *\n@@ -115,12 +128,10 @@ public class NotificationManager {\n     private NotificationTask getNotificationTask(final Notification notification, final SyncopeUser user) {\n \n         connObjectUtil.retrieveVirAttrValues(user);\n-        \n-        final IntMappingType recipientAttrType = notification.getRecipientAttrType();\n-        final String recipientAttrName = notification.getRecipientAttrName();\n \n         final List<SyncopeUser> recipients = new ArrayList<SyncopeUser>();\n-        recipients.addAll(searchDAO.search(notification.getRecipients()));\n+        recipients.addAll(\n+                searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), notification.getRecipients()));\n \n         if (notification.isSelfAsRecipient()) {\n             recipients.add(user);\n@@ -129,13 +140,14 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n         Set<String> recipientEmails = new HashSet<String>();\n \n         for (SyncopeUser recipient : recipients) {\n-            \n+\n             connObjectUtil.retrieveVirAttrValues(recipient);\n \n-            String email = getRecipientEmail(recipientAttrType, recipientAttrName, user);\n+            String email = getRecipientEmail(\n+                    notification.getRecipientAttrType(), notification.getRecipientAttrName(), recipient);\n \n             if (email == null) {\n-                LOG.error(\"{} cannot be notified. No {} attribute present\", recipient, recipientAttrName);\n+                LOG.warn(\"{} cannot be notified: {} not found\", recipient, notification.getRecipientAttrName());\n             } else {\n                 recipientEmails.add(email);\n             }\n@@ -236,4 +248,16 @@ private String getRecipientEmail(\n \n         return email;\n     }\n+\n+    /**\n+     * Execute TaskExec persist within a transaction.\n+     *\n+     * @param execution task execution.\n+     * @return merged task execution.\n+     */\n+    public TaskExec storeExecution(TaskExec execution) {\n+        NotificationTask task = taskDAO.find(execution.getTask().getId());\n+        task.addExec(execution);\n+        return taskExecDAO.save(execution);\n+    }\n }"},{"sha":"8254052e10e8e6481d406b2e5599c168af31af54","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserSearchDAO.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java?ref=074201c7afdcbf7f2f11ba45aa5310da3eb25195","patch":"@@ -32,12 +32,6 @@ public interface UserSearchDAO extends DAO {\n      */\n     int count(Set<Long> adminRoles, NodeCond searchCondition);\n \n-    /**\n-     * @param searchCondition the search condition\n-     * @return the list of users matchin the given search condition\n-     */\n-    List<SyncopeUser> search(NodeCond searchCondition);\n-\n     /**\n      * @param adminRoles the set of admin roles owned by the caller\n      * @param searchCondition the search condition\n@@ -56,6 +50,7 @@ public interface UserSearchDAO extends DAO {\n \n     /**\n      * Verify if user matched the given search condition.\n+     *\n      * @param user to be checked\n      * @param searchCondition to be verified\n      * @return true if user matched searchCondition"},{"sha":"1263629627e98fd21d90a23e3743e34f62e648f0","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":34,"deletions":38,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=074201c7afdcbf7f2f11ba45aa5310da3eb25195","patch":"@@ -20,12 +20,10 @@\n \n import java.lang.reflect.Field;\n import java.util.ArrayList;\n-import java.util.Calendar;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n-import java.util.Random;\n import java.util.Set;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n@@ -62,28 +60,29 @@ public UserSearchDAOImpl() {\n \n     private String getAdminRolesFilter(final Set<Long> adminRoles) {\n         final StringBuilder adminRolesFilter = new StringBuilder();\n-        if (adminRoles == null || adminRoles.isEmpty()) {\n-            adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").append(\"FROM Membership\");\n-        } else {\n-            adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").append(\"FROM Membership M1 \").append(\n-                    \"WHERE syncopeRole_id IN (\");\n-            adminRolesFilter.append(\"SELECT syncopeRole_id \").append(\"FROM Membership M2 \").append(\n-                    \"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").append(\"AND syncopeRole_id NOT IN (\");\n-            adminRolesFilter.append(\"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n-            boolean firstRole = true;\n-            for (Long adminRoleId : adminRoles) {\n-                if (firstRole) {\n-                    adminRolesFilter.append(\" WHERE\");\n-                    firstRole = false;\n-                } else {\n-                    adminRolesFilter.append(\" OR\");\n-                }\n \n-                adminRolesFilter.append(\" id=\").append(adminRoleId);\n+        adminRolesFilter.append(\"SELECT syncopeUser_id AS user_id \").append(\"FROM Membership M1 \").\n+                append(\"WHERE syncopeRole_id IN (\");\n+\n+        adminRolesFilter.append(\"SELECT syncopeRole_id \").append(\"FROM Membership M2 \").\n+                append(\"WHERE M2.syncopeUser_id=M1.syncopeUser_id \").append(\"AND syncopeRole_id NOT IN (\");\n+\n+        adminRolesFilter.append(\"SELECT id AS syncopeRole_id FROM SyncopeRole\");\n+\n+        boolean firstRole = true;\n+\n+        for (Long adminRoleId : adminRoles) {\n+            if (firstRole) {\n+                adminRolesFilter.append(\" WHERE\");\n+                firstRole = false;\n+            } else {\n+                adminRolesFilter.append(\" OR\");\n             }\n-            adminRolesFilter.append(\"))\");\n+            adminRolesFilter.append(\" id=\").append(adminRoleId);\n         }\n \n+        adminRolesFilter.append(\"))\");\n+\n         return adminRolesFilter.toString();\n     }\n \n@@ -115,31 +114,28 @@ public int count(final Set<Long> adminRoles, final NodeCond searchCondition) {\n         return result;\n     }\n \n-    @Override\n-    public List<SyncopeUser> search(final NodeCond searchCondition) {\n-        return search(null, searchCondition, -1, -1);\n-    }\n-\n     @Override\n     public List<SyncopeUser> search(final Set<Long> adminRoles, final NodeCond searchCondition) {\n-\n         return search(adminRoles, searchCondition, -1, -1);\n     }\n \n     @Override\n-    public List<SyncopeUser> search(final Set<Long> adminRoles, final NodeCond searchCondition, final int page,\n-            final int itemsPerPage) {\n+    public List<SyncopeUser> search(\n+            final Set<Long> adminRoles, final NodeCond searchCondition, final int page, final int itemsPerPage) {\n \n         List<SyncopeUser> result = Collections.EMPTY_LIST;\n \n-        LOG.debug(\"Search condition:\\n{}\", searchCondition);\n-        if (!searchCondition.checkValidity()) {\n-            LOG.error(\"Invalid search condition:\\n{}\", searchCondition);\n-        } else {\n-            try {\n-                result = doSearch(adminRoles, searchCondition, page, itemsPerPage);\n-            } catch (Throwable t) {\n-                LOG.error(\"While searching users\", t);\n+        if (adminRoles != null && !adminRoles.isEmpty()) {\n+            LOG.debug(\"Search condition:\\n{}\", searchCondition);\n+\n+            if (!searchCondition.checkValidity()) {\n+                LOG.error(\"Invalid search condition:\\n{}\", searchCondition);\n+            } else {\n+                try {\n+                    result = doSearch(adminRoles, searchCondition, page, itemsPerPage);\n+                } catch (Throwable t) {\n+                    LOG.error(\"While searching users\", t);\n+                }\n             }\n         }\n \n@@ -196,8 +192,8 @@ private void fillWithParameters(final Query query, final List<Object> parameters\n         }\n     }\n \n-    private List<SyncopeUser> doSearch(final Set<Long> adminRoles, final NodeCond nodeCond, final int page,\n-            final int itemsPerPage) {\n+    private List<SyncopeUser> doSearch(\n+            final Set<Long> adminRoles, final NodeCond nodeCond, final int page, final int itemsPerPage) {\n \n         List<Object> parameters = Collections.synchronizedList(new ArrayList<Object>());\n "},{"sha":"a9c390f60f3af4799aadc272e4af8d8dfe872e0e","filename":"core/src/main/java/org/syncope/core/scheduling/NotificationJob.java","status":"modified","additions":7,"deletions":11,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java?ref=074201c7afdcbf7f2f11ba45aa5310da3eb25195","patch":"@@ -32,11 +32,11 @@\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n import org.springframework.mail.javamail.MimeMessageHelper;\n import org.syncope.core.audit.AuditManager;\n+import org.syncope.core.notification.NotificationManager;\n import org.syncope.core.persistence.beans.NotificationTask;\n import org.syncope.core.persistence.beans.TaskExec;\n import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n-import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.types.AuditElements.Category;\n import org.syncope.types.AuditElements.NotificationSubCategory;\n import org.syncope.types.AuditElements.Result;\n@@ -53,7 +53,6 @@ enum Status {\n \n         SENT,\n         NOT_SENT\n-\n     }\n \n     /**\n@@ -64,17 +63,14 @@ enum Status {\n     @Autowired\n     private AuditManager auditManager;\n \n-    /**\n-     * Task DAO.\n-     */\n     @Autowired\n-    private TaskDAO taskDAO;\n+    private NotificationManager notificationManager;\n \n     /**\n-     * Task execution DAO.\n+     * Task DAO.\n      */\n     @Autowired\n-    private TaskExecDAO taskExecDAO;\n+    private TaskDAO taskDAO;\n \n     /**\n      * Configuration DAO.\n@@ -204,19 +200,19 @@ public TaskExec executeSingle(final NotificationTask task) {\n         }\n \n         if (hasToBeRegistered(execution)) {\n-            execution = taskExecDAO.save(execution);\n+            execution = notificationManager.storeExecution(execution);\n         }\n \n         return execution;\n     }\n \n     @Override\n-    public void execute(final JobExecutionContext context) throws JobExecutionException {\n+    public void execute(final JobExecutionContext context)\n+            throws JobExecutionException {\n \n         LOG.debug(\"Waking up...\");\n \n         for (NotificationTask task : taskDAO.findWithoutExecs(NotificationTask.class)) {\n-\n             executeSingle(task);\n         }\n "},{"sha":"a2fe7642125a74c4ebd1984888345cc5fccbdf59","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":24,"deletions":15,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/074201c7afdcbf7f2f11ba45aa5310da3eb25195/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=074201c7afdcbf7f2f11ba45aa5310da3eb25195","patch":"@@ -80,7 +80,8 @@ public void searchWithLikeCondition() {\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(membershipCond));\n+        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(\n+                membershipCond));\n \n         assertTrue(subCond.checkValidity());\n \n@@ -142,7 +143,8 @@ public void searchByPageAndSize() {\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(membershipCond));\n+        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(\n+                membershipCond));\n \n         assertTrue(subCond.checkValidity());\n \n@@ -164,14 +166,16 @@ public void searchByMembership() {\n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(1L);\n \n-        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(membershipCond));\n+        List<SyncopeUser> users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(membershipCond));\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n         membershipCond = new MembershipCond();\n         membershipCond.setRoleId(5L);\n \n-        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getNotLeafCond(membershipCond));\n+        users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getNotLeafCond(membershipCond));\n         assertNotNull(users);\n         assertEquals(4, users.size());\n     }\n@@ -181,14 +185,16 @@ public void searchByIsNull() {\n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.ISNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(coolLeafCond));\n+        List<SyncopeUser> users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(coolLeafCond));\n         assertNotNull(users);\n         assertEquals(3, users.size());\n \n         coolLeafCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(coolLeafCond));\n+        users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(coolLeafCond));\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -205,8 +211,8 @@ public void searchByResource() {\n \n         assertTrue(searchCondition.checkValidity());\n \n-        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n-                searchCondition);\n+        List<SyncopeUser> users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition);\n \n         assertNotNull(users);\n         assertEquals(1, users.size());\n@@ -222,7 +228,8 @@ public void searchByUsernameAndId() {\n         idRightCond.setSchema(\"id\");\n         idRightCond.setExpression(\"2\");\n \n-        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond.getLeafCond(idRightCond));\n+        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(idRightCond));\n \n         final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition);\n@@ -243,10 +250,11 @@ public void searchByUsernameAndFullname() {\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"fabio.mart%\");\n \n-        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond.getLeafCond(idRightCond));\n+        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond),\n+                NodeCond.getLeafCond(idRightCond));\n \n-        final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n-                searchCondition);\n+        final List<SyncopeUser> matchingUsers =\n+                searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition);\n \n         assertNotNull(matchingUsers);\n         assertEquals(2, matchingUsers.size());\n@@ -261,8 +269,8 @@ public void searchById() {\n         NodeCond searchCondition = NodeCond.getLeafCond(idLeafCond);\n         assertTrue(searchCondition.checkValidity());\n \n-        List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n-                searchCondition);\n+        List<SyncopeUser> matchingUsers =\n+                searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), searchCondition);\n \n         assertNotNull(matchingUsers);\n         assertEquals(1, matchingUsers.size());\n@@ -290,7 +298,8 @@ public void issue202() {\n         final ResourceCond ws1 = new ResourceCond();\n         ws1.setResourceName(\"ws-target-resource-list-mappings-1\");\n \n-        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getNotLeafCond(ws1));\n+        final NodeCond searchCondition = \n+                NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getNotLeafCond(ws1));\n         assertTrue(searchCondition.checkValidity());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),"}]}