{"sha":"f99d10a1098cf948b39e8ad111183bced368a4e2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY5OWQxMGExMDk4Y2Y5NDhiMzllOGFkMTExMTgzYmNlZDM2OGE0ZTI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-01T13:27:37Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-01T13:27:37Z"},"message":"Removing Reflections\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247386 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"31e0fec6ffd63ee639a2ed8a1f2f81e6db7b0488","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/31e0fec6ffd63ee639a2ed8a1f2f81e6db7b0488"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f99d10a1098cf948b39e8ad111183bced368a4e2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f99d10a1098cf948b39e8ad111183bced368a4e2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f99d10a1098cf948b39e8ad111183bced368a4e2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f99d10a1098cf948b39e8ad111183bced368a4e2/comments","author":null,"committer":null,"parents":[{"sha":"aa35b24348d3e63086ed5c63ba94c48ddd9953a6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa35b24348d3e63086ed5c63ba94c48ddd9953a6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aa35b24348d3e63086ed5c63ba94c48ddd9953a6"}],"stats":{"total":319,"additions":194,"deletions":125},"files":[{"sha":"38c8a886223c1440fa9828a7d84262dbbde13abd","filename":"core/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f99d10a1098cf948b39e8ad111183bced368a4e2/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f99d10a1098cf948b39e8ad111183bced368a4e2/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=f99d10a1098cf948b39e8ad111183bced368a4e2","patch":"@@ -196,11 +196,6 @@\n             <scope>provided</scope>\n         </dependency>\n             \n-        <dependency>\n-            <groupId>org.reflections</groupId>\n-            <artifactId>reflections</artifactId>\n-        </dependency>\n-\n         <dependency>\n             <groupId>org.slf4j</groupId>\n             <artifactId>slf4j-api</artifactId>"},{"sha":"2fdd5da50710b2aa58f2dd1a2db89bb0df5b632d","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":63,"deletions":32,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f99d10a1098cf948b39e8ad111183bced368a4e2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f99d10a1098cf948b39e8ad111183bced368a4e2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=f99d10a1098cf948b39e8ad111183bced368a4e2","patch":"@@ -14,19 +14,21 @@\n  */\n package org.syncope.core.rest.controller;\n \n-import com.google.common.io.PatternFilenameFilter;\n import java.io.ByteArrayOutputStream;\n-import java.io.File;\n+import java.io.IOException;\n import java.lang.reflect.Modifier;\n-import java.net.URISyntaxException;\n import java.util.ArrayList;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n-import org.reflections.Reflections;\n+import org.apache.commons.lang.ArrayUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.type.ClassMetadata;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n@@ -39,6 +41,7 @@\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n+import org.syncope.core.persistence.validation.attrvalue.AbstractValidator;\n import org.syncope.core.persistence.validation.attrvalue.Validator;\n import org.syncope.core.rest.data.ConfigurationDataBinder;\n import org.syncope.core.util.ImportExport;\n@@ -56,6 +59,9 @@ public class ConfigurationController extends AbstractController {\n     @Autowired\n     private ImportExport importExport;\n \n+    @Autowired\n+    private ResourcePatternResolver resResolver;\n+\n     @PreAuthorize(\"hasRole('CONFIGURATION_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n@@ -109,10 +115,8 @@ public ConfigurationTO read(HttpServletResponse response,\n \n         ConfigurationTO result;\n         try {\n-            SyncopeConf syncopeConfiguration =\n-                    confDAO.find(key);\n-            result = configurationDataBinder.getConfigurationTO(\n-                    syncopeConfiguration);\n+            SyncopeConf conf = confDAO.find(key);\n+            result = configurationDataBinder.getConfigurationTO(conf);\n         } catch (MissingConfKeyException e) {\n             LOG.error(\"Could not find configuration key '\" + key\n                     + \"', returning null\");\n@@ -143,17 +147,37 @@ public ConfigurationTO update(final HttpServletResponse response,\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/validators\")\n     public ModelAndView getValidators() {\n-        Reflections reflections = new Reflections(\n-                \"org.syncope.core.persistence.validation\");\n-\n-        Set<Class<? extends Validator>> subTypes =\n-                reflections.getSubTypesOf(Validator.class);\n+        CachingMetadataReaderFactory cachingMetadataReaderFactory =\n+                new CachingMetadataReaderFactory();\n \n         Set<String> validators = new HashSet<String>();\n-        for (Class validatorClass : subTypes) {\n-            if (!Modifier.isAbstract(validatorClass.getModifiers())) {\n-                validators.add(validatorClass.getName());\n+        try {\n+            for (Resource resource : resResolver.getResources(\n+                    \"classpath:org/syncope/core/persistence/validation/\"\n+                    + \"attrvalue/*.class\")) {\n+\n+                ClassMetadata metadata =\n+                        cachingMetadataReaderFactory.getMetadataReader(\n+                        resource).getClassMetadata();\n+                if (ArrayUtils.contains(metadata.getInterfaceNames(),\n+                        Validator.class.getName())\n+                        || AbstractValidator.class.getName().equals(\n+                        metadata.getSuperClassName())) {\n+\n+                    try {\n+                        Class jobClass = Class.forName(metadata.getClassName());\n+                        if (!Modifier.isAbstract(jobClass.getModifiers())) {\n+                            validators.add(jobClass.getName());\n+                        }\n+                    } catch (ClassNotFoundException e) {\n+                        LOG.error(\"Could not load class {}\",\n+                                metadata.getClassName(), e);\n+                    }\n+                }\n             }\n+        } catch (IOException e) {\n+            LOG.error(\"While searching for class implementing {}\",\n+                    Validator.class.getName(), e);\n         }\n \n         return new ModelAndView().addObject(validators);\n@@ -162,27 +186,34 @@ public ModelAndView getValidators() {\n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/mailTemplates\")\n-    public ModelAndView getMailTemplates()\n-            throws URISyntaxException {\n-\n-        String[] templatesFiles = new File(getClass().getResource(\n-                \"/mailTemplates\").toURI()).list(\n-                new PatternFilenameFilter(\".*\\\\.vm\"));\n+    public ModelAndView getMailTemplates() {\n+        CachingMetadataReaderFactory cachingMetadataReaderFactory =\n+                new CachingMetadataReaderFactory();\n \n         Set<String> htmlTemplates = new HashSet<String>();\n         Set<String> textTemplates = new HashSet<String>();\n \n-        for (String templateFile : templatesFiles) {\n-            if (templateFile.endsWith(\".html.vm\")) {\n-                htmlTemplates.add(templateFile.substring(\n-                        0, templateFile.indexOf(\".html.vm\")));\n-            } else if (templateFile.endsWith(\".txt.vm\")) {\n-                textTemplates.add(templateFile.substring(\n-                        0, templateFile.indexOf(\".txt.vm\")));\n-            } else {\n-                LOG.warn(\"Unexpected file found: {}, ignoring...\",\n-                        templateFile);\n+        try {\n+            for (Resource resource : resResolver.getResources(\n+                    \"classpath:/mailTemplates/*.vm\")) {\n+\n+                String template = resource.getURL().toExternalForm();\n+                if (template.endsWith(\".html.vm\")) {\n+                    htmlTemplates.add(template.substring(\n+                            template.indexOf(\"mailTemplates/\") + 14,\n+                            template.indexOf(\".html.vm\")));\n+                } else if (template.endsWith(\".txt.vm\")) {\n+                    textTemplates.add(template.substring(\n+                            template.indexOf(\"mailTemplates/\") + 14,\n+                            template.indexOf(\".txt.vm\")));\n+                } else {\n+                    LOG.warn(\"Unexpected template found: {}, ignoring...\",\n+                            template);\n+                }\n             }\n+        } catch (IOException e) {\n+            LOG.error(\"While searching for class implementing {}\",\n+                    Validator.class.getName(), e);\n         }\n \n         // Only templates available both as HTML and TEXT are considered"},{"sha":"56053ed6ab8d0eb925ac8c6b0836d9effd436fa1","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":71,"deletions":38,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f99d10a1098cf948b39e8ad111183bced368a4e2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f99d10a1098cf948b39e8ad111183bced368a4e2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=f99d10a1098cf948b39e8ad111183bced368a4e2","patch":"@@ -14,23 +14,25 @@\n  */\n package org.syncope.core.rest.controller;\n \n+import java.io.IOException;\n import java.lang.reflect.Modifier;\n-import java.net.MalformedURLException;\n-import java.net.URL;\n import java.util.ArrayList;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang.ArrayUtils;\n import org.quartz.Job;\n import org.quartz.JobDataMap;\n import org.quartz.Scheduler;\n-import org.reflections.Reflections;\n-import org.reflections.util.ClasspathHelper;\n-import org.reflections.util.ConfigurationBuilder;\n+import org.quartz.StatefulJob;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.type.ClassMetadata;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n import org.springframework.http.HttpStatus;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -58,13 +60,13 @@\n import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.propagation.PropagationManager;\n import org.syncope.core.rest.data.TaskDataBinder;\n+import org.syncope.core.scheduling.AbstractJob;\n import org.syncope.core.scheduling.NotificationJob;\n import org.syncope.core.scheduling.SyncJob;\n+import org.syncope.core.scheduling.SyncJobActions;\n import org.syncope.core.util.TaskUtil;\n import org.syncope.types.PropagationMode;\n import org.syncope.types.PropagationTaskExecStatus;\n-import org.syncope.core.scheduling.AbstractJob;\n-import org.syncope.core.scheduling.SyncJobActions;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Controller\n@@ -92,6 +94,9 @@ public class TaskController extends AbstractController {\n     @Autowired\n     private SchedulerFactoryBean scheduler;\n \n+    @Autowired\n+    private ResourcePatternResolver resResolver;\n+\n     @PreAuthorize(\"hasRole('TASK_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create/sync\")\n@@ -249,33 +254,43 @@ public List<TaskExecTO> listExecutions(\n     @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/jobClasses\")\n-    public ModelAndView getJobClasses()\n-            throws MalformedURLException {\n-\n-        // this is needed because Job interface is not in the same classloader\n-        // as the current class\n-        List<URL> urls = new ArrayList<URL>();\n-        for (URL url : ClasspathHelper.forClassLoader()) {\n-            if (!url.toExternalForm().endsWith(\".jar\")\n-                    || url.toExternalForm().contains(\"quartz\")) {\n-\n-                urls.add(url);\n-            }\n-        }\n-        Reflections reflections = new Reflections(\n-                new ConfigurationBuilder().setUrls(urls));\n-\n-        Set<Class<? extends Job>> subTypes =\n-                reflections.getSubTypesOf(Job.class);\n+    public ModelAndView getJobClasses() {\n+        CachingMetadataReaderFactory cachingMetadataReaderFactory =\n+                new CachingMetadataReaderFactory();\n \n         Set<String> jobClasses = new HashSet<String>();\n-        for (Class jobClass : subTypes) {\n-            if (!Modifier.isAbstract(jobClass.getModifiers())\n-                    && !jobClass.equals(SyncJob.class)\n-                    && !jobClass.equals(NotificationJob.class)) {\n-\n-                jobClasses.add(jobClass.getName());\n+        try {\n+            for (Resource resource : resResolver.getResources(\n+                    \"classpath*:**/*.class\")) {\n+\n+                ClassMetadata metadata =\n+                        cachingMetadataReaderFactory.getMetadataReader(\n+                        resource).getClassMetadata();\n+                if (ArrayUtils.contains(metadata.getInterfaceNames(),\n+                        Job.class.getName())\n+                        || AbstractJob.class.getName().equals(\n+                        metadata.getSuperClassName())\n+                        || ArrayUtils.contains(metadata.getInterfaceNames(),\n+                        StatefulJob.class.getName())) {\n+\n+                    try {\n+                        Class jobClass = Class.forName(metadata.getClassName());\n+                        if (!Modifier.isAbstract(jobClass.getModifiers())\n+                                && !metadata.hasEnclosingClass()\n+                                && !jobClass.equals(SyncJob.class)\n+                                && !jobClass.equals(NotificationJob.class)) {\n+\n+                            jobClasses.add(jobClass.getName());\n+                        }\n+                    } catch (ClassNotFoundException e) {\n+                        LOG.error(\"Could not load class {}\",\n+                                metadata.getClassName(), e);\n+                    }\n+                }\n             }\n+        } catch (IOException e) {\n+            LOG.error(\"While searching for class implementing {}\",\n+                    Job.class.getName(), e);\n         }\n \n         ModelAndView result = new ModelAndView();\n@@ -287,16 +302,34 @@ public ModelAndView getJobClasses()\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/jobActionsClasses\")\n     public ModelAndView getJobActionClasses() {\n-        Reflections reflections = new Reflections(\"\");\n-\n-        Set<Class<? extends SyncJobActions>> subTypes =\n-                reflections.getSubTypesOf(SyncJobActions.class);\n+        CachingMetadataReaderFactory cachingMetadataReaderFactory =\n+                new CachingMetadataReaderFactory();\n \n         Set<String> jobActionsClasses = new HashSet<String>();\n-        for (Class jobClass : subTypes) {\n-            if (!Modifier.isAbstract(jobClass.getModifiers())) {\n-                jobActionsClasses.add(jobClass.getName());\n+        try {\n+            for (Resource resource : resResolver.getResources(\n+                    \"classpath*:**/*.class\")) {\n+\n+                ClassMetadata metadata =\n+                        cachingMetadataReaderFactory.getMetadataReader(\n+                        resource).getClassMetadata();\n+                if (ArrayUtils.contains(metadata.getInterfaceNames(),\n+                        SyncJobActions.class.getName())) {\n+\n+                    try {\n+                        Class jobClass = Class.forName(metadata.getClassName());\n+                        if (!Modifier.isAbstract(jobClass.getModifiers())) {\n+                            jobActionsClasses.add(jobClass.getName());\n+                        }\n+                    } catch (ClassNotFoundException e) {\n+                        LOG.error(\"Could not load class {}\",\n+                                metadata.getClassName(), e);\n+                    }\n+                }\n             }\n+        } catch (IOException e) {\n+            LOG.error(\"While searching for class implementing {}\",\n+                    SyncJobActions.class.getName(), e);\n         }\n \n         ModelAndView result = new ModelAndView();"},{"sha":"f535a984ecd5a982867c588c63b74f05c4586a6b","filename":"hibernate-enhancer/pom.xml","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f99d10a1098cf948b39e8ad111183bced368a4e2/hibernate-enhancer%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f99d10a1098cf948b39e8ad111183bced368a4e2/hibernate-enhancer%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/hibernate-enhancer%2Fpom.xml?ref=f99d10a1098cf948b39e8ad111183bced368a4e2","patch":"@@ -30,15 +30,13 @@\n \n     <dependencies>\n         <dependency>\n-            <groupId>org.javassist</groupId>\n-            <artifactId>javassist</artifactId>\n-            <scope>compile</scope>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-core</artifactId>\n         </dependency>\n         \n         <dependency>\n-            <groupId>org.reflections</groupId>\n-            <artifactId>reflections</artifactId>\n-            <scope>compile</scope>\n+            <groupId>org.javassist</groupId>\n+            <artifactId>javassist</artifactId>\n         </dependency>\n         \n         <dependency>"},{"sha":"c558e4bbade929a814b1fd704db4e471716c8851","filename":"hibernate-enhancer/src/main/java/org/syncope/hibernate/HibernateEnhancer.java","status":"modified","additions":51,"deletions":25,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f99d10a1098cf948b39e8ad111183bced368a4e2/hibernate-enhancer%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fhibernate%2FHibernateEnhancer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f99d10a1098cf948b39e8ad111183bced368a4e2/hibernate-enhancer%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fhibernate%2FHibernateEnhancer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/hibernate-enhancer%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fhibernate%2FHibernateEnhancer.java?ref=f99d10a1098cf948b39e8ad111183bced368a4e2","patch":"@@ -14,7 +14,6 @@\n package org.syncope.hibernate;\n \n import java.lang.reflect.Field;\n-import java.util.Set;\n import javassist.ClassClassPath;\n import javassist.ClassPool;\n import javassist.CtClass;\n@@ -26,13 +25,22 @@\n import javassist.bytecode.annotation.StringMemberValue;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n-import org.reflections.Reflections;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.PathMatchingResourcePatternResolver;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.core.type.classreading.MetadataReader;\n \n /**\n  * Add Hibernate's @Type to each entity String field labeled @Lob, in order to\n  * enable PostgreSQL's LOB support.\n  */\n-public class HibernateEnhancer {\n+public final class HibernateEnhancer {\n+\n+    /**\n+     * Private empty constructor: this is an utility class!\n+     */\n+    private HibernateEnhancer() {\n+    }\n \n     public static void main(final String[] args)\n             throws Exception {\n@@ -45,33 +53,51 @@ public static void main(final String[] args)\n         ClassPool classPool = ClassPool.getDefault();\n         classPool.appendClassPath(args[0]);\n \n-        Reflections reflections = new Reflections(\"org.syncope.core\");\n-        Set<Class<?>> entities =\n-                reflections.getTypesAnnotatedWith(Entity.class);\n-        for (Class<?> entity : entities) {\n-            classPool.appendClassPath(new ClassClassPath(entity));\n-            CtClass ctClass =\n-                    ClassPool.getDefault().get(entity.getName());\n+        PathMatchingResourcePatternResolver resResolver =\n+                new PathMatchingResourcePatternResolver(\n+                classPool.getClassLoader());\n+        CachingMetadataReaderFactory cachingMetadataReaderFactory =\n+                new CachingMetadataReaderFactory();\n \n-            ClassFile classFile = ctClass.getClassFile();\n-            ConstPool constPool = classFile.getConstPool();\n+        for (Resource resource : resResolver.getResources(\n+                \"classpath*:org/syncope/core/**/*.class\")) {\n \n-            for (Field field : entity.getDeclaredFields()) {\n-                if (field.isAnnotationPresent(Lob.class)) {\n-                    AnnotationsAttribute typeAttr = new AnnotationsAttribute(\n-                            constPool, AnnotationsAttribute.visibleTag);\n-                    Annotation typeAnnot = new Annotation(\n-                            \"org.hibernate.annotations.Type\", constPool);\n-                    typeAnnot.addMemberValue(\"type\", new StringMemberValue(\n-                            \"org.hibernate.type.StringClobType\", constPool));\n-                    typeAttr.addAnnotation(typeAnnot);\n+            MetadataReader metadataReader =\n+                    cachingMetadataReaderFactory.getMetadataReader(resource);\n+            if (metadataReader.getAnnotationMetadata().\n+                    isAnnotated(Entity.class.getName())) {\n \n-                    CtField lobField = ctClass.getDeclaredField(field.getName());\n-                    lobField.getFieldInfo().addAttribute(typeAttr);\n+                Class entity = Class.forName(\n+                        metadataReader.getClassMetadata().getClassName());\n+                classPool.appendClassPath(new ClassClassPath(entity));\n+                CtClass ctClass =\n+                        ClassPool.getDefault().get(entity.getName());\n+                if (ctClass.isFrozen()) {\n+                    ctClass.defrost();\n                 }\n-            }\n+                ClassFile classFile = ctClass.getClassFile();\n+                ConstPool constPool = classFile.getConstPool();\n+\n+                for (Field field : entity.getDeclaredFields()) {\n+                    if (field.isAnnotationPresent(Lob.class)) {\n+                        AnnotationsAttribute typeAttr =\n+                                new AnnotationsAttribute(\n+                                constPool, AnnotationsAttribute.visibleTag);\n+                        Annotation typeAnnot = new Annotation(\n+                                \"org.hibernate.annotations.Type\", constPool);\n+                        typeAnnot.addMemberValue(\"type\", new StringMemberValue(\n+                                \"org.hibernate.type.StringClobType\",\n+                                constPool));\n+                        typeAttr.addAnnotation(typeAnnot);\n \n-            ctClass.writeFile(args[0]);\n+                        CtField lobField = ctClass.getDeclaredField(field.\n+                                getName());\n+                        lobField.getFieldInfo().addAttribute(typeAttr);\n+                    }\n+                }\n+\n+                ctClass.writeFile(args[0]);\n+            }\n         }\n     }\n }"},{"sha":"6aefa3806a968d62fd16ca5b4c39e9f4b40346af","filename":"parent/pom.xml","status":"modified","additions":5,"deletions":19,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f99d10a1098cf948b39e8ad111183bced368a4e2/parent%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f99d10a1098cf948b39e8ad111183bced368a4e2/parent%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/parent%2Fpom.xml?ref=f99d10a1098cf948b39e8ad111183bced368a4e2","patch":"@@ -160,8 +160,6 @@\n \n         <h2.version>1.3.163</h2.version>\n \n-        <reflections.version>0.9.5</reflections.version>\n-\n         <logback.version>1.0.0</logback.version>\n         <slf4j.version>1.6.4</slf4j.version>\n \n@@ -458,18 +456,6 @@\n                 <artifactId>h2</artifactId>\n                 <version>${h2.version}</version>\n             </dependency>\n-\n-            <dependency>\n-                <groupId>org.reflections</groupId>\n-                <artifactId>reflections</artifactId>\n-                <version>${reflections.version}</version>\n-                <exclusions>\n-                    <exclusion>\n-                        <groupId>javassist</groupId>\n-                        <artifactId>javassist</artifactId>\n-                    </exclusion>\n-                </exclusions>\n-            </dependency>\n             \n             <dependency>\n                 <groupId>org.apache.directory.server</groupId>\n@@ -574,6 +560,11 @@\n             <id>main</id>\n             <url>http://repo1.maven.org/maven2/</url>\n         </repository>\n+        \n+        <repository>\n+            <id>activiti</id>\n+            <url>http://maven.alfresco.com/nexus/content/repositories/activiti</url>\n+        </repository>\n \n         <repository>\n             <id>apache.snapshots</id>\n@@ -584,11 +575,6 @@\n             </releases>\n         </repository>\n \n-        <repository>\n-            <id>activiti</id>\n-            <url>http://maven.alfresco.com/nexus/content/repositories/activiti</url>\n-        </repository>\n-\n     </repositories>\n     \n     <pluginRepositories>"}]}