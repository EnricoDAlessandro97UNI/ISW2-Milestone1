{"sha":"d26c63d6e86fe7e121c60e543a81d781d0559e7f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQyNmM2M2Q2ZTg2ZmU3ZTEyMWM2MGU1NDNhODFkNzgxZDA1NTllN2Y=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-05T17:05:59Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-05T17:05:59Z"},"message":"Centralizing stream handling (db and report export) in SpringServiceProxy + Various small fixes\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1442663 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"19d9fb52f460c58b4e300101cedbe7293e33547b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/19d9fb52f460c58b4e300101cedbe7293e33547b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d26c63d6e86fe7e121c60e543a81d781d0559e7f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d26c63d6e86fe7e121c60e543a81d781d0559e7f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d26c63d6e86fe7e121c60e543a81d781d0559e7f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d26c63d6e86fe7e121c60e543a81d781d0559e7f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ea8a55341ed17bb62beca325f5f81ebb5f576659","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ea8a55341ed17bb62beca325f5f81ebb5f576659","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ea8a55341ed17bb62beca325f5f81ebb5f576659"}],"stats":{"total":507,"additions":195,"deletions":312},"files":[{"sha":"72a6337b4a052053cbdf4653dc8f7ab0f0403c9c","filename":"client/src/main/java/org/apache/syncope/client/rest/utils/RestClientExceptionMapper.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Frest%2Futils%2FRestClientExceptionMapper.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -23,13 +23,11 @@\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n-\r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.Response;\r\n import javax.ws.rs.ext.ExceptionMapper;\r\n import javax.ws.rs.ext.Provider;\r\n import javax.xml.ws.WebServiceException;\r\n-\r\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\r\n import org.apache.http.HttpStatus;\r\n import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n@@ -83,8 +81,7 @@ public Exception fromResponse(final Response response) {\n \r\n     private SyncopeClientCompositeErrorException checkCompositeException(final Response response) {\r\n         final int statusCode = response.getStatus();\r\n-        List<Object> exTypesInHeaders = response.getHeaders().get(\r\n-                SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n+        List<Object> exTypesInHeaders = response.getHeaders().get(SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER);\r\n         if (exTypesInHeaders == null) {\r\n             LOG.debug(\"No \" + SyncopeClientErrorHandler.EXCEPTION_TYPE_HEADER + \" provided\");\r\n             return null;\r"},{"sha":"2eab9560c39ec357a63c37214ad3d811e2c119e8","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConfigurationServiceProxy.java","status":"modified","additions":1,"deletions":44,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -18,7 +18,6 @@\n  */\r\n package org.apache.syncope.client.services.proxy;\r\n \r\n-import java.io.IOException;\r\n import java.io.UnsupportedEncodingException;\r\n import java.net.URI;\r\n import java.net.URLEncoder;\r\n@@ -28,18 +27,6 @@\n import java.util.Set;\r\n import javax.ws.rs.InternalServerErrorException;\r\n import javax.ws.rs.core.Response;\r\n-import org.apache.http.HttpEntity;\r\n-import org.apache.http.HttpHost;\r\n-import org.apache.http.HttpResponse;\r\n-import org.apache.http.HttpStatus;\r\n-import org.apache.http.auth.AuthScope;\r\n-import org.apache.http.client.AuthCache;\r\n-import org.apache.http.client.methods.HttpGet;\r\n-import org.apache.http.client.protocol.ClientContext;\r\n-import org.apache.http.impl.auth.BasicScheme;\r\n-import org.apache.http.impl.client.BasicAuthCache;\r\n-import org.apache.http.protocol.BasicHttpContext;\r\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.ConfigurationService;\r\n import org.apache.syncope.common.to.ConfigurationTO;\r\n@@ -108,36 +95,6 @@ public Set<MailTemplateTO> getMailTemplates() {\n \r\n     @Override\r\n     public Response dbExport() {\r\n-        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) getRestTemplate().getRequestFactory()).\r\n-                getAuthScope();\r\n-        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\r\n-        final BasicHttpContext localcontext = new BasicHttpContext();\r\n-        final AuthCache authCache = new BasicAuthCache();\r\n-        authCache.put(targetHost, new BasicScheme());\r\n-        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\r\n-\r\n-        final HttpGet getMethod = new HttpGet(baseUrl + \"configuration/dbexport\");\r\n-        try {\r\n-            final HttpResponse httpResponse =\r\n-                    ((PreemptiveAuthHttpRequestFactory) getRestTemplate().getRequestFactory()).\r\n-                    getHttpClient().execute(targetHost, getMethod, localcontext);\r\n-\r\n-            Response response;\r\n-            if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\r\n-                HttpEntity entity = httpResponse.getEntity();\r\n-                response = Response.ok(entity.getContent(), entity.getContentType().getValue()).\r\n-                        location(getMethod.getURI()).\r\n-                        header(\"Content-Disposition\", httpResponse.getLastHeader(\"Content-Disposition\").getValue()).\r\n-                        build();\r\n-            } else {\r\n-                response = Response.noContent().status(httpResponse.getStatusLine().getStatusCode()).\r\n-                        location(getMethod.getURI()).\r\n-                        build();\r\n-            }\r\n-\r\n-            return response;\r\n-        } catch (IOException e) {\r\n-            throw new InternalServerErrorException(e);\r\n-        }\r\n+        return handleStream(baseUrl + \"configuration/dbexport\");\r\n     }\r\n }\r"},{"sha":"15b719b05ed07b09f5bc08301dd3d53dbfddbac3","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ReportServiceProxy.java","status":"modified","additions":4,"deletions":9,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -18,13 +18,10 @@\n  */\r\n package org.apache.syncope.client.services.proxy;\r\n \r\n-import java.io.InputStream;\r\n import java.net.URI;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n-\r\n import javax.ws.rs.core.Response;\r\n-\r\n import org.apache.syncope.common.SyncopeConstants;\r\n import org.apache.syncope.common.services.ReportService;\r\n import org.apache.syncope.common.services.ReportletConfClasses;\r\n@@ -92,12 +89,10 @@ public ReportExecTO readExecution(final Long executionId) {\n \r\n     @Override\r\n     public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\r\n-        String format = (fmt != null)\r\n-                ? \"?fmt=\" + fmt.toString()\r\n-                : \"\";\r\n-        InputStream stream = getRestTemplate().getForObject(baseUrl + \"report/execution/export/{executionId}\" + format,\r\n-                InputStream.class, executionId);\r\n-        return Response.ok(stream).build();\r\n+        final String format = fmt == null\r\n+                ? \"\"\r\n+                : \"?fmt=\" + fmt.toString();\r\n+        return handleStream(baseUrl + \"report/execution/export/\" + executionId + format);\r\n     }\r\n \r\n     @Override\r"},{"sha":"8f9d9d3f7010de5444cf16c9e1abcea113ba19ee","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SpringServiceProxy.java","status":"modified","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -18,6 +18,22 @@\n  */\r\n package org.apache.syncope.client.services.proxy;\r\n \r\n+import java.io.IOException;\r\n+import javax.ws.rs.InternalServerErrorException;\r\n+import javax.ws.rs.core.Response;\r\n+import org.apache.http.HttpEntity;\r\n+import org.apache.http.HttpHost;\r\n+import org.apache.http.HttpResponse;\r\n+import org.apache.http.HttpStatus;\r\n+import org.apache.http.auth.AuthScope;\r\n+import org.apache.http.client.AuthCache;\r\n+import org.apache.http.client.methods.HttpGet;\r\n+import org.apache.http.client.protocol.ClientContext;\r\n+import org.apache.http.impl.auth.BasicScheme;\r\n+import org.apache.http.impl.client.BasicAuthCache;\r\n+import org.apache.http.protocol.BasicHttpContext;\r\n+import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public abstract class SpringServiceProxy {\r\n@@ -38,4 +54,39 @@ public void setRestTemplate(final RestTemplate restTemplate) {\n     public RestTemplate getRestTemplate() {\r\n         return restTemplate;\r\n     }\r\n+\r\n+    protected Response handleStream(final String url) {\r\n+        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) getRestTemplate().getRequestFactory()).\r\n+                getAuthScope();\r\n+        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\r\n+        final BasicHttpContext localcontext = new BasicHttpContext();\r\n+        final AuthCache authCache = new BasicAuthCache();\r\n+        authCache.put(targetHost, new BasicScheme());\r\n+        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\r\n+\r\n+        final HttpGet getMethod = new HttpGet(url);\r\n+        try {\r\n+            final HttpResponse httpResponse =\r\n+                    ((PreemptiveAuthHttpRequestFactory) getRestTemplate().getRequestFactory()).\r\n+                    getHttpClient().execute(targetHost, getMethod, localcontext);\r\n+\r\n+            Response response;\r\n+            if (httpResponse.getStatusLine().getStatusCode() == HttpStatus.SC_OK) {\r\n+                HttpEntity entity = httpResponse.getEntity();\r\n+                response = Response.ok(entity.getContent(), entity.getContentType().getValue()).\r\n+                        location(getMethod.getURI()).\r\n+                        header(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\r\n+                        httpResponse.getLastHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER).getValue()).\r\n+                        build();\r\n+            } else {\r\n+                response = Response.noContent().status(httpResponse.getStatusLine().getStatusCode()).\r\n+                        location(getMethod.getURI()).\r\n+                        build();\r\n+            }\r\n+\r\n+            return response;\r\n+        } catch (IOException e) {\r\n+            throw new InternalServerErrorException(e);\r\n+        }\r\n+    }\r\n }\r"},{"sha":"e6404e0f32341a3963c6ca2f429748f5b4fd8ce5","filename":"common/src/main/java/org/apache/syncope/common/SyncopeConstants.java","status":"modified","additions":9,"deletions":4,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -18,7 +18,6 @@\n  */\r\n package org.apache.syncope.common;\r\n \r\n-\r\n public class SyncopeConstants {\r\n \r\n     public static final String[] DATE_PATTERNS = {\r\n@@ -32,12 +31,18 @@ public class SyncopeConstants {\n     public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\r\n \r\n     /**\r\n-     * This constant will be used to identify HTTP header key to look for object ID assigned\r\n-     * to an object after its creation. HTTP Response after PUT operation should contain this\r\n-     * key with resource id as its value.\r\n+     * This constant will be used to identify HTTP header key to look for object ID assigned to an object after its\r\n+     * creation. HTTP Response after PUT operation should contain this key with resource id as its value.\r\n      */\r\n     public static final String REST_HEADER_ID = \"org.apache.syncope.resource.id\";\r\n \r\n+    /**\r\n+     * This constant is not defined in javax.ws.rs.core.HttpHeaders.\r\n+     *\r\n+     * @see javax.ws.rs.core.HttpHeaders\r\n+     */\r\n+    public static final String CONTENT_DISPOSITION_HEADER = \"Content-Disposition\";\r\n+\r\n     public static final String DEFAULT_ENCODING = \"UTF-8\";\r\n \r\n }\r"},{"sha":"f8a5a5ff28bbb8645408b71a18a4e48b2294b2d9","filename":"common/src/main/java/org/apache/syncope/common/types/ReportExecExportFormat.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -26,10 +26,6 @@ public enum ReportExecExportFormat {\n     XML,\r\n     HTML,\r\n     PDF,\r\n-    RTF;\r\n-\r\n-    public static ReportExecExportFormat fromString(String value) {\r\n-        return ReportExecExportFormat.valueOf(value.toUpperCase());\r\n-    }\r\n+    RTF\r\n \r\n }\r"},{"sha":"4fde197311965ba578e7d7166d0794e729766825","filename":"console/src/main/java/org/apache/syncope/console/commons/HttpResourceStream.java","status":"modified","additions":40,"deletions":104,"changes":144,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -21,145 +21,81 @@\n import java.io.ByteArrayInputStream;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.net.URI;\n-import java.net.URISyntaxException;\n-import org.apache.http.Header;\n-import org.apache.http.HttpEntity;\n-import org.apache.http.HttpHost;\n-import org.apache.http.HttpResponse;\n-import org.apache.http.ProtocolVersion;\n-import org.apache.http.auth.AuthScope;\n-import org.apache.http.client.AuthCache;\n-import org.apache.http.client.methods.HttpGet;\n-import org.apache.http.client.protocol.ClientContext;\n-import org.apache.http.entity.BasicHttpEntity;\n-import org.apache.http.impl.auth.BasicScheme;\n-import org.apache.http.impl.client.BasicAuthCache;\n-import org.apache.http.message.BasicHttpResponse;\n-import org.apache.http.protocol.BasicHttpContext;\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n-import org.apache.syncope.console.SyncopeSession;\n-import org.apache.wicket.util.lang.Args;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang.StringUtils;\n+import org.apache.http.HttpStatus;\n+import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.wicket.util.lang.Bytes;\n import org.apache.wicket.util.resource.AbstractResourceStream;\n import org.apache.wicket.util.resource.IFixedLocationResourceStream;\n import org.apache.wicket.util.resource.ResourceStreamNotFoundException;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.MediaType;\n \n public class HttpResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream {\n \n     private static final long serialVersionUID = 5811207817876330189L;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(HttpResourceStream.class);\n+    private transient InputStream inputStream;\n \n-    private final URI uri;\n+    private String location;\n \n-    private transient HttpEntity responseEntity;\n+    private String contentType;\n \n-    private transient String contentType;\n+    private String filename;\n \n-    private transient String filename;\n-\n-    public HttpResourceStream(final String uri)\n-            throws URISyntaxException {\n-        this.uri = new URI(Args.notNull(uri, \"uri\"));\n-    }\n-\n-    private HttpResponse buildFakeResponse(final String errorMessage) {\n-        ByteArrayInputStream bais = new ByteArrayInputStream(new byte[0]);\n-        BasicHttpEntity entity = new BasicHttpEntity();\n-        entity.setContent(bais);\n-        entity.setContentLength(0);\n-        entity.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n-\n-        BasicHttpResponse response = new BasicHttpResponse(new ProtocolVersion(\"HTTP\", 1, 1), 400, \"Exception: \"\n-                + errorMessage);\n-        response.setEntity(entity);\n-\n-        response.addHeader(\"Content-Disposition\", \"attachment; filename=error\");\n-\n-        return response;\n-    }\n-\n-    private void execute() {\n-        if (responseEntity != null) {\n-            return;\n-        }\n-\n-        final AuthScope scope = ((PreemptiveAuthHttpRequestFactory) SyncopeSession.get().getRestTemplate().\n-                getRequestFactory()).getAuthScope();\n-        final HttpHost targetHost = new HttpHost(scope.getHost(), scope.getPort(), scope.getScheme());\n-        BasicHttpContext localcontext = new BasicHttpContext();\n-        // Generate BASIC scheme object and add it to the local auth cache\n-        AuthCache authCache = new BasicAuthCache();\n-        authCache.put(targetHost, new BasicScheme());\n-        localcontext.setAttribute(ClientContext.AUTH_CACHE, authCache);\n-\n-        HttpGet getMethod = new HttpGet(this.uri);\n-        HttpResponse response;\n-        try {\n-            response = ((PreemptiveAuthHttpRequestFactory) SyncopeSession.get().getRestTemplate().getRequestFactory()).\n-                    getHttpClient().execute(targetHost, getMethod, localcontext);\n-        } catch (Exception e) {\n-            LOG.error(\"Unexpected exception while executing HTTP method to {}\", this.uri, e);\n-            response = buildFakeResponse(e.getMessage());\n-        }\n-        if (response.getStatusLine().getStatusCode() != 200) {\n-            LOG.error(\"Unsuccessful HTTP method to {} {}\", this.uri, response);\n-            response = buildFakeResponse(\"HTTP status \" + response.getStatusLine().getStatusCode());\n-        }\n-\n-        responseEntity = response.getEntity();\n-\n-        Header[] headers = response.getHeaders(\"Content-Disposition\");\n-        if (headers != null && headers.length > 0) {\n-            String value = headers[0].getValue();\n-            String[] splitted = value.split(\"=\");\n-            if (splitted != null && splitted.length > 1) {\n-                filename = splitted[1].trim();\n+    public HttpResourceStream(final Response response) {\n+        Object entity = response.getEntity();\n+        if (response.getStatus() == HttpStatus.SC_OK && (entity instanceof InputStream)) {\n+            this.inputStream = (InputStream) entity;\n+            this.location = response.getLocation().toString();\n+            this.contentType = response.getHeaderString(HttpHeaders.CONTENT_TYPE);\n+            String contentDisposition = response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER);\n+            if (StringUtils.isNotBlank(contentDisposition)) {\n+                String[] splitted = contentDisposition.split(\"=\");\n+                if (splitted != null && splitted.length > 1) {\n+                    this.filename = splitted[1].trim();\n+                }\n             }\n-        } else {\n-            LOG.warn(\"Could not find Content-Disposition HTTP header\");\n         }\n-\n-        contentType = responseEntity.getContentType().getValue();\n     }\n \n     @Override\n     public InputStream getInputStream()\n             throws ResourceStreamNotFoundException {\n \n-        try {\n-            execute();\n-            return responseEntity.getContent();\n-        } catch (Exception e) {\n-            throw new ResourceStreamNotFoundException(e);\n-        }\n+        return inputStream == null\n+                ? new ByteArrayInputStream(new byte[0])\n+                : inputStream;\n     }\n \n     @Override\n-    public void close()\n-            throws IOException {\n-        // Nothing needed here, because we are using HttpComponents HttpClient\n+    public Bytes length() {\n+        return inputStream == null\n+                ? Bytes.bytes(0)\n+                : null;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        // No need for explict closing\n     }\n \n     @Override\n     public String locationAsString() {\n-        return uri.toString();\n+        return location;\n     }\n \n     @Override\n     public String getContentType() {\n-        execute();\n-\n         return contentType == null\n-                ? MediaType.APPLICATION_OCTET_STREAM_VALUE\n+                ? MediaType.APPLICATION_OCTET_STREAM\n                 : contentType;\n     }\n \n     public String getFilename() {\n-        execute();\n-        return filename;\n+        return filename == null\n+                ? \"error\"\n+                : filename;\n     }\n }"},{"sha":"7d583110cc73ae76f76c3f863877c1968478ede6","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -337,7 +337,7 @@ public Page createPage() {\n             @Override\n             public void onClick() {\n                 try {\n-                    HttpResourceStream stream = new HttpResourceStream(baseURL + \"configuration/dbexport\");\n+                    HttpResourceStream stream = new HttpResourceStream(confRestClient.dbExport());\n \n                     ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);\n                     rsrh.setFileName(stream.getFilename() == null ? \"content.xml\" : stream.getFilename());\n@@ -540,7 +540,7 @@ public Iterator<ConfigurationTO> iterator(final long first, final long count) {\n \n             Collections.sort(list, comparator);\n \n-            return list.subList((int)first, (int)first + (int)count).iterator();\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override\n@@ -563,7 +563,7 @@ public ConfigurationTO getObject() {\n         }\n     }\n \n-    private class NotificationProvider extends SortableDataProvider<NotificationTO,String> {\n+    private class NotificationProvider extends SortableDataProvider<NotificationTO, String> {\n \n         private static final long serialVersionUID = -276043813563988590L;\n \n@@ -581,7 +581,7 @@ public Iterator<NotificationTO> iterator(final long first, final long count) {\n \n             Collections.sort(list, comparator);\n \n-            return list.subList((int)first, (int)first + (int)count).iterator();\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n         }\n \n         @Override"},{"sha":"3a2e8b655e00561df341edbbf9c75b0c08cce162","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportExecResultDownloadModalPage.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -34,7 +34,8 @@ public class ReportExecResultDownloadModalPage extends BaseModalPage {\n \n     public ReportExecResultDownloadModalPage(final ModalWindow window, final PageReference callerPageRef) {\n \n-        final AjaxDropDownChoicePanel<ReportExecExportFormat> format = new AjaxDropDownChoicePanel<ReportExecExportFormat>(\n+        final AjaxDropDownChoicePanel<ReportExecExportFormat> format =\n+                new AjaxDropDownChoicePanel<ReportExecExportFormat>(\n                 \"format\", \"format\", new Model<ReportExecExportFormat>());\n \n         format.setChoices(Arrays.asList(ReportExecExportFormat.values()));\n@@ -61,7 +62,9 @@ public String getIdValue(final ReportExecExportFormat object, final int index) {\n \n             @Override\n             protected void onUpdate(final AjaxRequestTarget target) {\n-                ((ReportModalPage) callerPageRef.getPage()).setExportFormat(format.getField().getInput());\n+                format.getField();\n+\n+                ((ReportModalPage) callerPageRef.getPage()).setExportFormat(format.getField().getModelObject());\n                 window.close(target);\n             }\n         });"},{"sha":"d2463aad1f260a7c678d832df6850a3c3ad8d573","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportModalPage.java","status":"modified","additions":7,"deletions":21,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.types.ReportExecStatus;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.DateFormatROModel;\n@@ -105,7 +106,7 @@ public class ReportModalPage extends BaseModalPage {\n \n     private Form<ReportTO> form;\n \n-    private String exportFormat;\n+    private ReportExecExportFormat exportFormat;\n \n     private long exportExecId;\n \n@@ -560,7 +561,7 @@ public void onClick(AjaxRequestTarget target) {\n         executions.add(reload);\n     }\n \n-    public void setExportFormat(final String exportFormat) {\n+    public void setExportFormat(final ReportExecExportFormat exportFormat) {\n         this.exportFormat = exportFormat;\n     }\n \n@@ -616,35 +617,20 @@ private class AjaxExportDownloadBehavior extends AbstractAjaxDownloadBehavior {\n \n         private static final long serialVersionUID = 3109256773218160485L;\n \n-        private final String exportFormat;\n+        private final ReportExecExportFormat exportFormat;\n \n         private final long exportExecId;\n \n-        private String url;\n-\n         private HttpResourceStream stream;\n \n-        public AjaxExportDownloadBehavior(final String exportFormat, final long exportExecId) {\n+        public AjaxExportDownloadBehavior(final ReportExecExportFormat exportFormat, final long exportExecId) {\n             this.exportFormat = exportFormat;\n             this.exportExecId = exportExecId;\n         }\n \n         private void createResourceStream() {\n-            StringBuilder urlBuilder = new StringBuilder();\n-            urlBuilder.append(baseURL).append(\"report/execution/export/\").append(exportExecId);\n-            if (exportFormat != null) {\n-                urlBuilder.append(\"?fmt=\").append(exportFormat);\n-            }\n-\n-            if (this.url != null && this.url.equals(urlBuilder.toString())) {\n-                return;\n-            }\n-            this.url = urlBuilder.toString();\n-\n-            try {\n-                stream = new HttpResourceStream(this.url);\n-            } catch (Exception e) {\n-                LOG.error(\"While contacting target URL\", e);\n+            if (stream == null) {\n+                stream = new HttpResourceStream(restClient.exportExecutionResult(exportExecId, exportFormat));\n             }\n         }\n "},{"sha":"54deedcd12ad38b5062ed744759182ba36fe29d4","filename":"console/src/main/java/org/apache/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -19,7 +19,7 @@\n package org.apache.syncope.console.rest;\n \n import java.util.List;\n-\n+import javax.ws.rs.core.Response;\n import org.apache.syncope.common.services.ConfigurationService;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.springframework.stereotype.Component;\n@@ -68,4 +68,8 @@ public ConfigurationTO deleteConfiguration(final String key) {\n         getService(ConfigurationService.class).delete(key);\n         return response;\n     }\n+\n+    public Response dbExport() {\n+        return getService(ConfigurationService.class).dbExport();\n+    }\n }"},{"sha":"420acfdbfddd82570bb9fc2fb8c852071f2eae91","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -20,13 +20,12 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-\n import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.services.ReportletConfClasses;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n@@ -109,4 +108,8 @@ public void deleteExecution(final Long reportExecId) {\n     public List<ReportExecTO> listExecutions() {\n         return getService(ReportService.class).listExecutions();\n     }\n+\n+    public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n+        return getService(ReportService.class).exportExecutionResult(executionId, fmt);\n+    }\n }"},{"sha":"4469f778ad1d39d1956835949401427b6b2f69b1","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.console.wicket.markup.html.form;\n \n+import java.io.Serializable;\n import java.util.Collections;\n import java.util.List;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -28,7 +29,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n \n-public class AjaxDropDownChoicePanel<T> extends FieldPanel implements Cloneable {\n+public class AjaxDropDownChoicePanel<T extends Serializable> extends FieldPanel<T> implements Cloneable {\n \n     private static final long serialVersionUID = -4716376580659196095L;\n "},{"sha":"cda208d474b73cd3354b211af208fa6d74edc616","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/FieldPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -32,7 +32,7 @@\n \n     private static final long serialVersionUID = -198988924922541273L;\n \n-    protected FormComponent field = null;\n+    protected FormComponent<T> field = null;\n \n     final protected String id;\n \n@@ -54,11 +54,11 @@ public FieldPanel(final String id, final String name, final IModel<T> model) {\n         setOutputMarkupId(true);\n     }\n \n-    public FormComponent getField() {\n+    public FormComponent<T> getField() {\n         return field;\n     }\n \n-    public FieldPanel setTitle(String title) {\n+    public FieldPanel setTitle(final String title) {\n         field.add(AttributeModifier.replace(\"title\", title != null\n                 ? title\n                 : \"\"));"},{"sha":"aa9cd0b588d07956b0c5fa7b96b584bd9406aa3b","filename":"console/src/main/resources/org/apache/syncope/console/pages/ReportExecResultDownloadModalPage.html","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.html?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -17,7 +17,7 @@\n under the License.\n -->\n <wicket:extend>\n-    <div id=\"dialog\">\n-        <wicket:message key=\"downloadAs\"/> <span wicket:id=\"format\" class=\"small_dynamicsize\">[format]</span>\n-    </div>\n+  <div id=\"dialog\">\n+    <wicket:message key=\"downloadAs\"/> <span wicket:id=\"format\" class=\"small_dynamicsize\">[format]</span>\n+  </div>\n </wicket:extend>"},{"sha":"d1158b3faa1edb775a9f6850c1478b3a3af58ed2","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationJob.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -21,10 +21,9 @@\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Date;\n-\n import javax.mail.internet.MimeMessage;\n-\n import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.NotificationSubCategory;\n import org.apache.syncope.common.types.AuditElements.Result;\n@@ -147,7 +146,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                     JavaMailSenderImpl sender = new JavaMailSenderImpl();\n                     sender.setHost(smtpHost);\n                     sender.setPort(smtpPort);\n-                    sender.setDefaultEncoding(\"UTF-8\");\n+                    sender.setDefaultEncoding(SyncopeConstants.DEFAULT_ENCODING);\n                     if (StringUtils.isNotBlank(smtpUsername)) {\n                         sender.setUsername(smtpUsername);\n                     }"},{"sha":"2ec4a7c3169dd0db3165c35979dcd91003a56033","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -24,7 +24,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n@@ -171,9 +171,9 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n         String textBody;\n         try {\n             htmlBody = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, \"mailTemplates/\"\n-                    + notification.getTemplate() + \".html.vm\", \"UTF-8\", model);\n+                    + notification.getTemplate() + \".html.vm\", SyncopeConstants.DEFAULT_ENCODING, model);\n             textBody = VelocityEngineUtils.mergeTemplateIntoString(velocityEngine, \"mailTemplates/\"\n-                    + notification.getTemplate() + \".txt.vm\", \"UTF-8\", model);\n+                    + notification.getTemplate() + \".txt.vm\", SyncopeConstants.DEFAULT_ENCODING, model);\n         } catch (VelocityException e) {\n             LOG.error(\"Could not get mail body\", e);\n "},{"sha":"06dddaf62e30df15bbca472eecafec1b29bec3b7","filename":"core/src/main/java/org/apache/syncope/core/report/ReportJob.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Freport%2FReportJob.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -35,6 +35,7 @@\n import javax.xml.transform.sax.SAXTransformerFactory;\n import javax.xml.transform.sax.TransformerHandler;\n import javax.xml.transform.stream.StreamResult;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.types.ReportExecStatus;\n import org.apache.syncope.core.persistence.beans.Report;\n@@ -125,7 +126,7 @@ public void execute(final JobExecutionContext context) throws JobExecutionExcept\n             SAXTransformerFactory tFactory = (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n             handler = tFactory.newTransformerHandler();\n             Transformer serializer = handler.getTransformer();\n-            serializer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+            serializer.setOutputProperty(OutputKeys.ENCODING, SyncopeConstants.DEFAULT_ENCODING);\n             serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n \n             // a single ZipEntry in the ZipOutputStream"},{"sha":"786f1b6a837047d86816ebdff0a37b3dc8ef9d38","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -26,6 +26,8 @@\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.ConfigurationSubCategory;\n@@ -42,7 +44,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n import org.springframework.core.io.support.ResourcePatternResolver;\n-import org.springframework.http.MediaType;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n@@ -210,8 +211,9 @@ public ModelAndView getMailTemplates() {\n     @RequestMapping(method = RequestMethod.GET, value = \"/dbexport\")\n     @Transactional(readOnly = true)\n     public void dbExport(final HttpServletResponse response) {\n-        response.setContentType(MediaType.TEXT_XML_VALUE);\n-        response.setHeader(\"Content-Disposition\", \"attachment; filename=\" + ImportExport.CONTENT_FILE);\n+        response.setContentType(MediaType.TEXT_XML);\n+        response.setHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\n+                \"attachment; filename=\" + ImportExport.CONTENT_FILE);\n         try {\n             dbExportInternal(response.getOutputStream());\n         } catch (IOException e) {"},{"sha":"b3272162f44d155c009dd41787cdfddb48a9a91a","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/ReportController.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -29,17 +29,17 @@\n import java.util.Map;\n import java.util.Set;\n import java.util.zip.ZipInputStream;\n-\n import javax.servlet.ServletOutputStream;\n import javax.servlet.http.HttpServletResponse;\n-\n+import javax.ws.rs.core.MediaType;\n import org.apache.cocoon.optional.pipeline.components.sax.fop.FopSerializer;\n import org.apache.cocoon.pipeline.NonCachingPipeline;\n import org.apache.cocoon.pipeline.Pipeline;\n import org.apache.cocoon.sax.SAXPipelineComponent;\n import org.apache.cocoon.sax.component.XMLGenerator;\n import org.apache.cocoon.sax.component.XMLSerializer;\n import org.apache.cocoon.sax.component.XSLTTransformer;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.ReportletConf;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n@@ -65,7 +65,6 @@\n import org.quartz.Scheduler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n@@ -280,21 +279,23 @@ public void exportExecutionResult(final HttpServletResponse response,\n         ServletOutputStream os;\n         try {\n             os = response.getOutputStream();\n-        } catch (IOException e1) {\n-            throw new RuntimeException(\"Could not retrieve stream\", e1);\n+        } catch (IOException e) {\n+            throw new RuntimeException(\"Could not retrieve stream\", e);\n         }\n         ReportExec reportExec = getAndCheckReportExecInternal(executionId);\n \n         ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n \n-        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n-        response.addHeader(\"Content-Disposition\", \"attachment; filename=\" + reportExec.getReport().getName() + \".\"\n-                + format.name().toLowerCase());\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM);\n+        response.addHeader(SyncopeConstants.CONTENT_DISPOSITION_HEADER,\n+                \"attachment; filename=\" + reportExec.getReport().getName() + \".\" + format.name().toLowerCase());\n \n         exportExecutionResultInternal(os, reportExec, format);\n     }\n \n-    public void exportExecutionResultInternal(OutputStream os, ReportExec reportExec, ReportExecExportFormat format) {\n+    public void exportExecutionResultInternal(final OutputStream os, final ReportExec reportExec,\n+            final ReportExecExportFormat format) {\n+\n         LOG.debug(\"Exporting result of {} as {}\", reportExec, format);\n \n         // streaming SAX handler from a compressed byte array stream\n@@ -361,6 +362,7 @@ public void exportExecutionResultInternal(OutputStream os, ReportExec reportExec\n \n     public ReportExec getAndCheckReportExecInternal(final Long executionId)\n             throws NotFoundException {\n+\n         ReportExec reportExec = reportExecDAO.find(executionId);\n         if (reportExec == null) {\n             throw new NotFoundException(\"Report execution \" + executionId);"},{"sha":"b2269d6a2ddc30c5a52965e80a9aef77fe40f0a6","filename":"core/src/main/java/org/apache/syncope/core/util/ImportExport.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FImportExport.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -486,7 +486,7 @@ public void export(final OutputStream os, final String wfTablePrefix)\n \n         TransformerHandler handler = transformerFactory.newTransformerHandler();\n         Transformer serializer = handler.getTransformer();\n-        serializer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+        serializer.setOutputProperty(OutputKeys.ENCODING, SyncopeConstants.DEFAULT_ENCODING);\n         serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n         handler.setResult(streamResult);\n         handler.startDocument();"},{"sha":"1e512b43aa87b72fde64ea3184c1773f8e11c565","filename":"core/src/main/java/org/apache/syncope/core/util/XMLSerializer.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FXMLSerializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FXMLSerializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FXMLSerializer.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -18,15 +18,14 @@\n  */\n package org.apache.syncope.core.util;\n \n+import com.thoughtworks.xstream.XStream;\n import java.io.UnsupportedEncodingException;\n import java.net.URLDecoder;\n import java.net.URLEncoder;\n-\n+import org.apache.syncope.common.SyncopeConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-import com.thoughtworks.xstream.XStream;\n-\n /**\n  * Helper class for serialization and deserialization of configuration objects, empowering XStream.\n  *\n@@ -42,7 +41,7 @@ public static String serialize(final Object object) {\n         XStream xstream = new XStream();\n         xstream.registerConverter(new GuardedStringConverter());\n         try {\n-            result = URLEncoder.encode(xstream.toXML(object), \"UTF-8\");\n+            result = URLEncoder.encode(xstream.toXML(object), SyncopeConstants.DEFAULT_ENCODING);\n         } catch (UnsupportedEncodingException e) {\n             LOG.error(\"During serialization\", e);\n         }\n@@ -57,7 +56,7 @@ public static <T extends Object> T deserialize(final String serialized) {\n         XStream xstream = new XStream();\n         xstream.registerConverter(new GuardedStringConverter());\n         try {\n-            result = (T) xstream.fromXML(URLDecoder.decode(serialized, \"UTF-8\"));\n+            result = (T) xstream.fromXML(URLDecoder.decode(serialized, SyncopeConstants.DEFAULT_ENCODING));\n         } catch (UnsupportedEncodingException e) {\n             LOG.error(\"During deserialization\", e);\n         }"},{"sha":"3fc6db6eb5ee522601479c567546540d55d198e4","filename":"core/src/test/java/org/apache/syncope/core/rest/ConfigurationTestITCase.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FConfigurationTestITCase.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -27,14 +27,16 @@\n import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n import java.util.List;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.to.ConfigurationTO;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n import org.springframework.http.HttpStatus;\n-import org.springframework.http.MediaType;\n import org.springframework.web.client.HttpStatusCodeException;\n \n @FixMethodOrder(MethodSorters.JVM)\n@@ -55,7 +57,6 @@ public void create() {\n \n     @Test\n     public void delete() throws UnsupportedEncodingException {\n-\n         try {\n             configurationService.delete(\"nonExistent\");\n         } catch (HttpStatusCodeException e) {\n@@ -113,9 +114,10 @@ public void update() {\n     public void dbExport() throws IOException {\n         Response response = configurationService.dbExport();\n         assertNotNull(response);\n+        assertEquals(HttpStatus.OK.value(), response.getStatus());\n         assertNotNull(response.getLocation());\n-        assertTrue(response.getHeaderString(\"Content-Type\").startsWith(MediaType.TEXT_XML_VALUE));\n-        assertNotNull(response.getHeaderString(\"Content-Disposition\"));\n+        assertTrue(response.getHeaderString(HttpHeaders.CONTENT_TYPE).startsWith(MediaType.TEXT_XML));\n+        assertNotNull(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER));\n \n         Object entity = response.getEntity();\n         assertTrue(entity instanceof InputStream);"},{"sha":"b905721945495ad8d3bd96c339145fb7e7a5df38","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":20,"deletions":76,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d26c63d6e86fe7e121c60e543a81d781d0559e7f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=d26c63d6e86fe7e121c60e543a81d781d0559e7f","patch":"@@ -25,17 +25,16 @@\n import static org.junit.Assert.fail;\n \n import java.io.IOException;\n-import java.io.StringWriter;\n-import java.net.HttpURLConnection;\n-import java.net.URL;\n+import java.io.InputStream;\n import java.util.List;\n import javax.ws.rs.core.Response;\n-import org.apache.commons.codec.binary.Base64;\n import org.apache.commons.io.IOUtils;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.report.UserReportletConf;\n import org.apache.syncope.common.services.ReportletConfClasses;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.ReportExecExportFormat;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -155,32 +154,18 @@ public void delete() {\n         }\n     }\n \n-    private void checkExport(final long execId, final String fmt, final String encodedAuth)\n-            throws IOException {\n-\n-        URL url = new URL(BASE_URL + \"report/execution/export/\" + execId + \"?fmt=\" + fmt);\n-        int responseCode = 0;\n-        String export = null;\n-        HttpURLConnection connection = null;\n-        try {\n-            connection = (HttpURLConnection) url.openConnection();\n-            connection.setRequestMethod(\"GET\");\n-            connection.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuth);\n-\n-            StringWriter writer = new StringWriter();\n-            IOUtils.copy(connection.getInputStream(), writer);\n-            export = writer.toString();\n-            responseCode = connection.getResponseCode();\n-        } catch (IOException e) {\n-            LOG.error(\"This should be a temporary exception: ignore\", e);\n-        } finally {\n-            if (connection != null) {\n-                connection.disconnect();\n-            }\n-        }\n-        assertEquals(200, responseCode);\n-        assertNotNull(export);\n-        assertFalse(export.isEmpty());\n+    private void checkExport(final Long execId, final ReportExecExportFormat fmt) throws IOException {\n+        final Response response = reportService.exportExecutionResult(execId, fmt);\n+        assertNotNull(response);\n+        assertEquals(HttpStatus.OK.value(), response.getStatus());\n+        assertNotNull(response.getLocation());\n+        assertNotNull(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER));\n+        assertTrue(response.getHeaderString(SyncopeConstants.CONTENT_DISPOSITION_HEADER).\n+                endsWith(\".\" + fmt.name().toLowerCase()));\n+\n+        Object entity = response.getEntity();\n+        assertTrue(entity instanceof InputStream);\n+        assertFalse(IOUtils.toString((InputStream) entity, \"UTF-8\").isEmpty());\n     }\n \n     @Test\n@@ -205,55 +190,14 @@ public void executeAndExport() throws IOException {\n \n             maxit--;\n         } while (reportTO.getExecutions().isEmpty() && maxit > 0);\n+        assertEquals(1, reportTO.getExecutions().size());\n \n         long execId = reportTO.getExecutions().iterator().next().getId();\n \n-        // Export\n-        String encodedAuth = Base64.encodeBase64String((ADMIN_UID + \":\" + ADMIN_PWD).getBytes());\n-        URL url = new URL(BASE_URL + \"report/execution/export/\" + execId);\n-\n-        // 1. XML\n-        maxit = 30;\n-        int responseCode = 0;\n-        String export = null;\n-        do {\n-            try {\n-                Thread.sleep(1000);\n-            } catch (InterruptedException e) {\n-            }\n-\n-            maxit--;\n-\n-            HttpURLConnection connection = null;\n-            try {\n-                connection = (HttpURLConnection) url.openConnection();\n-                connection.setRequestMethod(\"GET\");\n-                connection.setRequestProperty(\"Authorization\", \"Basic \" + encodedAuth);\n-\n-                StringWriter writer = new StringWriter();\n-                IOUtils.copy(connection.getInputStream(), writer);\n-                export = writer.toString();\n-                responseCode = connection.getResponseCode();\n-            } catch (IOException e) {\n-                LOG.error(\"This should be a temporary exception: ignore\", e);\n-            } finally {\n-                if (connection != null) {\n-                    connection.disconnect();\n-                }\n-            }\n-        } while (responseCode != 200 && maxit > 0);\n-        assertEquals(200, responseCode);\n-        assertNotNull(export);\n-        assertFalse(export.isEmpty());\n-\n-        // 2. HTML\n-        checkExport(execId, \"HTML\", encodedAuth);\n-\n-        // 3. PDF\n-        checkExport(execId, \"PDF\", encodedAuth);\n-\n-        // 4. RTF\n-        checkExport(execId, \"RTF\", encodedAuth);\n+        checkExport(execId, ReportExecExportFormat.XML);\n+        checkExport(execId, ReportExecExportFormat.HTML);\n+        checkExport(execId, ReportExecExportFormat.PDF);\n+        checkExport(execId, ReportExecExportFormat.RTF);\n     }\n \n     @Test"}]}