{"sha":"f7f426c01ac761d199d193cc4c37d08a29b1e191","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY3ZjQyNmMwMWFjNzYxZDE5OWQxOTNjYzRjMzdkMDhhMjliMWUxOTE=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-15T08:10:36Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-11-15T08:10:36Z"},"message":"Fixed regression from latest build\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247196 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"10b1c54fdc46b7c48395cd363987117a21a975a9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/10b1c54fdc46b7c48395cd363987117a21a975a9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f7f426c01ac761d199d193cc4c37d08a29b1e191","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f7f426c01ac761d199d193cc4c37d08a29b1e191","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f7f426c01ac761d199d193cc4c37d08a29b1e191","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f7f426c01ac761d199d193cc4c37d08a29b1e191/comments","author":null,"committer":null,"parents":[{"sha":"776d5712a156a40b4bcadff76761ccec2cbc5312","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/776d5712a156a40b4bcadff76761ccec2cbc5312","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/776d5712a156a40b4bcadff76761ccec2cbc5312"}],"stats":{"total":158,"additions":61,"deletions":97},"files":[{"sha":"bc0a7c96892432dccb34f40758dc9388d9c652dc","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":61,"deletions":97,"changes":158,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f7f426c01ac761d199d193cc4c37d08a29b1e191/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f7f426c01ac761d199d193cc4c37d08a29b1e191/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=f7f426c01ac761d199d193cc4c37d08a29b1e191","patch":"@@ -33,54 +33,18 @@\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.UserTO;\n-import org.syncope.core.util.EntitlementUtil;\n import org.syncope.types.SchemaType;\n \n public class AuthenticationTestITCase extends AbstractTest {\n-    \n-    @Test\n-    public void testEntitlements() {\n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n-                new UsernamePasswordCredentials(\"user1\", \"password\"));\n-        \n-        String[] entsArray = restTemplate.getForObject(BASE_URL\n-                + \"auth/entitlements.json\", String[].class);\n-        Set<String> authEnts = new HashSet<String>(entsArray.length);\n-        authEnts.addAll(Arrays.asList(entsArray));\n-\n-        // This call will return only the roles that the calling user\n-        // has right to administer\n-        List<RoleTO> roleTOs = Arrays.asList(restTemplate.getForObject(\n-                BASE_URL + \"role/list.json\", RoleTO[].class));\n-        assertNotNull(roleTOs);\n \n-        // reset admin credentials for restTemplate\n-        super.setupRestTemplate();\n-        \n-        Set<String> dbEnts = new HashSet<String>();\n-        dbEnts.add(\"base\");\n-        dbEnts.add(\"advanced\");\n-        dbEnts.add(\"SCHEMA_READ\");\n-        dbEnts.add(\"USER_READ\");\n-        dbEnts.add(\"USER_LIST\");\n-        dbEnts.add(\"ROLE_READ\");\n-        dbEnts.add(\"WORKFLOW_FORM_CLAIM\");\n-        for (RoleTO roleTO : roleTOs) {\n-            dbEnts.add(EntitlementUtil.getEntitlementName(roleTO.getId()));\n-        }\n-        \n-        assertEquals(authEnts, dbEnts);\n-    }\n-    \n     @Test\n     public void testUserSchemaAuthorization() {\n         // 0. create a role that can only read schemas\n         RoleTO authRoleTO = new RoleTO();\n         authRoleTO.setName(\"authRole\");\n         authRoleTO.setParent(8L);\n         authRoleTO.addEntitlement(\"SCHEMA_READ\");\n-        \n+\n         authRoleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n                 authRoleTO, RoleTO.class);\n         assertNotNull(authRoleTO);\n@@ -90,22 +54,22 @@ public void testUserSchemaAuthorization() {\n         schemaTO.setName(\"authTestSchema\");\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n-        \n+\n         SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n                 + \"schema/user/create\", schemaTO, SchemaTO.class);\n         assertEquals(schemaTO, newSchemaTO);\n \n         // 2. create an user with the role created above (as admin)\n         UserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n-        \n+\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(authRoleTO.getId());\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-        \n+\n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n@@ -120,7 +84,7 @@ public void testUserSchemaAuthorization() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-        \n+\n         schemaTO = restTemplate.getForObject(BASE_URL\n                 + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n         assertNotNull(schemaTO);\n@@ -138,44 +102,44 @@ public void testUserSchemaAuthorization() {\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-        \n+\n         userTO = restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-        \n+\n         assertNotNull(userTO);\n         assertNotNull(userTO.getLastLoginDate());\n         assertEquals(new Integer(0), userTO.getFailedLogins());\n     }\n-    \n+\n     @Test\n     public void testUserRead() {\n         UserTO userTO = UserTestITCase.getSampleTO(\"testuserread@test.org\");\n-        \n+\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-        \n+\n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n-        \n+\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-        \n+\n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\", UserTO.class, 1);\n         assertNotNull(readUserTO);\n-        \n+\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"user2\", \"password\"));\n-        \n+\n         HttpClientErrorException exception = null;\n         try {\n             restTemplate.getForObject(\n@@ -189,33 +153,33 @@ public void testUserRead() {\n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n     }\n-    \n+\n     @Test\n     public void testUserSearch() {\n         UserTO userTO = UserTestITCase.getSampleTO(\"testusersearch@test.org\");\n-        \n+\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-        \n+\n         userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n                 userTO, UserTO.class);\n         assertNotNull(userTO);\n-        \n+\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-        \n+\n         AttributeCond isNullCond = new AttributeCond(\n                 AttributeCond.Type.ISNOTNULL);\n         isNullCond.setSchema(\"loginDate\");\n         NodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n-        \n+\n         List<UserTO> matchedUsers = Arrays.asList(\n                 restTemplate.postForObject(BASE_URL + \"user/search\",\n                 searchCondition, UserTO[].class));\n@@ -226,11 +190,11 @@ public void testUserSearch() {\n             userIds.add(user.getId());\n         }\n         assertTrue(userIds.contains(1L));\n-        \n+\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\"user2\", \"password\"));\n-        \n+\n         matchedUsers = Arrays.asList(\n                 restTemplate.postForObject(BASE_URL + \"user/search\",\n                 searchCondition, UserTO[].class));\n@@ -244,33 +208,33 @@ public void testUserSearch() {\n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n     }\n-    \n+\n     @Test\n     public void checkFailedLogins() {\n         UserTO userTO =\n                 UserTestITCase.getSampleTO(\"checkFailedLogin@syncope-idm.org\");\n-        \n+\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-        \n+\n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n-        \n+\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-        \n+\n         UserTO readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-        \n+\n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(new Integer(0), readUserTO.getFailedLogins());\n@@ -281,9 +245,9 @@ public void checkFailedLogins() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n-        \n+\n         Throwable t = null;\n-        \n+\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n@@ -292,10 +256,10 @@ public void checkFailedLogins() {\n         } catch (Exception e) {\n             t = e;\n         }\n-        \n+\n         assertNotNull(t);\n         t = null;\n-        \n+\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n@@ -307,53 +271,53 @@ public void checkFailedLogins() {\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-        \n+\n         readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(new Integer(2), readUserTO.getFailedLogins());\n-        \n+\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-        \n+\n         readUserTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n         assertNotNull(readUserTO);\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(new Integer(0), readUserTO.getFailedLogins());\n     }\n-    \n+\n     @Test\n     public void checkUserSuspension() {\n         UserTO userTO =\n                 UserTestITCase.getSampleTO(\"checkSuspension@syncope-idm.org\");\n-        \n+\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n         AttributeTO testAttributeTO = new AttributeTO();\n         testAttributeTO.setSchema(\"testAttribute\");\n         testAttributeTO.addValue(\"a value\");\n         membershipTO.addAttribute(testAttributeTO);\n         userTO.addMembership(membershipTO);\n-        \n+\n         userTO = restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n         assertNotNull(userTO);\n-        \n+\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-        \n+\n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-        \n+\n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n         assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n@@ -364,49 +328,49 @@ public void checkUserSuspension() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n-        \n+\n         Throwable t = null;\n-        \n+\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n                     UserTO.class, userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n-        \n+\n         assertNotNull(t);\n         t = null;\n-        \n+\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n                     UserTO.class, userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n-        \n+\n         assertNotNull(t);\n         t = null;\n-        \n+\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n                     UserTO.class, userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n-        \n+\n         assertNotNull(t);\n         t = null;\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-        \n+\n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-        \n+\n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n         assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n@@ -416,25 +380,25 @@ public void checkUserSuspension() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"wrongpwd1\"));\n-        \n+\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n                     UserTO.class, userTO.getId());\n         } catch (Exception e) {\n             t = e;\n         }\n-        \n+\n         assertNotNull(t);\n         t = null;\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-        \n+\n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-        \n+\n         assertNotNull(userTO);\n         assertNotNull(userTO.getFailedLogins());\n         assertEquals(new Integer(3), userTO.getFailedLogins());\n@@ -446,7 +410,7 @@ public void checkUserSuspension() {\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-        \n+\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n@@ -455,28 +419,28 @@ public void checkUserSuspension() {\n         } catch (Exception e) {\n             t = e;\n         }\n-        \n+\n         assertNotNull(t);\n         t = null;\n \n         // reset admin credentials for restTemplate\n         super.setupRestTemplate();\n-        \n+\n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n-        \n+\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n-        \n+\n         ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n                 getHttpClient().getState().setCredentials(AuthScope.ANY,\n                 new UsernamePasswordCredentials(\n                 userTO.getUsername(), \"password123\"));\n-        \n+\n         userTO = restTemplate.getForObject(\n                 BASE_URL + \"user/read/{userId}.json\",\n                 UserTO.class, userTO.getId());\n-        \n+\n         assertNotNull(userTO);\n         assertEquals(new Integer(0), userTO.getFailedLogins());\n     }"}]}