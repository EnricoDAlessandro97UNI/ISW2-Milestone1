{"sha":"9e29c518beaa07dc3161cd23b48c6568e595733a","node_id":"C_kwDOJfYA1toAKDllMjljNTE4YmVhYTA3ZGMzMTYxY2QyM2I0OGM2NTY4ZTU5NTczM2E","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-02-05T12:16:01Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2022-02-05T14:48:05Z"},"message":"[SYNCOPE-1663] Now returning appropriate error","tree":{"sha":"21888d1de9e8ba0aa5f16665e80aeb4f13ad3fda","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/21888d1de9e8ba0aa5f16665e80aeb4f13ad3fda"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9e29c518beaa07dc3161cd23b48c6568e595733a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9e29c518beaa07dc3161cd23b48c6568e595733a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9e29c518beaa07dc3161cd23b48c6568e595733a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9e29c518beaa07dc3161cd23b48c6568e595733a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c23c02bf222bf7192e6ac82a49fee4b313b92a14","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c23c02bf222bf7192e6ac82a49fee4b313b92a14","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c23c02bf222bf7192e6ac82a49fee4b313b92a14"}],"stats":{"total":284,"additions":114,"deletions":170},"files":[{"sha":"8dc10d55f670b6a27dbf56d69c9c84859d4c0bd5","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -53,7 +53,7 @@ public enum ClientExceptionType {\n     InvalidAnyObject(Response.Status.BAD_REQUEST),\n     InvalidGroup(Response.Status.BAD_REQUEST),\n     InvalidSchemaDefinition(Response.Status.BAD_REQUEST),\n-    InvalidSearchExpression(Response.Status.BAD_REQUEST),\n+    InvalidSearchParameters(Response.Status.BAD_REQUEST),\n     InvalidPageOrSize(Response.Status.BAD_REQUEST),\n     InvalidPropagationTaskExecReport(Response.Status.BAD_REQUEST),\n     InvalidPlainSchema(Response.Status.BAD_REQUEST),"},{"sha":"3bf25f98915ef2b45aba27a2db12d5c1a18c421b","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ReconciliationServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FReconciliationServiceImpl.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -88,7 +88,7 @@ private Pair<Filter, Set<String>> buildFromFIQL(final ReconQuery reconQuery) {\n             } catch (Exception e) {\n                 LOG.error(\"Invalid FIQL expression: {}\", reconQuery.getFiql(), e);\n \n-                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n                 sce.getElements().add(reconQuery.getFiql());\n                 sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n                 throw sce;"},{"sha":"fa4e7a891cc0302ec795a84ccb0a72038d00e7d5","filename":"core/idm/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ResourceServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FResourceServiceImpl.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -127,7 +127,7 @@ public PagedConnObjectTOResult searchConnObjects(\n             } catch (Exception e) {\n                 LOG.error(\"Invalid FIQL expression: {}\", query.getFiql(), e);\n \n-                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n                 sce.getElements().add(query.getFiql());\n                 sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n                 throw sce;"},{"sha":"b1ab5bf0eba43f4765024407fca942c4ff301a0d","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -26,7 +26,9 @@\n import javax.ws.rs.BadRequestException;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.request.AnyCR;\n import org.apache.syncope.common.lib.request.AnyUR;\n@@ -38,6 +40,7 @@\n import org.apache.syncope.common.lib.Attr;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceAssociationAction;\n import org.apache.syncope.common.lib.types.ResourceDeassociationAction;\n@@ -134,15 +137,22 @@ public PagedResult<TO> search(final AnyQuery anyQuery) {\n                 ? null\n                 : getSearchCond(anyQuery.getFiql(), realm);\n \n-        Pair<Integer, List<TO>> result = getAnyLogic().search(\n-                searchCond,\n-                anyQuery.getPage(),\n-                anyQuery.getSize(),\n-                getOrderByClauses(anyQuery.getOrderBy()),\n-                isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n-                anyQuery.getDetails());\n-\n-        return buildPagedResult(result.getRight(), anyQuery.getPage(), anyQuery.getSize(), result.getLeft());\n+        try {\n+            Pair<Integer, List<TO>> result = getAnyLogic().search(\n+                    searchCond,\n+                    anyQuery.getPage(),\n+                    anyQuery.getSize(),\n+                    getOrderByClauses(anyQuery.getOrderBy()),\n+                    isAssignableCond ? SyncopeConstants.ROOT_REALM : realm,\n+                    anyQuery.getDetails());\n+\n+            return buildPagedResult(result.getRight(), anyQuery.getPage(), anyQuery.getSize(), result.getLeft());\n+        } catch (IllegalArgumentException e) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n+            sce.getElements().add(anyQuery.getFiql());\n+            sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n+            throw sce;\n+        }\n     }\n \n     protected Date findLastChange(final String key) {"},{"sha":"97afca154d50a60566ff560e4c55c530446590eb","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractSearchService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractSearchService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractSearchService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractSearchService.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -44,7 +44,7 @@ protected SearchCond getSearchCond(final String fiql, final String realm) {\n         } catch (Exception e) {\n             LOG.error(\"Invalid FIQL expression: {}\", fiql, e);\n \n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n             sce.getElements().add(fiql);\n             sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n             throw sce;"},{"sha":"10d4909f5630e58fa89544508198ffcf288d1884","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -86,7 +86,7 @@ public PagedResult<AnyObjectTO> search(final AnyQuery anyQuery) {\n         if (StringUtils.isBlank(anyQuery.getFiql())\n                 || -1 == anyQuery.getFiql().indexOf(SpecialAttr.TYPE.toString())) {\n \n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n             sce.getElements().add(SpecialAttr.TYPE.toString() + \" is required in the FIQL string\");\n             throw sce;\n         }"},{"sha":"e90f339f63b7c01a3d795ebfabf026ddf4ea53cb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/FilterConverter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverter.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -51,7 +51,7 @@ public static Filter convert(final String fiql) {\n \n             return visitor.getQuery();\n         } catch (Exception e) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n             sce.getElements().add(fiql);\n             sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n             throw sce;"},{"sha":"83c1486f122a74f0de621b8208f950119631581d","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/search/SearchCondConverter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverter.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -55,7 +55,7 @@ public static SearchCond convert(final SearchCondVisitor visitor, final String f\n \n             return visitor.getQuery();\n         } catch (Exception e) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n             sce.getElements().add(fiql);\n             sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n             throw sce;"},{"sha":"84f73d846f02e553fa66d36ab498d39c15afcf0d","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/FilterConverterTest.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FFilterConverterTest.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -117,7 +117,7 @@ public void like() {\n             FilterConverter.convert(fiql);\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n \n@@ -130,7 +130,7 @@ public void ilike() {\n             FilterConverter.convert(fiql);\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n \n@@ -143,7 +143,7 @@ public void nilike() {\n             FilterConverter.convert(fiql);\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n \n@@ -178,7 +178,7 @@ public void inDynRealms() {\n             FilterConverter.convert(SpecialAttr.DYNREALMS + \"==realm\");\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n \n@@ -188,7 +188,7 @@ public void notInDynRealms() {\n             FilterConverter.convert(SpecialAttr.DYNREALMS + \"!=realm\");\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n \n@@ -198,7 +198,7 @@ public void hasResources() {\n             FilterConverter.convert(SpecialAttr.RESOURCES + \"==resource\");\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n \n@@ -208,7 +208,7 @@ public void hasNotResources() {\n             FilterConverter.convert(SpecialAttr.RESOURCES + \"!=resource\");\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n "},{"sha":"111aa6774b8448e6ee406399e82ddb25b9551489","filename":"core/persistence-api/src/test/java/org/apache/syncope/core/persistence/api/search/SearchCondConverterTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fsearch%2FSearchCondConverterTest.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -329,5 +329,4 @@ public void issueSYNCOPE1223() {\n \n         assertEquals(SearchCond.getLeaf(cond), SearchCondConverter.convert(VISITOR, fiql));\n     }\n-\n }"},{"sha":"0a01536473cfa1c3052d87929f0d81ef9af4852c","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -247,12 +247,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        Pair<PlainSchema, PlainAttrValue> checked;\n-        try {\n-            checked = check(cond, svs.anyTypeKind);\n-        } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY;\n-        }\n+        Pair<PlainSchema, PlainAttrValue> checked = check(cond, svs.anyTypeKind);\n \n         // normalize NULL / NOT NULL checks\n         if (not) {"},{"sha":"646fd9208bca10a52593b24052b10c7b4e98821f","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -612,8 +612,7 @@ protected String getQuery(\n \n             Realm realm = realmDAO.findByFullPath(cond.getExpression());\n             if (realm == null) {\n-                LOG.warn(\"Invalid Realm full path: {}\", cond.getExpression());\n-                return EMPTY_QUERY;\n+                throw new IllegalArgumentException(\"Invalid Realm full path: \" + cond.getExpression());\n             }\n             cond.setExpression(realm.getKey());\n         }"},{"sha":"f4bd37af973329f3b580e35710e00cb19f126001","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":8,"deletions":16,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -189,8 +189,7 @@ protected Pair<PlainSchema, PlainAttrValue> check(final AttrCond cond, final Any\n \n         PlainSchema schema = plainSchemaDAO.find(cond.getSchema());\n         if (schema == null) {\n-            LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Invalid schema \" + cond.getSchema());\n         }\n \n         PlainAttrValue attrValue = schema.isUniqueConstraint()\n@@ -205,8 +204,7 @@ protected Pair<PlainSchema, PlainAttrValue> check(final AttrCond cond, final Any\n                 ((JPAPlainSchema) schema).validator().validate(cond.getExpression(), attrValue);\n             }\n         } catch (ValidationException e) {\n-            LOG.error(\"Could not validate expression '\" + cond.getExpression() + '\\'', e);\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Could not validate expression \" + cond.getExpression());\n         }\n \n         return Pair.of(schema, attrValue);\n@@ -221,8 +219,7 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n \n         Field anyField = anyUtils.getField(computed.getSchema());\n         if (anyField == null) {\n-            LOG.warn(\"Ignoring invalid field '{}'\", computed.getSchema());\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Invalid schema \" + computed.getSchema());\n         }\n         // Keeps track of difference between entity's getKey() and JPA @Id fields\n         if (\"key\".equals(computed.getSchema())) {\n@@ -268,8 +265,7 @@ protected Triple<PlainSchema, PlainAttrValue, AnyCond> check(final AnyCond cond,\n             try {\n                 ((JPAPlainSchema) schema).validator().validate(computed.getExpression(), attrValue);\n             } catch (ValidationException e) {\n-                LOG.error(\"Could not validate expression '\" + computed.getExpression() + '\\'', e);\n-                throw new IllegalArgumentException();\n+                throw new IllegalArgumentException(\"Could not validate expression \" + computed.getExpression());\n             }\n         }\n \n@@ -285,8 +281,7 @@ protected List<String> check(final MembershipCond cond) {\n                 ? Optional.ofNullable(groupDAO.findKey(cond.getGroup())).map(List::of).orElseGet(List::of)\n                 : groupDAO.findKeysByNamePattern(cond.getGroup());\n         if (matching.isEmpty()) {\n-            LOG.error(\"Could not find group(s) for '{}'\", cond.getGroup());\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Could not find group(s) for \" + cond.getGroup());\n         }\n \n         return matching;\n@@ -301,8 +296,7 @@ protected String check(final RelationshipCond cond) {\n             rightAnyObjectKey = Optional.ofNullable(anyObject).map(Entity::getKey).orElse(null);\n         }\n         if (rightAnyObjectKey == null) {\n-            LOG.error(\"Could not find any object for '\" + cond.getAnyObject() + '\\'');\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Could not find any object for \" + cond.getAnyObject());\n         }\n \n         return rightAnyObjectKey;\n@@ -311,8 +305,7 @@ protected String check(final RelationshipCond cond) {\n     protected Realm check(final AssignableCond cond) {\n         Realm realm = realmDAO.findByFullPath(cond.getRealmFullPath());\n         if (realm == null) {\n-            LOG.error(\"Could not find realm for '\" + cond.getRealmFullPath() + '\\'');\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Could not find realm for \" + cond.getRealmFullPath());\n         }\n \n         return realm;\n@@ -330,8 +323,7 @@ protected String check(final MemberCond cond) {\n             memberKey = Optional.ofNullable(member).map(Entity::getKey).orElse(null);\n         }\n         if (memberKey == null) {\n-            LOG.error(\"Could not find user or any object for '\" + cond.getMember() + '\\'');\n-            throw new IllegalArgumentException();\n+            throw new IllegalArgumentException(\"Could not find user or any object for \" + cond.getMember());\n         }\n \n         return memberKey;"},{"sha":"185074ae9b4d916856e8ded3f3c6ae2184db7e65","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":9,"deletions":44,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -72,8 +72,6 @@\n  */\n public class JPAAnySearchDAO extends AbstractAnySearchDAO {\n \n-    protected static final String EMPTY_QUERY = \"SELECT any_id FROM user_search WHERE 1=2\";\n-\n     public JPAAnySearchDAO(\n             final RealmDAO realmDAO,\n             final DynRealmDAO dynRealmDAO,\n@@ -248,9 +246,7 @@ protected void fillWithParameters(final Query query, final List<Object> paramete\n             if (parameters.get(i) instanceof Date) {\n                 query.setParameter(i + 1, (Date) parameters.get(i), TemporalType.TIMESTAMP);\n             } else if (parameters.get(i) instanceof Boolean) {\n-                query.setParameter(i + 1, ((Boolean) parameters.get(i))\n-                        ? 1\n-                        : 0);\n+                query.setParameter(i + 1, ((Boolean) parameters.get(i)) ? 1 : 0);\n             } else {\n                 query.setParameter(i + 1, parameters.get(i));\n             }\n@@ -461,7 +457,7 @@ protected OrderBySupport parseOrderBy(\n                         }\n                         if (orderByUniquePlainSchemas.size() > 1 || orderByNonUniquePlainSchemas.size() > 1) {\n                             SyncopeClientException invalidSearch =\n-                                    SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+                                    SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n                             invalidSearch.getElements().add(\"Order by more than one attribute is not allowed; \"\n                                     + \"remove one from \" + (orderByUniquePlainSchemas.size() > 1\n                                     ? orderByUniquePlainSchemas : orderByNonUniquePlainSchemas));\n@@ -661,12 +657,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        String rightAnyObjectKey;\n-        try {\n-            rightAnyObjectKey = check(cond);\n-        } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY;\n-        }\n+        String rightAnyObjectKey = check(cond);\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -691,12 +682,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        List<String> groupKeys;\n-        try {\n-            groupKeys = check(cond);\n-        } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY;\n-        }\n+        List<String> groupKeys = check(cond);\n \n         String where = groupKeys.stream().\n                 map(key -> \"group_id=?\" + setParameter(parameters, key)).\n@@ -858,12 +844,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        Realm realm;\n-        try {\n-            realm = check(cond);\n-        } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY;\n-        }\n+        Realm realm = check(cond);\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n@@ -889,12 +870,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        String memberKey;\n-        try {\n-            memberKey = check(cond);\n-        } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY;\n-        }\n+        String memberKey = check(cond);\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n@@ -1062,12 +1038,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        Pair<PlainSchema, PlainAttrValue> checked;\n-        try {\n-            checked = check(cond, svs.anyTypeKind);\n-        } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY;\n-        }\n+        Pair<PlainSchema, PlainAttrValue> checked = check(cond, svs.anyTypeKind);\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \");\n         switch (cond.getType()) {\n@@ -1118,18 +1089,12 @@ protected String getQuery(\n \n             Realm realm = realmDAO.findByFullPath(cond.getExpression());\n             if (realm == null) {\n-                LOG.warn(\"Invalid Realm full path: {}\", cond.getExpression());\n-                return EMPTY_QUERY;\n+                throw new IllegalArgumentException(\"Invalid Realm full path: \" + cond.getExpression());\n             }\n             cond.setExpression(realm.getKey());\n         }\n \n-        Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n-        try {\n-            checked = check(cond, svs.anyTypeKind);\n-        } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY;\n-        }\n+        Triple<PlainSchema, PlainAttrValue, AnyCond> checked = check(cond, svs.anyTypeKind);\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");"},{"sha":"b371889e7f5667b62e01b58e842b319205053280","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -188,7 +188,7 @@ public void issueSYNCOPE1417() {\n             searchDAO.search(searchCondition, orderByClauses, AnyTypeKind.USER);\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n "},{"sha":"587d1a780b21b0a11b7e88339de222df2c54738f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/DynRealmDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FDynRealmDataBinderImpl.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -62,7 +62,7 @@ public DynRealmDataBinderImpl(\n     protected void setDynMembership(final DynRealm dynRealm, final AnyType anyType, final String dynMembershipFIQL) {\n         SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n             sce.getElements().add(dynMembershipFIQL);\n             throw sce;\n         }"},{"sha":"6ec503ee7a7a271c0d4b59ad89a9e4e8526037fb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -124,7 +124,7 @@ public GroupDataBinderImpl(\n     protected void setDynMembership(final Group group, final AnyType anyType, final String dynMembershipFIQL) {\n         SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n             sce.getElements().add(dynMembershipFIQL);\n             throw sce;\n         }"},{"sha":"bb6a867a0e5728df16e2b05425b750ba364c763a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -75,7 +75,7 @@ public RoleDataBinderImpl(\n     protected void setDynMembership(final Role role, final String dynMembershipFIQL) {\n         SearchCond dynMembershipCond = SearchCondConverter.convert(searchCondVisitor, dynMembershipFIQL);\n         if (!dynMembershipCond.isValid()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n             sce.getElements().add(dynMembershipFIQL);\n             throw sce;\n         }"},{"sha":"6211f33323e08e016766027d6626cf00231e4449","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":14,"deletions":11,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -214,21 +214,24 @@ protected String getDelegationKey(final SyncopeAuthenticationDetails details, fi\n     public Triple<User, Boolean, String> authenticate(final String domain, final Authentication authentication) {\n         User user = null;\n \n-        List<String> authAttrValues = List.of(confParamOps.get(domain,\n-                \"authentication.attributes\", new String[] { \"username\" }, String[].class));\n-        for (int i = 0; user == null && i < authAttrValues.size(); i++) {\n-            if (\"username\".equals(authAttrValues.get(i))) {\n+        String[] authAttrValues = confParamOps.get(\n+                domain, \"authentication.attributes\", new String[] { \"username\" }, String[].class);\n+        for (int i = 0; user == null && i < authAttrValues.length; i++) {\n+            if (\"username\".equals(authAttrValues[i])) {\n                 user = userDAO.findByUsername(authentication.getName());\n             } else {\n                 AttrCond attrCond = new AttrCond(AttrCond.Type.EQ);\n-                attrCond.setSchema(authAttrValues.get(i));\n+                attrCond.setSchema(authAttrValues[i]);\n                 attrCond.setExpression(authentication.getName());\n-                List<User> users = anySearchDAO.search(SearchCond.getLeaf(attrCond), AnyTypeKind.USER);\n-                if (users.size() == 1) {\n-                    user = users.get(0);\n-                } else {\n-                    LOG.warn(\"Value {} provided for {} does not uniquely identify a user\",\n-                            authentication.getName(), authAttrValues.get(i));\n+                try {\n+                    List<User> users = anySearchDAO.search(SearchCond.getLeaf(attrCond), AnyTypeKind.USER);\n+                    if (users.size() == 1) {\n+                        user = users.get(0);\n+                    } else {\n+                        LOG.warn(\"Search condition {} does not uniquely match a user\", attrCond);\n+                    }\n+                } catch (IllegalArgumentException e) {\n+                    LOG.error(\"While searching user for authentication via {}\", attrCond, e);\n                 }\n             }\n         }"},{"sha":"26406b8ce14fa6839c14981738ccd3c5703d3778","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":10,"deletions":49,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -24,8 +24,6 @@\n import co.elastic.clients.elasticsearch._types.SearchType;\n import co.elastic.clients.elasticsearch._types.SortOptions;\n import co.elastic.clients.elasticsearch._types.SortOrder;\n-import co.elastic.clients.elasticsearch._types.query_dsl.MatchAllQuery;\n-import co.elastic.clients.elasticsearch._types.query_dsl.MatchNoneQuery;\n import co.elastic.clients.elasticsearch._types.query_dsl.Query;\n import co.elastic.clients.elasticsearch._types.query_dsl.QueryBuilders;\n import co.elastic.clients.elasticsearch.core.CountRequest;\n@@ -88,12 +86,6 @@\n  */\n public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {\n \n-    protected static final Query MATCH_NONE_QUERY =\n-            new Query.Builder().matchNone(new MatchNoneQuery.Builder().build()).build();\n-\n-    protected static final Query MATCH_ALL_QUERY =\n-            new Query.Builder().matchAll(new MatchAllQuery.Builder().build()).build();\n-\n     protected static final char[] ELASTICSEARCH_REGEX_CHARS = new char[] {\n         '.', '?', '+', '*', '|', '{', '}', '[', ']', '(', ')', '\"', '\\\\', '&' };\n \n@@ -369,7 +361,7 @@ protected Query getQuery(final SearchCond cond, final AnyTypeKind kind) {\n                 }\n \n                 if (query == null) {\n-                    query = MATCH_NONE_QUERY;\n+                    throw new IllegalArgumentException(\"Cannot construct QueryBuilder\");\n                 }\n \n                 if (cond.getType() == SearchCond.Type.NOT_LEAF) {\n@@ -408,25 +400,15 @@ protected Query getQuery(final RelationshipTypeCond cond) {\n     }\n \n     protected Query getQuery(final RelationshipCond cond) {\n-        String rightAnyObjectKey;\n-        try {\n-            rightAnyObjectKey = check(cond);\n-        } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY;\n-        }\n+        String rightAnyObjectKey = check(cond);\n \n         return new Query.Builder().term(QueryBuilders.term().\n                 field(\"relationships\").value(FieldValue.of(rightAnyObjectKey)).build()).\n                 build();\n     }\n \n     protected Query getQuery(final MembershipCond cond) {\n-        List<String> groupKeys;\n-        try {\n-            groupKeys = check(cond);\n-        } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY;\n-        }\n+        List<String> groupKeys = check(cond);\n \n         List<Query> membershipQueries = groupKeys.stream().\n                 map(key -> new Query.Builder().term(QueryBuilders.term().\n@@ -440,12 +422,7 @@ protected Query getQuery(final MembershipCond cond) {\n     }\n \n     protected Query getQuery(final AssignableCond cond) {\n-        Realm realm;\n-        try {\n-            realm = check(cond);\n-        } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY;\n-        }\n+        Realm realm = check(cond);\n \n         List<Query> queries = new ArrayList<>();\n         if (cond.isFromGroup()) {\n@@ -486,12 +463,7 @@ protected Query getQuery(final DynRealmCond cond) {\n     }\n \n     protected Query getQuery(final MemberCond cond) {\n-        String memberKey;\n-        try {\n-            memberKey = check(cond);\n-        } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY;\n-        }\n+        String memberKey = check(cond);\n \n         return new Query.Builder().term(QueryBuilders.term().\n                 field(\"members\").value(FieldValue.of(memberKey)).build()).\n@@ -513,7 +485,7 @@ protected Query fillAttrQuery(\n                 ? attrValue.getDateValue().getTime()\n                 : attrValue.getValue();\n \n-        Query query = MATCH_NONE_QUERY;\n+        Query query = null;\n \n         switch (cond.getType()) {\n             case ISNOTNULL:\n@@ -602,12 +574,7 @@ protected Query fillAttrQuery(\n     }\n \n     protected Query getQuery(final AttrCond cond, final AnyTypeKind kind) {\n-        Pair<PlainSchema, PlainAttrValue> checked;\n-        try {\n-            checked = check(cond, kind);\n-        } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY;\n-        }\n+        Pair<PlainSchema, PlainAttrValue> checked = check(cond, kind);\n \n         return fillAttrQuery(checked.getLeft(), checked.getRight(), cond);\n     }\n@@ -618,23 +585,17 @@ protected Query getQuery(final AnyCond cond, final AnyTypeKind kind) {\n \n             Realm realm = realmDAO.find(cond.getExpression());\n             if (realm == null) {\n-                LOG.warn(\"Invalid Realm key: {}\", cond.getExpression());\n-                return MATCH_NONE_QUERY;\n+                throw new IllegalArgumentException(\"Invalid Realm key: \" + cond.getExpression());\n             }\n             cond.setExpression(realm.getFullPath());\n         }\n \n-        Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n-        try {\n-            checked = check(cond, kind);\n-        } catch (IllegalArgumentException e) {\n-            return MATCH_NONE_QUERY;\n-        }\n+        Triple<PlainSchema, PlainAttrValue, AnyCond> checked = check(cond, kind);\n \n         return fillAttrQuery(checked.getLeft(), checked.getMiddle(), checked.getRight());\n     }\n \n     protected Query getQueryForCustomConds(final SearchCond cond, final AnyTypeKind kind) {\n-        return MATCH_ALL_QUERY;\n+        return null;\n     }\n }"},{"sha":"7c1f0b54707ca94a8b5303554141e66303284d9c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -254,10 +254,12 @@ public void update() {\n     @Test\n     public void patch() {\n         GroupCR createReq = getBasicSample(\"patch\");\n-        createReq.setUDynMembershipCond(\"(($groups==3;$resources!=ws-target-resource-1);aLong==1)\");\n+        createReq.setUDynMembershipCond(\n+                \"(($groups==ebf97068-aa4b-4a85-9f01-680e8c4cf227;$resources!=ws-target-resource-1);aLong==1)\");\n         createReq.getADynMembershipConds().put(\n                 PRINTER,\n-                \"(($groups==7;cool==ss);$resources==ws-target-resource-2);$type==PRINTER\");\n+                \"(($groups==ece66293-8f31-4a84-8e8d-23da36e70846;cool==ss);$resources==ws-target-resource-2);\"\n+                + \"$type==PRINTER\");\n \n         GroupTO created = createGroup(createReq).getEntity();\n "},{"sha":"58a6a9dfc6254bfad95747adfe3d86cf7c07e7d6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SearchITCase.java","status":"modified","additions":30,"deletions":12,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9e29c518beaa07dc3161cd23b48c6568e595733a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9e29c518beaa07dc3161cd23b48c6568e595733a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSearchITCase.java?ref=9e29c518beaa07dc3161cd23b48c6568e595733a","patch":"@@ -430,12 +430,15 @@ public void searchBySecurityAnswer() {\n         UserTO userTO = createUser(userCR).getEntity();\n         assertNotNull(userTO.getSecurityQuestion());\n \n-        PagedResult<UserTO> matchingUsers = userService.search(\n-                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                        fiql(SyncopeClient.getUserSearchConditionBuilder().\n-                                is(\"securityAnswer\").equalTo(securityAnswer).query()).build());\n-        assertNotNull(matchingUsers);\n-        assertTrue(matchingUsers.getResult().isEmpty());\n+        try {\n+            userService.search(\n+                    new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                            fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                                    is(\"securityAnswer\").equalTo(securityAnswer).query()).build());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n+        }\n     }\n \n     @Test\n@@ -769,7 +772,7 @@ public void issueSYNCOPE1417() {\n                 fail();\n             }\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.InvalidSearchExpression, e.getType());\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n         }\n     }\n \n@@ -806,11 +809,26 @@ public void issueSYNCOPE1419() {\n \n     @Test\n     public void issueSYNCOPE1648() {\n-        PagedResult<UserTO> matching = userService.search(\n-                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                        fiql(SyncopeClient.getUserSearchConditionBuilder().\n-                                is(\"username\").notEqualTo(\"verdi\").query()).\n-                        build());\n+        PagedResult<UserTO> matching = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                        is(\"username\").notEqualTo(\"verdi\").query()).build());\n         assertTrue(matching.getResult().stream().noneMatch(user -> \"verdi\".equals(user.getUsername())));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE1663() {\n+        try {\n+            userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                    fiql(\"lastChangeDate=ge=2022-01-25T17:00:06Z\").build());\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n+            assertTrue(e.getElements().stream().\n+                    anyMatch(elem -> elem.contains(\"Could not validate expression 2022-01-25T17:00:06Z\")));\n+        }\n+\n+        PagedResult<UserTO> matching = userService.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(\"lastChangeDate=ge=2022-01-25T17:00:06+0000\").build());\n+        assertNotNull(matching);\n+    }\n }"}]}