{"sha":"bbb051feb43291de74d7cec215c63d2d68cbca03","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmJiYjA1MWZlYjQzMjkxZGU3NGQ3Y2VjMjE1YzYzZDJkNjhjYmNhMDM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-25T10:43:25Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-25T11:09:02Z"},"message":"[SYNCOPE-119] Added search options and checks to match assignable conditions, for usage with memberships and relationships","tree":{"sha":"ad234ab6814248eb915090021641eea61d0ff444","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ad234ab6814248eb915090021641eea61d0ff444"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/bbb051feb43291de74d7cec215c63d2d68cbca03","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bbb051feb43291de74d7cec215c63d2d68cbca03","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/bbb051feb43291de74d7cec215c63d2d68cbca03","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/bbb051feb43291de74d7cec215c63d2d68cbca03/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7b1cb89bba9b91df3a9153e9bceec5a53a2deec9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7b1cb89bba9b91df3a9153e9bceec5a53a2deec9","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7b1cb89bba9b91df3a9153e9bceec5a53a2deec9"}],"stats":{"total":1241,"additions":1031,"deletions":210},"files":[{"sha":"c2d62509e926d2b62a52b0d719a632e2780c230c","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -93,10 +93,11 @@ public static GroupFiqlSearchConditionBuilder getGroupSearchConditionBuilder() {\n     /**\n      * Returns a new instance of {@link AnyObjectFiqlSearchConditionBuilder}, for assisted building of FIQL queries.\n      *\n+     * @param type any type\n      * @return default instance of {@link AnyObjectFiqlSearchConditionBuilder}\n      */\n-    public static AnyObjectFiqlSearchConditionBuilder getAnyObjectSearchConditionBuilder() {\n-        return new AnyObjectFiqlSearchConditionBuilder();\n+    public static AnyObjectFiqlSearchConditionBuilder getAnyObjectSearchConditionBuilder(final String type) {\n+        return new AnyObjectFiqlSearchConditionBuilder(type);\n     }\n \n     /**"},{"sha":"0841de35363887b77a51ddf5c91f7e4da684aa85","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectFiqlSearchConditionBuilder.java","status":"modified","additions":102,"deletions":8,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectFiqlSearchConditionBuilder.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -18,38 +18,84 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n+import java.util.Collections;\n import java.util.Map;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.client.FiqlSearchConditionBuilder;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n /**\n  * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n  * any objects in Syncope.\n  */\n public class AnyObjectFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n \n-    public AnyObjectFiqlSearchConditionBuilder() {\n-        super();\n-    }\n+    private final String type;\n \n-    public AnyObjectFiqlSearchConditionBuilder(final Map<String, String> properties) {\n-        super(properties);\n+    public AnyObjectFiqlSearchConditionBuilder(final String type) {\n+        super();\n+        this.type = type;\n     }\n \n     @Override\n     protected Builder newBuilderInstance() {\n         return new Builder(properties);\n     }\n \n+    @Override\n+    public String query() {\n+        return new FiqlSearchConditionBuilder.Builder(Collections.<String, String>emptyMap()).\n+                is(SpecialAttr.TYPE.toString()).equalTo(type).query();\n+    }\n+\n     @Override\n     public AnyObjectProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n-    public CompleteCondition type(final String type) {\n-        return newBuilderInstance().is(SpecialAttr.TYPE.toString()).equalTo(type);\n+    public CompleteCondition inGroups(final Long group, final Long... moreGroups) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.GROUPS.toString()).\n+                inGroups(group, moreGroups);\n     }\n \n-    protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n+    public CompleteCondition notInGroups(final Long group, final Long... moreGroups) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.GROUPS.toString()).\n+                notInGroups(group, moreGroups);\n+    }\n+\n+    public CompleteCondition inRelationships(final Long anyType, final Long... moreAnyTypes) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.RELATIONSHIPS.toString()).\n+                inRelationships(anyType, moreAnyTypes);\n+    }\n+\n+    public CompleteCondition notInRelationships(final Long anyType, final Long... moreAnyTypes) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.RELATIONSHIPS.toString()).\n+                notInRelationships(anyType, moreAnyTypes);\n+    }\n+\n+    public CompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.RELATIONSHIP_TYPES.toString()).\n+                inRelationshipTypes(type, moreTypes);\n+    }\n+\n+    public CompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.RELATIONSHIP_TYPES.toString()).\n+                notInRelationshipTypes(type, moreTypes);\n+    }\n+\n+    public CompleteCondition isAssignable(final String realm, final String... moreRealms) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.ASSIGNABLE.toString()).\n+                isAssignable(realm, moreRealms);\n+    }\n+\n+    protected class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n             implements AnyObjectProperty, CompleteCondition {\n \n         public Builder(final Map<String, String> properties) {\n@@ -60,12 +106,60 @@ public Builder(final Builder parent) {\n             super(parent);\n         }\n \n+        @Override\n+        public String query() {\n+            FiqlSearchConditionBuilder.Builder b = new FiqlSearchConditionBuilder.Builder(this);\n+            return b.and(SpecialAttr.TYPE.toString()).equalTo(type).query();\n+        }\n+\n         @Override\n         public AnyObjectProperty is(final String property) {\n             Builder b = new Builder(this);\n             b.result = property;\n             return b;\n         }\n \n+        @Override\n+        public CompleteCondition inGroups(final Long group, final Long... moreGroups) {\n+            this.result = SpecialAttr.GROUPS.toString();\n+            return condition(FiqlParser.EQ, group, (Object[]) moreGroups);\n+        }\n+\n+        @Override\n+        public CompleteCondition notInGroups(final Long group, final Long... moreGroups) {\n+            this.result = SpecialAttr.GROUPS.toString();\n+            return condition(FiqlParser.NEQ, group, (Object[]) moreGroups);\n+        }\n+\n+        @Override\n+        public CompleteCondition inRelationships(final Long anyObject, final Long... moreAnyObjects) {\n+            this.result = SpecialAttr.RELATIONSHIPS.toString();\n+            return condition(FiqlParser.EQ, anyObject, (Object[]) moreAnyObjects);\n+        }\n+\n+        @Override\n+        public CompleteCondition notInRelationships(final Long group, final Long... moreRelationships) {\n+            this.result = SpecialAttr.RELATIONSHIPS.toString();\n+            return condition(FiqlParser.NEQ, group, (Object[]) moreRelationships);\n+        }\n+\n+        @Override\n+        public CompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n+            this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n+            return condition(FiqlParser.EQ, type, (Object[]) moreTypes);\n+        }\n+\n+        @Override\n+        public CompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n+            this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n+            return condition(FiqlParser.NEQ, type, (Object[]) moreTypes);\n+        }\n+\n+        @Override\n+        public CompleteCondition isAssignable(final String realm, final String... moreRealms) {\n+            this.result = SpecialAttr.ASSIGNABLE.toString();\n+            return condition(FiqlParser.EQ, realm, (Object[]) moreRealms);\n+        }\n+\n     }\n }"},{"sha":"47de383ea8daa160956b320f40e817a35f19cf48","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/AnyObjectProperty.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FAnyObjectProperty.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -18,6 +18,22 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+\n public interface AnyObjectProperty extends SyncopeProperty {\n \n+    CompleteCondition inGroups(Long group, Long... moreGroups);\n+\n+    CompleteCondition notInGroups(Long group, Long... moreGroups);\n+\n+    CompleteCondition inRelationships(Long anyObject, Long... moreAnyObjects);\n+\n+    CompleteCondition notInRelationships(Long anyObject, Long... moreAnyObjects);\n+\n+    CompleteCondition inRelationshipTypes(String type, String... moreTypes);\n+\n+    CompleteCondition notInRelationshipTypes(String type, String... moreTypes);\n+\n+    CompleteCondition isAssignable(String realm, String... moreRealms);\n+\n }"},{"sha":"9a2bc3f7857db764da29d61ef4fc74337fbb6866","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupFiqlSearchConditionBuilder.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -20,21 +20,14 @@\n \n import java.util.Map;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n /**\n  * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n  * groups in Syncope.\n  */\n public class GroupFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n \n-    public GroupFiqlSearchConditionBuilder() {\n-        super();\n-    }\n-\n-    public GroupFiqlSearchConditionBuilder(final Map<String, String> properties) {\n-        super(properties);\n-    }\n-\n     @Override\n     protected Builder newBuilderInstance() {\n         return new Builder(properties);\n@@ -45,6 +38,12 @@ public GroupProperty is(final String property) {\n         return newBuilderInstance().is(property);\n     }\n \n+    public CompleteCondition isAssignable(final String realm, final String... moreRealms) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.ASSIGNABLE.toString()).\n+                isAssignable(realm, moreRealms);\n+    }\n+\n     protected static class Builder extends AbstractFiqlSearchConditionBuilder.Builder\n             implements GroupProperty, CompleteCondition {\n \n@@ -63,5 +62,11 @@ public GroupProperty is(final String property) {\n             return b;\n         }\n \n+        @Override\n+        public CompleteCondition isAssignable(final String realm, final String... moreRealms) {\n+            this.result = SpecialAttr.ASSIGNABLE.toString();\n+            return condition(FiqlParser.EQ, realm, (Object[]) moreRealms);\n+        }\n+\n     }\n }"},{"sha":"8dc375ea3144c08251726cabd383a57dc6d51293","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupProperty.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupProperty.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -18,6 +18,10 @@\n  */\n package org.apache.syncope.common.lib.search;\n \n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+\n public interface GroupProperty extends SyncopeProperty {\n \n+    CompleteCondition isAssignable(String realm, String... moreRealms);\n+\n }"},{"sha":"1b1f484bf0bed8d4029a924763d8e9423bb43cc5","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":30,"deletions":1,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -24,11 +24,40 @@\n \n public enum SpecialAttr {\n \n+    /**\n+     * Applies to users, groups and any objects.\n+     *//**\n+     * Applies to users, groups and any objects.\n+     */\n     NULL(\"$null\"),\n+    /**\n+     * Applies to any objects.\n+     */\n     TYPE(\"$type\"),\n+    /**\n+     * Applies to users, groups and any objects.\n+     */\n     RESOURCES(\"$resources\"),\n+    /**\n+     * Applies to users and any objects.\n+     */\n     GROUPS(\"$groups\"),\n-    ROLES(\"$roles\");\n+    /**\n+     * Applies to users and any objects.\n+     */\n+    RELATIONSHIPS(\"$relationships\"),\n+    /**\n+     * Applies to users and any objects.\n+     */\n+    RELATIONSHIP_TYPES(\"$relationshipTypes\"),\n+    /**\n+     * Applies to users.\n+     */\n+    ROLES(\"$roles\"),\n+    /**\n+     * Applies to groups and any objects.\n+     */\n+    ASSIGNABLE(\"$assignable\");\n \n     private final String literal;\n "},{"sha":"30e89dd03c52943437d7a7f05cd9010cb2579fa0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserFiqlSearchConditionBuilder.java","status":"modified","additions":67,"deletions":13,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -28,14 +28,6 @@\n  */\n public class UserFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n \n-    public UserFiqlSearchConditionBuilder() {\n-        super();\n-    }\n-\n-    public UserFiqlSearchConditionBuilder(final Map<String, String> properties) {\n-        super(properties);\n-    }\n-\n     @Override\n     protected Builder newBuilderInstance() {\n         return new Builder(properties);\n@@ -47,20 +39,58 @@ public UserProperty is(final String property) {\n     }\n \n     public CompleteCondition inGroups(final Long group, final Long... moreGroups) {\n-        return newBuilderInstance().is(SpecialAttr.GROUPS.toString()).inGroups(group, moreGroups);\n+        return newBuilderInstance().\n+                is(SpecialAttr.GROUPS.toString()).\n+                inGroups(group, moreGroups);\n+    }\n+\n+    public CompleteCondition notInGroups(final Long group, final Long... moreGroups) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.GROUPS.toString()).\n+                notInGroups(group, moreGroups);\n+    }\n+\n+    public CompleteCondition inRelationships(final Long anyType, final Long... moreAnyTypes) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.RELATIONSHIPS.toString()).\n+                inRelationships(anyType, moreAnyTypes);\n+    }\n+\n+    public CompleteCondition notInRelationships(final Long anyType, final Long... moreAnyTypes) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.RELATIONSHIPS.toString()).\n+                notInRelationships(anyType, moreAnyTypes);\n+    }\n+\n+    public CompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.RELATIONSHIP_TYPES.toString()).\n+                inRelationshipTypes(type, moreTypes);\n+    }\n+\n+    public CompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.RELATIONSHIP_TYPES.toString()).\n+                notInRelationshipTypes(type, moreTypes);\n     }\n \n     public CompleteCondition inRoles(final String role, final String... moreRoles) {\n-        return newBuilderInstance().is(SpecialAttr.ROLES.toString()).inRoles(role, moreRoles);\n+        return newBuilderInstance().\n+                is(SpecialAttr.ROLES.toString()).\n+                inRoles(role, moreRoles);\n     }\n \n-    public CompleteCondition notInGroups(final Long group, final Long... moreGroups) {\n-        return newBuilderInstance().is(SpecialAttr.GROUPS.toString()).notInGroups(group, moreGroups);\n+    public CompleteCondition notInRoles(final String role, final String... moreRoles) {\n+        return newBuilderInstance().\n+                is(SpecialAttr.ROLES.toString()).\n+                notInRoles(role, moreRoles);\n     }\n \n     @Override\n     public CompleteCondition hasResources(final String resource, final String... moreResources) {\n-        return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasResources(resource, moreResources);\n+        return newBuilderInstance().\n+                is(SpecialAttr.RESOURCES.toString()).\n+                hasResources(resource, moreResources);\n     }\n \n     @Override\n@@ -98,6 +128,30 @@ public CompleteCondition notInGroups(final Long group, final Long... moreGroups)\n             return condition(FiqlParser.NEQ, group, (Object[]) moreGroups);\n         }\n \n+        @Override\n+        public CompleteCondition inRelationships(final Long anyObject, final Long... moreAnyObjects) {\n+            this.result = SpecialAttr.RELATIONSHIPS.toString();\n+            return condition(FiqlParser.EQ, anyObject, (Object[]) moreAnyObjects);\n+        }\n+\n+        @Override\n+        public CompleteCondition notInRelationships(final Long anyObject, final Long... moreAnyObjects) {\n+            this.result = SpecialAttr.RELATIONSHIPS.toString();\n+            return condition(FiqlParser.NEQ, anyObject, (Object[]) moreAnyObjects);\n+        }\n+\n+        @Override\n+        public CompleteCondition inRelationshipTypes(final String type, final String... moreTypes) {\n+            this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n+            return condition(FiqlParser.EQ, type, (Object[]) moreTypes);\n+        }\n+\n+        @Override\n+        public CompleteCondition notInRelationshipTypes(final String type, final String... moreTypes) {\n+            this.result = SpecialAttr.RELATIONSHIP_TYPES.toString();\n+            return condition(FiqlParser.NEQ, type, (Object[]) moreTypes);\n+        }\n+\n         @Override\n         public CompleteCondition inRoles(final String role, final String... moreRoles) {\n             this.result = SpecialAttr.ROLES.toString();"},{"sha":"9294ab02da57caea2e3132fd4eb86e68540b73aa","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserProperty.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -26,6 +26,14 @@ public interface UserProperty extends SyncopeProperty {\n \n     CompleteCondition notInGroups(Long group, Long... moreGroups);\n \n+    CompleteCondition inRelationships(Long anyObject, Long... moreAnyObjects);\n+\n+    CompleteCondition notInRelationships(Long anyObject, Long... moreAnyObjects);\n+\n+    CompleteCondition inRelationshipTypes(String type, String... moreTypes);\n+\n+    CompleteCondition notInRelationshipTypes(String type, String... moreTypes);\n+\n     CompleteCondition inRoles(String role, String... moreRoles);\n \n     CompleteCondition notInRoles(String role, String... moreRoles);"},{"sha":"dfc5fe20d475954d581f08c72f722158156bfd4d","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -40,6 +40,7 @@ public enum ClientExceptionType {\n     InvalidProvision(Response.Status.BAD_REQUEST),\n     InvalidReport(Response.Status.BAD_REQUEST),\n     InvalidReportExec(Response.Status.BAD_REQUEST),\n+    InvalidRelationship(Response.Status.BAD_REQUEST),\n     InvalidRelationshipType(Response.Status.BAD_REQUEST),\n     InvalidAnyType(Response.Status.BAD_REQUEST),\n     InvalidAnyObject(Response.Status.BAD_REQUEST),\n@@ -52,6 +53,7 @@ public enum ClientExceptionType {\n     InvalidDerSchema(Response.Status.BAD_REQUEST),\n     InvalidVirSchema(Response.Status.BAD_REQUEST),\n     InvalidMapping(Response.Status.BAD_REQUEST),\n+    InvalidMembership(Response.Status.BAD_REQUEST),\n     InvalidRealm(Response.Status.BAD_REQUEST),\n     InvalidRole(Response.Status.BAD_REQUEST),\n     InvalidUser(Response.Status.BAD_REQUEST),"},{"sha":"1fe03d2c0f7bf2bde590e9d9ca63b2a6566ffe6d","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondVisitor.java","status":"modified","additions":25,"deletions":4,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -38,6 +38,9 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n \n /**\n  * Converts CXF's <tt>SearchCondition</tt> into internal <tt>SearchCond</tt>.\n@@ -105,22 +108,40 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                             leaf = SearchCond.getLeafCond(typeCond);\n                             break;\n \n+                        case RESOURCES:\n+                            ResourceCond resourceCond = new ResourceCond();\n+                            resourceCond.setResourceName(value);\n+                            leaf = SearchCond.getLeafCond(resourceCond);\n+                            break;\n+\n                         case GROUPS:\n                             MembershipCond groupCond = new MembershipCond();\n                             groupCond.setGroupKey(Long.valueOf(value));\n                             leaf = SearchCond.getLeafCond(groupCond);\n                             break;\n \n+                        case RELATIONSHIPS:\n+                            RelationshipCond relationshipCond = new RelationshipCond();\n+                            relationshipCond.setAnyObjectKey(Long.valueOf(value));\n+                            leaf = SearchCond.getLeafCond(relationshipCond);\n+                            break;\n+\n+                        case RELATIONSHIP_TYPES:\n+                            RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n+                            relationshipTypeCond.setRelationshipTypeKey(value);\n+                            leaf = SearchCond.getLeafCond(relationshipTypeCond);\n+                            break;\n+\n                         case ROLES:\n                             RoleCond roleCond = new RoleCond();\n                             roleCond.setRoleKey(value);\n                             leaf = SearchCond.getLeafCond(roleCond);\n                             break;\n \n-                        case RESOURCES:\n-                            ResourceCond resourceCond = new ResourceCond();\n-                            resourceCond.setResourceName(value);\n-                            leaf = SearchCond.getLeafCond(resourceCond);\n+                        case ASSIGNABLE:\n+                            AssignableCond assignableCond = new AssignableCond();\n+                            assignableCond.setRealmFullPath(value);\n+                            leaf = SearchCond.getLeafCond(assignableCond);\n                             break;\n \n                         default:"},{"sha":"e081ffadb183c06402ad28d81e3fb290212a05b0","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/search/SearchCondConverterTest.java","status":"modified","additions":49,"deletions":1,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -21,6 +21,7 @@\n import static org.junit.Assert.assertEquals;\n \n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n@@ -30,6 +31,9 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.junit.Test;\n \n public class SearchCondConverterTest {\n@@ -84,6 +88,35 @@ public void isNotNull() {\n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n     }\n \n+    @Test\n+    public void relationships() {\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().inRelationships(1L).query();\n+        assertEquals(SpecialAttr.RELATIONSHIPS + \"==1\", fiqlExpression);\n+\n+        RelationshipCond relationshipCond = new RelationshipCond();\n+        relationshipCond.setAnyObjectKey(1L);\n+        SearchCond simpleCond = SearchCond.getLeafCond(relationshipCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void relationshipTypes() {\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().inRelationshipTypes(\"type1\").query();\n+        assertEquals(SpecialAttr.RELATIONSHIP_TYPES + \"==type1\", fiqlExpression);\n+\n+        RelationshipTypeCond relationshipCond = new RelationshipTypeCond();\n+        relationshipCond.setRelationshipTypeKey(\"type1\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(relationshipCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+\n+        fiqlExpression = new AnyObjectFiqlSearchConditionBuilder(\"PRINTER\").inRelationshipTypes(\"neighborhood\").query();\n+        assertEquals(\n+                SpecialAttr.RELATIONSHIP_TYPES + \"==neighborhood;\" + SpecialAttr.TYPE + \"==PRINTER\",\n+                fiqlExpression);\n+    }\n+\n     @Test\n     public void groups() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().inGroups(1L).query();\n@@ -120,9 +153,21 @@ public void resources() {\n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n     }\n \n+    @Test\n+    public void assignable() {\n+        String fiqlExpression = new GroupFiqlSearchConditionBuilder().isAssignable(\"/even/two\").query();\n+        assertEquals(SpecialAttr.ASSIGNABLE + \"==/even/two\", fiqlExpression);\n+\n+        AssignableCond assignableCond = new AssignableCond();\n+        assignableCond.setRealmFullPath(\"/even/two\");\n+        SearchCond simpleCond = SearchCond.getLeafCond(assignableCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n     @Test\n     public void type() {\n-        String fiqlExpression = new AnyObjectFiqlSearchConditionBuilder().type(\"PRINTER\").query();\n+        String fiqlExpression = new AnyObjectFiqlSearchConditionBuilder(\"PRINTER\").query();\n         assertEquals(SpecialAttr.TYPE + \"==PRINTER\", fiqlExpression);\n \n         AnyTypeCond acond = new AnyTypeCond();\n@@ -156,6 +201,9 @@ public void or() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().\n                 is(\"fullname\").equalTo(\"*o*\", \"*i*\", \"*ini\").query();\n         assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiqlExpression);\n+        fiqlExpression = new UserFiqlSearchConditionBuilder().\n+                is(\"fullname\").equalTo(\"*o*\").or(\"fullname\").equalTo(\"*i*\").or(\"fullname\").equalTo(\"*ini\").query();\n+        assertEquals(\"fullname==*o*,fullname==*i*,fullname==*ini\", fiqlExpression);\n \n         AttributeCond fullnameLeafCond1 = new AttributeCond(AttributeCond.Type.LIKE);\n         fullnameLeafCond1.setSchema(\"fullname\");"},{"sha":"67e85f233e6d652a7b879e9583cf3222702b2626","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnySearchDAO.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnySearchDAO.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -35,6 +35,14 @@ public interface AnySearchDAO extends DAO<Any<?>, Long> {\n      */\n     int count(Set<String> adminRealms, SearchCond searchCondition, AnyTypeKind kind);\n \n+    /**\n+     * @param realmFullPath for use with {@link org.apache.syncope.core.persistence.api.dao.search.AssignableCond}\n+     * @param kind any object\n+     * @param <T> any\n+     * @return the list of any objects matching the given search condition\n+     */\n+    <T extends Any<?>> List<T> searchAssignable(String realmFullPath, AnyTypeKind kind);\n+\n     /**\n      * @param searchCondition the search condition\n      * @param kind any object"},{"sha":"f8c94b6550c4a3724ef5a5452ecf0613f705949c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RealmDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRealmDAO.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -19,11 +19,14 @@\n package org.apache.syncope.core.persistence.api.dao;\n \n import java.util.List;\n+import java.util.regex.Pattern;\n import org.apache.syncope.core.persistence.api.entity.Policy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n \n public interface RealmDAO extends DAO<Realm, Long> {\n \n+    Pattern PATH_PATTERN = Pattern.compile(\"^(/[A-Za-z0-9]+)+\");\n+\n     Realm getRoot();\n \n     Realm find(Long key);"},{"sha":"0ece01bad0b8d3472ddc6ee52f20fd4cd0a9010a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/AssignableCond.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FAssignableCond.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.search;\n+\n+public class AssignableCond extends AbstractSearchCond {\n+\n+    private static final long serialVersionUID = 1237627275756159522L;\n+\n+    private String realmFullPath;\n+\n+    public String getRealmFullPath() {\n+        return realmFullPath;\n+    }\n+\n+    public void setRealmFullPath(final String realmFullPath) {\n+        this.realmFullPath = realmFullPath;\n+    }\n+\n+    @Override\n+    public final boolean isValid() {\n+        return realmFullPath != null;\n+    }\n+}"},{"sha":"d120e6223effd79cad33a01f083571b3badc943f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RelationshipTypeCond.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipTypeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipTypeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRelationshipTypeCond.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.search;\n+\n+public class RelationshipTypeCond extends AbstractSearchCond {\n+\n+    private static final long serialVersionUID = 906241367466433419L;\n+\n+    private String relationshipTypeKey;\n+\n+    public String getRelationshipTypeKey() {\n+        return relationshipTypeKey;\n+    }\n+\n+    public void setRelationshipTypeKey(final String relationshipTypeKey) {\n+        this.relationshipTypeKey = relationshipTypeKey;\n+    }\n+\n+    @Override\n+    public final boolean isValid() {\n+        return relationshipTypeKey != null;\n+    }\n+}"},{"sha":"a33ccf361bdba67ceff444e938e3d1e18a788ab3","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":40,"deletions":2,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -43,12 +43,16 @@ public enum Type {\n \n     private RelationshipCond relationshipCond;\n \n+    private RelationshipTypeCond relationshipTypeCond;\n+\n     private MembershipCond membershipCond;\n \n     private RoleCond roleCond;\n \n     private ResourceCond resourceCond;\n \n+    private AssignableCond assignableCond;\n+\n     private SearchCond leftNodeCond;\n \n     private SearchCond rightNodeCond;\n@@ -84,6 +88,15 @@ public static SearchCond getLeafCond(final RelationshipCond relationshipCond) {\n         return nodeCond;\n     }\n \n+    public static SearchCond getLeafCond(final RelationshipTypeCond relationshipTypeCond) {\n+        SearchCond nodeCond = new SearchCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.relationshipTypeCond = relationshipTypeCond;\n+\n+        return nodeCond;\n+    }\n+\n     public static SearchCond getLeafCond(final MembershipCond membershipCond) {\n         SearchCond nodeCond = new SearchCond();\n \n@@ -111,6 +124,15 @@ public static SearchCond getLeafCond(final ResourceCond resourceCond) {\n         return nodeCond;\n     }\n \n+    public static SearchCond getLeafCond(final AssignableCond assignableCond) {\n+        SearchCond nodeCond = new SearchCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.assignableCond = assignableCond;\n+\n+        return nodeCond;\n+    }\n+\n     public static SearchCond getNotLeafCond(final AttributeCond attributeCond) {\n         SearchCond nodeCond = getLeafCond(attributeCond);\n         nodeCond.type = Type.NOT_LEAF;\n@@ -216,6 +238,14 @@ public void setRelationshipCond(final RelationshipCond relationshipCond) {\n         this.relationshipCond = relationshipCond;\n     }\n \n+    public RelationshipTypeCond getRelationshipTypeCond() {\n+        return relationshipTypeCond;\n+    }\n+\n+    public void setRelationshipTypeCond(final RelationshipTypeCond relationshipTypeCond) {\n+        this.relationshipTypeCond = relationshipTypeCond;\n+    }\n+\n     public MembershipCond getMembershipCond() {\n         return membershipCond;\n     }\n@@ -240,6 +270,14 @@ public void setResourceCond(final ResourceCond resourceCond) {\n         this.resourceCond = resourceCond;\n     }\n \n+    public AssignableCond getAssignableCond() {\n+        return assignableCond;\n+    }\n+\n+    public void setAssignableCond(final AssignableCond assignableCond) {\n+        this.assignableCond = assignableCond;\n+    }\n+\n     public SearchCond getLeftNodeCond() {\n         return leftNodeCond;\n     }\n@@ -307,8 +345,8 @@ public boolean isValid() {\n             case LEAF:\n             case NOT_LEAF:\n                 isValid = (anyTypeCond != null || anyCond != null || attributeCond != null\n-                        || relationshipCond != null || membershipCond != null\n-                        || roleCond != null || resourceCond != null)\n+                        || relationshipCond != null || relationshipTypeCond != null || membershipCond != null\n+                        || roleCond != null || resourceCond != null || assignableCond != null)\n                         && (anyTypeCond == null || anyTypeCond.isValid())\n                         && (anyCond == null || anyCond.isValid())\n                         && (attributeCond == null || attributeCond.isValid())"},{"sha":"c1f6fe27df49792bd158cf0501d0b3bfc696ad0d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":107,"deletions":47,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -55,7 +55,9 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n@@ -65,12 +67,14 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n import org.springframework.util.ReflectionUtils;\n \n @Repository\n public class JPAAnySearchDAO extends AbstractDAO<Any<?>, Long> implements AnySearchDAO {\n \n-    private static final String EMPTY_ATTR_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n+    private static final String EMPTY_QUERY = \"SELECT any_id FROM user_search_attr WHERE 1=2\";\n \n     @Autowired\n     private RealmDAO realmDAO;\n@@ -150,6 +154,14 @@ public int count(final Set<String> adminRealms, final SearchCond searchCondition\n         return ((Number) countQuery.getSingleResult()).intValue();\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public <T extends Any<?>> List<T> searchAssignable(final String realmFullPath, final AnyTypeKind kind) {\n+        AssignableCond assignableCond = new AssignableCond();\n+        assignableCond.setRealmFullPath(realmFullPath);\n+        return search(SearchCond.getLeafCond(assignableCond), kind);\n+    }\n+\n     @Override\n     public <T extends Any<?>> List<T> search(final SearchCond searchCondition, final AnyTypeKind typeKind) {\n         return search(searchCondition, Collections.<OrderByClause>emptyList(), typeKind);\n@@ -406,59 +418,63 @@ private <T extends Any<?>> List<T> doSearch(final Set<String> adminRealms,\n     }\n \n     private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> parameters,\n-            final AnyTypeKind type, final SearchSupport svs) {\n+            final AnyTypeKind anyTypeKind, final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder();\n \n         switch (nodeCond.getType()) {\n \n             case LEAF:\n             case NOT_LEAF:\n-                if (nodeCond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == type) {\n+                if (nodeCond.getAnyTypeCond() != null && AnyTypeKind.ANY_OBJECT == anyTypeKind) {\n                     query.append(getQuery(nodeCond.getAnyTypeCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                }\n-                if (nodeCond.getRelationshipCond() != null\n-                        && (AnyTypeKind.USER == type || AnyTypeKind.ANY_OBJECT == type)) {\n+                } else if (nodeCond.getRelationshipTypeCond() != null\n+                        && (AnyTypeKind.USER == anyTypeKind || AnyTypeKind.ANY_OBJECT == anyTypeKind)) {\n+\n+                    query.append(getQuery(nodeCond.getRelationshipTypeCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                } else if (nodeCond.getRelationshipCond() != null\n+                        && (AnyTypeKind.USER == anyTypeKind || AnyTypeKind.ANY_OBJECT == anyTypeKind)) {\n \n                     query.append(getQuery(nodeCond.getRelationshipCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                }\n-                if (nodeCond.getMembershipCond() != null\n-                        && (AnyTypeKind.USER == type || AnyTypeKind.ANY_OBJECT == type)) {\n+                } else if (nodeCond.getMembershipCond() != null\n+                        && (AnyTypeKind.USER == anyTypeKind || AnyTypeKind.ANY_OBJECT == anyTypeKind)) {\n \n                     query.append(getQuery(nodeCond.getMembershipCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                }\n-                if (nodeCond.getRoleCond() != null && AnyTypeKind.USER == type) {\n+                } else if (nodeCond.getAssignableCond() != null\n+                        && (AnyTypeKind.GROUP == anyTypeKind || AnyTypeKind.ANY_OBJECT == anyTypeKind)) {\n+\n+                    query.append(getQuery(nodeCond.getAssignableCond(), parameters, anyTypeKind, svs));\n+                } else if (nodeCond.getRoleCond() != null && AnyTypeKind.USER == anyTypeKind) {\n                     query.append(getQuery(nodeCond.getRoleCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n-                }\n-                if (nodeCond.getResourceCond() != null) {\n+                } else if (nodeCond.getResourceCond() != null) {\n                     query.append(getQuery(nodeCond.getResourceCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n-                }\n-                if (nodeCond.getAttributeCond() != null) {\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, anyTypeKind, svs));\n+                } else if (nodeCond.getAttributeCond() != null) {\n                     query.append(getQuery(nodeCond.getAttributeCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n-                }\n-                if (nodeCond.getAnyCond() != null) {\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, anyTypeKind, svs));\n+                } else if (nodeCond.getAnyCond() != null) {\n                     query.append(getQuery(nodeCond.getAnyCond(),\n-                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, type, svs));\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, anyTypeKind,\n+                            svs));\n                 }\n                 break;\n \n             case AND:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, type, svs)).\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, anyTypeKind, svs)).\n                         append(\" AND any_id IN ( \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, type, svs)).\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, anyTypeKind, svs)).\n                         append(\")\");\n                 break;\n \n             case OR:\n-                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, type, svs)).\n+                query.append(getQuery(nodeCond.getLeftNodeCond(), parameters, anyTypeKind, svs)).\n                         append(\" OR any_id IN ( \").\n-                        append(getQuery(nodeCond.getRightNodeCond(), parameters, type, svs)).\n+                        append(getQuery(nodeCond.getRightNodeCond(), parameters, anyTypeKind, svs)).\n                         append(\")\");\n                 break;\n \n@@ -485,6 +501,29 @@ private String getQuery(final AnyTypeCond cond, final boolean not, final List<Ob\n         return query.toString();\n     }\n \n+    private String getQuery(final RelationshipTypeCond cond, final boolean not, final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+\n+        if (not) {\n+            query.append(\"any_id NOT IN (\");\n+        } else {\n+            query.append(\"any_id IN (\");\n+        }\n+\n+        query.append(\"SELECT any_id \").append(\"FROM \").\n+                append(svs.relationship().name).\n+                append(\" WHERE type=?\").append(setParameter(parameters, cond.getRelationshipTypeKey())).\n+                append(\" UNION SELECT right_any_id AS any_id FROM \").\n+                append(svs.relationship().name).\n+                append(\" WHERE type=?\").append(setParameter(parameters, cond.getRelationshipTypeKey())).\n+                append(')');\n+\n+        return query.toString();\n+    }\n+\n     private String getQuery(final RelationshipCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n@@ -499,7 +538,7 @@ private String getQuery(final RelationshipCond cond, final boolean not, final Li\n \n         query.append(\"SELECT DISTINCT any_id \").append(\"FROM \").\n                 append(svs.relationship().name).append(\" WHERE \").\n-                append(\"right_anyObject_id=?\").append(setParameter(parameters, cond.getAnyObjectKey())).\n+                append(\"right_any_id=?\").append(setParameter(parameters, cond.getAnyObjectKey())).\n                 append(')');\n \n         return query.toString();\n@@ -570,7 +609,7 @@ private String getQuery(final RoleCond cond, final boolean not, final List<Objec\n     private String getQuery(final ResourceCond cond, final boolean not, final List<Object> parameters,\n             final AnyTypeKind typeKind, final SearchSupport svs) {\n \n-        final StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE \");\n \n         if (not) {\n@@ -596,6 +635,24 @@ private String getQuery(final ResourceCond cond, final boolean not, final List<O\n         return query.toString();\n     }\n \n+    private String getQuery(final AssignableCond cond, final List<Object> parameters, final AnyTypeKind typeKind,\n+            final SearchSupport svs) {\n+\n+        Realm realm = realmDAO.find(cond.getRealmFullPath());\n+        if (realm == null) {\n+            return EMPTY_QUERY;\n+        }\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+        for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n+            query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n+        }\n+        query.setLength(query.length() - 4);\n+\n+        return query.toString();\n+    }\n+\n     private void fillAttributeQuery(final StringBuilder query, final PlainAttrValue attrValue,\n             final PlainSchema schema, final AttributeCond cond, final boolean not,\n             final List<Object> parameters, final SearchSupport svs) {\n@@ -696,7 +753,7 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n         PlainSchema schema = schemaDAO.find(cond.getSchema());\n         if (schema == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n-            return EMPTY_ATTR_QUERY;\n+            return EMPTY_QUERY;\n         }\n \n         PlainAttrValue attrValue = attrUtils.newPlainAttrValue();\n@@ -708,27 +765,31 @@ private String getQuery(final AttributeCond cond, final boolean not, final List<\n             }\n         } catch (ValidationException e) {\n             LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n-            return EMPTY_ATTR_QUERY;\n+            return EMPTY_QUERY;\n         }\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \");\n-        if (cond.getType() == AttributeCond.Type.ISNOTNULL) {\n-            query.append(svs.field().name).\n-                    append(\" WHERE any_id NOT IN (SELECT any_id FROM \").\n-                    append(svs.nullAttr().name).\n-                    append(\" WHERE schema_name='\").append(schema.getKey()).append(\"')\");\n-        } else if (cond.getType() == AttributeCond.Type.ISNULL) {\n-            query.append(svs.nullAttr().name).\n-                    append(\" WHERE schema_name='\").append(schema.getKey()).append(\"'\");\n-        } else {\n-            if (schema.isUniqueConstraint()) {\n-                query.append(svs.uniqueAttr().name);\n-            } else {\n-                query.append(svs.attr().name);\n-            }\n-            query.append(\" WHERE schema_name='\").append(schema.getKey());\n+        switch (cond.getType()) {\n+            case ISNOTNULL:\n+                query.append(svs.field().name).\n+                        append(\" WHERE any_id NOT IN (SELECT any_id FROM \").\n+                        append(svs.nullAttr().name).\n+                        append(\" WHERE schema_name='\").append(schema.getKey()).append(\"')\");\n+                break;\n \n-            fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n+            case ISNULL:\n+                query.append(svs.nullAttr().name).\n+                        append(\" WHERE schema_name='\").append(schema.getKey()).append(\"'\");\n+                break;\n+\n+            default:\n+                if (schema.isUniqueConstraint()) {\n+                    query.append(svs.uniqueAttr().name);\n+                } else {\n+                    query.append(svs.attr().name);\n+                }\n+                query.append(\" WHERE schema_name='\").append(schema.getKey());\n+                fillAttributeQuery(query, attrValue, schema, cond, not, parameters, svs);\n         }\n \n         return query.toString();\n@@ -748,7 +809,7 @@ private String getQuery(final AnyCond cond, final boolean not, final List<Object\n         Field anyField = ReflectionUtils.findField(attrUtils.anyClass(), cond.getSchema());\n         if (anyField == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n-            return EMPTY_ATTR_QUERY;\n+            return EMPTY_QUERY;\n         }\n \n         PlainSchema schema = new JPAPlainSchema();\n@@ -760,7 +821,6 @@ private String getQuery(final AnyCond cond, final boolean not, final List<Object\n         }\n \n         // Deal with any Integer fields logically mapping to boolean values\n-        // (JPAGroup.inheritPlainAttrs, for example)\n         boolean foundBooleanMin = false;\n         boolean foundBooleanMax = false;\n         if (Integer.class.equals(anyField.getType())) {\n@@ -806,7 +866,7 @@ private String getQuery(final AnyCond cond, final boolean not, final List<Object\n                 schema.getValidator().validate(cond.getExpression(), attrValue);\n             } catch (ValidationException e) {\n                 LOG.error(\"Could not validate expression '\" + cond.getExpression() + \"'\", e);\n-                return EMPTY_ATTR_QUERY;\n+                return EMPTY_QUERY;\n             }\n         }\n "},{"sha":"1261a5fe3615a59d0374230ec20936a8798b7372","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":3,"deletions":8,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import java.util.regex.Pattern;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n@@ -44,8 +43,6 @@\n @Repository\n public class JPARealmDAO extends AbstractDAO<Realm, Long> implements RealmDAO {\n \n-    private static final Pattern PATH_PATTERN = Pattern.compile(\"^(/[A-Za-z0-9]+)+\");\n-\n     @Autowired\n     private RoleDAO roleDAO;\n \n@@ -124,11 +121,9 @@ public <T extends Policy> List<Realm> findByPolicy(final T policy) {\n             return Collections.<Realm>emptyList();\n         }\n \n-        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n-                append(JPARealm.class.getSimpleName()).append(\" e WHERE e.\").\n-                append(policy instanceof AccountPolicy ? \"accountPolicy\" : \"passwordPolicy\").append(\"=:policy\");\n-\n-        TypedQuery<Realm> query = entityManager().createQuery(queryString.toString(), Realm.class);\n+        TypedQuery<Realm> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPARealm.class.getSimpleName() + \" e WHERE e.\"\n+                + (policy instanceof AccountPolicy ? \"accountPolicy\" : \"passwordPolicy\") + \"=:policy\", Realm.class);\n         query.setParameter(\"policy\", policy);\n \n         List<Realm> result = new ArrayList<>();"},{"sha":"48c801ecc1297fd32a36ec940aea07ef31e2ada6","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -70,7 +70,7 @@ under the License.\n   <entry key=\"user_search_urelationship\">\n     CREATE VIEW user_search_urelationship AS\n \n-    SELECT m.user_id AS any_id, m.anyObject_id AS anyObject_id\n+    SELECT m.user_id AS any_id, m.anyObject_id AS right_any_id, m.type_name AS type\n     FROM URelationship m\n   </entry>\n   <entry key=\"user_search_umembership\">\n@@ -163,7 +163,7 @@ under the License.\n   <entry key=\"anyObject_search_arelationship\">\n     CREATE VIEW anyObject_search_arelationship AS\n \n-    SELECT m.left_anyObject_id AS any_id, m.right_anyObject_id AS right_anyObject_id\n+    SELECT m.left_anyObject_id AS any_id, m.right_anyObject_id AS right_any_id, m.type_name AS type\n     FROM ARelationship m\n   </entry>\n   <entry key=\"anyObject_search_amembership\">"},{"sha":"4045a760a9601592ebbd8caa46588fc43b277778","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":109,"deletions":7,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -44,7 +44,10 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n+import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -73,9 +76,13 @@ public void anyObjectMatch() {\n         AnyObject anyObject = anyObjectDAO.find(1L);\n         assertNotNull(anyObject);\n \n-        RelationshipCond cond = new RelationshipCond();\n-        cond.setAnyObjectKey(2L);\n-        assertTrue(searchDAO.matches(anyObject, SearchCond.getLeafCond(cond), AnyTypeKind.ANY_OBJECT));\n+        RelationshipCond relationshipCond = new RelationshipCond();\n+        relationshipCond.setAnyObjectKey(2L);\n+        assertTrue(searchDAO.matches(anyObject, SearchCond.getLeafCond(relationshipCond), AnyTypeKind.ANY_OBJECT));\n+\n+        RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n+        relationshipTypeCond.setRelationshipTypeKey(\"neighborhood\");\n+        assertTrue(searchDAO.matches(anyObject, SearchCond.getLeafCond(relationshipTypeCond), AnyTypeKind.ANY_OBJECT));\n     }\n \n     @Test\n@@ -93,6 +100,17 @@ public void userMatch() {\n         RoleCond roleCond = new RoleCond();\n         roleCond.setRoleKey(\"Other\");\n         assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(roleCond), AnyTypeKind.USER));\n+\n+        user = userDAO.find(4L);\n+        assertNotNull(user);\n+\n+        RelationshipCond relationshipCond = new RelationshipCond();\n+        relationshipCond.setAnyObjectKey(1L);\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(relationshipCond), AnyTypeKind.USER));\n+\n+        RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n+        relationshipTypeCond.setRelationshipTypeKey(\"neighborhood\");\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(relationshipTypeCond), AnyTypeKind.USER));\n     }\n \n     @Test\n@@ -384,14 +402,59 @@ public void searchByType() {\n \n         List<AnyObject> printers = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertNotNull(printers);\n-        assertEquals(2, printers.size());\n+        assertEquals(3, printers.size());\n \n         tcond.setAnyTypeName(\"UNEXISTING\");\n         printers = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n         assertNotNull(printers);\n         assertTrue(printers.isEmpty());\n     }\n \n+    @Test\n+    public void searchByRelationshipType() {\n+        // 1. first search for printers involved in \"neighborhood\" relationship\n+        RelationshipTypeCond relationshipTypeCond = new RelationshipTypeCond();\n+        relationshipTypeCond.setRelationshipTypeKey(\"neighborhood\");\n+\n+        AnyTypeCond tcond = new AnyTypeCond();\n+        tcond.setAnyTypeName(\"PRINTER\");\n+\n+        SearchCond searchCondition = SearchCond.getAndCond(\n+                SearchCond.getLeafCond(relationshipTypeCond), SearchCond.getLeafCond(tcond));\n+        assertTrue(searchCondition.isValid());\n+\n+        List<Any<?>> matching = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n+        assertNotNull(matching);\n+        assertEquals(2, matching.size());\n+        assertTrue(CollectionUtils.exists(matching, new Predicate<Any<?>>() {\n+\n+            @Override\n+            public boolean evaluate(final Any<?> any) {\n+                return any.getKey() == 1L;\n+            }\n+        }));\n+        assertTrue(CollectionUtils.exists(matching, new Predicate<Any<?>>() {\n+\n+            @Override\n+            public boolean evaluate(final Any<?> any) {\n+                return any.getKey() == 2L;\n+            }\n+        }));\n+\n+        // 2. search for users involved in \"neighborhood\" relationship\n+        searchCondition = SearchCond.getLeafCond(relationshipTypeCond);\n+        matching = searchDAO.search(searchCondition, AnyTypeKind.USER);\n+        assertNotNull(matching);\n+        assertEquals(2, matching.size());\n+        assertTrue(CollectionUtils.exists(matching, new Predicate<Any<?>>() {\n+\n+            @Override\n+            public boolean evaluate(final Any<?> any) {\n+                return any.getKey() == 4L;\n+            }\n+        }));\n+    }\n+\n     @Test\n     public void userOrderBy() {\n         AnyCond usernameLeafCond = new AnyCond(AnyCond.Type.EQ);\n@@ -414,7 +477,8 @@ public void userOrderBy() {\n         orderByClauses.add(orderByClause);\n \n         List<User> users = searchDAO.search(searchCondition, orderByClauses, AnyTypeKind.USER);\n-        assertEquals(searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER),\n+        assertEquals(\n+                searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.USER),\n                 users.size());\n     }\n \n@@ -431,11 +495,49 @@ public void groupOrderBy() {\n \n         List<Group> groups = searchDAO.search(\n                 searchCondition, Collections.singletonList(orderByClause), AnyTypeKind.GROUP);\n-        assertEquals(searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS,\n-                searchCondition, AnyTypeKind.GROUP),\n+        assertEquals(\n+                searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, AnyTypeKind.GROUP),\n                 groups.size());\n     }\n \n+    @Test\n+    public void assignable() {\n+        AssignableCond assignableCond = new AssignableCond();\n+        assignableCond.setRealmFullPath(\"/even/two\");\n+        SearchCond searchCondition = SearchCond.getLeafCond(assignableCond);\n+        assertTrue(searchCondition.isValid());\n+\n+        List<Group> groups = searchDAO.search(searchCondition, AnyTypeKind.GROUP);\n+        assertTrue(CollectionUtils.exists(groups, new Predicate<Group>() {\n+\n+            @Override\n+            public boolean evaluate(final Group group) {\n+                return group.getKey().equals(15L);\n+            }\n+        }));\n+        assertFalse(CollectionUtils.exists(groups, new Predicate<Group>() {\n+\n+            @Override\n+            public boolean evaluate(final Group group) {\n+                return group.getKey().equals(16L);\n+            }\n+        }));\n+\n+        assignableCond = new AssignableCond();\n+        assignableCond.setRealmFullPath(\"/odd\");\n+        searchCondition = SearchCond.getLeafCond(assignableCond);\n+        assertTrue(searchCondition.isValid());\n+\n+        List<AnyObject> anyObjects = searchDAO.search(searchCondition, AnyTypeKind.ANY_OBJECT);\n+        assertFalse(CollectionUtils.exists(anyObjects, new Predicate<AnyObject>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyObject anyObject) {\n+                return anyObject.getKey().equals(3L);\n+            }\n+        }));\n+    }\n+\n     @Test\n     public void issue202() {\n         ResourceCond ws2 = new ResourceCond();"},{"sha":"c4dba81acff7963561da3c48ae63713a150922d8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/GroupTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FGroupTest.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -48,7 +48,7 @@ public class GroupTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<Group> list = groupDAO.findAll();\n-        assertEquals(\"did not get expected number of groups \", 15, list.size());\n+        assertEquals(\"did not get expected number of groups \", 16, list.size());\n     }\n \n     @Test"},{"sha":"d1bb77319151ede478132b6df34a7d4fc03a0379","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/RealmTest.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FRealmTest.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -22,10 +22,12 @@\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -40,11 +42,20 @@ public class RealmTest extends AbstractTest {\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n     @Test\n     public void test() {\n         Realm realm = realmDAO.find(\"/odd\");\n         assertNotNull(realm);\n \n+        // need to remove this group in order to remove the realm, which is otherwise empty\n+        Group group = groupDAO.find(16L);\n+        assertNotNull(group);\n+        assertEquals(realm, group.getRealm());\n+        groupDAO.delete(group);\n+\n         Role role = roleDAO.find(\"User reviewer\");\n         assertTrue(role.getRealms().contains(realm));\n "},{"sha":"44335ebf5742bfa94be25a08a62f429c0950af3c","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -167,6 +167,9 @@ under the License.\n   <AnyObject id=\"2\" realm_id=\"1\" type_name=\"PRINTER\"\n              creator=\"admin\" lastModifier=\"admin\" \n              creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n+  <AnyObject id=\"3\" realm_id=\"4\" type_name=\"PRINTER\"\n+             creator=\"admin\" lastModifier=\"admin\" \n+             creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   \n   <ARelationship id=\"1\" left_anyObject_id=\"1\" right_anyObject_id=\"2\" type_name=\"neighborhood\"/>\n   \n@@ -280,12 +283,16 @@ under the License.\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>  \n   <SyncopeGroup id=\"15\" name=\"additional\"\n-                realm_id=\"1\"\n+                realm_id=\"3\"\n                 creator=\"admin\" lastModifier=\"admin\" \n                 creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   <TypeExtension id=\"1\" group_id=\"15\" anyType_name=\"USER\"/>\n   <TypeExtension_AnyTypeClass typeExtension_id=\"1\" anyTypeClass_name=\"csv\"/>\n   <TypeExtension_AnyTypeClass typeExtension_id=\"1\" anyTypeClass_name=\"other\"/>\n+  <SyncopeGroup id=\"16\" name=\"fake\"\n+                realm_id=\"2\"\n+                creator=\"admin\" lastModifier=\"admin\" \n+                creationDate=\"2010-10-20 11:00:00\" lastChangeDate=\"2010-10-20 11:00:00\"/>\n   \n   <URelationship id=\"1\" user_id=\"4\" anyObject_id=\"1\" type_name=\"neighborhood\"/>\n "},{"sha":"62753f0ad4cda09ef099aab2531619c12446fb1e","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/GroupDataBinder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FGroupDataBinder.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -29,7 +29,7 @@ public interface GroupDataBinder {\n \n     GroupTO getGroupTO(Group group, boolean details);\n \n-    Group create(Group group, GroupTO groupTO);\n+    void create(Group group, GroupTO groupTO);\n \n     PropagationByResource update(Group group, GroupPatch groupPatch);\n "},{"sha":"3db4fc89df4e725e2d03a815b251c2e9cca41292","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":5,"deletions":19,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.core.misc.utils.MappingUtils;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeClassDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n@@ -134,6 +135,9 @@ abstract class AbstractAnyDataBinder {\n     @Autowired\n     protected RelationshipTypeDAO relationshipTypeDAO;\n \n+    @Autowired\n+    protected AnySearchDAO searchDAO;\n+\n     @Autowired\n     protected EntityFactory entityFactory;\n \n@@ -431,11 +435,6 @@ protected PropagationByResource fill(final Any<?> any, final AnyPatch anyPatch,\n             scce.addException(requiredValuesMissing);\n         }\n \n-        // Throw composite exception if there is at least one element set in the composing exceptions\n-        if (scce.hasExceptions()) {\n-            throw scce;\n-        }\n-\n         return propByRes;\n     }\n \n@@ -488,15 +487,7 @@ protected void fill(\n             scce.addException(requiredValuesMissing);\n         }\n \n-        // 2. realm & resources\n-        Realm realm = realmDAO.find(anyTO.getRealm());\n-        if (realm == null) {\n-            SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-            noRealm.getElements().add(\"Invalid or null realm specified: \" + anyTO.getRealm());\n-            scce.addException(noRealm);\n-        }\n-        any.setRealm(realm);\n-\n+        // 2. resources\n         for (String resourceName : anyTO.getResources()) {\n             ExternalResource resource = resourceDAO.find(resourceName);\n             if (resource == null) {\n@@ -510,11 +501,6 @@ protected void fill(\n         if (!requiredValuesMissing.isEmpty()) {\n             scce.addException(requiredValuesMissing);\n         }\n-\n-        // Throw composite exception if there is at least one element set in the composing exceptions\n-        if (scce.hasExceptions()) {\n-            throw scce;\n-        }\n     }\n \n     protected void fillTO(final AnyTO anyTO,"},{"sha":"639f1b2604a623d320487c371e94cc0cca502248","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":84,"deletions":32,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -41,8 +41,11 @@\n import org.apache.syncope.common.lib.types.ResourceOperation;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AMembership;\n@@ -131,52 +134,77 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n-        // relationships\n-        for (RelationshipTO relationshipTO : anyObjectTO.getRelationships()) {\n-            AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n-\n-            if (otherEnd == null) {\n-                LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-            } else {\n-                RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n-                ARelationship relationship = null;\n-                if (anyObject.getKey() != null) {\n-                    relationship = anyObject.getRelationship(relationshipType, anyObject.getKey());\n-                }\n-                if (relationship == null) {\n-                    relationship = entityFactory.newEntity(ARelationship.class);\n+        // realm\n+        Realm realm = realmDAO.find(anyObjectTO.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            noRealm.getElements().add(\"Invalid or null realm specified: \" + anyObjectTO.getRealm());\n+            scce.addException(noRealm);\n+        }\n+        anyObject.setRealm(realm);\n+\n+        if (anyObject.getRealm() != null) {\n+            AssignableCond assignableCond = new AssignableCond();\n+            assignableCond.setRealmFullPath(anyObject.getRealm().getFullPath());\n+\n+            // relationships\n+            List<AnyObject> assignableAnyObjects =\n+                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.ANY_OBJECT);\n+\n+            for (RelationshipTO relationshipTO : anyObjectTO.getRelationships()) {\n+                AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n+                if (otherEnd == null) {\n+                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n+                } else if (assignableAnyObjects.contains(otherEnd)) {\n+                    RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n+                    ARelationship relationship = entityFactory.newEntity(ARelationship.class);\n                     relationship.setType(relationshipType);\n                     relationship.setRightEnd(anyObject);\n                     relationship.setLeftEnd(anyObject);\n \n                     anyObject.add(relationship);\n+                } else {\n+                    LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n+\n+                    SyncopeClientException unassignabled =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                    unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                    scce.addException(unassignabled);\n                 }\n             }\n-        }\n \n-        // memberships\n-        for (MembershipTO membershipTO : anyObjectTO.getMemberships()) {\n-            Group group = groupDAO.find(membershipTO.getRightKey());\n-\n-            if (group == null) {\n-                LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n-            } else {\n-                AMembership membership = null;\n-                if (anyObject.getKey() != null) {\n-                    membership = anyObject.getMembership(group.getKey());\n-                }\n-                if (membership == null) {\n-                    membership = entityFactory.newEntity(AMembership.class);\n+            // memberships\n+            List<Group> assignableGroups =\n+                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.GROUP);\n+\n+            for (MembershipTO membershipTO : anyObjectTO.getMemberships()) {\n+                Group group = groupDAO.find(membershipTO.getRightKey());\n+                if (group == null) {\n+                    LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n+                } else if (assignableGroups.contains(group)) {\n+                    AMembership membership = entityFactory.newEntity(AMembership.class);\n                     membership.setRightEnd(group);\n                     membership.setLeftEnd(anyObject);\n \n                     anyObject.add(membership);\n+                } else {\n+                    LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n+\n+                    SyncopeClientException unassignabled =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n+                    unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n+                    scce.addException(unassignabled);\n                 }\n             }\n         }\n \n-        // realm, attributes, derived attributes, virtual attributes and resources\n+        // attributes, derived attributes, virtual attributes and resources\n         fill(anyObject, anyObjectTO, anyUtilsFactory.getInstance(AnyTypeKind.ANY_OBJECT), scce);\n+\n+        // Throw composite exception if there is at least one element set in the composing exceptions\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n     }\n \n     @Override\n@@ -200,6 +228,9 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         Set<String> toBeProvisioned = new HashSet<>();\n \n         // relationships\n+        List<AnyObject> assignableAnyObjects =\n+                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT);\n+\n         for (RelationshipPatch patch : anyObjectPatch.getRelationships()) {\n             if (patch.getRelationshipTO() != null) {\n                 RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n@@ -214,8 +245,7 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                     AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n                     if (otherEnd == null) {\n                         LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                    } else {\n-\n+                    } else if (assignableAnyObjects.contains(otherEnd)) {\n                         relationship = entityFactory.newEntity(ARelationship.class);\n                         relationship.setType(relationshipType);\n                         relationship.setRightEnd(otherEnd);\n@@ -224,12 +254,22 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                         anyObject.add(relationship);\n \n                         toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                    } else {\n+                        LOG.error(\"{} cannot be assigned to {}\", otherEnd, anyObject);\n+\n+                        SyncopeClientException unassignabled =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                        unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                        scce.addException(unassignabled);\n                     }\n                 }\n             }\n         }\n \n         // memberships\n+        List<Group> assignableGroups =\n+                searchDAO.searchAssignable(anyObject.getRealm().getFullPath(), AnyTypeKind.GROUP);\n+\n         for (MembershipPatch patch : anyObjectPatch.getMemberships()) {\n             if (patch.getMembershipTO() != null) {\n                 AMembership membership = anyObject.getMembership(patch.getMembershipTO().getRightKey());\n@@ -242,14 +282,21 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n                     Group group = groupDAO.find(patch.getMembershipTO().getRightKey());\n                     if (group == null) {\n                         LOG.debug(\"Ignoring invalid group {}\", patch.getMembershipTO().getRightKey());\n-                    } else {\n+                    } else if (assignableGroups.contains(group)) {\n                         membership = entityFactory.newEntity(AMembership.class);\n                         membership.setRightEnd(group);\n                         membership.setLeftEnd(anyObject);\n \n                         anyObject.add(membership);\n \n                         toBeProvisioned.addAll(group.getResourceNames());\n+                    } else {\n+                        LOG.error(\"{} cannot be assigned to {}\", group, anyObject);\n+\n+                        SyncopeClientException unassignabled =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n+                        unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n+                        scce.addException(unassignabled);\n                     }\n                 }\n             }\n@@ -278,6 +325,11 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             }\n         }\n \n+        // Throw composite exception if there is at least one element set in the composing exceptions\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n+\n         return propByRes;\n     }\n "},{"sha":"c71fce57e9b634be992a46b48524b8046526290c","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":21,"deletions":3,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -44,6 +44,7 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.ADynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.TypeExtension;\n@@ -85,7 +86,7 @@ private void setDynMembership(final Group group, final AnyTypeKind anyTypeKind,\n     }\n \n     @Override\n-    public Group create(final Group group, final GroupTO groupTO) {\n+    public void create(final Group group, final GroupTO groupTO) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n         // name\n@@ -98,7 +99,16 @@ public Group create(final Group group, final GroupTO groupTO) {\n             group.setName(groupTO.getName());\n         }\n \n-        // realm, attributes, derived attributes, virtual attributes and resources\n+        // realm\n+        Realm realm = realmDAO.find(groupTO.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            noRealm.getElements().add(\"Invalid or null realm specified: \" + groupTO.getRealm());\n+            scce.addException(noRealm);\n+        }\n+        group.setRealm(realm);\n+\n+        // attributes, derived attributes, virtual attributes and resources\n         fill(group, groupTO, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce);\n \n         // owner\n@@ -153,7 +163,10 @@ public Group create(final Group group, final GroupTO groupTO) {\n             }\n         }\n \n-        return group;\n+        // Throw composite exception if there is at least one element set in the composing exceptions\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n     }\n \n     @Override\n@@ -268,6 +281,11 @@ public PropagationByResource update(final Group toBeUpdated, final GroupPatch gr\n             }\n         }\n \n+        // Throw composite exception if there is at least one element set in the composing exceptions\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n+\n         return propByRes;\n     }\n "},{"sha":"22d690ac7a1760246c434b2e61cf795d2fa93050","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":85,"deletions":31,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -57,7 +57,10 @@\n import org.apache.syncope.core.misc.spring.BeanUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.RelationshipType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n@@ -173,50 +176,71 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             }\n         }\n \n-        // relationships\n-        for (RelationshipTO relationshipTO : userTO.getRelationships()) {\n-            AnyObject anyObject = anyObjectDAO.find(relationshipTO.getRightKey());\n-            if (anyObject == null) {\n-                LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-            } else {\n-                RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n-                URelationship relationship = null;\n-                if (user.getKey() != null) {\n-                    relationship = user.getRelationship(relationshipType, anyObject.getKey());\n-                }\n-                if (relationship == null) {\n-                    relationship = entityFactory.newEntity(URelationship.class);\n+        // realm\n+        Realm realm = realmDAO.find(userTO.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            noRealm.getElements().add(\"Invalid or null realm specified: \" + userTO.getRealm());\n+            scce.addException(noRealm);\n+        }\n+        user.setRealm(realm);\n+\n+        if (user.getRealm() != null) {\n+            AssignableCond assignableCond = new AssignableCond();\n+            assignableCond.setRealmFullPath(user.getRealm().getFullPath());\n+\n+            // relationships\n+            List<AnyObject> assignableAnyObjects =\n+                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.ANY_OBJECT);\n+\n+            for (RelationshipTO relationshipTO : userTO.getRelationships()) {\n+                AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n+                if (otherEnd == null) {\n+                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n+                } else if (assignableAnyObjects.contains(otherEnd)) {\n+                    RelationshipType relationshipType = relationshipTypeDAO.find(relationshipTO.getType());\n+                    URelationship relationship = entityFactory.newEntity(URelationship.class);\n                     relationship.setType(relationshipType);\n-                    relationship.setRightEnd(anyObject);\n+                    relationship.setRightEnd(otherEnd);\n                     relationship.setLeftEnd(user);\n \n                     user.add(relationship);\n+                } else {\n+                    LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n+\n+                    SyncopeClientException unassignabled =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                    unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                    scce.addException(unassignabled);\n                 }\n             }\n-        }\n-\n-        // memberships\n-        for (MembershipTO membershipTO : userTO.getMemberships()) {\n-            Group group = groupDAO.find(membershipTO.getRightKey());\n \n-            if (group == null) {\n-                LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n-            } else {\n-                UMembership membership = null;\n-                if (user.getKey() != null) {\n-                    membership = user.getMembership(group.getKey());\n-                }\n-                if (membership == null) {\n-                    membership = entityFactory.newEntity(UMembership.class);\n+            // memberships\n+            List<Group> assignableGroups =\n+                    searchDAO.search(SearchCond.getLeafCond(assignableCond), AnyTypeKind.GROUP);\n+\n+            for (MembershipTO membershipTO : userTO.getMemberships()) {\n+                Group group = groupDAO.find(membershipTO.getRightKey());\n+                if (group == null) {\n+                    LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n+                } else if (assignableGroups.contains(group)) {\n+                    UMembership membership = entityFactory.newEntity(UMembership.class);\n                     membership.setRightEnd(group);\n                     membership.setLeftEnd(user);\n \n                     user.add(membership);\n+                } else {\n+                    LOG.error(\"{} cannot be assigned to {}\", group, user);\n+\n+                    SyncopeClientException unassignabled =\n+                            SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n+                    unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n+                    scce.addException(unassignabled);\n                 }\n             }\n         }\n \n-        // realm, attributes, derived attributes, virtual attributes and resources\n+        // attributes, derived attributes, virtual attributes and resources\n         fill(user, userTO, anyUtilsFactory.getInstance(AnyTypeKind.USER), scce);\n \n         // set password\n@@ -239,6 +263,11 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n         user.setSecurityAnswer(userTO.getSecurityAnswer());\n \n         user.setMustChangePassword(userTO.isMustChangePassword());\n+\n+        // Throw composite exception if there is at least one element set in the composing exceptions\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n     }\n \n     private boolean isPasswordMapped(final ExternalResource resource) {\n@@ -341,6 +370,9 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         Set<String> toBeProvisioned = new HashSet<>();\n \n         // relationships\n+        List<AnyObject> assignableAnyObjects =\n+                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT);\n+\n         for (RelationshipPatch patch : userPatch.getRelationships()) {\n             if (patch.getRelationshipTO() != null) {\n                 RelationshipType relationshipType = relationshipTypeDAO.find(patch.getRelationshipTO().getType());\n@@ -355,7 +387,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                     AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getRightKey());\n                     if (otherEnd == null) {\n                         LOG.debug(\"Ignoring invalid any object {}\", patch.getRelationshipTO().getRightKey());\n-                    } else {\n+                    } else if (assignableAnyObjects.contains(otherEnd)) {\n                         relationship = entityFactory.newEntity(URelationship.class);\n                         relationship.setType(relationshipType);\n                         relationship.setRightEnd(otherEnd);\n@@ -364,12 +396,22 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                         user.add(relationship);\n \n                         toBeProvisioned.addAll(otherEnd.getResourceNames());\n+                    } else {\n+                        LOG.error(\"{} cannot be assigned to {}\", otherEnd, user);\n+\n+                        SyncopeClientException unassignabled =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidRelationship);\n+                        unassignabled.getElements().add(\"Cannot be assigned: \" + otherEnd);\n+                        scce.addException(unassignabled);\n                     }\n                 }\n             }\n         }\n \n         // memberships\n+        List<Group> assignableGroups =\n+                searchDAO.searchAssignable(user.getRealm().getFullPath(), AnyTypeKind.GROUP);\n+\n         for (MembershipPatch patch : userPatch.getMemberships()) {\n             if (patch.getMembershipTO() != null) {\n                 UMembership membership = user.getMembership(patch.getMembershipTO().getRightKey());\n@@ -382,7 +424,7 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                     Group group = groupDAO.find(patch.getMembershipTO().getRightKey());\n                     if (group == null) {\n                         LOG.debug(\"Ignoring invalid group {}\", patch.getMembershipTO().getRightKey());\n-                    } else {\n+                    } else if (assignableGroups.contains(group)) {\n                         membership = entityFactory.newEntity(UMembership.class);\n                         membership.setRightEnd(group);\n                         membership.setLeftEnd(user);\n@@ -403,6 +445,13 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                                 }\n                             }\n                         }\n+                    } else {\n+                        LOG.error(\"{} cannot be assigned to {}\", group, user);\n+\n+                        SyncopeClientException unassignabled =\n+                                SyncopeClientException.build(ClientExceptionType.InvalidMembership);\n+                        unassignabled.getElements().add(\"Cannot be assigned: \" + group);\n+                        scce.addException(unassignabled);\n                     }\n                 }\n             }\n@@ -429,6 +478,11 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             }\n         }\n \n+        // Throw composite exception if there is at least one element set in the composing exceptions\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n+\n         return propByRes;\n     }\n "},{"sha":"82d8647c75cf26a94368628bf62f96009bbaa3d8","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -62,7 +62,7 @@ public PagedResult<AnyObjectTO> list(final String type, final AnyListQuery listQ\n         }\n \n         AnySearchQuery searchQuery = new AnySearchQuery();\n-        searchQuery.setFiql(new AnyObjectFiqlSearchConditionBuilder().type(type).query());\n+        searchQuery.setFiql(new AnyObjectFiqlSearchConditionBuilder(type).query());\n         searchQuery.setDetails(listQuery.isDetails());\n         searchQuery.setOrderBy(listQuery.getOrderBy());\n         searchQuery.setPage(listQuery.getPage());"},{"sha":"192fa764d0a1090752badf16684091bb67927e49","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AnyObjectITCase.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAnyObjectITCase.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n@@ -67,6 +68,27 @@ public void create() {\n         assertEquals(anyObjectTO.getPlainAttrMap().get(\"location\"), connObjectTO.getPlainAttrMap().get(\"location\"));\n     }\n \n+    @Test\n+    public void createInvalidMembership() {\n+        // 1. create anyObject in realm /odd and attempt to assign group 15, from realm /even => exception\n+        AnyObjectTO anyObjectTO = getSampleTO(\"createInvalidMembership\");\n+        anyObjectTO.setRealm(\"/odd\");\n+        anyObjectTO.getMemberships().add(new MembershipTO.Builder().group(15L).build());\n+\n+        try {\n+            createAnyObject(anyObjectTO);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidMembership, e.getType());\n+        }\n+\n+        // 2. change anyObject's realm to /even/two, now it works\n+        anyObjectTO.setRealm(\"/even/two\");\n+\n+        anyObjectTO = createAnyObject(anyObjectTO).getAny();\n+        assertTrue(anyObjectTO.getMembershipMap().containsKey(15L));\n+    }\n+\n     @Test\n     public void delete() {\n         try {"},{"sha":"d7b879686fe443c8ed7a2d1e6677d43541595f3e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":120,"deletions":15,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -88,14 +88,14 @@ public void searchByUsernameAndKey() {\n \n     @Test\n     public void searchByGroupNameAndKey() {\n-        PagedResult<GroupTO> matchingGroups = groupService.search(\n+        PagedResult<GroupTO> groups = groupService.search(\n                 new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getUserSearchConditionBuilder().\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().\n                         is(\"name\").equalTo(\"root\").and(\"key\").lessThan(2).query()).build());\n-        assertNotNull(matchingGroups);\n-        assertEquals(1, matchingGroups.getResult().size());\n-        assertEquals(\"root\", matchingGroups.getResult().iterator().next().getName());\n-        assertEquals(1L, matchingGroups.getResult().iterator().next().getKey());\n+        assertNotNull(groups);\n+        assertEquals(1, groups.getResult().size());\n+        assertEquals(\"root\", groups.getResult().iterator().next().getName());\n+        assertEquals(1L, groups.getResult().iterator().next().getKey());\n     }\n \n     @Test\n@@ -225,21 +225,21 @@ public void paginatedSearch() {\n \n     @Test\n     public void searchByBooleanAnyCond() {\n-        PagedResult<GroupTO> matchingGroups = groupService.search(\n+        PagedResult<GroupTO> groups = groupService.search(\n                 new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"show\").equalTo(\"true\").query()).build());\n-        assertNotNull(matchingGroups);\n-        assertFalse(matchingGroups.getResult().isEmpty());\n+        assertNotNull(groups);\n+        assertFalse(groups.getResult().isEmpty());\n     }\n \n     @Test\n     public void searchByRelationshipAnyCond() {\n-        PagedResult<GroupTO> matchingGroups = groupService.search(\n+        PagedResult<GroupTO> groups = groupService.search(\n                 new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n                 fiql(SyncopeClient.getGroupSearchConditionBuilder().is(\"userOwner\").equalTo(5).query()).build());\n-        assertNotNull(matchingGroups);\n-        assertEquals(1, matchingGroups.getResult().size());\n-        assertEquals(6L, matchingGroups.getResult().iterator().next().getKey());\n+        assertNotNull(groups);\n+        assertEquals(1, groups.getResult().size());\n+        assertEquals(6L, groups.getResult().iterator().next().getKey());\n     }\n \n     @Test\n@@ -259,7 +259,7 @@ public void nested() {\n     public void searchByType() {\n         PagedResult<AnyObjectTO> matching = anyObjectService.search(\n                 new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder().type(\"PRINTER\").query()).build());\n+                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").query()).build());\n         assertNotNull(matching);\n \n         assertFalse(matching.getResult().isEmpty());\n@@ -269,12 +269,117 @@ public void searchByType() {\n \n         matching = anyObjectService.search(\n                 new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder().type(\"UNEXISTING\").query()).build());\n+                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"UNEXISTING\").query()).build());\n         assertNotNull(matching);\n \n         assertTrue(matching.getResult().isEmpty());\n     }\n \n+    @Test\n+    public void searchByRelationship() {\n+        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n+                        inRelationships(2L).query()).\n+                build());\n+        assertNotNull(anyObjects);\n+        assertTrue(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyObjectTO anyObject) {\n+                return anyObject.getKey() == 1L;\n+            }\n+        }));\n+\n+        PagedResult<UserTO> users = userService.search(\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRelationships(1L).query()).\n+                build());\n+        assertNotNull(users);\n+        assertTrue(CollectionUtils.exists(users.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 4L;\n+            }\n+        }));\n+    }\n+\n+    @Test\n+    public void searchByRelationshipType() {\n+        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n+                        inRelationshipTypes(\"neighborhood\").query()).\n+                build());\n+        assertNotNull(anyObjects);\n+        assertTrue(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyObjectTO anyObject) {\n+                return anyObject.getKey() == 1L;\n+            }\n+        }));\n+        assertTrue(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyObjectTO anyObject) {\n+                return anyObject.getKey() == 2L;\n+            }\n+        }));\n+\n+        PagedResult<UserTO> users = userService.search(\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRelationshipTypes(\"neighborhood\").query()).\n+                build());\n+        assertNotNull(users);\n+        assertTrue(CollectionUtils.exists(users.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 4L;\n+            }\n+        }));\n+    }\n+\n+    @Test\n+    public void assignable() {\n+        PagedResult<GroupTO> groups = groupService.search(\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getGroupSearchConditionBuilder().\n+                        isAssignable(\"/even/two\").query()).\n+                build());\n+        assertNotNull(groups);\n+        assertTrue(CollectionUtils.exists(groups.getResult(), new Predicate<GroupTO>() {\n+\n+            @Override\n+            public boolean evaluate(final GroupTO group) {\n+                return group.getKey() == 15L;\n+            }\n+        }));\n+        assertFalse(CollectionUtils.exists(groups.getResult(), new Predicate<GroupTO>() {\n+\n+            @Override\n+            public boolean evaluate(final GroupTO group) {\n+                return group.getKey() == 16L;\n+            }\n+        }));\n+\n+        PagedResult<AnyObjectTO> anyObjects = anyObjectService.search(\n+                new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n+                        isAssignable(\"/odd\").query()).\n+                build());\n+        assertNotNull(anyObjects);\n+        assertFalse(CollectionUtils.exists(anyObjects.getResult(), new Predicate<AnyObjectTO>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyObjectTO anyObject) {\n+                return anyObject.getKey() == 3L;\n+            }\n+        }));\n+    }\n+\n     @Test\n     public void orderBy() {\n         PagedResult<UserTO> matchingUsers = userService.search("},{"sha":"cea47520876c4a7157fcecbb570e78605cedffba","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SyncTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSyncTaskITCase.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -416,7 +416,7 @@ public boolean evaluate(final MappingItemTO object) {\n             // 3. unlink any existing printer and delete from Syncope (printer is now only on external resource)\n             PagedResult<AnyObjectTO> matchingPrinters = anyObjectService.search(\n                     new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                    fiql(SyncopeClient.getAnyObjectSearchConditionBuilder().type(\"PRINTER\").and().\n+                    fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n                             is(\"location\").equalTo(\"sync*\").query()).build());\n             assertTrue(matchingPrinters.getSize() > 0);\n             for (AnyObjectTO printer : matchingPrinters.getResult()) {\n@@ -435,7 +435,7 @@ public boolean evaluate(final MappingItemTO object) {\n             // hence PrefixMappingItemTransformer was applied during sync)\n             matchingPrinters = anyObjectService.search(\n                     new AnySearchQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n-                    fiql(SyncopeClient.getAnyObjectSearchConditionBuilder().type(\"PRINTER\").and().\n+                    fiql(SyncopeClient.getAnyObjectSearchConditionBuilder(\"PRINTER\").\n                             is(\"location\").equalTo(\"sync*\").query()).build());\n             assertTrue(matchingPrinters.getSize() > 0);\n "},{"sha":"21adebbcb3e92c1bf7ddeabb4e212df72da115cc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/bbb051feb43291de74d7cec215c63d2d68cbca03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/bbb051feb43291de74d7cec215c63d2d68cbca03/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=bbb051feb43291de74d7cec215c63d2d68cbca03","patch":"@@ -445,7 +445,7 @@ public void create() {\n \n     @Test\n     public void createWithRequiredValueMissing() {\n-        UserTO userTO = getSampleTO(\"a.b@c.it\");\n+        UserTO userTO = getUniqueSampleTO(\"a.b@c.it\");\n \n         AttrTO type = userTO.getPlainAttrMap().get(\"type\");\n         userTO.getPlainAttrs().remove(type);"}]}