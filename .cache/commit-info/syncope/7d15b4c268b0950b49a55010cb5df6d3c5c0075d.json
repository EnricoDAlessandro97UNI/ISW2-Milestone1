{"sha":"7d15b4c268b0950b49a55010cb5df6d3c5c0075d","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdkMTViNGMyNjhiMDk1MGI0OWE1NTAxMGNiNWRmNmQzYzVjMDA3NWQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-12-11T10:17:32Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-12-11T10:23:29Z"},"message":"[SYNCOPE-1511] White noise: rework to allow easier extensions","tree":{"sha":"718aa0c36155a4d4a49ab163dfd262fc7adfd9cf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/718aa0c36155a4d4a49ab163dfd262fc7adfd9cf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7d15b4c268b0950b49a55010cb5df6d3c5c0075d","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7d15b4c268b0950b49a55010cb5df6d3c5c0075d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7d15b4c268b0950b49a55010cb5df6d3c5c0075d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7d15b4c268b0950b49a55010cb5df6d3c5c0075d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"ed0555ad79574f23a447bb775bd430120d55437e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ed0555ad79574f23a447bb775bd430120d55437e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ed0555ad79574f23a447bb775bd430120d55437e"}],"stats":{"total":133,"additions":59,"deletions":74},"files":[{"sha":"fccf1de21c43ceed22e0504483537f4598c7ccee","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/AuditHistoryDirectoryPanel.java","status":"modified","additions":38,"deletions":49,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d15b4c268b0950b49a55010cb5df6d3c5c0075d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d15b4c268b0950b49a55010cb5df6d3c5c0075d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FAuditHistoryDirectoryPanel.java?ref=7d15b4c268b0950b49a55010cb5df6d3c5c0075d","patch":"@@ -47,7 +47,6 @@\n import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n import org.apache.syncope.client.ui.commons.panels.ModalPanel;\n import org.apache.syncope.common.lib.AnyOperations;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n import org.apache.syncope.common.lib.request.GroupUR;\n import org.apache.syncope.common.lib.request.UserUR;\n@@ -59,7 +58,6 @@\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -78,7 +76,7 @@ public class AuditHistoryDirectoryPanel extends\n \n     private static final int TOTAL_AUDIT_HISTORY_COMPARISONS = 25;\n \n-    private static final ObjectMapper MAPPER = new ObjectMapper();\n+    protected static final ObjectMapper MAPPER = new ObjectMapper();\n \n     private final BaseModal<?> baseModal;\n \n@@ -100,60 +98,46 @@ public AuditHistoryDirectoryPanel(\n         this.baseModal = baseModal;\n         this.multiLevelPanelRef = multiLevelPanelRef;\n         this.anyTO = anyTO;\n+        this.anyTypeKind = AnyTypeKind.fromTOClass(anyTO.getClass());\n \n-        anyTypeKind = AnyTypeKind.fromTOClass(anyTO.getClass());\n+        this.restClient = new AuditHistoryRestClient();\n         initResultTable();\n     }\n \n     /**\n-     * Restore an object based on the audit record.\n+     * Restore an object based on the audit record.Note that for user objects, the original audit record masks\n+     * the password and the security answer; so we cannot use the audit record to resurrect the entry based on mask\n+     * data.\n      *\n-     * Note that for user objects, the original audit record masks\n-     * the password and the security answer; so we cannot use the audit\n-     * record to resurrect the entry based on mask data. The method behavior\n-     * below will reset the audit record such that the current security answer\n-     * and the password for the object are always maintained, and such properties\n-     * for the user cannot be restored using audit records.\n+     * The method behavior below will reset the audit record such that the current security answer and the password for\n+     * the object are always maintained, and such properties for the user cannot be restored using audit records.\n      *\n-     * @param entryBean the entry bean\n+     * @param json the object from audit\n      * @param anyTO the any to\n      * @return the response\n+     * @throws JsonProcessingException if json value cannot be parsed\n      */\n-    private static ProvisioningResult<? extends AnyTO> restore(final AuditEntryTO entryBean,\n-            final AnyTO anyTO) {\n-        try {\n-            String json = getJSONFromAuditEntry(entryBean);\n-            if (anyTO instanceof UserTO) {\n-                UserTO userTO = MAPPER.readValue(json, UserTO.class);\n-                UserUR req = AnyOperations.diff(userTO, anyTO, false);\n-                req.setPassword(null);\n-                req.setSecurityAnswer(null);\n-                return new UserRestClient().update(anyTO.getETagValue(), req);\n-            }\n-            if (anyTO instanceof GroupTO) {\n-                GroupTO groupTO = MAPPER.readValue(json, GroupTO.class);\n-                GroupUR req = AnyOperations.diff(groupTO, anyTO, false);\n-                return new GroupRestClient().update(anyTO.getETagValue(), req);\n-            }\n-            if (anyTO instanceof AnyObjectTO) {\n-                AnyObjectTO anyObjectTO = MAPPER.readValue(json, AnyObjectTO.class);\n-                AnyObjectUR req = AnyOperations.diff(anyObjectTO, anyTO, false);\n-                return new AnyObjectRestClient().update(anyTO.getETagValue(), req);\n-            }\n-        } catch (final Exception e) {\n-            LOG.error(\"Could not restore object for {}\", anyTO, e);\n+    protected ProvisioningResult<? extends AnyTO> restore(final String json, final AnyTO anyTO)\n+            throws JsonProcessingException {\n+\n+        if (anyTO instanceof UserTO) {\n+            UserTO userTO = MAPPER.readValue(json, UserTO.class);\n+            UserUR req = AnyOperations.diff(userTO, anyTO, false);\n+            req.setPassword(null);\n+            req.setSecurityAnswer(null);\n+            return new UserRestClient().update(anyTO.getETagValue(), req);\n         }\n-        throw SyncopeClientException.build(ClientExceptionType.InvalidAnyObject);\n-    }\n-\n-    private static String getJSONFromAuditEntry(final AuditEntryTO entryBean) throws JsonProcessingException {\n-        final String json;\n-        if (entryBean.getBefore() == null) {\n-            json = MAPPER.readTree(entryBean.getOutput()).get(\"entity\").toPrettyString();\n-        } else {\n-            json = entryBean.getBefore();\n+        if (anyTO instanceof GroupTO) {\n+            GroupTO groupTO = MAPPER.readValue(json, GroupTO.class);\n+            GroupUR req = AnyOperations.diff(groupTO, anyTO, false);\n+            return new GroupRestClient().update(anyTO.getETagValue(), req);\n+        }\n+        if (anyTO instanceof AnyObjectTO) {\n+            AnyObjectTO anyObjectTO = MAPPER.readValue(json, AnyObjectTO.class);\n+            AnyObjectUR req = AnyOperations.diff(anyObjectTO, anyTO, false);\n+            return new AnyObjectRestClient().update(anyTO.getETagValue(), req);\n         }\n-        return json;\n+        throw new UnsupportedOperationException(\"Restore not supported for \" + anyTO.getClass().getName());\n     }\n \n     private static SortParam<String> getSortParam() {\n@@ -231,11 +215,16 @@ public void onClick(final AjaxRequestTarget target, final AuditEntryTO modelObje\n             public void onClick(final AjaxRequestTarget target, final AuditEntryTO modelObject) {\n                 try {\n                     AuditHistoryDirectoryPanel.this.getTogglePanel().close(target);\n-                    ProvisioningResult<? extends AnyTO> result = restore(modelObject, anyTO);\n+\n+                    String json = modelObject.getBefore() == null\n+                            ? MAPPER.readTree(modelObject.getOutput()).get(\"entity\").toPrettyString()\n+                            : modelObject.getBefore();\n+                    ProvisioningResult<? extends AnyTO> result = restore(json, anyTO);\n                     anyTO.setLastChangeDate(new Date(Long.parseLong(result.getEntity().getETagValue())));\n+\n                     target.add(container);\n-                } catch (SyncopeClientException e) {\n-                    LOG.error(\"While restoring {}\", anyTypeKind, e);\n+                } catch (Exception e) {\n+                    LOG.error(\"While restoring {}\", anyTO.getClass().getName(), e);\n                     SyncopeConsoleSession.get().error(StringUtils.isBlank(e.getMessage())\n                             ? e.getClass().getName() : e.getMessage());\n                 }\n@@ -262,7 +251,7 @@ private void viewAuditHistory(final AuditEntryTO auditEntryBean, final AjaxReque\n         multiLevelPanelRef.next(\n                 new StringResourceModel(\"audit.diff.view\", this).getObject(),\n                 new HistoryAuditDetails(modal, auditEntryBean,\n-                        getPage().getPageReference(), toAuditEntryTOs(search), anyTO, anyTypeKind), target);\n+                        getPage().getPageReference(), toAuditEntryTOs(search), anyTO), target);\n     }\n \n     private List<AuditEntryTO> toAuditEntryTOs(final List<AuditEntryTO> search) {"},{"sha":"672f982d3c9bccb470f17c37e4d0aa5c6767b393","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/audit/HistoryAuditDetails.java","status":"modified","additions":21,"deletions":25,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7d15b4c268b0950b49a55010cb5df6d3c5c0075d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FHistoryAuditDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7d15b4c268b0950b49a55010cb5df6d3c5c0075d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FHistoryAuditDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Faudit%2FHistoryAuditDetails.java?ref=7d15b4c268b0950b49a55010cb5df6d3c5c0075d","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.client.console.audit;\n \n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.util.ArrayList;\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n-import com.fasterxml.jackson.databind.ObjectMapper;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n@@ -36,7 +36,6 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AuditEntryTO;\n import org.apache.syncope.common.lib.to.UserTO;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -58,21 +57,22 @@ public class HistoryAuditDetails extends MultilevelPanel.SecondLevel {\n \n     private final List<AuditEntryTO> availableTOs;\n \n-    private final AnyTypeKind anyTypeKind;\n-\n     private AbstractModalPanel<String> jsonPanel;\n \n     private final AnyTO currentTO;\n \n-    public HistoryAuditDetails(final BaseModal<?> baseModal, final AuditEntryTO selected,\n-            final PageReference pageRef, final List<AuditEntryTO> availableTOs,\n-            final AnyTO currentTO, final AnyTypeKind anyTypeKind) {\n+    public HistoryAuditDetails(\n+            final BaseModal<?> baseModal,\n+            final AuditEntryTO selected,\n+            final PageReference pageRef,\n+            final List<AuditEntryTO> availableTOs,\n+            final AnyTO currentTO) {\n+\n         super();\n-        this.availableTOs = availableTOs.stream()\n-                .filter(object -> !selected.equals(object) && selected.getBefore() != null)\n-                .collect(Collectors.toList());\n+        this.availableTOs = availableTOs.stream().\n+                filter(object -> !selected.equals(object) && selected.getBefore() != null).\n+                collect(Collectors.toList());\n         this.selected = selected;\n-        this.anyTypeKind = anyTypeKind;\n         this.currentTO = currentTO;\n \n         addCurrentInstanceConf();\n@@ -119,7 +119,7 @@ public void onSubmit(final AjaxRequestTarget target) {\n     }\n \n     private String getSanitizedTOAsJSON(final AnyTO anyTO) throws Exception {\n-        if (this.anyTypeKind == AnyTypeKind.USER) {\n+        if (anyTO instanceof UserTO) {\n             UserTO userTO = (UserTO) anyTO;\n             userTO.setPassword(null);\n             userTO.setSecurityAnswer(null);\n@@ -130,15 +130,12 @@ private String getSanitizedTOAsJSON(final AnyTO anyTO) throws Exception {\n \n     private Pair<String, String> getJSONInfo(final AuditEntryTO auditEntryBean) {\n         try {\n-            final String content;\n-            if (auditEntryBean.getBefore() == null) {\n-                content = MAPPER.readTree(auditEntryBean.getOutput()).get(\"entity\").toPrettyString();\n-            } else {\n-                content = auditEntryBean.getBefore();\n-            }\n+            String content = auditEntryBean.getBefore() == null\n+                    ? MAPPER.readTree(auditEntryBean.getOutput()).get(\"entity\").toPrettyString()\n+                    : auditEntryBean.getBefore();\n \n-            AnyTO userTO = MAPPER.readValue(content, anyTypeKind.getTOClass());\n-            String json = getSanitizedTOAsJSON(userTO);\n+            AnyTO anyTO = MAPPER.readValue(content, currentTO.getClass());\n+            String json = getSanitizedTOAsJSON(anyTO);\n             return Pair.of(auditEntryBean.getKey(), json);\n         } catch (Exception e) {\n             throw new RuntimeException(e);\n@@ -147,14 +144,13 @@ private Pair<String, String> getJSONInfo(final AuditEntryTO auditEntryBean) {\n \n     private static <T extends AuditEntryTO> Map<String, String> getDropdownNamesMap(final List<T> entries) {\n         Map<String, String> map = new LinkedHashMap<>();\n-        for (AuditEntryTO audit : entries) {\n-            String value = audit.getWho()\n-                    + \" - \" + SyncopeConsoleSession.get().getDateFormat().format(audit.getDate());\n+        entries.forEach(audit -> {\n+            String value = audit.getWho() + \" - \" + SyncopeConsoleSession.get().getDateFormat().format(audit.getDate());\n             if (audit.getKey().equalsIgnoreCase(KEY_CURRENT)) {\n                 value += \" - \" + audit.getKey();\n             }\n             map.put(audit.getKey(), value);\n-        }\n+        });\n         return map;\n     }\n \n@@ -163,7 +159,7 @@ private Form<?> initDropdownDiffConfForm() {\n         form.setModel(new CompoundPropertyModel<>(selected));\n         form.setOutputMarkupId(true);\n \n-        final Map<String, String> namesMap = getDropdownNamesMap(availableTOs);\n+        Map<String, String> namesMap = getDropdownNamesMap(availableTOs);\n         List<String> keys = new ArrayList<>(namesMap.keySet());\n \n         final AjaxDropDownChoicePanel<String> dropdownElem = new AjaxDropDownChoicePanel<>("}]}