{"sha":"f2ba8e71d754ec629e2c59577678c75e7c0d7eda","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYyYmE4ZTcxZDc1NGVjNjI5ZTJjNTk1Nzc2NzhjNzVlN2MwZDdlZGE=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-21T09:08:54Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-21T09:08:54Z"},"message":"[SYNCOPE-281]\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1436230 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"7c41898609791e144ef4aada0e076bcb93fade78","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/7c41898609791e144ef4aada0e076bcb93fade78"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f2ba8e71d754ec629e2c59577678c75e7c0d7eda","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2ba8e71d754ec629e2c59577678c75e7c0d7eda","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f2ba8e71d754ec629e2c59577678c75e7c0d7eda","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/comments","author":null,"committer":null,"parents":[{"sha":"8c63aa46573e8582f31fe9b661ba783bbf066fe4","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8c63aa46573e8582f31fe9b661ba783bbf066fe4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8c63aa46573e8582f31fe9b661ba783bbf066fe4"}],"stats":{"total":20426,"additions":10560,"deletions":9866},"files":[{"sha":"016e0106d749b03e6f6e0c0f1b72458289548714","filename":"client/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fpom.xml?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -43,6 +43,12 @@ under the License.\n   </distributionManagement>\n   \n   <dependencies>\n+\t<dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-common</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  \n   \t<dependency>\n \t\t<groupId>javax.ws.rs</groupId>\n     \t<artifactId>javax.ws.rs-api</artifactId>"},{"sha":"cd6f0f9c1b7640efc3d0046ea69ff2d9a5ce2a3b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConfigurationServiceProxy.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConfigurationServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.io.InputStream;\r\n import java.net.URI;\r\n@@ -27,11 +27,11 @@\n \r\n import javax.ws.rs.core.Response;\r\n \r\n-import org.apache.syncope.client.to.ConfigurationTO;\r\n-import org.apache.syncope.client.to.MailTemplateTO;\r\n-import org.apache.syncope.client.to.ValidatorTO;\r\n-import org.apache.syncope.client.util.CollectionWrapper;\r\n-import org.apache.syncope.services.ConfigurationService;\r\n+import org.apache.syncope.common.services.ConfigurationService;\r\n+import org.apache.syncope.common.to.ConfigurationTO;\r\n+import org.apache.syncope.common.to.MailTemplateTO;\r\n+import org.apache.syncope.common.to.ValidatorTO;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class ConfigurationServiceProxy extends SpringServiceProxy implements ConfigurationService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/ConfigurationServiceProxy.java"},{"sha":"ce640560aeb326ecf5d752e14205a0eae597dd5e","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ConnectorServiceProxy.java","status":"renamed","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FConnectorServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.net.URI;\r\n import java.util.ArrayList;\r\n@@ -25,11 +25,11 @@\n \r\n import javax.ws.rs.core.Response;\r\n \r\n-import org.apache.syncope.client.to.ConnBundleTO;\r\n-import org.apache.syncope.client.to.ConnInstanceTO;\r\n-import org.apache.syncope.client.to.SchemaTO;\r\n-import org.apache.syncope.services.ConnectorService;\r\n-import org.apache.syncope.types.ConnConfProperty;\r\n+import org.apache.syncope.common.services.ConnectorService;\r\n+import org.apache.syncope.common.to.ConnBundleTO;\r\n+import org.apache.syncope.common.to.ConnInstanceTO;\r\n+import org.apache.syncope.common.to.SchemaTO;\r\n+import org.apache.syncope.common.types.ConnConfProperty;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class ConnectorServiceProxy extends SpringServiceProxy implements ConnectorService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/ConnectorServiceProxy.java"},{"sha":"d46338ed4889544d82ddd941f2dfedfa9e4073a3","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/EntitlementServiceProxy.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FEntitlementServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.HashSet;\r\n import java.util.Set;\r\n-import org.apache.syncope.client.to.EntitlementTO;\r\n-import org.apache.syncope.client.util.CollectionWrapper;\r\n-import org.apache.syncope.services.EntitlementService;\r\n+import org.apache.syncope.common.services.EntitlementService;\r\n+import org.apache.syncope.common.to.EntitlementTO;\r\n+import org.apache.syncope.common.util.CollectionWrapper;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class EntitlementServiceProxy extends SpringServiceProxy implements EntitlementService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/EntitlementServiceProxy.java"},{"sha":"a5092492348c04db77312b584839c11324868250","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/LoggerServiceProxy.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import ch.qos.logback.classic.Level;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n-import org.apache.syncope.client.to.LoggerTO;\r\n-import org.apache.syncope.services.LoggerService;\r\n-import org.apache.syncope.types.AuditLoggerName;\r\n+import org.apache.syncope.common.services.LoggerService;\r\n+import org.apache.syncope.common.to.LoggerTO;\r\n+import org.apache.syncope.common.types.AuditLoggerName;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class LoggerServiceProxy extends SpringServiceProxy implements LoggerService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/LoggerServiceProxy.java"},{"sha":"2ccd70e024d54c4ed97818afcf7316547b16921e","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/NotificationServiceProxy.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FNotificationServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,12 +16,12 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-import org.apache.syncope.client.to.NotificationTO;\r\n-import org.apache.syncope.services.NotificationService;\r\n+import org.apache.syncope.common.services.NotificationService;\r\n+import org.apache.syncope.common.to.NotificationTO;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class NotificationServiceProxy extends SpringServiceProxy implements NotificationService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/NotificationServiceProxy.java"},{"sha":"2d8907445e5d644e26174f8314b778f564d1c707","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/PolicyServiceProxy.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FPolicyServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,16 +16,16 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-import org.apache.syncope.client.to.AccountPolicyTO;\r\n-import org.apache.syncope.client.to.PasswordPolicyTO;\r\n-import org.apache.syncope.client.to.PolicyTO;\r\n-import org.apache.syncope.client.to.SyncPolicyTO;\r\n-import org.apache.syncope.services.PolicyService;\r\n-import org.apache.syncope.types.PolicyType;\r\n+import org.apache.syncope.common.services.PolicyService;\r\n+import org.apache.syncope.common.to.AccountPolicyTO;\r\n+import org.apache.syncope.common.to.PasswordPolicyTO;\r\n+import org.apache.syncope.common.to.PolicyTO;\r\n+import org.apache.syncope.common.to.SyncPolicyTO;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n @SuppressWarnings(\"unchecked\")\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/PolicyServiceProxy.java"},{"sha":"8722d9d5d099cfe6783f016dbdd6cd16f78ba202","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ReportServiceProxy.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FReportServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,16 +16,16 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.io.InputStream;\r\n import java.util.Arrays;\r\n import java.util.List;\r\n import javax.ws.rs.core.Response;\r\n-import org.apache.syncope.client.to.ReportExecTO;\r\n-import org.apache.syncope.client.to.ReportTO;\r\n-import org.apache.syncope.services.ReportService;\r\n-import org.apache.syncope.types.ReportExecExportFormat;\r\n+import org.apache.syncope.common.services.ReportService;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n+import org.apache.syncope.common.to.ReportTO;\r\n+import org.apache.syncope.common.types.ReportExecExportFormat;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class ReportServiceProxy extends SpringServiceProxy implements ReportService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/ReportServiceProxy.java"},{"sha":"9b0b6c11a391b50ef6feed70db3121444da6f454","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/ResourceServiceProxy.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FResourceServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,16 +16,16 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n-import org.apache.syncope.client.to.ConnObjectTO;\r\n-import org.apache.syncope.client.to.ResourceTO;\r\n-import org.apache.syncope.services.ResourceService;\r\n-import org.apache.syncope.types.AttributableType;\r\n+import org.apache.syncope.common.services.ResourceService;\r\n+import org.apache.syncope.common.to.ConnObjectTO;\r\n+import org.apache.syncope.common.to.ResourceTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class ResourceServiceProxy extends SpringServiceProxy implements ResourceService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/ResourceServiceProxy.java"},{"sha":"acfa0ad3bcd615932d23292b546abdb7439c5dfe","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/RoleServiceProxy.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-import org.apache.syncope.client.mod.RoleMod;\r\n-import org.apache.syncope.client.search.NodeCond;\r\n-import org.apache.syncope.client.to.RoleTO;\r\n-import org.apache.syncope.services.RoleService;\r\n+import org.apache.syncope.common.mod.RoleMod;\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.services.RoleService;\r\n+import org.apache.syncope.common.to.RoleTO;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class RoleServiceProxy extends SpringServiceProxy implements RoleService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/RoleServiceProxy.java"},{"sha":"84e977ac844c924e986f975c49e4855744b12da9","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SchemaServiceProxy.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,17 +16,17 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n \r\n-import org.apache.syncope.client.to.AbstractSchemaTO;\r\n-import org.apache.syncope.client.to.DerivedSchemaTO;\r\n-import org.apache.syncope.client.to.SchemaTO;\r\n-import org.apache.syncope.client.to.VirtualSchemaTO;\r\n-import org.apache.syncope.services.SchemaService;\r\n-import org.apache.syncope.types.AttributableType;\r\n+import org.apache.syncope.common.services.SchemaService;\r\n+import org.apache.syncope.common.to.AbstractSchemaTO;\r\n+import org.apache.syncope.common.to.DerivedSchemaTO;\r\n+import org.apache.syncope.common.to.SchemaTO;\r\n+import org.apache.syncope.common.to.VirtualSchemaTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n @SuppressWarnings(\"unchecked\")\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java"},{"sha":"96555d8f73c630bcec9f86278456af323e3f996b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SpringRestTemplate.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringRestTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringRestTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringRestTemplate.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import org.springframework.web.client.RestTemplate;\r\n \r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/SpringRestTemplate.java"},{"sha":"324b8f28a97f88bf5ff1a51fb2fac1d7be330d2b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/SpringServiceProxy.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FSpringServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import org.springframework.web.client.RestTemplate;\r\n \r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/SpringServiceProxy.java"},{"sha":"e19050b59332559579388ccc0b58996912814867","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/TaskServiceProxy.java","status":"renamed","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FTaskServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,21 +16,21 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n-import org.apache.syncope.client.to.NotificationTaskTO;\r\n-import org.apache.syncope.client.to.PropagationTaskTO;\r\n-import org.apache.syncope.client.to.SchedTaskTO;\r\n-import org.apache.syncope.client.to.SyncTaskTO;\r\n-import org.apache.syncope.client.to.TaskExecTO;\r\n-import org.apache.syncope.client.to.TaskTO;\r\n-import org.apache.syncope.services.TaskService;\r\n-import org.apache.syncope.types.PropagationTaskExecStatus;\r\n-import org.apache.syncope.types.TaskType;\r\n+import org.apache.syncope.common.services.TaskService;\r\n+import org.apache.syncope.common.to.NotificationTaskTO;\r\n+import org.apache.syncope.common.to.PropagationTaskTO;\r\n+import org.apache.syncope.common.to.SchedTaskTO;\r\n+import org.apache.syncope.common.to.SyncTaskTO;\r\n+import org.apache.syncope.common.to.TaskExecTO;\r\n+import org.apache.syncope.common.to.TaskTO;\r\n+import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n+import org.apache.syncope.common.types.TaskType;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n @SuppressWarnings(\"unchecked\")\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/TaskServiceProxy.java"},{"sha":"8e547860ec7a8629ced655ba19c389d3b8a837cf","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserRequestServiceProxy.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserRequestServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-import org.apache.syncope.client.mod.UserMod;\r\n-import org.apache.syncope.client.to.UserRequestTO;\r\n-import org.apache.syncope.client.to.UserTO;\r\n-import org.apache.syncope.services.UserRequestService;\r\n+import org.apache.syncope.common.mod.UserMod;\r\n+import org.apache.syncope.common.services.UserRequestService;\r\n+import org.apache.syncope.common.to.UserRequestTO;\r\n+import org.apache.syncope.common.to.UserTO;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class UserRequestServiceProxy extends SpringServiceProxy implements UserRequestService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/UserRequestServiceProxy.java"},{"sha":"65928dd18a404e67c7031053f7e1126ffa568b9b","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/UserServiceProxy.java","status":"renamed","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FUserServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,16 +16,16 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.services.proxy;\n+package org.apache.syncope.client.services.proxy;\n \n import java.util.Arrays;\n import java.util.List;\n-import org.apache.syncope.client.mod.StatusMod;\n-import org.apache.syncope.client.mod.UserMod;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.to.WorkflowFormTO;\n-import org.apache.syncope.services.UserService;\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n import org.springframework.web.client.RestTemplate;\n \n public class UserServiceProxy extends SpringServiceProxy implements UserService {","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/UserServiceProxy.java"},{"sha":"c2af5f6bce3e4cdaa687985b04349199f0e750cd","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/WorkflowServiceProxy.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FWorkflowServiceProxy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,12 +16,12 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services.proxy;\r\n+package org.apache.syncope.client.services.proxy;\r\n \r\n import java.util.Arrays;\r\n import java.util.List;\r\n-import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n-import org.apache.syncope.services.WorkflowService;\r\n+import org.apache.syncope.common.services.WorkflowService;\r\n+import org.apache.syncope.common.to.WorkflowDefinitionTO;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n public class WorkflowServiceProxy extends SpringServiceProxy implements WorkflowService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/proxy/WorkflowServiceProxy.java"},{"sha":"c8a7c9e1daeb57eb6f6b4e8cffd707b99e8c2240","filename":"client/src/test/java/org/apache/syncope/client/test/JSONTest.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -27,15 +27,15 @@\n import java.util.List;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.junit.Test;\n-import org.apache.syncope.client.report.UserReportletConf;\n-import org.apache.syncope.client.search.AttributeCond;\n-import org.apache.syncope.client.search.MembershipCond;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.ReportTO;\n-import org.apache.syncope.client.to.SchemaTO;\n-import org.apache.syncope.client.to.WorkflowFormPropertyTO;\n-import org.apache.syncope.types.AuditElements;\n-import org.apache.syncope.types.AuditLoggerName;\n+import org.apache.syncope.common.report.UserReportletConf;\n+import org.apache.syncope.common.search.AttributeCond;\n+import org.apache.syncope.common.search.MembershipCond;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditLoggerName;\n \n public class JSONTest {\n "},{"sha":"50d3e416a6a6ce34ca254c16a444873656a241e3","filename":"common/pom.xml","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fpom.xml?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n+<!--\r\n+Licensed to the Apache Software Foundation (ASF) under one\r\n+or more contributor license agreements.  See the NOTICE file\r\n+distributed with this work for additional information\r\n+regarding copyright ownership.  The ASF licenses this file\r\n+to you under the Apache License, Version 2.0 (the\r\n+\"License\"); you may not use this file except in compliance\r\n+with the License.  You may obtain a copy of the License at\r\n+\r\n+  http://www.apache.org/licenses/LICENSE-2.0\r\n+\r\n+Unless required by applicable law or agreed to in writing,\r\n+software distributed under the License is distributed on an\r\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+KIND, either express or implied.  See the License for the\r\n+specific language governing permissions and limitations\r\n+under the License.\r\n+\r\n+-->\r\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\r\n+\r\n+  <modelVersion>4.0.0</modelVersion>\r\n+\r\n+  <parent>\r\n+    <groupId>org.apache.syncope</groupId>\r\n+    <artifactId>syncope</artifactId>\r\n+    <version>1.1.0-SNAPSHOT</version>\r\n+  </parent>\r\n+\r\n+  <name>Apache Syncope Common</name>\r\n+  <description>Apache Syncope Common</description>\r\n+  <groupId>org.apache.syncope</groupId>\r\n+  <artifactId>syncope-common</artifactId>\r\n+  <packaging>bundle</packaging>\r\n+\r\n+  <distributionManagement>\r\n+    <site>\r\n+      <id>syncope.website</id>\r\n+      <name>Apache Syncope website</name>\r\n+      <url>${site.deploymentBaseUrl}/${project.artifactId}</url>\r\n+    </site>\r\n+  </distributionManagement>\r\n+  \r\n+  <dependencies>\r\n+  \t<dependency>\r\n+\t\t<groupId>javax.ws.rs</groupId>\r\n+    \t<artifactId>javax.ws.rs-api</artifactId>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>commons-lang</groupId>\r\n+      <artifactId>commons-lang</artifactId>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.springframework</groupId>\r\n+      <artifactId>spring-webmvc</artifactId>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.codehaus.jackson</groupId>\r\n+      <artifactId>jackson-mapper-asl</artifactId>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>org.apache.httpcomponents</groupId>\r\n+      <artifactId>httpclient</artifactId>\r\n+    </dependency>\r\n+    \r\n+    <dependency>\r\n+      <groupId>ch.qos.logback</groupId>\r\n+      <artifactId>logback-core</artifactId>\r\n+    </dependency>\r\n+    <dependency>\r\n+      <groupId>ch.qos.logback</groupId>\r\n+      <artifactId>logback-classic</artifactId>\r\n+    </dependency>\r\n+\r\n+    <dependency>\r\n+      <groupId>junit</groupId>\r\n+      <artifactId>junit</artifactId>\r\n+      <scope>test</scope>\r\n+    </dependency>\r\n+\r\n+  </dependencies>\r\n+\r\n+  <build>\r\n+    <plugins>\r\n+      <plugin>\r\n+        <groupId>org.apache.felix</groupId>\r\n+        <artifactId>maven-bundle-plugin</artifactId>\r\n+        <extensions>true</extensions>\r\n+        <configuration>\r\n+          <instructions>\r\n+            <Bundle-Name>${project.name}</Bundle-Name>\r\n+            <Bundle-SymbolicName>org.apache.syncope.client</Bundle-SymbolicName>\r\n+            <Bundle-Version>${project.version}</Bundle-Version>\r\n+            <Export-Package>\r\n+              org.apache.syncope*;version=${project.version};-split-package:=merge-first\r\n+            </Export-Package>\r\n+            <Import-Package>\r\n+              org.apache.commons.lang*;version=\"[2.6,3)\",\r\n+              org.apache.http*;version=\"[4,5)\",\r\n+              org.codehaus.jackson.annotate;version=\"[1.9,2)\",\r\n+              org.springframework*;version=\"[3,4)\",\r\n+              ch.qos.logback.classic;resolution:=optional,\r\n+              org.slf4j;resolution:=optional,\r\n+              *\r\n+            </Import-Package>\r\n+          </instructions>\r\n+        </configuration>\r\n+      </plugin>\r\n+      <plugin>\r\n+        <groupId>org.apache.maven.plugins</groupId>\r\n+        <artifactId>maven-checkstyle-plugin</artifactId>\r\n+      </plugin>\r\n+      <plugin>\r\n+        <groupId>org.apache.maven.plugins</groupId>\r\n+        <artifactId>maven-pmd-plugin</artifactId>\r\n+      </plugin>\r\n+    </plugins>\r\n+    \r\n+    <resources>\r\n+      <resource>\r\n+        <directory>..</directory>\r\n+        <targetPath>META-INF</targetPath>\r\n+        <includes>\r\n+          <include>LICENSE</include>\r\n+          <include>NOTICE</include>\r\n+        </includes>\r\n+      </resource>\r\n+    </resources>\r\n+  </build>\r\n+</project>\r"},{"sha":"f46cba8644525e17b8cf85746b7b243df892c056","filename":"common/src/main/java/org/apache/syncope/common/AbstractBaseBean.java","status":"renamed","additions":45,"deletions":45,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FAbstractBaseBean.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,45 +1,45 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client;\n-\n-import java.io.Serializable;\n-import org.apache.commons.lang.builder.EqualsBuilder;\n-import org.apache.commons.lang.builder.HashCodeBuilder;\n-import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang.builder.ToStringStyle;\n-\n-public abstract class AbstractBaseBean implements Serializable {\n-\n-    private static final long serialVersionUID = 3119542005279892164L;\n-\n-    @Override\n-    public boolean equals(Object obj) {\n-        return EqualsBuilder.reflectionEquals(this, obj);\n-    }\n-\n-    @Override\n-    public int hashCode() {\n-        return HashCodeBuilder.reflectionHashCode(this);\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common;\r\n+\r\n+import java.io.Serializable;\r\n+import org.apache.commons.lang.builder.EqualsBuilder;\r\n+import org.apache.commons.lang.builder.HashCodeBuilder;\r\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\r\n+import org.apache.commons.lang.builder.ToStringStyle;\r\n+\r\n+public abstract class AbstractBaseBean implements Serializable {\r\n+\r\n+    private static final long serialVersionUID = 3119542005279892164L;\r\n+\r\n+    @Override\r\n+    public boolean equals(Object obj) {\r\n+        return EqualsBuilder.reflectionEquals(this, obj);\r\n+    }\r\n+\r\n+    @Override\r\n+    public int hashCode() {\r\n+        return HashCodeBuilder.reflectionHashCode(this);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/AbstractBaseBean.java"},{"sha":"c7c9d15cbf2ea1ae68a8564f3f00435545e50cd9","filename":"common/src/main/java/org/apache/syncope/common/SyncopeConstants.java","status":"renamed","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2FSyncopeConstants.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,34 +1,34 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client;\n-\n-\n-public class SyncopeConstants {\n-\n-    public static final String[] DATE_PATTERNS = {\n-        \"yyyy-MM-dd'T'HH:mm:ssZ\",\n-        \"EEE, dd MMM yyyy HH:mm:ss z\",\n-        \"yyyy-MM-dd'T'HH:mm:ssz\",\n-        \"yyyy-MM-dd HH:mm:ss\",\n-        \"yyyy-MM-dd HH:mm:ss.S\", // explicitly added to import date into MySql repository\n-        \"yyyy-MM-dd\"};\n-\n-    public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common;\r\n+\r\n+\r\n+public class SyncopeConstants {\r\n+\r\n+    public static final String[] DATE_PATTERNS = {\r\n+        \"yyyy-MM-dd'T'HH:mm:ssZ\",\r\n+        \"EEE, dd MMM yyyy HH:mm:ss z\",\r\n+        \"yyyy-MM-dd'T'HH:mm:ssz\",\r\n+        \"yyyy-MM-dd HH:mm:ss\",\r\n+        \"yyyy-MM-dd HH:mm:ss.S\", // explicitly added to import date into MySql repository\r\n+        \"yyyy-MM-dd\"};\r\n+\r\n+    public static final String DEFAULT_DATE_PATTERN = \"yyyy-MM-dd'T'HH:mm:ssZ\";\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/SyncopeConstants.java"},{"sha":"10ff231516e090800e696fb390eed5dd53c12272","filename":"common/src/main/java/org/apache/syncope/common/annotation/FormAttributeField.java","status":"renamed","additions":33,"deletions":32,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FFormAttributeField.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,32 +1,33 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.annotation;\n-\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-import org.apache.syncope.types.IntMappingType;\n-\n-@Target( { ElementType.FIELD })\n-@Retention(RetentionPolicy.RUNTIME)\n-public @interface FormAttributeField {\n-\n-    IntMappingType schema() default IntMappingType.UserSchema;\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.annotation;\r\n+\r\n+import java.lang.annotation.ElementType;\r\n+import java.lang.annotation.Retention;\r\n+import java.lang.annotation.RetentionPolicy;\r\n+import java.lang.annotation.Target;\r\n+\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+\r\n+@Target( { ElementType.FIELD })\r\n+@Retention(RetentionPolicy.RUNTIME)\r\n+public @interface FormAttributeField {\r\n+\r\n+    IntMappingType schema() default IntMappingType.UserSchema;\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/annotation/FormAttributeField.java"},{"sha":"e0a0466243377e1a1a007ac23db2a6d2ef40b1e9","filename":"common/src/main/java/org/apache/syncope/common/annotation/SchemaList.java","status":"renamed","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fannotation%2FSchemaList.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,28 +1,28 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.annotation;\n-\n-import java.lang.annotation.Retention;\n-import static java.lang.annotation.RetentionPolicy.RUNTIME;\n-\n-@Retention(RUNTIME)\n-public @interface SchemaList {\n-\n-    boolean extended() default false;\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.annotation;\r\n+\r\n+import java.lang.annotation.Retention;\r\n+import static java.lang.annotation.RetentionPolicy.RUNTIME;\r\n+\r\n+@Retention(RUNTIME)\r\n+public @interface SchemaList {\r\n+\r\n+    boolean extended() default false;\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/annotation/SchemaList.java"},{"sha":"0bde02f99e33a0d7fd371e18c25bd9607558e24c","filename":"common/src/main/java/org/apache/syncope/common/mod/AbstractAttributableMod.java","status":"renamed","additions":252,"deletions":251,"changes":503,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAbstractAttributableMod.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,251 +1,252 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.mod;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-/**\n- * Abstract base class for objects that can have attributes removed, added or updated.\n- * \n- * Attributes can be regular attributes, derived attributes, virtual attributes and resources.\n- */\n-public abstract class AbstractAttributableMod extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 3241118574016303198L;\n-    protected long id;\n-    protected Set<AttributeMod> attributesToBeUpdated;\n-    protected Set<String> attributesToBeRemoved;\n-    protected Set<String> derivedAttributesToBeAdded;\n-    protected Set<String> derivedAttributesToBeRemoved;\n-    protected Set<AttributeMod> virtualAttributesToBeUpdated;\n-    protected Set<String> virtualAttributesToBeRemoved;\n-    protected Set<String> resourcesToBeAdded;\n-    protected Set<String> resourcesToBeRemoved;\n-\n-    /**\n-     * All attributes are initialized to empty sets.\n-     */\n-    public AbstractAttributableMod() {\n-        super();\n-\n-        attributesToBeUpdated = new HashSet<AttributeMod>();\n-        attributesToBeRemoved = new HashSet<String>();\n-        derivedAttributesToBeAdded = new HashSet<String>();\n-        derivedAttributesToBeRemoved = new HashSet<String>();\n-        virtualAttributesToBeUpdated = new HashSet<AttributeMod>();\n-        virtualAttributesToBeRemoved = new HashSet<String>();\n-        resourcesToBeAdded = new HashSet<String>();\n-        resourcesToBeRemoved = new HashSet<String>();\n-    }\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    /**\n-     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object\n-     * \n-     * @param name (schema) of attribute to be removed.\n-     * @return true on success. \n-     */\n-    public boolean addAttributeToBeRemoved(String attribute) {\n-        return attributesToBeRemoved.add(attribute);\n-    }\n-\n-    /**\n-     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object\n-     * \n-     * @param name (schema) of attribute to be removed.\n-     * @return true on success. \n-     */\n-    public boolean removeAttributeToBeRemoved(String attribute) {\n-        return attributesToBeRemoved.remove(attribute);\n-    }\n-\n-    public Set<String> getAttributesToBeRemoved() {\n-        return attributesToBeRemoved;\n-    }\n-\n-    public void setAttributesToBeRemoved(Set<String> attributesToBeRemoved) {\n-        this.attributesToBeRemoved = attributesToBeRemoved;\n-    }\n-\n-    /**\n-     * Add an attribute modification object. AttributeMod itself indicates how the attribute should be modified. \n-     * \n-     * @param attribute modification object\n-     * @see AttributeMod\n-     * @return true on success\n-     */\n-    public boolean addAttributeToBeUpdated(AttributeMod attribute) {\n-        return attributesToBeUpdated.add(attribute);\n-    }\n-\n-    /**\n-     * Remove an attribute modification object. AttributeMod itself indicates how the attribute should be modified. \n-     * \n-     * @param attribute modification object\n-     * @see AttributeMod\n-     * @return true on success\n-     */\n-    public boolean removeAttributeToBeUpdated(AttributeMod attribute) {\n-        return attributesToBeUpdated.remove(attribute);\n-    }\n-\n-    public Set<AttributeMod> getAttributesToBeUpdated() {\n-        return attributesToBeUpdated;\n-    }\n-\n-    public void setAttributesToBeUpdated(Set<AttributeMod> attributesToBeUpdated) {\n-        this.attributesToBeUpdated = attributesToBeUpdated;\n-    }\n-\n-    /**\n-     * Add an attribute modification object. AttributeMod itself indicates how the attribute should be modified. \n-     * \n-     * @param attribute modification object\n-     * @see AttributeMod\n-     * @return true on success\n-     */\n-    public boolean addDerivedAttributeToBeAdded(String derivedAttribute) {\n-        return derivedAttributesToBeAdded.add(derivedAttribute);\n-    }\n-\n-    /**\n-     * Add a derivedattribute. Value is calculated by its definition. \n-     * \n-     * @param derivedAttribute\n-     * @return true on success\n-     */\n-    public boolean removeDerivedAttributeToBeAdded(String derivedAttribute) {\n-        return derivedAttributesToBeAdded.remove(derivedAttribute);\n-    }\n-\n-    public Set<String> getDerivedAttributesToBeAdded() {\n-        return derivedAttributesToBeAdded;\n-    }\n-\n-    public void setDerivedAttributesToBeAdded(Set<String> derivedAttributesToBeAdded) {\n-\n-        this.derivedAttributesToBeAdded = derivedAttributesToBeAdded;\n-    }\n-\n-    public boolean addDerivedAttributeToBeRemoved(String derivedAttribute) {\n-        return derivedAttributesToBeRemoved.add(derivedAttribute);\n-    }\n-\n-    public boolean removeDerivedAttributeToBeRemoved(String derivedAttribute) {\n-        return derivedAttributesToBeRemoved.remove(derivedAttribute);\n-    }\n-\n-    public Set<String> getDerivedAttributesToBeRemoved() {\n-        return derivedAttributesToBeRemoved;\n-    }\n-\n-    public void setDerivedAttributesToBeRemoved(Set<String> derivedAttributesToBeRemoved) {\n-\n-        this.derivedAttributesToBeRemoved = derivedAttributesToBeRemoved;\n-    }\n-\n-    public Set<String> getVirtualAttributesToBeRemoved() {\n-        return virtualAttributesToBeRemoved;\n-    }\n-\n-    public boolean addVirtualAttributeToBeRemoved(String virtualAttributeToBeRemoved) {\n-\n-        return virtualAttributesToBeRemoved.add(virtualAttributeToBeRemoved);\n-    }\n-\n-    public boolean removeVirtualAttributeToBeRemoved(String virtualAttributeToBeRemoved) {\n-\n-        return virtualAttributesToBeRemoved.remove(virtualAttributeToBeRemoved);\n-    }\n-\n-    public void setVirtualAttributesToBeRemoved(Set<String> virtualAttributesToBeRemoved) {\n-\n-        this.virtualAttributesToBeRemoved = virtualAttributesToBeRemoved;\n-    }\n-\n-    public boolean addVirtualAttributeToBeUpdated(AttributeMod virtualAttributeToBeUpdated) {\n-\n-        return virtualAttributesToBeUpdated.add(virtualAttributeToBeUpdated);\n-    }\n-\n-    public boolean removeVirtualAttributeToBeUpdated(AttributeMod virtualAttributeToBeUpdated) {\n-\n-        return virtualAttributesToBeUpdated.remove(virtualAttributeToBeUpdated);\n-    }\n-\n-    public Set<AttributeMod> getVirtualAttributesToBeUpdated() {\n-        return virtualAttributesToBeUpdated;\n-    }\n-\n-    public void setVirtualAttributesToBeUpdated(Set<AttributeMod> virtualAttributesToBeUpdated) {\n-\n-        this.virtualAttributesToBeUpdated = virtualAttributesToBeUpdated;\n-    }\n-\n-    public boolean addResourceToBeAdded(String resource) {\n-        return resourcesToBeAdded.add(resource);\n-    }\n-\n-    public boolean removeResourceToBeAdded(String resource) {\n-        return resourcesToBeAdded.remove(resource);\n-    }\n-\n-    public Set<String> getResourcesToBeAdded() {\n-        return resourcesToBeAdded;\n-    }\n-\n-    public void setResourcesToBeAdded(Set<String> resourcesToBeAdded) {\n-        this.resourcesToBeAdded = resourcesToBeAdded;\n-    }\n-\n-    public boolean addResourceToBeRemoved(String resource) {\n-        return resourcesToBeRemoved.add(resource);\n-    }\n-\n-    public boolean removeResourceToBeRemoved(String resource) {\n-        return resourcesToBeRemoved.remove(resource);\n-    }\n-\n-    public Set<String> getResourcesToBeRemoved() {\n-        return resourcesToBeRemoved;\n-    }\n-\n-    public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\n-        this.resourcesToBeRemoved = resourcesToBeRemoved;\n-    }\n-\n-    /**\n-     * @return true is all backing Sets are empty.\n-     */\n-    public boolean isEmpty() {\n-        return attributesToBeUpdated.isEmpty() && attributesToBeRemoved.isEmpty()\n-                && derivedAttributesToBeAdded.isEmpty() && derivedAttributesToBeRemoved.isEmpty()\n-                && virtualAttributesToBeUpdated.isEmpty() && virtualAttributesToBeRemoved.isEmpty()\n-                && resourcesToBeAdded.isEmpty() && resourcesToBeRemoved.isEmpty();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * Abstract base class for objects that can have attributes removed, added or updated.\r\n+ * \r\n+ * Attributes can be regular attributes, derived attributes, virtual attributes and resources.\r\n+ */\r\n+public abstract class AbstractAttributableMod extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 3241118574016303198L;\r\n+    protected long id;\r\n+    protected Set<AttributeMod> attributesToBeUpdated;\r\n+    protected Set<String> attributesToBeRemoved;\r\n+    protected Set<String> derivedAttributesToBeAdded;\r\n+    protected Set<String> derivedAttributesToBeRemoved;\r\n+    protected Set<AttributeMod> virtualAttributesToBeUpdated;\r\n+    protected Set<String> virtualAttributesToBeRemoved;\r\n+    protected Set<String> resourcesToBeAdded;\r\n+    protected Set<String> resourcesToBeRemoved;\r\n+\r\n+    /**\r\n+     * All attributes are initialized to empty sets.\r\n+     */\r\n+    public AbstractAttributableMod() {\r\n+        super();\r\n+\r\n+        attributesToBeUpdated = new HashSet<AttributeMod>();\r\n+        attributesToBeRemoved = new HashSet<String>();\r\n+        derivedAttributesToBeAdded = new HashSet<String>();\r\n+        derivedAttributesToBeRemoved = new HashSet<String>();\r\n+        virtualAttributesToBeUpdated = new HashSet<AttributeMod>();\r\n+        virtualAttributesToBeRemoved = new HashSet<String>();\r\n+        resourcesToBeAdded = new HashSet<String>();\r\n+        resourcesToBeRemoved = new HashSet<String>();\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    /**\r\n+     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object\r\n+     * \r\n+     * @param name (schema) of attribute to be removed.\r\n+     * @return true on success. \r\n+     */\r\n+    public boolean addAttributeToBeRemoved(String attribute) {\r\n+        return attributesToBeRemoved.add(attribute);\r\n+    }\r\n+\r\n+    /**\r\n+     * Convenience method for removing entire attribute instead removing each value in an AttributeMod object\r\n+     * \r\n+     * @param name (schema) of attribute to be removed.\r\n+     * @return true on success. \r\n+     */\r\n+    public boolean removeAttributeToBeRemoved(String attribute) {\r\n+        return attributesToBeRemoved.remove(attribute);\r\n+    }\r\n+\r\n+    public Set<String> getAttributesToBeRemoved() {\r\n+        return attributesToBeRemoved;\r\n+    }\r\n+\r\n+    public void setAttributesToBeRemoved(Set<String> attributesToBeRemoved) {\r\n+        this.attributesToBeRemoved = attributesToBeRemoved;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add an attribute modification object. AttributeMod itself indicates how the attribute should be modified. \r\n+     * \r\n+     * @param attribute modification object\r\n+     * @see AttributeMod\r\n+     * @return true on success\r\n+     */\r\n+    public boolean addAttributeToBeUpdated(AttributeMod attribute) {\r\n+        return attributesToBeUpdated.add(attribute);\r\n+    }\r\n+\r\n+    /**\r\n+     * Remove an attribute modification object. AttributeMod itself indicates how the attribute should be modified. \r\n+     * \r\n+     * @param attribute modification object\r\n+     * @see AttributeMod\r\n+     * @return true on success\r\n+     */\r\n+    public boolean removeAttributeToBeUpdated(AttributeMod attribute) {\r\n+        return attributesToBeUpdated.remove(attribute);\r\n+    }\r\n+\r\n+    public Set<AttributeMod> getAttributesToBeUpdated() {\r\n+        return attributesToBeUpdated;\r\n+    }\r\n+\r\n+    public void setAttributesToBeUpdated(Set<AttributeMod> attributesToBeUpdated) {\r\n+        this.attributesToBeUpdated = attributesToBeUpdated;\r\n+    }\r\n+\r\n+    /**\r\n+     * Add an attribute modification object. AttributeMod itself indicates how the attribute should be modified. \r\n+     * \r\n+     * @param attribute modification object\r\n+     * @see AttributeMod\r\n+     * @return true on success\r\n+     */\r\n+    public boolean addDerivedAttributeToBeAdded(String derivedAttribute) {\r\n+        return derivedAttributesToBeAdded.add(derivedAttribute);\r\n+    }\r\n+\r\n+    /**\r\n+     * Add a derivedattribute. Value is calculated by its definition. \r\n+     * \r\n+     * @param derivedAttribute\r\n+     * @return true on success\r\n+     */\r\n+    public boolean removeDerivedAttributeToBeAdded(String derivedAttribute) {\r\n+        return derivedAttributesToBeAdded.remove(derivedAttribute);\r\n+    }\r\n+\r\n+    public Set<String> getDerivedAttributesToBeAdded() {\r\n+        return derivedAttributesToBeAdded;\r\n+    }\r\n+\r\n+    public void setDerivedAttributesToBeAdded(Set<String> derivedAttributesToBeAdded) {\r\n+\r\n+        this.derivedAttributesToBeAdded = derivedAttributesToBeAdded;\r\n+    }\r\n+\r\n+    public boolean addDerivedAttributeToBeRemoved(String derivedAttribute) {\r\n+        return derivedAttributesToBeRemoved.add(derivedAttribute);\r\n+    }\r\n+\r\n+    public boolean removeDerivedAttributeToBeRemoved(String derivedAttribute) {\r\n+        return derivedAttributesToBeRemoved.remove(derivedAttribute);\r\n+    }\r\n+\r\n+    public Set<String> getDerivedAttributesToBeRemoved() {\r\n+        return derivedAttributesToBeRemoved;\r\n+    }\r\n+\r\n+    public void setDerivedAttributesToBeRemoved(Set<String> derivedAttributesToBeRemoved) {\r\n+\r\n+        this.derivedAttributesToBeRemoved = derivedAttributesToBeRemoved;\r\n+    }\r\n+\r\n+    public Set<String> getVirtualAttributesToBeRemoved() {\r\n+        return virtualAttributesToBeRemoved;\r\n+    }\r\n+\r\n+    public boolean addVirtualAttributeToBeRemoved(String virtualAttributeToBeRemoved) {\r\n+\r\n+        return virtualAttributesToBeRemoved.add(virtualAttributeToBeRemoved);\r\n+    }\r\n+\r\n+    public boolean removeVirtualAttributeToBeRemoved(String virtualAttributeToBeRemoved) {\r\n+\r\n+        return virtualAttributesToBeRemoved.remove(virtualAttributeToBeRemoved);\r\n+    }\r\n+\r\n+    public void setVirtualAttributesToBeRemoved(Set<String> virtualAttributesToBeRemoved) {\r\n+\r\n+        this.virtualAttributesToBeRemoved = virtualAttributesToBeRemoved;\r\n+    }\r\n+\r\n+    public boolean addVirtualAttributeToBeUpdated(AttributeMod virtualAttributeToBeUpdated) {\r\n+\r\n+        return virtualAttributesToBeUpdated.add(virtualAttributeToBeUpdated);\r\n+    }\r\n+\r\n+    public boolean removeVirtualAttributeToBeUpdated(AttributeMod virtualAttributeToBeUpdated) {\r\n+\r\n+        return virtualAttributesToBeUpdated.remove(virtualAttributeToBeUpdated);\r\n+    }\r\n+\r\n+    public Set<AttributeMod> getVirtualAttributesToBeUpdated() {\r\n+        return virtualAttributesToBeUpdated;\r\n+    }\r\n+\r\n+    public void setVirtualAttributesToBeUpdated(Set<AttributeMod> virtualAttributesToBeUpdated) {\r\n+\r\n+        this.virtualAttributesToBeUpdated = virtualAttributesToBeUpdated;\r\n+    }\r\n+\r\n+    public boolean addResourceToBeAdded(String resource) {\r\n+        return resourcesToBeAdded.add(resource);\r\n+    }\r\n+\r\n+    public boolean removeResourceToBeAdded(String resource) {\r\n+        return resourcesToBeAdded.remove(resource);\r\n+    }\r\n+\r\n+    public Set<String> getResourcesToBeAdded() {\r\n+        return resourcesToBeAdded;\r\n+    }\r\n+\r\n+    public void setResourcesToBeAdded(Set<String> resourcesToBeAdded) {\r\n+        this.resourcesToBeAdded = resourcesToBeAdded;\r\n+    }\r\n+\r\n+    public boolean addResourceToBeRemoved(String resource) {\r\n+        return resourcesToBeRemoved.add(resource);\r\n+    }\r\n+\r\n+    public boolean removeResourceToBeRemoved(String resource) {\r\n+        return resourcesToBeRemoved.remove(resource);\r\n+    }\r\n+\r\n+    public Set<String> getResourcesToBeRemoved() {\r\n+        return resourcesToBeRemoved;\r\n+    }\r\n+\r\n+    public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\r\n+        this.resourcesToBeRemoved = resourcesToBeRemoved;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return true is all backing Sets are empty.\r\n+     */\r\n+    public boolean isEmpty() {\r\n+        return attributesToBeUpdated.isEmpty() && attributesToBeRemoved.isEmpty()\r\n+                && derivedAttributesToBeAdded.isEmpty() && derivedAttributesToBeRemoved.isEmpty()\r\n+                && virtualAttributesToBeUpdated.isEmpty() && virtualAttributesToBeRemoved.isEmpty()\r\n+                && resourcesToBeAdded.isEmpty() && resourcesToBeRemoved.isEmpty();\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/mod/AbstractAttributableMod.java"},{"sha":"c449a3e73baa9c858385c075b8ff182c91398b7f","filename":"common/src/main/java/org/apache/syncope/common/mod/AttributeMod.java","status":"renamed","additions":87,"deletions":87,"changes":174,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FAttributeMod.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,87 +1,87 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.mod;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public class AttributeMod extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -913573979137431406L;\n-\n-    private String schema;\n-\n-    private List<String> valuesToBeAdded;\n-\n-    private List<String> valuesToBeRemoved;\n-\n-    public AttributeMod() {\n-        super();\n-\n-        valuesToBeAdded = new ArrayList<String>();\n-        valuesToBeRemoved = new ArrayList<String>();\n-    }\n-\n-    public String getSchema() {\n-        return schema;\n-    }\n-\n-    public void setSchema(String schema) {\n-        this.schema = schema;\n-    }\n-\n-    public boolean addValueToBeAdded(String value) {\n-        return valuesToBeAdded.add(value);\n-    }\n-\n-    public boolean removeValueToBeAdded(String value) {\n-        return valuesToBeAdded.remove(value);\n-    }\n-\n-    public List<String> getValuesToBeAdded() {\n-        return valuesToBeAdded;\n-    }\n-\n-    public void setValuesToBeAdded(List<String> valuesToBeAdded) {\n-        this.valuesToBeAdded = valuesToBeAdded;\n-    }\n-\n-    public boolean addValueToBeRemoved(String value) {\n-        return valuesToBeRemoved.add(value);\n-    }\n-\n-    public boolean removeValueToBeRemoved(String value) {\n-        return valuesToBeRemoved.remove(value);\n-    }\n-\n-    public List<String> getValuesToBeRemoved() {\n-        return valuesToBeRemoved;\n-    }\n-\n-    public void setValuesToBeRemoved(List<String> valuesToBeRemoved) {\n-        this.valuesToBeRemoved = valuesToBeRemoved;\n-    }\n-\n-    @JsonIgnore\n-    public boolean isEmpty() {\n-        return valuesToBeAdded.isEmpty() && valuesToBeRemoved.isEmpty();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public class AttributeMod extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -913573979137431406L;\r\n+\r\n+    private String schema;\r\n+\r\n+    private List<String> valuesToBeAdded;\r\n+\r\n+    private List<String> valuesToBeRemoved;\r\n+\r\n+    public AttributeMod() {\r\n+        super();\r\n+\r\n+        valuesToBeAdded = new ArrayList<String>();\r\n+        valuesToBeRemoved = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public String getSchema() {\r\n+        return schema;\r\n+    }\r\n+\r\n+    public void setSchema(String schema) {\r\n+        this.schema = schema;\r\n+    }\r\n+\r\n+    public boolean addValueToBeAdded(String value) {\r\n+        return valuesToBeAdded.add(value);\r\n+    }\r\n+\r\n+    public boolean removeValueToBeAdded(String value) {\r\n+        return valuesToBeAdded.remove(value);\r\n+    }\r\n+\r\n+    public List<String> getValuesToBeAdded() {\r\n+        return valuesToBeAdded;\r\n+    }\r\n+\r\n+    public void setValuesToBeAdded(List<String> valuesToBeAdded) {\r\n+        this.valuesToBeAdded = valuesToBeAdded;\r\n+    }\r\n+\r\n+    public boolean addValueToBeRemoved(String value) {\r\n+        return valuesToBeRemoved.add(value);\r\n+    }\r\n+\r\n+    public boolean removeValueToBeRemoved(String value) {\r\n+        return valuesToBeRemoved.remove(value);\r\n+    }\r\n+\r\n+    public List<String> getValuesToBeRemoved() {\r\n+        return valuesToBeRemoved;\r\n+    }\r\n+\r\n+    public void setValuesToBeRemoved(List<String> valuesToBeRemoved) {\r\n+        this.valuesToBeRemoved = valuesToBeRemoved;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public boolean isEmpty() {\r\n+        return valuesToBeAdded.isEmpty() && valuesToBeRemoved.isEmpty();\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/mod/AttributeMod.java"},{"sha":"d5b6c84d2860a2507d88c99ce76b40443ea57294","filename":"common/src/main/java/org/apache/syncope/common/mod/MembershipMod.java","status":"renamed","additions":82,"deletions":82,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FMembershipMod.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,82 +1,82 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.mod;\n-\n-import java.util.Collections;\n-import java.util.Set;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-\n-public class MembershipMod extends AbstractAttributableMod {\n-\n-    private static final long serialVersionUID = 2511869129977331525L;\n-\n-    private long role;\n-\n-    public long getRole() {\n-        return role;\n-    }\n-\n-    public void setRole(long role) {\n-        this.role = role;\n-    }\n-\n-    @Override\n-    public boolean addResourceToBeAdded(String resource) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean addResourceToBeRemoved(String resource) {\n-        return false;\n-    }\n-\n-    @Override\n-    public Set<String> getResourcesToBeAdded() {\n-        return Collections.emptySet();\n-    }\n-\n-    @Override\n-    public Set<String> getResourcesToBeRemoved() {\n-        return Collections.emptySet();\n-    }\n-\n-    @Override\n-    public boolean removeResourceToBeAdded(String resource) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean removeResourceToBeRemoved(String resource) {\n-        return false;\n-    }\n-\n-    @Override\n-    public void setResourcesToBeAdded(Set<String> resourcesToBeAdded) {\n-    }\n-\n-    @Override\n-    public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\n-    }\n-\n-    @JsonIgnore\n-    @Override\n-    public boolean isEmpty() {\n-        return super.isEmpty() && role == 0;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.Set;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public class MembershipMod extends AbstractAttributableMod {\r\n+\r\n+    private static final long serialVersionUID = 2511869129977331525L;\r\n+\r\n+    private long role;\r\n+\r\n+    public long getRole() {\r\n+        return role;\r\n+    }\r\n+\r\n+    public void setRole(long role) {\r\n+        this.role = role;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean addResourceToBeAdded(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean addResourceToBeRemoved(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<String> getResourcesToBeAdded() {\r\n+        return Collections.emptySet();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<String> getResourcesToBeRemoved() {\r\n+        return Collections.emptySet();\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean removeResourceToBeAdded(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean removeResourceToBeRemoved(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setResourcesToBeAdded(Set<String> resourcesToBeAdded) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setResourcesToBeRemoved(Set<String> resourcesToBeRemoved) {\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    @Override\r\n+    public boolean isEmpty() {\r\n+        return super.isEmpty() && role == 0;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/mod/MembershipMod.java"},{"sha":"356441065496308df8fa7402d1943235d543d5d4","filename":"common/src/main/java/org/apache/syncope/common/mod/ReferenceMod.java","status":"renamed","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FReferenceMod.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,49 +1,49 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.mod;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-/**\n- * This class is used to specify the willing to modify an external reference id. Use 'null' ReferenceMod to keep the\n- * current reference id; use a ReferenceMod with a null id to try to reset the reference id; use a ReferenceMod with a\n- * not null id to specify a new reference id.\n- */\n-public class ReferenceMod extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -4188817853738067677L;\n-\n-    private Long id;\n-\n-    public ReferenceMod() {\n-        this.id = null;\n-    }\n-\n-    public ReferenceMod(final Long id) {\n-        this.id = id;\n-    }\n-\n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * This class is used to specify the willing to modify an external reference id. Use 'null' ReferenceMod to keep the\r\n+ * current reference id; use a ReferenceMod with a null id to try to reset the reference id; use a ReferenceMod with a\r\n+ * not null id to specify a new reference id.\r\n+ */\r\n+public class ReferenceMod extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -4188817853738067677L;\r\n+\r\n+    private Long id;\r\n+\r\n+    public ReferenceMod() {\r\n+        this.id = null;\r\n+    }\r\n+\r\n+    public ReferenceMod(final Long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Long id) {\r\n+        this.id = id;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/mod/ReferenceMod.java"},{"sha":"98ddf2ecda511dce755dc424d180d5ca89bb273b","filename":"common/src/main/java/org/apache/syncope/common/mod/RoleMod.java","status":"renamed","additions":156,"deletions":156,"changes":312,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FRoleMod.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,156 +1,156 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.mod;\n-\n-import java.util.List;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-\n-public class RoleMod extends AbstractAttributableMod {\n-\n-    private static final long serialVersionUID = 7455805264680210747L;\n-\n-    private String name;\n-\n-    private ReferenceMod userOwner;\n-\n-    private ReferenceMod roleOwner;\n-\n-    private Boolean inheritOwner;\n-\n-    private Boolean inheritAttributes;\n-\n-    private Boolean inheritDerivedAttributes;\n-\n-    private Boolean inheritVirtualAttributes;\n-\n-    private Boolean inheritAccountPolicy;\n-\n-    private Boolean inheritPasswordPolicy;\n-\n-    private List<String> entitlements;\n-\n-    private ReferenceMod passwordPolicy;\n-\n-    private ReferenceMod accountPolicy;\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-\n-    public ReferenceMod getUserOwner() {\n-        return userOwner;\n-    }\n-\n-    public void setUserOwner(ReferenceMod userOwner) {\n-        this.userOwner = userOwner;\n-    }\n-\n-    public ReferenceMod getRoleOwner() {\n-        return roleOwner;\n-    }\n-\n-    public void setRoleOwner(ReferenceMod roleOwner) {\n-        this.roleOwner = roleOwner;\n-    }\n-\n-    public Boolean getInheritOwner() {\n-        return inheritOwner;\n-    }\n-\n-    public void setInheritOwner(Boolean inheritOwner) {\n-        this.inheritOwner = inheritOwner;\n-    }\n-\n-    public Boolean getInheritAttributes() {\n-        return inheritAttributes;\n-    }\n-\n-    public void setInheritAttributes(final Boolean inheritAttributes) {\n-        this.inheritAttributes = inheritAttributes;\n-    }\n-\n-    public Boolean getInheritDerivedAttributes() {\n-        return inheritDerivedAttributes;\n-    }\n-\n-    public void setInheritDerivedAttributes(final Boolean inheritDerivedAttributes) {\n-        this.inheritDerivedAttributes = inheritDerivedAttributes;\n-    }\n-\n-    public Boolean getInheritVirtualAttributes() {\n-        return inheritVirtualAttributes;\n-    }\n-\n-    public void setInheritVirtualAttributes(final Boolean inheritVirtualAttributes) {\n-        this.inheritVirtualAttributes = inheritVirtualAttributes;\n-    }\n-\n-    public List<String> getEntitlements() {\n-        return entitlements;\n-    }\n-\n-    public void setEntitlements(final List<String> entitlements) {\n-        this.entitlements = entitlements;\n-    }\n-\n-    public ReferenceMod getPasswordPolicy() {\n-        return passwordPolicy;\n-    }\n-\n-    public void setPasswordPolicy(final ReferenceMod passwordPolicy) {\n-        this.passwordPolicy = passwordPolicy;\n-    }\n-\n-    public Boolean getInheritPasswordPolicy() {\n-        return inheritPasswordPolicy;\n-    }\n-\n-    public void setInheritPasswordPolicy(final Boolean inheritPasswordPolicy) {\n-        this.inheritPasswordPolicy = inheritPasswordPolicy;\n-    }\n-\n-    public ReferenceMod getAccountPolicy() {\n-        return accountPolicy;\n-    }\n-\n-    public void setAccountPolicy(final ReferenceMod accountPolicy) {\n-        this.accountPolicy = accountPolicy;\n-    }\n-\n-    public Boolean getInheritAccountPolicy() {\n-        return inheritAccountPolicy;\n-    }\n-\n-    public void setInheritAccountPolicy(final Boolean inheritAccountPolicy) {\n-        this.inheritAccountPolicy = inheritAccountPolicy;\n-    }\n-\n-    @JsonIgnore\n-    @Override\n-    public boolean isEmpty() {\n-        return super.isEmpty() && name == null && userOwner == null && roleOwner == null\n-                && inheritOwner == null && inheritAccountPolicy == null && inheritPasswordPolicy == null\n-                && inheritAttributes == null && inheritDerivedAttributes == null && inheritVirtualAttributes == null\n-                && accountPolicy == null && passwordPolicy == null && (entitlements == null || entitlements.isEmpty());\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.List;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public class RoleMod extends AbstractAttributableMod {\r\n+\r\n+    private static final long serialVersionUID = 7455805264680210747L;\r\n+\r\n+    private String name;\r\n+\r\n+    private ReferenceMod userOwner;\r\n+\r\n+    private ReferenceMod roleOwner;\r\n+\r\n+    private Boolean inheritOwner;\r\n+\r\n+    private Boolean inheritAttributes;\r\n+\r\n+    private Boolean inheritDerivedAttributes;\r\n+\r\n+    private Boolean inheritVirtualAttributes;\r\n+\r\n+    private Boolean inheritAccountPolicy;\r\n+\r\n+    private Boolean inheritPasswordPolicy;\r\n+\r\n+    private List<String> entitlements;\r\n+\r\n+    private ReferenceMod passwordPolicy;\r\n+\r\n+    private ReferenceMod accountPolicy;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public ReferenceMod getUserOwner() {\r\n+        return userOwner;\r\n+    }\r\n+\r\n+    public void setUserOwner(ReferenceMod userOwner) {\r\n+        this.userOwner = userOwner;\r\n+    }\r\n+\r\n+    public ReferenceMod getRoleOwner() {\r\n+        return roleOwner;\r\n+    }\r\n+\r\n+    public void setRoleOwner(ReferenceMod roleOwner) {\r\n+        this.roleOwner = roleOwner;\r\n+    }\r\n+\r\n+    public Boolean getInheritOwner() {\r\n+        return inheritOwner;\r\n+    }\r\n+\r\n+    public void setInheritOwner(Boolean inheritOwner) {\r\n+        this.inheritOwner = inheritOwner;\r\n+    }\r\n+\r\n+    public Boolean getInheritAttributes() {\r\n+        return inheritAttributes;\r\n+    }\r\n+\r\n+    public void setInheritAttributes(final Boolean inheritAttributes) {\r\n+        this.inheritAttributes = inheritAttributes;\r\n+    }\r\n+\r\n+    public Boolean getInheritDerivedAttributes() {\r\n+        return inheritDerivedAttributes;\r\n+    }\r\n+\r\n+    public void setInheritDerivedAttributes(final Boolean inheritDerivedAttributes) {\r\n+        this.inheritDerivedAttributes = inheritDerivedAttributes;\r\n+    }\r\n+\r\n+    public Boolean getInheritVirtualAttributes() {\r\n+        return inheritVirtualAttributes;\r\n+    }\r\n+\r\n+    public void setInheritVirtualAttributes(final Boolean inheritVirtualAttributes) {\r\n+        this.inheritVirtualAttributes = inheritVirtualAttributes;\r\n+    }\r\n+\r\n+    public List<String> getEntitlements() {\r\n+        return entitlements;\r\n+    }\r\n+\r\n+    public void setEntitlements(final List<String> entitlements) {\r\n+        this.entitlements = entitlements;\r\n+    }\r\n+\r\n+    public ReferenceMod getPasswordPolicy() {\r\n+        return passwordPolicy;\r\n+    }\r\n+\r\n+    public void setPasswordPolicy(final ReferenceMod passwordPolicy) {\r\n+        this.passwordPolicy = passwordPolicy;\r\n+    }\r\n+\r\n+    public Boolean getInheritPasswordPolicy() {\r\n+        return inheritPasswordPolicy;\r\n+    }\r\n+\r\n+    public void setInheritPasswordPolicy(final Boolean inheritPasswordPolicy) {\r\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\r\n+    }\r\n+\r\n+    public ReferenceMod getAccountPolicy() {\r\n+        return accountPolicy;\r\n+    }\r\n+\r\n+    public void setAccountPolicy(final ReferenceMod accountPolicy) {\r\n+        this.accountPolicy = accountPolicy;\r\n+    }\r\n+\r\n+    public Boolean getInheritAccountPolicy() {\r\n+        return inheritAccountPolicy;\r\n+    }\r\n+\r\n+    public void setInheritAccountPolicy(final Boolean inheritAccountPolicy) {\r\n+        this.inheritAccountPolicy = inheritAccountPolicy;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    @Override\r\n+    public boolean isEmpty() {\r\n+        return super.isEmpty() && name == null && userOwner == null && roleOwner == null\r\n+                && inheritOwner == null && inheritAccountPolicy == null && inheritPasswordPolicy == null\r\n+                && inheritAttributes == null && inheritDerivedAttributes == null && inheritVirtualAttributes == null\r\n+                && accountPolicy == null && passwordPolicy == null && (entitlements == null || entitlements.isEmpty());\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/mod/RoleMod.java"},{"sha":"c18fc4ed8595bd38e855fac3b7599ef205f65c1d","filename":"common/src/main/java/org/apache/syncope/common/mod/StatusMod.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FStatusMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FStatusMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FStatusMod.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.client.mod;\r\n+package org.apache.syncope.common.mod;\r\n \r\n import java.util.HashSet;\r\n import java.util.Set;\r\n@@ -26,7 +26,7 @@\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.client.AbstractBaseBean;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n @XmlType\r\n @XmlRootElement\r","previous_filename":"client/src/main/java/org/apache/syncope/client/mod/StatusMod.java"},{"sha":"fe9499a784728a3e3769930ed4d23f939e131910","filename":"common/src/main/java/org/apache/syncope/common/mod/UserMod.java","status":"renamed","additions":98,"deletions":98,"changes":196,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fmod%2FUserMod.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,98 +1,98 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.mod;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-\n-public class UserMod extends AbstractAttributableMod {\n-\n-    private static final long serialVersionUID = 3081848906558106204L;\n-\n-    private String password;\n-\n-    private String username;\n-\n-    private Set<MembershipMod> membershipsToBeAdded;\n-\n-    private Set<Long> membershipsToBeRemoved;\n-\n-    public UserMod() {\n-        super();\n-\n-        membershipsToBeAdded = new HashSet<MembershipMod>();\n-        membershipsToBeRemoved = new HashSet<Long>();\n-    }\n-\n-    public boolean addMembershipToBeAdded(MembershipMod membershipMod) {\n-        return membershipsToBeAdded.add(membershipMod);\n-    }\n-\n-    public boolean removeMembershipToBeAdded(MembershipMod membershipMod) {\n-        return membershipsToBeAdded.remove(membershipMod);\n-    }\n-\n-    public Set<MembershipMod> getMembershipsToBeAdded() {\n-        return membershipsToBeAdded;\n-    }\n-\n-    public void setMembershipsToBeAdded(Set<MembershipMod> membershipMods) {\n-        this.membershipsToBeAdded = membershipMods;\n-    }\n-\n-    public String getUsername() {\n-        return username;\n-    }\n-\n-    public void setUsername(String username) {\n-        this.username = username;\n-    }\n-\n-    public String getPassword() {\n-        return password;\n-    }\n-\n-    public void setPassword(String password) {\n-        this.password = password;\n-    }\n-\n-    public boolean addMembershipToBeRemoved(Long membershipToBeRemoved) {\n-        return membershipsToBeRemoved.add(membershipToBeRemoved);\n-    }\n-\n-    public boolean removeMembershipToBeRemoved(Long membershipToBeRemoved) {\n-        return membershipsToBeRemoved.remove(membershipToBeRemoved);\n-    }\n-\n-    public Set<Long> getMembershipsToBeRemoved() {\n-        return membershipsToBeRemoved;\n-    }\n-\n-    public void setMembershipsToBeRemoved(Set<Long> membershipsToBeRemoved) {\n-        this.membershipsToBeRemoved = membershipsToBeRemoved;\n-    }\n-\n-    @JsonIgnore\n-    @Override\n-    public boolean isEmpty() {\n-        return super.isEmpty() && password == null && username == null && membershipsToBeAdded.isEmpty()\n-                && membershipsToBeRemoved.isEmpty();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.mod;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public class UserMod extends AbstractAttributableMod {\r\n+\r\n+    private static final long serialVersionUID = 3081848906558106204L;\r\n+\r\n+    private String password;\r\n+\r\n+    private String username;\r\n+\r\n+    private Set<MembershipMod> membershipsToBeAdded;\r\n+\r\n+    private Set<Long> membershipsToBeRemoved;\r\n+\r\n+    public UserMod() {\r\n+        super();\r\n+\r\n+        membershipsToBeAdded = new HashSet<MembershipMod>();\r\n+        membershipsToBeRemoved = new HashSet<Long>();\r\n+    }\r\n+\r\n+    public boolean addMembershipToBeAdded(MembershipMod membershipMod) {\r\n+        return membershipsToBeAdded.add(membershipMod);\r\n+    }\r\n+\r\n+    public boolean removeMembershipToBeAdded(MembershipMod membershipMod) {\r\n+        return membershipsToBeAdded.remove(membershipMod);\r\n+    }\r\n+\r\n+    public Set<MembershipMod> getMembershipsToBeAdded() {\r\n+        return membershipsToBeAdded;\r\n+    }\r\n+\r\n+    public void setMembershipsToBeAdded(Set<MembershipMod> membershipMods) {\r\n+        this.membershipsToBeAdded = membershipMods;\r\n+    }\r\n+\r\n+    public String getUsername() {\r\n+        return username;\r\n+    }\r\n+\r\n+    public void setUsername(String username) {\r\n+        this.username = username;\r\n+    }\r\n+\r\n+    public String getPassword() {\r\n+        return password;\r\n+    }\r\n+\r\n+    public void setPassword(String password) {\r\n+        this.password = password;\r\n+    }\r\n+\r\n+    public boolean addMembershipToBeRemoved(Long membershipToBeRemoved) {\r\n+        return membershipsToBeRemoved.add(membershipToBeRemoved);\r\n+    }\r\n+\r\n+    public boolean removeMembershipToBeRemoved(Long membershipToBeRemoved) {\r\n+        return membershipsToBeRemoved.remove(membershipToBeRemoved);\r\n+    }\r\n+\r\n+    public Set<Long> getMembershipsToBeRemoved() {\r\n+        return membershipsToBeRemoved;\r\n+    }\r\n+\r\n+    public void setMembershipsToBeRemoved(Set<Long> membershipsToBeRemoved) {\r\n+        this.membershipsToBeRemoved = membershipsToBeRemoved;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    @Override\r\n+    public boolean isEmpty() {\r\n+        return super.isEmpty() && password == null && username == null && membershipsToBeAdded.isEmpty()\r\n+                && membershipsToBeRemoved.isEmpty();\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/mod/UserMod.java"},{"sha":"7c230ad0c1d54125ce2ee821916267a03ce76020","filename":"common/src/main/java/org/apache/syncope/common/report/AbstractReportletConf.java","status":"renamed","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FAbstractReportletConf.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,46 +1,46 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.report;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\n-\n-    private static final long serialVersionUID = -6130008602014516608L;\n-\n-    private String name;\n-\n-    public AbstractReportletConf() {\n-        this(\"\");\n-        setName(getClass().getName());\n-    }\n-\n-    public AbstractReportletConf(final String name) {\n-        this.name = name;\n-    }\n-\n-    @Override\n-    public final String getName() {\n-        return name;\n-    }\n-\n-    public final void setName(final String name) {\n-        this.name = name;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.report;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public abstract class AbstractReportletConf extends AbstractBaseBean implements ReportletConf {\r\n+\r\n+    private static final long serialVersionUID = -6130008602014516608L;\r\n+\r\n+    private String name;\r\n+\r\n+    public AbstractReportletConf() {\r\n+        this(\"\");\r\n+        setName(getClass().getName());\r\n+    }\r\n+\r\n+    public AbstractReportletConf(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    @Override\r\n+    public final String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public final void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/report/AbstractReportletConf.java"},{"sha":"9db2c264970f98f69971cb67f9234a391ff31309","filename":"common/src/main/java/org/apache/syncope/common/report/ReportletConf.java","status":"renamed","additions":32,"deletions":32,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FReportletConf.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,32 +1,32 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.report;\n-\n-import org.codehaus.jackson.annotate.JsonTypeInfo;\n-\n-@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-public interface ReportletConf {\n-\n-    /**\n-     * Give name of related reportlet instance.\n-     *\n-     * @return name of this reportlet instance\n-     */\n-    String getName();\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.report;\r\n+\r\n+import org.codehaus.jackson.annotate.JsonTypeInfo;\r\n+\r\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n+public interface ReportletConf {\r\n+\r\n+    /**\r\n+     * Give name of related reportlet instance.\r\n+     *\r\n+     * @return name of this reportlet instance\r\n+     */\r\n+    String getName();\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/report/ReportletConf.java"},{"sha":"969955e963f28d64c7cf8a4b6363b57e5bcb8b14","filename":"common/src/main/java/org/apache/syncope/common/report/StaticReportletConf.java","status":"renamed","additions":103,"deletions":102,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,102 +1,103 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.report;\n-\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import org.apache.syncope.types.TraceLevel;\n-\n-public class StaticReportletConf extends AbstractReportletConf {\n-\n-    private static final long serialVersionUID = -4814950086361753689L;\n-\n-    private String stringField;\n-\n-    private Long longField;\n-\n-    private Double doubleField;\n-\n-    private Date dateField;\n-\n-    private TraceLevel traceLevel;\n-\n-    private List<String> listField;\n-\n-    public StaticReportletConf() {\n-        super();\n-    }\n-\n-    public StaticReportletConf(final String name) {\n-        super(name);\n-        listField = new ArrayList<String>();\n-    }\n-\n-    public Date getDateField() {\n-        return dateField == null\n-                ? null\n-                : new Date(dateField.getTime());\n-    }\n-\n-    public void setDateField(Date dateField) {\n-        this.dateField = dateField == null\n-                ? null\n-                : new Date(dateField.getTime());\n-    }\n-\n-    public Double getDoubleField() {\n-        return doubleField;\n-    }\n-\n-    public void setDoubleField(Double doubleField) {\n-        this.doubleField = doubleField;\n-    }\n-\n-    public List<String> getListField() {\n-        return listField;\n-    }\n-\n-    public void setListField(List<String> listField) {\n-        this.listField = listField;\n-    }\n-\n-    public Long getLongField() {\n-        return longField;\n-    }\n-\n-    public void setLongField(Long longField) {\n-        this.longField = longField;\n-    }\n-\n-    public String getStringField() {\n-        return stringField;\n-    }\n-\n-    public void setStringField(String stringField) {\n-        this.stringField = stringField;\n-    }\n-\n-    public TraceLevel getTraceLevel() {\n-        return traceLevel;\n-    }\n-\n-    public void setTraceLevel(TraceLevel traceLevel) {\n-        this.traceLevel = traceLevel;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.report;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.types.TraceLevel;\r\n+\r\n+public class StaticReportletConf extends AbstractReportletConf {\r\n+\r\n+    private static final long serialVersionUID = -4814950086361753689L;\r\n+\r\n+    private String stringField;\r\n+\r\n+    private Long longField;\r\n+\r\n+    private Double doubleField;\r\n+\r\n+    private Date dateField;\r\n+\r\n+    private TraceLevel traceLevel;\r\n+\r\n+    private List<String> listField;\r\n+\r\n+    public StaticReportletConf() {\r\n+        super();\r\n+    }\r\n+\r\n+    public StaticReportletConf(final String name) {\r\n+        super(name);\r\n+        listField = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public Date getDateField() {\r\n+        return dateField == null\r\n+                ? null\r\n+                : new Date(dateField.getTime());\r\n+    }\r\n+\r\n+    public void setDateField(Date dateField) {\r\n+        this.dateField = dateField == null\r\n+                ? null\r\n+                : new Date(dateField.getTime());\r\n+    }\r\n+\r\n+    public Double getDoubleField() {\r\n+        return doubleField;\r\n+    }\r\n+\r\n+    public void setDoubleField(Double doubleField) {\r\n+        this.doubleField = doubleField;\r\n+    }\r\n+\r\n+    public List<String> getListField() {\r\n+        return listField;\r\n+    }\r\n+\r\n+    public void setListField(List<String> listField) {\r\n+        this.listField = listField;\r\n+    }\r\n+\r\n+    public Long getLongField() {\r\n+        return longField;\r\n+    }\r\n+\r\n+    public void setLongField(Long longField) {\r\n+        this.longField = longField;\r\n+    }\r\n+\r\n+    public String getStringField() {\r\n+        return stringField;\r\n+    }\r\n+\r\n+    public void setStringField(String stringField) {\r\n+        this.stringField = stringField;\r\n+    }\r\n+\r\n+    public TraceLevel getTraceLevel() {\r\n+        return traceLevel;\r\n+    }\r\n+\r\n+    public void setTraceLevel(TraceLevel traceLevel) {\r\n+        this.traceLevel = traceLevel;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/report/StaticReportletConf.java"},{"sha":"2e84ac6aa43cbc5cede5af9a16cfb7d14121f9ee","filename":"common/src/main/java/org/apache/syncope/common/report/UserReportletConf.java","status":"renamed","additions":113,"deletions":112,"changes":225,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,112 +1,113 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.report;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.annotation.FormAttributeField;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.types.IntMappingType;\n-\n-public class UserReportletConf extends AbstractReportletConf {\n-\n-    public enum Feature {\n-\n-        id,\n-        username,\n-        workflowId,\n-        status,\n-        creationDate,\n-        lastLoginDate,\n-        changePwdDate,\n-        passwordHistorySize,\n-        failedLoginCount,\n-        memberships,\n-        resources\n-\n-    }\n-\n-    private static final long serialVersionUID = 6602717600064602764L;\n-\n-    private NodeCond matchingCond;\n-\n-    @FormAttributeField(schema = IntMappingType.UserSchema)\n-    private List<String> attrs;\n-\n-    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\n-    private List<String> derAttrs;\n-\n-    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\n-    private List<String> virAttrs;\n-\n-    private List<Feature> features;\n-\n-    public UserReportletConf() {\n-        super();\n-    }\n-\n-    public UserReportletConf(final String name) {\n-        super(name);\n-\n-        attrs = new ArrayList<String>();\n-        derAttrs = new ArrayList<String>();\n-        virAttrs = new ArrayList<String>();\n-        features = new ArrayList<Feature>();\n-    }\n-\n-    public List<String> getAttrs() {\n-        return attrs;\n-    }\n-\n-    public void setAttrs(List<String> attrs) {\n-        this.attrs = attrs;\n-    }\n-\n-    public List<String> getDerAttrs() {\n-        return derAttrs;\n-    }\n-\n-    public void setDerAttrs(List<String> derAttrs) {\n-        this.derAttrs = derAttrs;\n-    }\n-\n-    public List<Feature> getFeatures() {\n-        return features;\n-    }\n-\n-    public void setFeatures(List<Feature> features) {\n-        this.features = features;\n-    }\n-\n-    public NodeCond getMatchingCond() {\n-        return matchingCond;\n-    }\n-\n-    public void setMatchingCond(NodeCond matchingCond) {\n-        this.matchingCond = matchingCond;\n-    }\n-\n-    public List<String> getVirAttrs() {\n-        return virAttrs;\n-    }\n-\n-    public void setVirAttrs(List<String> virAttrs) {\n-        this.virAttrs = virAttrs;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.report;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.annotation.FormAttributeField;\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+\r\n+public class UserReportletConf extends AbstractReportletConf {\r\n+\r\n+    public enum Feature {\r\n+\r\n+        id,\r\n+        username,\r\n+        workflowId,\r\n+        status,\r\n+        creationDate,\r\n+        lastLoginDate,\r\n+        changePwdDate,\r\n+        passwordHistorySize,\r\n+        failedLoginCount,\r\n+        memberships,\r\n+        resources\r\n+\r\n+    }\r\n+\r\n+    private static final long serialVersionUID = 6602717600064602764L;\r\n+\r\n+    private NodeCond matchingCond;\r\n+\r\n+    @FormAttributeField(schema = IntMappingType.UserSchema)\r\n+    private List<String> attrs;\r\n+\r\n+    @FormAttributeField(schema = IntMappingType.UserDerivedSchema)\r\n+    private List<String> derAttrs;\r\n+\r\n+    @FormAttributeField(schema = IntMappingType.UserVirtualSchema)\r\n+    private List<String> virAttrs;\r\n+\r\n+    private List<Feature> features;\r\n+\r\n+    public UserReportletConf() {\r\n+        super();\r\n+    }\r\n+\r\n+    public UserReportletConf(final String name) {\r\n+        super(name);\r\n+\r\n+        attrs = new ArrayList<String>();\r\n+        derAttrs = new ArrayList<String>();\r\n+        virAttrs = new ArrayList<String>();\r\n+        features = new ArrayList<Feature>();\r\n+    }\r\n+\r\n+    public List<String> getAttrs() {\r\n+        return attrs;\r\n+    }\r\n+\r\n+    public void setAttrs(List<String> attrs) {\r\n+        this.attrs = attrs;\r\n+    }\r\n+\r\n+    public List<String> getDerAttrs() {\r\n+        return derAttrs;\r\n+    }\r\n+\r\n+    public void setDerAttrs(List<String> derAttrs) {\r\n+        this.derAttrs = derAttrs;\r\n+    }\r\n+\r\n+    public List<Feature> getFeatures() {\r\n+        return features;\r\n+    }\r\n+\r\n+    public void setFeatures(List<Feature> features) {\r\n+        this.features = features;\r\n+    }\r\n+\r\n+    public NodeCond getMatchingCond() {\r\n+        return matchingCond;\r\n+    }\r\n+\r\n+    public void setMatchingCond(NodeCond matchingCond) {\r\n+        this.matchingCond = matchingCond;\r\n+    }\r\n+\r\n+    public List<String> getVirAttrs() {\r\n+        return virAttrs;\r\n+    }\r\n+\r\n+    public void setVirAttrs(List<String> virAttrs) {\r\n+        this.virAttrs = virAttrs;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/report/UserReportletConf.java"},{"sha":"c91dd0dc277768f12962b034d20d56aacfd5e08c","filename":"common/src/main/java/org/apache/syncope/common/search/AttributableCond.java","status":"renamed","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributableCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributableCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributableCond.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,34 +1,34 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.search;\n-\n-/**\n- * Search condition to be applied when comparing bean field values.\n- */\n-public class AttributableCond extends AttributeCond implements SearchCond {\n-\n-    private static final long serialVersionUID = -1880319220462653955L;\n-\n-    public AttributableCond() {\n-    }\n-\n-    public AttributableCond(final Type conditionType) {\n-        super(conditionType);\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+/**\r\n+ * Search condition to be applied when comparing bean field values.\r\n+ */\r\n+public class AttributableCond extends AttributeCond implements SearchCond {\r\n+\r\n+    private static final long serialVersionUID = -1880319220462653955L;\r\n+\r\n+    public AttributableCond() {\r\n+    }\r\n+\r\n+    public AttributableCond(final Type conditionType) {\r\n+        super(conditionType);\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/search/AttributableCond.java"},{"sha":"a8120103a2ad195c15d9a3c1f58b24e2faa5dcbb","filename":"common/src/main/java/org/apache/syncope/common/search/AttributeCond.java","status":"renamed","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FAttributeCond.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,86 +1,86 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.search;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-/**\n- * Search condition to be applied when comparing attribute values.\n- */\n-public class AttributeCond extends AbstractBaseBean implements SearchCond {\n-\n-    private static final long serialVersionUID = 3275277728404021417L;\n-\n-    public enum Type {\n-\n-        LIKE,\n-        EQ,\n-        GT,\n-        LT,\n-        GE,\n-        LE,\n-        ISNULL,\n-        ISNOTNULL\n-\n-    }\n-\n-    private Type type;\n-\n-    private String schema;\n-\n-    private String expression;\n-\n-    public AttributeCond() {\n-        super();\n-    }\n-\n-    public AttributeCond(final Type conditionType) {\n-        super();\n-        this.type = conditionType;\n-    }\n-\n-    public final String getExpression() {\n-        return expression;\n-    }\n-\n-    public final void setExpression(final String conditionExpression) {\n-        this.expression = conditionExpression;\n-    }\n-\n-    public final String getSchema() {\n-        return schema;\n-    }\n-\n-    public final void setSchema(final String conditionSchema) {\n-        this.schema = conditionSchema;\n-    }\n-\n-    public final Type getType() {\n-        return type;\n-    }\n-\n-    public final void setType(final Type conditionType) {\n-        this.type = conditionType;\n-    }\n-\n-    @Override\n-    public final boolean isValid() {\n-        return type != null && schema != null && (type == Type.ISNULL || type == Type.ISNOTNULL || expression != null);\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * Search condition to be applied when comparing attribute values.\r\n+ */\r\n+public class AttributeCond extends AbstractBaseBean implements SearchCond {\r\n+\r\n+    private static final long serialVersionUID = 3275277728404021417L;\r\n+\r\n+    public enum Type {\r\n+\r\n+        LIKE,\r\n+        EQ,\r\n+        GT,\r\n+        LT,\r\n+        GE,\r\n+        LE,\r\n+        ISNULL,\r\n+        ISNOTNULL\r\n+\r\n+    }\r\n+\r\n+    private Type type;\r\n+\r\n+    private String schema;\r\n+\r\n+    private String expression;\r\n+\r\n+    public AttributeCond() {\r\n+        super();\r\n+    }\r\n+\r\n+    public AttributeCond(final Type conditionType) {\r\n+        super();\r\n+        this.type = conditionType;\r\n+    }\r\n+\r\n+    public final String getExpression() {\r\n+        return expression;\r\n+    }\r\n+\r\n+    public final void setExpression(final String conditionExpression) {\r\n+        this.expression = conditionExpression;\r\n+    }\r\n+\r\n+    public final String getSchema() {\r\n+        return schema;\r\n+    }\r\n+\r\n+    public final void setSchema(final String conditionSchema) {\r\n+        this.schema = conditionSchema;\r\n+    }\r\n+\r\n+    public final Type getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public final void setType(final Type conditionType) {\r\n+        this.type = conditionType;\r\n+    }\r\n+\r\n+    @Override\r\n+    public final boolean isValid() {\r\n+        return type != null && schema != null && (type == Type.ISNULL || type == Type.ISNOTNULL || expression != null);\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/search/AttributeCond.java"},{"sha":"8b40d062d0733440726a985e6dc240c1069ceb32","filename":"common/src/main/java/org/apache/syncope/common/search/EntitlementCond.java","status":"renamed","additions":41,"deletions":41,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FEntitlementCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FEntitlementCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FEntitlementCond.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,41 +1,41 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.search;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public class EntitlementCond extends AbstractBaseBean implements SearchCond {\n-\n-    private static final long serialVersionUID = -4077781080368377428L;\n-\n-    private String expression;\n-\n-    public String getExpression() {\n-        return expression;\n-    }\n-\n-    public void setExpression(final String expression) {\n-        this.expression = expression;\n-    }\n-\n-    @Override\n-    public boolean isValid() {\n-        return expression != null;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public class EntitlementCond extends AbstractBaseBean implements SearchCond {\r\n+\r\n+    private static final long serialVersionUID = -4077781080368377428L;\r\n+\r\n+    private String expression;\r\n+\r\n+    public String getExpression() {\r\n+        return expression;\r\n+    }\r\n+\r\n+    public void setExpression(final String expression) {\r\n+        this.expression = expression;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean isValid() {\r\n+        return expression != null;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/search/EntitlementCond.java"},{"sha":"663210a0d360c9c4f624ff14641f3741c922ea21","filename":"common/src/main/java/org/apache/syncope/common/search/MembershipCond.java","status":"renamed","additions":58,"deletions":58,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FMembershipCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FMembershipCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FMembershipCond.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,58 +1,58 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.search;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-/**\n- * Search condition to be applied when searching for memberships.\n- */\n-public class MembershipCond extends AbstractBaseBean implements SearchCond {\n-\n-    private static final long serialVersionUID = -728155256293925989L;\n-\n-    private Long roleId;\n-\n-    private String roleName;\n-\n-    public MembershipCond() {\n-        super();\n-    }\n-\n-    public Long getRoleId() {\n-        return roleId;\n-    }\n-\n-    public void setRoleId(Long roleId) {\n-        this.roleId = roleId;\n-    }\n-\n-    public String getRoleName() {\n-        return roleName;\n-    }\n-\n-    public void setRoleName(String roleName) {\n-        this.roleName = roleName;\n-    }\n-\n-    @Override\n-    public final boolean isValid() {\n-        return !(roleId == null && roleName == null);\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * Search condition to be applied when searching for memberships.\r\n+ */\r\n+public class MembershipCond extends AbstractBaseBean implements SearchCond {\r\n+\r\n+    private static final long serialVersionUID = -728155256293925989L;\r\n+\r\n+    private Long roleId;\r\n+\r\n+    private String roleName;\r\n+\r\n+    public MembershipCond() {\r\n+        super();\r\n+    }\r\n+\r\n+    public Long getRoleId() {\r\n+        return roleId;\r\n+    }\r\n+\r\n+    public void setRoleId(Long roleId) {\r\n+        this.roleId = roleId;\r\n+    }\r\n+\r\n+    public String getRoleName() {\r\n+        return roleName;\r\n+    }\r\n+\r\n+    public void setRoleName(String roleName) {\r\n+        this.roleName = roleName;\r\n+    }\r\n+\r\n+    @Override\r\n+    public final boolean isValid() {\r\n+        return !(roleId == null && roleName == null);\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/search/MembershipCond.java"},{"sha":"6ba4e5a3d791a5941e5270b9443cc5edcbd5d3c7","filename":"common/src/main/java/org/apache/syncope/common/search/NodeCond.java","status":"renamed","additions":242,"deletions":242,"changes":484,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FNodeCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FNodeCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FNodeCond.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,242 +1,242 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.search;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-\n-public class NodeCond extends AbstractBaseBean {\n-\n-    public enum Type {\n-\n-        LEAF,\n-        NOT_LEAF,\n-        AND,\n-        OR\n-\n-    }\n-\n-    private Type type;\n-\n-    private AttributableCond attributableCond;\n-\n-    private AttributeCond attributeCond;\n-\n-    private MembershipCond membershipCond;\n-\n-    private ResourceCond resourceCond;\n-\n-    private EntitlementCond entitlementCond;\n-\n-    private NodeCond leftNodeCond;\n-\n-    private NodeCond rightNodeCond;\n-\n-    public static NodeCond getLeafCond(final AttributableCond syncopeUserCond) {\n-        NodeCond nodeCond = new NodeCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.attributableCond = syncopeUserCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getLeafCond(final AttributeCond attributeCond) {\n-        NodeCond nodeCond = new NodeCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.attributeCond = attributeCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getLeafCond(final MembershipCond membershipCond) {\n-        NodeCond nodeCond = new NodeCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.membershipCond = membershipCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getLeafCond(final ResourceCond resourceCond) {\n-        NodeCond nodeCond = new NodeCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.resourceCond = resourceCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getLeafCond(final EntitlementCond entitlementCond) {\n-        NodeCond nodeCond = new NodeCond();\n-\n-        nodeCond.type = Type.LEAF;\n-        nodeCond.entitlementCond = entitlementCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getNotLeafCond(final AttributableCond syncopeUserCond) {\n-        NodeCond nodeCond = getLeafCond(syncopeUserCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getNotLeafCond(final AttributeCond attributeCond) {\n-        NodeCond nodeCond = getLeafCond(attributeCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getNotLeafCond(final MembershipCond membershipCond) {\n-        NodeCond nodeCond = getLeafCond(membershipCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getNotLeafCond(final ResourceCond resourceCond) {\n-        NodeCond nodeCond = getLeafCond(resourceCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getNotLeafCond(final EntitlementCond entitlementCond) {\n-        NodeCond nodeCond = getLeafCond(entitlementCond);\n-        nodeCond.type = Type.NOT_LEAF;\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getAndCond(final NodeCond leftCond, final NodeCond rightCond) {\n-        NodeCond nodeCond = new NodeCond();\n-\n-        nodeCond.type = Type.AND;\n-        nodeCond.leftNodeCond = leftCond;\n-        nodeCond.rightNodeCond = rightCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public static NodeCond getOrCond(final NodeCond leftCond, final NodeCond rightCond) {\n-        NodeCond nodeCond = new NodeCond();\n-\n-        nodeCond.type = Type.OR;\n-        nodeCond.leftNodeCond = leftCond;\n-        nodeCond.rightNodeCond = rightCond;\n-\n-        return nodeCond;\n-    }\n-\n-    public AttributableCond getAttributableCond() {\n-        return attributableCond;\n-    }\n-\n-    public void setAttributableCond(final AttributableCond attributableCond) {\n-        this.attributableCond = attributableCond;\n-    }\n-\n-    public AttributeCond getAttributeCond() {\n-        return attributeCond;\n-    }\n-\n-    public void setAttributeCond(final AttributeCond attributeCond) {\n-        this.attributeCond = attributeCond;\n-    }\n-\n-    public MembershipCond getMembershipCond() {\n-        return membershipCond;\n-    }\n-\n-    public void setMembershipCond(final MembershipCond membershipCond) {\n-        this.membershipCond = membershipCond;\n-    }\n-\n-    public ResourceCond getResourceCond() {\n-        return resourceCond;\n-    }\n-\n-    public void setResourceCond(final ResourceCond resourceCond) {\n-        this.resourceCond = resourceCond;\n-    }\n-\n-    public EntitlementCond getEntitlementCond() {\n-        return entitlementCond;\n-    }\n-\n-    public void setEntitlementCond(final EntitlementCond entitlementCond) {\n-        this.entitlementCond = entitlementCond;\n-    }\n-\n-    public NodeCond getLeftNodeCond() {\n-        return leftNodeCond;\n-    }\n-\n-    public void setLeftNodeCond(final NodeCond leftNodeCond) {\n-        this.leftNodeCond = leftNodeCond;\n-    }\n-\n-    public NodeCond getRightNodeCond() {\n-        return rightNodeCond;\n-    }\n-\n-    public void setRightNodeCond(final NodeCond rightNodeCond) {\n-        this.rightNodeCond = rightNodeCond;\n-    }\n-\n-    public Type getType() {\n-        return type;\n-    }\n-\n-    public void setType(final Type type) {\n-        this.type = type;\n-    }\n-\n-    @JsonIgnore\n-    public boolean isValid() {\n-        boolean isValid = false;\n-\n-        if (type == null) {\n-            return isValid;\n-        }\n-\n-        switch (type) {\n-            case LEAF:\n-            case NOT_LEAF:\n-                isValid = (attributableCond != null || attributeCond != null || membershipCond != null\n-                        || resourceCond != null || entitlementCond != null)\n-                        && (attributableCond == null || attributableCond.isValid())\n-                        && (attributeCond == null || attributeCond.isValid())\n-                        && (membershipCond == null || membershipCond.isValid())\n-                        && (resourceCond == null || resourceCond.isValid())\n-                        && (entitlementCond == null || entitlementCond.isValid());\n-                break;\n-\n-            case AND:\n-            case OR:\n-                isValid = (leftNodeCond == null || rightNodeCond == null)\n-                        ? false\n-                        : leftNodeCond.isValid() && rightNodeCond.isValid();\n-                break;\n-\n-            default:\n-        }\n-\n-        return isValid;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public class NodeCond extends AbstractBaseBean {\r\n+\r\n+    public enum Type {\r\n+\r\n+        LEAF,\r\n+        NOT_LEAF,\r\n+        AND,\r\n+        OR\r\n+\r\n+    }\r\n+\r\n+    private Type type;\r\n+\r\n+    private AttributableCond attributableCond;\r\n+\r\n+    private AttributeCond attributeCond;\r\n+\r\n+    private MembershipCond membershipCond;\r\n+\r\n+    private ResourceCond resourceCond;\r\n+\r\n+    private EntitlementCond entitlementCond;\r\n+\r\n+    private NodeCond leftNodeCond;\r\n+\r\n+    private NodeCond rightNodeCond;\r\n+\r\n+    public static NodeCond getLeafCond(final AttributableCond syncopeUserCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.attributableCond = syncopeUserCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getLeafCond(final AttributeCond attributeCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.attributeCond = attributeCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getLeafCond(final MembershipCond membershipCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.membershipCond = membershipCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getLeafCond(final ResourceCond resourceCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.resourceCond = resourceCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getLeafCond(final EntitlementCond entitlementCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.LEAF;\r\n+        nodeCond.entitlementCond = entitlementCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final AttributableCond syncopeUserCond) {\r\n+        NodeCond nodeCond = getLeafCond(syncopeUserCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final AttributeCond attributeCond) {\r\n+        NodeCond nodeCond = getLeafCond(attributeCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final MembershipCond membershipCond) {\r\n+        NodeCond nodeCond = getLeafCond(membershipCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final ResourceCond resourceCond) {\r\n+        NodeCond nodeCond = getLeafCond(resourceCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getNotLeafCond(final EntitlementCond entitlementCond) {\r\n+        NodeCond nodeCond = getLeafCond(entitlementCond);\r\n+        nodeCond.type = Type.NOT_LEAF;\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getAndCond(final NodeCond leftCond, final NodeCond rightCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.AND;\r\n+        nodeCond.leftNodeCond = leftCond;\r\n+        nodeCond.rightNodeCond = rightCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public static NodeCond getOrCond(final NodeCond leftCond, final NodeCond rightCond) {\r\n+        NodeCond nodeCond = new NodeCond();\r\n+\r\n+        nodeCond.type = Type.OR;\r\n+        nodeCond.leftNodeCond = leftCond;\r\n+        nodeCond.rightNodeCond = rightCond;\r\n+\r\n+        return nodeCond;\r\n+    }\r\n+\r\n+    public AttributableCond getAttributableCond() {\r\n+        return attributableCond;\r\n+    }\r\n+\r\n+    public void setAttributableCond(final AttributableCond attributableCond) {\r\n+        this.attributableCond = attributableCond;\r\n+    }\r\n+\r\n+    public AttributeCond getAttributeCond() {\r\n+        return attributeCond;\r\n+    }\r\n+\r\n+    public void setAttributeCond(final AttributeCond attributeCond) {\r\n+        this.attributeCond = attributeCond;\r\n+    }\r\n+\r\n+    public MembershipCond getMembershipCond() {\r\n+        return membershipCond;\r\n+    }\r\n+\r\n+    public void setMembershipCond(final MembershipCond membershipCond) {\r\n+        this.membershipCond = membershipCond;\r\n+    }\r\n+\r\n+    public ResourceCond getResourceCond() {\r\n+        return resourceCond;\r\n+    }\r\n+\r\n+    public void setResourceCond(final ResourceCond resourceCond) {\r\n+        this.resourceCond = resourceCond;\r\n+    }\r\n+\r\n+    public EntitlementCond getEntitlementCond() {\r\n+        return entitlementCond;\r\n+    }\r\n+\r\n+    public void setEntitlementCond(final EntitlementCond entitlementCond) {\r\n+        this.entitlementCond = entitlementCond;\r\n+    }\r\n+\r\n+    public NodeCond getLeftNodeCond() {\r\n+        return leftNodeCond;\r\n+    }\r\n+\r\n+    public void setLeftNodeCond(final NodeCond leftNodeCond) {\r\n+        this.leftNodeCond = leftNodeCond;\r\n+    }\r\n+\r\n+    public NodeCond getRightNodeCond() {\r\n+        return rightNodeCond;\r\n+    }\r\n+\r\n+    public void setRightNodeCond(final NodeCond rightNodeCond) {\r\n+        this.rightNodeCond = rightNodeCond;\r\n+    }\r\n+\r\n+    public Type getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(final Type type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public boolean isValid() {\r\n+        boolean isValid = false;\r\n+\r\n+        if (type == null) {\r\n+            return isValid;\r\n+        }\r\n+\r\n+        switch (type) {\r\n+            case LEAF:\r\n+            case NOT_LEAF:\r\n+                isValid = (attributableCond != null || attributeCond != null || membershipCond != null\r\n+                        || resourceCond != null || entitlementCond != null)\r\n+                        && (attributableCond == null || attributableCond.isValid())\r\n+                        && (attributeCond == null || attributeCond.isValid())\r\n+                        && (membershipCond == null || membershipCond.isValid())\r\n+                        && (resourceCond == null || resourceCond.isValid())\r\n+                        && (entitlementCond == null || entitlementCond.isValid());\r\n+                break;\r\n+\r\n+            case AND:\r\n+            case OR:\r\n+                isValid = (leftNodeCond == null || rightNodeCond == null)\r\n+                        ? false\r\n+                        : leftNodeCond.isValid() && rightNodeCond.isValid();\r\n+                break;\r\n+\r\n+            default:\r\n+        }\r\n+\r\n+        return isValid;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/search/NodeCond.java"},{"sha":"c2ae0278afc4e3ef251e47260fe819305e274ee6","filename":"common/src/main/java/org/apache/syncope/common/search/ResourceCond.java","status":"renamed","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FResourceCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FResourceCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FResourceCond.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,42 +1,42 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.search;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-/**\n- * Search condition to be applied when searching for associated resources.\n- */\n-public class ResourceCond extends AbstractBaseBean implements SearchCond {\n-\n-    private String resourceName;\n-\n-    public String getResourceName() {\n-        return resourceName;\n-    }\n-\n-    public void setResourceName(String resourceName) {\n-        this.resourceName = resourceName;\n-    }\n-\n-    @Override\n-    public final boolean isValid() {\n-        return resourceName != null;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+/**\r\n+ * Search condition to be applied when searching for associated resources.\r\n+ */\r\n+public class ResourceCond extends AbstractBaseBean implements SearchCond {\r\n+\r\n+    private String resourceName;\r\n+\r\n+    public String getResourceName() {\r\n+        return resourceName;\r\n+    }\r\n+\r\n+    public void setResourceName(String resourceName) {\r\n+        this.resourceName = resourceName;\r\n+    }\r\n+\r\n+    @Override\r\n+    public final boolean isValid() {\r\n+        return resourceName != null;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/search/ResourceCond.java"},{"sha":"238751bd748af564b68a17db7c75b9bc5eeeaa71","filename":"common/src/main/java/org/apache/syncope/common/search/SearchCond.java","status":"renamed","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fsearch%2FSearchCond.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,27 +1,27 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.search;\n-\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-\n-public interface SearchCond {\n-\n-    @JsonIgnore\n-    boolean isValid();\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.search;\r\n+\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public interface SearchCond {\r\n+\r\n+    @JsonIgnore\r\n+    boolean isValid();\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/search/SearchCond.java"},{"sha":"205ed88491d78b420b8de20f5dca3cc8aced7a80","filename":"common/src/main/java/org/apache/syncope/common/services/ConfigurationService.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConfigurationService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import java.util.Set;\r\n@@ -29,9 +29,9 @@\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.core.Response;\r\n \r\n-import org.apache.syncope.client.to.ConfigurationTO;\r\n-import org.apache.syncope.client.to.MailTemplateTO;\r\n-import org.apache.syncope.client.to.ValidatorTO;\r\n+import org.apache.syncope.common.to.ConfigurationTO;\r\n+import org.apache.syncope.common.to.MailTemplateTO;\r\n+import org.apache.syncope.common.to.ValidatorTO;\r\n \r\n @Path(\"configurations\")\r\n public interface ConfigurationService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/ConfigurationService.java"},{"sha":"685545e2f32a9998bcd5a724d6faac583a24e213","filename":"common/src/main/java/org/apache/syncope/common/services/ConnectorService.java","status":"renamed","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FConnectorService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import javax.ws.rs.DELETE;\r\n@@ -30,10 +30,10 @@\n import javax.ws.rs.QueryParam;\r\n import javax.ws.rs.core.Response;\r\n \r\n-import org.apache.syncope.client.to.ConnBundleTO;\r\n-import org.apache.syncope.client.to.ConnInstanceTO;\r\n-import org.apache.syncope.client.to.SchemaTO;\r\n-import org.apache.syncope.types.ConnConfProperty;\r\n+import org.apache.syncope.common.to.ConnBundleTO;\r\n+import org.apache.syncope.common.to.ConnInstanceTO;\r\n+import org.apache.syncope.common.to.SchemaTO;\r\n+import org.apache.syncope.common.types.ConnConfProperty;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RequestMethod;\r\n \r","previous_filename":"client/src/main/java/org/apache/syncope/services/ConnectorService.java"},{"sha":"37421211eb9aed7f82aa22d8962b73606e007f96","filename":"common/src/main/java/org/apache/syncope/common/services/EntitlementService.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FEntitlementService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,14 +16,14 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.Set;\r\n \r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.Path;\r\n \r\n-import org.apache.syncope.client.to.EntitlementTO;\r\n+import org.apache.syncope.common.to.EntitlementTO;\r\n \r\n @Path(\"entitlements\")\r\n public interface EntitlementService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/EntitlementService.java"},{"sha":"19adb334a4c4c067fa2e45cc23003809e55bc80f","filename":"common/src/main/java/org/apache/syncope/common/services/LoggerService.java","status":"renamed","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FLoggerService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import ch.qos.logback.classic.Level;\r\n import java.util.List;\r\n@@ -25,8 +25,9 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-import org.apache.syncope.client.to.LoggerTO;\r\n-import org.apache.syncope.types.AuditLoggerName;\r\n+\r\n+import org.apache.syncope.common.to.LoggerTO;\r\n+import org.apache.syncope.common.types.AuditLoggerName;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RequestMethod;\r\n \r","previous_filename":"client/src/main/java/org/apache/syncope/services/LoggerService.java"},{"sha":"bde81d50db913a934ed311a4fcbb66405fb94a2f","filename":"common/src/main/java/org/apache/syncope/common/services/NotificationService.java","status":"renamed","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FNotificationService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import javax.ws.rs.DELETE;\r\n@@ -25,7 +25,8 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-import org.apache.syncope.client.to.NotificationTO;\r\n+\r\n+import org.apache.syncope.common.to.NotificationTO;\r\n \r\n @Path(\"notifications\")\r\n public interface NotificationService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/NotificationService.java"},{"sha":"30df04a88c06ea575af2fb8c96cf17ffaffd8db7","filename":"common/src/main/java/org/apache/syncope/common/services/PolicyService.java","status":"renamed","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FPolicyService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import javax.ws.rs.DELETE;\r\n@@ -25,8 +25,9 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-import org.apache.syncope.client.to.PolicyTO;\r\n-import org.apache.syncope.types.PolicyType;\r\n+\r\n+import org.apache.syncope.common.to.PolicyTO;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n \r\n @Path(\"policies/{kind}\")\r\n public interface PolicyService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/PolicyService.java"},{"sha":"4dbc435e22a0dc4a042107fec85cea808a159838","filename":"common/src/main/java/org/apache/syncope/common/services/ReportService.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FReportService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import javax.ws.rs.DELETE;\r\n@@ -31,9 +31,9 @@\n import javax.ws.rs.core.MediaType;\r\n import javax.ws.rs.core.Response;\r\n \r\n-import org.apache.syncope.client.to.ReportExecTO;\r\n-import org.apache.syncope.client.to.ReportTO;\r\n-import org.apache.syncope.types.ReportExecExportFormat;\r\n+import org.apache.syncope.common.to.ReportExecTO;\r\n+import org.apache.syncope.common.to.ReportTO;\r\n+import org.apache.syncope.common.types.ReportExecExportFormat;\r\n import org.springframework.web.bind.annotation.RequestMapping;\r\n import org.springframework.web.bind.annotation.RequestMethod;\r\n \r","previous_filename":"client/src/main/java/org/apache/syncope/services/ReportService.java"},{"sha":"aaabe466273a6c19b7f9a702ed06a2561dd100a0","filename":"common/src/main/java/org/apache/syncope/common/services/ResourceService.java","status":"renamed","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FResourceService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import java.util.Set;\r\n@@ -27,9 +27,10 @@\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-import org.apache.syncope.client.to.ConnObjectTO;\r\n-import org.apache.syncope.client.to.ResourceTO;\r\n-import org.apache.syncope.types.AttributableType;\r\n+\r\n+import org.apache.syncope.common.to.ConnObjectTO;\r\n+import org.apache.syncope.common.to.ResourceTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n \r\n @Path(\"resources\")\r\n public interface ResourceService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/ResourceService.java"},{"sha":"5bd0297cfbd67b4d71b89d37d72098b201f567a0","filename":"common/src/main/java/org/apache/syncope/common/services/RoleService.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FRoleService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import javax.ws.rs.DELETE;\r\n@@ -26,9 +26,9 @@\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.QueryParam;\r\n-import org.apache.syncope.client.mod.RoleMod;\r\n-import org.apache.syncope.client.search.NodeCond;\r\n-import org.apache.syncope.client.to.RoleTO;\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.mod.RoleMod;\r\n+import org.apache.syncope.common.to.RoleTO;\r\n \r\n @Path(\"roles\")\r\n public interface RoleService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/RoleService.java"},{"sha":"b3090fc4c95da42ad39f4d5f4e0241b779888ac6","filename":"common/src/main/java/org/apache/syncope/common/services/SchemaService.java","status":"renamed","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FSchemaService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n \r\n@@ -27,8 +27,8 @@\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n \r\n-import org.apache.syncope.client.to.AbstractSchemaTO;\r\n-import org.apache.syncope.types.AttributableType;\r\n+import org.apache.syncope.common.to.AbstractSchemaTO;\r\n+import org.apache.syncope.common.types.AttributableType;\r\n \r\n @Path(\"schemas/{kind}/{type}\")\r\n public interface SchemaService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/SchemaService.java"},{"sha":"32d2f1da8bb35ad6b68680773334e77cdeec9fbf","filename":"common/src/main/java/org/apache/syncope/common/services/TaskService.java","status":"renamed","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FTaskService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import java.util.Set;\r\n@@ -29,10 +29,11 @@\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n import javax.ws.rs.QueryParam;\r\n-import org.apache.syncope.client.to.TaskExecTO;\r\n-import org.apache.syncope.client.to.TaskTO;\r\n-import org.apache.syncope.types.PropagationTaskExecStatus;\r\n-import org.apache.syncope.types.TaskType;\r\n+\r\n+import org.apache.syncope.common.to.TaskExecTO;\r\n+import org.apache.syncope.common.to.TaskTO;\r\n+import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n+import org.apache.syncope.common.types.TaskType;\r\n \r\n @Path(\"tasks\")\r\n public interface TaskService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/TaskService.java"},{"sha":"789a1cb66a824655b442131ed4b703f78fd59b5b","filename":"common/src/main/java/org/apache/syncope/common/services/UserRequestService.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserRequestService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,17 +16,17 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import javax.ws.rs.DELETE;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.POST;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-import org.apache.syncope.client.mod.UserMod;\r\n-import org.apache.syncope.client.to.UserRequestTO;\r\n-import org.apache.syncope.client.to.UserTO;\r\n+import org.apache.syncope.common.mod.UserMod;\r\n+import org.apache.syncope.common.to.UserRequestTO;\r\n+import org.apache.syncope.common.to.UserTO;\r\n \r\n @Path(\"requests/user\")\r\n public interface UserRequestService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/UserRequestService.java"},{"sha":"6f8b6ce38340d480615dee71c8f3c682dd21a3ab","filename":"common/src/main/java/org/apache/syncope/common/services/UserService.java","status":"renamed","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FUserService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,9 +16,10 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.services;\n+package org.apache.syncope.common.services;\n \n import java.util.List;\n+\n import javax.ws.rs.DELETE;\n import javax.ws.rs.DefaultValue;\n import javax.ws.rs.GET;\n@@ -27,11 +28,12 @@\n import javax.ws.rs.Path;\n import javax.ws.rs.PathParam;\n import javax.ws.rs.QueryParam;\n-import org.apache.syncope.client.mod.StatusMod;\n-import org.apache.syncope.client.mod.UserMod;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.to.WorkflowFormTO;\n+\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n \n @Path(\"users\")\n public interface UserService {","previous_filename":"client/src/main/java/org/apache/syncope/services/UserService.java"},{"sha":"4d5b74346191aed4b7c23b0a2f6400be36f5a5d4","filename":"common/src/main/java/org/apache/syncope/common/services/WorkflowService.java","status":"renamed","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fservices%2FWorkflowService.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,14 +16,15 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.services;\r\n+package org.apache.syncope.common.services;\r\n \r\n import java.util.List;\r\n import javax.ws.rs.GET;\r\n import javax.ws.rs.PUT;\r\n import javax.ws.rs.Path;\r\n import javax.ws.rs.PathParam;\r\n-import org.apache.syncope.client.to.WorkflowDefinitionTO;\r\n+\r\n+import org.apache.syncope.common.to.WorkflowDefinitionTO;\r\n \r\n @Path(\"workflows\")\r\n public interface WorkflowService {\r","previous_filename":"client/src/main/java/org/apache/syncope/services/WorkflowService.java"},{"sha":"a5880756d574c7eaf417abbc1eb822d5e6871cab","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractAttributableTO.java","status":"renamed","additions":171,"deletions":171,"changes":342,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractAttributableTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,171 +1,171 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-\n-public abstract class AbstractAttributableTO extends ConnObjectTO {\n-\n-    private static final long serialVersionUID = 4083884098736820255L;\n-\n-    private long id;\n-\n-    private List<AttributeTO> derivedAttributes;\n-\n-    private List<AttributeTO> virtualAttributes;\n-\n-    private Set<String> resources;\n-\n-    private List<PropagationTO> propagationTOs;\n-\n-    protected AbstractAttributableTO() {\n-        super();\n-\n-        derivedAttributes = new ArrayList<AttributeTO>();\n-        virtualAttributes = new ArrayList<AttributeTO>();\n-        resources = new HashSet<String>();\n-        propagationTOs = new ArrayList<PropagationTO>();\n-    }\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(final long id) {\n-        this.id = id;\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, AttributeTO> getDerivedAttributeMap() {\n-        Map<String, AttributeTO> result;\n-\n-        if (derivedAttributes == null) {\n-            result = Collections.emptyMap();\n-        } else {\n-            result = new HashMap<String, AttributeTO>(derivedAttributes.size());\n-            for (AttributeTO attributeTO : derivedAttributes) {\n-                result.put(attributeTO.getSchema(), attributeTO);\n-            }\n-            result = Collections.unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, AttributeTO> getVirtualAttributeMap() {\n-        Map<String, AttributeTO> result;\n-\n-        if (derivedAttributes == null) {\n-            result = Collections.emptyMap();\n-        } else {\n-            result = new HashMap<String, AttributeTO>(virtualAttributes.size());\n-            for (AttributeTO attributeTO : virtualAttributes) {\n-                result.put(attributeTO.getSchema(), attributeTO);\n-            }\n-            result = Collections.unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-\n-    public boolean addDerivedAttribute(final AttributeTO derivedAttribute) {\n-        return derivedAttributes.add(derivedAttribute);\n-    }\n-\n-    public boolean removeDerivedAttribute(final AttributeTO derivedAttribute) {\n-        return derivedAttributes.remove(derivedAttribute);\n-    }\n-\n-    public List<AttributeTO> getDerivedAttributes() {\n-        return derivedAttributes;\n-    }\n-\n-    public void setDerivedAttributes(final List<AttributeTO> derivedAttributes) {\n-\n-        this.derivedAttributes = derivedAttributes;\n-    }\n-\n-    public boolean addVirtualAttribute(final AttributeTO virtualAttribute) {\n-        return virtualAttributes.add(virtualAttribute);\n-    }\n-\n-    public boolean removeVirtualAttribute(final AttributeTO virtualAttribute) {\n-        return virtualAttributes.remove(virtualAttribute);\n-    }\n-\n-    public List<AttributeTO> getVirtualAttributes() {\n-        return virtualAttributes;\n-    }\n-\n-    public void setVirtualAttributes(final List<AttributeTO> virtualAttributes) {\n-        this.virtualAttributes = virtualAttributes;\n-    }\n-\n-    public boolean addResource(final String resource) {\n-        return resources.add(resource);\n-    }\n-\n-    public boolean removeResource(final String resource) {\n-        return resources.remove(resource);\n-    }\n-\n-    public Set<String> getResources() {\n-        return resources;\n-    }\n-\n-    public void setResources(final Set<String> resources) {\n-        this.resources = resources;\n-    }\n-\n-    public boolean addPropagationTO(final PropagationTO status) {\n-        return propagationTOs.add(status);\n-    }\n-\n-    public boolean removePropagationTO(final String resource) {\n-        if (resource != null && getPropagationTOs().isEmpty()) {\n-            final List<PropagationTO> toBeRemoved = new ArrayList<PropagationTO>();\n-\n-            for (PropagationTO propagationTO : getPropagationTOs()) {\n-                if (resource.equals(propagationTO.getResourceName())) {\n-                    toBeRemoved.add(propagationTO);\n-                }\n-            }\n-\n-            return propagationTOs.removeAll(toBeRemoved);\n-        }\n-        return false;\n-    }\n-\n-    public List<PropagationTO> getPropagationTOs() {\n-        return propagationTOs;\n-    }\n-\n-    public void setPropagationTOs(final List<PropagationTO> propagationTOs) {\n-        this.propagationTOs.clear();\n-        this.propagationTOs.addAll(propagationTOs);\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public abstract class AbstractAttributableTO extends ConnObjectTO {\r\n+\r\n+    private static final long serialVersionUID = 4083884098736820255L;\r\n+\r\n+    private long id;\r\n+\r\n+    private List<AttributeTO> derivedAttributes;\r\n+\r\n+    private List<AttributeTO> virtualAttributes;\r\n+\r\n+    private Set<String> resources;\r\n+\r\n+    private List<PropagationTO> propagationTOs;\r\n+\r\n+    protected AbstractAttributableTO() {\r\n+        super();\r\n+\r\n+        derivedAttributes = new ArrayList<AttributeTO>();\r\n+        virtualAttributes = new ArrayList<AttributeTO>();\r\n+        resources = new HashSet<String>();\r\n+        propagationTOs = new ArrayList<PropagationTO>();\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(final long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, AttributeTO> getDerivedAttributeMap() {\r\n+        Map<String, AttributeTO> result;\r\n+\r\n+        if (derivedAttributes == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, AttributeTO>(derivedAttributes.size());\r\n+            for (AttributeTO attributeTO : derivedAttributes) {\r\n+                result.put(attributeTO.getSchema(), attributeTO);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, AttributeTO> getVirtualAttributeMap() {\r\n+        Map<String, AttributeTO> result;\r\n+\r\n+        if (derivedAttributes == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, AttributeTO>(virtualAttributes.size());\r\n+            for (AttributeTO attributeTO : virtualAttributes) {\r\n+                result.put(attributeTO.getSchema(), attributeTO);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public boolean addDerivedAttribute(final AttributeTO derivedAttribute) {\r\n+        return derivedAttributes.add(derivedAttribute);\r\n+    }\r\n+\r\n+    public boolean removeDerivedAttribute(final AttributeTO derivedAttribute) {\r\n+        return derivedAttributes.remove(derivedAttribute);\r\n+    }\r\n+\r\n+    public List<AttributeTO> getDerivedAttributes() {\r\n+        return derivedAttributes;\r\n+    }\r\n+\r\n+    public void setDerivedAttributes(final List<AttributeTO> derivedAttributes) {\r\n+\r\n+        this.derivedAttributes = derivedAttributes;\r\n+    }\r\n+\r\n+    public boolean addVirtualAttribute(final AttributeTO virtualAttribute) {\r\n+        return virtualAttributes.add(virtualAttribute);\r\n+    }\r\n+\r\n+    public boolean removeVirtualAttribute(final AttributeTO virtualAttribute) {\r\n+        return virtualAttributes.remove(virtualAttribute);\r\n+    }\r\n+\r\n+    public List<AttributeTO> getVirtualAttributes() {\r\n+        return virtualAttributes;\r\n+    }\r\n+\r\n+    public void setVirtualAttributes(final List<AttributeTO> virtualAttributes) {\r\n+        this.virtualAttributes = virtualAttributes;\r\n+    }\r\n+\r\n+    public boolean addResource(final String resource) {\r\n+        return resources.add(resource);\r\n+    }\r\n+\r\n+    public boolean removeResource(final String resource) {\r\n+        return resources.remove(resource);\r\n+    }\r\n+\r\n+    public Set<String> getResources() {\r\n+        return resources;\r\n+    }\r\n+\r\n+    public void setResources(final Set<String> resources) {\r\n+        this.resources = resources;\r\n+    }\r\n+\r\n+    public boolean addPropagationTO(final PropagationTO status) {\r\n+        return propagationTOs.add(status);\r\n+    }\r\n+\r\n+    public boolean removePropagationTO(final String resource) {\r\n+        if (resource != null && getPropagationTOs().isEmpty()) {\r\n+            final List<PropagationTO> toBeRemoved = new ArrayList<PropagationTO>();\r\n+\r\n+            for (PropagationTO propagationTO : getPropagationTOs()) {\r\n+                if (resource.equals(propagationTO.getResourceName())) {\r\n+                    toBeRemoved.add(propagationTO);\r\n+                }\r\n+            }\r\n+\r\n+            return propagationTOs.removeAll(toBeRemoved);\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    public List<PropagationTO> getPropagationTOs() {\r\n+        return propagationTOs;\r\n+    }\r\n+\r\n+    public void setPropagationTOs(final List<PropagationTO> propagationTOs) {\r\n+        this.propagationTOs.clear();\r\n+        this.propagationTOs.addAll(propagationTOs);\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/AbstractAttributableTO.java"},{"sha":"5a73745358a1ccf570188673f5dec0f4f0d79887","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractExecTO.java","status":"renamed","additions":86,"deletions":85,"changes":171,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractExecTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,85 +1,86 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.Date;\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public class AbstractExecTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -4621191979198357081L;\n-\n-    protected long id;\n-\n-    protected String status;\n-\n-    protected String message;\n-\n-    protected Date startDate;\n-\n-    protected Date endDate;\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    public void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public String getStatus() {\n-        return status;\n-    }\n-\n-    public void setStatus(String status) {\n-        this.status = status;\n-    }\n-\n-    public Date getStartDate() {\n-        return startDate == null\n-                ? null\n-                : new Date(startDate.getTime());\n-    }\n-\n-    public void setStartDate(Date startDate) {\n-        if (startDate != null) {\n-            this.startDate = new Date(startDate.getTime());\n-        }\n-    }\n-\n-    public Date getEndDate() {\n-        return endDate == null\n-                ? null\n-                : new Date(endDate.getTime());\n-    }\n-\n-    public void setEndDate(Date endDate) {\n-        if (endDate != null) {\n-            this.endDate = new Date(endDate.getTime());\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.Date;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public class AbstractExecTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -4621191979198357081L;\r\n+\r\n+    protected long id;\r\n+\r\n+    protected String status;\r\n+\r\n+    protected String message;\r\n+\r\n+    protected Date startDate;\r\n+\r\n+    protected Date endDate;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getMessage() {\r\n+        return message;\r\n+    }\r\n+\r\n+    public void setMessage(String message) {\r\n+        this.message = message;\r\n+    }\r\n+\r\n+    public String getStatus() {\r\n+        return status;\r\n+    }\r\n+\r\n+    public void setStatus(String status) {\r\n+        this.status = status;\r\n+    }\r\n+\r\n+    public Date getStartDate() {\r\n+        return startDate == null\r\n+                ? null\r\n+                : new Date(startDate.getTime());\r\n+    }\r\n+\r\n+    public void setStartDate(Date startDate) {\r\n+        if (startDate != null) {\r\n+            this.startDate = new Date(startDate.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getEndDate() {\r\n+        return endDate == null\r\n+                ? null\r\n+                : new Date(endDate.getTime());\r\n+    }\r\n+\r\n+    public void setEndDate(Date endDate) {\r\n+        if (endDate != null) {\r\n+            this.endDate = new Date(endDate.getTime());\r\n+        }\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/AbstractExecTO.java"},{"sha":"aff10632f3cb19e097459f58617f6e909f8481fa","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSchemaTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSchemaTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,11 +16,11 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.client.to;\r\n+package org.apache.syncope.common.to;\r\n \r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.client.AbstractBaseBean;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n @XmlType\r\n public abstract class AbstractSchemaTO extends AbstractBaseBean {\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/AbstractSchemaTO.java"},{"sha":"03a859eefeb61974e942c673b1232ec8603ef1bc","filename":"common/src/main/java/org/apache/syncope/common/to/AccountPolicyTO.java","status":"renamed","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAccountPolicyTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,49 +1,49 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.types.AccountPolicySpec;\n-import org.apache.syncope.types.PolicyType;\n-\n-public class AccountPolicyTO extends PolicyTO {\n-\n-    private static final long serialVersionUID = -1557150042828800134L;\n-\n-    private AccountPolicySpec specification;\n-\n-    public AccountPolicyTO() {\n-        this(false);\n-    }\n-\n-    public AccountPolicyTO(boolean global) {\n-        super();\n-\n-        this.type = global\n-                ? PolicyType.GLOBAL_ACCOUNT\n-                : PolicyType.ACCOUNT;\n-    }\n-\n-    public void setSpecification(final AccountPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-    public AccountPolicySpec getSpecification() {\n-        return specification;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.types.AccountPolicySpec;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+\r\n+public class AccountPolicyTO extends PolicyTO {\r\n+\r\n+    private static final long serialVersionUID = -1557150042828800134L;\r\n+\r\n+    private AccountPolicySpec specification;\r\n+\r\n+    public AccountPolicyTO() {\r\n+        this(false);\r\n+    }\r\n+\r\n+    public AccountPolicyTO(boolean global) {\r\n+        super();\r\n+\r\n+        this.type = global\r\n+                ? PolicyType.GLOBAL_ACCOUNT\r\n+                : PolicyType.ACCOUNT;\r\n+    }\r\n+\r\n+    public void setSpecification(final AccountPolicySpec specification) {\r\n+        this.specification = specification;\r\n+    }\r\n+\r\n+    public AccountPolicySpec getSpecification() {\r\n+        return specification;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/AccountPolicyTO.java"},{"sha":"26090726addbc9e0ba30cb1dd046c08c73f13c8c","filename":"common/src/main/java/org/apache/syncope/common/to/AttributeTO.java","status":"renamed","additions":112,"deletions":111,"changes":223,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAttributeTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,111 +1,112 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public class AttributeTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 4941691338796323623L;\n-\n-    /**\n-     * Name of the schema that this attribute is referring to.\n-     */\n-    private String schema;\n-\n-    /**\n-     * Set of (string) values of this attribute.\n-     */\n-    private List<String> values;\n-\n-    /**\n-     * Whether this attribute is read-only or not.\n-     */\n-    private boolean readonly;\n-\n-    /**\n-     * Default constructor.\n-     */\n-    public AttributeTO() {\n-        super();\n-        values = new ArrayList<String>();\n-        readonly = false;\n-    }\n-\n-    /**\n-     * @return the name of the schema that this attribute is referring to\n-     */\n-    public String getSchema() {\n-        return schema;\n-    }\n-\n-    /**\n-     * @param schema name to be set\n-     */\n-    public void setSchema(final String schema) {\n-        this.schema = schema;\n-\n-    }\n-\n-    /**\n-     * @param value an attribute value to be added\n-     * @return whether the operation succeeded or not\n-     */\n-    public boolean addValue(final String value) {\n-        return value == null || isReadonly()\n-                ? false\n-                : values.add(value);\n-    }\n-\n-    /**\n-     * @param value an attribute value to be removed\n-     * @return whether the operation succeeded or not\n-     */\n-    public boolean removeValue(final String value) {\n-        return value == null || isReadonly()\n-                ? false\n-                : values.remove(value);\n-    }\n-\n-    /**\n-     * @return attribute values as strings\n-     */\n-    public List<String> getValues() {\n-        return values;\n-    }\n-\n-    /**\n-     * @param values set of (string) values\n-     */\n-    public void setValues(final List<String> values) {\n-        if (!isReadonly()) {\n-            this.values = values;\n-        }\n-    }\n-\n-    public boolean isReadonly() {\n-        return readonly;\n-    }\n-\n-    public void setReadonly(boolean readonly) {\n-        this.readonly = readonly;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public class AttributeTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 4941691338796323623L;\r\n+\r\n+    /**\r\n+     * Name of the schema that this attribute is referring to.\r\n+     */\r\n+    private String schema;\r\n+\r\n+    /**\r\n+     * Set of (string) values of this attribute.\r\n+     */\r\n+    private List<String> values;\r\n+\r\n+    /**\r\n+     * Whether this attribute is read-only or not.\r\n+     */\r\n+    private boolean readonly;\r\n+\r\n+    /**\r\n+     * Default constructor.\r\n+     */\r\n+    public AttributeTO() {\r\n+        super();\r\n+        values = new ArrayList<String>();\r\n+        readonly = false;\r\n+    }\r\n+\r\n+    /**\r\n+     * @return the name of the schema that this attribute is referring to\r\n+     */\r\n+    public String getSchema() {\r\n+        return schema;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param schema name to be set\r\n+     */\r\n+    public void setSchema(final String schema) {\r\n+        this.schema = schema;\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * @param value an attribute value to be added\r\n+     * @return whether the operation succeeded or not\r\n+     */\r\n+    public boolean addValue(final String value) {\r\n+        return value == null || isReadonly()\r\n+                ? false\r\n+                : values.add(value);\r\n+    }\r\n+\r\n+    /**\r\n+     * @param value an attribute value to be removed\r\n+     * @return whether the operation succeeded or not\r\n+     */\r\n+    public boolean removeValue(final String value) {\r\n+        return value == null || isReadonly()\r\n+                ? false\r\n+                : values.remove(value);\r\n+    }\r\n+\r\n+    /**\r\n+     * @return attribute values as strings\r\n+     */\r\n+    public List<String> getValues() {\r\n+        return values;\r\n+    }\r\n+\r\n+    /**\r\n+     * @param values set of (string) values\r\n+     */\r\n+    public void setValues(final List<String> values) {\r\n+        if (!isReadonly()) {\r\n+            this.values = values;\r\n+        }\r\n+    }\r\n+\r\n+    public boolean isReadonly() {\r\n+        return readonly;\r\n+    }\r\n+\r\n+    public void setReadonly(boolean readonly) {\r\n+        this.readonly = readonly;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/AttributeTO.java"},{"sha":"1b6485f3300c177111626e6a606aefe690b802da","filename":"common/src/main/java/org/apache/syncope/common/to/ConfigurationTO.java","status":"renamed","additions":51,"deletions":51,"changes":102,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfigurationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfigurationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConfigurationTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,51 +1,51 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-@XmlRootElement(name = \"configuration\")\n-@XmlType\n-public class ConfigurationTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -3825039700228595590L;\n-\n-    private String key;\n-\n-    private String value;\n-\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    public void setKey(final String key) {\n-        this.key = key;\n-    }\n-\n-    public String getValue() {\n-        return value;\n-    }\n-\n-    public void setValue(final String value) {\n-        this.value = value;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement(name = \"configuration\")\r\n+@XmlType\r\n+public class ConfigurationTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -3825039700228595590L;\r\n+\r\n+    private String key;\r\n+\r\n+    private String value;\r\n+\r\n+    public String getKey() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public void setKey(final String key) {\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(final String value) {\r\n+        this.value = value;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/ConfigurationTO.java"},{"sha":"2f1a135b42802d23ec9720fb8963843b699df858","filename":"common/src/main/java/org/apache/syncope/common/to/ConnBundleTO.java","status":"renamed","additions":97,"deletions":97,"changes":194,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnBundleTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,97 +1,97 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.ConnConfPropSchema;\n-\n-@XmlRootElement(name = \"connectorBundle\")\n-@XmlType\n-public class ConnBundleTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 7215115961910138005L;\n-\n-    private String displayName;\n-\n-    private String bundleName;\n-\n-    private String version;\n-\n-    private String connectorName;\n-\n-    private List<ConnConfPropSchema> properties = new ArrayList<ConnConfPropSchema>();\n-\n-    public String getBundleName() {\n-        return bundleName;\n-    }\n-\n-    public void setBundleName(final String bundleName) {\n-        this.bundleName = bundleName;\n-    }\n-\n-    public String getConnectorName() {\n-        return connectorName;\n-    }\n-\n-    public void setConnectorName(final String connectorName) {\n-        this.connectorName = connectorName;\n-    }\n-\n-    public String getDisplayName() {\n-        return displayName;\n-    }\n-\n-    public void setDisplayName(final String displayName) {\n-        this.displayName = displayName;\n-    }\n-\n-    @XmlElementWrapper(name = \"properties\")\n-    @XmlElement(name = \"connConfPropSchema\")\n-    public List<ConnConfPropSchema> getProperties() {\n-        return properties;\n-    }\n-\n-    public void setProperties(final List<ConnConfPropSchema> properties) {\n-        this.properties = properties;\n-    }\n-\n-    public boolean addProperty(final ConnConfPropSchema property) {\n-        return properties.add(property);\n-    }\n-\n-    public boolean removeProperty(final ConnConfPropSchema property) {\n-        return properties.remove(property);\n-    }\n-\n-    public String getVersion() {\n-        return version;\n-    }\n-\n-    public void setVersion(final String version) {\n-        this.version = version;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.ConnConfPropSchema;\r\n+\r\n+@XmlRootElement(name = \"connectorBundle\")\r\n+@XmlType\r\n+public class ConnBundleTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 7215115961910138005L;\r\n+\r\n+    private String displayName;\r\n+\r\n+    private String bundleName;\r\n+\r\n+    private String version;\r\n+\r\n+    private String connectorName;\r\n+\r\n+    private List<ConnConfPropSchema> properties = new ArrayList<ConnConfPropSchema>();\r\n+\r\n+    public String getBundleName() {\r\n+        return bundleName;\r\n+    }\r\n+\r\n+    public void setBundleName(final String bundleName) {\r\n+        this.bundleName = bundleName;\r\n+    }\r\n+\r\n+    public String getConnectorName() {\r\n+        return connectorName;\r\n+    }\r\n+\r\n+    public void setConnectorName(final String connectorName) {\r\n+        this.connectorName = connectorName;\r\n+    }\r\n+\r\n+    public String getDisplayName() {\r\n+        return displayName;\r\n+    }\r\n+\r\n+    public void setDisplayName(final String displayName) {\r\n+        this.displayName = displayName;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"properties\")\r\n+    @XmlElement(name = \"connConfPropSchema\")\r\n+    public List<ConnConfPropSchema> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    public void setProperties(final List<ConnConfPropSchema> properties) {\r\n+        this.properties = properties;\r\n+    }\r\n+\r\n+    public boolean addProperty(final ConnConfPropSchema property) {\r\n+        return properties.add(property);\r\n+    }\r\n+\r\n+    public boolean removeProperty(final ConnConfPropSchema property) {\r\n+        return properties.remove(property);\r\n+    }\r\n+\r\n+    public String getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setVersion(final String version) {\r\n+        this.version = version;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/ConnBundleTO.java"},{"sha":"12f9dad0ce6659debc238da758a34b304d6668b5","filename":"common/src/main/java/org/apache/syncope/common/to/ConnInstanceTO.java","status":"renamed","additions":163,"deletions":163,"changes":326,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnInstanceTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,163 +1,163 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.Collections;\n-import java.util.EnumSet;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.Map;\n-import java.util.Set;\n-\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.ConnectorCapability;\n-\n-@XmlRootElement(name = \"connector\")\n-@XmlType\n-public class ConnInstanceTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 2707778645445168671L;\n-\n-    private long id;\n-\n-    private String bundleName;\n-\n-    private String version;\n-\n-    private String connectorName;\n-\n-    private final Set<ConnConfProperty> configuration;\n-\n-    private final Set<ConnectorCapability> capabilities;\n-\n-    private String displayName;\n-\n-    public ConnInstanceTO() {\n-        super();\n-\n-        configuration = new HashSet<ConnConfProperty>();\n-        capabilities = EnumSet.noneOf(ConnectorCapability.class);\n-    }\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    public String getBundleName() {\n-        return bundleName;\n-    }\n-\n-    public void setBundleName(String bundlename) {\n-        this.bundleName = bundlename;\n-    }\n-\n-    public String getVersion() {\n-        return version;\n-    }\n-\n-    public void setVersion(String bundleversion) {\n-        this.version = bundleversion;\n-    }\n-\n-    @XmlElementWrapper(name = \"configuration\")\n-    @XmlElement(name = \"property\")\n-    public Set<ConnConfProperty> getConfiguration() {\n-        return this.configuration;\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, ConnConfProperty> getConfigurationMap() {\n-        Map<String, ConnConfProperty> result;\n-\n-        if (getConfiguration() == null) {\n-            result = Collections.emptyMap();\n-        } else {\n-            result = new HashMap<String, ConnConfProperty>();\n-            for (ConnConfProperty prop : getConfiguration()) {\n-                result.put(prop.getSchema().getName(), prop);\n-            }\n-            result = Collections.unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-\n-    public boolean addConfiguration(ConnConfProperty property) {\n-        return this.configuration.add(property);\n-    }\n-\n-    public boolean removeConfiguration(ConnConfProperty property) {\n-        return this.configuration.remove(property);\n-    }\n-\n-    public void setConfiguration(Set<ConnConfProperty> configuration) {\n-        this.configuration.clear();\n-        if (configuration != null && !configuration.isEmpty()) {\n-            this.configuration.addAll(configuration);\n-        }\n-    }\n-\n-    public String getConnectorName() {\n-        return connectorName;\n-    }\n-\n-    public void setConnectorName(String connectorname) {\n-        this.connectorName = connectorname;\n-    }\n-\n-    public boolean addCapability(ConnectorCapability capability) {\n-        return capabilities.add(capability);\n-    }\n-\n-    public boolean removeCapability(ConnectorCapability capability) {\n-        return capabilities.remove(capability);\n-    }\n-\n-    @XmlElementWrapper(name = \"capabilities\")\n-    @XmlElement(name = \"capability\")\n-    public Set<ConnectorCapability> getCapabilities() {\n-        return capabilities;\n-    }\n-\n-    public void setCapabilities(final Set<ConnectorCapability> capabilities) {\n-        this.capabilities.clear();\n-        if (capabilities != null && !capabilities.isEmpty()) {\n-            this.capabilities.addAll(capabilities);\n-        }\n-    }\n-\n-    public String getDisplayName() {\n-        return displayName;\n-    }\n-\n-    public void setDisplayName(String displayName) {\n-        this.displayName = displayName;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.EnumSet;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.ConnConfProperty;\r\n+import org.apache.syncope.common.types.ConnectorCapability;\r\n+\r\n+@XmlRootElement(name = \"connector\")\r\n+@XmlType\r\n+public class ConnInstanceTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 2707778645445168671L;\r\n+\r\n+    private long id;\r\n+\r\n+    private String bundleName;\r\n+\r\n+    private String version;\r\n+\r\n+    private String connectorName;\r\n+\r\n+    private final Set<ConnConfProperty> configuration;\r\n+\r\n+    private final Set<ConnectorCapability> capabilities;\r\n+\r\n+    private String displayName;\r\n+\r\n+    public ConnInstanceTO() {\r\n+        super();\r\n+\r\n+        configuration = new HashSet<ConnConfProperty>();\r\n+        capabilities = EnumSet.noneOf(ConnectorCapability.class);\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getBundleName() {\r\n+        return bundleName;\r\n+    }\r\n+\r\n+    public void setBundleName(String bundlename) {\r\n+        this.bundleName = bundlename;\r\n+    }\r\n+\r\n+    public String getVersion() {\r\n+        return version;\r\n+    }\r\n+\r\n+    public void setVersion(String bundleversion) {\r\n+        this.version = bundleversion;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"configuration\")\r\n+    @XmlElement(name = \"property\")\r\n+    public Set<ConnConfProperty> getConfiguration() {\r\n+        return this.configuration;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, ConnConfProperty> getConfigurationMap() {\r\n+        Map<String, ConnConfProperty> result;\r\n+\r\n+        if (getConfiguration() == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, ConnConfProperty>();\r\n+            for (ConnConfProperty prop : getConfiguration()) {\r\n+                result.put(prop.getSchema().getName(), prop);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public boolean addConfiguration(ConnConfProperty property) {\r\n+        return this.configuration.add(property);\r\n+    }\r\n+\r\n+    public boolean removeConfiguration(ConnConfProperty property) {\r\n+        return this.configuration.remove(property);\r\n+    }\r\n+\r\n+    public void setConfiguration(Set<ConnConfProperty> configuration) {\r\n+        this.configuration.clear();\r\n+        if (configuration != null && !configuration.isEmpty()) {\r\n+            this.configuration.addAll(configuration);\r\n+        }\r\n+    }\r\n+\r\n+    public String getConnectorName() {\r\n+        return connectorName;\r\n+    }\r\n+\r\n+    public void setConnectorName(String connectorname) {\r\n+        this.connectorName = connectorname;\r\n+    }\r\n+\r\n+    public boolean addCapability(ConnectorCapability capability) {\r\n+        return capabilities.add(capability);\r\n+    }\r\n+\r\n+    public boolean removeCapability(ConnectorCapability capability) {\r\n+        return capabilities.remove(capability);\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"capabilities\")\r\n+    @XmlElement(name = \"capability\")\r\n+    public Set<ConnectorCapability> getCapabilities() {\r\n+        return capabilities;\r\n+    }\r\n+\r\n+    public void setCapabilities(final Set<ConnectorCapability> capabilities) {\r\n+        this.capabilities.clear();\r\n+        if (capabilities != null && !capabilities.isEmpty()) {\r\n+            this.capabilities.addAll(capabilities);\r\n+        }\r\n+    }\r\n+\r\n+    public String getDisplayName() {\r\n+        return displayName;\r\n+    }\r\n+\r\n+    public void setDisplayName(String displayName) {\r\n+        this.displayName = displayName;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/ConnInstanceTO.java"},{"sha":"9ca73ec2bc5aef024902c5753739e3fe8d74507f","filename":"common/src/main/java/org/apache/syncope/common/to/ConnObjectTO.java","status":"renamed","additions":74,"deletions":73,"changes":147,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FConnObjectTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,73 +1,74 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-\n-public class ConnObjectTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 5139554911265442497L;\n-\n-    private List<AttributeTO> attributes;\n-\n-    public ConnObjectTO() {\n-        super();\n-\n-        attributes = new ArrayList<AttributeTO>();\n-    }\n-\n-    public boolean addAttribute(final AttributeTO attribute) {\n-        return attributes.add(attribute);\n-    }\n-\n-    public boolean removeAttribute(final AttributeTO attribute) {\n-        return attributes.remove(attribute);\n-    }\n-\n-    public List<AttributeTO> getAttributes() {\n-        return attributes;\n-    }\n-\n-    public void setAttributes(final List<AttributeTO> attributes) {\n-        this.attributes = attributes;\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, AttributeTO> getAttributeMap() {\n-        Map<String, AttributeTO> result;\n-\n-        if (attributes == null) {\n-            result = Collections.<String, AttributeTO>emptyMap();\n-        } else {\n-            result = new HashMap<String, AttributeTO>(attributes.size());\n-            for (AttributeTO attributeTO : attributes) {\n-                result.put(attributeTO.getSchema(), attributeTO);\n-            }\n-            result = Collections.<String, AttributeTO>unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public class ConnObjectTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 5139554911265442497L;\r\n+\r\n+    private List<AttributeTO> attributes;\r\n+\r\n+    public ConnObjectTO() {\r\n+        super();\r\n+\r\n+        attributes = new ArrayList<AttributeTO>();\r\n+    }\r\n+\r\n+    public boolean addAttribute(final AttributeTO attribute) {\r\n+        return attributes.add(attribute);\r\n+    }\r\n+\r\n+    public boolean removeAttribute(final AttributeTO attribute) {\r\n+        return attributes.remove(attribute);\r\n+    }\r\n+\r\n+    public List<AttributeTO> getAttributes() {\r\n+        return attributes;\r\n+    }\r\n+\r\n+    public void setAttributes(final List<AttributeTO> attributes) {\r\n+        this.attributes = attributes;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, AttributeTO> getAttributeMap() {\r\n+        Map<String, AttributeTO> result;\r\n+\r\n+        if (attributes == null) {\r\n+            result = Collections.<String, AttributeTO>emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, AttributeTO>(attributes.size());\r\n+            for (AttributeTO attributeTO : attributes) {\r\n+                result.put(attributeTO.getSchema(), attributeTO);\r\n+            }\r\n+            result = Collections.<String, AttributeTO>unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/ConnObjectTO.java"},{"sha":"4184c8adde31020a4052ffa251fe5803b2e94a60","filename":"common/src/main/java/org/apache/syncope/common/to/DerivedSchemaTO.java","status":"renamed","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FDerivedSchemaTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,35 +1,35 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-\n-public class DerivedSchemaTO extends AbstractSchemaTO {\n-\n-    private static final long serialVersionUID = -6747399803792103108L;\n-\n-    private String expression;\n-\n-    public String getExpression() {\n-        return expression;\n-    }\n-\n-    public void setExpression(String expression) {\n-        this.expression = expression;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+\r\n+public class DerivedSchemaTO extends AbstractSchemaTO {\r\n+\r\n+    private static final long serialVersionUID = -6747399803792103108L;\r\n+\r\n+    private String expression;\r\n+\r\n+    public String getExpression() {\r\n+        return expression;\r\n+    }\r\n+\r\n+    public void setExpression(String expression) {\r\n+        this.expression = expression;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/DerivedSchemaTO.java"},{"sha":"3c28fa9959caf59060cd57ad388c18e9a3329cc7","filename":"common/src/main/java/org/apache/syncope/common/to/EntitlementTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEntitlementTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEntitlementTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FEntitlementTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,12 +16,12 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.client.to;\r\n+package org.apache.syncope.common.to;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.client.AbstractBaseBean;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n @XmlRootElement(name = \"entitlement\")\r\n @XmlType\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/EntitlementTO.java"},{"sha":"1d2a4ffee82384a2088080aba97ae3b752d0516d","filename":"common/src/main/java/org/apache/syncope/common/to/LoggerTO.java","status":"renamed","additions":47,"deletions":47,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FLoggerTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,47 +1,47 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.SyncopeLoggerLevel;\n-\n-public class LoggerTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -7794833835668648505L;\n-\n-    private String name;\n-\n-    private SyncopeLoggerLevel level;\n-\n-    public SyncopeLoggerLevel getLevel() {\n-        return level;\n-    }\n-\n-    public void setLevel(final SyncopeLoggerLevel level) {\n-        this.level = level;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.SyncopeLoggerLevel;\r\n+\r\n+public class LoggerTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -7794833835668648505L;\r\n+\r\n+    private String name;\r\n+\r\n+    private SyncopeLoggerLevel level;\r\n+\r\n+    public SyncopeLoggerLevel getLevel() {\r\n+        return level;\r\n+    }\r\n+\r\n+    public void setLevel(final SyncopeLoggerLevel level) {\r\n+        this.level = level;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/LoggerTO.java"},{"sha":"2ebd5df260865033a0a7192c08f95db7716ee2dd","filename":"common/src/main/java/org/apache/syncope/common/to/MailTemplateTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMailTemplateTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMailTemplateTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMailTemplateTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,12 +16,12 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.client.to;\r\n+package org.apache.syncope.common.to;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.client.AbstractBaseBean;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n @XmlRootElement(name = \"mailTemplate\")\r\n @XmlType\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/MailTemplateTO.java"},{"sha":"1bea9a27590edec73fa0fe83640de5a6b0fb2c07","filename":"common/src/main/java/org/apache/syncope/common/to/MappingItemTO.java","status":"renamed","additions":116,"deletions":116,"changes":232,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingItemTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,116 +1,116 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.IntMappingType;\n-\n-public class MappingItemTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 2983498836767176862L;\n-\n-    private Long id;\n-\n-    /**\n-     * Attribute schema to be mapped. Consider that we can associate tha same attribute schema more than once, with\n-     * different aliases, to different resource attributes.\n-     */\n-    private String intAttrName;\n-\n-    /**\n-     * Schema type to be mapped.\n-     */\n-    private IntMappingType intMappingType;\n-\n-    /**\n-     * External resource's field to be mapped.\n-     */\n-    private String extAttrName;\n-\n-    /**\n-     * Specify if the mapped target resource's field is the key.\n-     */\n-    private boolean accountid;\n-\n-    /**\n-     * Specify if the mapped target resource's field is the password.\n-     */\n-    private boolean password;\n-\n-    /**\n-     * Specify if the mapped target resource's field is nullable.\n-     */\n-    private String mandatoryCondition = \"false\";\n-\n-    public boolean isAccountid() {\n-        return accountid;\n-    }\n-\n-    public void setAccountid(boolean accountid) {\n-        this.accountid = accountid;\n-    }\n-\n-    public String getExtAttrName() {\n-        return extAttrName;\n-    }\n-\n-    public void setExtAttrName(String extAttrName) {\n-        this.extAttrName = extAttrName;\n-    }\n-\n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-\n-    public String getMandatoryCondition() {\n-        return mandatoryCondition;\n-    }\n-\n-    public void setMandatoryCondition(String mandatoryCondition) {\n-        this.mandatoryCondition = mandatoryCondition;\n-    }\n-\n-    public boolean isPassword() {\n-        return password;\n-    }\n-\n-    public void setPassword(boolean password) {\n-        this.password = password;\n-    }\n-\n-    public String getIntAttrName() {\n-        return intAttrName;\n-    }\n-\n-    public void setIntAttrName(String intAttrName) {\n-        this.intAttrName = intAttrName;\n-    }\n-\n-    public IntMappingType getIntMappingType() {\n-        return intMappingType;\n-    }\n-\n-    public void setIntMappingType(IntMappingType intMappingType) {\n-        this.intMappingType = intMappingType;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+\r\n+public class MappingItemTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 2983498836767176862L;\r\n+\r\n+    private Long id;\r\n+\r\n+    /**\r\n+     * Attribute schema to be mapped. Consider that we can associate tha same attribute schema more than once, with\r\n+     * different aliases, to different resource attributes.\r\n+     */\r\n+    private String intAttrName;\r\n+\r\n+    /**\r\n+     * Schema type to be mapped.\r\n+     */\r\n+    private IntMappingType intMappingType;\r\n+\r\n+    /**\r\n+     * External resource's field to be mapped.\r\n+     */\r\n+    private String extAttrName;\r\n+\r\n+    /**\r\n+     * Specify if the mapped target resource's field is the key.\r\n+     */\r\n+    private boolean accountid;\r\n+\r\n+    /**\r\n+     * Specify if the mapped target resource's field is the password.\r\n+     */\r\n+    private boolean password;\r\n+\r\n+    /**\r\n+     * Specify if the mapped target resource's field is nullable.\r\n+     */\r\n+    private String mandatoryCondition = \"false\";\r\n+\r\n+    public boolean isAccountid() {\r\n+        return accountid;\r\n+    }\r\n+\r\n+    public void setAccountid(boolean accountid) {\r\n+        this.accountid = accountid;\r\n+    }\r\n+\r\n+    public String getExtAttrName() {\r\n+        return extAttrName;\r\n+    }\r\n+\r\n+    public void setExtAttrName(String extAttrName) {\r\n+        this.extAttrName = extAttrName;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getMandatoryCondition() {\r\n+        return mandatoryCondition;\r\n+    }\r\n+\r\n+    public void setMandatoryCondition(String mandatoryCondition) {\r\n+        this.mandatoryCondition = mandatoryCondition;\r\n+    }\r\n+\r\n+    public boolean isPassword() {\r\n+        return password;\r\n+    }\r\n+\r\n+    public void setPassword(boolean password) {\r\n+        this.password = password;\r\n+    }\r\n+\r\n+    public String getIntAttrName() {\r\n+        return intAttrName;\r\n+    }\r\n+\r\n+    public void setIntAttrName(String intAttrName) {\r\n+        this.intAttrName = intAttrName;\r\n+    }\r\n+\r\n+    public IntMappingType getIntMappingType() {\r\n+        return intMappingType;\r\n+    }\r\n+\r\n+    public void setIntMappingType(IntMappingType intMappingType) {\r\n+        this.intMappingType = intMappingType;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/MappingItemTO.java"},{"sha":"e0ffc0176511e3bfbc1048604492990dec150398","filename":"common/src/main/java/org/apache/syncope/common/to/MappingTO.java","status":"renamed","additions":124,"deletions":123,"changes":247,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMappingTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,123 +1,124 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.List;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.IntMappingType;\n-\n-public class MappingTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 8447688036282611118L;\n-\n-    private String accountLink;\n-\n-    private List<MappingItemTO> items;\n-\n-    public MappingTO() {\n-        super();\n-\n-        items = new ArrayList<MappingItemTO>();\n-    }\n-\n-    public String getAccountLink() {\n-        return accountLink;\n-    }\n-\n-    public void setAccountLink(String accountLink) {\n-        this.accountLink = accountLink;\n-    }\n-\n-    public <T extends MappingItemTO> T getAccountIdItem() {\n-        T accountIdItem = null;\n-        for (MappingItemTO item : getItems()) {\n-            if (item.isAccountid()) {\n-                accountIdItem = (T) item;\n-            }\n-        }\n-        return accountIdItem;\n-    }\n-\n-    protected <T extends MappingItemTO> boolean addAccountIdItem(final T accountIdItem) {\n-        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.RoleVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\n-                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\n-\n-            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\n-        }\n-        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\n-            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\n-        }\n-\n-        accountIdItem.setExtAttrName(\"__NAME__\");\n-        accountIdItem.setAccountid(true);\n-\n-        return this.addItem(accountIdItem);\n-    }\n-\n-    public boolean setAccountIdItem(final MappingItemTO accountIdItem) {\n-        if (accountIdItem == null) {\n-            return this.removeItem(getAccountIdItem());\n-        } else {\n-            return addAccountIdItem(accountIdItem);\n-        }\n-    }\n-\n-    public MappingItemTO getPasswordItem() {\n-        MappingItemTO passwordItem = null;\n-        for (MappingItemTO item : getItems()) {\n-            if (item.isPassword()) {\n-                passwordItem = item;\n-            }\n-        }\n-        return passwordItem;\n-    }\n-\n-    public boolean setPasswordItem(final MappingItemTO passwordItem) {\n-        if (passwordItem == null) {\n-            return this.removeItem(getPasswordItem());\n-        } else {\n-            passwordItem.setExtAttrName(\"__PASSWORD__\");\n-            passwordItem.setPassword(true);\n-            return addItem(passwordItem);\n-        }\n-    }\n-\n-    public <T extends MappingItemTO> List<T> getItems() {\n-        return (List<T>) items;\n-    }\n-\n-    public boolean addItem(final MappingItemTO item) {\n-        return item == null ? false : this.items.contains(item) || this.items.add(item);\n-    }\n-\n-    public boolean removeItem(final MappingItemTO item) {\n-        return this.items.remove(item);\n-    }\n-\n-    public void setItems(final Collection<MappingItemTO> items) {\n-        this.items.clear();\n-        if (items != null && !items.isEmpty()) {\n-            this.items.addAll(items);\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+\r\n+public class MappingTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 8447688036282611118L;\r\n+\r\n+    private String accountLink;\r\n+\r\n+    private List<MappingItemTO> items;\r\n+\r\n+    public MappingTO() {\r\n+        super();\r\n+\r\n+        items = new ArrayList<MappingItemTO>();\r\n+    }\r\n+\r\n+    public String getAccountLink() {\r\n+        return accountLink;\r\n+    }\r\n+\r\n+    public void setAccountLink(String accountLink) {\r\n+        this.accountLink = accountLink;\r\n+    }\r\n+\r\n+    public <T extends MappingItemTO> T getAccountIdItem() {\r\n+        T accountIdItem = null;\r\n+        for (MappingItemTO item : getItems()) {\r\n+            if (item.isAccountid()) {\r\n+                accountIdItem = (T) item;\r\n+            }\r\n+        }\r\n+        return accountIdItem;\r\n+    }\r\n+\r\n+    protected <T extends MappingItemTO> boolean addAccountIdItem(final T accountIdItem) {\r\n+        if (IntMappingType.UserVirtualSchema == accountIdItem.getIntMappingType()\r\n+                || IntMappingType.RoleVirtualSchema == accountIdItem.getIntMappingType()\r\n+                || IntMappingType.MembershipVirtualSchema == accountIdItem.getIntMappingType()\r\n+                || IntMappingType.Password == accountIdItem.getIntMappingType()) {\r\n+\r\n+            throw new IllegalArgumentException(\"Virtual attributes cannot be set as accountId\");\r\n+        }\r\n+        if (IntMappingType.Password == accountIdItem.getIntMappingType()) {\r\n+            throw new IllegalArgumentException(\"Password attributes cannot be set as accountId\");\r\n+        }\r\n+\r\n+        accountIdItem.setExtAttrName(\"__NAME__\");\r\n+        accountIdItem.setAccountid(true);\r\n+\r\n+        return this.addItem(accountIdItem);\r\n+    }\r\n+\r\n+    public boolean setAccountIdItem(final MappingItemTO accountIdItem) {\r\n+        if (accountIdItem == null) {\r\n+            return this.removeItem(getAccountIdItem());\r\n+        } else {\r\n+            return addAccountIdItem(accountIdItem);\r\n+        }\r\n+    }\r\n+\r\n+    public MappingItemTO getPasswordItem() {\r\n+        MappingItemTO passwordItem = null;\r\n+        for (MappingItemTO item : getItems()) {\r\n+            if (item.isPassword()) {\r\n+                passwordItem = item;\r\n+            }\r\n+        }\r\n+        return passwordItem;\r\n+    }\r\n+\r\n+    public boolean setPasswordItem(final MappingItemTO passwordItem) {\r\n+        if (passwordItem == null) {\r\n+            return this.removeItem(getPasswordItem());\r\n+        } else {\r\n+            passwordItem.setExtAttrName(\"__PASSWORD__\");\r\n+            passwordItem.setPassword(true);\r\n+            return addItem(passwordItem);\r\n+        }\r\n+    }\r\n+\r\n+    public <T extends MappingItemTO> List<T> getItems() {\r\n+        return (List<T>) items;\r\n+    }\r\n+\r\n+    public boolean addItem(final MappingItemTO item) {\r\n+        return item == null ? false : this.items.contains(item) || this.items.add(item);\r\n+    }\r\n+\r\n+    public boolean removeItem(final MappingItemTO item) {\r\n+        return this.items.remove(item);\r\n+    }\r\n+\r\n+    public void setItems(final Collection<MappingItemTO> items) {\r\n+        this.items.clear();\r\n+        if (items != null && !items.isEmpty()) {\r\n+            this.items.addAll(items);\r\n+        }\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/MappingTO.java"},{"sha":"db055632fed786109105053087697f9b47745840","filename":"common/src/main/java/org/apache/syncope/common/to/MembershipTO.java","status":"renamed","additions":86,"deletions":86,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FMembershipTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,86 +1,86 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.Collections;\n-import java.util.List;\n-import java.util.Set;\n-\n-public class MembershipTO extends AbstractAttributableTO {\n-\n-    private static final long serialVersionUID = 5992828670273935861L;\n-\n-    private long roleId;\n-\n-    private String roleName;\n-\n-    public long getRoleId() {\n-        return roleId;\n-    }\n-\n-    public void setRoleId(long roleId) {\n-        this.roleId = roleId;\n-    }\n-\n-    public String getRoleName() {\n-        return roleName;\n-    }\n-\n-    public void setRoleName(String roleName) {\n-        this.roleName = roleName;\n-    }\n-\n-    @Override\n-    public boolean addResource(String resource) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean removeResource(String resource) {\n-        return false;\n-    }\n-\n-    @Override\n-    public Set<String> getResources() {\n-        return Collections.EMPTY_SET;\n-    }\n-\n-    @Override\n-    public void setResources(Set<String> resources) {\n-    }\n-\n-    @Override\n-    public boolean addPropagationTO(PropagationTO status) {\n-        return false;\n-    }\n-\n-    @Override\n-    public boolean removePropagationTO(String resource) {\n-        return false;\n-    }\n-\n-    @Override\n-    public List<PropagationTO> getPropagationTOs() {\n-        return Collections.EMPTY_LIST;\n-    }\n-\n-    @Override\n-    public void setPropagationTOs(List<PropagationTO> propagationTOs) {\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.Collections;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+public class MembershipTO extends AbstractAttributableTO {\r\n+\r\n+    private static final long serialVersionUID = 5992828670273935861L;\r\n+\r\n+    private long roleId;\r\n+\r\n+    private String roleName;\r\n+\r\n+    public long getRoleId() {\r\n+        return roleId;\r\n+    }\r\n+\r\n+    public void setRoleId(long roleId) {\r\n+        this.roleId = roleId;\r\n+    }\r\n+\r\n+    public String getRoleName() {\r\n+        return roleName;\r\n+    }\r\n+\r\n+    public void setRoleName(String roleName) {\r\n+        this.roleName = roleName;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean addResource(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean removeResource(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public Set<String> getResources() {\r\n+        return Collections.EMPTY_SET;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setResources(Set<String> resources) {\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean addPropagationTO(PropagationTO status) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public boolean removePropagationTO(String resource) {\r\n+        return false;\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<PropagationTO> getPropagationTOs() {\r\n+        return Collections.EMPTY_LIST;\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setPropagationTOs(List<PropagationTO> propagationTOs) {\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/MembershipTO.java"},{"sha":"ecfa7d098571d9419ca77ac473b93d2f71c28399","filename":"common/src/main/java/org/apache/syncope/common/to/NotificationTO.java","status":"renamed","additions":154,"deletions":153,"changes":307,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,153 +1,154 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.types.IntMappingType;\n-import org.apache.syncope.types.TraceLevel;\n-\n-public class NotificationTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -6145117115632592612L;\n-\n-    private Long id;\n-\n-    private List<String> events;\n-\n-    private NodeCond about;\n-\n-    private NodeCond recipients;\n-\n-    private IntMappingType recipientAttrType;\n-\n-    private String recipientAttrName;\n-\n-    private boolean selfAsRecipient;\n-\n-    private String sender;\n-\n-    private String subject;\n-\n-    private String template;\n-\n-    private TraceLevel traceLevel;\n-\n-    public NotificationTO() {\n-        events = new ArrayList<String>();\n-    }\n-\n-    public NodeCond getAbout() {\n-        return about;\n-    }\n-\n-    public void setAbout(NodeCond about) {\n-        this.about = about;\n-    }\n-\n-    public List<String> getEvents() {\n-        return events;\n-    }\n-\n-    public boolean addEvent(final String event) {\n-        return event != null && !events.contains(event) && events.add(event);\n-    }\n-\n-    public boolean removeEvent(final String event) {\n-        return event != null && events.remove(event);\n-    }\n-\n-    public void setEvents(List<String> events) {\n-        this.events = events;\n-    }\n-\n-    public Long getId() {\n-        return id;\n-    }\n-\n-    public void setId(Long id) {\n-        this.id = id;\n-    }\n-\n-    public NodeCond getRecipients() {\n-        return recipients;\n-    }\n-\n-    public void setRecipients(NodeCond recipients) {\n-        this.recipients = recipients;\n-    }\n-\n-    public String getRecipientAttrName() {\n-        return recipientAttrName;\n-    }\n-\n-    public void setRecipientAttrName(String recipientAttrName) {\n-        this.recipientAttrName = recipientAttrName;\n-    }\n-\n-    public IntMappingType getRecipientAttrType() {\n-        return recipientAttrType;\n-    }\n-\n-    public void setRecipientAttrType(IntMappingType recipientAttrType) {\n-        this.recipientAttrType = recipientAttrType;\n-    }\n-\n-    public boolean isSelfAsRecipient() {\n-        return selfAsRecipient;\n-    }\n-\n-    public void setSelfAsRecipient(boolean selfAsRecipient) {\n-        this.selfAsRecipient = selfAsRecipient;\n-    }\n-\n-    public String getSender() {\n-        return sender;\n-    }\n-\n-    public void setSender(String sender) {\n-        this.sender = sender;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getTemplate() {\n-        return template;\n-    }\n-\n-    public void setTemplate(String template) {\n-        this.template = template;\n-    }\n-\n-    public TraceLevel getTraceLevel() {\n-        return traceLevel;\n-    }\n-\n-    public void setTraceLevel(TraceLevel traceLevel) {\n-        this.traceLevel = traceLevel;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.types.IntMappingType;\r\n+import org.apache.syncope.common.types.TraceLevel;\r\n+\r\n+public class NotificationTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -6145117115632592612L;\r\n+\r\n+    private Long id;\r\n+\r\n+    private List<String> events;\r\n+\r\n+    private NodeCond about;\r\n+\r\n+    private NodeCond recipients;\r\n+\r\n+    private IntMappingType recipientAttrType;\r\n+\r\n+    private String recipientAttrName;\r\n+\r\n+    private boolean selfAsRecipient;\r\n+\r\n+    private String sender;\r\n+\r\n+    private String subject;\r\n+\r\n+    private String template;\r\n+\r\n+    private TraceLevel traceLevel;\r\n+\r\n+    public NotificationTO() {\r\n+        events = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public NodeCond getAbout() {\r\n+        return about;\r\n+    }\r\n+\r\n+    public void setAbout(NodeCond about) {\r\n+        this.about = about;\r\n+    }\r\n+\r\n+    public List<String> getEvents() {\r\n+        return events;\r\n+    }\r\n+\r\n+    public boolean addEvent(final String event) {\r\n+        return event != null && !events.contains(event) && events.add(event);\r\n+    }\r\n+\r\n+    public boolean removeEvent(final String event) {\r\n+        return event != null && events.remove(event);\r\n+    }\r\n+\r\n+    public void setEvents(List<String> events) {\r\n+        this.events = events;\r\n+    }\r\n+\r\n+    public Long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(Long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public NodeCond getRecipients() {\r\n+        return recipients;\r\n+    }\r\n+\r\n+    public void setRecipients(NodeCond recipients) {\r\n+        this.recipients = recipients;\r\n+    }\r\n+\r\n+    public String getRecipientAttrName() {\r\n+        return recipientAttrName;\r\n+    }\r\n+\r\n+    public void setRecipientAttrName(String recipientAttrName) {\r\n+        this.recipientAttrName = recipientAttrName;\r\n+    }\r\n+\r\n+    public IntMappingType getRecipientAttrType() {\r\n+        return recipientAttrType;\r\n+    }\r\n+\r\n+    public void setRecipientAttrType(IntMappingType recipientAttrType) {\r\n+        this.recipientAttrType = recipientAttrType;\r\n+    }\r\n+\r\n+    public boolean isSelfAsRecipient() {\r\n+        return selfAsRecipient;\r\n+    }\r\n+\r\n+    public void setSelfAsRecipient(boolean selfAsRecipient) {\r\n+        this.selfAsRecipient = selfAsRecipient;\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public void setSender(String sender) {\r\n+        this.sender = sender;\r\n+    }\r\n+\r\n+    public String getSubject() {\r\n+        return subject;\r\n+    }\r\n+\r\n+    public void setSubject(String subject) {\r\n+        this.subject = subject;\r\n+    }\r\n+\r\n+    public String getTemplate() {\r\n+        return template;\r\n+    }\r\n+\r\n+    public void setTemplate(String template) {\r\n+        this.template = template;\r\n+    }\r\n+\r\n+    public TraceLevel getTraceLevel() {\r\n+        return traceLevel;\r\n+    }\r\n+\r\n+    public void setTraceLevel(TraceLevel traceLevel) {\r\n+        this.traceLevel = traceLevel;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/NotificationTO.java"},{"sha":"afb1702336629f1a50458b71aca914960046fd9a","filename":"common/src/main/java/org/apache/syncope/common/to/NotificationTaskTO.java","status":"renamed","additions":116,"deletions":115,"changes":231,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FNotificationTaskTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,115 +1,116 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.apache.syncope.types.TraceLevel;\n-\n-public class NotificationTaskTO extends TaskTO {\n-\n-    private static final long serialVersionUID = 371671242591093846L;\n-\n-    private Set<String> recipients;\n-\n-    private String sender;\n-\n-    private String subject;\n-\n-    private String textBody;\n-\n-    private String htmlBody;\n-\n-    private boolean executed;\n-\n-    private TraceLevel traceLevel;\n-\n-    public NotificationTaskTO() {\n-        super();\n-\n-        recipients = new HashSet<String>();\n-    }\n-\n-    public Set<String> getRecipients() {\n-        return recipients;\n-    }\n-\n-    public boolean addRecipient(final String recipient) {\n-        return recipients.add(recipient);\n-    }\n-\n-    public boolean removeRecipient(final String recipient) {\n-        return recipients.remove(recipient);\n-    }\n-\n-    public void setRecipients(final Set<String> recipients) {\n-        this.recipients.clear();\n-        if (recipients != null) {\n-            this.recipients.addAll(recipients);\n-        }\n-    }\n-\n-    public String getSender() {\n-        return sender;\n-    }\n-\n-    public void setSender(final String sender) {\n-        this.sender = sender;\n-    }\n-\n-    public String getSubject() {\n-        return subject;\n-    }\n-\n-    public void setSubject(final String subject) {\n-        this.subject = subject;\n-    }\n-\n-    public String getTextBody() {\n-        return textBody;\n-    }\n-\n-    public void setTextBody(final String textBody) {\n-        this.textBody = textBody;\n-    }\n-\n-    public String getHtmlBody() {\n-        return htmlBody;\n-    }\n-\n-    public void setHtmlBody(final String htmlBody) {\n-        this.htmlBody = htmlBody;\n-    }\n-\n-    public boolean isExecuted() {\n-        return executed;\n-    }\n-\n-    public void setExecuted(boolean executed) {\n-        this.executed = executed;\n-    }\n-\n-    public TraceLevel getTraceLevel() {\n-        return traceLevel;\n-    }\n-\n-    public void setTraceLevel(TraceLevel traceLevel) {\n-        this.traceLevel = traceLevel;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.syncope.common.types.TraceLevel;\r\n+\r\n+public class NotificationTaskTO extends TaskTO {\r\n+\r\n+    private static final long serialVersionUID = 371671242591093846L;\r\n+\r\n+    private Set<String> recipients;\r\n+\r\n+    private String sender;\r\n+\r\n+    private String subject;\r\n+\r\n+    private String textBody;\r\n+\r\n+    private String htmlBody;\r\n+\r\n+    private boolean executed;\r\n+\r\n+    private TraceLevel traceLevel;\r\n+\r\n+    public NotificationTaskTO() {\r\n+        super();\r\n+\r\n+        recipients = new HashSet<String>();\r\n+    }\r\n+\r\n+    public Set<String> getRecipients() {\r\n+        return recipients;\r\n+    }\r\n+\r\n+    public boolean addRecipient(final String recipient) {\r\n+        return recipients.add(recipient);\r\n+    }\r\n+\r\n+    public boolean removeRecipient(final String recipient) {\r\n+        return recipients.remove(recipient);\r\n+    }\r\n+\r\n+    public void setRecipients(final Set<String> recipients) {\r\n+        this.recipients.clear();\r\n+        if (recipients != null) {\r\n+            this.recipients.addAll(recipients);\r\n+        }\r\n+    }\r\n+\r\n+    public String getSender() {\r\n+        return sender;\r\n+    }\r\n+\r\n+    public void setSender(final String sender) {\r\n+        this.sender = sender;\r\n+    }\r\n+\r\n+    public String getSubject() {\r\n+        return subject;\r\n+    }\r\n+\r\n+    public void setSubject(final String subject) {\r\n+        this.subject = subject;\r\n+    }\r\n+\r\n+    public String getTextBody() {\r\n+        return textBody;\r\n+    }\r\n+\r\n+    public void setTextBody(final String textBody) {\r\n+        this.textBody = textBody;\r\n+    }\r\n+\r\n+    public String getHtmlBody() {\r\n+        return htmlBody;\r\n+    }\r\n+\r\n+    public void setHtmlBody(final String htmlBody) {\r\n+        this.htmlBody = htmlBody;\r\n+    }\r\n+\r\n+    public boolean isExecuted() {\r\n+        return executed;\r\n+    }\r\n+\r\n+    public void setExecuted(boolean executed) {\r\n+        this.executed = executed;\r\n+    }\r\n+\r\n+    public TraceLevel getTraceLevel() {\r\n+        return traceLevel;\r\n+    }\r\n+\r\n+    public void setTraceLevel(TraceLevel traceLevel) {\r\n+        this.traceLevel = traceLevel;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/NotificationTaskTO.java"},{"sha":"c3fb145f479c5e292a1cd94b8d594cbec2b26891","filename":"common/src/main/java/org/apache/syncope/common/to/PasswordPolicyTO.java","status":"renamed","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPasswordPolicyTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,49 +1,49 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.types.PasswordPolicySpec;\n-import org.apache.syncope.types.PolicyType;\n-\n-public class PasswordPolicyTO extends PolicyTO {\n-\n-    private static final long serialVersionUID = -5606086441294799690L;\n-\n-    private PasswordPolicySpec specification;\n-\n-    public PasswordPolicyTO() {\n-        this(false);\n-    }\n-\n-    public PasswordPolicyTO(boolean global) {\n-        super();\n-\n-        this.type = global\n-                ? PolicyType.GLOBAL_PASSWORD\n-                : PolicyType.PASSWORD;\n-    }\n-\n-    public void setSpecification(final PasswordPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-    public PasswordPolicySpec getSpecification() {\n-        return specification;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.types.PasswordPolicySpec;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+\r\n+public class PasswordPolicyTO extends PolicyTO {\r\n+\r\n+    private static final long serialVersionUID = -5606086441294799690L;\r\n+\r\n+    private PasswordPolicySpec specification;\r\n+\r\n+    public PasswordPolicyTO() {\r\n+        this(false);\r\n+    }\r\n+\r\n+    public PasswordPolicyTO(boolean global) {\r\n+        super();\r\n+\r\n+        this.type = global\r\n+                ? PolicyType.GLOBAL_PASSWORD\r\n+                : PolicyType.PASSWORD;\r\n+    }\r\n+\r\n+    public void setSpecification(final PasswordPolicySpec specification) {\r\n+        this.specification = specification;\r\n+    }\r\n+\r\n+    public PasswordPolicySpec getSpecification() {\r\n+        return specification;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/PasswordPolicyTO.java"},{"sha":"4b5c645aac6aba01b692e892947af104a3daed32","filename":"common/src/main/java/org/apache/syncope/common/to/PolicyTO.java","status":"renamed","additions":53,"deletions":53,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPolicyTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,53 +1,53 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.PolicyType;\n-\n-public abstract class PolicyTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -2903888572649721035L;\n-\n-    private long id;\n-\n-    private String description;\n-\n-    protected PolicyType type;\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n-    public PolicyType getType() {\n-        return type;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+\r\n+public abstract class PolicyTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -2903888572649721035L;\r\n+\r\n+    private long id;\r\n+\r\n+    private String description;\r\n+\r\n+    protected PolicyType type;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public PolicyType getType() {\r\n+        return type;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/PolicyTO.java"},{"sha":"8a5870fbc07165562c24e3783436ba2df673c725","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationTO.java","status":"renamed","additions":125,"deletions":125,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,125 +1,125 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.PropagationTaskExecStatus;\n-\n-/**\n- * Single propagation status.\n- */\n-public class PropagationTO extends AbstractBaseBean {\n-\n-    /**\n-     * Serial version ID.\n-     */\n-    private static final long serialVersionUID = 3921498450222857690L;\n-\n-    /**\n-     * Object before propagation.\n-     */\n-    private ConnObjectTO beforeObj;\n-\n-    /**\n-     * Object after propagation.\n-     */\n-    private ConnObjectTO afterObj;\n-\n-    /**\n-     * Propagated resource name.\n-     */\n-    private String resourceName;\n-\n-    /**\n-     * Propagation task execution status.\n-     */\n-    private PropagationTaskExecStatus status;\n-\n-    /**\n-     * After object getter.\n-     *\n-     * @return after object.\n-     */\n-    public ConnObjectTO getAfterObj() {\n-        return afterObj;\n-    }\n-\n-    /**\n-     * After object setter.\n-     *\n-     * @param afterObj object.\n-     */\n-    public void setAfterObj(final ConnObjectTO afterObj) {\n-        this.afterObj = afterObj;\n-    }\n-\n-    /**\n-     * Before object getter.\n-     *\n-     * @return before object.\n-     */\n-    public ConnObjectTO getBeforeObj() {\n-        return beforeObj;\n-    }\n-\n-    /**\n-     * Before object setter.\n-     *\n-     * @param beforeObj object.\n-     */\n-    public void setBeforeObj(final ConnObjectTO beforeObj) {\n-        this.beforeObj = beforeObj;\n-    }\n-\n-    /**\n-     * resource name getter.\n-     *\n-     * @return resource name.\n-     */\n-    public String getResourceName() {\n-        return resourceName;\n-    }\n-\n-    /**\n-     * Resource name setter.\n-     *\n-     * @param resourceName resource name.\n-     */\n-    public void setResourceName(final String resourceName) {\n-        this.resourceName = resourceName;\n-    }\n-\n-    /**\n-     * Propagation execution status getter.\n-     *\n-     * @return status.\n-     */\n-    public PropagationTaskExecStatus getStatus() {\n-        return status;\n-    }\n-\n-    /**\n-     * Propagation execution status setter.\n-     *\n-     * @param status propagation execution status.\n-     */\n-    public void setStatus(final PropagationTaskExecStatus status) {\n-        this.status = status;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.PropagationTaskExecStatus;\r\n+\r\n+/**\r\n+ * Single propagation status.\r\n+ */\r\n+public class PropagationTO extends AbstractBaseBean {\r\n+\r\n+    /**\r\n+     * Serial version ID.\r\n+     */\r\n+    private static final long serialVersionUID = 3921498450222857690L;\r\n+\r\n+    /**\r\n+     * Object before propagation.\r\n+     */\r\n+    private ConnObjectTO beforeObj;\r\n+\r\n+    /**\r\n+     * Object after propagation.\r\n+     */\r\n+    private ConnObjectTO afterObj;\r\n+\r\n+    /**\r\n+     * Propagated resource name.\r\n+     */\r\n+    private String resourceName;\r\n+\r\n+    /**\r\n+     * Propagation task execution status.\r\n+     */\r\n+    private PropagationTaskExecStatus status;\r\n+\r\n+    /**\r\n+     * After object getter.\r\n+     *\r\n+     * @return after object.\r\n+     */\r\n+    public ConnObjectTO getAfterObj() {\r\n+        return afterObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * After object setter.\r\n+     *\r\n+     * @param afterObj object.\r\n+     */\r\n+    public void setAfterObj(final ConnObjectTO afterObj) {\r\n+        this.afterObj = afterObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * Before object getter.\r\n+     *\r\n+     * @return before object.\r\n+     */\r\n+    public ConnObjectTO getBeforeObj() {\r\n+        return beforeObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * Before object setter.\r\n+     *\r\n+     * @param beforeObj object.\r\n+     */\r\n+    public void setBeforeObj(final ConnObjectTO beforeObj) {\r\n+        this.beforeObj = beforeObj;\r\n+    }\r\n+\r\n+    /**\r\n+     * resource name getter.\r\n+     *\r\n+     * @return resource name.\r\n+     */\r\n+    public String getResourceName() {\r\n+        return resourceName;\r\n+    }\r\n+\r\n+    /**\r\n+     * Resource name setter.\r\n+     *\r\n+     * @param resourceName resource name.\r\n+     */\r\n+    public void setResourceName(final String resourceName) {\r\n+        this.resourceName = resourceName;\r\n+    }\r\n+\r\n+    /**\r\n+     * Propagation execution status getter.\r\n+     *\r\n+     * @return status.\r\n+     */\r\n+    public PropagationTaskExecStatus getStatus() {\r\n+        return status;\r\n+    }\r\n+\r\n+    /**\r\n+     * Propagation execution status setter.\r\n+     *\r\n+     * @param status propagation execution status.\r\n+     */\r\n+    public void setStatus(final PropagationTaskExecStatus status) {\r\n+        this.status = status;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/PropagationTO.java"},{"sha":"f39a3d6141010ab6686a3978f848b6628de0911b","filename":"common/src/main/java/org/apache/syncope/common/to/PropagationTaskTO.java","status":"renamed","additions":119,"deletions":119,"changes":238,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FPropagationTaskTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,119 +1,119 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.PropagationMode;\n-import org.apache.syncope.types.ResourceOperation;\n-\n-public class PropagationTaskTO extends TaskTO {\n-\n-    private static final long serialVersionUID = 386450127003321197L;\n-\n-    private PropagationMode propagationMode;\n-\n-    private ResourceOperation propagationOperation;\n-\n-    private String accountId;\n-\n-    private String oldAccountId;\n-\n-    private String xmlAttributes;\n-\n-    private String resource;\n-\n-    private String objectClassName;\n-\n-    private AttributableType subjectType;\n-\n-    private Long subjectId;\n-\n-    public String getAccountId() {\n-        return accountId;\n-    }\n-\n-    public void setAccountId(String accountId) {\n-        this.accountId = accountId;\n-    }\n-\n-    public String getOldAccountId() {\n-        return oldAccountId;\n-    }\n-\n-    public void setOldAccountId(String oldAccountId) {\n-        this.oldAccountId = oldAccountId;\n-    }\n-\n-    public PropagationMode getPropagationMode() {\n-        return propagationMode;\n-    }\n-\n-    public void setPropagationMode(PropagationMode propagationMode) {\n-        this.propagationMode = propagationMode;\n-    }\n-\n-    public String getResource() {\n-        return resource;\n-    }\n-\n-    public void setResource(String resource) {\n-        this.resource = resource;\n-    }\n-\n-    public ResourceOperation getPropagationOperation() {\n-        return propagationOperation;\n-    }\n-\n-    public void setPropagationOperation(ResourceOperation propagationOperation) {\n-\n-        this.propagationOperation = propagationOperation;\n-    }\n-\n-    public String getXmlAttributes() {\n-        return xmlAttributes;\n-    }\n-\n-    public void setXmlAttributes(String xmlAttributes) {\n-        this.xmlAttributes = xmlAttributes;\n-    }\n-\n-    public String getObjectClassName() {\n-        return objectClassName;\n-    }\n-\n-    public void setObjectClassName(String objectClassName) {\n-        this.objectClassName = objectClassName;\n-    }\n-\n-    public AttributableType getSubjectType() {\n-        return subjectType;\n-    }\n-\n-    public void setSubjectType(AttributableType subjectType) {\n-        this.subjectType = subjectType;\n-    }\n-\n-    public Long getSubjectId() {\n-        return subjectId;\n-    }\n-\n-    public void setSubjectId(Long subjectId) {\n-        this.subjectId = subjectId;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.types.AttributableType;\r\n+import org.apache.syncope.common.types.PropagationMode;\r\n+import org.apache.syncope.common.types.ResourceOperation;\r\n+\r\n+public class PropagationTaskTO extends TaskTO {\r\n+\r\n+    private static final long serialVersionUID = 386450127003321197L;\r\n+\r\n+    private PropagationMode propagationMode;\r\n+\r\n+    private ResourceOperation propagationOperation;\r\n+\r\n+    private String accountId;\r\n+\r\n+    private String oldAccountId;\r\n+\r\n+    private String xmlAttributes;\r\n+\r\n+    private String resource;\r\n+\r\n+    private String objectClassName;\r\n+\r\n+    private AttributableType subjectType;\r\n+\r\n+    private Long subjectId;\r\n+\r\n+    public String getAccountId() {\r\n+        return accountId;\r\n+    }\r\n+\r\n+    public void setAccountId(String accountId) {\r\n+        this.accountId = accountId;\r\n+    }\r\n+\r\n+    public String getOldAccountId() {\r\n+        return oldAccountId;\r\n+    }\r\n+\r\n+    public void setOldAccountId(String oldAccountId) {\r\n+        this.oldAccountId = oldAccountId;\r\n+    }\r\n+\r\n+    public PropagationMode getPropagationMode() {\r\n+        return propagationMode;\r\n+    }\r\n+\r\n+    public void setPropagationMode(PropagationMode propagationMode) {\r\n+        this.propagationMode = propagationMode;\r\n+    }\r\n+\r\n+    public String getResource() {\r\n+        return resource;\r\n+    }\r\n+\r\n+    public void setResource(String resource) {\r\n+        this.resource = resource;\r\n+    }\r\n+\r\n+    public ResourceOperation getPropagationOperation() {\r\n+        return propagationOperation;\r\n+    }\r\n+\r\n+    public void setPropagationOperation(ResourceOperation propagationOperation) {\r\n+\r\n+        this.propagationOperation = propagationOperation;\r\n+    }\r\n+\r\n+    public String getXmlAttributes() {\r\n+        return xmlAttributes;\r\n+    }\r\n+\r\n+    public void setXmlAttributes(String xmlAttributes) {\r\n+        this.xmlAttributes = xmlAttributes;\r\n+    }\r\n+\r\n+    public String getObjectClassName() {\r\n+        return objectClassName;\r\n+    }\r\n+\r\n+    public void setObjectClassName(String objectClassName) {\r\n+        this.objectClassName = objectClassName;\r\n+    }\r\n+\r\n+    public AttributableType getSubjectType() {\r\n+        return subjectType;\r\n+    }\r\n+\r\n+    public void setSubjectType(AttributableType subjectType) {\r\n+        this.subjectType = subjectType;\r\n+    }\r\n+\r\n+    public Long getSubjectId() {\r\n+        return subjectId;\r\n+    }\r\n+\r\n+    public void setSubjectId(Long subjectId) {\r\n+        this.subjectId = subjectId;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/PropagationTaskTO.java"},{"sha":"1b5d0b2c341400f6772cda0e3102166c86d545a8","filename":"common/src/main/java/org/apache/syncope/common/to/ReportExecTO.java","status":"renamed","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportExecTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,40 +1,40 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.types.ReportExecStatus;\n-\n-public class ReportExecTO extends AbstractExecTO {\n-\n-    private static final long serialVersionUID = -1025555939724089215L;\n-\n-    private long report;\n-\n-    public long getReport() {\n-        return report;\n-    }\n-\n-    public void setReport(long report) {\n-        this.report = report;\n-    }\n-\n-    public void setStatus(ReportExecStatus status) {\n-        super.setStatus(status.name());\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.types.ReportExecStatus;\r\n+\r\n+public class ReportExecTO extends AbstractExecTO {\r\n+\r\n+    private static final long serialVersionUID = -1025555939724089215L;\r\n+\r\n+    private long report;\r\n+\r\n+    public long getReport() {\r\n+        return report;\r\n+    }\r\n+\r\n+    public void setReport(long report) {\r\n+        this.report = report;\r\n+    }\r\n+\r\n+    public void setStatus(ReportExecStatus status) {\r\n+        super.setStatus(status.name());\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/ReportExecTO.java"},{"sha":"385d5a7e3626a0c570a90a403126d5322c20991e","filename":"common/src/main/java/org/apache/syncope/common/to/ReportTO.java","status":"renamed","additions":169,"deletions":169,"changes":338,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FReportTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,169 +1,169 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.client.report.ReportletConf;\n-\n-public class ReportTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 5274568072084814410L;\n-\n-    private long id;\n-\n-    private String name;\n-\n-    private List<ReportletConf> reportletConfs;\n-\n-    private String cronExpression;\n-\n-    private List<ReportExecTO> executions;\n-\n-    private String latestExecStatus;\n-\n-    private Date lastExec;\n-\n-    private Date nextExec;\n-\n-    private Date startDate;\n-\n-    private Date endDate;\n-\n-    public ReportTO() {\n-        super();\n-\n-        reportletConfs = new ArrayList<ReportletConf>();\n-        executions = new ArrayList<ReportExecTO>();\n-    }\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public boolean addReportletConf(ReportletConf reportlet) {\n-        return this.reportletConfs.add(reportlet);\n-    }\n-\n-    public boolean removeReportletConf(ReportletConf reportlet) {\n-        return this.reportletConfs.remove(reportlet);\n-    }\n-\n-    public List<ReportletConf> getReportletConfs() {\n-        return reportletConfs;\n-    }\n-\n-    public void setReportletConfs(List<ReportletConf> reportlets) {\n-        this.reportletConfs = reportlets;\n-    }\n-\n-    public String getCronExpression() {\n-        return cronExpression;\n-    }\n-\n-    public void setCronExpression(String cronExpression) {\n-        this.cronExpression = cronExpression;\n-    }\n-\n-    public boolean addExecution(ReportExecTO execution) {\n-        return executions.add(execution);\n-    }\n-\n-    public boolean removeExecution(ReportExecTO execution) {\n-        return executions.remove(execution);\n-    }\n-\n-    public List<ReportExecTO> getExecutions() {\n-        return executions;\n-    }\n-\n-    public void setExecutions(List<ReportExecTO> executions) {\n-        this.executions = executions;\n-    }\n-\n-    public String getLatestExecStatus() {\n-        return latestExecStatus;\n-    }\n-\n-    public void setLatestExecStatus(String latestExecStatus) {\n-        this.latestExecStatus = latestExecStatus;\n-    }\n-\n-    public Date getLastExec() {\n-        return lastExec == null\n-                ? null\n-                : new Date(lastExec.getTime());\n-    }\n-\n-    public void setLastExec(Date lastExec) {\n-        if (lastExec != null) {\n-            this.lastExec = new Date(lastExec.getTime());\n-        }\n-    }\n-\n-    public Date getNextExec() {\n-        return nextExec == null\n-                ? null\n-                : new Date(nextExec.getTime());\n-    }\n-\n-    public void setNextExec(Date nextExec) {\n-        if (nextExec != null) {\n-            this.nextExec = new Date(nextExec.getTime());\n-        }\n-    }\n-     \n-    public Date getStartDate() {\n-        return startDate == null\n-                ? null\n-                : new Date(startDate.getTime());\n-    }\n-\n-    public void setStartDate(Date startDate) {\n-        if (startDate != null) {\n-            this.startDate = new Date(startDate.getTime());\n-        }\n-    }\n-\n-    public Date getEndDate() {\n-        return endDate == null\n-                ? null\n-                : new Date(endDate.getTime());\n-    }\n-\n-    public void setEndDate(Date endDate) {\n-        if (endDate != null) {\n-            this.endDate = new Date(endDate.getTime());\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.report.ReportletConf;\r\n+\r\n+public class ReportTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 5274568072084814410L;\r\n+\r\n+    private long id;\r\n+\r\n+    private String name;\r\n+\r\n+    private List<ReportletConf> reportletConfs;\r\n+\r\n+    private String cronExpression;\r\n+\r\n+    private List<ReportExecTO> executions;\r\n+\r\n+    private String latestExecStatus;\r\n+\r\n+    private Date lastExec;\r\n+\r\n+    private Date nextExec;\r\n+\r\n+    private Date startDate;\r\n+\r\n+    private Date endDate;\r\n+\r\n+    public ReportTO() {\r\n+        super();\r\n+\r\n+        reportletConfs = new ArrayList<ReportletConf>();\r\n+        executions = new ArrayList<ReportExecTO>();\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public boolean addReportletConf(ReportletConf reportlet) {\r\n+        return this.reportletConfs.add(reportlet);\r\n+    }\r\n+\r\n+    public boolean removeReportletConf(ReportletConf reportlet) {\r\n+        return this.reportletConfs.remove(reportlet);\r\n+    }\r\n+\r\n+    public List<ReportletConf> getReportletConfs() {\r\n+        return reportletConfs;\r\n+    }\r\n+\r\n+    public void setReportletConfs(List<ReportletConf> reportlets) {\r\n+        this.reportletConfs = reportlets;\r\n+    }\r\n+\r\n+    public String getCronExpression() {\r\n+        return cronExpression;\r\n+    }\r\n+\r\n+    public void setCronExpression(String cronExpression) {\r\n+        this.cronExpression = cronExpression;\r\n+    }\r\n+\r\n+    public boolean addExecution(ReportExecTO execution) {\r\n+        return executions.add(execution);\r\n+    }\r\n+\r\n+    public boolean removeExecution(ReportExecTO execution) {\r\n+        return executions.remove(execution);\r\n+    }\r\n+\r\n+    public List<ReportExecTO> getExecutions() {\r\n+        return executions;\r\n+    }\r\n+\r\n+    public void setExecutions(List<ReportExecTO> executions) {\r\n+        this.executions = executions;\r\n+    }\r\n+\r\n+    public String getLatestExecStatus() {\r\n+        return latestExecStatus;\r\n+    }\r\n+\r\n+    public void setLatestExecStatus(String latestExecStatus) {\r\n+        this.latestExecStatus = latestExecStatus;\r\n+    }\r\n+\r\n+    public Date getLastExec() {\r\n+        return lastExec == null\r\n+                ? null\r\n+                : new Date(lastExec.getTime());\r\n+    }\r\n+\r\n+    public void setLastExec(Date lastExec) {\r\n+        if (lastExec != null) {\r\n+            this.lastExec = new Date(lastExec.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getNextExec() {\r\n+        return nextExec == null\r\n+                ? null\r\n+                : new Date(nextExec.getTime());\r\n+    }\r\n+\r\n+    public void setNextExec(Date nextExec) {\r\n+        if (nextExec != null) {\r\n+            this.nextExec = new Date(nextExec.getTime());\r\n+        }\r\n+    }\r\n+     \r\n+    public Date getStartDate() {\r\n+        return startDate == null\r\n+                ? null\r\n+                : new Date(startDate.getTime());\r\n+    }\r\n+\r\n+    public void setStartDate(Date startDate) {\r\n+        if (startDate != null) {\r\n+            this.startDate = new Date(startDate.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getEndDate() {\r\n+        return endDate == null\r\n+                ? null\r\n+                : new Date(endDate.getTime());\r\n+    }\r\n+\r\n+    public void setEndDate(Date endDate) {\r\n+        if (endDate != null) {\r\n+            this.endDate = new Date(endDate.getTime());\r\n+        }\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/ReportTO.java"},{"sha":"c165533cbe8b55836e4374c986275be9f446c05a","filename":"common/src/main/java/org/apache/syncope/common/to/ResourceTO.java","status":"renamed","additions":241,"deletions":240,"changes":481,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,240 +1,241 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.PropagationMode;\n-import org.apache.syncope.types.TraceLevel;\n-\n-public class ResourceTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -9193551354041698963L;\n-\n-    /**\n-     * The resource identifier is the name.\n-     */\n-    private String name;\n-\n-    /**\n-     * The resource type is identified by the associated connector.\n-     */\n-    private Long connectorId;\n-\n-    private MappingTO umapping;\n-\n-    private MappingTO rmapping;\n-\n-    private boolean propagationPrimary;\n-\n-    private int propagationPriority;\n-\n-    private PropagationMode propagationMode;\n-\n-    private boolean enforceMandatoryCondition;\n-\n-    private TraceLevel createTraceLevel;\n-\n-    private TraceLevel updateTraceLevel;\n-\n-    private TraceLevel deleteTraceLevel;\n-\n-    private TraceLevel syncTraceLevel;\n-\n-    private Long passwordPolicy;\n-\n-    private Long accountPolicy;\n-\n-    private Long syncPolicy;\n-\n-    private Set<ConnConfProperty> connConfProperties;\n-\n-    private String usyncToken;\n-\n-    private String rsyncToken;\n-\n-    private String propagationActionsClassName;\n-\n-    public ResourceTO() {\n-        super();\n-\n-        connConfProperties = new HashSet<ConnConfProperty>();\n-        propagationMode = PropagationMode.TWO_PHASES;\n-        propagationPriority = 0;\n-\n-        createTraceLevel = TraceLevel.ALL;\n-        updateTraceLevel = TraceLevel.ALL;\n-        deleteTraceLevel = TraceLevel.ALL;\n-        syncTraceLevel = TraceLevel.ALL;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public boolean isEnforceMandatoryCondition() {\n-        return enforceMandatoryCondition;\n-    }\n-\n-    public void setEnforceMandatoryCondition(boolean enforceMandatoryCondition) {\n-        this.enforceMandatoryCondition = enforceMandatoryCondition;\n-    }\n-\n-    public Long getConnectorId() {\n-        return connectorId;\n-    }\n-\n-    public void setConnectorId(Long connectorId) {\n-        this.connectorId = connectorId;\n-    }\n-\n-    public MappingTO getUmapping() {\n-        return umapping;\n-    }\n-\n-    public void setUmapping(MappingTO umapping) {\n-        this.umapping = umapping;\n-    }\n-\n-    public MappingTO getRmapping() {\n-        return rmapping;\n-    }\n-\n-    public void setRmapping(MappingTO rmapping) {\n-        this.rmapping = rmapping;\n-    }\n-\n-    public boolean isPropagationPrimary() {\n-        return propagationPrimary;\n-    }\n-\n-    public void setPropagationPrimary(boolean propagationPrimary) {\n-        this.propagationPrimary = propagationPrimary;\n-    }\n-\n-    public int getPropagationPriority() {\n-        return propagationPriority;\n-    }\n-\n-    public void setPropagationPriority(int propagationPriority) {\n-        this.propagationPriority = propagationPriority;\n-    }\n-\n-    public PropagationMode getPropagationMode() {\n-        return propagationMode;\n-    }\n-\n-    public void setPropagationMode(PropagationMode propagationMode) {\n-        this.propagationMode = propagationMode;\n-    }\n-\n-    public TraceLevel getCreateTraceLevel() {\n-        return createTraceLevel;\n-    }\n-\n-    public void setCreateTraceLevel(TraceLevel createTraceLevel) {\n-        this.createTraceLevel = createTraceLevel;\n-    }\n-\n-    public TraceLevel getDeleteTraceLevel() {\n-        return deleteTraceLevel;\n-    }\n-\n-    public void setDeleteTraceLevel(TraceLevel deleteTraceLevel) {\n-        this.deleteTraceLevel = deleteTraceLevel;\n-    }\n-\n-    public TraceLevel getUpdateTraceLevel() {\n-        return updateTraceLevel;\n-    }\n-\n-    public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\n-        this.updateTraceLevel = updateTraceLevel;\n-    }\n-\n-    public Long getPasswordPolicy() {\n-        return passwordPolicy;\n-    }\n-\n-    public void setPasswordPolicy(Long passwordPolicy) {\n-        this.passwordPolicy = passwordPolicy;\n-    }\n-\n-    public Long getAccountPolicy() {\n-        return accountPolicy;\n-    }\n-\n-    public void setAccountPolicy(Long accountPolicy) {\n-        this.accountPolicy = accountPolicy;\n-    }\n-\n-    public Long getSyncPolicy() {\n-        return syncPolicy;\n-    }\n-\n-    public void setSyncPolicy(Long syncPolicy) {\n-        this.syncPolicy = syncPolicy;\n-    }\n-\n-    public Set<ConnConfProperty> getConnConfProperties() {\n-        return connConfProperties;\n-    }\n-\n-    public void setConnectorConfigurationProperties(final Set<ConnConfProperty> connConfProperties) {\n-        this.connConfProperties = connConfProperties;\n-    }\n-\n-    public TraceLevel getSyncTraceLevel() {\n-        return syncTraceLevel;\n-    }\n-\n-    public void setSyncTraceLevel(final TraceLevel syncTraceLevel) {\n-        this.syncTraceLevel = syncTraceLevel;\n-    }\n-\n-    public String getUsyncToken() {\n-        return usyncToken;\n-    }\n-\n-    public void setUsyncToken(final String syncToken) {\n-        this.usyncToken = syncToken;\n-    }\n-\n-    public String getRsyncToken() {\n-        return rsyncToken;\n-    }\n-\n-    public void setRsyncToken(final String syncToken) {\n-        this.rsyncToken = syncToken;\n-    }\n-\n-    public String getPropagationActionsClassName() {\n-        return propagationActionsClassName;\n-    }\n-\n-    public void setPropagationActionsClassName(final String propagationActionsClassName) {\n-        this.propagationActionsClassName = propagationActionsClassName;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.ConnConfProperty;\r\n+import org.apache.syncope.common.types.PropagationMode;\r\n+import org.apache.syncope.common.types.TraceLevel;\r\n+\r\n+public class ResourceTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -9193551354041698963L;\r\n+\r\n+    /**\r\n+     * The resource identifier is the name.\r\n+     */\r\n+    private String name;\r\n+\r\n+    /**\r\n+     * The resource type is identified by the associated connector.\r\n+     */\r\n+    private Long connectorId;\r\n+\r\n+    private MappingTO umapping;\r\n+\r\n+    private MappingTO rmapping;\r\n+\r\n+    private boolean propagationPrimary;\r\n+\r\n+    private int propagationPriority;\r\n+\r\n+    private PropagationMode propagationMode;\r\n+\r\n+    private boolean enforceMandatoryCondition;\r\n+\r\n+    private TraceLevel createTraceLevel;\r\n+\r\n+    private TraceLevel updateTraceLevel;\r\n+\r\n+    private TraceLevel deleteTraceLevel;\r\n+\r\n+    private TraceLevel syncTraceLevel;\r\n+\r\n+    private Long passwordPolicy;\r\n+\r\n+    private Long accountPolicy;\r\n+\r\n+    private Long syncPolicy;\r\n+\r\n+    private Set<ConnConfProperty> connConfProperties;\r\n+\r\n+    private String usyncToken;\r\n+\r\n+    private String rsyncToken;\r\n+\r\n+    private String propagationActionsClassName;\r\n+\r\n+    public ResourceTO() {\r\n+        super();\r\n+\r\n+        connConfProperties = new HashSet<ConnConfProperty>();\r\n+        propagationMode = PropagationMode.TWO_PHASES;\r\n+        propagationPriority = 0;\r\n+\r\n+        createTraceLevel = TraceLevel.ALL;\r\n+        updateTraceLevel = TraceLevel.ALL;\r\n+        deleteTraceLevel = TraceLevel.ALL;\r\n+        syncTraceLevel = TraceLevel.ALL;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public boolean isEnforceMandatoryCondition() {\r\n+        return enforceMandatoryCondition;\r\n+    }\r\n+\r\n+    public void setEnforceMandatoryCondition(boolean enforceMandatoryCondition) {\r\n+        this.enforceMandatoryCondition = enforceMandatoryCondition;\r\n+    }\r\n+\r\n+    public Long getConnectorId() {\r\n+        return connectorId;\r\n+    }\r\n+\r\n+    public void setConnectorId(Long connectorId) {\r\n+        this.connectorId = connectorId;\r\n+    }\r\n+\r\n+    public MappingTO getUmapping() {\r\n+        return umapping;\r\n+    }\r\n+\r\n+    public void setUmapping(MappingTO umapping) {\r\n+        this.umapping = umapping;\r\n+    }\r\n+\r\n+    public MappingTO getRmapping() {\r\n+        return rmapping;\r\n+    }\r\n+\r\n+    public void setRmapping(MappingTO rmapping) {\r\n+        this.rmapping = rmapping;\r\n+    }\r\n+\r\n+    public boolean isPropagationPrimary() {\r\n+        return propagationPrimary;\r\n+    }\r\n+\r\n+    public void setPropagationPrimary(boolean propagationPrimary) {\r\n+        this.propagationPrimary = propagationPrimary;\r\n+    }\r\n+\r\n+    public int getPropagationPriority() {\r\n+        return propagationPriority;\r\n+    }\r\n+\r\n+    public void setPropagationPriority(int propagationPriority) {\r\n+        this.propagationPriority = propagationPriority;\r\n+    }\r\n+\r\n+    public PropagationMode getPropagationMode() {\r\n+        return propagationMode;\r\n+    }\r\n+\r\n+    public void setPropagationMode(PropagationMode propagationMode) {\r\n+        this.propagationMode = propagationMode;\r\n+    }\r\n+\r\n+    public TraceLevel getCreateTraceLevel() {\r\n+        return createTraceLevel;\r\n+    }\r\n+\r\n+    public void setCreateTraceLevel(TraceLevel createTraceLevel) {\r\n+        this.createTraceLevel = createTraceLevel;\r\n+    }\r\n+\r\n+    public TraceLevel getDeleteTraceLevel() {\r\n+        return deleteTraceLevel;\r\n+    }\r\n+\r\n+    public void setDeleteTraceLevel(TraceLevel deleteTraceLevel) {\r\n+        this.deleteTraceLevel = deleteTraceLevel;\r\n+    }\r\n+\r\n+    public TraceLevel getUpdateTraceLevel() {\r\n+        return updateTraceLevel;\r\n+    }\r\n+\r\n+    public void setUpdateTraceLevel(TraceLevel updateTraceLevel) {\r\n+        this.updateTraceLevel = updateTraceLevel;\r\n+    }\r\n+\r\n+    public Long getPasswordPolicy() {\r\n+        return passwordPolicy;\r\n+    }\r\n+\r\n+    public void setPasswordPolicy(Long passwordPolicy) {\r\n+        this.passwordPolicy = passwordPolicy;\r\n+    }\r\n+\r\n+    public Long getAccountPolicy() {\r\n+        return accountPolicy;\r\n+    }\r\n+\r\n+    public void setAccountPolicy(Long accountPolicy) {\r\n+        this.accountPolicy = accountPolicy;\r\n+    }\r\n+\r\n+    public Long getSyncPolicy() {\r\n+        return syncPolicy;\r\n+    }\r\n+\r\n+    public void setSyncPolicy(Long syncPolicy) {\r\n+        this.syncPolicy = syncPolicy;\r\n+    }\r\n+\r\n+    public Set<ConnConfProperty> getConnConfProperties() {\r\n+        return connConfProperties;\r\n+    }\r\n+\r\n+    public void setConnectorConfigurationProperties(final Set<ConnConfProperty> connConfProperties) {\r\n+        this.connConfProperties = connConfProperties;\r\n+    }\r\n+\r\n+    public TraceLevel getSyncTraceLevel() {\r\n+        return syncTraceLevel;\r\n+    }\r\n+\r\n+    public void setSyncTraceLevel(final TraceLevel syncTraceLevel) {\r\n+        this.syncTraceLevel = syncTraceLevel;\r\n+    }\r\n+\r\n+    public String getUsyncToken() {\r\n+        return usyncToken;\r\n+    }\r\n+\r\n+    public void setUsyncToken(final String syncToken) {\r\n+        this.usyncToken = syncToken;\r\n+    }\r\n+\r\n+    public String getRsyncToken() {\r\n+        return rsyncToken;\r\n+    }\r\n+\r\n+    public void setRsyncToken(final String syncToken) {\r\n+        this.rsyncToken = syncToken;\r\n+    }\r\n+\r\n+    public String getPropagationActionsClassName() {\r\n+        return propagationActionsClassName;\r\n+    }\r\n+\r\n+    public void setPropagationActionsClassName(final String propagationActionsClassName) {\r\n+        this.propagationActionsClassName = propagationActionsClassName;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/ResourceTO.java"},{"sha":"610eedb6b9741c1d61dad2a878d082d591d9cb3f","filename":"common/src/main/java/org/apache/syncope/common/to/RoleTO.java","status":"renamed","additions":207,"deletions":207,"changes":414,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FRoleTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,207 +1,207 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.codehaus.jackson.annotate.JsonIgnoreProperties;\n-\n-@JsonIgnoreProperties({\"displayName\", \"empty\"})\n-public class RoleTO extends AbstractAttributableTO {\n-\n-    private static final long serialVersionUID = -7785920258290147542L;\n-\n-    private String name;\n-\n-    private long parent;\n-\n-    private Long userOwner;\n-\n-    private Long roleOwner;\n-\n-    private boolean inheritOwner;\n-\n-    private boolean inheritAttributes;\n-\n-    private boolean inheritDerivedAttributes;\n-\n-    private boolean inheritVirtualAttributes;\n-\n-    private boolean inheritPasswordPolicy;\n-\n-    private boolean inheritAccountPolicy;\n-\n-    private List<String> entitlements;\n-\n-    private Long passwordPolicy;\n-\n-    private Long accountPolicy;\n-\n-    public RoleTO() {\n-        entitlements = new ArrayList<String>();\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-\n-    public long getParent() {\n-        return parent;\n-    }\n-\n-    public void setParent(final long parent) {\n-        this.parent = parent;\n-    }\n-\n-    public Long getUserOwner() {\n-        return userOwner;\n-    }\n-\n-    public void setUserOwner(final Long userOwner) {\n-        this.userOwner = userOwner;\n-    }\n-\n-    public Long getRoleOwner() {\n-        return roleOwner;\n-    }\n-\n-    public void setRoleOwner(final Long roleOwner) {\n-        this.roleOwner = roleOwner;\n-    }\n-\n-    public boolean isInheritOwner() {\n-        return inheritOwner;\n-    }\n-\n-    public void setInheritOwner(final boolean inheritOwner) {\n-        this.inheritOwner = inheritOwner;\n-    }\n-\n-    public boolean isInheritAttributes() {\n-        return inheritAttributes;\n-    }\n-\n-    public void setInheritAttributes(final boolean inheritAttributes) {\n-        this.inheritAttributes = inheritAttributes;\n-    }\n-\n-    public boolean isInheritDerivedAttributes() {\n-        return inheritDerivedAttributes;\n-    }\n-\n-    public void setInheritDerivedAttributes(final boolean inheritDerivedAttributes) {\n-\n-        this.inheritDerivedAttributes = inheritDerivedAttributes;\n-    }\n-\n-    public boolean isInheritVirtualAttributes() {\n-        return inheritVirtualAttributes;\n-    }\n-\n-    public void setInheritVirtualAttributes(boolean inheritVirtualAttributes) {\n-        this.inheritVirtualAttributes = inheritVirtualAttributes;\n-    }\n-\n-    public boolean addEntitlement(String entitlement) {\n-        return entitlements.add(entitlement);\n-    }\n-\n-    public boolean removeEntitlement(String entitlement) {\n-        return entitlements.remove(entitlement);\n-    }\n-\n-    public List<String> getEntitlements() {\n-        return entitlements;\n-    }\n-\n-    public void setEntitlements(List<String> entitlements) {\n-        this.entitlements.clear();\n-        if (entitlements != null && !entitlements.isEmpty()) {\n-            this.entitlements.addAll(entitlements);\n-        }\n-    }\n-\n-    public Long getPasswordPolicy() {\n-        return passwordPolicy;\n-    }\n-\n-    public void setPasswordPolicy(Long passwordPolicy) {\n-        this.passwordPolicy = passwordPolicy;\n-    }\n-\n-    public boolean isInheritPasswordPolicy() {\n-        return inheritPasswordPolicy;\n-    }\n-\n-    /**\n-     * Specify if password policy must be inherited. In this case eventual passwordPolicy occurrence will be ignored.\n-     *\n-     * @param inheritPasswordPolicy 'true' to inherit policy, false otherwise.\n-     */\n-    public void setInheritPasswordPolicy(boolean inheritPasswordPolicy) {\n-        this.inheritPasswordPolicy = inheritPasswordPolicy;\n-    }\n-\n-    public Long getAccountPolicy() {\n-        return accountPolicy;\n-    }\n-\n-    public void setAccountPolicy(Long accountPolicy) {\n-        this.accountPolicy = accountPolicy;\n-    }\n-\n-    public boolean isInheritAccountPolicy() {\n-        return inheritAccountPolicy;\n-    }\n-\n-    /**\n-     * Specify if account policy must be inherited. In this case eventual accountPolicy occurrence will be ignored.\n-     *\n-     * @param inheritAccountPolicy 'true' to inherit policy, false otherwise.\n-     */\n-    public void setInheritAccountPolicy(boolean inheritAccountPolicy) {\n-        this.inheritAccountPolicy = inheritAccountPolicy;\n-    }\n-\n-    public String getDisplayName() {\n-        return getId() + \" \" + getName();\n-    }\n-\n-    public String getEmpty() {\n-        return \"\";\n-    }\n-\n-    public static long fromDisplayName(final String displayName) {\n-        long result = 0;\n-        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\n-            try {\n-                result = Long.valueOf(displayName.split(\" \")[0]);\n-            } catch (NumberFormatException e) {\n-                // just to avoid PMD warning about \"empty catch block\"\n-                result = 0;\n-            }\n-        }\n-\n-        return result;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+import org.codehaus.jackson.annotate.JsonIgnoreProperties;\r\n+\r\n+@JsonIgnoreProperties({\"displayName\", \"empty\"})\r\n+public class RoleTO extends AbstractAttributableTO {\r\n+\r\n+    private static final long serialVersionUID = -7785920258290147542L;\r\n+\r\n+    private String name;\r\n+\r\n+    private long parent;\r\n+\r\n+    private Long userOwner;\r\n+\r\n+    private Long roleOwner;\r\n+\r\n+    private boolean inheritOwner;\r\n+\r\n+    private boolean inheritAttributes;\r\n+\r\n+    private boolean inheritDerivedAttributes;\r\n+\r\n+    private boolean inheritVirtualAttributes;\r\n+\r\n+    private boolean inheritPasswordPolicy;\r\n+\r\n+    private boolean inheritAccountPolicy;\r\n+\r\n+    private List<String> entitlements;\r\n+\r\n+    private Long passwordPolicy;\r\n+\r\n+    private Long accountPolicy;\r\n+\r\n+    public RoleTO() {\r\n+        entitlements = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public long getParent() {\r\n+        return parent;\r\n+    }\r\n+\r\n+    public void setParent(final long parent) {\r\n+        this.parent = parent;\r\n+    }\r\n+\r\n+    public Long getUserOwner() {\r\n+        return userOwner;\r\n+    }\r\n+\r\n+    public void setUserOwner(final Long userOwner) {\r\n+        this.userOwner = userOwner;\r\n+    }\r\n+\r\n+    public Long getRoleOwner() {\r\n+        return roleOwner;\r\n+    }\r\n+\r\n+    public void setRoleOwner(final Long roleOwner) {\r\n+        this.roleOwner = roleOwner;\r\n+    }\r\n+\r\n+    public boolean isInheritOwner() {\r\n+        return inheritOwner;\r\n+    }\r\n+\r\n+    public void setInheritOwner(final boolean inheritOwner) {\r\n+        this.inheritOwner = inheritOwner;\r\n+    }\r\n+\r\n+    public boolean isInheritAttributes() {\r\n+        return inheritAttributes;\r\n+    }\r\n+\r\n+    public void setInheritAttributes(final boolean inheritAttributes) {\r\n+        this.inheritAttributes = inheritAttributes;\r\n+    }\r\n+\r\n+    public boolean isInheritDerivedAttributes() {\r\n+        return inheritDerivedAttributes;\r\n+    }\r\n+\r\n+    public void setInheritDerivedAttributes(final boolean inheritDerivedAttributes) {\r\n+\r\n+        this.inheritDerivedAttributes = inheritDerivedAttributes;\r\n+    }\r\n+\r\n+    public boolean isInheritVirtualAttributes() {\r\n+        return inheritVirtualAttributes;\r\n+    }\r\n+\r\n+    public void setInheritVirtualAttributes(boolean inheritVirtualAttributes) {\r\n+        this.inheritVirtualAttributes = inheritVirtualAttributes;\r\n+    }\r\n+\r\n+    public boolean addEntitlement(String entitlement) {\r\n+        return entitlements.add(entitlement);\r\n+    }\r\n+\r\n+    public boolean removeEntitlement(String entitlement) {\r\n+        return entitlements.remove(entitlement);\r\n+    }\r\n+\r\n+    public List<String> getEntitlements() {\r\n+        return entitlements;\r\n+    }\r\n+\r\n+    public void setEntitlements(List<String> entitlements) {\r\n+        this.entitlements.clear();\r\n+        if (entitlements != null && !entitlements.isEmpty()) {\r\n+            this.entitlements.addAll(entitlements);\r\n+        }\r\n+    }\r\n+\r\n+    public Long getPasswordPolicy() {\r\n+        return passwordPolicy;\r\n+    }\r\n+\r\n+    public void setPasswordPolicy(Long passwordPolicy) {\r\n+        this.passwordPolicy = passwordPolicy;\r\n+    }\r\n+\r\n+    public boolean isInheritPasswordPolicy() {\r\n+        return inheritPasswordPolicy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Specify if password policy must be inherited. In this case eventual passwordPolicy occurrence will be ignored.\r\n+     *\r\n+     * @param inheritPasswordPolicy 'true' to inherit policy, false otherwise.\r\n+     */\r\n+    public void setInheritPasswordPolicy(boolean inheritPasswordPolicy) {\r\n+        this.inheritPasswordPolicy = inheritPasswordPolicy;\r\n+    }\r\n+\r\n+    public Long getAccountPolicy() {\r\n+        return accountPolicy;\r\n+    }\r\n+\r\n+    public void setAccountPolicy(Long accountPolicy) {\r\n+        this.accountPolicy = accountPolicy;\r\n+    }\r\n+\r\n+    public boolean isInheritAccountPolicy() {\r\n+        return inheritAccountPolicy;\r\n+    }\r\n+\r\n+    /**\r\n+     * Specify if account policy must be inherited. In this case eventual accountPolicy occurrence will be ignored.\r\n+     *\r\n+     * @param inheritAccountPolicy 'true' to inherit policy, false otherwise.\r\n+     */\r\n+    public void setInheritAccountPolicy(boolean inheritAccountPolicy) {\r\n+        this.inheritAccountPolicy = inheritAccountPolicy;\r\n+    }\r\n+\r\n+    public String getDisplayName() {\r\n+        return getId() + \" \" + getName();\r\n+    }\r\n+\r\n+    public String getEmpty() {\r\n+        return \"\";\r\n+    }\r\n+\r\n+    public static long fromDisplayName(final String displayName) {\r\n+        long result = 0;\r\n+        if (displayName != null && !displayName.isEmpty() && displayName.indexOf(' ') != -1) {\r\n+            try {\r\n+                result = Long.valueOf(displayName.split(\" \")[0]);\r\n+            } catch (NumberFormatException e) {\r\n+                // just to avoid PMD warning about \"empty catch block\"\r\n+                result = 0;\r\n+            }\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/RoleTO.java"},{"sha":"7d92fc58473ab9be6da48f7f548b5e1596e74005","filename":"common/src/main/java/org/apache/syncope/common/to/SchedTaskTO.java","status":"renamed","additions":94,"deletions":94,"changes":188,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchedTaskTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,94 +1,94 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.Date;\n-\n-public class SchedTaskTO extends TaskTO {\n-\n-    private static final long serialVersionUID = -5722284116974636425L;\n-\n-    private String cronExpression;\n-\n-    private String jobClassName;\n-\n-    private String name;\n-\n-    private String description;\n-\n-    private Date lastExec;\n-\n-    private Date nextExec;\n-\n-    public String getCronExpression() {\n-        return cronExpression;\n-    }\n-\n-    public void setCronExpression(String cronExpression) {\n-        this.cronExpression = cronExpression;\n-    }\n-\n-    public String getJobClassName() {\n-        return jobClassName;\n-    }\n-\n-    public void setJobClassName(String jobClassName) {\n-        this.jobClassName = jobClassName;\n-    }\n-\n-    public Date getLastExec() {\n-        return lastExec == null\n-                ? null\n-                : new Date(lastExec.getTime());\n-    }\n-\n-    public void setLastExec(Date lastExec) {\n-        if (lastExec != null) {\n-            this.lastExec = new Date(lastExec.getTime());\n-        }\n-    }\n-\n-    public Date getNextExec() {\n-        return nextExec == null\n-                ? null\n-                : new Date(nextExec.getTime());\n-    }\n-\n-    public void setNextExec(Date nextExec) {\n-        if (nextExec != null) {\n-            this.nextExec = new Date(nextExec.getTime());\n-        }\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.Date;\r\n+\r\n+public class SchedTaskTO extends TaskTO {\r\n+\r\n+    private static final long serialVersionUID = -5722284116974636425L;\r\n+\r\n+    private String cronExpression;\r\n+\r\n+    private String jobClassName;\r\n+\r\n+    private String name;\r\n+\r\n+    private String description;\r\n+\r\n+    private Date lastExec;\r\n+\r\n+    private Date nextExec;\r\n+\r\n+    public String getCronExpression() {\r\n+        return cronExpression;\r\n+    }\r\n+\r\n+    public void setCronExpression(String cronExpression) {\r\n+        this.cronExpression = cronExpression;\r\n+    }\r\n+\r\n+    public String getJobClassName() {\r\n+        return jobClassName;\r\n+    }\r\n+\r\n+    public void setJobClassName(String jobClassName) {\r\n+        this.jobClassName = jobClassName;\r\n+    }\r\n+\r\n+    public Date getLastExec() {\r\n+        return lastExec == null\r\n+                ? null\r\n+                : new Date(lastExec.getTime());\r\n+    }\r\n+\r\n+    public void setLastExec(Date lastExec) {\r\n+        if (lastExec != null) {\r\n+            this.lastExec = new Date(lastExec.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getNextExec() {\r\n+        return nextExec == null\r\n+                ? null\r\n+                : new Date(nextExec.getTime());\r\n+    }\r\n+\r\n+    public void setNextExec(Date nextExec) {\r\n+        if (nextExec != null) {\r\n+            this.nextExec = new Date(nextExec.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/SchedTaskTO.java"},{"sha":"b539b279423705d0e24cfac3b356367a525a009f","filename":"common/src/main/java/org/apache/syncope/common/to/SchemaTO.java","status":"renamed","additions":124,"deletions":124,"changes":248,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,124 +1,124 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.types.SchemaType;\n-\n-@XmlRootElement(name = \"schema\")\n-@XmlType\n-public class SchemaTO extends AbstractSchemaTO {\n-\n-    private static final long serialVersionUID = -8133983392476990308L;\n-\n-    private SchemaType type = SchemaType.String;\n-\n-    private String mandatoryCondition;\n-\n-    private String enumerationValues;\n-\n-    private String enumerationKeys;\n-\n-    private boolean multivalue;\n-\n-    private boolean uniqueConstraint;\n-\n-    private boolean readonly;\n-\n-    private String conversionPattern;\n-\n-    private String validatorClass;\n-\n-    public String getConversionPattern() {\n-        return conversionPattern;\n-    }\n-\n-    public void setConversionPattern(final String conversionPattern) {\n-        this.conversionPattern = conversionPattern;\n-    }\n-\n-    public String getMandatoryCondition() {\n-        return StringUtils.isNotBlank(mandatoryCondition)\n-                ? mandatoryCondition\n-                : \"false\";\n-    }\n-\n-    public void setMandatoryCondition(final String mandatoryCondition) {\n-        this.mandatoryCondition = mandatoryCondition;\n-    }\n-\n-    public String getEnumerationValues() {\n-        return enumerationValues;\n-    }\n-\n-    public void setEnumerationValues(final String enumerationValues) {\n-        this.enumerationValues = enumerationValues;\n-    }\n-\n-    public String getEnumerationKeys() {\n-        return enumerationKeys;\n-    }\n-\n-    public void setEnumerationKeys(final String enumerationKeys) {\n-        this.enumerationKeys = enumerationKeys;\n-    }\n-\n-    public boolean isMultivalue() {\n-        return multivalue;\n-    }\n-\n-    public void setMultivalue(final boolean multivalue) {\n-        this.multivalue = multivalue;\n-    }\n-\n-    public boolean isUniqueConstraint() {\n-        return uniqueConstraint;\n-    }\n-\n-    public void setUniqueConstraint(final boolean uniqueConstraint) {\n-        this.uniqueConstraint = uniqueConstraint;\n-    }\n-\n-    public boolean isReadonly() {\n-        return readonly;\n-    }\n-\n-    public void setReadonly(final boolean readonly) {\n-        this.readonly = readonly;\n-    }\n-\n-    public SchemaType getType() {\n-        return type;\n-    }\n-\n-    public void setType(final SchemaType type) {\n-        this.type = type;\n-    }\n-\n-    public String getValidatorClass() {\n-        return validatorClass;\n-    }\n-\n-    public void setValidatorClass(final String validatorClass) {\n-        this.validatorClass = validatorClass;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.syncope.common.types.SchemaType;\r\n+\r\n+@XmlRootElement(name = \"schema\")\r\n+@XmlType\r\n+public class SchemaTO extends AbstractSchemaTO {\r\n+\r\n+    private static final long serialVersionUID = -8133983392476990308L;\r\n+\r\n+    private SchemaType type = SchemaType.String;\r\n+\r\n+    private String mandatoryCondition;\r\n+\r\n+    private String enumerationValues;\r\n+\r\n+    private String enumerationKeys;\r\n+\r\n+    private boolean multivalue;\r\n+\r\n+    private boolean uniqueConstraint;\r\n+\r\n+    private boolean readonly;\r\n+\r\n+    private String conversionPattern;\r\n+\r\n+    private String validatorClass;\r\n+\r\n+    public String getConversionPattern() {\r\n+        return conversionPattern;\r\n+    }\r\n+\r\n+    public void setConversionPattern(final String conversionPattern) {\r\n+        this.conversionPattern = conversionPattern;\r\n+    }\r\n+\r\n+    public String getMandatoryCondition() {\r\n+        return StringUtils.isNotBlank(mandatoryCondition)\r\n+                ? mandatoryCondition\r\n+                : \"false\";\r\n+    }\r\n+\r\n+    public void setMandatoryCondition(final String mandatoryCondition) {\r\n+        this.mandatoryCondition = mandatoryCondition;\r\n+    }\r\n+\r\n+    public String getEnumerationValues() {\r\n+        return enumerationValues;\r\n+    }\r\n+\r\n+    public void setEnumerationValues(final String enumerationValues) {\r\n+        this.enumerationValues = enumerationValues;\r\n+    }\r\n+\r\n+    public String getEnumerationKeys() {\r\n+        return enumerationKeys;\r\n+    }\r\n+\r\n+    public void setEnumerationKeys(final String enumerationKeys) {\r\n+        this.enumerationKeys = enumerationKeys;\r\n+    }\r\n+\r\n+    public boolean isMultivalue() {\r\n+        return multivalue;\r\n+    }\r\n+\r\n+    public void setMultivalue(final boolean multivalue) {\r\n+        this.multivalue = multivalue;\r\n+    }\r\n+\r\n+    public boolean isUniqueConstraint() {\r\n+        return uniqueConstraint;\r\n+    }\r\n+\r\n+    public void setUniqueConstraint(final boolean uniqueConstraint) {\r\n+        this.uniqueConstraint = uniqueConstraint;\r\n+    }\r\n+\r\n+    public boolean isReadonly() {\r\n+        return readonly;\r\n+    }\r\n+\r\n+    public void setReadonly(final boolean readonly) {\r\n+        this.readonly = readonly;\r\n+    }\r\n+\r\n+    public SchemaType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(final SchemaType type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public String getValidatorClass() {\r\n+        return validatorClass;\r\n+    }\r\n+\r\n+    public void setValidatorClass(final String validatorClass) {\r\n+        this.validatorClass = validatorClass;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/SchemaTO.java"},{"sha":"c0508fdb0fd640a8cc5300f8703bd856ac102186","filename":"common/src/main/java/org/apache/syncope/common/to/SyncPolicyTO.java","status":"renamed","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncPolicyTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,49 +1,49 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.types.PolicyType;\n-import org.apache.syncope.types.SyncPolicySpec;\n-\n-public class SyncPolicyTO extends PolicyTO {\n-\n-    private static final long serialVersionUID = 993024634238024242L;\n-\n-    private SyncPolicySpec specification;\n-\n-    public SyncPolicyTO() {\n-        this(false);\n-    }\n-\n-    public SyncPolicyTO(boolean global) {\n-        super();\n-\n-        this.type = global\n-                ? PolicyType.GLOBAL_SYNC\n-                : PolicyType.SYNC;\n-    }\n-\n-    public void setSpecification(final SyncPolicySpec specification) {\n-        this.specification = specification;\n-    }\n-\n-    public SyncPolicySpec getSpecification() {\n-        return specification;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.types.PolicyType;\r\n+import org.apache.syncope.common.types.SyncPolicySpec;\r\n+\r\n+public class SyncPolicyTO extends PolicyTO {\r\n+\r\n+    private static final long serialVersionUID = 993024634238024242L;\r\n+\r\n+    private SyncPolicySpec specification;\r\n+\r\n+    public SyncPolicyTO() {\r\n+        this(false);\r\n+    }\r\n+\r\n+    public SyncPolicyTO(boolean global) {\r\n+        super();\r\n+\r\n+        this.type = global\r\n+                ? PolicyType.GLOBAL_SYNC\r\n+                : PolicyType.SYNC;\r\n+    }\r\n+\r\n+    public void setSpecification(final SyncPolicySpec specification) {\r\n+        this.specification = specification;\r\n+    }\r\n+\r\n+    public SyncPolicySpec getSpecification() {\r\n+        return specification;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/SyncPolicyTO.java"},{"sha":"9b298f375d33a2c9be8c86242ab75d3662afd2db","filename":"common/src/main/java/org/apache/syncope/common/to/SyncTaskTO.java","status":"renamed","additions":114,"deletions":114,"changes":228,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSyncTaskTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,114 +1,114 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-public class SyncTaskTO extends SchedTaskTO {\n-\n-    private static final long serialVersionUID = -2143537546915809016L;\n-\n-    private String resource;\n-\n-    private UserTO userTemplate;\n-\n-    private RoleTO roleTemplate;\n-\n-    private boolean performCreate;\n-\n-    private boolean performUpdate;\n-\n-    private boolean performDelete;\n-\n-    private boolean syncStatus;\n-\n-    private boolean fullReconciliation;\n-\n-    private String actionsClassName;\n-\n-    public UserTO getUserTemplate() {\n-        return userTemplate;\n-    }\n-\n-    public void setUserTemplate(UserTO userTemplate) {\n-        this.userTemplate = userTemplate;\n-    }\n-\n-    public RoleTO getRoleTemplate() {\n-        return roleTemplate;\n-    }\n-\n-    public void setRoleTemplate(RoleTO roleTemplate) {\n-        this.roleTemplate = roleTemplate;\n-    }\n-\n-    public String getResource() {\n-        return resource;\n-    }\n-\n-    public void setResource(String resource) {\n-        this.resource = resource;\n-    }\n-\n-    public boolean isPerformCreate() {\n-        return performCreate;\n-    }\n-\n-    public void setPerformCreate(boolean performCreate) {\n-        this.performCreate = performCreate;\n-    }\n-\n-    public boolean isPerformUpdate() {\n-        return performUpdate;\n-    }\n-\n-    public void setPerformUpdate(boolean performUpdate) {\n-        this.performUpdate = performUpdate;\n-    }\n-\n-    public boolean isPerformDelete() {\n-        return performDelete;\n-    }\n-\n-    public void setPerformDelete(boolean performDelete) {\n-        this.performDelete = performDelete;\n-    }\n-\n-    public boolean isSyncStatus() {\n-        return syncStatus;\n-    }\n-\n-    public void setSyncStatus(boolean syncStatus) {\n-        this.syncStatus = syncStatus;\n-    }\n-\n-    public boolean isFullReconciliation() {\n-        return fullReconciliation;\n-    }\n-\n-    public void setFullReconciliation(boolean fullReconciliation) {\n-        this.fullReconciliation = fullReconciliation;\n-    }\n-\n-    public String getActionsClassName() {\n-        return actionsClassName;\n-    }\n-\n-    public void setActionsClassName(String actionsClassName) {\n-        this.actionsClassName = actionsClassName;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+public class SyncTaskTO extends SchedTaskTO {\r\n+\r\n+    private static final long serialVersionUID = -2143537546915809016L;\r\n+\r\n+    private String resource;\r\n+\r\n+    private UserTO userTemplate;\r\n+\r\n+    private RoleTO roleTemplate;\r\n+\r\n+    private boolean performCreate;\r\n+\r\n+    private boolean performUpdate;\r\n+\r\n+    private boolean performDelete;\r\n+\r\n+    private boolean syncStatus;\r\n+\r\n+    private boolean fullReconciliation;\r\n+\r\n+    private String actionsClassName;\r\n+\r\n+    public UserTO getUserTemplate() {\r\n+        return userTemplate;\r\n+    }\r\n+\r\n+    public void setUserTemplate(UserTO userTemplate) {\r\n+        this.userTemplate = userTemplate;\r\n+    }\r\n+\r\n+    public RoleTO getRoleTemplate() {\r\n+        return roleTemplate;\r\n+    }\r\n+\r\n+    public void setRoleTemplate(RoleTO roleTemplate) {\r\n+        this.roleTemplate = roleTemplate;\r\n+    }\r\n+\r\n+    public String getResource() {\r\n+        return resource;\r\n+    }\r\n+\r\n+    public void setResource(String resource) {\r\n+        this.resource = resource;\r\n+    }\r\n+\r\n+    public boolean isPerformCreate() {\r\n+        return performCreate;\r\n+    }\r\n+\r\n+    public void setPerformCreate(boolean performCreate) {\r\n+        this.performCreate = performCreate;\r\n+    }\r\n+\r\n+    public boolean isPerformUpdate() {\r\n+        return performUpdate;\r\n+    }\r\n+\r\n+    public void setPerformUpdate(boolean performUpdate) {\r\n+        this.performUpdate = performUpdate;\r\n+    }\r\n+\r\n+    public boolean isPerformDelete() {\r\n+        return performDelete;\r\n+    }\r\n+\r\n+    public void setPerformDelete(boolean performDelete) {\r\n+        this.performDelete = performDelete;\r\n+    }\r\n+\r\n+    public boolean isSyncStatus() {\r\n+        return syncStatus;\r\n+    }\r\n+\r\n+    public void setSyncStatus(boolean syncStatus) {\r\n+        this.syncStatus = syncStatus;\r\n+    }\r\n+\r\n+    public boolean isFullReconciliation() {\r\n+        return fullReconciliation;\r\n+    }\r\n+\r\n+    public void setFullReconciliation(boolean fullReconciliation) {\r\n+        this.fullReconciliation = fullReconciliation;\r\n+    }\r\n+\r\n+    public String getActionsClassName() {\r\n+        return actionsClassName;\r\n+    }\r\n+\r\n+    public void setActionsClassName(String actionsClassName) {\r\n+        this.actionsClassName = actionsClassName;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/SyncTaskTO.java"},{"sha":"f0ce2ed4bc9b8751173248b6c2393d9a37a43305","filename":"common/src/main/java/org/apache/syncope/common/to/TaskExecTO.java","status":"renamed","additions":34,"deletions":34,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskExecTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,34 +1,34 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-public class TaskExecTO extends AbstractExecTO {\n-\n-    private static final long serialVersionUID = -5401795154606268973L;\n-\n-    private long task;\n-\n-    public long getTask() {\n-        return task;\n-    }\n-\n-    public void setTask(long task) {\n-        this.task = task;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+public class TaskExecTO extends AbstractExecTO {\r\n+\r\n+    private static final long serialVersionUID = -5401795154606268973L;\r\n+\r\n+    private long task;\r\n+\r\n+    public long getTask() {\r\n+        return task;\r\n+    }\r\n+\r\n+    public void setTask(long task) {\r\n+        this.task = task;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/TaskExecTO.java"},{"sha":"65d2c8d693d440fc4a72e2bbb8774b20faca7157","filename":"common/src/main/java/org/apache/syncope/common/to/TaskTO.java","status":"renamed","additions":102,"deletions":101,"changes":203,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FTaskTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,101 +1,102 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.List;\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public class TaskTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 386450127003321197L;\n-\n-    private long id;\n-\n-    private String latestExecStatus;\n-\n-    private List<TaskExecTO> executions;\n-    \n-    private Date startDate;\n-    \n-    private Date endDate;\n-\n-    public TaskTO() {\n-        super();\n-\n-        executions = new ArrayList<TaskExecTO>();\n-    }\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    public String getLatestExecStatus() {\n-        return latestExecStatus;\n-    }\n-\n-    public void setLatestExecStatus(String latestExecStatus) {\n-        this.latestExecStatus = latestExecStatus;\n-    }\n-\n-    public boolean addExecution(TaskExecTO execution) {\n-        return executions.add(execution);\n-    }\n-\n-    public boolean removeExecution(TaskExecTO execution) {\n-        return executions.remove(execution);\n-    }\n-\n-    public List<TaskExecTO> getExecutions() {\n-        return executions;\n-    }\n-\n-    public void setExecutions(List<TaskExecTO> executions) {\n-        this.executions = executions;\n-    }\n-\n-    public Date getStartDate() {\n-        return startDate == null\n-                ? null\n-                : new Date(startDate.getTime());\n-    }\n-\n-    public void setStartDate(Date startDate) {\n-        if (startDate != null) {\n-            this.startDate = new Date(startDate.getTime());\n-        }\n-    }\n-\n-    public Date getEndDate() {\n-        return endDate == null\n-                ? null\n-                : new Date(endDate.getTime());\n-    }\n-\n-    public void setEndDate(Date endDate) {\n-        if (endDate != null) {\n-            this.endDate = new Date(endDate.getTime());\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Date;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public class TaskTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 386450127003321197L;\r\n+\r\n+    private long id;\r\n+\r\n+    private String latestExecStatus;\r\n+\r\n+    private List<TaskExecTO> executions;\r\n+    \r\n+    private Date startDate;\r\n+    \r\n+    private Date endDate;\r\n+\r\n+    public TaskTO() {\r\n+        super();\r\n+\r\n+        executions = new ArrayList<TaskExecTO>();\r\n+    }\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getLatestExecStatus() {\r\n+        return latestExecStatus;\r\n+    }\r\n+\r\n+    public void setLatestExecStatus(String latestExecStatus) {\r\n+        this.latestExecStatus = latestExecStatus;\r\n+    }\r\n+\r\n+    public boolean addExecution(TaskExecTO execution) {\r\n+        return executions.add(execution);\r\n+    }\r\n+\r\n+    public boolean removeExecution(TaskExecTO execution) {\r\n+        return executions.remove(execution);\r\n+    }\r\n+\r\n+    public List<TaskExecTO> getExecutions() {\r\n+        return executions;\r\n+    }\r\n+\r\n+    public void setExecutions(List<TaskExecTO> executions) {\r\n+        this.executions = executions;\r\n+    }\r\n+\r\n+    public Date getStartDate() {\r\n+        return startDate == null\r\n+                ? null\r\n+                : new Date(startDate.getTime());\r\n+    }\r\n+\r\n+    public void setStartDate(Date startDate) {\r\n+        if (startDate != null) {\r\n+            this.startDate = new Date(startDate.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public Date getEndDate() {\r\n+        return endDate == null\r\n+                ? null\r\n+                : new Date(endDate.getTime());\r\n+    }\r\n+\r\n+    public void setEndDate(Date endDate) {\r\n+        if (endDate != null) {\r\n+            this.endDate = new Date(endDate.getTime());\r\n+        }\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/TaskTO.java"},{"sha":"4ad524b005cfbdc3bdc69c836dca351e04b63e5d","filename":"common/src/main/java/org/apache/syncope/common/to/UserRequestTO.java","status":"renamed","additions":84,"deletions":84,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserRequestTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,84 +1,84 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.client.mod.UserMod;\n-import org.apache.syncope.types.UserRequestType;\n-\n-public class UserRequestTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 1228351243795629329L;\n-\n-    private long id;\n-\n-    private UserTO userTO;\n-\n-    private UserMod userMod;\n-\n-    private Long userId;\n-\n-    private UserRequestType type;\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    public UserRequestType getType() {\n-        return type;\n-    }\n-\n-    public void setType(UserRequestType type) {\n-        this.type = type;\n-    }\n-\n-    public UserTO getUserTO() {\n-        return type != UserRequestType.CREATE\n-                ? null\n-                : userTO;\n-    }\n-\n-    public void setUserTO(UserTO userTO) {\n-        this.userTO = userTO;\n-    }\n-\n-    public UserMod getUserMod() {\n-        return type != UserRequestType.UPDATE\n-                ? null\n-                : userMod;\n-    }\n-\n-    public void setUserMod(UserMod userMod) {\n-        this.userMod = userMod;\n-    }\n-\n-    public Long getUserId() {\n-        return type != UserRequestType.DELETE\n-                ? null\n-                : userId;\n-    }\n-\n-    public void setUserId(Long userId) {\n-        this.userId = userId;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.mod.UserMod;\r\n+import org.apache.syncope.common.types.UserRequestType;\r\n+\r\n+public class UserRequestTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 1228351243795629329L;\r\n+\r\n+    private long id;\r\n+\r\n+    private UserTO userTO;\r\n+\r\n+    private UserMod userMod;\r\n+\r\n+    private Long userId;\r\n+\r\n+    private UserRequestType type;\r\n+\r\n+    public long getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(long id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public UserRequestType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(UserRequestType type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public UserTO getUserTO() {\r\n+        return type != UserRequestType.CREATE\r\n+                ? null\r\n+                : userTO;\r\n+    }\r\n+\r\n+    public void setUserTO(UserTO userTO) {\r\n+        this.userTO = userTO;\r\n+    }\r\n+\r\n+    public UserMod getUserMod() {\r\n+        return type != UserRequestType.UPDATE\r\n+                ? null\r\n+                : userMod;\r\n+    }\r\n+\r\n+    public void setUserMod(UserMod userMod) {\r\n+        this.userMod = userMod;\r\n+    }\r\n+\r\n+    public Long getUserId() {\r\n+        return type != UserRequestType.DELETE\r\n+                ? null\r\n+                : userId;\r\n+    }\r\n+\r\n+    public void setUserId(Long userId) {\r\n+        this.userId = userId;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/UserRequestTO.java"},{"sha":"5d3d0ca78a08834d6d39bdd0ba1faa948723bffd","filename":"common/src/main/java/org/apache/syncope/common/to/UserTO.java","status":"renamed","additions":181,"deletions":181,"changes":362,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FUserTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,181 +1,181 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.lang.reflect.Field;\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n-import org.apache.commons.lang.builder.ToStringStyle;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-\n-public class UserTO extends AbstractAttributableTO {\n-\n-    private static final long serialVersionUID = 7791304495192615740L;\n-\n-    private String password;\n-\n-    private List<MembershipTO> memberships;\n-\n-    private String status;\n-\n-    private String token;\n-\n-    private Date tokenExpireTime;\n-\n-    private String username;\n-\n-    private Date lastLoginDate;\n-\n-    private Date creationDate;\n-\n-    private Date changePwdDate;\n-\n-    private Integer failedLogins;\n-\n-    public UserTO() {\n-        super();\n-\n-        memberships = new ArrayList<MembershipTO>();\n-    }\n-\n-    public String getPassword() {\n-        return password;\n-    }\n-\n-    public void setPassword(String password) {\n-        this.password = password;\n-    }\n-\n-    public boolean addMembership(MembershipTO membershipTO) {\n-        return memberships.add(membershipTO);\n-    }\n-\n-    public boolean removeMembership(MembershipTO membershipTO) {\n-        return memberships.remove(membershipTO);\n-    }\n-\n-    public List<MembershipTO> getMemberships() {\n-        return memberships;\n-    }\n-\n-    public void setMemberships(List<MembershipTO> memberships) {\n-        this.memberships = memberships;\n-    }\n-\n-    @JsonIgnore\n-    public Map<Long, MembershipTO> getMembershipMap() {\n-        Map<Long, MembershipTO> result;\n-\n-        if (getMemberships() == null) {\n-            result = Collections.emptyMap();\n-        } else {\n-            result = new HashMap<Long, MembershipTO>(getMemberships().size());\n-            for (MembershipTO membership : getMemberships()) {\n-                result.put(membership.getRoleId(), membership);\n-            }\n-            result = Collections.unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-\n-    public String getStatus() {\n-        return status;\n-    }\n-\n-    public void setStatus(String status) {\n-        this.status = status;\n-    }\n-\n-    public String getToken() {\n-        return token;\n-    }\n-\n-    public void setToken(String token) {\n-        this.token = token;\n-    }\n-\n-    public Date getTokenExpireTime() {\n-        return tokenExpireTime == null\n-                ? null\n-                : new Date(tokenExpireTime.getTime());\n-    }\n-\n-    public void setTokenExpireTime(Date tokenExpireTime) {\n-        if (tokenExpireTime != null) {\n-            this.tokenExpireTime = new Date(tokenExpireTime.getTime());\n-        }\n-    }\n-\n-    public String getUsername() {\n-        return username;\n-    }\n-\n-    public void setUsername(String username) {\n-        this.username = username;\n-    }\n-\n-    public Date getChangePwdDate() {\n-        return changePwdDate;\n-    }\n-\n-    public Date getCreationDate() {\n-        return creationDate;\n-    }\n-\n-    public Integer getFailedLogins() {\n-        return failedLogins;\n-    }\n-\n-    public Date getLastLoginDate() {\n-        return lastLoginDate;\n-    }\n-\n-    public void setChangePwdDate(Date changePwdDate) {\n-        this.changePwdDate = changePwdDate;\n-    }\n-\n-    public void setCreationDate(Date creationDate) {\n-        this.creationDate = creationDate;\n-    }\n-\n-    public void setFailedLogins(Integer failedLogins) {\n-        this.failedLogins = failedLogins;\n-    }\n-\n-    public void setLastLoginDate(Date lastLoginDate) {\n-        this.lastLoginDate = lastLoginDate;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return new ReflectionToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) {\n-\n-            @Override\n-            protected boolean accept(Field f) {\n-                return super.accept(f) && !f.getName().equals(\"password\");\n-            }\n-        }.toString();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.lang.reflect.Field;\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import org.apache.commons.lang.builder.ReflectionToStringBuilder;\r\n+import org.apache.commons.lang.builder.ToStringStyle;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+\r\n+public class UserTO extends AbstractAttributableTO {\r\n+\r\n+    private static final long serialVersionUID = 7791304495192615740L;\r\n+\r\n+    private String password;\r\n+\r\n+    private List<MembershipTO> memberships;\r\n+\r\n+    private String status;\r\n+\r\n+    private String token;\r\n+\r\n+    private Date tokenExpireTime;\r\n+\r\n+    private String username;\r\n+\r\n+    private Date lastLoginDate;\r\n+\r\n+    private Date creationDate;\r\n+\r\n+    private Date changePwdDate;\r\n+\r\n+    private Integer failedLogins;\r\n+\r\n+    public UserTO() {\r\n+        super();\r\n+\r\n+        memberships = new ArrayList<MembershipTO>();\r\n+    }\r\n+\r\n+    public String getPassword() {\r\n+        return password;\r\n+    }\r\n+\r\n+    public void setPassword(String password) {\r\n+        this.password = password;\r\n+    }\r\n+\r\n+    public boolean addMembership(MembershipTO membershipTO) {\r\n+        return memberships.add(membershipTO);\r\n+    }\r\n+\r\n+    public boolean removeMembership(MembershipTO membershipTO) {\r\n+        return memberships.remove(membershipTO);\r\n+    }\r\n+\r\n+    public List<MembershipTO> getMemberships() {\r\n+        return memberships;\r\n+    }\r\n+\r\n+    public void setMemberships(List<MembershipTO> memberships) {\r\n+        this.memberships = memberships;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<Long, MembershipTO> getMembershipMap() {\r\n+        Map<Long, MembershipTO> result;\r\n+\r\n+        if (getMemberships() == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<Long, MembershipTO>(getMemberships().size());\r\n+            for (MembershipTO membership : getMemberships()) {\r\n+                result.put(membership.getRoleId(), membership);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public String getStatus() {\r\n+        return status;\r\n+    }\r\n+\r\n+    public void setStatus(String status) {\r\n+        this.status = status;\r\n+    }\r\n+\r\n+    public String getToken() {\r\n+        return token;\r\n+    }\r\n+\r\n+    public void setToken(String token) {\r\n+        this.token = token;\r\n+    }\r\n+\r\n+    public Date getTokenExpireTime() {\r\n+        return tokenExpireTime == null\r\n+                ? null\r\n+                : new Date(tokenExpireTime.getTime());\r\n+    }\r\n+\r\n+    public void setTokenExpireTime(Date tokenExpireTime) {\r\n+        if (tokenExpireTime != null) {\r\n+            this.tokenExpireTime = new Date(tokenExpireTime.getTime());\r\n+        }\r\n+    }\r\n+\r\n+    public String getUsername() {\r\n+        return username;\r\n+    }\r\n+\r\n+    public void setUsername(String username) {\r\n+        this.username = username;\r\n+    }\r\n+\r\n+    public Date getChangePwdDate() {\r\n+        return changePwdDate;\r\n+    }\r\n+\r\n+    public Date getCreationDate() {\r\n+        return creationDate;\r\n+    }\r\n+\r\n+    public Integer getFailedLogins() {\r\n+        return failedLogins;\r\n+    }\r\n+\r\n+    public Date getLastLoginDate() {\r\n+        return lastLoginDate;\r\n+    }\r\n+\r\n+    public void setChangePwdDate(Date changePwdDate) {\r\n+        this.changePwdDate = changePwdDate;\r\n+    }\r\n+\r\n+    public void setCreationDate(Date creationDate) {\r\n+        this.creationDate = creationDate;\r\n+    }\r\n+\r\n+    public void setFailedLogins(Integer failedLogins) {\r\n+        this.failedLogins = failedLogins;\r\n+    }\r\n+\r\n+    public void setLastLoginDate(Date lastLoginDate) {\r\n+        this.lastLoginDate = lastLoginDate;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return new ReflectionToStringBuilder(this, ToStringStyle.MULTI_LINE_STYLE) {\r\n+\r\n+            @Override\r\n+            protected boolean accept(Field f) {\r\n+                return super.accept(f) && !f.getName().equals(\"password\");\r\n+            }\r\n+        }.toString();\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/UserTO.java"},{"sha":"5055020329892fdfaaa0260f7fa2a60d11c11e08","filename":"common/src/main/java/org/apache/syncope/common/to/ValidatorTO.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FValidatorTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FValidatorTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FValidatorTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,12 +16,12 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.client.to;\r\n+package org.apache.syncope.common.to;\r\n \r\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlType;\r\n \r\n-import org.apache.syncope.client.AbstractBaseBean;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n \r\n @XmlRootElement\r\n @XmlType\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/ValidatorTO.java"},{"sha":"1fb5c07b83ae082395ec211502d53ebf685ecefb","filename":"common/src/main/java/org/apache/syncope/common/to/VirtualSchemaTO.java","status":"renamed","additions":25,"deletions":25,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FVirtualSchemaTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,25 +1,25 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-public class VirtualSchemaTO extends AbstractSchemaTO {\n-\n-    private static final long serialVersionUID = -8198557479659701343L;\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+public class VirtualSchemaTO extends AbstractSchemaTO {\r\n+\r\n+    private static final long serialVersionUID = -8198557479659701343L;\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/VirtualSchemaTO.java"},{"sha":"59ca0252e9e4057721b41e0b66185d472859d375","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowDefinitionTO.java","status":"renamed","additions":46,"deletions":46,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowDefinitionTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,46 +1,46 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public class WorkflowDefinitionTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 8803733012885686826L;\n-\n-    private String id;\n-\n-    private String xmlDefinition;\n-\n-    public String getId() {\n-        return id;\n-    }\n-\n-    public void setId(String id) {\n-        this.id = id;\n-    }\n-\n-    public String getXmlDefinition() {\n-        return xmlDefinition;\n-    }\n-\n-    public void setXmlDefinition(String xmlDefinition) {\n-        this.xmlDefinition = xmlDefinition;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public class WorkflowDefinitionTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 8803733012885686826L;\r\n+\r\n+    private String id;\r\n+\r\n+    private String xmlDefinition;\r\n+\r\n+    public String getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(String id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getXmlDefinition() {\r\n+        return xmlDefinition;\r\n+    }\r\n+\r\n+    public void setXmlDefinition(String xmlDefinition) {\r\n+        this.xmlDefinition = xmlDefinition;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/WorkflowDefinitionTO.java"},{"sha":"4bc2455940c9f4e7b098c38208242be69d4ce273","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowFormPropertyTO.java","status":"renamed","additions":134,"deletions":133,"changes":267,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormPropertyTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,133 +1,134 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.HashMap;\n-import java.util.Map;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.WorkflowFormPropertyType;\n-\n-public class WorkflowFormPropertyTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 9139969592634304261L;\n-\n-    private String id;\n-\n-    private String name;\n-\n-    private WorkflowFormPropertyType type;\n-\n-    private String value;\n-\n-    private boolean readable;\n-\n-    private boolean writable;\n-\n-    private boolean required;\n-\n-    private String datePattern;\n-\n-    private Map<String, String> enumValues;\n-\n-    public WorkflowFormPropertyTO() {\n-        enumValues = new HashMap<String, String>();\n-    }\n-\n-    public String getId() {\n-        return id;\n-    }\n-\n-    public void setId(String id) {\n-        this.id = id;\n-    }\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(String name) {\n-        this.name = name;\n-    }\n-\n-    public boolean isReadable() {\n-        return readable;\n-    }\n-\n-    public void setReadable(boolean readable) {\n-        this.readable = readable;\n-    }\n-\n-    public boolean isRequired() {\n-        return required;\n-    }\n-\n-    public void setRequired(boolean required) {\n-        this.required = required;\n-    }\n-\n-    public WorkflowFormPropertyType getType() {\n-        return type;\n-    }\n-\n-    public void setType(WorkflowFormPropertyType type) {\n-        this.type = type;\n-    }\n-\n-    public String getValue() {\n-        return value;\n-    }\n-\n-    public void setValue(String value) {\n-        this.value = value;\n-    }\n-\n-    public boolean isWritable() {\n-        return writable;\n-    }\n-\n-    public void setWritable(boolean writable) {\n-        this.writable = writable;\n-    }\n-\n-    public String getDatePattern() {\n-        return datePattern;\n-    }\n-\n-    public void setDatePattern(String datePattern) {\n-        this.datePattern = datePattern;\n-    }\n-\n-    public Map<String, String> getEnumValues() {\n-        return enumValues;\n-    }\n-\n-    public void putEnumValue(String key, String value) {\n-        this.enumValues.put(key, value);\n-    }\n-\n-    public void removeEnumValue(String key) {\n-        this.enumValues.remove(key);\n-    }\n-\n-    public void setEnumValues(Map<String, String> enumValues) {\n-        if (enumValues != null) {\n-            this.enumValues = enumValues;\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.HashMap;\r\n+import java.util.Map;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.WorkflowFormPropertyType;\r\n+\r\n+public class WorkflowFormPropertyTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 9139969592634304261L;\r\n+\r\n+    private String id;\r\n+\r\n+    private String name;\r\n+\r\n+    private WorkflowFormPropertyType type;\r\n+\r\n+    private String value;\r\n+\r\n+    private boolean readable;\r\n+\r\n+    private boolean writable;\r\n+\r\n+    private boolean required;\r\n+\r\n+    private String datePattern;\r\n+\r\n+    private Map<String, String> enumValues;\r\n+\r\n+    public WorkflowFormPropertyTO() {\r\n+        enumValues = new HashMap<String, String>();\r\n+    }\r\n+\r\n+    public String getId() {\r\n+        return id;\r\n+    }\r\n+\r\n+    public void setId(String id) {\r\n+        this.id = id;\r\n+    }\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public boolean isReadable() {\r\n+        return readable;\r\n+    }\r\n+\r\n+    public void setReadable(boolean readable) {\r\n+        this.readable = readable;\r\n+    }\r\n+\r\n+    public boolean isRequired() {\r\n+        return required;\r\n+    }\r\n+\r\n+    public void setRequired(boolean required) {\r\n+        this.required = required;\r\n+    }\r\n+\r\n+    public WorkflowFormPropertyType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(WorkflowFormPropertyType type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public String getValue() {\r\n+        return value;\r\n+    }\r\n+\r\n+    public void setValue(String value) {\r\n+        this.value = value;\r\n+    }\r\n+\r\n+    public boolean isWritable() {\r\n+        return writable;\r\n+    }\r\n+\r\n+    public void setWritable(boolean writable) {\r\n+        this.writable = writable;\r\n+    }\r\n+\r\n+    public String getDatePattern() {\r\n+        return datePattern;\r\n+    }\r\n+\r\n+    public void setDatePattern(String datePattern) {\r\n+        this.datePattern = datePattern;\r\n+    }\r\n+\r\n+    public Map<String, String> getEnumValues() {\r\n+        return enumValues;\r\n+    }\r\n+\r\n+    public void putEnumValue(String key, String value) {\r\n+        this.enumValues.put(key, value);\r\n+    }\r\n+\r\n+    public void removeEnumValue(String key) {\r\n+        this.enumValues.remove(key);\r\n+    }\r\n+\r\n+    public void setEnumValues(Map<String, String> enumValues) {\r\n+        if (enumValues != null) {\r\n+            this.enumValues = enumValues;\r\n+        }\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/WorkflowFormPropertyTO.java"},{"sha":"26e4c0f9c7799c6192943f4ea217db6301beeabd","filename":"common/src/main/java/org/apache/syncope/common/to/WorkflowFormTO.java","status":"renamed","additions":151,"deletions":151,"changes":302,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FWorkflowFormTO.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,151 +1,151 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.to;\n-\n-import java.util.ArrayList;\n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import org.codehaus.jackson.annotate.JsonIgnore;\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public class WorkflowFormTO extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -7044543391316529128L;\n-\n-    private String taskId;\n-\n-    private String key;\n-\n-    private String description;\n-\n-    private Date createTime;\n-\n-    private Date dueDate;\n-\n-    private String owner;\n-\n-    private List<WorkflowFormPropertyTO> properties;\n-\n-    public WorkflowFormTO() {\n-        properties = new ArrayList<WorkflowFormPropertyTO>();\n-    }\n-\n-    public String getTaskId() {\n-        return taskId;\n-    }\n-\n-    public void setTaskId(String taskId) {\n-        this.taskId = taskId;\n-    }\n-\n-    public String getKey() {\n-        return key;\n-    }\n-\n-    public void setKey(String key) {\n-        this.key = key;\n-    }\n-\n-    public Date getCreateTime() {\n-        return createTime;\n-    }\n-\n-    public void setCreateTime(Date createTime) {\n-        this.createTime = createTime;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-\n-    public void setDescription(String description) {\n-        this.description = description;\n-    }\n-\n-    public Date getDueDate() {\n-        return dueDate;\n-    }\n-\n-    public void setDueDate(Date dueDate) {\n-        this.dueDate = dueDate;\n-    }\n-\n-    public String getOwner() {\n-        return owner;\n-    }\n-\n-    public void setOwner(String owner) {\n-        this.owner = owner;\n-    }\n-\n-    public List<WorkflowFormPropertyTO> getProperties() {\n-        return properties;\n-    }\n-\n-    public boolean addProperty(final WorkflowFormPropertyTO property) {\n-        return properties.contains(property)\n-                ? true\n-                : properties.add(property);\n-    }\n-\n-    public boolean removeProperty(final WorkflowFormPropertyTO property) {\n-        return properties.remove(property);\n-    }\n-\n-    public void setProperties(final Collection<WorkflowFormPropertyTO> properties) {\n-\n-        this.properties.clear();\n-        if (properties != null) {\n-            this.properties.addAll(properties);\n-        }\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, WorkflowFormPropertyTO> getPropertyMap() {\n-        Map<String, WorkflowFormPropertyTO> result;\n-\n-        if (getProperties() == null) {\n-            result = Collections.emptyMap();\n-        } else {\n-            result = new HashMap<String, WorkflowFormPropertyTO>();\n-            for (WorkflowFormPropertyTO prop : getProperties()) {\n-                result.put(prop.getId(), prop);\n-            }\n-            result = Collections.unmodifiableMap(result);\n-        }\n-\n-        return result;\n-    }\n-\n-    @JsonIgnore\n-    public Map<String, String> getPropertiesForSubmit() {\n-        Map<String, String> props = new HashMap<String, String>();\n-        for (WorkflowFormPropertyTO prop : getProperties()) {\n-            if (prop.isWritable()) {\n-                props.put(prop.getId(), prop.getValue());\n-            }\n-        }\n-\n-        return props;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.to;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collection;\r\n+import java.util.Collections;\r\n+import java.util.Date;\r\n+import java.util.HashMap;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import org.codehaus.jackson.annotate.JsonIgnore;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public class WorkflowFormTO extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -7044543391316529128L;\r\n+\r\n+    private String taskId;\r\n+\r\n+    private String key;\r\n+\r\n+    private String description;\r\n+\r\n+    private Date createTime;\r\n+\r\n+    private Date dueDate;\r\n+\r\n+    private String owner;\r\n+\r\n+    private List<WorkflowFormPropertyTO> properties;\r\n+\r\n+    public WorkflowFormTO() {\r\n+        properties = new ArrayList<WorkflowFormPropertyTO>();\r\n+    }\r\n+\r\n+    public String getTaskId() {\r\n+        return taskId;\r\n+    }\r\n+\r\n+    public void setTaskId(String taskId) {\r\n+        this.taskId = taskId;\r\n+    }\r\n+\r\n+    public String getKey() {\r\n+        return key;\r\n+    }\r\n+\r\n+    public void setKey(String key) {\r\n+        this.key = key;\r\n+    }\r\n+\r\n+    public Date getCreateTime() {\r\n+        return createTime;\r\n+    }\r\n+\r\n+    public void setCreateTime(Date createTime) {\r\n+        this.createTime = createTime;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+\r\n+    public void setDescription(String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public Date getDueDate() {\r\n+        return dueDate;\r\n+    }\r\n+\r\n+    public void setDueDate(Date dueDate) {\r\n+        this.dueDate = dueDate;\r\n+    }\r\n+\r\n+    public String getOwner() {\r\n+        return owner;\r\n+    }\r\n+\r\n+    public void setOwner(String owner) {\r\n+        this.owner = owner;\r\n+    }\r\n+\r\n+    public List<WorkflowFormPropertyTO> getProperties() {\r\n+        return properties;\r\n+    }\r\n+\r\n+    public boolean addProperty(final WorkflowFormPropertyTO property) {\r\n+        return properties.contains(property)\r\n+                ? true\r\n+                : properties.add(property);\r\n+    }\r\n+\r\n+    public boolean removeProperty(final WorkflowFormPropertyTO property) {\r\n+        return properties.remove(property);\r\n+    }\r\n+\r\n+    public void setProperties(final Collection<WorkflowFormPropertyTO> properties) {\r\n+\r\n+        this.properties.clear();\r\n+        if (properties != null) {\r\n+            this.properties.addAll(properties);\r\n+        }\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, WorkflowFormPropertyTO> getPropertyMap() {\r\n+        Map<String, WorkflowFormPropertyTO> result;\r\n+\r\n+        if (getProperties() == null) {\r\n+            result = Collections.emptyMap();\r\n+        } else {\r\n+            result = new HashMap<String, WorkflowFormPropertyTO>();\r\n+            for (WorkflowFormPropertyTO prop : getProperties()) {\r\n+                result.put(prop.getId(), prop);\r\n+            }\r\n+            result = Collections.unmodifiableMap(result);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    @JsonIgnore\r\n+    public Map<String, String> getPropertiesForSubmit() {\r\n+        Map<String, String> props = new HashMap<String, String>();\r\n+        for (WorkflowFormPropertyTO prop : getProperties()) {\r\n+            if (prop.isWritable()) {\r\n+                props.put(prop.getId(), prop.getValue());\r\n+            }\r\n+        }\r\n+\r\n+        return props;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/to/WorkflowFormTO.java"},{"sha":"fd10be286f47650086dc5bb944472f89cd98d79f","filename":"common/src/main/java/org/apache/syncope/common/types/AbstractPolicySpec.java","status":"renamed","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAbstractPolicySpec.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,29 +1,29 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-public class AbstractPolicySpec extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = 2740439904103716653L;\n-\n-    public AbstractPolicySpec() {\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+public class AbstractPolicySpec extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = 2740439904103716653L;\r\n+\r\n+    public AbstractPolicySpec() {\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/AbstractPolicySpec.java"},{"sha":"b2979152e7282a0f38600e516b17b67f599abadb","filename":"common/src/main/java/org/apache/syncope/common/types/AccountPolicySpec.java","status":"renamed","additions":176,"deletions":175,"changes":351,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAccountPolicySpec.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,175 +1,176 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.annotation.SchemaList;\n-\n-public class AccountPolicySpec extends AbstractPolicySpec {\n-\n-    private static final long serialVersionUID = 3259256974414758406L;\n-\n-    /**\n-     * Minimum length.\n-     */\n-    private int maxLength;\n-\n-    /**\n-     * Maximum length.\n-     */\n-    private int minLength;\n-\n-    /**\n-     * Substrings not permitted.\n-     */\n-    private List<String> wordsNotPermitted;\n-\n-    /**\n-     * User attribute values not permitted.\n-     */\n-    @SchemaList\n-    private List<String> schemasNotPermitted;\n-\n-    /**\n-     * Substrings not permitted as prefix.\n-     */\n-    private List<String> prefixesNotPermitted;\n-\n-    /**\n-     * Substrings not permitted as suffix.\n-     */\n-    private List<String> suffixesNotPermitted;\n-\n-    /**\n-     * Specify if one or more lowercase characters are permitted.\n-     */\n-    private boolean allUpperCase;\n-\n-    /**\n-     * Specify if one or more uppercase characters are permitted.\n-     */\n-    private boolean allLowerCase;\n-\n-    /**\n-     * Specify if it must be propagate suspension in case of maximum subsequent\n-     * failed logins reached.\n-     */\n-    private boolean propagateSuspension;\n-\n-    /**\n-     * Number of permitted login retries.\n-     * 0 disabled; >0 enabled.\n-     * If the number of subsequent failed logins will be greater then this value\n-     * the account will be suspended (lock-out).\n-     */\n-    private int permittedLoginRetries;\n-\n-    public boolean isAllLowerCase() {\n-        return allLowerCase;\n-    }\n-\n-    public void setAllLowerCase(boolean allLowerCase) {\n-        this.allLowerCase = allLowerCase;\n-    }\n-\n-    public boolean isAllUpperCase() {\n-        return allUpperCase;\n-    }\n-\n-    public void setAllUpperCase(boolean allUpperCase) {\n-        this.allUpperCase = allUpperCase;\n-    }\n-\n-    public int getMaxLength() {\n-        return maxLength;\n-    }\n-\n-    public void setMaxLength(int maxLength) {\n-        this.maxLength = maxLength;\n-    }\n-\n-    public int getMinLength() {\n-        return minLength;\n-    }\n-\n-    public void setMinLength(int minLength) {\n-        this.minLength = minLength;\n-    }\n-\n-    public List<String> getPrefixesNotPermitted() {\n-        if (prefixesNotPermitted == null) {\n-            prefixesNotPermitted = new ArrayList<String>();\n-        }\n-        return prefixesNotPermitted;\n-    }\n-\n-    public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\n-        this.prefixesNotPermitted = prefixesNotPermitted;\n-    }\n-\n-    public List<String> getSchemasNotPermitted() {\n-        if (schemasNotPermitted == null) {\n-            schemasNotPermitted = new ArrayList<String>();\n-        }\n-        return schemasNotPermitted;\n-    }\n-\n-    public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\n-        this.schemasNotPermitted = schemasNotPermitted;\n-    }\n-\n-    public List<String> getSuffixesNotPermitted() {\n-        if (suffixesNotPermitted == null) {\n-            suffixesNotPermitted = new ArrayList<String>();\n-        }\n-        return suffixesNotPermitted;\n-    }\n-\n-    public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\n-        this.suffixesNotPermitted = suffixesNotPermitted;\n-    }\n-\n-    public List<String> getWordsNotPermitted() {\n-        if (wordsNotPermitted == null) {\n-            wordsNotPermitted = new ArrayList<String>();\n-        }\n-        return wordsNotPermitted;\n-    }\n-\n-    public void setWordsNotPermitted(List<String> wordsNotPermitted) {\n-        this.wordsNotPermitted = wordsNotPermitted;\n-    }\n-\n-    public boolean isPropagateSuspension() {\n-        return propagateSuspension;\n-    }\n-\n-    public void setPropagateSuspension(boolean propagateSuspension) {\n-        this.propagateSuspension = propagateSuspension;\n-    }\n-\n-    public int getPermittedLoginRetries() {\n-        return permittedLoginRetries;\n-    }\n-\n-    public void setPermittedLoginRetries(int permittedLoginRetries) {\n-        this.permittedLoginRetries = permittedLoginRetries;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.annotation.SchemaList;\r\n+\r\n+public class AccountPolicySpec extends AbstractPolicySpec {\r\n+\r\n+    private static final long serialVersionUID = 3259256974414758406L;\r\n+\r\n+    /**\r\n+     * Minimum length.\r\n+     */\r\n+    private int maxLength;\r\n+\r\n+    /**\r\n+     * Maximum length.\r\n+     */\r\n+    private int minLength;\r\n+\r\n+    /**\r\n+     * Substrings not permitted.\r\n+     */\r\n+    private List<String> wordsNotPermitted;\r\n+\r\n+    /**\r\n+     * User attribute values not permitted.\r\n+     */\r\n+    @SchemaList\r\n+    private List<String> schemasNotPermitted;\r\n+\r\n+    /**\r\n+     * Substrings not permitted as prefix.\r\n+     */\r\n+    private List<String> prefixesNotPermitted;\r\n+\r\n+    /**\r\n+     * Substrings not permitted as suffix.\r\n+     */\r\n+    private List<String> suffixesNotPermitted;\r\n+\r\n+    /**\r\n+     * Specify if one or more lowercase characters are permitted.\r\n+     */\r\n+    private boolean allUpperCase;\r\n+\r\n+    /**\r\n+     * Specify if one or more uppercase characters are permitted.\r\n+     */\r\n+    private boolean allLowerCase;\r\n+\r\n+    /**\r\n+     * Specify if it must be propagate suspension in case of maximum subsequent\r\n+     * failed logins reached.\r\n+     */\r\n+    private boolean propagateSuspension;\r\n+\r\n+    /**\r\n+     * Number of permitted login retries.\r\n+     * 0 disabled; >0 enabled.\r\n+     * If the number of subsequent failed logins will be greater then this value\r\n+     * the account will be suspended (lock-out).\r\n+     */\r\n+    private int permittedLoginRetries;\r\n+\r\n+    public boolean isAllLowerCase() {\r\n+        return allLowerCase;\r\n+    }\r\n+\r\n+    public void setAllLowerCase(boolean allLowerCase) {\r\n+        this.allLowerCase = allLowerCase;\r\n+    }\r\n+\r\n+    public boolean isAllUpperCase() {\r\n+        return allUpperCase;\r\n+    }\r\n+\r\n+    public void setAllUpperCase(boolean allUpperCase) {\r\n+        this.allUpperCase = allUpperCase;\r\n+    }\r\n+\r\n+    public int getMaxLength() {\r\n+        return maxLength;\r\n+    }\r\n+\r\n+    public void setMaxLength(int maxLength) {\r\n+        this.maxLength = maxLength;\r\n+    }\r\n+\r\n+    public int getMinLength() {\r\n+        return minLength;\r\n+    }\r\n+\r\n+    public void setMinLength(int minLength) {\r\n+        this.minLength = minLength;\r\n+    }\r\n+\r\n+    public List<String> getPrefixesNotPermitted() {\r\n+        if (prefixesNotPermitted == null) {\r\n+            prefixesNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return prefixesNotPermitted;\r\n+    }\r\n+\r\n+    public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\r\n+        this.prefixesNotPermitted = prefixesNotPermitted;\r\n+    }\r\n+\r\n+    public List<String> getSchemasNotPermitted() {\r\n+        if (schemasNotPermitted == null) {\r\n+            schemasNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return schemasNotPermitted;\r\n+    }\r\n+\r\n+    public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\r\n+        this.schemasNotPermitted = schemasNotPermitted;\r\n+    }\r\n+\r\n+    public List<String> getSuffixesNotPermitted() {\r\n+        if (suffixesNotPermitted == null) {\r\n+            suffixesNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return suffixesNotPermitted;\r\n+    }\r\n+\r\n+    public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\r\n+        this.suffixesNotPermitted = suffixesNotPermitted;\r\n+    }\r\n+\r\n+    public List<String> getWordsNotPermitted() {\r\n+        if (wordsNotPermitted == null) {\r\n+            wordsNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return wordsNotPermitted;\r\n+    }\r\n+\r\n+    public void setWordsNotPermitted(List<String> wordsNotPermitted) {\r\n+        this.wordsNotPermitted = wordsNotPermitted;\r\n+    }\r\n+\r\n+    public boolean isPropagateSuspension() {\r\n+        return propagateSuspension;\r\n+    }\r\n+\r\n+    public void setPropagateSuspension(boolean propagateSuspension) {\r\n+        this.propagateSuspension = propagateSuspension;\r\n+    }\r\n+\r\n+    public int getPermittedLoginRetries() {\r\n+        return permittedLoginRetries;\r\n+    }\r\n+\r\n+    public void setPermittedLoginRetries(int permittedLoginRetries) {\r\n+        this.permittedLoginRetries = permittedLoginRetries;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/AccountPolicySpec.java"},{"sha":"d2f8ff69c76cab6935f4b78f9267e9e205349c6c","filename":"common/src/main/java/org/apache/syncope/common/types/AttributableType.java","status":"renamed","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributableType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,27 +1,27 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum AttributableType {\n-\n-    USER,\n-    ROLE,\n-    MEMBERSHIP;\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum AttributableType {\r\n+\r\n+    USER,\r\n+    ROLE,\r\n+    MEMBERSHIP;\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/AttributableType.java"},{"sha":"4d1463510d1949be8227a6c4ab475a47e580592e","filename":"common/src/main/java/org/apache/syncope/common/types/AuditElements.java","status":"renamed","additions":244,"deletions":244,"changes":488,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditElements.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,244 +1,244 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import java.util.EnumSet;\n-\n-public final class AuditElements {\n-\n-    private AuditElements() {\n-    }\n-\n-    public enum Category {\n-\n-        authentication(AuthenticationSubCategory.class),\n-        configuration(ConfigurationSubCategory.class),\n-        connector(ConnectorSubCategory.class),\n-        logger(LoggerSubCategory.class),\n-        notification(NotificationSubCategory.class),\n-        policy(PolicySubCategory.class),\n-        report(ReportSubCategory.class),\n-        resource(ResourceSubCategory.class),\n-        role(RoleSubCategory.class),\n-        schema(SchemaSubCategory.class),\n-        task(TaskSubCategory.class),\n-        user(UserSubCategory.class),\n-        userRequest(UserRequestSubCategory.class),\n-        workflow(WorkflowSubCategory.class);\n-\n-        private Class<? extends Enum<?>> subCategory;\n-\n-        Category(final Class<? extends Enum<?>> subCategory) {\n-            this.subCategory = subCategory;\n-        }\n-\n-        public Class<? extends Enum> getSubCategory() {\n-            return subCategory;\n-        }\n-\n-        public EnumSet<? extends Enum<?>> getSubCategoryElements() {\n-            return EnumSet.allOf(getSubCategory());\n-        }\n-    }\n-\n-    public enum Result {\n-\n-        success,\n-        failure\n-\n-    }\n-\n-    public enum AuthenticationSubCategory {\n-\n-        login,\n-        getEntitlements\n-\n-    }\n-\n-    public enum ConfigurationSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete,\n-        getMailTemplates,\n-        getValidators,\n-        dbExport\n-\n-    }\n-\n-    public enum ConnectorSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete,\n-        getBundles,\n-        getSchemaNames,\n-        getConfigurationProperties,\n-        check,\n-        readConnectorBean\n-\n-    }\n-\n-    public enum LoggerSubCategory {\n-\n-        list,\n-        setLevel,\n-        delete\n-\n-    }\n-\n-    public enum NotificationSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete,\n-        sent\n-\n-    }\n-\n-    public enum PolicySubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete\n-\n-    }\n-\n-    public enum ReportSubCategory {\n-\n-        list,\n-        listExecutions,\n-        create,\n-        read,\n-        readExecution,\n-        update,\n-        delete,\n-        deleteExecution,\n-        getReportletConfClasses,\n-        execute,\n-        exportExecutionResult\n-\n-    }\n-\n-    public enum ResourceSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete,\n-        getObject,\n-        getRoleResourcesMapping,\n-        getPropagationActionsClasses\n-\n-    }\n-\n-    public enum RoleSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        selfRead,\n-        update,\n-        delete,\n-        parent,\n-        children\n-\n-    }\n-\n-    public enum SchemaSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete,\n-        listDerived,\n-        createDerived,\n-        readDerived,\n-        updateDerived,\n-        deleteDerived,\n-        listVirtual,\n-        createVirtual,\n-        readVirtual,\n-        updateVirtual,\n-        deleteVirtual\n-\n-    }\n-\n-    public enum TaskSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete,\n-        listExecutions,\n-        getJobClasses,\n-        getSyncActionsClasses,\n-        readExecution,\n-        execute,\n-        report,\n-        deleteExecution\n-\n-    }\n-\n-    public enum UserSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete,\n-        verifyPassword,\n-        search,\n-        setStatus,\n-        executeWorkflow,\n-        getForms,\n-        getFormForUser,\n-        claimForm,\n-        submitForm\n-\n-    }\n-\n-    public enum UserRequestSubCategory {\n-\n-        list,\n-        create,\n-        read,\n-        update,\n-        delete,\n-        isCreateAllowed,}\n-\n-    public enum WorkflowSubCategory {\n-\n-        getDefinition,\n-        updateDefinition,\n-        getDefinedTasks\n-\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.EnumSet;\r\n+\r\n+public final class AuditElements {\r\n+\r\n+    private AuditElements() {\r\n+    }\r\n+\r\n+    public enum Category {\r\n+\r\n+        authentication(AuthenticationSubCategory.class),\r\n+        configuration(ConfigurationSubCategory.class),\r\n+        connector(ConnectorSubCategory.class),\r\n+        logger(LoggerSubCategory.class),\r\n+        notification(NotificationSubCategory.class),\r\n+        policy(PolicySubCategory.class),\r\n+        report(ReportSubCategory.class),\r\n+        resource(ResourceSubCategory.class),\r\n+        role(RoleSubCategory.class),\r\n+        schema(SchemaSubCategory.class),\r\n+        task(TaskSubCategory.class),\r\n+        user(UserSubCategory.class),\r\n+        userRequest(UserRequestSubCategory.class),\r\n+        workflow(WorkflowSubCategory.class);\r\n+\r\n+        private Class<? extends Enum<?>> subCategory;\r\n+\r\n+        Category(final Class<? extends Enum<?>> subCategory) {\r\n+            this.subCategory = subCategory;\r\n+        }\r\n+\r\n+        public Class<? extends Enum> getSubCategory() {\r\n+            return subCategory;\r\n+        }\r\n+\r\n+        public EnumSet<? extends Enum<?>> getSubCategoryElements() {\r\n+            return EnumSet.allOf(getSubCategory());\r\n+        }\r\n+    }\r\n+\r\n+    public enum Result {\r\n+\r\n+        success,\r\n+        failure\r\n+\r\n+    }\r\n+\r\n+    public enum AuthenticationSubCategory {\r\n+\r\n+        login,\r\n+        getEntitlements\r\n+\r\n+    }\r\n+\r\n+    public enum ConfigurationSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        getMailTemplates,\r\n+        getValidators,\r\n+        dbExport\r\n+\r\n+    }\r\n+\r\n+    public enum ConnectorSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        getBundles,\r\n+        getSchemaNames,\r\n+        getConfigurationProperties,\r\n+        check,\r\n+        readConnectorBean\r\n+\r\n+    }\r\n+\r\n+    public enum LoggerSubCategory {\r\n+\r\n+        list,\r\n+        setLevel,\r\n+        delete\r\n+\r\n+    }\r\n+\r\n+    public enum NotificationSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        sent\r\n+\r\n+    }\r\n+\r\n+    public enum PolicySubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete\r\n+\r\n+    }\r\n+\r\n+    public enum ReportSubCategory {\r\n+\r\n+        list,\r\n+        listExecutions,\r\n+        create,\r\n+        read,\r\n+        readExecution,\r\n+        update,\r\n+        delete,\r\n+        deleteExecution,\r\n+        getReportletConfClasses,\r\n+        execute,\r\n+        exportExecutionResult\r\n+\r\n+    }\r\n+\r\n+    public enum ResourceSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        getObject,\r\n+        getRoleResourcesMapping,\r\n+        getPropagationActionsClasses\r\n+\r\n+    }\r\n+\r\n+    public enum RoleSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        selfRead,\r\n+        update,\r\n+        delete,\r\n+        parent,\r\n+        children\r\n+\r\n+    }\r\n+\r\n+    public enum SchemaSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        listDerived,\r\n+        createDerived,\r\n+        readDerived,\r\n+        updateDerived,\r\n+        deleteDerived,\r\n+        listVirtual,\r\n+        createVirtual,\r\n+        readVirtual,\r\n+        updateVirtual,\r\n+        deleteVirtual\r\n+\r\n+    }\r\n+\r\n+    public enum TaskSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        listExecutions,\r\n+        getJobClasses,\r\n+        getSyncActionsClasses,\r\n+        readExecution,\r\n+        execute,\r\n+        report,\r\n+        deleteExecution\r\n+\r\n+    }\r\n+\r\n+    public enum UserSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        verifyPassword,\r\n+        search,\r\n+        setStatus,\r\n+        executeWorkflow,\r\n+        getForms,\r\n+        getFormForUser,\r\n+        claimForm,\r\n+        submitForm\r\n+\r\n+    }\r\n+\r\n+    public enum UserRequestSubCategory {\r\n+\r\n+        list,\r\n+        create,\r\n+        read,\r\n+        update,\r\n+        delete,\r\n+        isCreateAllowed,}\r\n+\r\n+    public enum WorkflowSubCategory {\r\n+\r\n+        getDefinition,\r\n+        updateDefinition,\r\n+        getDefinedTasks\r\n+\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/AuditElements.java"},{"sha":"da2813e6260d3f0814e6e73ab1f63daa64358598","filename":"common/src/main/java/org/apache/syncope/common/types/AuditLoggerName.java","status":"renamed","additions":100,"deletions":100,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAuditLoggerName.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,100 +1,100 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import java.text.ParseException;\n-import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.types.AuditElements.Category;\n-import org.apache.syncope.types.AuditElements.Result;\n-import org.codehaus.jackson.annotate.JsonCreator;\n-import org.codehaus.jackson.annotate.JsonProperty;\n-import org.codehaus.jackson.annotate.JsonTypeInfo;\n-\n-public class AuditLoggerName extends AbstractBaseBean {\n-\n-    private static final long serialVersionUID = -647989486671786839L;\n-\n-    private final Category category;\n-\n-    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-    private final Enum<?> subcategory;\n-\n-    private final Result result;\n-\n-    @JsonCreator\n-    public AuditLoggerName(@JsonProperty(\"category\") final Category category,\n-            @JsonProperty(\"subcategory\") final Enum<?> subcategory, @JsonProperty(\"result\") final Result result)\n-            throws IllegalArgumentException {\n-\n-        if (category == null || subcategory == null || result == null) {\n-            throw new IllegalArgumentException(\"Null values not permitted\");\n-        }\n-\n-        if (!category.getSubCategoryElements().contains(subcategory)) {\n-            throw new IllegalArgumentException(category.name() + \" does not contain \" + subcategory.name());\n-        }\n-\n-        this.category = category;\n-        this.subcategory = subcategory;\n-        this.result = result;\n-    }\n-\n-    public Category getCategory() {\n-        return category;\n-    }\n-\n-    public Result getResult() {\n-        return result;\n-    }\n-\n-    public Enum<?> getSubcategory() {\n-        return subcategory;\n-    }\n-\n-    public String toLoggerName() {\n-        return new StringBuilder().append(SyncopeLoggerType.AUDIT.getPrefix()).append('.').\n-                append(category.name()).append('.').\n-                append(subcategory.name()).append('.').\n-                append(result.name()).toString();\n-    }\n-\n-    public static AuditLoggerName fromLoggerName(final String loggerName)\n-            throws IllegalArgumentException, ParseException {\n-\n-        if (StringUtils.isBlank(loggerName)) {\n-            throw new IllegalArgumentException(\"Null value not permitted\");\n-        }\n-\n-        if (!loggerName.startsWith(SyncopeLoggerType.AUDIT.getPrefix())) {\n-            throw new ParseException(\"Audit logger name must start with \" + SyncopeLoggerType.AUDIT.getPrefix(), 0);\n-        }\n-\n-        String[] splitted = loggerName.split(\"\\\\.\");\n-        if (splitted == null || splitted.length < 5) {\n-            throw new ParseException(\"Unparsable logger name\", 0);\n-        }\n-\n-        Category category = Category.valueOf(splitted[2]);\n-        Enum<?> subcategory = Enum.valueOf(category.getSubCategory(), splitted[3]);\n-        Result result = Result.valueOf(splitted[4]);\n-\n-        return new AuditLoggerName(category, subcategory, result);\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.text.ParseException;\r\n+import org.apache.commons.lang.StringUtils;\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+import org.apache.syncope.common.types.AuditElements.Category;\r\n+import org.apache.syncope.common.types.AuditElements.Result;\r\n+import org.codehaus.jackson.annotate.JsonCreator;\r\n+import org.codehaus.jackson.annotate.JsonProperty;\r\n+import org.codehaus.jackson.annotate.JsonTypeInfo;\r\n+\r\n+public class AuditLoggerName extends AbstractBaseBean {\r\n+\r\n+    private static final long serialVersionUID = -647989486671786839L;\r\n+\r\n+    private final Category category;\r\n+\r\n+    @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\r\n+    private final Enum<?> subcategory;\r\n+\r\n+    private final Result result;\r\n+\r\n+    @JsonCreator\r\n+    public AuditLoggerName(@JsonProperty(\"category\") final Category category,\r\n+            @JsonProperty(\"subcategory\") final Enum<?> subcategory, @JsonProperty(\"result\") final Result result)\r\n+            throws IllegalArgumentException {\r\n+\r\n+        if (category == null || subcategory == null || result == null) {\r\n+            throw new IllegalArgumentException(\"Null values not permitted\");\r\n+        }\r\n+\r\n+        if (!category.getSubCategoryElements().contains(subcategory)) {\r\n+            throw new IllegalArgumentException(category.name() + \" does not contain \" + subcategory.name());\r\n+        }\r\n+\r\n+        this.category = category;\r\n+        this.subcategory = subcategory;\r\n+        this.result = result;\r\n+    }\r\n+\r\n+    public Category getCategory() {\r\n+        return category;\r\n+    }\r\n+\r\n+    public Result getResult() {\r\n+        return result;\r\n+    }\r\n+\r\n+    public Enum<?> getSubcategory() {\r\n+        return subcategory;\r\n+    }\r\n+\r\n+    public String toLoggerName() {\r\n+        return new StringBuilder().append(SyncopeLoggerType.AUDIT.getPrefix()).append('.').\r\n+                append(category.name()).append('.').\r\n+                append(subcategory.name()).append('.').\r\n+                append(result.name()).toString();\r\n+    }\r\n+\r\n+    public static AuditLoggerName fromLoggerName(final String loggerName)\r\n+            throws IllegalArgumentException, ParseException {\r\n+\r\n+        if (StringUtils.isBlank(loggerName)) {\r\n+            throw new IllegalArgumentException(\"Null value not permitted\");\r\n+        }\r\n+\r\n+        if (!loggerName.startsWith(SyncopeLoggerType.AUDIT.getPrefix())) {\r\n+            throw new ParseException(\"Audit logger name must start with \" + SyncopeLoggerType.AUDIT.getPrefix(), 0);\r\n+        }\r\n+\r\n+        String[] splitted = loggerName.split(\"\\\\.\");\r\n+        if (splitted == null || splitted.length < 5) {\r\n+            throw new ParseException(\"Unparsable logger name\", 0);\r\n+        }\r\n+\r\n+        Category category = Category.valueOf(splitted[2]);\r\n+        Enum<?> subcategory = Enum.valueOf(category.getSubCategory(), splitted[3]);\r\n+        Result result = Result.valueOf(splitted[4]);\r\n+\r\n+        return new AuditLoggerName(category, subcategory, result);\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/AuditLoggerName.java"},{"sha":"2417a828d5f15c43d3a4b540cc887d5f374890dc","filename":"common/src/main/java/org/apache/syncope/common/types/CipherAlgorithm.java","status":"renamed","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,40 +1,40 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum CipherAlgorithm {\n-\n-    SHA1(\"SHA-1\"),\n-    SHA256(\"SHA-256\"),\n-    AES(\"AES\"),\n-    SMD5(\"S-MD5\"),\n-    SSHA1(\"S-SHA-1\"),\n-    SSHA256(\"S-SHA-256\"),\n-    BCRYPT(\"BCRYPT\");\n-\n-    final private String algorithm;\n-\n-    CipherAlgorithm(String algorithm) {\n-        this.algorithm = algorithm;\n-    }\n-\n-    public final String getAlgorithm() {\n-        return algorithm;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum CipherAlgorithm {\r\n+\r\n+    SHA1(\"SHA-1\"),\r\n+    SHA256(\"SHA-256\"),\r\n+    AES(\"AES\"),\r\n+    SMD5(\"S-MD5\"),\r\n+    SSHA1(\"S-SHA-1\"),\r\n+    SSHA256(\"S-SHA-256\"),\r\n+    BCRYPT(\"BCRYPT\");\r\n+\r\n+    final private String algorithm;\r\n+\r\n+    CipherAlgorithm(String algorithm) {\r\n+        this.algorithm = algorithm;\r\n+    }\r\n+\r\n+    public final String getAlgorithm() {\r\n+        return algorithm;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/CipherAlgorithm.java"},{"sha":"8e6b025c961247202875c8fa7e2a6dc425186d15","filename":"common/src/main/java/org/apache/syncope/common/types/ConflictResolutionAction.java","status":"renamed","additions":31,"deletions":31,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConflictResolutionAction.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,31 +1,31 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum ConflictResolutionAction {\n-\n-    // sync first matcgh\n-    FIRSTMATCH,\n-    // sync last match\n-    LASTMATCH,\n-    // ignore sync\n-    IGNORE,\n-    // sync all\n-    ALL\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum ConflictResolutionAction {\r\n+\r\n+    // sync first matcgh\r\n+    FIRSTMATCH,\r\n+    // sync last match\r\n+    LASTMATCH,\r\n+    // ignore sync\r\n+    IGNORE,\r\n+    // sync all\r\n+    ALL\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/ConflictResolutionAction.java"},{"sha":"0ec0a3d2c634ce7c3f9fcc2f1f9301febe526574","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfPropSchema.java","status":"renamed","additions":112,"deletions":112,"changes":224,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfPropSchema.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,112 +1,112 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-@XmlRootElement\n-@XmlType\n-public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<ConnConfPropSchema> {\n-\n-    private static final long serialVersionUID = -1976365781005801296L;\n-\n-    private String name;\n-\n-    private String displayName;\n-\n-    private String helpMessage;\n-\n-    private String type;\n-\n-    private boolean required;\n-\n-    private int order;\n-\n-    private boolean confidential;\n-\n-    public String getName() {\n-        return name;\n-    }\n-\n-    public void setName(final String name) {\n-        this.name = name;\n-    }\n-\n-    public boolean isRequired() {\n-        return required;\n-    }\n-\n-    public void setRequired(final boolean required) {\n-        this.required = required;\n-    }\n-\n-    public String getType() {\n-        return type;\n-    }\n-\n-    public void setType(final String type) {\n-        this.type = type;\n-    }\n-\n-    public String getDisplayName() {\n-        return displayName;\n-    }\n-\n-    public void setDisplayName(final String displayName) {\n-        this.displayName = displayName;\n-    }\n-\n-    public String getHelpMessage() {\n-        return helpMessage;\n-    }\n-\n-    public void setHelpMessage(final String helpMessage) {\n-        this.helpMessage = helpMessage;\n-    }\n-\n-    public int getOrder() {\n-        return order;\n-    }\n-\n-    public void setOrder(final int order) {\n-        this.order = order;\n-    }\n-\n-    public boolean isConfidential() {\n-        return confidential;\n-    }\n-\n-    public void setConfidential(final boolean confidential) {\n-        this.confidential = confidential;\n-    }\n-\n-    @Override\n-    public int compareTo(final ConnConfPropSchema connConfPropSchema) {\n-        if (this.getOrder() > connConfPropSchema.getOrder()) {\n-            return 1;\n-        } else if (this.getOrder() < connConfPropSchema.getOrder()) {\n-            return -1;\n-        } else {\n-            return 0;\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class ConnConfPropSchema extends AbstractBaseBean implements Comparable<ConnConfPropSchema> {\r\n+\r\n+    private static final long serialVersionUID = -1976365781005801296L;\r\n+\r\n+    private String name;\r\n+\r\n+    private String displayName;\r\n+\r\n+    private String helpMessage;\r\n+\r\n+    private String type;\r\n+\r\n+    private boolean required;\r\n+\r\n+    private int order;\r\n+\r\n+    private boolean confidential;\r\n+\r\n+    public String getName() {\r\n+        return name;\r\n+    }\r\n+\r\n+    public void setName(final String name) {\r\n+        this.name = name;\r\n+    }\r\n+\r\n+    public boolean isRequired() {\r\n+        return required;\r\n+    }\r\n+\r\n+    public void setRequired(final boolean required) {\r\n+        this.required = required;\r\n+    }\r\n+\r\n+    public String getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public void setType(final String type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public String getDisplayName() {\r\n+        return displayName;\r\n+    }\r\n+\r\n+    public void setDisplayName(final String displayName) {\r\n+        this.displayName = displayName;\r\n+    }\r\n+\r\n+    public String getHelpMessage() {\r\n+        return helpMessage;\r\n+    }\r\n+\r\n+    public void setHelpMessage(final String helpMessage) {\r\n+        this.helpMessage = helpMessage;\r\n+    }\r\n+\r\n+    public int getOrder() {\r\n+        return order;\r\n+    }\r\n+\r\n+    public void setOrder(final int order) {\r\n+        this.order = order;\r\n+    }\r\n+\r\n+    public boolean isConfidential() {\r\n+        return confidential;\r\n+    }\r\n+\r\n+    public void setConfidential(final boolean confidential) {\r\n+        this.confidential = confidential;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(final ConnConfPropSchema connConfPropSchema) {\r\n+        if (this.getOrder() > connConfPropSchema.getOrder()) {\r\n+            return 1;\r\n+        } else if (this.getOrder() < connConfPropSchema.getOrder()) {\r\n+            return -1;\r\n+        } else {\r\n+            return 0;\r\n+        }\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/ConnConfPropSchema.java"},{"sha":"413ca1242bde3f4c22f00d18eb916387ba4a4ebb","filename":"common/src/main/java/org/apache/syncope/common/types/ConnConfProperty.java","status":"renamed","additions":73,"deletions":73,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnConfProperty.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,73 +1,73 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-\n-import javax.xml.bind.annotation.XmlElement;\n-import javax.xml.bind.annotation.XmlElementWrapper;\n-import javax.xml.bind.annotation.XmlRootElement;\n-import javax.xml.bind.annotation.XmlType;\n-\n-import org.apache.syncope.client.AbstractBaseBean;\n-\n-@XmlRootElement\n-@XmlType\n-public class ConnConfProperty extends AbstractBaseBean implements Comparable<ConnConfProperty> {\n-\n-    private static final long serialVersionUID = -8391413960221862238L;\n-\n-    private ConnConfPropSchema schema;\n-\n-    private List<?> values = new ArrayList<Object>();\n-\n-    private boolean overridable;\n-\n-    public ConnConfPropSchema getSchema() {\n-        return schema;\n-    }\n-\n-    public void setSchema(final ConnConfPropSchema schema) {\n-        this.schema = schema;\n-    }\n-\n-    @XmlElementWrapper(name = \"values\")\n-    @XmlElement(name = \"value\")\n-    public List<?> getValues() {\n-        return values;\n-    }\n-\n-    public void setValues(final List<?> values) {\n-        this.values = values;\n-    }\n-\n-    public boolean isOverridable() {\n-        return overridable;\n-    }\n-\n-    public void setOverridable(final boolean overridable) {\n-        this.overridable = overridable;\n-    }\n-\n-    @Override\n-    public int compareTo(final ConnConfProperty connConfProperty) {\n-        return this.getSchema().compareTo(connConfProperty.getSchema());\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n+\r\n+import org.apache.syncope.common.AbstractBaseBean;\r\n+\r\n+@XmlRootElement\r\n+@XmlType\r\n+public class ConnConfProperty extends AbstractBaseBean implements Comparable<ConnConfProperty> {\r\n+\r\n+    private static final long serialVersionUID = -8391413960221862238L;\r\n+\r\n+    private ConnConfPropSchema schema;\r\n+\r\n+    private List<?> values = new ArrayList<Object>();\r\n+\r\n+    private boolean overridable;\r\n+\r\n+    public ConnConfPropSchema getSchema() {\r\n+        return schema;\r\n+    }\r\n+\r\n+    public void setSchema(final ConnConfPropSchema schema) {\r\n+        this.schema = schema;\r\n+    }\r\n+\r\n+    @XmlElementWrapper(name = \"values\")\r\n+    @XmlElement(name = \"value\")\r\n+    public List<?> getValues() {\r\n+        return values;\r\n+    }\r\n+\r\n+    public void setValues(final List<?> values) {\r\n+        this.values = values;\r\n+    }\r\n+\r\n+    public boolean isOverridable() {\r\n+        return overridable;\r\n+    }\r\n+\r\n+    public void setOverridable(final boolean overridable) {\r\n+        this.overridable = overridable;\r\n+    }\r\n+\r\n+    @Override\r\n+    public int compareTo(final ConnConfProperty connConfProperty) {\r\n+        return this.getSchema().compareTo(connConfProperty.getSchema());\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/ConnConfProperty.java"},{"sha":"048f6f70dd9e6ab933c39186f763b0903c082711","filename":"common/src/main/java/org/apache/syncope/common/types/ConnParameterType.java","status":"renamed","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnParameterType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,37 +1,37 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum ConnParameterType {\n-\n-    /**\n-     * Connector parameter type:\n-     */\n-    OVERRIDABLE(true),\n-    NOT_OVERRIDABLE(false);\n-    private boolean overridable;\n-\n-    ConnParameterType(final boolean overridable) {\n-        this.overridable = overridable;\n-    }\n-\n-    public boolean getOverridable() {\n-        return overridable;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum ConnParameterType {\r\n+\r\n+    /**\r\n+     * Connector parameter type:\r\n+     */\r\n+    OVERRIDABLE(true),\r\n+    NOT_OVERRIDABLE(false);\r\n+    private boolean overridable;\r\n+\r\n+    ConnParameterType(final boolean overridable) {\r\n+        this.overridable = overridable;\r\n+    }\r\n+\r\n+    public boolean getOverridable() {\r\n+        return overridable;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/ConnParameterType.java"},{"sha":"6a2370bed924e9e1789aec88cb83da15f5825f16","filename":"common/src/main/java/org/apache/syncope/common/types/ConnectorCapability.java","status":"renamed","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FConnectorCapability.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,35 +1,35 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-/**\n- * Enum of all possible capabilities that a connector instance can expose.\n- */\n-public enum ConnectorCapability {\n-\n-    ONE_PHASE_CREATE,\n-    TWO_PHASES_CREATE,\n-    ONE_PHASE_UPDATE,\n-    TWO_PHASES_UPDATE,\n-    ONE_PHASE_DELETE,\n-    TWO_PHASES_DELETE,\n-    SEARCH,\n-    SYNC\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+/**\r\n+ * Enum of all possible capabilities that a connector instance can expose.\r\n+ */\r\n+public enum ConnectorCapability {\r\n+\r\n+    ONE_PHASE_CREATE,\r\n+    TWO_PHASES_CREATE,\r\n+    ONE_PHASE_UPDATE,\r\n+    TWO_PHASES_UPDATE,\r\n+    ONE_PHASE_DELETE,\r\n+    TWO_PHASES_DELETE,\r\n+    SEARCH,\r\n+    SYNC\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/ConnectorCapability.java"},{"sha":"c6a50681edc273577a50a6e88810cf4e00f2d256","filename":"common/src/main/java/org/apache/syncope/common/types/EntityViolationType.java","status":"renamed","additions":69,"deletions":69,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,69 +1,69 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum EntityViolationType {\n-\n-    Standard(\"\"),\n-    InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\n-    InvalidEntitlementName(\"org.apache.syncope.core.validation.entitlement.name\"),\n-    InvalidMapping(\"org.apache.syncope.core.validation.mapping\"),\n-    InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\n-    InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\n-    InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\n-    InvalidNotification(\"org.apache.syncope.core.validation.notification\"),\n-    InvalidPassword(\"org.apache.syncope.core.validation.syncopeuser.password\"),\n-    InvalidPasswordPolicy(\"org.apache.syncope.core.validation.passwordpolicy\"),\n-    InvalidPolicy(\"org.apache.syncope.core.validation.policy\"),\n-    InvalidPropagationTask(\"org.apache.syncope.core.validation.propagationtask\"),\n-    InvalidRSchema(\"org.apache.syncope.core.validation.attrvalue.rSchema\"),\n-    InvalidRDerSchema(\"org.apache.syncope.core.validation.attrvalue.rDerSchema\"),\n-    InvalidRVirSchema(\"org.apache.syncope.core.validation.attrvalue.rVirSchema\"),\n-    InvalidReport(\"org.apache.syncope.core.validation.report\"),\n-    InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\n-    InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\n-    InvalidSchemaTypeSpecification(\"org.apache.syncope.core.validation.attrvalue.schemaTypeSpecification\"),\n-    InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\n-    InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\n-    InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\n-    InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.uSchema\"),\n-    InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.derSchema\"),\n-    InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.uVirSchema\"),\n-    InvalidUsername(\"org.apache.syncope.core.validation.syncopeuser.username\"),\n-    InvalidValueList(\"org.apache.syncope.core.validation.attr.valueList\"),\n-    MultivalueAndUniqueConstraint(\"org.apache.syncope.core.validation.schema.multivalueAndUniqueConstraint\"),\n-    MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\");\n-\n-    private String message;\n-\n-    private EntityViolationType(final String message) {\n-        this.message = message;\n-    }\n-\n-    public void setMessageTemplate(final String message) {\n-        this.message = message;\n-    }\n-\n-    @Override\n-    public String toString() {\n-        return this == Standard\n-                ? message\n-                : super.toString();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum EntityViolationType {\r\n+\r\n+    Standard(\"\"),\r\n+    InvalidAccountPolicy(\"org.apache.syncope.core.validation.accountpolicy\"),\r\n+    InvalidEntitlementName(\"org.apache.syncope.core.validation.entitlement.name\"),\r\n+    InvalidMapping(\"org.apache.syncope.core.validation.mapping\"),\r\n+    InvalidMSchema(\"org.apache.syncope.core.validation.attrvalue.mSchema\"),\r\n+    InvalidMDerSchema(\"org.apache.syncope.core.validation.attrvalue.mDerSchema\"),\r\n+    InvalidMVirSchema(\"org.apache.syncope.core.validation.attrvalue.mVirSchema\"),\r\n+    InvalidNotification(\"org.apache.syncope.core.validation.notification\"),\r\n+    InvalidPassword(\"org.apache.syncope.core.validation.syncopeuser.password\"),\r\n+    InvalidPasswordPolicy(\"org.apache.syncope.core.validation.passwordpolicy\"),\r\n+    InvalidPolicy(\"org.apache.syncope.core.validation.policy\"),\r\n+    InvalidPropagationTask(\"org.apache.syncope.core.validation.propagationtask\"),\r\n+    InvalidRSchema(\"org.apache.syncope.core.validation.attrvalue.rSchema\"),\r\n+    InvalidRDerSchema(\"org.apache.syncope.core.validation.attrvalue.rDerSchema\"),\r\n+    InvalidRVirSchema(\"org.apache.syncope.core.validation.attrvalue.rVirSchema\"),\r\n+    InvalidReport(\"org.apache.syncope.core.validation.report\"),\r\n+    InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\r\n+    InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\r\n+    InvalidSchemaTypeSpecification(\"org.apache.syncope.core.validation.attrvalue.schemaTypeSpecification\"),\r\n+    InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\r\n+    InvalidSyncTask(\"org.apache.syncope.core.validation.synctask\"),\r\n+    InvalidSyncPolicy(\"org.apache.syncope.core.validation.syncpolicy\"),\r\n+    InvalidUSchema(\"org.apache.syncope.core.validation.attrvalue.uSchema\"),\r\n+    InvalidUDerSchema(\"org.apache.syncope.core.validation.attrvalue.derSchema\"),\r\n+    InvalidUVirSchema(\"org.apache.syncope.core.validation.attrvalue.uVirSchema\"),\r\n+    InvalidUsername(\"org.apache.syncope.core.validation.syncopeuser.username\"),\r\n+    InvalidValueList(\"org.apache.syncope.core.validation.attr.valueList\"),\r\n+    MultivalueAndUniqueConstraint(\"org.apache.syncope.core.validation.schema.multivalueAndUniqueConstraint\"),\r\n+    MoreThanOneNonNull(\"org.apache.syncope.core.validation.attrvalue.moreThanOneNonNull\");\r\n+\r\n+    private String message;\r\n+\r\n+    private EntityViolationType(final String message) {\r\n+        this.message = message;\r\n+    }\r\n+\r\n+    public void setMessageTemplate(final String message) {\r\n+        this.message = message;\r\n+    }\r\n+\r\n+    @Override\r\n+    public String toString() {\r\n+        return this == Standard\r\n+                ? message\r\n+                : super.toString();\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/EntityViolationType.java"},{"sha":"75a7cf7b53c674d83ae8323f19c677a09a6cec0a","filename":"common/src/main/java/org/apache/syncope/common/types/IntMappingType.java","status":"renamed","additions":193,"deletions":193,"changes":386,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FIntMappingType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,193 +1,193 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import java.util.EnumSet;\n-import java.util.HashSet;\n-import java.util.Set;\n-\n-/**\n- * Internal attribute mapping type.\n- */\n-public enum IntMappingType {\n-\n-    // Unfortunately enum type cannot be extended ...\n-    // -------------------------\n-    // User attribute types (the same in UserMappingType)\n-    // -------------------------\n-    UserSchema(AttributableType.USER),\n-    UserDerivedSchema(AttributableType.USER),\n-    UserVirtualSchema(AttributableType.USER),\n-    UserId(AttributableType.USER),\n-    Username(AttributableType.USER),\n-    Password(AttributableType.USER),\n-    // -------------------------\n-    // Role attribute types (the same in RoleMappingType)\n-    // -------------------------\n-    RoleSchema(AttributableType.ROLE),\n-    RoleDerivedSchema(AttributableType.ROLE),\n-    RoleVirtualSchema(AttributableType.ROLE),\n-    RoleId(AttributableType.ROLE),\n-    RoleName(AttributableType.ROLE),\n-    // -------------------------\n-    // Membership attribute types (the same in MembershipMappingType)\n-    // -------------------------\n-    MembershipSchema(AttributableType.MEMBERSHIP),\n-    MembershipDerivedSchema(AttributableType.MEMBERSHIP),\n-    MembershipVirtualSchema(AttributableType.MEMBERSHIP),\n-    MembershipId(AttributableType.MEMBERSHIP);\n-\n-    private AttributableType attributableType;\n-\n-    private IntMappingType(final AttributableType attributableType) {\n-        this.attributableType = attributableType;\n-    }\n-\n-    public AttributableType getAttributableType() {\n-        return attributableType;\n-    }\n-\n-    /**\n-     * Get attribute types for a certain attributable type.\n-     *\n-     * @param attributableType attributable type\n-     * @param toBeFiltered types to be filtered from the result.\n-     * @return set of attribute types.\n-     */\n-    public static Set<IntMappingType> getAttributeTypes(\n-            final AttributableType attributableType, final Set<IntMappingType> toBeFiltered) {\n-\n-        final Set<IntMappingType> res = getAttributeTypes(attributableType);\n-        res.removeAll(toBeFiltered);\n-\n-        return res;\n-    }\n-\n-    /**\n-     * Get attribute types for a certain attributable type.\n-     *\n-     * @param attributableType attributable type\n-     * @return set of attribute types.\n-     */\n-    public static Set<IntMappingType> getAttributeTypes(final AttributableType attributableType) {\n-        final EnumSet<?> enumset;\n-\n-        switch (attributableType) {\n-            case ROLE:\n-                enumset = EnumSet.allOf(RoleMappingType.class);\n-                break;\n-            case MEMBERSHIP:\n-                enumset = EnumSet.allOf(MembershipMappingType.class);\n-                break;\n-            default:\n-                enumset = EnumSet.allOf(UserMappingType.class);\n-        }\n-\n-        final Set<IntMappingType> res = new HashSet<IntMappingType>();\n-\n-        for (Object obj : enumset) {\n-            res.add(IntMappingType.valueOf(obj.toString()));\n-        }\n-\n-        return res;\n-    }\n-\n-    public static Set<IntMappingType> getEmbedded() {\n-        return EnumSet.of(\n-                IntMappingType.UserId, IntMappingType.Username, IntMappingType.Password,\n-                IntMappingType.RoleId, IntMappingType.RoleName,\n-                IntMappingType.MembershipId);\n-    }\n-\n-    /**\n-     * Check if attribute type belongs to the specified attributable type set.\n-     *\n-     * @param attributableType attributable type.\n-     * @param type attribute type.\n-     * @return true if attribute type belongs to the specified attributable type set.\n-     */\n-    public static boolean contains(final AttributableType attributableType, final String type) {\n-        switch (attributableType) {\n-            case ROLE:\n-                for (RoleMappingType c : RoleMappingType.values()) {\n-                    if (c.name().equals(type)) {\n-                        return true;\n-                    }\n-                }\n-                break;\n-\n-            case MEMBERSHIP:\n-                for (MembershipMappingType c : MembershipMappingType.values()) {\n-                    if (c.name().equals(type)) {\n-                        return true;\n-                    }\n-                }\n-                break;\n-\n-            case USER:\n-            default:\n-                for (UserMappingType c : UserMappingType.values()) {\n-                    if (c.name().equals(type)) {\n-                        return true;\n-                    }\n-                }\n-                break;\n-        }\n-        return false;\n-    }\n-\n-    /**\n-     * User attribute types.\n-     */\n-    private enum UserMappingType {\n-\n-        UserSchema,\n-        UserDerivedSchema,\n-        UserVirtualSchema,\n-        UserId,\n-        Username,\n-        Password;\n-\n-    }\n-\n-    /**\n-     * Role attribute types.\n-     */\n-    private enum RoleMappingType {\n-\n-        RoleSchema,\n-        RoleDerivedSchema,\n-        RoleVirtualSchema,\n-        RoleId,\n-        RoleName;\n-\n-    }\n-\n-    /**\n-     * Membership attribute types.\n-     */\n-    private enum MembershipMappingType {\n-\n-        MembershipSchema,\n-        MembershipDerivedSchema,\n-        MembershipVirtualSchema,\n-        MembershipId;\n-\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.EnumSet;\r\n+import java.util.HashSet;\r\n+import java.util.Set;\r\n+\r\n+/**\r\n+ * Internal attribute mapping type.\r\n+ */\r\n+public enum IntMappingType {\r\n+\r\n+    // Unfortunately enum type cannot be extended ...\r\n+    // -------------------------\r\n+    // User attribute types (the same in UserMappingType)\r\n+    // -------------------------\r\n+    UserSchema(AttributableType.USER),\r\n+    UserDerivedSchema(AttributableType.USER),\r\n+    UserVirtualSchema(AttributableType.USER),\r\n+    UserId(AttributableType.USER),\r\n+    Username(AttributableType.USER),\r\n+    Password(AttributableType.USER),\r\n+    // -------------------------\r\n+    // Role attribute types (the same in RoleMappingType)\r\n+    // -------------------------\r\n+    RoleSchema(AttributableType.ROLE),\r\n+    RoleDerivedSchema(AttributableType.ROLE),\r\n+    RoleVirtualSchema(AttributableType.ROLE),\r\n+    RoleId(AttributableType.ROLE),\r\n+    RoleName(AttributableType.ROLE),\r\n+    // -------------------------\r\n+    // Membership attribute types (the same in MembershipMappingType)\r\n+    // -------------------------\r\n+    MembershipSchema(AttributableType.MEMBERSHIP),\r\n+    MembershipDerivedSchema(AttributableType.MEMBERSHIP),\r\n+    MembershipVirtualSchema(AttributableType.MEMBERSHIP),\r\n+    MembershipId(AttributableType.MEMBERSHIP);\r\n+\r\n+    private AttributableType attributableType;\r\n+\r\n+    private IntMappingType(final AttributableType attributableType) {\r\n+        this.attributableType = attributableType;\r\n+    }\r\n+\r\n+    public AttributableType getAttributableType() {\r\n+        return attributableType;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get attribute types for a certain attributable type.\r\n+     *\r\n+     * @param attributableType attributable type\r\n+     * @param toBeFiltered types to be filtered from the result.\r\n+     * @return set of attribute types.\r\n+     */\r\n+    public static Set<IntMappingType> getAttributeTypes(\r\n+            final AttributableType attributableType, final Set<IntMappingType> toBeFiltered) {\r\n+\r\n+        final Set<IntMappingType> res = getAttributeTypes(attributableType);\r\n+        res.removeAll(toBeFiltered);\r\n+\r\n+        return res;\r\n+    }\r\n+\r\n+    /**\r\n+     * Get attribute types for a certain attributable type.\r\n+     *\r\n+     * @param attributableType attributable type\r\n+     * @return set of attribute types.\r\n+     */\r\n+    public static Set<IntMappingType> getAttributeTypes(final AttributableType attributableType) {\r\n+        final EnumSet<?> enumset;\r\n+\r\n+        switch (attributableType) {\r\n+            case ROLE:\r\n+                enumset = EnumSet.allOf(RoleMappingType.class);\r\n+                break;\r\n+            case MEMBERSHIP:\r\n+                enumset = EnumSet.allOf(MembershipMappingType.class);\r\n+                break;\r\n+            default:\r\n+                enumset = EnumSet.allOf(UserMappingType.class);\r\n+        }\r\n+\r\n+        final Set<IntMappingType> res = new HashSet<IntMappingType>();\r\n+\r\n+        for (Object obj : enumset) {\r\n+            res.add(IntMappingType.valueOf(obj.toString()));\r\n+        }\r\n+\r\n+        return res;\r\n+    }\r\n+\r\n+    public static Set<IntMappingType> getEmbedded() {\r\n+        return EnumSet.of(\r\n+                IntMappingType.UserId, IntMappingType.Username, IntMappingType.Password,\r\n+                IntMappingType.RoleId, IntMappingType.RoleName,\r\n+                IntMappingType.MembershipId);\r\n+    }\r\n+\r\n+    /**\r\n+     * Check if attribute type belongs to the specified attributable type set.\r\n+     *\r\n+     * @param attributableType attributable type.\r\n+     * @param type attribute type.\r\n+     * @return true if attribute type belongs to the specified attributable type set.\r\n+     */\r\n+    public static boolean contains(final AttributableType attributableType, final String type) {\r\n+        switch (attributableType) {\r\n+            case ROLE:\r\n+                for (RoleMappingType c : RoleMappingType.values()) {\r\n+                    if (c.name().equals(type)) {\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+                break;\r\n+\r\n+            case MEMBERSHIP:\r\n+                for (MembershipMappingType c : MembershipMappingType.values()) {\r\n+                    if (c.name().equals(type)) {\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+                break;\r\n+\r\n+            case USER:\r\n+            default:\r\n+                for (UserMappingType c : UserMappingType.values()) {\r\n+                    if (c.name().equals(type)) {\r\n+                        return true;\r\n+                    }\r\n+                }\r\n+                break;\r\n+        }\r\n+        return false;\r\n+    }\r\n+\r\n+    /**\r\n+     * User attribute types.\r\n+     */\r\n+    private enum UserMappingType {\r\n+\r\n+        UserSchema,\r\n+        UserDerivedSchema,\r\n+        UserVirtualSchema,\r\n+        UserId,\r\n+        Username,\r\n+        Password;\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Role attribute types.\r\n+     */\r\n+    private enum RoleMappingType {\r\n+\r\n+        RoleSchema,\r\n+        RoleDerivedSchema,\r\n+        RoleVirtualSchema,\r\n+        RoleId,\r\n+        RoleName;\r\n+\r\n+    }\r\n+\r\n+    /**\r\n+     * Membership attribute types.\r\n+     */\r\n+    private enum MembershipMappingType {\r\n+\r\n+        MembershipSchema,\r\n+        MembershipDerivedSchema,\r\n+        MembershipVirtualSchema,\r\n+        MembershipId;\r\n+\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/IntMappingType.java"},{"sha":"4b04c35a92918734acb2af8eec51796cf46053d1","filename":"common/src/main/java/org/apache/syncope/common/types/PasswordPolicySpec.java","status":"renamed","additions":354,"deletions":353,"changes":707,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPasswordPolicySpec.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,353 +1,354 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.annotation.SchemaList;\n-\n-public class PasswordPolicySpec extends AbstractPolicySpec {\n-\n-    private static final long serialVersionUID = -7988778083915548547L;\n-\n-    /**\n-     * History length.\n-     */\n-    private int historyLength;\n-\n-    /**\n-     * Minimum length.\n-     */\n-    private int maxLength;\n-\n-    /**\n-     * Maximum length.\n-     */\n-    private int minLength;\n-\n-    /**\n-     * Substrings not permitted.\n-     */\n-    private List<String> wordsNotPermitted;\n-\n-    /**\n-     * User attribute values not permitted.\n-     */\n-    @SchemaList\n-    private List<String> schemasNotPermitted;\n-\n-    /**\n-     * Specify if one or more non alphanumeric characters are required.\n-     */\n-    private boolean nonAlphanumericRequired;\n-\n-    /**\n-     * Specify if one or more alphanumeric characters are required.\n-     */\n-    private boolean alphanumericRequired;\n-\n-    /**\n-     * Specify if one or more digits are required.\n-     */\n-    private boolean digitRequired;\n-\n-    /**\n-     * Specify if one or more lowercase alphabetic characters are required.\n-     */\n-    private boolean lowercaseRequired;\n-\n-    /**\n-     * Specify if one or more uppercase alphabetic characters are required.\n-     */\n-    private boolean uppercaseRequired;\n-\n-    /**\n-     * Specify if must start with a digit.\n-     */\n-    private boolean mustStartWithDigit;\n-\n-    /**\n-     * Specify if mustn't start with a digit.\n-     */\n-    private boolean mustntStartWithDigit;\n-\n-    /**\n-     * Specify if must end with a digit.\n-     */\n-    private boolean mustEndWithDigit;\n-\n-    /**\n-     * Specify if mustn't end with a digit.\n-     */\n-    private boolean mustntEndWithDigit;\n-\n-    /**\n-     * Specify if must start with a non alphanumeric character.\n-     */\n-    private boolean mustStartWithNonAlpha;\n-\n-    /**\n-     * Specify if must start with a alphanumeric character.\n-     */\n-    private boolean mustStartWithAlpha;\n-\n-    /**\n-     * Specify if mustn't start with a non alphanumeric character.\n-     */\n-    private boolean mustntStartWithNonAlpha;\n-\n-    /**\n-     * Specify if mustn't start with a alphanumeric character.\n-     */\n-    private boolean mustntStartWithAlpha;\n-\n-    /**\n-     * Specify if must end with a non alphanumeric character.\n-     */\n-    private boolean mustEndWithNonAlpha;\n-\n-    /**\n-     * Specify if must end with a alphanumeric character.\n-     */\n-    private boolean mustEndWithAlpha;\n-\n-    /**\n-     * Specify if mustn't end with a non alphanumeric character.\n-     */\n-    private boolean mustntEndWithNonAlpha;\n-\n-    /**\n-     * Specify if mustn't end with a alphanumeric character.\n-     */\n-    private boolean mustntEndWithAlpha;\n-\n-    /**\n-     * Substrings not permitted as prefix.\n-     */\n-    private List<String> prefixesNotPermitted;\n-\n-    /**\n-     * Substrings not permitted as suffix.\n-     */\n-    private List<String> suffixesNotPermitted;\n-\n-    public boolean isDigitRequired() {\n-        return digitRequired;\n-    }\n-\n-    public void setDigitRequired(boolean digitRequired) {\n-        this.digitRequired = digitRequired;\n-    }\n-\n-    public boolean isLowercaseRequired() {\n-        return lowercaseRequired;\n-    }\n-\n-    public void setLowercaseRequired(boolean lowercaseRequired) {\n-        this.lowercaseRequired = lowercaseRequired;\n-    }\n-\n-    public int getMaxLength() {\n-        return maxLength;\n-    }\n-\n-    public void setMaxLength(int maxLength) {\n-        this.maxLength = maxLength;\n-    }\n-\n-    public int getMinLength() {\n-        return minLength;\n-    }\n-\n-    public void setMinLength(int minLength) {\n-        this.minLength = minLength;\n-    }\n-\n-    public boolean isMustEndWithDigit() {\n-        return mustEndWithDigit;\n-    }\n-\n-    public void setMustEndWithDigit(boolean mustEndWithDigit) {\n-        this.mustEndWithDigit = mustEndWithDigit;\n-    }\n-\n-    public boolean isMustEndWithNonAlpha() {\n-        return mustEndWithNonAlpha;\n-    }\n-\n-    public void setMustEndWithNonAlpha(boolean mustEndWithNonAlpha) {\n-        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\n-    }\n-\n-    public boolean isMustStartWithDigit() {\n-        return mustStartWithDigit;\n-    }\n-\n-    public void setMustStartWithDigit(boolean mustStartWithDigit) {\n-        this.mustStartWithDigit = mustStartWithDigit;\n-    }\n-\n-    public boolean isMustStartWithNonAlpha() {\n-        return mustStartWithNonAlpha;\n-    }\n-\n-    public void setMustStartWithNonAlpha(boolean mustStartWithNonAlpha) {\n-        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\n-    }\n-\n-    public boolean isMustntEndWithDigit() {\n-        return mustntEndWithDigit;\n-    }\n-\n-    public void setMustntEndWithDigit(boolean mustntEndWithDigit) {\n-        this.mustntEndWithDigit = mustntEndWithDigit;\n-    }\n-\n-    public boolean isMustntEndWithNonAlpha() {\n-        return mustntEndWithNonAlpha;\n-    }\n-\n-    public void setMustntEndWithNonAlpha(boolean mustntEndWithNonAlpha) {\n-        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\n-    }\n-\n-    public boolean isMustntStartWithDigit() {\n-        return mustntStartWithDigit;\n-    }\n-\n-    public void setMustntStartWithDigit(boolean mustntStartWithDigit) {\n-        this.mustntStartWithDigit = mustntStartWithDigit;\n-    }\n-\n-    public boolean isMustntStartWithNonAlpha() {\n-        return mustntStartWithNonAlpha;\n-    }\n-\n-    public void setMustntStartWithNonAlpha(boolean mustntStartWithNonAlpha) {\n-        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\n-    }\n-\n-    public boolean isNonAlphanumericRequired() {\n-        return nonAlphanumericRequired;\n-    }\n-\n-    public void setNonAlphanumericRequired(boolean nonAlphanumericRequired) {\n-        this.nonAlphanumericRequired = nonAlphanumericRequired;\n-    }\n-\n-    public List<String> getPrefixesNotPermitted() {\n-        if (prefixesNotPermitted == null) {\n-            prefixesNotPermitted = new ArrayList<String>();\n-        }\n-        return prefixesNotPermitted;\n-    }\n-\n-    public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\n-        this.prefixesNotPermitted = prefixesNotPermitted;\n-    }\n-\n-    public List<String> getSchemasNotPermitted() {\n-        if (schemasNotPermitted == null) {\n-            schemasNotPermitted = new ArrayList<String>();\n-        }\n-        return schemasNotPermitted;\n-    }\n-\n-    public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\n-        this.schemasNotPermitted = schemasNotPermitted;\n-    }\n-\n-    public List<String> getSuffixesNotPermitted() {\n-        if (suffixesNotPermitted == null) {\n-            suffixesNotPermitted = new ArrayList<String>();\n-        }\n-        return suffixesNotPermitted;\n-    }\n-\n-    public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\n-        this.suffixesNotPermitted = suffixesNotPermitted;\n-    }\n-\n-    public boolean isUppercaseRequired() {\n-        return uppercaseRequired;\n-    }\n-\n-    public void setUppercaseRequired(boolean uppercaseRequired) {\n-        this.uppercaseRequired = uppercaseRequired;\n-    }\n-\n-    public List<String> getWordsNotPermitted() {\n-        if (wordsNotPermitted == null) {\n-            wordsNotPermitted = new ArrayList<String>();\n-        }\n-        return wordsNotPermitted;\n-    }\n-\n-    public void setWordsNotPermitted(List<String> wordsNotPermitted) {\n-        this.wordsNotPermitted = wordsNotPermitted;\n-    }\n-\n-    public boolean isAlphanumericRequired() {\n-        return alphanumericRequired;\n-    }\n-\n-    public void setAlphanumericRequired(boolean alphanumericRequired) {\n-        this.alphanumericRequired = alphanumericRequired;\n-    }\n-\n-    public boolean isMustEndWithAlpha() {\n-        return mustEndWithAlpha;\n-    }\n-\n-    public void setMustEndWithAlpha(boolean mustEndWithAlpha) {\n-        this.mustEndWithAlpha = mustEndWithAlpha;\n-    }\n-\n-    public boolean isMustStartWithAlpha() {\n-        return mustStartWithAlpha;\n-    }\n-\n-    public void setMustStartWithAlpha(boolean mustStartWithAlpha) {\n-        this.mustStartWithAlpha = mustStartWithAlpha;\n-    }\n-\n-    public boolean isMustntEndWithAlpha() {\n-        return mustntEndWithAlpha;\n-    }\n-\n-    public void setMustntEndWithAlpha(boolean mustntEndWithAlpha) {\n-        this.mustntEndWithAlpha = mustntEndWithAlpha;\n-    }\n-\n-    public boolean isMustntStartWithAlpha() {\n-        return mustntStartWithAlpha;\n-    }\n-\n-    public void setMustntStartWithAlpha(boolean mustntStartWithAlpha) {\n-        this.mustntStartWithAlpha = mustntStartWithAlpha;\n-    }\n-\n-    public int getHistoryLength() {\n-        return historyLength;\n-    }\n-\n-    public void setHistoryLength(int historyLength) {\n-        this.historyLength = historyLength;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.annotation.SchemaList;\r\n+\r\n+public class PasswordPolicySpec extends AbstractPolicySpec {\r\n+\r\n+    private static final long serialVersionUID = -7988778083915548547L;\r\n+\r\n+    /**\r\n+     * History length.\r\n+     */\r\n+    private int historyLength;\r\n+\r\n+    /**\r\n+     * Minimum length.\r\n+     */\r\n+    private int maxLength;\r\n+\r\n+    /**\r\n+     * Maximum length.\r\n+     */\r\n+    private int minLength;\r\n+\r\n+    /**\r\n+     * Substrings not permitted.\r\n+     */\r\n+    private List<String> wordsNotPermitted;\r\n+\r\n+    /**\r\n+     * User attribute values not permitted.\r\n+     */\r\n+    @SchemaList\r\n+    private List<String> schemasNotPermitted;\r\n+\r\n+    /**\r\n+     * Specify if one or more non alphanumeric characters are required.\r\n+     */\r\n+    private boolean nonAlphanumericRequired;\r\n+\r\n+    /**\r\n+     * Specify if one or more alphanumeric characters are required.\r\n+     */\r\n+    private boolean alphanumericRequired;\r\n+\r\n+    /**\r\n+     * Specify if one or more digits are required.\r\n+     */\r\n+    private boolean digitRequired;\r\n+\r\n+    /**\r\n+     * Specify if one or more lowercase alphabetic characters are required.\r\n+     */\r\n+    private boolean lowercaseRequired;\r\n+\r\n+    /**\r\n+     * Specify if one or more uppercase alphabetic characters are required.\r\n+     */\r\n+    private boolean uppercaseRequired;\r\n+\r\n+    /**\r\n+     * Specify if must start with a digit.\r\n+     */\r\n+    private boolean mustStartWithDigit;\r\n+\r\n+    /**\r\n+     * Specify if mustn't start with a digit.\r\n+     */\r\n+    private boolean mustntStartWithDigit;\r\n+\r\n+    /**\r\n+     * Specify if must end with a digit.\r\n+     */\r\n+    private boolean mustEndWithDigit;\r\n+\r\n+    /**\r\n+     * Specify if mustn't end with a digit.\r\n+     */\r\n+    private boolean mustntEndWithDigit;\r\n+\r\n+    /**\r\n+     * Specify if must start with a non alphanumeric character.\r\n+     */\r\n+    private boolean mustStartWithNonAlpha;\r\n+\r\n+    /**\r\n+     * Specify if must start with a alphanumeric character.\r\n+     */\r\n+    private boolean mustStartWithAlpha;\r\n+\r\n+    /**\r\n+     * Specify if mustn't start with a non alphanumeric character.\r\n+     */\r\n+    private boolean mustntStartWithNonAlpha;\r\n+\r\n+    /**\r\n+     * Specify if mustn't start with a alphanumeric character.\r\n+     */\r\n+    private boolean mustntStartWithAlpha;\r\n+\r\n+    /**\r\n+     * Specify if must end with a non alphanumeric character.\r\n+     */\r\n+    private boolean mustEndWithNonAlpha;\r\n+\r\n+    /**\r\n+     * Specify if must end with a alphanumeric character.\r\n+     */\r\n+    private boolean mustEndWithAlpha;\r\n+\r\n+    /**\r\n+     * Specify if mustn't end with a non alphanumeric character.\r\n+     */\r\n+    private boolean mustntEndWithNonAlpha;\r\n+\r\n+    /**\r\n+     * Specify if mustn't end with a alphanumeric character.\r\n+     */\r\n+    private boolean mustntEndWithAlpha;\r\n+\r\n+    /**\r\n+     * Substrings not permitted as prefix.\r\n+     */\r\n+    private List<String> prefixesNotPermitted;\r\n+\r\n+    /**\r\n+     * Substrings not permitted as suffix.\r\n+     */\r\n+    private List<String> suffixesNotPermitted;\r\n+\r\n+    public boolean isDigitRequired() {\r\n+        return digitRequired;\r\n+    }\r\n+\r\n+    public void setDigitRequired(boolean digitRequired) {\r\n+        this.digitRequired = digitRequired;\r\n+    }\r\n+\r\n+    public boolean isLowercaseRequired() {\r\n+        return lowercaseRequired;\r\n+    }\r\n+\r\n+    public void setLowercaseRequired(boolean lowercaseRequired) {\r\n+        this.lowercaseRequired = lowercaseRequired;\r\n+    }\r\n+\r\n+    public int getMaxLength() {\r\n+        return maxLength;\r\n+    }\r\n+\r\n+    public void setMaxLength(int maxLength) {\r\n+        this.maxLength = maxLength;\r\n+    }\r\n+\r\n+    public int getMinLength() {\r\n+        return minLength;\r\n+    }\r\n+\r\n+    public void setMinLength(int minLength) {\r\n+        this.minLength = minLength;\r\n+    }\r\n+\r\n+    public boolean isMustEndWithDigit() {\r\n+        return mustEndWithDigit;\r\n+    }\r\n+\r\n+    public void setMustEndWithDigit(boolean mustEndWithDigit) {\r\n+        this.mustEndWithDigit = mustEndWithDigit;\r\n+    }\r\n+\r\n+    public boolean isMustEndWithNonAlpha() {\r\n+        return mustEndWithNonAlpha;\r\n+    }\r\n+\r\n+    public void setMustEndWithNonAlpha(boolean mustEndWithNonAlpha) {\r\n+        this.mustEndWithNonAlpha = mustEndWithNonAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustStartWithDigit() {\r\n+        return mustStartWithDigit;\r\n+    }\r\n+\r\n+    public void setMustStartWithDigit(boolean mustStartWithDigit) {\r\n+        this.mustStartWithDigit = mustStartWithDigit;\r\n+    }\r\n+\r\n+    public boolean isMustStartWithNonAlpha() {\r\n+        return mustStartWithNonAlpha;\r\n+    }\r\n+\r\n+    public void setMustStartWithNonAlpha(boolean mustStartWithNonAlpha) {\r\n+        this.mustStartWithNonAlpha = mustStartWithNonAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustntEndWithDigit() {\r\n+        return mustntEndWithDigit;\r\n+    }\r\n+\r\n+    public void setMustntEndWithDigit(boolean mustntEndWithDigit) {\r\n+        this.mustntEndWithDigit = mustntEndWithDigit;\r\n+    }\r\n+\r\n+    public boolean isMustntEndWithNonAlpha() {\r\n+        return mustntEndWithNonAlpha;\r\n+    }\r\n+\r\n+    public void setMustntEndWithNonAlpha(boolean mustntEndWithNonAlpha) {\r\n+        this.mustntEndWithNonAlpha = mustntEndWithNonAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustntStartWithDigit() {\r\n+        return mustntStartWithDigit;\r\n+    }\r\n+\r\n+    public void setMustntStartWithDigit(boolean mustntStartWithDigit) {\r\n+        this.mustntStartWithDigit = mustntStartWithDigit;\r\n+    }\r\n+\r\n+    public boolean isMustntStartWithNonAlpha() {\r\n+        return mustntStartWithNonAlpha;\r\n+    }\r\n+\r\n+    public void setMustntStartWithNonAlpha(boolean mustntStartWithNonAlpha) {\r\n+        this.mustntStartWithNonAlpha = mustntStartWithNonAlpha;\r\n+    }\r\n+\r\n+    public boolean isNonAlphanumericRequired() {\r\n+        return nonAlphanumericRequired;\r\n+    }\r\n+\r\n+    public void setNonAlphanumericRequired(boolean nonAlphanumericRequired) {\r\n+        this.nonAlphanumericRequired = nonAlphanumericRequired;\r\n+    }\r\n+\r\n+    public List<String> getPrefixesNotPermitted() {\r\n+        if (prefixesNotPermitted == null) {\r\n+            prefixesNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return prefixesNotPermitted;\r\n+    }\r\n+\r\n+    public void setPrefixesNotPermitted(List<String> prefixesNotPermitted) {\r\n+        this.prefixesNotPermitted = prefixesNotPermitted;\r\n+    }\r\n+\r\n+    public List<String> getSchemasNotPermitted() {\r\n+        if (schemasNotPermitted == null) {\r\n+            schemasNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return schemasNotPermitted;\r\n+    }\r\n+\r\n+    public void setSchemasNotPermitted(List<String> schemasNotPermitted) {\r\n+        this.schemasNotPermitted = schemasNotPermitted;\r\n+    }\r\n+\r\n+    public List<String> getSuffixesNotPermitted() {\r\n+        if (suffixesNotPermitted == null) {\r\n+            suffixesNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return suffixesNotPermitted;\r\n+    }\r\n+\r\n+    public void setSuffixesNotPermitted(List<String> suffixesNotPermitted) {\r\n+        this.suffixesNotPermitted = suffixesNotPermitted;\r\n+    }\r\n+\r\n+    public boolean isUppercaseRequired() {\r\n+        return uppercaseRequired;\r\n+    }\r\n+\r\n+    public void setUppercaseRequired(boolean uppercaseRequired) {\r\n+        this.uppercaseRequired = uppercaseRequired;\r\n+    }\r\n+\r\n+    public List<String> getWordsNotPermitted() {\r\n+        if (wordsNotPermitted == null) {\r\n+            wordsNotPermitted = new ArrayList<String>();\r\n+        }\r\n+        return wordsNotPermitted;\r\n+    }\r\n+\r\n+    public void setWordsNotPermitted(List<String> wordsNotPermitted) {\r\n+        this.wordsNotPermitted = wordsNotPermitted;\r\n+    }\r\n+\r\n+    public boolean isAlphanumericRequired() {\r\n+        return alphanumericRequired;\r\n+    }\r\n+\r\n+    public void setAlphanumericRequired(boolean alphanumericRequired) {\r\n+        this.alphanumericRequired = alphanumericRequired;\r\n+    }\r\n+\r\n+    public boolean isMustEndWithAlpha() {\r\n+        return mustEndWithAlpha;\r\n+    }\r\n+\r\n+    public void setMustEndWithAlpha(boolean mustEndWithAlpha) {\r\n+        this.mustEndWithAlpha = mustEndWithAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustStartWithAlpha() {\r\n+        return mustStartWithAlpha;\r\n+    }\r\n+\r\n+    public void setMustStartWithAlpha(boolean mustStartWithAlpha) {\r\n+        this.mustStartWithAlpha = mustStartWithAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustntEndWithAlpha() {\r\n+        return mustntEndWithAlpha;\r\n+    }\r\n+\r\n+    public void setMustntEndWithAlpha(boolean mustntEndWithAlpha) {\r\n+        this.mustntEndWithAlpha = mustntEndWithAlpha;\r\n+    }\r\n+\r\n+    public boolean isMustntStartWithAlpha() {\r\n+        return mustntStartWithAlpha;\r\n+    }\r\n+\r\n+    public void setMustntStartWithAlpha(boolean mustntStartWithAlpha) {\r\n+        this.mustntStartWithAlpha = mustntStartWithAlpha;\r\n+    }\r\n+\r\n+    public int getHistoryLength() {\r\n+        return historyLength;\r\n+    }\r\n+\r\n+    public void setHistoryLength(int historyLength) {\r\n+        this.historyLength = historyLength;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/PasswordPolicySpec.java"},{"sha":"f41c1359055c08ecfd5c884bbaab10f33deab2ab","filename":"common/src/main/java/org/apache/syncope/common/types/PolicyType.java","status":"renamed","additions":49,"deletions":49,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPolicyType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,49 +1,49 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum PolicyType {\n-\n-    /**\n-     * Account policy like:\n-     * password expire time, change password at first access, ...\n-     */\n-    ACCOUNT(\"Account Policy\"),\n-    GLOBAL_ACCOUNT(\"Account Global Policy\"),\n-    /**\n-     * Password policy regarding password syntax.\n-     */\n-    PASSWORD(\"Password Policy\"),\n-    GLOBAL_PASSWORD(\"Password Global Policy\"),\n-    /**\n-     * SYNC policy regarding account conflicts resolution.\n-     */\n-    SYNC(\"Synchronization Policy\"),\n-    GLOBAL_SYNC(\"Synchronization Global Policy\");\n-\n-    private String description;\n-\n-    PolicyType(final String description) {\n-        this.description = description;\n-    }\n-\n-    public String getDescription() {\n-        return description;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum PolicyType {\r\n+\r\n+    /**\r\n+     * Account policy like:\r\n+     * password expire time, change password at first access, ...\r\n+     */\r\n+    ACCOUNT(\"Account Policy\"),\r\n+    GLOBAL_ACCOUNT(\"Account Global Policy\"),\r\n+    /**\r\n+     * Password policy regarding password syntax.\r\n+     */\r\n+    PASSWORD(\"Password Policy\"),\r\n+    GLOBAL_PASSWORD(\"Password Global Policy\"),\r\n+    /**\r\n+     * SYNC policy regarding account conflicts resolution.\r\n+     */\r\n+    SYNC(\"Synchronization Policy\"),\r\n+    GLOBAL_SYNC(\"Synchronization Global Policy\");\r\n+\r\n+    private String description;\r\n+\r\n+    PolicyType(final String description) {\r\n+        this.description = description;\r\n+    }\r\n+\r\n+    public String getDescription() {\r\n+        return description;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/PolicyType.java"},{"sha":"3d3300c4ae297be65f45cf8ce6d6b2699336db04","filename":"common/src/main/java/org/apache/syncope/common/types/PropagationMode.java","status":"renamed","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationMode.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,26 +1,26 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum PropagationMode {\n-\n-    ONE_PHASE,\n-    TWO_PHASES\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum PropagationMode {\r\n+\r\n+    ONE_PHASE,\r\n+    TWO_PHASES\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/PropagationMode.java"},{"sha":"0e7c1772b0cb92884a986ccedf4807f3de843e16","filename":"common/src/main/java/org/apache/syncope/common/types/PropagationTaskExecStatus.java","status":"renamed","additions":42,"deletions":42,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FPropagationTaskExecStatus.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,42 +1,42 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-/**\n- * Status of a TaskExecution.\n- *\n- * CREATED -> SUBMITTED or UBSUBMITTED (depending on the external resource to\n- * return success or failure).\n- * SUBMITTED -> SUCCESS or FAILURE (depending on the external resource to\n- * report success or failure).\n- *\n- * @see TaskExecution\n- */\n-public enum PropagationTaskExecStatus {\n-\n-    CREATED,\n-    SUBMITTED,\n-    UNSUBMITTED,\n-    SUCCESS,\n-    FAILURE;\n-\n-    public boolean isSuccessful() {\n-        return this == SUCCESS || this == SUBMITTED;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+/**\r\n+ * Status of a TaskExecution.\r\n+ *\r\n+ * CREATED -> SUBMITTED or UBSUBMITTED (depending on the external resource to\r\n+ * return success or failure).\r\n+ * SUBMITTED -> SUCCESS or FAILURE (depending on the external resource to\r\n+ * report success or failure).\r\n+ *\r\n+ * @see TaskExecution\r\n+ */\r\n+public enum PropagationTaskExecStatus {\r\n+\r\n+    CREATED,\r\n+    SUBMITTED,\r\n+    UNSUBMITTED,\r\n+    SUCCESS,\r\n+    FAILURE;\r\n+\r\n+    public boolean isSuccessful() {\r\n+        return this == SUCCESS || this == SUBMITTED;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/PropagationTaskExecStatus.java"},{"sha":"654c7fa22005a54c84d94b22213ce174803576af","filename":"common/src/main/java/org/apache/syncope/common/types/ReportExecExportFormat.java","status":"renamed","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecExportFormat.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,28 +1,28 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum ReportExecExportFormat {\n-\n-    XML,\n-    HTML,\n-    PDF,\n-    RTF\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum ReportExecExportFormat {\r\n+\r\n+    XML,\r\n+    HTML,\r\n+    PDF,\r\n+    RTF\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/ReportExecExportFormat.java"},{"sha":"1747e497e71a853853f07e284cfe7df7de3a4afd","filename":"common/src/main/java/org/apache/syncope/common/types/ReportExecStatus.java","status":"renamed","additions":28,"deletions":28,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FReportExecStatus.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,28 +1,28 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum ReportExecStatus {\n-\n-    STARTED,\n-    RUNNING,\n-    SUCCESS,\n-    FAILURE;\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum ReportExecStatus {\r\n+\r\n+    STARTED,\r\n+    RUNNING,\r\n+    SUCCESS,\r\n+    FAILURE;\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/ReportExecStatus.java"},{"sha":"aed68693860a914cea8f0c6e666be779454b4c1a","filename":"common/src/main/java/org/apache/syncope/common/types/ResourceOperation.java","status":"renamed","additions":26,"deletions":26,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,26 +1,26 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum ResourceOperation {\n-\n-    CREATE,\n-    UPDATE,\n-    DELETE\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum ResourceOperation {\r\n+\r\n+    CREATE,\r\n+    UPDATE,\r\n+    DELETE\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/ResourceOperation.java"},{"sha":"ef4389af321397941d380d93d6a009dd492faf9c","filename":"common/src/main/java/org/apache/syncope/common/types/SchemaType.java","status":"renamed","additions":43,"deletions":43,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,43 +1,43 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum SchemaType {\n-\n-    String(\"java.lang.String\"),\n-    Long(\"java.lang.Long\"),\n-    Double(\"java.lang.Double\"),\n-    Boolean(\"java.lang.Boolean\"),\n-    Date(\"java.util.Date\"),\n-    Enum(\"java.lang.Enum\");\n-\n-    final private String className;\n-\n-    SchemaType(String className) {\n-        this.className = className;\n-    }\n-\n-    public String getClassName() {\n-        return className;\n-    }\n-\n-    public boolean isConversionPatternNeeded() {\n-        return this == SchemaType.Date || this == SchemaType.Double || this == SchemaType.Long;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum SchemaType {\r\n+\r\n+    String(\"java.lang.String\"),\r\n+    Long(\"java.lang.Long\"),\r\n+    Double(\"java.lang.Double\"),\r\n+    Boolean(\"java.lang.Boolean\"),\r\n+    Date(\"java.util.Date\"),\r\n+    Enum(\"java.lang.Enum\");\r\n+\r\n+    final private String className;\r\n+\r\n+    SchemaType(String className) {\r\n+        this.className = className;\r\n+    }\r\n+\r\n+    public String getClassName() {\r\n+        return className;\r\n+    }\r\n+\r\n+    public boolean isConversionPatternNeeded() {\r\n+        return this == SchemaType.Date || this == SchemaType.Double || this == SchemaType.Long;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/SchemaType.java"},{"sha":"052c86e3bb58c6666a49595cf65ab8462c94f9b9","filename":"common/src/main/java/org/apache/syncope/common/types/SyncPolicySpec.java","status":"renamed","additions":79,"deletions":78,"changes":157,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncPolicySpec.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,78 +1,79 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import java.util.ArrayList;\n-import java.util.List;\n-import org.apache.syncope.annotation.SchemaList;\n-\n-public class SyncPolicySpec extends AbstractPolicySpec {\n-\n-    private static final long serialVersionUID = -3144027171719498127L;\n-\n-    /**\n-     * SyncopeUser attributes and fields for matching during synchronization.\n-     */\n-    @SchemaList(extended = true)\n-    private List<String> uAltSearchSchemas;\n-\n-    /**\n-     * SyncopeRole attributes and fields for matching during synchronization.\n-     */\n-    @SchemaList(extended = true)\n-    private List<String> rAltSearchSchemas;\n-\n-    /**\n-     * Conflict resolution action.\n-     */\n-    private ConflictResolutionAction conflictResolutionAction;\n-\n-    public SyncPolicySpec() {\n-        super();\n-\n-        uAltSearchSchemas = new ArrayList<String>();\n-        rAltSearchSchemas = new ArrayList<String>();\n-    }\n-\n-    public ConflictResolutionAction getConflictResolutionAction() {\n-        return conflictResolutionAction == null\n-                ? ConflictResolutionAction.IGNORE\n-                : conflictResolutionAction;\n-    }\n-\n-    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\n-        this.conflictResolutionAction = conflictResolutionAction;\n-    }\n-\n-    public List<String> getuAltSearchSchemas() {\n-        return uAltSearchSchemas;\n-    }\n-\n-    public void setuAltSearchSchemas(List<String> uAltSearchSchemas) {\n-        this.uAltSearchSchemas = uAltSearchSchemas;\n-    }\n-\n-    public List<String> getrAltSearchSchemas() {\n-        return rAltSearchSchemas;\n-    }\n-\n-    public void setrAltSearchSchemas(List<String> rAltSearchSchemas) {\n-        this.rAltSearchSchemas = rAltSearchSchemas;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.List;\r\n+\r\n+import org.apache.syncope.common.annotation.SchemaList;\r\n+\r\n+public class SyncPolicySpec extends AbstractPolicySpec {\r\n+\r\n+    private static final long serialVersionUID = -3144027171719498127L;\r\n+\r\n+    /**\r\n+     * SyncopeUser attributes and fields for matching during synchronization.\r\n+     */\r\n+    @SchemaList(extended = true)\r\n+    private List<String> uAltSearchSchemas;\r\n+\r\n+    /**\r\n+     * SyncopeRole attributes and fields for matching during synchronization.\r\n+     */\r\n+    @SchemaList(extended = true)\r\n+    private List<String> rAltSearchSchemas;\r\n+\r\n+    /**\r\n+     * Conflict resolution action.\r\n+     */\r\n+    private ConflictResolutionAction conflictResolutionAction;\r\n+\r\n+    public SyncPolicySpec() {\r\n+        super();\r\n+\r\n+        uAltSearchSchemas = new ArrayList<String>();\r\n+        rAltSearchSchemas = new ArrayList<String>();\r\n+    }\r\n+\r\n+    public ConflictResolutionAction getConflictResolutionAction() {\r\n+        return conflictResolutionAction == null\r\n+                ? ConflictResolutionAction.IGNORE\r\n+                : conflictResolutionAction;\r\n+    }\r\n+\r\n+    public void setConflictResolutionAction(final ConflictResolutionAction conflictResolutionAction) {\r\n+        this.conflictResolutionAction = conflictResolutionAction;\r\n+    }\r\n+\r\n+    public List<String> getuAltSearchSchemas() {\r\n+        return uAltSearchSchemas;\r\n+    }\r\n+\r\n+    public void setuAltSearchSchemas(List<String> uAltSearchSchemas) {\r\n+        this.uAltSearchSchemas = uAltSearchSchemas;\r\n+    }\r\n+\r\n+    public List<String> getrAltSearchSchemas() {\r\n+        return rAltSearchSchemas;\r\n+    }\r\n+\r\n+    public void setrAltSearchSchemas(List<String> rAltSearchSchemas) {\r\n+        this.rAltSearchSchemas = rAltSearchSchemas;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/SyncPolicySpec.java"},{"sha":"85c8141d32613b5a55c67ebfdd53032a984d7eda","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeClientExceptionType.java","status":"renamed","additions":99,"deletions":99,"changes":198,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeClientExceptionType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,99 +1,99 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum SyncopeClientExceptionType {\n-\n-    Deadlock(\"Syncope.Deadlock\", \"\"),\n-    DataIntegrityViolation(\"Syncope.DataIntegrityViolation\", \"Syncope.DataIntegrityViolation.name\"),\n-    ExistingResource(\"Syncope.ExistingResource\", \"Syncope.ExistingResource.name\"),\n-    GenericPersistence(\"Syncope.GenericPersistence\", \"Syncope.GenericPersistence.cause\"),\n-    InvalidLogger(\"Syncope.InvalidLogger\", \"Syncope.InvalidLogger.message\"),\n-    InvalidConnInstance(\"Syncope.InvalidConnInstance\", \"Syncope.InvalidConnInstance.message\"),\n-    InvalidPasswordPolicy(\"Syncope.InvalidPasswordPolicy\", \"Syncope.InvalidPasswordPolicy.reason\"),\n-    InvalidAccountPolicy(\"Syncope.InvalidAccountPolicy\", \"Syncope.InvalidAccountPolicy.reason\"),\n-    InvalidSyncPolicy(\"Syncope.InvalidSyncPolicy\", \"Syncope.InvalidSyncPolicy.reason\"),\n-    InvalidSyncopeRole(\"Syncope.InvalidSyncopeRole\", \"Syncope.InvalidSyncopeRole.reason\"),\n-    InvalidReportExec(\"Syncope.InvalidReportExec\", \"Syncope.InvalidReportExec.reason\"),\n-    InvalidRoles(\"Syncope.InvalidRoles\", \"Syncope.InvalidRoles.name\"),\n-    InvalidSchemaDefinition(\"Syncope.InvalidSchemaDefinition\", \"\"),\n-    InvalidSearchCondition(\"Syncope.InvalidSearchCondition\", \"\"),\n-    InvalidPropagationTaskExecReport(\n-            \"Syncope.InvalidPropagationTaskExecReport\",\n-            \"Syncope.InvalidPropagationTaskExecReport.element\"),\n-    InvalidUSchema(\"Syncope.InvalidUSchemaUpdate\", \"Syncope.InvalidUSchemaUpdate.name\"),\n-    InvalidUDerSchema(\"Syncope.InvalidUDerSchemaUpdate\", \"Syncope.InvalidUDerSchemaUpdate.name\"),\n-    InvalidUVirSchema(\"Syncope.InvalidUVirSchemaUpdate\", \"Syncope.InvalidUVirSchemaUpdate.name\"),\n-    InvalidRSchema(\"Syncope.InvalidRSchemaUpdate\", \"Syncope.InvalidRSchemaUpdate.name\"),\n-    InvalidRDerSchema(\"Syncope.InvalidRDerSchemaUpdate\", \"Syncope.InvalidRDerSchemaUpdate.name\"),\n-    InvalidRVirSchema(\"Syncope.InvalidRVirSchemaUpdate\", \"Syncope.InvalidRVirSchemaUpdate.name\"),\n-    InvalidMSchema(\"Syncope.InvalidMSchemaUpdate\", \"Syncope.InvalidMSchemaUpdate.name\"),\n-    InvalidMDerSchema(\"Syncope.InvalidMDerSchemaUpdate\", \"Syncope.InvalidMDerSchemaUpdate.name\"),\n-    InvalidMVirSchema(\"Syncope.InvalidMVirSchemaUpdate\", \"Syncope.InvalidMVirSchemaUpdate.name\"),\n-    InvalidSchemaMapping(\"Syncope.InvalidSchemaMapping\", \"\"),\n-    InvalidSyncopeUser(\"Syncope.InvalidSyncopeUser\", \"Syncope.InvalidSyncopeUser.element\"),\n-    InvalidExternalResource(\"Syncope.InvalidExternalResource\", \"Syncope.InvalidExternalResource.element\"),\n-    InvalidNotification(\"Syncope.InvalidNotification\", \"Syncope.InvalidNotification.element\"),\n-    InvalidPropagationTask(\"Syncope.InvalidPropagationTask\", \"Syncope.InvalidPropagationTask.element\"),\n-    InvalidSchedTask(\"Syncope.InvalidSchedTask\", \"Syncope.InvalidSchedTask.element\"),\n-    InvalidSyncTask(\"Syncope.InvalidSyncTask\", \"Syncope.InvalidSyncTask.element\"),\n-    InvalidValues(\"Syncope.InvalidValues\", \"Syncope.InvalidValues.attributeName\"),\n-    NotFound(\"Syncope.NotFound\", \"Syncope.NotFound.entity\"),\n-    Propagation(\"Syncope.Propagation\", \"Syncope.Propagation.resourceName\"),\n-    RejectedUserCreate(\"Syncope.RejectUserCreate\", \"Syncope.RejectUserCreate.userId\"),\n-    RequiredValuesMissing(\"Syncope.RequiredValuesMissing\", \"Syncope.RequiredValuesMissing.attributeName\"),\n-    Scheduling(\"Syncope.Scheduling\", \"Syncope.Scheduling.message\"),\n-    UnauthorizedRole(\"Syncope.UnauthorizedRole\", \"Syncope.UnauthorizedRole.id\"),\n-    Unknown(\"Syncope.Unknown\", \"\"),\n-    Workflow(\"Syncope.Workflow\", \"Syncope.Workflow.message\");\n-\n-    private String headerValue;\n-\n-    private String elementHeaderName;\n-\n-    private SyncopeClientExceptionType(String headerValue, String elementHeaderName) {\n-\n-        this.headerValue = headerValue;\n-        this.elementHeaderName = elementHeaderName;\n-    }\n-\n-    public static SyncopeClientExceptionType getFromHeaderValue(String exceptionTypeHeaderValue) {\n-\n-        SyncopeClientExceptionType result = null;\n-        for (SyncopeClientExceptionType syncopeClientExceptionType : values()) {\n-            if (exceptionTypeHeaderValue.equals(syncopeClientExceptionType.getHeaderValue())) {\n-                result = syncopeClientExceptionType;\n-            }\n-        }\n-\n-        if (result == null) {\n-            throw new IllegalArgumentException(\"Unexpected header value: \" + exceptionTypeHeaderValue);\n-        }\n-\n-        return result;\n-    }\n-\n-    public String getElementHeaderName() {\n-        return elementHeaderName;\n-    }\n-\n-    public String getHeaderValue() {\n-        return headerValue;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum SyncopeClientExceptionType {\r\n+\r\n+    Deadlock(\"Syncope.Deadlock\", \"\"),\r\n+    DataIntegrityViolation(\"Syncope.DataIntegrityViolation\", \"Syncope.DataIntegrityViolation.name\"),\r\n+    ExistingResource(\"Syncope.ExistingResource\", \"Syncope.ExistingResource.name\"),\r\n+    GenericPersistence(\"Syncope.GenericPersistence\", \"Syncope.GenericPersistence.cause\"),\r\n+    InvalidLogger(\"Syncope.InvalidLogger\", \"Syncope.InvalidLogger.message\"),\r\n+    InvalidConnInstance(\"Syncope.InvalidConnInstance\", \"Syncope.InvalidConnInstance.message\"),\r\n+    InvalidPasswordPolicy(\"Syncope.InvalidPasswordPolicy\", \"Syncope.InvalidPasswordPolicy.reason\"),\r\n+    InvalidAccountPolicy(\"Syncope.InvalidAccountPolicy\", \"Syncope.InvalidAccountPolicy.reason\"),\r\n+    InvalidSyncPolicy(\"Syncope.InvalidSyncPolicy\", \"Syncope.InvalidSyncPolicy.reason\"),\r\n+    InvalidSyncopeRole(\"Syncope.InvalidSyncopeRole\", \"Syncope.InvalidSyncopeRole.reason\"),\r\n+    InvalidReportExec(\"Syncope.InvalidReportExec\", \"Syncope.InvalidReportExec.reason\"),\r\n+    InvalidRoles(\"Syncope.InvalidRoles\", \"Syncope.InvalidRoles.name\"),\r\n+    InvalidSchemaDefinition(\"Syncope.InvalidSchemaDefinition\", \"\"),\r\n+    InvalidSearchCondition(\"Syncope.InvalidSearchCondition\", \"\"),\r\n+    InvalidPropagationTaskExecReport(\r\n+            \"Syncope.InvalidPropagationTaskExecReport\",\r\n+            \"Syncope.InvalidPropagationTaskExecReport.element\"),\r\n+    InvalidUSchema(\"Syncope.InvalidUSchemaUpdate\", \"Syncope.InvalidUSchemaUpdate.name\"),\r\n+    InvalidUDerSchema(\"Syncope.InvalidUDerSchemaUpdate\", \"Syncope.InvalidUDerSchemaUpdate.name\"),\r\n+    InvalidUVirSchema(\"Syncope.InvalidUVirSchemaUpdate\", \"Syncope.InvalidUVirSchemaUpdate.name\"),\r\n+    InvalidRSchema(\"Syncope.InvalidRSchemaUpdate\", \"Syncope.InvalidRSchemaUpdate.name\"),\r\n+    InvalidRDerSchema(\"Syncope.InvalidRDerSchemaUpdate\", \"Syncope.InvalidRDerSchemaUpdate.name\"),\r\n+    InvalidRVirSchema(\"Syncope.InvalidRVirSchemaUpdate\", \"Syncope.InvalidRVirSchemaUpdate.name\"),\r\n+    InvalidMSchema(\"Syncope.InvalidMSchemaUpdate\", \"Syncope.InvalidMSchemaUpdate.name\"),\r\n+    InvalidMDerSchema(\"Syncope.InvalidMDerSchemaUpdate\", \"Syncope.InvalidMDerSchemaUpdate.name\"),\r\n+    InvalidMVirSchema(\"Syncope.InvalidMVirSchemaUpdate\", \"Syncope.InvalidMVirSchemaUpdate.name\"),\r\n+    InvalidSchemaMapping(\"Syncope.InvalidSchemaMapping\", \"\"),\r\n+    InvalidSyncopeUser(\"Syncope.InvalidSyncopeUser\", \"Syncope.InvalidSyncopeUser.element\"),\r\n+    InvalidExternalResource(\"Syncope.InvalidExternalResource\", \"Syncope.InvalidExternalResource.element\"),\r\n+    InvalidNotification(\"Syncope.InvalidNotification\", \"Syncope.InvalidNotification.element\"),\r\n+    InvalidPropagationTask(\"Syncope.InvalidPropagationTask\", \"Syncope.InvalidPropagationTask.element\"),\r\n+    InvalidSchedTask(\"Syncope.InvalidSchedTask\", \"Syncope.InvalidSchedTask.element\"),\r\n+    InvalidSyncTask(\"Syncope.InvalidSyncTask\", \"Syncope.InvalidSyncTask.element\"),\r\n+    InvalidValues(\"Syncope.InvalidValues\", \"Syncope.InvalidValues.attributeName\"),\r\n+    NotFound(\"Syncope.NotFound\", \"Syncope.NotFound.entity\"),\r\n+    Propagation(\"Syncope.Propagation\", \"Syncope.Propagation.resourceName\"),\r\n+    RejectedUserCreate(\"Syncope.RejectUserCreate\", \"Syncope.RejectUserCreate.userId\"),\r\n+    RequiredValuesMissing(\"Syncope.RequiredValuesMissing\", \"Syncope.RequiredValuesMissing.attributeName\"),\r\n+    Scheduling(\"Syncope.Scheduling\", \"Syncope.Scheduling.message\"),\r\n+    UnauthorizedRole(\"Syncope.UnauthorizedRole\", \"Syncope.UnauthorizedRole.id\"),\r\n+    Unknown(\"Syncope.Unknown\", \"\"),\r\n+    Workflow(\"Syncope.Workflow\", \"Syncope.Workflow.message\");\r\n+\r\n+    private String headerValue;\r\n+\r\n+    private String elementHeaderName;\r\n+\r\n+    private SyncopeClientExceptionType(String headerValue, String elementHeaderName) {\r\n+\r\n+        this.headerValue = headerValue;\r\n+        this.elementHeaderName = elementHeaderName;\r\n+    }\r\n+\r\n+    public static SyncopeClientExceptionType getFromHeaderValue(String exceptionTypeHeaderValue) {\r\n+\r\n+        SyncopeClientExceptionType result = null;\r\n+        for (SyncopeClientExceptionType syncopeClientExceptionType : values()) {\r\n+            if (exceptionTypeHeaderValue.equals(syncopeClientExceptionType.getHeaderValue())) {\r\n+                result = syncopeClientExceptionType;\r\n+            }\r\n+        }\r\n+\r\n+        if (result == null) {\r\n+            throw new IllegalArgumentException(\"Unexpected header value: \" + exceptionTypeHeaderValue);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    public String getElementHeaderName() {\r\n+        return elementHeaderName;\r\n+    }\r\n+\r\n+    public String getHeaderValue() {\r\n+        return headerValue;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/SyncopeClientExceptionType.java"},{"sha":"257b57565c25f65b00c3c22f15608b20331fae46","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeLoggerLevel.java","status":"renamed","additions":65,"deletions":65,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerLevel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,65 +1,65 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-import ch.qos.logback.classic.Level;\n-\n-public enum SyncopeLoggerLevel {\n-\n-    OFF(Level.OFF),\n-    ERROR(Level.ERROR),\n-    WARN(Level.WARN),\n-    INFO(Level.INFO),\n-    DEBUG(Level.DEBUG),\n-    TRACE(Level.TRACE),\n-    ALL(Level.ALL);\n-\n-    private Level level;\n-\n-    SyncopeLoggerLevel(final Level level) {\n-        this.level = level;\n-    }\n-\n-    public Level getLevel() {\n-        return level;\n-    }\n-\n-    public static SyncopeLoggerLevel fromLevel(final Level level) {\n-        SyncopeLoggerLevel result;\n-        if (level.equals(Level.OFF)) {\n-            result = OFF;\n-        } else if (level.equals(Level.ERROR)) {\n-            result = ERROR;\n-        } else if (level.equals(Level.WARN)) {\n-            result = WARN;\n-        } else if (level.equals(Level.INFO)) {\n-            result = INFO;\n-        } else if (level.equals(Level.DEBUG)) {\n-            result = DEBUG;\n-        } else if (level.equals(Level.TRACE)) {\n-            result = TRACE;\n-        } else if (level.equals(Level.ALL)) {\n-            result = ALL;\n-        } else {\n-            throw new IllegalArgumentException(\"Undefined Level \" + level);\n-        }\n-\n-        return result;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import ch.qos.logback.classic.Level;\r\n+\r\n+public enum SyncopeLoggerLevel {\r\n+\r\n+    OFF(Level.OFF),\r\n+    ERROR(Level.ERROR),\r\n+    WARN(Level.WARN),\r\n+    INFO(Level.INFO),\r\n+    DEBUG(Level.DEBUG),\r\n+    TRACE(Level.TRACE),\r\n+    ALL(Level.ALL);\r\n+\r\n+    private Level level;\r\n+\r\n+    SyncopeLoggerLevel(final Level level) {\r\n+        this.level = level;\r\n+    }\r\n+\r\n+    public Level getLevel() {\r\n+        return level;\r\n+    }\r\n+\r\n+    public static SyncopeLoggerLevel fromLevel(final Level level) {\r\n+        SyncopeLoggerLevel result;\r\n+        if (level.equals(Level.OFF)) {\r\n+            result = OFF;\r\n+        } else if (level.equals(Level.ERROR)) {\r\n+            result = ERROR;\r\n+        } else if (level.equals(Level.WARN)) {\r\n+            result = WARN;\r\n+        } else if (level.equals(Level.INFO)) {\r\n+            result = INFO;\r\n+        } else if (level.equals(Level.DEBUG)) {\r\n+            result = DEBUG;\r\n+        } else if (level.equals(Level.TRACE)) {\r\n+            result = TRACE;\r\n+        } else if (level.equals(Level.ALL)) {\r\n+            result = ALL;\r\n+        } else {\r\n+            throw new IllegalArgumentException(\"Undefined Level \" + level);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/SyncopeLoggerLevel.java"},{"sha":"e0a6048cb944c7b952e80854425aecfcbdd38802","filename":"common/src/main/java/org/apache/syncope/common/types/SyncopeLoggerType.java","status":"renamed","additions":35,"deletions":35,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSyncopeLoggerType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,35 +1,35 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum SyncopeLoggerType {\n-\n-    LOG(\"\"),\n-    AUDIT(\"syncope.audit\");\n-\n-    private String prefix;\n-\n-    SyncopeLoggerType(final String prefix) {\n-        this.prefix = prefix;\n-    }\n-\n-    public String getPrefix() {\n-        return prefix;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum SyncopeLoggerType {\r\n+\r\n+    LOG(\"\"),\r\n+    AUDIT(\"syncope.audit\");\r\n+\r\n+    private String prefix;\r\n+\r\n+    SyncopeLoggerType(final String prefix) {\r\n+        this.prefix = prefix;\r\n+    }\r\n+\r\n+    public String getPrefix() {\r\n+        return prefix;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/SyncopeLoggerType.java"},{"sha":"ae6d57375476630e05b3804df51e2ff94903cef8","filename":"common/src/main/java/org/apache/syncope/common/types/TaskType.java","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTaskType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,7 +16,7 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.types;\r\n+package org.apache.syncope.common.types;\r\n \r\n public enum TaskType {\r\n \r","previous_filename":"client/src/main/java/org/apache/syncope/types/TaskType.java"},{"sha":"12cad9c8cca0647f744cfc2183b28645d1ba9796","filename":"common/src/main/java/org/apache/syncope/common/types/TraceLevel.java","status":"renamed","additions":40,"deletions":40,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FTraceLevel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,40 +1,40 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum TraceLevel {\n-\n-    /**\n-     * No details at all.\n-     */\n-    NONE,\n-    /**\n-     * Only failed entries.\n-     */\n-    FAILURES,\n-    /**\n-     * Only an overall summary.\n-     */\n-    SUMMARY,\n-    /**\n-     * All available information, including per-entry information.\n-     */\n-    ALL\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum TraceLevel {\r\n+\r\n+    /**\r\n+     * No details at all.\r\n+     */\r\n+    NONE,\r\n+    /**\r\n+     * Only failed entries.\r\n+     */\r\n+    FAILURES,\r\n+    /**\r\n+     * Only an overall summary.\r\n+     */\r\n+    SUMMARY,\r\n+    /**\r\n+     * All available information, including per-entry information.\r\n+     */\r\n+    ALL\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/TraceLevel.java"},{"sha":"aa738f9e4936059c28fdcb4b61726c7a27dfe41f","filename":"common/src/main/java/org/apache/syncope/common/types/UserRequestType.java","status":"renamed","additions":27,"deletions":27,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUserRequestType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,27 +1,27 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum UserRequestType {\n-\n-    CREATE,\n-    UPDATE,\n-    DELETE\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum UserRequestType {\r\n+\r\n+    CREATE,\r\n+    UPDATE,\r\n+    DELETE\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/UserRequestType.java"},{"sha":"0e51c167a74ffab27e3e0bd09a7c553d73fc676a","filename":"common/src/main/java/org/apache/syncope/common/types/WorkflowFormPropertyType.java","status":"renamed","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FWorkflowFormPropertyType.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,29 +1,29 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n-\n-public enum WorkflowFormPropertyType {\n-\n-    String,\n-    Long,\n-    Enum,\n-    Date,\n-    Boolean\n-\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+public enum WorkflowFormPropertyType {\r\n+\r\n+    String,\r\n+    Long,\r\n+    Enum,\r\n+    Date,\r\n+    Boolean\r\n+\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/types/WorkflowFormPropertyType.java"},{"sha":"b6795d30b871b7527222354dc946f0834b8e3da6","filename":"common/src/main/java/org/apache/syncope/common/types/package-info.java","status":"renamed","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2Fpackage-info.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,19 +1,19 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.types;\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r","previous_filename":"client/src/main/java/org/apache/syncope/types/package-info.java"},{"sha":"07dd3d911cea74e681b68a389e693e90c604409a","filename":"common/src/main/java/org/apache/syncope/common/util/AttributableOperations.java","status":"renamed","additions":411,"deletions":411,"changes":822,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FAttributableOperations.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,411 +1,411 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.util;\n-\n-import java.util.ArrayList;\n-import java.util.Collections;\n-import java.util.HashMap;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Set;\n-import org.apache.commons.lang.SerializationUtils;\n-import org.apache.syncope.client.mod.AbstractAttributableMod;\n-import org.apache.syncope.client.mod.AttributeMod;\n-import org.apache.syncope.client.mod.MembershipMod;\n-import org.apache.syncope.client.mod.ReferenceMod;\n-import org.apache.syncope.client.mod.RoleMod;\n-import org.apache.syncope.client.mod.UserMod;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.client.to.MembershipTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n-\n-/**\n- * Utility class for manipulating classes extending AbstractAttributableTO and AbstractAttributableMod.\n- *\n- * @see AbstractAttributableTO\n- * @see AbstractAttributableMod\n- */\n-public final class AttributableOperations {\n-\n-    private AttributableOperations() {\n-    }\n-\n-    public static <T extends AbstractAttributableTO> T clone(final T original) {\n-        return (T) SerializationUtils.clone(original);\n-    }\n-\n-    private static void populate(final Map<String, AttributeTO> updatedAttrs,\n-            final Map<String, AttributeTO> originalAttrs, final AbstractAttributableMod result) {\n-        populate(updatedAttrs, originalAttrs, result, false);\n-    }\n-\n-    private static void populate(final Map<String, AttributeTO> updatedAttrs,\n-            final Map<String, AttributeTO> originalAttrs, final AbstractAttributableMod result, final boolean virtuals) {\n-\n-        for (Map.Entry<String, AttributeTO> entry : updatedAttrs.entrySet()) {\n-            AttributeMod mod = new AttributeMod();\n-            mod.setSchema(entry.getKey());\n-\n-            Set<String> updatedValues = new HashSet<String>(entry.getValue().getValues());\n-\n-            Set<String> originalValues = originalAttrs.containsKey(entry.getKey())\n-                    ? new HashSet<String>(originalAttrs.get(entry.getKey()).getValues())\n-                    : Collections.EMPTY_SET;\n-\n-            if (!updatedValues.equals(originalValues)) {\n-                // avoid unwanted inputs\n-                updatedValues.remove(\"\");\n-                if (!entry.getValue().isReadonly()) {\n-                    mod.setValuesToBeAdded(new ArrayList<String>(updatedValues));\n-\n-                    if (!mod.isEmpty()) {\n-                        if (virtuals) {\n-                            result.addVirtualAttributeToBeRemoved(mod.getSchema());\n-                        } else {\n-                            result.addAttributeToBeRemoved(mod.getSchema());\n-                        }\n-                    }\n-                }\n-\n-                mod.setValuesToBeRemoved(new ArrayList<String>(originalValues));\n-\n-                if (!mod.isEmpty()) {\n-                    if (virtuals) {\n-                        result.addVirtualAttributeToBeUpdated(mod);\n-                    } else {\n-                        result.addAttributeToBeUpdated(mod);\n-                    }\n-                }\n-            }\n-        }\n-    }\n-\n-    private static void diff(\n-            final AbstractAttributableTO updated,\n-            final AbstractAttributableTO original,\n-            final AbstractAttributableMod result,\n-            final boolean incremental) {\n-\n-        // 1. check same id\n-        if (updated.getId() != original.getId()) {\n-            throw new IllegalArgumentException(\"AttributableTO's id must be the same\");\n-        }\n-        result.setId(updated.getId());\n-\n-        // 2. attributes\n-        Map<String, AttributeTO> updatedAttrs = new HashMap<String, AttributeTO>(updated.getAttributeMap());\n-        Map<String, AttributeTO> originalAttrs = new HashMap<String, AttributeTO>(original.getAttributeMap());\n-\n-        Set<String> originalAttrNames = new HashSet<String>(originalAttrs.keySet());\n-        originalAttrNames.removeAll(updatedAttrs.keySet());\n-\n-        if (!incremental) {\n-            result.setAttributesToBeRemoved(originalAttrNames);\n-        }\n-\n-        Set<String> emptyUpdatedAttrs = new HashSet<String>();\n-        for (Map.Entry<String, AttributeTO> entry : updatedAttrs.entrySet()) {\n-            if (entry.getValue().getValues() == null || entry.getValue().getValues().isEmpty()) {\n-\n-                emptyUpdatedAttrs.add(entry.getKey());\n-            }\n-        }\n-        for (String emptyUpdatedAttr : emptyUpdatedAttrs) {\n-            updatedAttrs.remove(emptyUpdatedAttr);\n-            result.addAttributeToBeRemoved(emptyUpdatedAttr);\n-        }\n-\n-        populate(updatedAttrs, originalAttrs, result);\n-\n-        // 3. derived attributes\n-        updatedAttrs = updated.getDerivedAttributeMap();\n-        originalAttrs = original.getDerivedAttributeMap();\n-\n-        originalAttrNames = new HashSet<String>(originalAttrs.keySet());\n-        originalAttrNames.removeAll(updatedAttrs.keySet());\n-\n-        if (!incremental) {\n-            result.setDerivedAttributesToBeRemoved(originalAttrNames);\n-        }\n-\n-        Set<String> updatedAttrNames = new HashSet<String>(updatedAttrs.keySet());\n-        updatedAttrNames.removeAll(originalAttrs.keySet());\n-        result.setDerivedAttributesToBeAdded(updatedAttrNames);\n-\n-        // 4. virtual attributes\n-        updatedAttrs = updated.getVirtualAttributeMap();\n-        originalAttrs = original.getVirtualAttributeMap();\n-\n-        originalAttrNames = new HashSet<String>(originalAttrs.keySet());\n-        originalAttrNames.removeAll(updatedAttrs.keySet());\n-\n-        if (!incremental) {\n-            result.setVirtualAttributesToBeRemoved(originalAttrNames);\n-        }\n-\n-        populate(updatedAttrs, originalAttrs, result, true);\n-\n-        // 5. resources\n-        Set<String> updatedRes = new HashSet<String>(updated.getResources());\n-        Set<String> originalRes = new HashSet<String>(original.getResources());\n-\n-        updatedRes.removeAll(originalRes);\n-        result.setResourcesToBeAdded(updatedRes);\n-\n-        originalRes.removeAll(updated.getResources());\n-\n-        if (!incremental) {\n-            result.setResourcesToBeRemoved(originalRes);\n-        }\n-    }\n-\n-    /**\n-     * Calculate modifications needed by first in order to be equal to second.\n-     *\n-     * @param updated updated UserTO\n-     * @param original original UserTO\n-     * @return UserMod containing differences\n-     */\n-    public static UserMod diff(final UserTO updated, final UserTO original) {\n-        return diff(updated, original, false);\n-    }\n-\n-    /**\n-     * Calculate modifications needed by first in order to be equal to second.\n-     *\n-     * @param updated updated UserTO\n-     * @param original original UserTO\n-     * @param incremental perform incremental diff (without removing existing info)\n-     * @return UserMod containing differences\n-     */\n-    public static UserMod diff(final UserTO updated, final UserTO original, final boolean incremental) {\n-        UserMod result = new UserMod();\n-\n-        diff(updated, original, result, incremental);\n-\n-        // 1. password\n-        if (original.getPassword() != null && !original.getPassword().equals(updated.getPassword())) {\n-            result.setPassword(updated.getPassword());\n-        }\n-\n-        // 2. username\n-        if (original.getUsername() != null && !original.getUsername().equals(updated.getUsername())) {\n-            result.setUsername(updated.getUsername());\n-        }\n-\n-        // 3. memberships\n-        Map<Long, MembershipTO> updatedMembs = updated.getMembershipMap();\n-        Map<Long, MembershipTO> originalMembs = original.getMembershipMap();\n-\n-        for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\n-            MembershipMod membMod = new MembershipMod();\n-            membMod.setRole(entry.getValue().getRoleId());\n-\n-            if (originalMembs.containsKey(entry.getKey())) {\n-                diff(entry.getValue(), originalMembs.get(entry.getKey()), membMod, false);\n-            } else {\n-                for (AttributeTO attr : entry.getValue().getAttributes()) {\n-\n-                    AttributeMod attrMod = new AttributeMod();\n-                    attrMod.setSchema(attr.getSchema());\n-                    attrMod.setValuesToBeAdded(attr.getValues());\n-\n-                    if (!attrMod.isEmpty()) {\n-                        membMod.addAttributeToBeUpdated(attrMod);\n-                        membMod.addAttributeToBeRemoved(attrMod.getSchema());\n-                    }\n-                }\n-                for (AttributeTO attr : entry.getValue().getDerivedAttributes()) {\n-\n-                    membMod.addDerivedAttributeToBeAdded(attr.getSchema());\n-                }\n-                for (AttributeTO attr : entry.getValue().getVirtualAttributes()) {\n-\n-                    AttributeMod attrMod = new AttributeMod();\n-                    attrMod.setSchema(attr.getSchema());\n-                    attrMod.setValuesToBeAdded(attr.getValues());\n-\n-                    if (!attrMod.isEmpty()) {\n-                        membMod.addVirtualAttributeToBeUpdated(attrMod);\n-                        membMod.addAttributeToBeRemoved(attrMod.getSchema());\n-                    }\n-                }\n-                membMod.setResourcesToBeAdded(entry.getValue().getResources());\n-            }\n-\n-            if (!membMod.isEmpty()) {\n-                result.addMembershipToBeAdded(membMod);\n-            }\n-        }\n-\n-        if (!incremental) {\n-            Set<Long> originalRoles = new HashSet<Long>(originalMembs.keySet());\n-            originalRoles.removeAll(updatedMembs.keySet());\n-            for (Long roleId : originalRoles) {\n-                result.addMembershipToBeRemoved(originalMembs.get(roleId).getId());\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    /**\n-     * Calculate modifications needed by first in order to be equal to second.\n-     *\n-     * @param updated updated RoleTO\n-     * @param original original RoleTO\n-     * @return RoleMod containing differences\n-     */\n-    public static RoleMod diff(final RoleTO updated, final RoleTO original) {\n-        return diff(updated, original, false);\n-    }\n-\n-    /**\n-     * Calculate modifications needed by first in order to be equal to second.\n-     *\n-     * @param updated updated RoleTO\n-     * @param original original RoleTO\n-     * @param incremental perform incremental diff (without removing existing info)\n-     * @return RoleMod containing differences\n-     */\n-    public static RoleMod diff(final RoleTO updated, final RoleTO original, final boolean incremental) {\n-        RoleMod result = new RoleMod();\n-\n-        diff(updated, original, result, incremental);\n-\n-        // 1. inheritance\n-        result.setInheritOwner(updated.isInheritOwner());\n-        result.setInheritAccountPolicy(updated.isInheritAccountPolicy());\n-        result.setInheritPasswordPolicy(updated.isInheritPasswordPolicy());\n-        result.setInheritAttributes(updated.isInheritAttributes());\n-        result.setInheritDerivedAttributes(updated.isInheritDerivedAttributes());\n-        result.setInheritVirtualAttributes(updated.isInheritVirtualAttributes());\n-\n-        // 2. policies\n-        result.setAccountPolicy(new ReferenceMod(updated.getAccountPolicy()));\n-        result.setPasswordPolicy(new ReferenceMod(updated.getPasswordPolicy()));\n-\n-        // 3. name\n-        if (!original.getName().equals(updated.getName())) {\n-            result.setName(updated.getName());\n-        }\n-\n-        // 4. entitlements\n-        Set<String> updatedEnts = new HashSet<String>(updated.getEntitlements());\n-        Set<String> originalEnts = new HashSet<String>(original.getEntitlements());\n-        if (updatedEnts.equals(originalEnts)) {\n-            result.setEntitlements(null);\n-        } else {\n-            result.setEntitlements(updated.getEntitlements());\n-        }\n-\n-        // 5. owner\n-        result.setUserOwner(new ReferenceMod(updated.getUserOwner()));\n-        result.setRoleOwner(new ReferenceMod(updated.getRoleOwner()));\n-\n-        return result;\n-    }\n-\n-    private static List<AttributeTO> getUpdateValues(final Map<String, AttributeTO> attrs,\n-            final Set<String> attrsToBeRemoved, final Set<AttributeMod> attrsToBeUpdated) {\n-\n-        Map<String, AttributeTO> rwattrs = new HashMap<String, AttributeTO>(attrs);\n-        for (String attrName : attrsToBeRemoved) {\n-            rwattrs.remove(attrName);\n-        }\n-        for (AttributeMod attrMod : attrsToBeUpdated) {\n-            if (rwattrs.containsKey(attrMod.getSchema())) {\n-                AttributeTO attrTO = rwattrs.get(attrMod.getSchema());\n-                attrTO.getValues().removeAll(attrMod.getValuesToBeRemoved());\n-                attrTO.getValues().addAll(attrMod.getValuesToBeAdded());\n-            } else {\n-                AttributeTO attrTO = new AttributeTO();\n-                attrTO.setSchema(attrMod.getSchema());\n-                attrTO.setValues(attrMod.getValuesToBeAdded());\n-\n-                rwattrs.put(attrMod.getSchema(), attrTO);\n-            }\n-        }\n-\n-        return new ArrayList<AttributeTO>(rwattrs.values());\n-    }\n-\n-    private static <T extends AbstractAttributableTO, K extends AbstractAttributableMod> void apply(final T to,\n-            final K mod, final T result) {\n-\n-        // 1. attributes\n-        result.setAttributes(getUpdateValues(to.getAttributeMap(), mod.getAttributesToBeRemoved(), mod.\n-                getAttributesToBeUpdated()));\n-\n-        // 2. derived attributes\n-        Map<String, AttributeTO> attrs = to.getDerivedAttributeMap();\n-        for (String attrName : mod.getDerivedAttributesToBeRemoved()) {\n-            attrs.remove(attrName);\n-        }\n-        for (String attrName : mod.getDerivedAttributesToBeAdded()) {\n-            AttributeTO attrTO = new AttributeTO();\n-            attrTO.setSchema(attrName);\n-\n-            attrs.put(attrName, attrTO);\n-        }\n-        result.setDerivedAttributes(new ArrayList<AttributeTO>(attrs.values()));\n-\n-        // 3. virtual attributes\n-        result.setVirtualAttributes(getUpdateValues(to.getVirtualAttributeMap(), mod.getVirtualAttributesToBeRemoved(),\n-                mod.getVirtualAttributesToBeUpdated()));\n-\n-        // 4. resources\n-        result.getResources().removeAll(mod.getResourcesToBeRemoved());\n-        result.getResources().addAll(mod.getResourcesToBeAdded());\n-    }\n-\n-    public static UserTO apply(final UserTO userTO, final UserMod userMod) {\n-        // 1. check same id\n-        if (userTO.getId() != userMod.getId()) {\n-            throw new IllegalArgumentException(\"UserTO and UserMod ids must be the same\");\n-        }\n-\n-        UserTO result = clone(userTO);\n-        apply(userTO, userMod, result);\n-\n-        // 1. password\n-        result.setPassword(userMod.getPassword());\n-\n-        // 2. username\n-        if (userMod.getUsername() != null) {\n-            result.setUsername(userMod.getUsername());\n-        }\n-        // 3. memberships\n-        Map<Long, MembershipTO> membs = result.getMembershipMap();\n-        for (Long membId : userMod.getMembershipsToBeRemoved()) {\n-            result.removeMembership(membs.get(membId));\n-        }\n-        for (MembershipMod membMod : userMod.getMembershipsToBeAdded()) {\n-            MembershipTO membTO = new MembershipTO();\n-            membTO.setRoleId(membMod.getRole());\n-\n-            apply(membTO, membMod, membTO);\n-        }\n-\n-        return result;\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.util;\r\n+\r\n+import java.util.ArrayList;\r\n+import java.util.Collections;\r\n+import java.util.HashMap;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Map;\r\n+import java.util.Set;\r\n+import org.apache.commons.lang.SerializationUtils;\r\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\r\n+import org.apache.syncope.common.mod.AttributeMod;\r\n+import org.apache.syncope.common.mod.MembershipMod;\r\n+import org.apache.syncope.common.mod.ReferenceMod;\r\n+import org.apache.syncope.common.mod.RoleMod;\r\n+import org.apache.syncope.common.mod.UserMod;\r\n+import org.apache.syncope.common.to.AbstractAttributableTO;\r\n+import org.apache.syncope.common.to.AttributeTO;\r\n+import org.apache.syncope.common.to.MembershipTO;\r\n+import org.apache.syncope.common.to.RoleTO;\r\n+import org.apache.syncope.common.to.UserTO;\r\n+\r\n+/**\r\n+ * Utility class for manipulating classes extending AbstractAttributableTO and AbstractAttributableMod.\r\n+ *\r\n+ * @see AbstractAttributableTO\r\n+ * @see AbstractAttributableMod\r\n+ */\r\n+public final class AttributableOperations {\r\n+\r\n+    private AttributableOperations() {\r\n+    }\r\n+\r\n+    public static <T extends AbstractAttributableTO> T clone(final T original) {\r\n+        return (T) SerializationUtils.clone(original);\r\n+    }\r\n+\r\n+    private static void populate(final Map<String, AttributeTO> updatedAttrs,\r\n+            final Map<String, AttributeTO> originalAttrs, final AbstractAttributableMod result) {\r\n+        populate(updatedAttrs, originalAttrs, result, false);\r\n+    }\r\n+\r\n+    private static void populate(final Map<String, AttributeTO> updatedAttrs,\r\n+            final Map<String, AttributeTO> originalAttrs, final AbstractAttributableMod result, final boolean virtuals) {\r\n+\r\n+        for (Map.Entry<String, AttributeTO> entry : updatedAttrs.entrySet()) {\r\n+            AttributeMod mod = new AttributeMod();\r\n+            mod.setSchema(entry.getKey());\r\n+\r\n+            Set<String> updatedValues = new HashSet<String>(entry.getValue().getValues());\r\n+\r\n+            Set<String> originalValues = originalAttrs.containsKey(entry.getKey())\r\n+                    ? new HashSet<String>(originalAttrs.get(entry.getKey()).getValues())\r\n+                    : Collections.EMPTY_SET;\r\n+\r\n+            if (!updatedValues.equals(originalValues)) {\r\n+                // avoid unwanted inputs\r\n+                updatedValues.remove(\"\");\r\n+                if (!entry.getValue().isReadonly()) {\r\n+                    mod.setValuesToBeAdded(new ArrayList<String>(updatedValues));\r\n+\r\n+                    if (!mod.isEmpty()) {\r\n+                        if (virtuals) {\r\n+                            result.addVirtualAttributeToBeRemoved(mod.getSchema());\r\n+                        } else {\r\n+                            result.addAttributeToBeRemoved(mod.getSchema());\r\n+                        }\r\n+                    }\r\n+                }\r\n+\r\n+                mod.setValuesToBeRemoved(new ArrayList<String>(originalValues));\r\n+\r\n+                if (!mod.isEmpty()) {\r\n+                    if (virtuals) {\r\n+                        result.addVirtualAttributeToBeUpdated(mod);\r\n+                    } else {\r\n+                        result.addAttributeToBeUpdated(mod);\r\n+                    }\r\n+                }\r\n+            }\r\n+        }\r\n+    }\r\n+\r\n+    private static void diff(\r\n+            final AbstractAttributableTO updated,\r\n+            final AbstractAttributableTO original,\r\n+            final AbstractAttributableMod result,\r\n+            final boolean incremental) {\r\n+\r\n+        // 1. check same id\r\n+        if (updated.getId() != original.getId()) {\r\n+            throw new IllegalArgumentException(\"AttributableTO's id must be the same\");\r\n+        }\r\n+        result.setId(updated.getId());\r\n+\r\n+        // 2. attributes\r\n+        Map<String, AttributeTO> updatedAttrs = new HashMap<String, AttributeTO>(updated.getAttributeMap());\r\n+        Map<String, AttributeTO> originalAttrs = new HashMap<String, AttributeTO>(original.getAttributeMap());\r\n+\r\n+        Set<String> originalAttrNames = new HashSet<String>(originalAttrs.keySet());\r\n+        originalAttrNames.removeAll(updatedAttrs.keySet());\r\n+\r\n+        if (!incremental) {\r\n+            result.setAttributesToBeRemoved(originalAttrNames);\r\n+        }\r\n+\r\n+        Set<String> emptyUpdatedAttrs = new HashSet<String>();\r\n+        for (Map.Entry<String, AttributeTO> entry : updatedAttrs.entrySet()) {\r\n+            if (entry.getValue().getValues() == null || entry.getValue().getValues().isEmpty()) {\r\n+\r\n+                emptyUpdatedAttrs.add(entry.getKey());\r\n+            }\r\n+        }\r\n+        for (String emptyUpdatedAttr : emptyUpdatedAttrs) {\r\n+            updatedAttrs.remove(emptyUpdatedAttr);\r\n+            result.addAttributeToBeRemoved(emptyUpdatedAttr);\r\n+        }\r\n+\r\n+        populate(updatedAttrs, originalAttrs, result);\r\n+\r\n+        // 3. derived attributes\r\n+        updatedAttrs = updated.getDerivedAttributeMap();\r\n+        originalAttrs = original.getDerivedAttributeMap();\r\n+\r\n+        originalAttrNames = new HashSet<String>(originalAttrs.keySet());\r\n+        originalAttrNames.removeAll(updatedAttrs.keySet());\r\n+\r\n+        if (!incremental) {\r\n+            result.setDerivedAttributesToBeRemoved(originalAttrNames);\r\n+        }\r\n+\r\n+        Set<String> updatedAttrNames = new HashSet<String>(updatedAttrs.keySet());\r\n+        updatedAttrNames.removeAll(originalAttrs.keySet());\r\n+        result.setDerivedAttributesToBeAdded(updatedAttrNames);\r\n+\r\n+        // 4. virtual attributes\r\n+        updatedAttrs = updated.getVirtualAttributeMap();\r\n+        originalAttrs = original.getVirtualAttributeMap();\r\n+\r\n+        originalAttrNames = new HashSet<String>(originalAttrs.keySet());\r\n+        originalAttrNames.removeAll(updatedAttrs.keySet());\r\n+\r\n+        if (!incremental) {\r\n+            result.setVirtualAttributesToBeRemoved(originalAttrNames);\r\n+        }\r\n+\r\n+        populate(updatedAttrs, originalAttrs, result, true);\r\n+\r\n+        // 5. resources\r\n+        Set<String> updatedRes = new HashSet<String>(updated.getResources());\r\n+        Set<String> originalRes = new HashSet<String>(original.getResources());\r\n+\r\n+        updatedRes.removeAll(originalRes);\r\n+        result.setResourcesToBeAdded(updatedRes);\r\n+\r\n+        originalRes.removeAll(updated.getResources());\r\n+\r\n+        if (!incremental) {\r\n+            result.setResourcesToBeRemoved(originalRes);\r\n+        }\r\n+    }\r\n+\r\n+    /**\r\n+     * Calculate modifications needed by first in order to be equal to second.\r\n+     *\r\n+     * @param updated updated UserTO\r\n+     * @param original original UserTO\r\n+     * @return UserMod containing differences\r\n+     */\r\n+    public static UserMod diff(final UserTO updated, final UserTO original) {\r\n+        return diff(updated, original, false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Calculate modifications needed by first in order to be equal to second.\r\n+     *\r\n+     * @param updated updated UserTO\r\n+     * @param original original UserTO\r\n+     * @param incremental perform incremental diff (without removing existing info)\r\n+     * @return UserMod containing differences\r\n+     */\r\n+    public static UserMod diff(final UserTO updated, final UserTO original, final boolean incremental) {\r\n+        UserMod result = new UserMod();\r\n+\r\n+        diff(updated, original, result, incremental);\r\n+\r\n+        // 1. password\r\n+        if (original.getPassword() != null && !original.getPassword().equals(updated.getPassword())) {\r\n+            result.setPassword(updated.getPassword());\r\n+        }\r\n+\r\n+        // 2. username\r\n+        if (original.getUsername() != null && !original.getUsername().equals(updated.getUsername())) {\r\n+            result.setUsername(updated.getUsername());\r\n+        }\r\n+\r\n+        // 3. memberships\r\n+        Map<Long, MembershipTO> updatedMembs = updated.getMembershipMap();\r\n+        Map<Long, MembershipTO> originalMembs = original.getMembershipMap();\r\n+\r\n+        for (Map.Entry<Long, MembershipTO> entry : updatedMembs.entrySet()) {\r\n+            MembershipMod membMod = new MembershipMod();\r\n+            membMod.setRole(entry.getValue().getRoleId());\r\n+\r\n+            if (originalMembs.containsKey(entry.getKey())) {\r\n+                diff(entry.getValue(), originalMembs.get(entry.getKey()), membMod, false);\r\n+            } else {\r\n+                for (AttributeTO attr : entry.getValue().getAttributes()) {\r\n+\r\n+                    AttributeMod attrMod = new AttributeMod();\r\n+                    attrMod.setSchema(attr.getSchema());\r\n+                    attrMod.setValuesToBeAdded(attr.getValues());\r\n+\r\n+                    if (!attrMod.isEmpty()) {\r\n+                        membMod.addAttributeToBeUpdated(attrMod);\r\n+                        membMod.addAttributeToBeRemoved(attrMod.getSchema());\r\n+                    }\r\n+                }\r\n+                for (AttributeTO attr : entry.getValue().getDerivedAttributes()) {\r\n+\r\n+                    membMod.addDerivedAttributeToBeAdded(attr.getSchema());\r\n+                }\r\n+                for (AttributeTO attr : entry.getValue().getVirtualAttributes()) {\r\n+\r\n+                    AttributeMod attrMod = new AttributeMod();\r\n+                    attrMod.setSchema(attr.getSchema());\r\n+                    attrMod.setValuesToBeAdded(attr.getValues());\r\n+\r\n+                    if (!attrMod.isEmpty()) {\r\n+                        membMod.addVirtualAttributeToBeUpdated(attrMod);\r\n+                        membMod.addAttributeToBeRemoved(attrMod.getSchema());\r\n+                    }\r\n+                }\r\n+                membMod.setResourcesToBeAdded(entry.getValue().getResources());\r\n+            }\r\n+\r\n+            if (!membMod.isEmpty()) {\r\n+                result.addMembershipToBeAdded(membMod);\r\n+            }\r\n+        }\r\n+\r\n+        if (!incremental) {\r\n+            Set<Long> originalRoles = new HashSet<Long>(originalMembs.keySet());\r\n+            originalRoles.removeAll(updatedMembs.keySet());\r\n+            for (Long roleId : originalRoles) {\r\n+                result.addMembershipToBeRemoved(originalMembs.get(roleId).getId());\r\n+            }\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    /**\r\n+     * Calculate modifications needed by first in order to be equal to second.\r\n+     *\r\n+     * @param updated updated RoleTO\r\n+     * @param original original RoleTO\r\n+     * @return RoleMod containing differences\r\n+     */\r\n+    public static RoleMod diff(final RoleTO updated, final RoleTO original) {\r\n+        return diff(updated, original, false);\r\n+    }\r\n+\r\n+    /**\r\n+     * Calculate modifications needed by first in order to be equal to second.\r\n+     *\r\n+     * @param updated updated RoleTO\r\n+     * @param original original RoleTO\r\n+     * @param incremental perform incremental diff (without removing existing info)\r\n+     * @return RoleMod containing differences\r\n+     */\r\n+    public static RoleMod diff(final RoleTO updated, final RoleTO original, final boolean incremental) {\r\n+        RoleMod result = new RoleMod();\r\n+\r\n+        diff(updated, original, result, incremental);\r\n+\r\n+        // 1. inheritance\r\n+        result.setInheritOwner(updated.isInheritOwner());\r\n+        result.setInheritAccountPolicy(updated.isInheritAccountPolicy());\r\n+        result.setInheritPasswordPolicy(updated.isInheritPasswordPolicy());\r\n+        result.setInheritAttributes(updated.isInheritAttributes());\r\n+        result.setInheritDerivedAttributes(updated.isInheritDerivedAttributes());\r\n+        result.setInheritVirtualAttributes(updated.isInheritVirtualAttributes());\r\n+\r\n+        // 2. policies\r\n+        result.setAccountPolicy(new ReferenceMod(updated.getAccountPolicy()));\r\n+        result.setPasswordPolicy(new ReferenceMod(updated.getPasswordPolicy()));\r\n+\r\n+        // 3. name\r\n+        if (!original.getName().equals(updated.getName())) {\r\n+            result.setName(updated.getName());\r\n+        }\r\n+\r\n+        // 4. entitlements\r\n+        Set<String> updatedEnts = new HashSet<String>(updated.getEntitlements());\r\n+        Set<String> originalEnts = new HashSet<String>(original.getEntitlements());\r\n+        if (updatedEnts.equals(originalEnts)) {\r\n+            result.setEntitlements(null);\r\n+        } else {\r\n+            result.setEntitlements(updated.getEntitlements());\r\n+        }\r\n+\r\n+        // 5. owner\r\n+        result.setUserOwner(new ReferenceMod(updated.getUserOwner()));\r\n+        result.setRoleOwner(new ReferenceMod(updated.getRoleOwner()));\r\n+\r\n+        return result;\r\n+    }\r\n+\r\n+    private static List<AttributeTO> getUpdateValues(final Map<String, AttributeTO> attrs,\r\n+            final Set<String> attrsToBeRemoved, final Set<AttributeMod> attrsToBeUpdated) {\r\n+\r\n+        Map<String, AttributeTO> rwattrs = new HashMap<String, AttributeTO>(attrs);\r\n+        for (String attrName : attrsToBeRemoved) {\r\n+            rwattrs.remove(attrName);\r\n+        }\r\n+        for (AttributeMod attrMod : attrsToBeUpdated) {\r\n+            if (rwattrs.containsKey(attrMod.getSchema())) {\r\n+                AttributeTO attrTO = rwattrs.get(attrMod.getSchema());\r\n+                attrTO.getValues().removeAll(attrMod.getValuesToBeRemoved());\r\n+                attrTO.getValues().addAll(attrMod.getValuesToBeAdded());\r\n+            } else {\r\n+                AttributeTO attrTO = new AttributeTO();\r\n+                attrTO.setSchema(attrMod.getSchema());\r\n+                attrTO.setValues(attrMod.getValuesToBeAdded());\r\n+\r\n+                rwattrs.put(attrMod.getSchema(), attrTO);\r\n+            }\r\n+        }\r\n+\r\n+        return new ArrayList<AttributeTO>(rwattrs.values());\r\n+    }\r\n+\r\n+    private static <T extends AbstractAttributableTO, K extends AbstractAttributableMod> void apply(final T to,\r\n+            final K mod, final T result) {\r\n+\r\n+        // 1. attributes\r\n+        result.setAttributes(getUpdateValues(to.getAttributeMap(), mod.getAttributesToBeRemoved(), mod.\r\n+                getAttributesToBeUpdated()));\r\n+\r\n+        // 2. derived attributes\r\n+        Map<String, AttributeTO> attrs = to.getDerivedAttributeMap();\r\n+        for (String attrName : mod.getDerivedAttributesToBeRemoved()) {\r\n+            attrs.remove(attrName);\r\n+        }\r\n+        for (String attrName : mod.getDerivedAttributesToBeAdded()) {\r\n+            AttributeTO attrTO = new AttributeTO();\r\n+            attrTO.setSchema(attrName);\r\n+\r\n+            attrs.put(attrName, attrTO);\r\n+        }\r\n+        result.setDerivedAttributes(new ArrayList<AttributeTO>(attrs.values()));\r\n+\r\n+        // 3. virtual attributes\r\n+        result.setVirtualAttributes(getUpdateValues(to.getVirtualAttributeMap(), mod.getVirtualAttributesToBeRemoved(),\r\n+                mod.getVirtualAttributesToBeUpdated()));\r\n+\r\n+        // 4. resources\r\n+        result.getResources().removeAll(mod.getResourcesToBeRemoved());\r\n+        result.getResources().addAll(mod.getResourcesToBeAdded());\r\n+    }\r\n+\r\n+    public static UserTO apply(final UserTO userTO, final UserMod userMod) {\r\n+        // 1. check same id\r\n+        if (userTO.getId() != userMod.getId()) {\r\n+            throw new IllegalArgumentException(\"UserTO and UserMod ids must be the same\");\r\n+        }\r\n+\r\n+        UserTO result = clone(userTO);\r\n+        apply(userTO, userMod, result);\r\n+\r\n+        // 1. password\r\n+        result.setPassword(userMod.getPassword());\r\n+\r\n+        // 2. username\r\n+        if (userMod.getUsername() != null) {\r\n+            result.setUsername(userMod.getUsername());\r\n+        }\r\n+        // 3. memberships\r\n+        Map<Long, MembershipTO> membs = result.getMembershipMap();\r\n+        for (Long membId : userMod.getMembershipsToBeRemoved()) {\r\n+            result.removeMembership(membs.get(membId));\r\n+        }\r\n+        for (MembershipMod membMod : userMod.getMembershipsToBeAdded()) {\r\n+            MembershipTO membTO = new MembershipTO();\r\n+            membTO.setRoleId(membMod.getRole());\r\n+\r\n+            apply(membTO, membMod, membTO);\r\n+        }\r\n+\r\n+        return result;\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/util/AttributableOperations.java"},{"sha":"cc866a3fbe7ff46e60092abff3f134cd18cd3de0","filename":"common/src/main/java/org/apache/syncope/common/util/CollectionWrapper.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Futil%2FCollectionWrapper.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -16,16 +16,16 @@\n  * specific language governing permissions and limitations\r\n  * under the License.\r\n  */\r\n-package org.apache.syncope.client.util;\r\n+package org.apache.syncope.common.util;\r\n \r\n import java.util.ArrayList;\r\n import java.util.HashSet;\r\n import java.util.List;\r\n import java.util.Set;\r\n \r\n-import org.apache.syncope.client.to.EntitlementTO;\r\n-import org.apache.syncope.client.to.MailTemplateTO;\r\n-import org.apache.syncope.client.to.ValidatorTO;\r\n+import org.apache.syncope.common.to.EntitlementTO;\r\n+import org.apache.syncope.common.to.MailTemplateTO;\r\n+import org.apache.syncope.common.to.ValidatorTO;\r\n import org.springframework.web.servlet.ModelAndView;\r\n \r\n public final class CollectionWrapper {\r","previous_filename":"client/src/main/java/org/apache/syncope/client/util/CollectionWrapper.java"},{"sha":"4b0185c3320620ab6e7f0b42cf3d74b052220601","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientCompositeErrorException.java","status":"renamed","additions":101,"deletions":101,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientCompositeErrorException.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,101 +1,101 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.validation;\n-\n-import java.util.HashSet;\n-import java.util.Iterator;\n-import java.util.Set;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.web.client.HttpClientErrorException;\n-import org.apache.syncope.types.SyncopeClientExceptionType;\n-\n-public class SyncopeClientCompositeErrorException extends HttpClientErrorException {\n-\n-    private Set<SyncopeClientException> exceptions;\n-\n-    public SyncopeClientCompositeErrorException(HttpStatus statusCode) {\n-        super(statusCode);\n-        exceptions = new HashSet<SyncopeClientException>();\n-    }\n-\n-    public boolean hasExceptions() {\n-        return !exceptions.isEmpty();\n-    }\n-\n-    public boolean hasException(SyncopeClientExceptionType exceptionType) {\n-        return getException(exceptionType) != null;\n-    }\n-\n-    public SyncopeClientException getException(SyncopeClientExceptionType exceptionType) {\n-\n-        boolean found = false;\n-        SyncopeClientException syncopeClientException = null;\n-        for (Iterator<SyncopeClientException> itor = exceptions.iterator(); itor.hasNext() && !found;) {\n-\n-            syncopeClientException = itor.next();\n-            if (syncopeClientException.getType().equals(exceptionType)) {\n-                found = true;\n-            }\n-        }\n-\n-        return found\n-                ? syncopeClientException\n-                : null;\n-    }\n-\n-    public Set<SyncopeClientException> getExceptions() {\n-        return exceptions;\n-    }\n-\n-    public boolean addException(SyncopeClientException exception) {\n-        if (exception.getType() == null) {\n-            throw new IllegalArgumentException(exception + \" does not have the right \"\n-                    + SyncopeClientExceptionType.class.getName() + \" set\");\n-        }\n-\n-        return exceptions.add(exception);\n-    }\n-\n-    @Override\n-    public String getMessage() {\n-        StringBuilder message = new StringBuilder();\n-\n-        message.append(\"{\");\n-        Iterator<SyncopeClientException> iter = getExceptions().iterator();\n-        while (iter.hasNext()) {\n-            SyncopeClientException e = iter.next();\n-            message.append(\"[\");\n-            message.append(e.getType());\n-            message.append(\" \");\n-            message.append(e.getElements());\n-            message.append(\"]\");\n-            if (iter.hasNext()) {\n-                message.append(\", \");\n-            }\n-        }\n-        message.append(\"}\");\n-\n-        return message.toString();\n-    }\n-\n-    @Override\n-    public String getLocalizedMessage() {\n-        return getMessage();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.validation;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.Iterator;\r\n+import java.util.Set;\r\n+import org.springframework.http.HttpStatus;\r\n+import org.springframework.web.client.HttpClientErrorException;\r\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n+\r\n+public class SyncopeClientCompositeErrorException extends HttpClientErrorException {\r\n+\r\n+    private Set<SyncopeClientException> exceptions;\r\n+\r\n+    public SyncopeClientCompositeErrorException(HttpStatus statusCode) {\r\n+        super(statusCode);\r\n+        exceptions = new HashSet<SyncopeClientException>();\r\n+    }\r\n+\r\n+    public boolean hasExceptions() {\r\n+        return !exceptions.isEmpty();\r\n+    }\r\n+\r\n+    public boolean hasException(SyncopeClientExceptionType exceptionType) {\r\n+        return getException(exceptionType) != null;\r\n+    }\r\n+\r\n+    public SyncopeClientException getException(SyncopeClientExceptionType exceptionType) {\r\n+\r\n+        boolean found = false;\r\n+        SyncopeClientException syncopeClientException = null;\r\n+        for (Iterator<SyncopeClientException> itor = exceptions.iterator(); itor.hasNext() && !found;) {\r\n+\r\n+            syncopeClientException = itor.next();\r\n+            if (syncopeClientException.getType().equals(exceptionType)) {\r\n+                found = true;\r\n+            }\r\n+        }\r\n+\r\n+        return found\r\n+                ? syncopeClientException\r\n+                : null;\r\n+    }\r\n+\r\n+    public Set<SyncopeClientException> getExceptions() {\r\n+        return exceptions;\r\n+    }\r\n+\r\n+    public boolean addException(SyncopeClientException exception) {\r\n+        if (exception.getType() == null) {\r\n+            throw new IllegalArgumentException(exception + \" does not have the right \"\r\n+                    + SyncopeClientExceptionType.class.getName() + \" set\");\r\n+        }\r\n+\r\n+        return exceptions.add(exception);\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getMessage() {\r\n+        StringBuilder message = new StringBuilder();\r\n+\r\n+        message.append(\"{\");\r\n+        Iterator<SyncopeClientException> iter = getExceptions().iterator();\r\n+        while (iter.hasNext()) {\r\n+            SyncopeClientException e = iter.next();\r\n+            message.append(\"[\");\r\n+            message.append(e.getType());\r\n+            message.append(\" \");\r\n+            message.append(e.getElements());\r\n+            message.append(\"]\");\r\n+            if (iter.hasNext()) {\r\n+                message.append(\", \");\r\n+            }\r\n+        }\r\n+        message.append(\"}\");\r\n+\r\n+        return message.toString();\r\n+    }\r\n+\r\n+    @Override\r\n+    public String getLocalizedMessage() {\r\n+        return getMessage();\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/validation/SyncopeClientCompositeErrorException.java"},{"sha":"5936b241b16d6e88193f0dc9d784ac47d5211023","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientErrorHandler.java","status":"renamed","additions":93,"deletions":93,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientErrorHandler.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,93 +1,93 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.validation;\n-\n-import java.io.IOException;\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.commons.lang.ArrayUtils;\n-import org.apache.syncope.types.SyncopeClientExceptionType;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.http.HttpStatus;\n-import org.springframework.http.client.ClientHttpResponse;\n-import org.springframework.web.client.DefaultResponseErrorHandler;\n-\n-public class SyncopeClientErrorHandler extends DefaultResponseErrorHandler {\n-\n-    public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\n-\n-    /**\n-     * Logger.\n-     */\n-    private static final Logger LOG = LoggerFactory.getLogger(SyncopeClientErrorHandler.class);\n-\n-    public static final HttpStatus[] MANAGED_STATUSES = new HttpStatus[] { HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND };\n-\n-    @Override\n-    public void handleError(final ClientHttpResponse response) throws IOException {\n-\n-        if (!ArrayUtils.contains(MANAGED_STATUSES, response.getStatusCode())) {\n-            super.handleError(response);\n-        }\n-\n-        List<String> exceptionTypesInHeaders = response.getHeaders().get(EXCEPTION_TYPE_HEADER);\n-        if (exceptionTypesInHeaders == null) {\n-            LOG.debug(\"No \" + EXCEPTION_TYPE_HEADER + \" provided\");\n-\n-            return;\n-        }\n-\n-        SyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(response\n-                .getStatusCode());\n-\n-        Set<String> handledExceptions = new HashSet<String>();\n-        for (String exceptionTypeAsString : exceptionTypesInHeaders) {\n-            SyncopeClientExceptionType exceptionType = null;\n-            try {\n-                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\n-            } catch (IllegalArgumentException e) {\n-                LOG.error(\"Unexpected value of \" + EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString, e);\n-            }\n-            if (exceptionType != null) {\n-                handledExceptions.add(exceptionTypeAsString);\n-\n-                SyncopeClientException clientException = new SyncopeClientException();\n-                clientException.setType(exceptionType);\n-                if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\n-                        && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\n-\n-                    clientException.setElements(response.getHeaders().get(exceptionType.getElementHeaderName()));\n-                }\n-\n-                compositeException.addException(clientException);\n-            }\n-        }\n-\n-        exceptionTypesInHeaders.removeAll(handledExceptions);\n-        if (!exceptionTypesInHeaders.isEmpty()) {\n-            LOG.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\n-        }\n-\n-        if (compositeException.hasExceptions()) {\n-            throw compositeException;\n-        }\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.validation;\r\n+\r\n+import java.io.IOException;\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+import org.apache.commons.lang.ArrayUtils;\r\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n+import org.slf4j.Logger;\r\n+import org.slf4j.LoggerFactory;\r\n+import org.springframework.http.HttpStatus;\r\n+import org.springframework.http.client.ClientHttpResponse;\r\n+import org.springframework.web.client.DefaultResponseErrorHandler;\r\n+\r\n+public class SyncopeClientErrorHandler extends DefaultResponseErrorHandler {\r\n+\r\n+    public static final String EXCEPTION_TYPE_HEADER = \"ExceptionType\";\r\n+\r\n+    /**\r\n+     * Logger.\r\n+     */\r\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeClientErrorHandler.class);\r\n+\r\n+    public static final HttpStatus[] MANAGED_STATUSES = new HttpStatus[] { HttpStatus.BAD_REQUEST, HttpStatus.NOT_FOUND };\r\n+\r\n+    @Override\r\n+    public void handleError(final ClientHttpResponse response) throws IOException {\r\n+\r\n+        if (!ArrayUtils.contains(MANAGED_STATUSES, response.getStatusCode())) {\r\n+            super.handleError(response);\r\n+        }\r\n+\r\n+        List<String> exceptionTypesInHeaders = response.getHeaders().get(EXCEPTION_TYPE_HEADER);\r\n+        if (exceptionTypesInHeaders == null) {\r\n+            LOG.debug(\"No \" + EXCEPTION_TYPE_HEADER + \" provided\");\r\n+\r\n+            return;\r\n+        }\r\n+\r\n+        SyncopeClientCompositeErrorException compositeException = new SyncopeClientCompositeErrorException(response\r\n+                .getStatusCode());\r\n+\r\n+        Set<String> handledExceptions = new HashSet<String>();\r\n+        for (String exceptionTypeAsString : exceptionTypesInHeaders) {\r\n+            SyncopeClientExceptionType exceptionType = null;\r\n+            try {\r\n+                exceptionType = SyncopeClientExceptionType.getFromHeaderValue(exceptionTypeAsString);\r\n+            } catch (IllegalArgumentException e) {\r\n+                LOG.error(\"Unexpected value of \" + EXCEPTION_TYPE_HEADER + \": \" + exceptionTypeAsString, e);\r\n+            }\r\n+            if (exceptionType != null) {\r\n+                handledExceptions.add(exceptionTypeAsString);\r\n+\r\n+                SyncopeClientException clientException = new SyncopeClientException();\r\n+                clientException.setType(exceptionType);\r\n+                if (response.getHeaders().get(exceptionType.getElementHeaderName()) != null\r\n+                        && !response.getHeaders().get(exceptionType.getElementHeaderName()).isEmpty()) {\r\n+\r\n+                    clientException.setElements(response.getHeaders().get(exceptionType.getElementHeaderName()));\r\n+                }\r\n+\r\n+                compositeException.addException(clientException);\r\n+            }\r\n+        }\r\n+\r\n+        exceptionTypesInHeaders.removeAll(handledExceptions);\r\n+        if (!exceptionTypesInHeaders.isEmpty()) {\r\n+            LOG.error(\"Unmanaged exceptions: \" + exceptionTypesInHeaders);\r\n+        }\r\n+\r\n+        if (compositeException.hasExceptions()) {\r\n+            throw compositeException;\r\n+        }\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/validation/SyncopeClientErrorHandler.java"},{"sha":"40c198d10bfd119bb556cb5d05d4d5f362c25fee","filename":"common/src/main/java/org/apache/syncope/common/validation/SyncopeClientException.java","status":"renamed","additions":76,"deletions":75,"changes":151,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fvalidation%2FSyncopeClientException.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -1,75 +1,76 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.validation;\n-\n-import java.util.HashSet;\n-import java.util.List;\n-import java.util.Set;\n-import org.apache.syncope.types.SyncopeClientExceptionType;\n-\n-public class SyncopeClientException extends Exception {\n-\n-    private static final long serialVersionUID = 3380920886511913475L;\n-\n-    private SyncopeClientExceptionType type;\n-\n-    private Set<String> elements;\n-\n-    public SyncopeClientException() {\n-        super();\n-        elements = new HashSet<String>();\n-    }\n-\n-    public SyncopeClientException(SyncopeClientExceptionType type) {\n-        this();\n-        setType(type);\n-    }\n-\n-    public SyncopeClientExceptionType getType() {\n-        return type;\n-    }\n-\n-    public final void setType(SyncopeClientExceptionType type) {\n-        this.type = type;\n-    }\n-\n-    public boolean addElement(String element) {\n-        return elements.add(element);\n-    }\n-\n-    public boolean removeElement(String element) {\n-        return elements.remove(element);\n-    }\n-\n-    public Set<String> getElements() {\n-        return elements;\n-    }\n-\n-    public void setElements(Set<String> elements) {\n-        this.elements = elements;\n-    }\n-\n-    public void setElements(List<String> elements) {\n-        this.elements.addAll(elements);\n-    }\n-\n-    public boolean isEmpty() {\n-        return elements.isEmpty();\n-    }\n-}\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.validation;\r\n+\r\n+import java.util.HashSet;\r\n+import java.util.List;\r\n+import java.util.Set;\r\n+\r\n+import org.apache.syncope.common.types.SyncopeClientExceptionType;\r\n+\r\n+public class SyncopeClientException extends Exception {\r\n+\r\n+    private static final long serialVersionUID = 3380920886511913475L;\r\n+\r\n+    private SyncopeClientExceptionType type;\r\n+\r\n+    private Set<String> elements;\r\n+\r\n+    public SyncopeClientException() {\r\n+        super();\r\n+        elements = new HashSet<String>();\r\n+    }\r\n+\r\n+    public SyncopeClientException(SyncopeClientExceptionType type) {\r\n+        this();\r\n+        setType(type);\r\n+    }\r\n+\r\n+    public SyncopeClientExceptionType getType() {\r\n+        return type;\r\n+    }\r\n+\r\n+    public final void setType(SyncopeClientExceptionType type) {\r\n+        this.type = type;\r\n+    }\r\n+\r\n+    public boolean addElement(String element) {\r\n+        return elements.add(element);\r\n+    }\r\n+\r\n+    public boolean removeElement(String element) {\r\n+        return elements.remove(element);\r\n+    }\r\n+\r\n+    public Set<String> getElements() {\r\n+        return elements;\r\n+    }\r\n+\r\n+    public void setElements(Set<String> elements) {\r\n+        this.elements = elements;\r\n+    }\r\n+\r\n+    public void setElements(List<String> elements) {\r\n+        this.elements.addAll(elements);\r\n+    }\r\n+\r\n+    public boolean isEmpty() {\r\n+        return elements.isEmpty();\r\n+    }\r\n+}\r","previous_filename":"client/src/main/java/org/apache/syncope/client/validation/SyncopeClientException.java"},{"sha":"684e9126a7ddae96ff8d326602506edafe48db08","filename":"console/src/main/java/org/apache/syncope/console/SyncopeSession.java","status":"modified","additions":29,"deletions":29,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2FSyncopeSession.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,36 +21,36 @@\n import java.text.SimpleDateFormat;\n import java.util.HashMap;\n \n+import org.apache.syncope.client.services.proxy.ConfigurationServiceProxy;\n+import org.apache.syncope.client.services.proxy.ConnectorServiceProxy;\n+import org.apache.syncope.client.services.proxy.EntitlementServiceProxy;\n+import org.apache.syncope.client.services.proxy.LoggerServiceProxy;\n+import org.apache.syncope.client.services.proxy.NotificationServiceProxy;\n+import org.apache.syncope.client.services.proxy.PolicyServiceProxy;\n+import org.apache.syncope.client.services.proxy.ReportServiceProxy;\n+import org.apache.syncope.client.services.proxy.ResourceServiceProxy;\n+import org.apache.syncope.client.services.proxy.RoleServiceProxy;\n+import org.apache.syncope.client.services.proxy.SchemaServiceProxy;\n+import org.apache.syncope.client.services.proxy.SpringServiceProxy;\n+import org.apache.syncope.client.services.proxy.TaskServiceProxy;\n+import org.apache.syncope.client.services.proxy.UserRequestServiceProxy;\n+import org.apache.syncope.client.services.proxy.UserServiceProxy;\n+import org.apache.syncope.client.services.proxy.WorkflowServiceProxy;\n+import org.apache.syncope.common.services.ConfigurationService;\n+import org.apache.syncope.common.services.ConnectorService;\n+import org.apache.syncope.common.services.EntitlementService;\n+import org.apache.syncope.common.services.LoggerService;\n+import org.apache.syncope.common.services.NotificationService;\n+import org.apache.syncope.common.services.PolicyService;\n+import org.apache.syncope.common.services.ReportService;\n+import org.apache.syncope.common.services.ResourceService;\n+import org.apache.syncope.common.services.RoleService;\n+import org.apache.syncope.common.services.SchemaService;\n+import org.apache.syncope.common.services.TaskService;\n+import org.apache.syncope.common.services.UserRequestService;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.services.WorkflowService;\n import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.services.ConfigurationService;\n-import org.apache.syncope.services.ConnectorService;\n-import org.apache.syncope.services.EntitlementService;\n-import org.apache.syncope.services.LoggerService;\n-import org.apache.syncope.services.NotificationService;\n-import org.apache.syncope.services.PolicyService;\n-import org.apache.syncope.services.ReportService;\n-import org.apache.syncope.services.ResourceService;\n-import org.apache.syncope.services.RoleService;\n-import org.apache.syncope.services.SchemaService;\n-import org.apache.syncope.services.TaskService;\n-import org.apache.syncope.services.UserRequestService;\n-import org.apache.syncope.services.UserService;\n-import org.apache.syncope.services.WorkflowService;\n-import org.apache.syncope.services.proxy.ConfigurationServiceProxy;\n-import org.apache.syncope.services.proxy.ConnectorServiceProxy;\n-import org.apache.syncope.services.proxy.EntitlementServiceProxy;\n-import org.apache.syncope.services.proxy.LoggerServiceProxy;\n-import org.apache.syncope.services.proxy.NotificationServiceProxy;\n-import org.apache.syncope.services.proxy.PolicyServiceProxy;\n-import org.apache.syncope.services.proxy.ReportServiceProxy;\n-import org.apache.syncope.services.proxy.ResourceServiceProxy;\n-import org.apache.syncope.services.proxy.RoleServiceProxy;\n-import org.apache.syncope.services.proxy.SchemaServiceProxy;\n-import org.apache.syncope.services.proxy.SpringServiceProxy;\n-import org.apache.syncope.services.proxy.TaskServiceProxy;\n-import org.apache.syncope.services.proxy.UserRequestServiceProxy;\n-import org.apache.syncope.services.proxy.UserServiceProxy;\n-import org.apache.syncope.services.proxy.WorkflowServiceProxy;\n import org.apache.wicket.Session;\n import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n import org.apache.wicket.protocol.http.WebApplication;"},{"sha":"05236b46fef7e5c8d13e1b923a53c6e421ff7778","filename":"console/src/main/java/org/apache/syncope/console/commons/AttributableDataProvider.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FAttributableDataProvider.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,8 +21,9 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.console.rest.AbstractAttributableRestClient;\n import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;"},{"sha":"d0bd1c9660b9a1bf468fd595b2441a50e2d97f20","filename":"console/src/main/java/org/apache/syncope/console/commons/DateFormatROModel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FDateFormatROModel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FDateFormatROModel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FDateFormatROModel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.console.commons;\n \n import java.util.Date;\n+\n+import org.apache.syncope.console.SyncopeSession;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.syncope.console.SyncopeSession;\n \n public class DateFormatROModel implements IModel<String> {\n "},{"sha":"f140c1a098a38bdc773a32f5dbbd1e3c087d5d31","filename":"console/src/main/java/org/apache/syncope/console/commons/HttpResourceStream.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FHttpResourceStream.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,6 +23,7 @@\n import java.io.InputStream;\n import java.net.URI;\n import java.net.URISyntaxException;\n+\n import org.apache.http.Header;\n import org.apache.http.HttpEntity;\n import org.apache.http.HttpHost;"},{"sha":"95f5791e1b0bd3d577267059f6a3af7cd199f1e6","filename":"console/src/main/java/org/apache/syncope/console/commons/MapChoiceRenderer.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FMapChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FMapChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FMapChoiceRenderer.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.commons;\n \n import java.util.Map;\n+\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n \n public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {"},{"sha":"7a040699213835377dd821288e073c559ecadf6d","filename":"console/src/main/java/org/apache/syncope/console/commons/PreferenceManager.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -26,6 +26,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Map.Entry;\n+\n import org.apache.wicket.request.Request;\n import org.apache.wicket.request.Response;\n import org.apache.wicket.util.cookies.CookieDefaults;"},{"sha":"babb80a02f7c7df0cfebb224f540ab366186d63a","filename":"console/src/main/java/org/apache/syncope/console/commons/RoleTreeBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleTreeBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleTreeBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FRoleTreeBuilder.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,10 +23,12 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n+\n import javax.swing.tree.DefaultMutableTreeNode;\n import javax.swing.tree.DefaultTreeModel;\n import javax.swing.tree.TreeModel;\n-import org.apache.syncope.client.to.RoleTO;\n+\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.console.rest.RoleRestClient;\n import org.springframework.beans.factory.annotation.Autowired;\n "},{"sha":"50c40f3e6c0e364b9d05f7295d052f7c17f596e7","filename":"console/src/main/java/org/apache/syncope/console/commons/SchemaModalPageFactory.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.console.commons;\n \n-import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.pages.AbstractSchemaModalPage;\n import org.apache.syncope.console.pages.BaseModalPage;\n import org.apache.syncope.console.pages.DerivedSchemaModalPage;\n import org.apache.syncope.console.pages.SchemaModalPage;\n import org.apache.syncope.console.pages.VirtualSchemaModalPage;\n import org.apache.syncope.console.rest.SchemaRestClient;\n-import org.apache.syncope.types.AttributableType;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n \n /**\n  * Modal window with Schema form."},{"sha":"46b82dce30c95068cba08231700d463e78fbae3e","filename":"console/src/main/java/org/apache/syncope/console/commons/SearchCondWrapper.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSearchCondWrapper.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,10 +19,11 @@\n package org.apache.syncope.console.commons;\n \n import java.io.Serializable;\n+\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n-import org.apache.syncope.client.search.AttributeCond;\n-import org.apache.syncope.client.search.AttributeCond.Type;\n+import org.apache.syncope.common.search.AttributeCond;\n+import org.apache.syncope.common.search.AttributeCond.Type;\n \n /**\n  * Generic search condition wrapper class."},{"sha":"84836f19d79a2d7ecb98fdd6c213c087324dab0b","filename":"console/src/main/java/org/apache/syncope/console/commons/SelectOption.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectOption.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectOption.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSelectOption.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.commons;\n \n import java.io.Serializable;\n+\n import org.apache.commons.lang.builder.HashCodeBuilder;\n \n public class SelectOption implements Serializable {"},{"sha":"c3618dbada7ba986bbbac48bbe0d0377f6e4f5ef","filename":"console/src/main/java/org/apache/syncope/console/commons/SortableAttributableProviderComparator.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,8 +22,9 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.AttributeTO;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.model.AbstractReadOnlyModel;\n "},{"sha":"ff1d133e954bd12cfdc14c00bc0deb41d9c903b2","filename":"console/src/main/java/org/apache/syncope/console/commons/SortableDataProviderComparator.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.Comparator;\n+\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.PropertyModel;"},{"sha":"81a8ae7fba15753b19b8f0c12a31290aa1958a0b","filename":"console/src/main/java/org/apache/syncope/console/commons/StatusUtils.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FStatusUtils.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,17 +24,18 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Map;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.client.to.ConnObjectTO;\n-import org.apache.syncope.client.to.MappingItemTO;\n-import org.apache.syncope.client.to.MappingTO;\n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.MappingItemTO;\n+import org.apache.syncope.common.to.MappingTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.console.rest.AbstractAttributableRestClient;\n import org.apache.syncope.console.rest.ResourceRestClient;\n-import org.apache.syncope.types.IntMappingType;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n "},{"sha":"9431909ae8607e9517fd1e4c9da792d0fbc1b67b","filename":"console/src/main/java/org/apache/syncope/console/commons/XMLRolesReader.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FXMLRolesReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FXMLRolesReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fcommons%2FXMLRolesReader.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -25,6 +25,7 @@\n import javax.xml.xpath.XPathExpression;\n import javax.xml.xpath.XPathExpressionException;\n import javax.xml.xpath.XPathFactory;\n+\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"c2290932d601f7f3916772e01d42a61929d3c85b","filename":"console/src/main/java/org/apache/syncope/console/markup/html/CrontabContainer.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fmarkup%2Fhtml%2FCrontabContainer.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,9 @@\n package org.apache.syncope.console.markup.html;\n \n import java.util.Arrays;\n+\n+import org.apache.syncope.console.commons.SelectChoiceRenderer;\n+import org.apache.syncope.console.commons.SelectOption;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n@@ -30,8 +33,6 @@\n import org.apache.wicket.model.PropertyModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.syncope.console.commons.SelectChoiceRenderer;\n-import org.apache.syncope.console.commons.SelectOption;\n \n public class CrontabContainer extends WebMarkupContainer {\n "},{"sha":"9a8f68e20769398dc306e2739e7819c07d47300b","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractSchedTaskModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.to.SchedTaskTO;\n-import org.apache.syncope.client.to.SyncTaskTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.to.SyncTaskTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.DateFormatROModel;\n import org.apache.syncope.console.markup.html.CrontabContainer;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;"},{"sha":"1e5bfd27312c19cae09fecad32b770909eb1cec1","filename":"console/src/main/java/org/apache/syncope/console/pages/AbstractSchemaModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.AbstractBaseBean;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.console.rest.SchemaRestClient;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.console.rest.SchemaRestClient;\n-import org.apache.syncope.types.AttributableType;\n \n /**\n  * Modal window with Schema form."},{"sha":"79ac6ecae00669b16993fedb2757aa8123664125","filename":"console/src/main/java/org/apache/syncope/console/pages/ApprovalModalPage.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FApprovalModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -26,10 +26,11 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Map;\n+\n import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.client.to.WorkflowFormPropertyTO;\n-import org.apache.syncope.client.to.WorkflowFormTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.MapChoiceRenderer;\n import org.apache.syncope.console.rest.ApprovalRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;"},{"sha":"91569a80ecd659a536af300683dd24d6d28dd872","filename":"console/src/main/java/org/apache/syncope/console/pages/BasePage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FBasePage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.SyncopeApplication;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.rest.UserRestClient;"},{"sha":"3d31d5ad74e6177754299edca111e8b08a1e867d","filename":"console/src/main/java/org/apache/syncope/console/pages/Configuration.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,19 +18,20 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import ch.qos.logback.classic.Logger;\n-import ch.qos.logback.classic.LoggerContext;\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.client.to.ConfigurationTO;\n-import org.apache.syncope.client.to.LoggerTO;\n-import org.apache.syncope.client.to.NotificationTO;\n-import org.apache.syncope.client.to.WorkflowDefinitionTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.to.ConfigurationTO;\n+import org.apache.syncope.common.to.LoggerTO;\n+import org.apache.syncope.common.to.NotificationTO;\n+import org.apache.syncope.common.to.WorkflowDefinitionTO;\n+import org.apache.syncope.common.types.PolicyType;\n+import org.apache.syncope.common.types.SyncopeLoggerLevel;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.HttpResourceStream;\n import org.apache.syncope.console.commons.PreferenceManager;\n@@ -42,8 +43,6 @@\n import org.apache.syncope.console.rest.WorkflowRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.types.PolicyType;\n-import org.apache.syncope.types.SyncopeLoggerLevel;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -79,6 +78,9 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.LoggerFactory;\n \n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.LoggerContext;\n+\n /**\n  * Configurations WebPage.\n  */"},{"sha":"5b6da0fa65feb44242252d7cd83ea6987223e7c5","filename":"console/src/main/java/org/apache/syncope/console/pages/ConfigurationModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConfigurationModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.to.ConfigurationTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.to.ConfigurationTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.rest.ConfigurationRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.PageReference;"},{"sha":"5fc3c5ee76f256d501df59c6564e8875a0a6bc38","filename":"console/src/main/java/org/apache/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,7 +24,22 @@\n import java.util.EnumSet;\n import java.util.HashSet;\n import java.util.List;\n+\n import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.to.ConnBundleTO;\n+import org.apache.syncope.common.to.ConnInstanceTO;\n+import org.apache.syncope.common.types.ConnConfPropSchema;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.ConnectorCapability;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.rest.ConnectorRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -51,21 +66,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.springframework.util.ClassUtils;\n-import org.apache.syncope.client.to.ConnBundleTO;\n-import org.apache.syncope.client.to.ConnInstanceTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.rest.ConnectorRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n-import org.apache.syncope.types.ConnConfPropSchema;\n-import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.ConnectorCapability;\n-import org.apache.wicket.PageReference;\n \n /**\n  * Modal window with Connector form."},{"sha":"ec12f00afaf50ea84352cb3236f151165220f22b","filename":"console/src/main/java/org/apache/syncope/console/pages/DerivedSchemaModalPage.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDerivedSchemaModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.client.to.DerivedSchemaTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.to.DerivedSchemaTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;"},{"sha":"2dca464803e10a9e2e52277690e2d0570c224815","filename":"console/src/main/java/org/apache/syncope/console/pages/DisplayAttributesModalPage.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,12 +24,13 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n+\n import org.apache.commons.lang.ArrayUtils;\n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.rest.SchemaRestClient;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;"},{"sha":"98c3724c1d838b9bafbe0037d22602c7488148d9","filename":"console/src/main/java/org/apache/syncope/console/pages/EditUserModalPage.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FEditUserModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,9 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.mod.UserMod;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.util.AttributableOperations;\n+\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.console.commons.StatusBean;\n import org.apache.syncope.console.pages.panels.AccountInformationPanel;\n import org.apache.syncope.console.pages.panels.StatusPanel;"},{"sha":"1d81fcfa92dd8295b5ee492c98bdfd657de94a3a","filename":"console/src/main/java/org/apache/syncope/console/pages/Login.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -29,13 +29,13 @@\n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.http.util.EntityUtils;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n-import org.apache.syncope.client.to.EntitlementTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.util.CollectionWrapper;\n+import org.apache.syncope.common.services.EntitlementService;\n+import org.apache.syncope.common.services.UserRequestService;\n+import org.apache.syncope.common.to.EntitlementTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.util.CollectionWrapper;\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.syncope.console.wicket.markup.html.form.LinkPanel;\n-import org.apache.syncope.services.EntitlementService;\n-import org.apache.syncope.services.UserRequestService;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;"},{"sha":"15867d9832508fd15d5c39d0beb308d14933bb14","filename":"console/src/main/java/org/apache/syncope/console/pages/Logout.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FLogout.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,8 +20,8 @@\n \n import org.apache.http.impl.client.DefaultHttpClient;\n import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n-import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.syncope.console.SyncopeSession;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n \n /**\n  * Syncope Logout."},{"sha":"c8349bafc5ec0b93c5d5a1c0a35fc450918bf6dd","filename":"console/src/main/java/org/apache/syncope/console/pages/MembershipModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FMembershipModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.to.MembershipTO;\n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.to.MembershipTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.pages.panels.AttributesPanel;\n import org.apache.syncope.console.pages.panels.DerivedAttributesPanel;\n import org.apache.syncope.console.pages.panels.VirtualAttributesPanel;"},{"sha":"e6b32f8334fd8f268d13692239eeb7c467ecd3eb","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationModalPage.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,18 +24,19 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.client.to.NotificationTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.to.NotificationTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.TraceLevel;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;\n import org.apache.syncope.console.rest.NotificationRestClient;\n import org.apache.syncope.console.rest.SchemaRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.IntMappingType;\n-import org.apache.syncope.types.TraceLevel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;"},{"sha":"2b0c5a584c3f7d6a2b01b0c458561ea4205d8c64","filename":"console/src/main/java/org/apache/syncope/console/pages/NotificationTaskModalPage.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FNotificationTaskModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,12 +19,13 @@\n package org.apache.syncope.console.pages;\n \n import java.util.ArrayList;\n+\n+import org.apache.syncope.common.to.NotificationTaskTO;\n+import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.markup.html.form.ListMultipleChoice;\n import org.apache.wicket.markup.html.form.TextArea;\n import org.apache.wicket.model.PropertyModel;\n-import org.apache.syncope.client.to.NotificationTaskTO;\n-import org.apache.syncope.client.to.TaskTO;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n \n public class NotificationTaskModalPage extends TaskModalPage {\n "},{"sha":"871b013f14e6802dbc8c794fac6efe95579a23ae","filename":"console/src/main/java/org/apache/syncope/console/pages/PolicyModalPage.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,20 @@\n package org.apache.syncope.console.pages;\n \n import java.util.Arrays;\n+\n+import org.apache.syncope.common.to.AccountPolicyTO;\n+import org.apache.syncope.common.to.PasswordPolicyTO;\n+import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.SyncPolicyTO;\n+import org.apache.syncope.common.types.AbstractPolicySpec;\n+import org.apache.syncope.common.types.AccountPolicySpec;\n+import org.apache.syncope.common.types.PasswordPolicySpec;\n+import org.apache.syncope.common.types.PolicyType;\n+import org.apache.syncope.common.types.SyncPolicySpec;\n+import org.apache.syncope.console.pages.panels.PolicyBeanPanel;\n+import org.apache.syncope.console.rest.PolicyRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n@@ -27,19 +41,6 @@\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.client.to.AccountPolicyTO;\n-import org.apache.syncope.client.to.PasswordPolicyTO;\n-import org.apache.syncope.client.to.PolicyTO;\n-import org.apache.syncope.client.to.SyncPolicyTO;\n-import org.apache.syncope.console.pages.panels.PolicyBeanPanel;\n-import org.apache.syncope.console.rest.PolicyRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.types.AbstractPolicySpec;\n-import org.apache.syncope.types.AccountPolicySpec;\n-import org.apache.syncope.types.PasswordPolicySpec;\n-import org.apache.syncope.types.PolicyType;\n-import org.apache.syncope.types.SyncPolicySpec;\n \n /**\n  * Modal window with Resource form."},{"sha":"87aa54d28fde32af29007672852a960dc08a994a","filename":"console/src/main/java/org/apache/syncope/console/pages/PropagationTaskModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FPropagationTaskModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.wicket.model.PropertyModel;\n-import org.apache.syncope.client.to.TaskTO;\n+import org.apache.syncope.common.to.TaskTO;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.wicket.model.PropertyModel;\n \n /**\n  * Modal window with Task form (to stop and start execution)."},{"sha":"614c295ecae6269fc42931780a3f279d43f36695","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportExecResultDownloadModalPage.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,14 +19,15 @@\n package org.apache.syncope.console.pages;\n \n import java.util.Arrays;\n+\n+import org.apache.syncope.common.types.ReportExecExportFormat;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.model.Model;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.types.ReportExecExportFormat;\n \n public class ReportExecResultDownloadModalPage extends BaseModalPage {\n "},{"sha":"2c1f31721c7596d489abf1e387c0916987d69f7e","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportModalPage.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,10 +22,12 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.client.report.ReportletConf;\n-import org.apache.syncope.client.to.ReportExecTO;\n-import org.apache.syncope.client.to.ReportTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.report.ReportletConf;\n+import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.ReportExecStatus;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.DateFormatROModel;\n import org.apache.syncope.console.commons.HttpResourceStream;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n@@ -36,7 +38,6 @@\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.types.ReportExecStatus;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageReference;"},{"sha":"f6ba3567232ef70fc19b23993ac9eed486ec14db","filename":"console/src/main/java/org/apache/syncope/console/pages/ReportletConfModalPage.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReportletConfModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -26,11 +26,13 @@\n import java.util.Date;\n import java.util.Iterator;\n import java.util.List;\n+\n import org.apache.commons.lang.ArrayUtils;\n-import org.apache.syncope.annotation.FormAttributeField;\n-import org.apache.syncope.client.SyncopeConstants;\n-import org.apache.syncope.client.report.ReportletConf;\n-import org.apache.syncope.client.search.NodeCond;\n+import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.annotation.FormAttributeField;\n+import org.apache.syncope.common.report.ReportletConf;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;\n import org.apache.syncope.console.rest.ReportRestClient;\n import org.apache.syncope.console.rest.SchemaRestClient;\n@@ -43,12 +45,12 @@\n import org.apache.syncope.console.wicket.markup.html.form.DateTimeFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.Component;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -67,7 +69,6 @@\n import org.springframework.beans.BeanWrapper;\n import org.springframework.beans.PropertyAccessorFactory;\n import org.springframework.util.ClassUtils;\n-import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n \n public class ReportletConfModalPage extends BaseModalPage {\n "},{"sha":"7713b5f273fe5ce106dadd978426149aab1a30e8","filename":"console/src/main/java/org/apache/syncope/console/pages/Reports.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FReports.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,8 +24,12 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.syncope.client.to.ReportTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.types.AuditElements.Category;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.common.types.AuditLoggerName;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n@@ -35,9 +39,6 @@\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.types.AuditElements.Category;\n-import org.apache.syncope.types.AuditElements.Result;\n-import org.apache.syncope.types.AuditLoggerName;\n import org.apache.wicket.Component;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;"},{"sha":"806a0ac6dd6bd36ac5f465b16e00b55dd3521ea8","filename":"console/src/main/java/org/apache/syncope/console/pages/ResourceModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.to.MappingItemTO;\n-import org.apache.syncope.client.to.ResourceTO;\n+import org.apache.syncope.common.to.MappingItemTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.pages.panels.ResourceConnConfPanel;\n import org.apache.syncope.console.pages.panels.ResourceDetailsPanel;\n import org.apache.syncope.console.pages.panels.ResourceMappingPanel;\n import org.apache.syncope.console.pages.panels.ResourceSecurityPanel;\n import org.apache.syncope.console.rest.ResourceRestClient;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;"},{"sha":"23ed58e2b648ccec346d48ce12dd3cc72c8b2957","filename":"console/src/main/java/org/apache/syncope/console/pages/Resources.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResources.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,6 +22,18 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+\n+import org.apache.syncope.common.to.ConnInstanceTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.commons.PreferenceManager;\n+import org.apache.syncope.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.console.rest.ConnectorRestClient;\n+import org.apache.syncope.console.rest.ResourceRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.LinkPanel;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -37,6 +49,7 @@\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.repeater.Item;\n@@ -46,18 +59,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.client.to.ConnInstanceTO;\n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.commons.PreferenceManager;\n-import org.apache.syncope.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.console.rest.ConnectorRestClient;\n-import org.apache.syncope.console.rest.ResourceRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.LinkPanel;\n-import org.apache.wicket.markup.html.basic.Label;\n \n /**\n  * Resources WebPage."},{"sha":"45aa42c8313b0df307a54fb22c91c75a9fb038fa","filename":"console/src/main/java/org/apache/syncope/console/pages/ResultStatusModalPage.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResultStatusModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,16 +24,17 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.client.to.ConnObjectTO;\n-import org.apache.syncope.client.to.PropagationTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.PropagationTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.PropagationTaskExecStatus;\n import org.apache.syncope.console.commons.StatusUtils;\n import org.apache.syncope.console.rest.ResourceRestClient;\n import org.apache.syncope.console.rest.UserRestClient;\n-import org.apache.syncope.types.PropagationTaskExecStatus;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.markup.html.AjaxLink;"},{"sha":"d11f519d4320a168bb26b7fd1ce753dc21a407eb","filename":"console/src/main/java/org/apache/syncope/console/pages/RoleModalPage.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,9 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.mod.RoleMod;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.util.AttributableOperations;\n+\n+import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.console.pages.panels.RolePanel;\n import org.apache.syncope.console.rest.RoleRestClient;\n import org.apache.wicket.PageReference;"},{"sha":"a8a1c41e1fc56af6289bdb99b0521b79f41f58e6","filename":"console/src/main/java/org/apache/syncope/console/pages/RoleSelectModalPage.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleSelectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleSelectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleSelectModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.console.pages;\n \n import java.lang.reflect.Constructor;\n+\n import javax.swing.tree.DefaultMutableTreeNode;\n-import org.apache.syncope.client.to.RoleTO;\n+\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.console.commons.RoleTreeBuilder;\n import org.apache.syncope.console.wicket.markup.html.tree.DefaultMutableTreeNodeExpansion;\n import org.apache.syncope.console.wicket.markup.html.tree.DefaultMutableTreeNodeExpansionModel;"},{"sha":"693bfd8818966eafc65f9a9f9b40067786e5585c","filename":"console/src/main/java/org/apache/syncope/console/pages/RoleTemplateModalPage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleTemplateModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleTemplateModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoleTemplateModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.SyncTaskTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.console.rest.TaskRestClient;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;"},{"sha":"3fe189aea7089622accb89d2c1df795ec3c5b55d","filename":"console/src/main/java/org/apache/syncope/console/pages/Roles.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FRoles.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.search.NodeCond;\n+import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.console.pages.panels.AbstractSearchResultPanel;\n import org.apache.syncope.console.pages.panels.RoleSearchPanel;\n import org.apache.syncope.console.pages.panels.RoleSearchResultPanel;"},{"sha":"8d10bdae2d212b140d7298311e276b3a135288c5","filename":"console/src/main/java/org/apache/syncope/console/pages/SchedTaskModalPage.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.console.pages;\n \n import java.util.List;\n-import org.apache.syncope.client.to.SchedTaskTO;\n+\n+import org.apache.syncope.common.to.SchedTaskTO;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;"},{"sha":"1882eccf718b8d93f197b2e712095bd05574cbee","filename":"console/src/main/java/org/apache/syncope/console/pages/Schema.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchema.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,11 +22,21 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.client.to.DerivedSchemaTO;\n-import org.apache.syncope.client.to.SchemaTO;\n-import org.apache.syncope.client.to.VirtualSchemaTO;\n-import org.apache.syncope.types.AttributableType;\n+\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.to.DerivedSchemaTO;\n+import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.to.VirtualSchemaTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.commons.PreferenceManager;\n+import org.apache.syncope.console.commons.SchemaModalPageFactory;\n+import org.apache.syncope.console.commons.SelectChoiceRenderer;\n+import org.apache.syncope.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.console.rest.SchemaRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink.ActionType;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -51,15 +61,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.commons.PreferenceManager;\n-import org.apache.syncope.console.commons.SchemaModalPageFactory;\n-import org.apache.syncope.console.commons.SelectChoiceRenderer;\n-import org.apache.syncope.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.console.rest.SchemaRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLink.ActionType;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n \n /**\n  * Schema WebPage."},{"sha":"5d33ce74588996b0c441fb6e9978f291ef0c0036","filename":"console/src/main/java/org/apache/syncope/console/pages/SchemaModalPage.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSchemaModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,16 +24,17 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+\n import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.client.to.SchemaTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.SchemaType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.SchemaType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;"},{"sha":"6fd17fac3d9abfe2d667b3a8eb7d5a81ffa8e5f6","filename":"console/src/main/java/org/apache/syncope/console/pages/StatusModalPage.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FStatusModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,8 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.UserTO;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.commons.StatusBean;\n import org.apache.syncope.console.pages.panels.StatusPanel;\n import org.apache.syncope.console.rest.UserRestClient;"},{"sha":"200e616606b176822f0265970555280d5842a7d4","filename":"console/src/main/java/org/apache/syncope/console/pages/SyncTaskModalPage.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FSyncTaskModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,8 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SyncTaskTO;\n+\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.to.SyncTaskTO;\n import org.apache.syncope.console.commons.SelectChoiceRenderer;\n import org.apache.syncope.console.rest.ResourceRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;"},{"sha":"9b6bfdb0d97d8065a1c1a2312555681f16d54e34","filename":"console/src/main/java/org/apache/syncope/console/pages/TaskModalPage.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,13 +22,14 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.client.to.NotificationTaskTO;\n-import org.apache.syncope.client.to.PropagationTaskTO;\n-import org.apache.syncope.client.to.SchedTaskTO;\n-import org.apache.syncope.client.to.SyncTaskTO;\n-import org.apache.syncope.client.to.TaskExecTO;\n-import org.apache.syncope.client.to.TaskTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.to.NotificationTaskTO;\n+import org.apache.syncope.common.to.PropagationTaskTO;\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.to.SyncTaskTO;\n+import org.apache.syncope.common.to.TaskExecTO;\n+import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.console.rest.TaskRestClient;\n import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;"},{"sha":"13e311dfc3db1404198ebd81cd97abf69315007e","filename":"console/src/main/java/org/apache/syncope/console/pages/Tasks.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,9 +23,10 @@\n import java.util.Comparator;\n import java.util.Iterator;\n import java.util.List;\n-import org.apache.syncope.client.to.SchedTaskTO;\n-import org.apache.syncope.client.to.TaskExecTO;\n-import org.apache.syncope.client.to.TaskTO;\n+\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.to.TaskExecTO;\n+import org.apache.syncope.common.to.TaskTO;\n import org.apache.syncope.console.commons.SortableDataProviderComparator;\n import org.apache.syncope.console.pages.panels.NotificationTasks;\n import org.apache.syncope.console.pages.panels.PropagationTasks;"},{"sha":"3b1bf0ec13d33f21076e2155e4ac71faa4552a16","filename":"console/src/main/java/org/apache/syncope/console/pages/Todo.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FTodo.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,6 +22,21 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+\n+import org.apache.syncope.common.to.UserRequestTO;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n+import org.apache.syncope.common.types.UserRequestType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.SyncopeSession;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.commons.PreferenceManager;\n+import org.apache.syncope.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.console.rest.ApprovalRestClient;\n+import org.apache.syncope.console.rest.UserRequestRestClient;\n+import org.apache.syncope.console.rest.UserRestClient;\n+import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -45,20 +60,6 @@\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.client.to.UserRequestTO;\n-import org.apache.syncope.client.to.WorkflowFormTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.SyncopeSession;\n-import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.commons.PreferenceManager;\n-import org.apache.syncope.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.console.rest.ApprovalRestClient;\n-import org.apache.syncope.console.rest.UserRequestRestClient;\n-import org.apache.syncope.console.rest.UserRestClient;\n-import org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.types.UserRequestType;\n \n public class Todo extends BasePage {\n "},{"sha":"c83e1f66c7349a608af103aeb15f8c12855f29e3","filename":"console/src/main/java/org/apache/syncope/console/pages/UserModalPage.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.console.commons.CloseOnESCBehavior;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.pages.panels.AttributesPanel;\n import org.apache.syncope.console.pages.panels.DerivedAttributesPanel;\n import org.apache.syncope.console.pages.panels.MembershipsPanel;"},{"sha":"bad6da88da0e89ad1b8de137eb08934bdd263856","filename":"console/src/main/java/org/apache/syncope/console/pages/UserOwnerSelectModalPage.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.search.NodeCond;\n+import org.apache.syncope.common.search.NodeCond;\n import org.apache.syncope.console.pages.panels.AbstractSearchResultPanel;\n import org.apache.syncope.console.pages.panels.SelectOnlyUserSearchResultPanel;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;"},{"sha":"86ef4fedd6a53581406facabd24a2f9316320850","filename":"console/src/main/java/org/apache/syncope/console/pages/UserRequestModalPage.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserRequestModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,10 +18,10 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.mod.UserMod;\n-import org.apache.syncope.client.to.UserRequestTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.util.AttributableOperations;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.to.UserRequestTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.console.rest.UserRequestRestClient;\n import org.apache.syncope.console.rest.UserRestClient;\n import org.apache.wicket.PageReference;"},{"sha":"942f9d0eeab4b43b6612e2140c39e10078c809f3","filename":"console/src/main/java/org/apache/syncope/console/pages/UserTemplateModalPage.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUserTemplateModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,14 +18,14 @@\n  */\n package org.apache.syncope.console.pages;\n \n+import org.apache.syncope.common.to.SyncTaskTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.console.rest.TaskRestClient;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.client.to.SyncTaskTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.console.rest.TaskRestClient;\n \n /**\n  * Modal window with User form."},{"sha":"5dfb2f370269165e31fff591e46594d8891e1762","filename":"console/src/main/java/org/apache/syncope/console/pages/Users.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.pages.panels.AbstractSearchResultPanel;\n import org.apache.syncope.console.pages.panels.AbstractSearchResultPanel.EventDataWrapper;\n import org.apache.syncope.console.pages.panels.UserSearchPanel;"},{"sha":"2252a93a4462e6026bbf975ee3fe67592e85fec3","filename":"console/src/main/java/org/apache/syncope/console/pages/VirtualSchemaModalPage.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FVirtualSchemaModalPage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,10 +18,11 @@\n  */\n package org.apache.syncope.console.pages;\n \n-import org.apache.syncope.client.AbstractBaseBean;\n-import org.apache.syncope.client.to.VirtualSchemaTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.types.AttributableType;\n+import org.apache.syncope.common.AbstractBaseBean;\n+import org.apache.syncope.common.to.VirtualSchemaTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n@@ -31,7 +32,6 @@\n import org.apache.wicket.model.CompoundPropertyModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n \n /**\n  * Modal window with Schema form."},{"sha":"d05499c7857439e2ef708b8992d0b3ed3ad2c008","filename":"console/src/main/java/org/apache/syncope/console/pages/WelcomePage.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FWelcomePage.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.console.pages;\n \n+import org.apache.syncope.console.SyncopeApplication;\n+import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.console.SyncopeApplication;\n-import org.apache.syncope.console.commons.XMLRolesReader;\n \n /**\n  * Welcome page to display after successful login."},{"sha":"912c07c6a4f62ab04453cdb58a12d44a2c7e3bbf","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractSearchPanel.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,22 +23,23 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+\n import org.apache.commons.lang.ArrayUtils;\n-import org.apache.syncope.client.search.AttributableCond;\n-import org.apache.syncope.client.search.AttributeCond;\n-import org.apache.syncope.client.search.EntitlementCond;\n-import org.apache.syncope.client.search.MembershipCond;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.search.ResourceCond;\n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.search.AttributableCond;\n+import org.apache.syncope.common.search.AttributeCond;\n+import org.apache.syncope.common.search.EntitlementCond;\n+import org.apache.syncope.common.search.MembershipCond;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.search.ResourceCond;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.commons.SearchCondWrapper;\n import org.apache.syncope.console.commons.SearchCondWrapper.OperationType;\n import org.apache.syncope.console.rest.AuthRestClient;\n import org.apache.syncope.console.rest.ResourceRestClient;\n import org.apache.syncope.console.rest.SchemaRestClient;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.feedback.FeedbackMessage;\n import org.apache.wicket.feedback.IFeedbackMessageFilter;\n import org.apache.wicket.markup.html.WebMarkupContainer;"},{"sha":"39033b9b0ef6e950a1710eceb5e881c4645495d3","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AbstractSearchResultPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAbstractSearchResultPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,8 +19,9 @@\n package org.apache.syncope.console.pages.panels;\n \n import java.util.List;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.console.commons.AttributableDataProvider;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;"},{"sha":"a9abacde866482f9013500133ffd5a3dad6a06f8","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AccountInformationPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAccountInformationPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAccountInformationPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAccountInformationPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,12 +18,12 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.console.SyncopeSession;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.Model;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.console.SyncopeSession;\n \n public class AccountInformationPanel extends Panel {\n "},{"sha":"53bd7a0bff76e923329b99003d99444edcdae121","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -25,12 +25,14 @@\n import java.util.Map;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.client.SyncopeConstants;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.SchemaTO;\n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.console.pages.Schema;\n import org.apache.syncope.console.rest.SchemaRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n@@ -40,8 +42,6 @@\n import org.apache.syncope.console.wicket.markup.html.form.DateTimeFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.SchemaType;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;"},{"sha":"03ecf5b12c2d1d2c942edf5a8fff3da6eee9cd10","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/DerivedAttributesPanel.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FDerivedAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FDerivedAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FDerivedAttributesPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,13 +19,14 @@\n package org.apache.syncope.console.pages.panels;\n \n import java.util.List;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.rest.SchemaRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDecoratedCheckbox;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.attributes.AjaxCallListener;"},{"sha":"25ba0ba22330a2bc27f9bae212069196a710f3b9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/JQueryTabbedPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FJQueryTabbedPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FJQueryTabbedPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FJQueryTabbedPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.pages.panels;\n \n import java.util.List;\n+\n import org.apache.wicket.extensions.ajax.markup.html.tabs.AjaxTabbedPanel;\n import org.apache.wicket.extensions.markup.html.tabs.ITab;\n "},{"sha":"1af41208220b46d2cf31aa1181fdfcb7cea3a822","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/MembershipsPanel.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FMembershipsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FMembershipsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FMembershipsPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.console.pages.panels;\n \n import java.util.List;\n+\n import javax.swing.tree.DefaultMutableTreeNode;\n-import org.apache.syncope.client.to.MembershipTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n+\n+import org.apache.syncope.common.to.MembershipTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.commons.RoleTreeBuilder;\n import org.apache.syncope.console.pages.MembershipModalPage;\n import org.apache.syncope.console.pages.UserModalPage;"},{"sha":"fdd45756b8c60153fa26142d7ac734c0c356485c","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/NotificationTasks.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FNotificationTasks.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,9 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.to.NotificationTaskTO;\n-import org.apache.syncope.client.to.TaskTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.to.NotificationTaskTO;\n+import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.XMLRolesReader;"},{"sha":"6547d285ded03f5769c894237379d2385957a82b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PoliciesPanel.java","status":"modified","additions":15,"deletions":14,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,6 +22,21 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+\n+import org.apache.syncope.common.to.AccountPolicyTO;\n+import org.apache.syncope.common.to.PasswordPolicyTO;\n+import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.SyncPolicyTO;\n+import org.apache.syncope.common.types.PolicyType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.commons.Constants;\n+import org.apache.syncope.console.commons.PreferenceManager;\n+import org.apache.syncope.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.console.commons.XMLRolesReader;\n+import org.apache.syncope.console.pages.PolicyModalPage;\n+import org.apache.syncope.console.rest.PolicyRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n@@ -49,20 +64,6 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.syncope.client.to.AccountPolicyTO;\n-import org.apache.syncope.client.to.PasswordPolicyTO;\n-import org.apache.syncope.client.to.PolicyTO;\n-import org.apache.syncope.client.to.SyncPolicyTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.commons.Constants;\n-import org.apache.syncope.console.commons.PreferenceManager;\n-import org.apache.syncope.console.commons.SortableDataProviderComparator;\n-import org.apache.syncope.console.commons.XMLRolesReader;\n-import org.apache.syncope.console.pages.PolicyModalPage;\n-import org.apache.syncope.console.rest.PolicyRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLink;\n-import org.apache.syncope.console.wicket.markup.html.form.ActionLinksPanel;\n-import org.apache.syncope.types.PolicyType;\n \n public class PoliciesPanel extends Panel {\n "},{"sha":"a7df3a274c3a6fa11ef2b3c9a9872210a463bf6c","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PolicyBeanPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPolicyBeanPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -25,7 +25,11 @@\n import java.util.Arrays;\n import java.util.Collection;\n import java.util.List;\n-import org.apache.syncope.annotation.SchemaList;\n+\n+import org.apache.syncope.common.annotation.SchemaList;\n+import org.apache.syncope.common.types.AbstractPolicySpec;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.ConflictResolutionAction;\n import org.apache.syncope.console.rest.SchemaRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AbstractFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n@@ -34,9 +38,6 @@\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n-import org.apache.syncope.types.AbstractPolicySpec;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.ConflictResolutionAction;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.basic.Label;"},{"sha":"a8c95c6247f0a0866d4d9ef10f92d6dd46f730c3","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/PropagationTasks.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPropagationTasks.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,9 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.to.PropagationTaskTO;\n-import org.apache.syncope.client.to.TaskTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.to.PropagationTaskTO;\n+import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.XMLRolesReader;"},{"sha":"12986f3268585342f8523ce94db87c0d4de571f0","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceConnConfPanel.java","status":"modified","additions":14,"deletions":13,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceConnConfPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,6 +22,20 @@\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n+\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.console.pages.BaseModalPage;\n+import org.apache.syncope.console.pages.ResourceModalPage.ResourceEvent;\n+import org.apache.syncope.console.pages.panels.ResourceDetailsPanel.DetailsModEvent;\n+import org.apache.syncope.console.rest.ConnectorRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel.MultiValueSelectorEvent;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;\n@@ -41,19 +55,6 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.util.ClassUtils;\n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.console.pages.BaseModalPage;\n-import org.apache.syncope.console.pages.ResourceModalPage.ResourceEvent;\n-import org.apache.syncope.console.pages.panels.ResourceDetailsPanel.DetailsModEvent;\n-import org.apache.syncope.console.rest.ConnectorRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel.MultiValueSelectorEvent;\n-import org.apache.syncope.types.ConnConfProperty;\n \n public class ResourceConnConfPanel extends Panel {\n "},{"sha":"9ea188570e5297d744ee8444215cfab2ca0d344b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceDetailsPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,16 +20,17 @@\n \n import java.util.Arrays;\n import java.util.List;\n-import org.apache.syncope.client.to.ConnInstanceTO;\n-import org.apache.syncope.client.to.ResourceTO;\n+\n+import org.apache.syncope.common.to.ConnInstanceTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.types.PropagationMode;\n+import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.console.pages.ResourceModalPage.ResourceEvent;\n import org.apache.syncope.console.rest.ConnectorRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxNumberFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.types.PropagationMode;\n-import org.apache.syncope.types.TraceLevel;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.event.Broadcast;"},{"sha":"427ca971584895acd222c9c45f8a663d38f020c6","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceMappingPanel.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceMappingPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,10 +24,14 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.apache.syncope.client.to.ConnInstanceTO;\n-import org.apache.syncope.client.to.MappingItemTO;\n-import org.apache.syncope.client.to.MappingTO;\n-import org.apache.syncope.client.to.ResourceTO;\n+\n+import org.apache.syncope.common.to.ConnInstanceTO;\n+import org.apache.syncope.common.to.MappingItemTO;\n+import org.apache.syncope.common.to.MappingTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.console.pages.panels.ResourceConnConfPanel.ConnConfModEvent;\n import org.apache.syncope.console.rest.ConnectorRestClient;\n import org.apache.syncope.console.rest.SchemaRestClient;\n@@ -36,9 +40,6 @@\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.IntMappingType;\n import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.attributes.AjaxCallListener;"},{"sha":"4d7d20db65bbcc7ea69fd53dfe67d9560a7904d4","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceSecurityPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,11 +21,12 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n-import org.apache.syncope.client.to.PolicyTO;\n-import org.apache.syncope.client.to.ResourceTO;\n+\n+import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.console.rest.PolicyRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.types.PolicyType;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.DropDownChoice;"},{"sha":"c2ff3e623c5157e10b3c74a81b6c966eb6dc931d","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourcesPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourcesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourcesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourcesPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,16 +20,17 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.console.rest.ResourceRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.console.rest.ResourceRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n \n public class ResourcesPanel extends Panel {\n "},{"sha":"d442c0733e25e0f8fcd40cd59497fae619abb2c9","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleDetailsPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleDetailsPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.pages.RoleSelectModalPage;\n import org.apache.syncope.console.pages.UserOwnerSelectModalPage;\n import org.apache.syncope.console.rest.RoleRestClient;\n import org.apache.syncope.console.rest.UserRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.Page;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.IEvent;"},{"sha":"a8bcb176a64c6545d6c7f2383788a753bf460a4d","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RolePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRolePanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import org.apache.syncope.client.to.RoleTO;\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.console.commons.SelectChoiceRenderer;\n import org.apache.syncope.console.pages.RoleModalPage;\n import org.apache.syncope.console.rest.AuthRestClient;"},{"sha":"ee37daa85d178c84d578b4e9cd1ff3549ddf650e","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,9 +21,10 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.client.search.NodeCond;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.commons.SearchCondWrapper;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n public class RoleSearchPanel extends AbstractSearchPanel {"},{"sha":"fe91eccda34f7e3e580b2932af21aa8bb3328f21","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSearchResultPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSearchResultPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,10 +20,11 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.pages.ResultStatusModalPage;\n import org.apache.syncope.console.pages.RoleModalPage;\n import org.apache.syncope.console.pages.StatusModalPage;"},{"sha":"8dc01f0941eaaacd10ca73561d4bf5e34cf0a74f","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSecurityPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,12 +21,13 @@\n import java.util.ArrayList;\n import java.util.HashMap;\n import java.util.Map;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.PolicyTO;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.console.rest.PolicyRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.apache.syncope.types.PolicyType;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.WebMarkupContainer;"},{"sha":"b0752e9278ffcd6e1865044ccd53bd04e352d83a","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleSummaryPanel.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSummaryPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.rest.RoleRestClient;\n import org.apache.syncope.console.wicket.markup.html.tree.TreeActionLinkPanel;\n import org.apache.wicket.PageReference;"},{"sha":"73cf53227616529a3b7b28a4493f56d3d04c2588","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/RoleTabPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleTabPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import org.apache.syncope.client.search.MembershipCond;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.RoleTO;\n+import org.apache.syncope.common.search.MembershipCond;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.console.pages.RoleModalPage;\n import org.apache.syncope.console.rest.UserRestClient;\n import org.apache.syncope.console.wicket.markup.html.tree.TreeActionLinkPanel;"},{"sha":"3d3882f4c47608311eb1873ae6fd8b7cebf86743","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SchedTasks.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSchedTasks.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,9 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.to.SchedTaskTO;\n-import org.apache.syncope.client.to.TaskTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.XMLRolesReader;"},{"sha":"1d29021c7e764dce90881d16e874db84103e624c","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SearchView.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSearchView.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,7 +21,8 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n-import org.apache.syncope.client.search.AttributeCond;\n+\n+import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.console.commons.SearchCondWrapper;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;"},{"sha":"82c8e1c5b305ab9326dc1c7202fdb7add11e8a08","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SelectOnlyUserSearchResultPanel.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSelectOnlyUserSearchResultPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,8 +20,9 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.syncope.console.pages.DisplayAttributesModalPage;\n import org.apache.syncope.console.rest.UserRestClient;\n import org.apache.syncope.console.wicket.markup.html.form.ActionLink;"},{"sha":"259294764c9fd16b72597ee89b9071095e02eb2b","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/StatusPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FStatusPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,9 +22,9 @@\n import java.util.List;\n \n import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.commons.StatusBean;\n import org.apache.syncope.console.commons.StatusUtils;\n import org.apache.syncope.console.commons.StatusUtils.Status;"},{"sha":"d13c2aab192ad71435695199cfde9d9de13b47f1","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/SyncTasks.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FSyncTasks.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,9 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.to.SyncTaskTO;\n-import org.apache.syncope.client.to.TaskTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.to.SyncTaskTO;\n+import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.commons.PreferenceManager;\n import org.apache.syncope.console.commons.XMLRolesReader;"},{"sha":"49fb68aefa405453fcc3dc799b205a4796906695","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserDetailsPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserDetailsPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,7 +18,7 @@\n  */\n package org.apache.syncope.console.pages.panels;\n \n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.console.wicket.markup.html.form.FieldPanel;"},{"sha":"3943909b3dd111d94b41321f5ad025b24357161f","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchPanel.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,11 +20,12 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.RoleTO;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.console.commons.SearchCondWrapper;\n import org.apache.syncope.console.rest.RoleRestClient;\n-import org.apache.syncope.types.AttributableType;\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n "},{"sha":"5a08d8270be7d178b8407d6a805c7bed7dc0888e","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/UserSearchResultPanel.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FUserSearchResultPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,10 +23,11 @@\n import java.util.Arrays;\n import java.util.Date;\n import java.util.List;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.Constants;\n import org.apache.syncope.console.pages.DisplayAttributesModalPage;\n import org.apache.syncope.console.pages.EditUserModalPage;"},{"sha":"211316f9d2a017fb36f630f49aae911256e2aeb8","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/VirtualAttributesPanel.java","status":"modified","additions":13,"deletions":12,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,7 +19,20 @@\n package org.apache.syncope.console.pages.panels;\n \n import java.util.List;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.console.rest.SchemaRestClient;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxDecoratedCheckbox;\n+import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n+import org.apache.wicket.Component;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxCallListener;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n@@ -36,18 +49,6 @@\n import org.apache.wicket.model.PropertyModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.console.rest.SchemaRestClient;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxDecoratedCheckbox;\n-import org.apache.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.apache.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.wicket.Component;\n-import org.apache.wicket.ajax.attributes.AjaxCallListener;\n-import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n \n public class VirtualAttributesPanel extends Panel {\n "},{"sha":"20731733e9385d1f60c33a61dc99d9f7023615f2","filename":"console/src/main/java/org/apache/syncope/console/rest/AbstractAttributableRestClient.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAbstractAttributableRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,9 +19,10 @@\n package org.apache.syncope.console.rest;\n \n import java.util.List;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.ConnObjectTO;\n+\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.ConnObjectTO;\n \n public abstract class AbstractAttributableRestClient extends BaseRestClient {\n "},{"sha":"40838d2950b4469f9eef6b8bacb6070a34fb8321","filename":"console/src/main/java/org/apache/syncope/console/rest/ApprovalRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FApprovalRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,8 +20,8 @@\n \n import java.util.List;\n \n-import org.apache.syncope.client.to.WorkflowFormTO;\n-import org.apache.syncope.services.UserService;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.to.WorkflowFormTO;\n import org.springframework.stereotype.Component;\n \n /**"},{"sha":"f300157be3b497dff53c748a001551581138bdf7","filename":"console/src/main/java/org/apache/syncope/console/rest/AuthRestClient.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,11 +20,10 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Set;\n \n-import org.apache.syncope.client.to.EntitlementTO;\n-import org.apache.syncope.client.util.CollectionWrapper;\n-import org.apache.syncope.services.EntitlementService;\n+import org.apache.syncope.common.services.EntitlementService;\n+import org.apache.syncope.common.to.EntitlementTO;\n+import org.apache.syncope.common.util.CollectionWrapper;\n import org.springframework.stereotype.Component;\n \n /**"},{"sha":"3cd14d317378be01838704779a8c36ab2c939ad2","filename":"console/src/main/java/org/apache/syncope/console/rest/BaseRestClient.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FBaseRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.rest;\n \n import java.io.Serializable;\n+\n import org.apache.syncope.console.SyncopeSession;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"0ba57109f6a7b05b73ef0d6b8f0b45be62660611","filename":"console/src/main/java/org/apache/syncope/console/rest/ConfigurationRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,8 +20,8 @@\n \n import java.util.List;\n \n-import org.apache.syncope.client.to.ConfigurationTO;\n-import org.apache.syncope.services.ConfigurationService;\n+import org.apache.syncope.common.services.ConfigurationService;\n+import org.apache.syncope.common.to.ConfigurationTO;\n import org.springframework.stereotype.Component;\n \n @Component"},{"sha":"603e2fd6d2cb2974b5918de3c69aec4686060e5d","filename":"console/src/main/java/org/apache/syncope/console/rest/ConnectorRestClient.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FConnectorRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,15 +24,15 @@\n import java.util.List;\n import java.util.Set;\n \n-import org.apache.syncope.client.to.ConnBundleTO;\n-import org.apache.syncope.client.to.ConnInstanceTO;\n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.to.SchemaTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.services.ConnectorService;\n+import org.apache.syncope.common.services.ResourceService;\n+import org.apache.syncope.common.to.ConnBundleTO;\n+import org.apache.syncope.common.to.ConnInstanceTO;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.SyncopeSession;\n-import org.apache.syncope.services.ConnectorService;\n-import org.apache.syncope.services.ResourceService;\n-import org.apache.syncope.types.ConnConfProperty;\n import org.springframework.beans.BeanUtils;\n import org.springframework.stereotype.Component;\n "},{"sha":"a50019c2d5455b3f43528c437183c2056ed47067","filename":"console/src/main/java/org/apache/syncope/console/rest/ExecutionRestClient.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FExecutionRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.console.rest;\n \n import java.util.List;\n-import org.apache.syncope.client.to.AbstractExecTO;\n+\n+import org.apache.syncope.common.to.AbstractExecTO;\n \n public interface ExecutionRestClient {\n "},{"sha":"d8777480c51b13af9a77dff572f4a85f2d932e59","filename":"console/src/main/java/org/apache/syncope/console/rest/LoggerRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FLoggerRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,12 +24,12 @@\n import java.util.Map;\n import java.util.Set;\n \n-import org.apache.syncope.client.to.LoggerTO;\n-import org.apache.syncope.services.LoggerService;\n-import org.apache.syncope.types.AuditElements;\n-import org.apache.syncope.types.AuditElements.Category;\n-import org.apache.syncope.types.AuditLoggerName;\n-import org.apache.syncope.types.SyncopeLoggerLevel;\n+import org.apache.syncope.common.services.LoggerService;\n+import org.apache.syncope.common.to.LoggerTO;\n+import org.apache.syncope.common.types.AuditElements;\n+import org.apache.syncope.common.types.AuditElements.Category;\n+import org.apache.syncope.common.types.AuditLoggerName;\n+import org.apache.syncope.common.types.SyncopeLoggerLevel;\n import org.springframework.stereotype.Component;\n \n @Component"},{"sha":"67fe7adeed6cf92c53720ce54a63bdf4eeed9edf","filename":"console/src/main/java/org/apache/syncope/console/rest/NotificationRestClient.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FNotificationRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,14 +20,14 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import org.apache.syncope.client.to.MailTemplateTO;\n-import org.apache.syncope.client.to.NotificationTO;\n-import org.apache.syncope.client.to.ValidatorTO;\n-import org.apache.syncope.client.util.CollectionWrapper;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.services.ConfigurationService;\n-import org.apache.syncope.services.NotificationService;\n-import org.apache.syncope.services.WorkflowService;\n+\n+import org.apache.syncope.common.services.ConfigurationService;\n+import org.apache.syncope.common.services.NotificationService;\n+import org.apache.syncope.common.services.WorkflowService;\n+import org.apache.syncope.common.to.MailTemplateTO;\n+import org.apache.syncope.common.to.NotificationTO;\n+import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n @Component"},{"sha":"81bc2a3dd591104784178fd341089be96bceffea","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,12 +21,12 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.syncope.client.to.AccountPolicyTO;\n-import org.apache.syncope.client.to.PasswordPolicyTO;\n-import org.apache.syncope.client.to.PolicyTO;\n-import org.apache.syncope.client.to.SyncPolicyTO;\n-import org.apache.syncope.services.PolicyService;\n-import org.apache.syncope.types.PolicyType;\n+import org.apache.syncope.common.services.PolicyService;\n+import org.apache.syncope.common.to.AccountPolicyTO;\n+import org.apache.syncope.common.to.PasswordPolicyTO;\n+import org.apache.syncope.common.to.PolicyTO;\n+import org.apache.syncope.common.to.SyncPolicyTO;\n+import org.apache.syncope.common.types.PolicyType;\n import org.springframework.stereotype.Component;\n \n /**"},{"sha":"2a6b3fba9f71382e0da953e668a34c113a062212","filename":"console/src/main/java/org/apache/syncope/console/rest/ReportRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FReportRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,10 +20,10 @@\n \n import java.util.List;\n \n-import org.apache.syncope.client.to.ReportExecTO;\n-import org.apache.syncope.client.to.ReportTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.services.ReportService;\n+import org.apache.syncope.common.services.ReportService;\n+import org.apache.syncope.common.to.ReportExecTO;\n+import org.apache.syncope.common.to.ReportTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n @Component"},{"sha":"0b26ade6b23593c694365bc0513df321c9f5104a","filename":"console/src/main/java/org/apache/syncope/console/rest/ResourceRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FResourceRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,9 +21,9 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.syncope.client.to.ResourceTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.services.ResourceService;\n+import org.apache.syncope.common.services.ResourceService;\n+import org.apache.syncope.common.to.ResourceTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n /**"},{"sha":"f72b8a32d2ac694c25b6b567e3b23bb105713ff8","filename":"console/src/main/java/org/apache/syncope/console/rest/RoleRestClient.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,14 +20,14 @@\n \n import java.util.List;\n \n-import org.apache.syncope.client.mod.RoleMod;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.ConnObjectTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.services.ResourceService;\n-import org.apache.syncope.services.RoleService;\n-import org.apache.syncope.types.AttributableType;\n+import org.apache.syncope.common.mod.RoleMod;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.ResourceService;\n+import org.apache.syncope.common.services.RoleService;\n+import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n /**"},{"sha":"0986734d5b6aba9ba3a59f691303ebfa0b6e5e8c","filename":"console/src/main/java/org/apache/syncope/console/rest/SchemaRestClient.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FSchemaRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,16 +21,16 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.syncope.client.to.DerivedSchemaTO;\n-import org.apache.syncope.client.to.SchemaTO;\n-import org.apache.syncope.client.to.ValidatorTO;\n-import org.apache.syncope.client.to.VirtualSchemaTO;\n-import org.apache.syncope.client.util.CollectionWrapper;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.services.ConfigurationService;\n-import org.apache.syncope.services.SchemaService;\n-import org.apache.syncope.services.SchemaService.SchemaType;\n-import org.apache.syncope.types.AttributableType;\n+import org.apache.syncope.common.services.ConfigurationService;\n+import org.apache.syncope.common.services.SchemaService;\n+import org.apache.syncope.common.services.SchemaService.SchemaType;\n+import org.apache.syncope.common.to.DerivedSchemaTO;\n+import org.apache.syncope.common.to.SchemaTO;\n+import org.apache.syncope.common.to.ValidatorTO;\n+import org.apache.syncope.common.to.VirtualSchemaTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.util.CollectionWrapper;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n /**"},{"sha":"ebc2c5ba3d6743a588d75fa749e690cb3419dcee","filename":"console/src/main/java/org/apache/syncope/console/rest/TaskRestClient.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FTaskRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,15 +22,15 @@\n import java.util.Collections;\n import java.util.List;\n \n-import org.apache.syncope.client.to.NotificationTaskTO;\n-import org.apache.syncope.client.to.PropagationTaskTO;\n-import org.apache.syncope.client.to.SchedTaskTO;\n-import org.apache.syncope.client.to.SyncTaskTO;\n-import org.apache.syncope.client.to.TaskExecTO;\n-import org.apache.syncope.client.to.TaskTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.services.TaskService;\n-import org.apache.syncope.types.TaskType;\n+import org.apache.syncope.common.services.TaskService;\n+import org.apache.syncope.common.to.NotificationTaskTO;\n+import org.apache.syncope.common.to.PropagationTaskTO;\n+import org.apache.syncope.common.to.SchedTaskTO;\n+import org.apache.syncope.common.to.SyncTaskTO;\n+import org.apache.syncope.common.to.TaskExecTO;\n+import org.apache.syncope.common.to.TaskTO;\n+import org.apache.syncope.common.types.TaskType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n /**"},{"sha":"c43297fb4d63b7f0f31d1da1cda55169db5bf80e","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRequestRestClient.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRequestRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,10 +20,10 @@\n \n import java.util.List;\n \n-import org.apache.syncope.client.mod.UserMod;\n-import org.apache.syncope.client.to.UserRequestTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.services.UserRequestService;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.services.UserRequestService;\n+import org.apache.syncope.common.to.UserRequestTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.springframework.stereotype.Component;\n \n @Component"},{"sha":"6cdc3605b9c8b30257641b9647040d20e2f74fab","filename":"console/src/main/java/org/apache/syncope/console/rest/UserRestClient.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FUserRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,17 +20,17 @@\n \n import java.util.List;\n \n-import org.apache.syncope.client.mod.StatusMod;\n-import org.apache.syncope.client.mod.StatusMod.Status;\n-import org.apache.syncope.client.mod.UserMod;\n-import org.apache.syncope.client.search.NodeCond;\n-import org.apache.syncope.client.to.ConnObjectTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.common.mod.StatusMod;\n+import org.apache.syncope.common.mod.StatusMod.Status;\n+import org.apache.syncope.common.mod.UserMod;\n+import org.apache.syncope.common.search.NodeCond;\n+import org.apache.syncope.common.services.ResourceService;\n+import org.apache.syncope.common.services.UserService;\n+import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.console.commons.StatusBean;\n-import org.apache.syncope.services.ResourceService;\n-import org.apache.syncope.services.UserService;\n-import org.apache.syncope.types.AttributableType;\n import org.springframework.stereotype.Component;\n \n /**"},{"sha":"556902a0c0246754f26928b3c5c4d86fe5569f07","filename":"console/src/main/java/org/apache/syncope/console/rest/WorkflowRestClient.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.console.rest;\n \n-import org.apache.syncope.client.to.WorkflowDefinitionTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.services.WorkflowService;\n+import org.apache.syncope.common.services.WorkflowService;\n+import org.apache.syncope.common.to.WorkflowDefinitionTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n import org.springframework.stereotype.Component;\n \n @Component"},{"sha":"0b61cf1db6547c5de81d84cf158a86ab55d8f632","filename":"console/src/main/java/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/AttrColumn.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n \n import java.util.List;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n+\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.markup.html.basic.Label;"},{"sha":"6bb37a25f59196d6e08aa21c43036e6a9dadd44b","filename":"console/src/main/java/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/DatePropertyColumn.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n \n import java.util.Date;\n+\n import org.apache.syncope.console.SyncopeSession;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;"},{"sha":"fb30308b9d765a62105263e0b8cee6aacd965e33","filename":"console/src/main/java/org/apache/syncope/console/wicket/extensions/markup/html/repeater/data/table/TokenColumn.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,8 +18,8 @@\n  */\n package org.apache.syncope.console.wicket.extensions.markup.html.repeater.data.table;\n \n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.UserTO;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.UserTO;\n import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n import org.apache.wicket.markup.html.basic.Label;"},{"sha":"cc08ce7eabda2491a9bf4f47fedac0381621b9a7","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AbstractFieldPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.wicket.markup.html.form;\n \n import java.io.Serializable;\n+\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.slf4j.Logger;"},{"sha":"adae06ed4f21c6ae1b5213820ebbf7de84d544bd","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/ActionLink.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.wicket.markup.html.form;\n \n import java.io.Serializable;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n \n public abstract class ActionLink implements Serializable {"},{"sha":"f861415326bd53bde5919e448a7897ffc351236f","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxCheckBoxPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.List;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.form.CheckBox;"},{"sha":"b8ca383631f6776ce0b59f643eb3a515b8cc0094","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,6 +20,7 @@\n \n import java.util.Collections;\n import java.util.List;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.form.ChoiceRenderer;"},{"sha":"c619ae9f68bc20c7b09c3193fd0eb8f7503f2638","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxPalettePanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,11 +20,12 @@\n \n import java.io.Serializable;\n import java.util.List;\n+\n+import org.apache.syncope.console.commons.SelectChoiceRenderer;\n import org.apache.wicket.extensions.markup.html.form.palette.Palette;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.util.ListModel;\n-import org.apache.syncope.console.commons.SelectChoiceRenderer;\n \n public class AjaxPalettePanel<T> extends AbstractFieldPanel {\n "},{"sha":"04d7351ba9f27a86d3691b35365e1e9a550e4952","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/AjaxTextFieldPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,6 +23,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.regex.Pattern;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;"},{"sha":"6ca3aecf93b7d3e08ff455b6ec5454bc8824ed1c","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/CheckBoxMultipleChoiceFieldPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FCheckBoxMultipleChoiceFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FCheckBoxMultipleChoiceFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FCheckBoxMultipleChoiceFieldPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,6 +21,7 @@\n import java.io.Serializable;\n import java.util.Collection;\n import java.util.List;\n+\n import org.apache.wicket.markup.html.form.CheckBoxMultipleChoice;\n import org.apache.wicket.model.IModel;\n "},{"sha":"b1fd7405c6fd8057eb05cee84e15c41a7adf7333","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateFieldPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,7 +24,8 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Locale;\n-import org.apache.syncope.client.SyncopeConstants;\n+\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;"},{"sha":"fdf4c118d17c8a50792a8767eb8d25b4030f4a32","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateTextFieldPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.wicket.markup.html.form;\n \n import java.util.Date;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.datetime.markup.html.form.DateTextField;"},{"sha":"ddc1b326677b48d0c5b658f6d82e908ce8111d98","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/DateTimeFieldPanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,7 +22,8 @@\n import java.util.Calendar;\n import java.util.Date;\n import java.util.Locale;\n-import org.apache.syncope.client.SyncopeConstants;\n+\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;"},{"sha":"e0d83ba580046dd2ed7c4d7a85b4535f1bb5b28e","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/FieldPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.List;\n+\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.FormComponent;"},{"sha":"a540cbcbbc72ceecb4eb06e3e0b22ffdb3eab284","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/MultiValueSelectorPanel.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.List;\n+\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.ajax.markup.html.AjaxLink;"},{"sha":"c8af9a36ace39cb1c9d3a43e6297a4f37fc3890e","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/form/SelectableRecorder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,6 +23,7 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n+\n import org.apache.wicket.WicketRuntimeException;\n import org.apache.wicket.extensions.markup.html.form.palette.Palette;\n import org.apache.wicket.extensions.markup.html.form.palette.component.Recorder;"},{"sha":"338dff5839a1ae352ccf2faedd5e394b8fed3f32","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/tree/DefaultMutableTreeNodeExpansion.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansion.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansion.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansion.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,8 +23,10 @@\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.Set;\n+\n import javax.swing.tree.DefaultMutableTreeNode;\n-import org.apache.syncope.client.to.RoleTO;\n+\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.wicket.MetaDataKey;\n import org.apache.wicket.Session;\n "},{"sha":"61c8796cc997b792cc84b22014a13a11e0aadc9d","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/tree/DefaultMutableTreeNodeExpansionModel.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansionModel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansionModel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansionModel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.console.wicket.markup.html.tree;\n \n import java.util.Set;\n+\n import javax.swing.tree.DefaultMutableTreeNode;\n+\n import org.apache.wicket.model.AbstractReadOnlyModel;\n \n public class DefaultMutableTreeNodeExpansionModel"},{"sha":"db11cc6c4ad2eb2505bb650be990d1e4e596c922","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/tree/TreeActionLinkPanel.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeActionLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeActionLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeActionLinkPanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,6 +18,14 @@\n  */\n package org.apache.syncope.console.wicket.markup.html.tree;\n \n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.console.commons.XMLRolesReader;\n+import org.apache.syncope.console.pages.ResultStatusModalPage;\n+import org.apache.syncope.console.pages.RoleModalPage;\n+import org.apache.syncope.console.pages.Roles;\n+import org.apache.syncope.console.rest.RoleRestClient;\n+import org.apache.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.apache.wicket.Page;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n@@ -31,14 +39,6 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n-import org.apache.syncope.console.commons.XMLRolesReader;\n-import org.apache.syncope.console.pages.ResultStatusModalPage;\n-import org.apache.syncope.console.pages.RoleModalPage;\n-import org.apache.syncope.console.pages.Roles;\n-import org.apache.syncope.console.rest.RoleRestClient;\n-import org.apache.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n \n /**\n  * Panel for a node element form."},{"sha":"830e31a96dfbb7f194e8b935d1dee4f268cdb332","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/tree/TreeRolePanel.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRolePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRolePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRolePanel.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.console.wicket.markup.html.tree;\n \n import javax.swing.tree.DefaultMutableTreeNode;\n-import org.apache.syncope.client.to.RoleTO;\n+\n+import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.console.commons.RoleTreeBuilder;\n import org.apache.syncope.console.commons.XMLRolesReader;\n import org.apache.syncope.console.pages.Roles.TreeNodeClickUpdate;"},{"sha":"765a3e382858d0b6dc43c0af60c9b3b782160296","filename":"console/src/main/java/org/apache/syncope/console/wicket/markup/html/tree/TreeRoleProvider.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRoleProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRoleProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRoleProvider.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.console.wicket.markup.html.tree;\n \n import javax.swing.tree.DefaultMutableTreeNode;\n+\n import org.apache.syncope.console.commons.RoleTreeBuilder;\n import org.apache.wicket.extensions.markup.html.repeater.util.TreeModelProvider;\n import org.apache.wicket.model.IModel;"},{"sha":"47a72eb34035d1161fd0cc05a3dfd7cd18efe92f","filename":"core/pom.xml","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -54,7 +54,7 @@ under the License.\n \n     <dependency>\n       <groupId>org.apache.syncope</groupId>\n-      <artifactId>syncope-client</artifactId>\n+      <artifactId>syncope-common</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n \n@@ -296,6 +296,12 @@ under the License.\n     </dependency> \n \n     <!-- TEST -->\n+\t<dependency>\n+      <groupId>org.apache.syncope</groupId>\n+      <artifactId>syncope-client</artifactId>\n+      <version>${project.version}</version>\n+\t  <scope>test</scope>\n+    </dependency>\n     <dependency>\n       <groupId>org.apache.syncope</groupId>\n       <artifactId>syncope-build-tools</artifactId>\n@@ -598,8 +604,7 @@ under the License.\n                   org.apache.commons.jexl2*;version=\"[2.1,3)\",\n                   org.apache.commons.lang*;version=\"[2.6,3)\",\n                   org.apache.openjpa*;version=\"[2,3)\",\n-                  org.apache.syncope.client*;version=${project.version},\n-                  org.apache.syncope.types;version=${project.version},\n+                  org.apache.syncope.common*;version=${project.version},\n                   org.apache.velocity*;version=\"[1.7,2)\",\n                   org.aspectj.lang*;version=\"[1.7,2)\",\n                   org.codehaus.jackson*;version=\"[1.9,2)\","},{"sha":"6d572904ba90ac2160180f354fb8bcde026190f7","filename":"core/src/main/java/org/apache/syncope/core/audit/AuditManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FAuditManager.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,9 +18,9 @@\n  */\n package org.apache.syncope.core.audit;\n \n-import org.apache.syncope.types.AuditElements.Category;\n-import org.apache.syncope.types.AuditElements.Result;\n-import org.apache.syncope.types.AuditLoggerName;\n+import org.apache.syncope.common.types.AuditElements.Category;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.common.types.AuditLoggerName;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.security.core.context.SecurityContext;"},{"sha":"5374b3bd69f100855277940d84f8b411dc6464a7","filename":"core/src/main/java/org/apache/syncope/core/audit/JNDIFallbackConnectionSource.java","status":"modified","additions":8,"deletions":6,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Faudit%2FJNDIFallbackConnectionSource.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,20 +18,22 @@\n  */\n package org.apache.syncope.core.audit;\n \n-import ch.qos.logback.core.db.ConnectionSource;\n-import ch.qos.logback.core.db.ConnectionSourceBase;\n-import ch.qos.logback.core.db.DataSourceConnectionSource;\n-import ch.qos.logback.core.db.JNDIConnectionSource;\n-import ch.qos.logback.core.db.dialect.SQLDialectCode;\n-import ch.qos.logback.core.spi.ContextAwareBase;\n import java.sql.Connection;\n import java.sql.SQLException;\n+\n import javax.naming.Context;\n import javax.naming.InitialContext;\n import javax.naming.NamingException;\n import javax.rmi.PortableRemoteObject;\n import javax.sql.DataSource;\n \n+import ch.qos.logback.core.db.ConnectionSource;\n+import ch.qos.logback.core.db.ConnectionSourceBase;\n+import ch.qos.logback.core.db.DataSourceConnectionSource;\n+import ch.qos.logback.core.db.JNDIConnectionSource;\n+import ch.qos.logback.core.db.dialect.SQLDialectCode;\n+import ch.qos.logback.core.spi.ContextAwareBase;\n+\n /**\n  * The <id>FallbackConnectionSource</id> is an implementation of\n  * {@link ConnectionSource} that attempts at first to obtain a {@link javax.sql.DataSource} from a JNDI provider and, if"},{"sha":"9928a57e8aeb755ae72659b796d400155ae8521f","filename":"core/src/main/java/org/apache/syncope/core/connid/ConnObjectUtil.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FConnObjectUtil.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -26,16 +26,20 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.client.mod.AbstractAttributableMod;\n-import org.apache.syncope.client.to.AbstractAttributableTO;\n-import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.client.to.ConnObjectTO;\n-import org.apache.syncope.client.to.MembershipTO;\n-import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.UserTO;\n-import org.apache.syncope.client.util.AttributableOperations;\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.common.to.AttributeTO;\n+import org.apache.syncope.common.to.ConnObjectTO;\n+import org.apache.syncope.common.to.MembershipTO;\n+import org.apache.syncope.common.to.RoleTO;\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.IntMappingType;\n+import org.apache.syncope.common.types.PasswordPolicySpec;\n+import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.AbstractVirAttr;\n@@ -57,9 +61,6 @@\n import org.apache.syncope.core.util.JexlUtil;\n import org.apache.syncope.core.util.MappingUtil;\n import org.apache.syncope.core.util.NotFoundException;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.IntMappingType;\n-import org.apache.syncope.types.PasswordPolicySpec;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n import org.identityconnectors.framework.common.objects.Attribute;"},{"sha":"5123ffa253e3db1634c8dfc3332972f77dcbeae8","filename":"core/src/main/java/org/apache/syncope/core/connid/PasswordGenerator.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,15 +21,16 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n+\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.types.PasswordPolicySpec;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n import org.apache.syncope.core.policy.PolicyPattern;\n import org.apache.syncope.core.util.IncompatiblePolicyException;\n-import org.apache.syncope.types.PasswordPolicySpec;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;"},{"sha":"ca65dfd6a011edd7a5427cab69ad1d8d3016bf28","filename":"core/src/main/java/org/apache/syncope/core/init/ConnInstanceLoader.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FConnInstanceLoader.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,7 +20,9 @@\n \n import java.util.Locale;\n import java.util.Set;\n+\n import org.apache.commons.lang.SerializationUtils;\n+import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.core.persistence.beans.ConnInstance;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n import org.apache.syncope.core.persistence.dao.ConnectorRegistry;\n@@ -32,7 +34,6 @@\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.ConnBundleManager;\n import org.apache.syncope.core.util.NotFoundException;\n-import org.apache.syncope.types.ConnConfProperty;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;"},{"sha":"ae52777d45a31030ed94ee2f49cb956e6e18dba6","filename":"core/src/main/java/org/apache/syncope/core/init/ImplementationClassNamesLoader.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FImplementationClassNamesLoader.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -25,11 +25,11 @@\n import java.util.Map;\n import java.util.Set;\n \n+import org.apache.syncope.core.notification.NotificationJob;\n import org.apache.syncope.core.persistence.validation.attrvalue.Validator;\n import org.apache.syncope.core.propagation.PropagationActions;\n-import org.apache.syncope.core.report.Reportlet;\n-import org.apache.syncope.core.notification.NotificationJob;\n import org.apache.syncope.core.report.ReportJob;\n+import org.apache.syncope.core.report.Reportlet;\n import org.apache.syncope.core.sync.SyncActions;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.quartz.Job;"},{"sha":"d9454ea4dace40d10f288c68111a98952a0d2758","filename":"core/src/main/java/org/apache/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,7 +24,9 @@\n import java.util.Set;\n import java.util.regex.Matcher;\n import java.util.regex.Pattern;\n+\n import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.core.notification.NotificationJob;\n import org.apache.syncope.core.persistence.beans.Report;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n@@ -33,10 +35,9 @@\n import org.apache.syncope.core.persistence.dao.ReportDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n import org.apache.syncope.core.quartz.AbstractTaskJob;\n+import org.apache.syncope.core.report.ReportJob;\n import org.apache.syncope.core.sync.DefaultSyncActions;\n import org.apache.syncope.core.sync.SyncActions;\n-import org.apache.syncope.core.notification.NotificationJob;\n-import org.apache.syncope.core.report.ReportJob;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.quartz.Job;"},{"sha":"7279306f836bf4c3ed64c3ccf0a93419bd25d7f8","filename":"core/src/main/java/org/apache/syncope/core/init/LoggerLoader.java","status":"modified","additions":9,"deletions":7,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Finit%2FLoggerLoader.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,19 +18,21 @@\n  */\n package org.apache.syncope.core.init;\n \n-import ch.qos.logback.classic.Logger;\n-import ch.qos.logback.classic.LoggerContext;\n import java.util.HashMap;\n import java.util.Map;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n+\n+import org.apache.syncope.common.types.SyncopeLoggerLevel;\n+import org.apache.syncope.common.types.SyncopeLoggerType;\n import org.apache.syncope.core.persistence.beans.SyncopeLogger;\n import org.apache.syncope.core.persistence.dao.LoggerDAO;\n-import org.apache.syncope.types.SyncopeLoggerLevel;\n-import org.apache.syncope.types.SyncopeLoggerType;\n import org.slf4j.ILoggerFactory;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+import ch.qos.logback.classic.Logger;\n+import ch.qos.logback.classic.LoggerContext;\n \n @Component\n public class LoggerLoader {"},{"sha":"a304015cd55ecba9acb97083d815f4f135db6c16","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationJob.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationJob.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,17 +21,19 @@\n import java.io.PrintWriter;\n import java.io.StringWriter;\n import java.util.Date;\n+\n import javax.mail.internet.MimeMessage;\n+\n import org.apache.commons.lang.StringUtils;\n+import org.apache.syncope.common.types.AuditElements.Category;\n+import org.apache.syncope.common.types.AuditElements.NotificationSubCategory;\n+import org.apache.syncope.common.types.AuditElements.Result;\n+import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.core.audit.AuditManager;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.TaskExec;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.TaskDAO;\n-import org.apache.syncope.types.AuditElements.Category;\n-import org.apache.syncope.types.AuditElements.NotificationSubCategory;\n-import org.apache.syncope.types.AuditElements.Result;\n-import org.apache.syncope.types.TraceLevel;\n import org.quartz.DisallowConcurrentExecution;\n import org.quartz.Job;\n import org.quartz.JobExecutionContext;"},{"sha":"c44fe2cdac4658aaf13c8a28cc5105e06399d76d","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,7 +24,10 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-import org.apache.syncope.client.to.UserTO;\n+\n+import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.AttributableType;\n+import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n import org.apache.syncope.core.persistence.beans.Notification;\n import org.apache.syncope.core.persistence.beans.NotificationTask;\n@@ -44,8 +47,6 @@\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.util.NotFoundException;\n-import org.apache.syncope.types.AttributableType;\n-import org.apache.syncope.types.IntMappingType;\n import org.apache.velocity.app.VelocityEngine;\n import org.apache.velocity.exception.VelocityException;\n import org.slf4j.Logger;"},{"sha":"d302ba24dfec4a094f892423e02f78c3ab87b509","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,7 +21,9 @@\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.List;\n+\n import javax.persistence.MappedSuperclass;\n+\n import org.apache.syncope.core.persistence.validation.attrvalue.InvalidAttrValueException;\n import org.apache.syncope.core.persistence.validation.entity.AttrCheck;\n import org.apache.syncope.core.util.AttributableUtil;"},{"sha":"ee79312d9605245c5d3eb668835058553f991f15","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -18,26 +18,24 @@\n  */\n package org.apache.syncope.core.persistence.beans;\n \n-import java.lang.Boolean;\n-import java.lang.Double;\n-import java.lang.Long;\n-import java.lang.String;\n import java.text.DateFormat;\n import java.text.DecimalFormat;\n import java.util.Date;\n+\n import javax.persistence.Basic;\n import javax.persistence.MappedSuperclass;\n import javax.persistence.Temporal;\n import javax.persistence.TemporalType;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n import org.apache.commons.lang.time.DateUtils;\n-import org.apache.syncope.client.SyncopeConstants;\n+import org.apache.syncope.common.SyncopeConstants;\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.persistence.validation.entity.AttrValueCheck;\n-import org.apache.syncope.types.SchemaType;\n \n @MappedSuperclass\n @AttrValueCheck"},{"sha":"16522ef31e876330f2114177b2103486f3e538c2","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -26,12 +26,13 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n+\n import org.apache.commons.lang.builder.EqualsBuilder;\n import org.apache.commons.lang.builder.HashCodeBuilder;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n-import org.apache.syncope.client.SyncopeConstants;\n \n public abstract class AbstractBaseBean implements Serializable {\n "},{"sha":"62b08eae901e935a42d7b55b6256cd2fd52e1cbc","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.core.persistence.beans;\n \n import java.util.Collection;\n+\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n+\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n import org.apache.syncope.core.util.ApplicationContextProvider;"},{"sha":"7d331e08c9c67c5695347d2ee9bdf0c3cfb65cc1","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerSchema.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerSchema.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,7 +21,8 @@\n import javax.persistence.Column;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.types.SchemaType;\n+\n+import org.apache.syncope.common.types.SchemaType;\n \n @MappedSuperclass\n public abstract class AbstractDerSchema extends AbstractBaseBean {"},{"sha":"0748781b844275483e47fbf2fe29f3983744a769","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractExec.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractExec.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.beans;\n \n import java.util.Date;\n+\n import javax.persistence.Column;\n import javax.persistence.Lob;\n import javax.persistence.MappedSuperclass;"},{"sha":"a7d1153f8f6916ee440fb177eb860a5b314bf673","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractMapping.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMapping.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,9 +19,11 @@\n package org.apache.syncope.core.persistence.beans;\n \n import java.util.List;\n+\n import javax.persistence.Cacheable;\n import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.types.IntMappingType;\n+\n+import org.apache.syncope.common.types.IntMappingType;\n import org.identityconnectors.framework.common.objects.Uid;\n \n @MappedSuperclass"},{"sha":"be2024ebbfe2aeca172ec3b5936367ace3238372","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractMappingItem.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractMappingItem.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -26,7 +26,8 @@\n import javax.persistence.MappedSuperclass;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.syncope.types.IntMappingType;\n+\n+import org.apache.syncope.common.types.IntMappingType;\n \n @MappedSuperclass\n @Cacheable"},{"sha":"5b4124979fc026f621ee3421248377f7161be232","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractSchema.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSchema.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -24,6 +24,7 @@\n import java.text.DecimalFormat;\n import java.text.Format;\n import java.text.SimpleDateFormat;\n+\n import javax.persistence.Basic;\n import javax.persistence.Column;\n import javax.persistence.Enumerated;\n@@ -33,10 +34,11 @@\n import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-import org.apache.syncope.core.persistence.validation.attrvalue.BasicValidator;\n+\n+import org.apache.syncope.common.types.SchemaType;\n import org.apache.syncope.core.persistence.validation.attrvalue.AbstractValidator;\n+import org.apache.syncope.core.persistence.validation.attrvalue.BasicValidator;\n import org.apache.syncope.core.persistence.validation.entity.SchemaCheck;\n-import org.apache.syncope.types.SchemaType;\n \n @MappedSuperclass\n @SchemaCheck"},{"sha":"6723f9929f4fa05dc3cd42dc14bca5e75c74e41b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractVirAttr.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirAttr.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.List;\n+\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;"},{"sha":"cbe9889d10a99612fb584d2268c937193092f097","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractVirSchema.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractVirSchema.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -20,7 +20,8 @@\n \n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n-import org.apache.syncope.types.SchemaType;\n+\n+import org.apache.syncope.common.types.SchemaType;\n \n @MappedSuperclass\n public abstract class AbstractVirSchema extends AbstractBaseBean {"},{"sha":"e2bed78dd3c6175c3e55e86cd667916a1dd97c3a","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AccountPolicy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAccountPolicy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -19,7 +19,8 @@\n package org.apache.syncope.core.persistence.beans;\n \n import javax.persistence.Entity;\n-import org.apache.syncope.types.PolicyType;\n+\n+import org.apache.syncope.common.types.PolicyType;\n \n @Entity\n public class AccountPolicy extends Policy {"},{"sha":"6b5b1d1e14d334c42d0a9bbaff8028657f6270bc","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ConnInstance.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FConnInstance.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -23,6 +23,7 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n+\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n@@ -33,9 +34,10 @@\n import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.OneToMany;\n+\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.ConnectorCapability;\n import org.apache.syncope.core.util.XMLSerializer;\n-import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.ConnectorCapability;\n \n @Entity\n public class ConnInstance extends AbstractBaseBean {"},{"sha":"1505c0bb92a7121a9a38d16d21d64f3e248ef558","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Entitlement.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -22,6 +22,7 @@\n import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n+\n import org.apache.syncope.core.persistence.validation.entity.EntitlementCheck;\n \n @Entity"},{"sha":"19d445f60e375793cf524eab4b14e98261e5b166","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda","patch":"@@ -21,6 +21,7 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n+\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n@@ -35,14 +36,15 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n+\n import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.core.util.XMLSerializer;\n+import org.apache.syncope.common.types.ConnConfProperty;\n+import org.apache.syncope.common.types.PropagationMode;\n+import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.core.persistence.beans.role.RMapping;\n import org.apache.syncope.core.persistence.beans.user.UMapping;\n import org.apache.syncope.core.persistence.validation.entity.ExternalResourceCheck;\n-import org.apache.syncope.types.ConnConfProperty;\n-import org.apache.syncope.types.PropagationMode;\n-import org.apache.syncope.types.TraceLevel;\n+import org.apache.syncope.core.util.XMLSerializer;\n import org.identityconnectors.framework.common.objects.SyncToken;\n \n /**"},{"sha":"498aae3896c031db9e4a7404e9895083f1864f60","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Notification.java","status":"modified","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotification.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"74cb8c89e596f6a136f00bfca111db0304001f63","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/NotificationTask.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotificationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotificationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FNotificationTask.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"6cef9fd8eaa77b604f69605188d597777bbbc0c4","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PasswordPolicy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPasswordPolicy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"7005306b801bb152748ece113991bdc8463cf4cc","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Policy.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"26192dfa9bb0feed9ef8a624e8fc04ba8e6fbadc","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PropagationTask.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPropagationTask.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"96747a1d0c3a9ca9443eb7703efff41d529cb8b7","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Report.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"162036a03eff015ccabdec47d5aa2c066ee57e02","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ReportExec.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportExec.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"bfe7ea6dbffe389d623e1ad3d815e1bfdaae7561","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ReportletConfInstance.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportletConfInstance.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"baff22155e5bf0ef222de73086897423c86cbcd1","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SchedTask.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSchedTask.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"b9d5e9d680e54d4604704ea5d780a0aea3e89756","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncPolicy.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncPolicy.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"8e125fe482294e88c9c35e52f9125516c14c702b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"d8a72474dd3fd706e411da54b1f8f22caf8c3ef3","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncopeLogger.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncopeLogger.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"caf4c6279555ea0206b29c3d2209c5ffddbe04d6","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Task.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"c9b9165e452a9d56dbb1ea0847b35b01612e4e34","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/UserRequest.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FUserRequest.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"7d9ed63a5dcea8fee1b793b45804bcc342d80fed","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MAttr.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"},{"sha":"6dd7e4ad0e27a2423fbf39f4ea87bac308ce792d","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MAttrUniqueValue.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f2ba8e71d754ec629e2c59577678c75e7c0d7eda/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttrUniqueValue.java?ref=f2ba8e71d754ec629e2c59577678c75e7c0d7eda"}]}