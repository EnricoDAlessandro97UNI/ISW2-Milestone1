{"sha":"44a818844233e2e7560b4a5d6608c7df535adc18","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjQ0YTgxODg0NDIzM2UyZTc1NjBiNGE1ZDY2MDhjN2RmNTM1YWRjMTg=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-12-20T11:42:57Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2017-12-20T12:13:33Z"},"message":"improvement for paged search of dynamic group members + fix for dynamic members table clearing before populate","tree":{"sha":"d273887d1c1fcff80a0848daa27dcde410c02e53","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d273887d1c1fcff80a0848daa27dcde410c02e53"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/44a818844233e2e7560b4a5d6608c7df535adc18","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44a818844233e2e7560b4a5d6608c7df535adc18","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/44a818844233e2e7560b4a5d6608c7df535adc18","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/44a818844233e2e7560b4a5d6608c7df535adc18/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"ec7612419c3ed3f2bd582c67fd5cb5e617fd898f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ec7612419c3ed3f2bd582c67fd5cb5e617fd898f"}],"stats":{"total":27,"additions":17,"deletions":10},"files":[{"sha":"52f82f62d50004a8498a6be51b07cbd446d3675b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":12,"deletions":8,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a818844233e2e7560b4a5d6608c7df535adc18/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a818844233e2e7560b4a5d6608c7df535adc18/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=44a818844233e2e7560b4a5d6608c7df535adc18","patch":"@@ -286,18 +286,20 @@ public Group save(final Group group) {\n         publisher.publishEvent(new AnyCreatedUpdatedEvent<>(this, merged, AuthContextUtils.getDomain()));\n \n         // refresh dynamic memberships\n+        clearUDynMembers(merged);\n         if (merged.getUDynMembership() != null) {\n-            for (int page = 1; page <= (countUDynMembers(group) / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+            SearchCond cond = buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm());\n+            int count = searchDAO().count(\n+                    Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.USER);\n+            for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                 List<User> matching = searchDAO().search(\n                         Collections.<String>singleton(merged.getRealm().getFullPath()),\n-                        buildDynMembershipCond(merged.getUDynMembership().getFIQLCond(), merged.getRealm()),\n+                        cond,\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n                         Collections.<OrderByClause>emptyList(),\n                         AnyTypeKind.USER);\n \n-                clearUDynMembers(merged);\n-\n                 matching.forEach(user -> {\n                     Query insert = entityManager().createNativeQuery(\"INSERT INTO \" + UDYNMEMB_TABLE + \" VALUES(?, ?)\");\n                     insert.setParameter(1, user.getKey());\n@@ -308,18 +310,20 @@ public Group save(final Group group) {\n                 });\n             }\n         }\n+        clearADynMembers(merged);\n         merged.getADynMemberships().stream().forEach(memb -> {\n-            for (int page = 1; page <= (countUDynMembers(group) / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n+            SearchCond cond = buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm());\n+            int count = searchDAO().count(\n+                    Collections.<String>singleton(merged.getRealm().getFullPath()), cond, AnyTypeKind.ANY_OBJECT);\n+            for (int page = 1; page <= (count / AnyDAO.DEFAULT_PAGE_SIZE) + 1; page++) {\n                 List<AnyObject> matching = searchDAO().search(\n                         Collections.<String>singleton(merged.getRealm().getFullPath()),\n-                        buildDynMembershipCond(memb.getFIQLCond(), merged.getRealm()),\n+                        cond,\n                         page,\n                         AnyDAO.DEFAULT_PAGE_SIZE,\n                         Collections.<OrderByClause>emptyList(),\n                         AnyTypeKind.ANY_OBJECT);\n \n-                clearADynMembers(merged);\n-\n                 matching.forEach(anyObject -> {\n                     Query insert = entityManager().createNativeQuery(\n                             \"INSERT INTO \" + ADYNMEMB_TABLE + \" VALUES(?, ?, ?)\");"},{"sha":"08f65322e8a252fde512b8ab921c42b5acf251cc","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ExceptionMapperITCase.java","status":"modified","additions":5,"deletions":2,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/44a818844233e2e7560b4a5d6608c7df535adc18/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/44a818844233e2e7560b4a5d6608c7df535adc18/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FExceptionMapperITCase.java?ref=44a818844233e2e7560b4a5d6608c7df535adc18","patch":"@@ -25,12 +25,14 @@\n import java.io.InputStream;\n import java.util.Properties;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.fit.AbstractITCase;\n import org.junit.jupiter.api.BeforeAll;\n@@ -118,9 +120,10 @@ public void sameGroupName() {\n         try {\n             createGroup(groupTO2);\n             fail(\"This should not happen\");\n-        } catch (Exception e) {\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.EntityExists, e.getType());\n             String message = ERROR_MESSAGES.getProperty(\"errMessage.UniqueConstraintViolation\");\n-            assertEquals(\"DataIntegrityViolation [\" + message + \"]\", e.getMessage());\n+            assertEquals(\"EntityExists [\" + message + \"]\", e.getMessage());\n         }\n     }\n "}]}