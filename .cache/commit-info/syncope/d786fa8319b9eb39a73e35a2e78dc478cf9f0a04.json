{"sha":"d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ3ODZmYTgzMTliOWViMzlhNzNlMzVhMmU3OGRjNDc4Y2Y5ZjBhMDQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-08-29T12:42:53Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-08-29T12:42:53Z"},"message":"Merge from 1_0_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1378525 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e6a41a6b9628d247cc20bde5a75be8700e942615","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e6a41a6b9628d247cc20bde5a75be8700e942615"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"4c4f2d8cf0b0f04d11b3c5374cf1aaa15b7deafc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/4c4f2d8cf0b0f04d11b3c5374cf1aaa15b7deafc","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/4c4f2d8cf0b0f04d11b3c5374cf1aaa15b7deafc"}],"stats":{"total":242,"additions":175,"deletions":67},"files":[{"sha":"70acedecbc8fca0f4c9c8cfacb1d6b36f8418c44","filename":"client/src/main/java/org/apache/syncope/client/to/NotificationTaskTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FNotificationTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FNotificationTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fto%2FNotificationTaskTO.java?ref=d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","patch":"@@ -36,6 +36,8 @@ public class NotificationTaskTO extends TaskTO {\n \n     private String htmlBody;\n \n+    private boolean executed;\n+\n     private TraceLevel traceLevel;\n \n     public NotificationTaskTO() {\n@@ -95,6 +97,14 @@ public void setHtmlBody(final String htmlBody) {\n         this.htmlBody = htmlBody;\n     }\n \n+    public boolean isExecuted() {\n+        return executed;\n+    }\n+\n+    public void setExecuted(boolean executed) {\n+        this.executed = executed;\n+    }\n+\n     public TraceLevel getTraceLevel() {\n         return traceLevel;\n     }"},{"sha":"a164777753ceb9e9a6f603003c5ee6f620c5abcc","filename":"core/src/main/java/org/apache/syncope/core/notification/NotificationManager.java","status":"modified","additions":15,"deletions":4,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationManager.java?ref=d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","patch":"@@ -168,7 +168,7 @@ private NotificationTask getNotificationTask(final Notification notification, fi\n \n         final Map<String, Object> model = new HashMap<String, Object>();\n         model.put(\"user\", userDataBinder.getUserTO(user));\n-        model.put(\"syncopeConf\", this.findAll());\n+        model.put(\"syncopeConf\", this.findAllSyncopeConfs());\n \n         String htmlBody;\n         String textBody;\n@@ -251,12 +251,12 @@ private String getRecipientEmail(\n     }\n \n     /**\n-     * Store execution of a NotificationTask and update latest execution status of related NotificationTask.\n+     * Store execution of a NotificationTask.\n      *\n      * @param execution task execution.\n      * @return merged task execution.\n      */\n-    public TaskExec storeExecAndUpdateLatestExecStatus(final TaskExec execution) {\n+    public TaskExec storeExec(final TaskExec execution) {\n         NotificationTask task = taskDAO.find(execution.getTask().getId());\n         task.addExec(execution);\n         task.setExecuted(true);\n@@ -265,7 +265,18 @@ public TaskExec storeExecAndUpdateLatestExecStatus(final TaskExec execution) {\n         return task.getExecs().get(0);\n     }\n \n-    public Map<String, String> findAll() {\n+    /**\n+     * Mark NotificationTask with provided id as executed.\n+     * \n+     * @param taskId task to be updated\n+     */\n+    public void setTaskExecuted(final Long taskId) {\n+        NotificationTask task = taskDAO.find(taskId);\n+        task.setExecuted(true);\n+        taskDAO.save(task);\n+    }\n+\n+    public Map<String, String> findAllSyncopeConfs() {\n         Map<String, String> syncopeConfMap = new HashMap<String, String>();\n         for (SyncopeConf conf : confDAO.findAll()) {\n             syncopeConfMap.put(conf.getKey(), conf.getValue());"},{"sha":"c946075c1609d0c255017b33446938c0f59a7737","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","patch":"@@ -32,6 +32,7 @@\n import org.apache.syncope.client.validation.SyncopeClientException;\n import org.apache.syncope.core.init.JobInstanceLoader;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n+import org.apache.syncope.core.persistence.beans.NotificationTask;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.SchedTask;\n import org.apache.syncope.core.persistence.beans.SyncTask;\n@@ -149,7 +150,8 @@ public SchedTask createSchedTask(final SchedTaskTO taskTO, final TaskUtil taskUt\n \n             case SYNC:\n                 if (!(taskTO instanceof SyncTaskTO)) {\n-                    throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.getClass().getName());\n+                    throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n+                            getClass().getName());\n                 }\n                 SyncTaskTO syncTaskTO = (SyncTaskTO) taskTO;\n \n@@ -176,7 +178,8 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO, fina\n                         getName());\n             }\n             if (!(taskTO instanceof SyncTaskTO)) {\n-                throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.getClass().getName());\n+                throw new ClassCastException(\"taskUtil is type SyncTask but taskTO is not SyncTaskTO: \" + taskTO.\n+                        getClass().getName());\n             }\n \n             fill((SyncTask) task, (SyncTaskTO) taskTO);\n@@ -227,7 +230,7 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n         taskTO.setStartDate(latestExec == null\n                 ? null\n                 : latestExec.getStartDate());\n-        \n+\n         taskTO.setEndDate(latestExec == null\n                 ? null\n                 : latestExec.getEndDate());\n@@ -265,6 +268,9 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n                 break;\n \n             case NOTIFICATION:\n+                if (((NotificationTask) task).isExecuted() && StringUtils.isBlank(taskTO.getLatestExecStatus())) {\n+                    taskTO.setLatestExecStatus(\"[EXECUTED]\");\n+                }\n                 break;\n \n             default:"},{"sha":"0a5f912aed56e9a161deadb35091e566f36f4376","filename":"core/src/main/java/org/apache/syncope/core/scheduling/NotificationJob.java","status":"modified","additions":40,"deletions":38,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fscheduling%2FNotificationJob.java?ref=d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","patch":"@@ -48,22 +48,22 @@\n  * @see NotificationTask\n  */\n public class NotificationJob implements StatefulJob {\n-\n+    \n     enum Status {\n-\n+        \n         SENT,\n         NOT_SENT\n-\n+        \n     }\n \n     /**\n      * Logger.\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJob.class);\n-\n+    \n     @Autowired\n     private AuditManager auditManager;\n-\n+    \n     @Autowired\n     private NotificationManager notificationManager;\n \n@@ -78,15 +78,15 @@ enum Status {\n      */\n     @Autowired\n     private ConfDAO confDAO;\n-\n+    \n     private String smtpHost;\n-\n+    \n     private int smtpPort;\n-\n+    \n     private String smtpUsername;\n-\n+    \n     private String smtpPassword;\n-\n+    \n     private void init() {\n         smtpHost = confDAO.find(\"smtp.host\", \"\").getValue();\n         smtpPort = 25;\n@@ -97,31 +97,31 @@ private void init() {\n         }\n         smtpUsername = confDAO.find(\"smtp.username\", \"\").getValue();\n         smtpPassword = confDAO.find(\"smtp.password\", \"\").getValue();\n-\n+        \n         LOG.debug(\"SMTP details fetched: {}:{} / {}:[PASSWORD_NOT_SHOWN]\",\n                 new Object[]{smtpHost, smtpPort, smtpUsername});\n     }\n-\n+    \n     public TaskExec executeSingle(final NotificationTask task) {\n         init();\n-\n+        \n         TaskExec execution = new TaskExec();\n         execution.setTask(task);\n         execution.setStartDate(new Date());\n-\n+        \n         if (StringUtils.isBlank(smtpHost) || StringUtils.isBlank(task.getSender())\n                 || StringUtils.isBlank(task.getSubject()) || task.getRecipients().isEmpty()\n                 || StringUtils.isBlank(task.getHtmlBody()) || StringUtils.isBlank(task.getTextBody())) {\n-\n+            \n             String message = \"Could not fetch all required information for \" + \"sending e-mails:\\n\" + smtpHost + \":\"\n                     + smtpPort + \"\\n\" + task.getRecipients() + \"\\n\" + task.getSender() + \"\\n\" + task.getSubject()\n                     + \"\\n\" + task.getHtmlBody() + \"\\n\" + task.getTextBody();\n             LOG.error(message);\n-\n+            \n             execution.setStatus(Status.NOT_SENT.name());\n-\n+            \n             if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n-\n+                \n                 execution.setMessage(message);\n             }\n         } else {\n@@ -130,7 +130,7 @@ public TaskExec executeSingle(final NotificationTask task) {\n                         + task.getSender() + \"\\n\" + task.getSubject() + \"\\n\" + task.getHtmlBody() + \"\\n\"\n                         + task.getTextBody() + \"\\n\");\n             }\n-\n+            \n             for (String to : task.getRecipients()) {\n                 try {\n                     JavaMailSenderImpl sender = new JavaMailSenderImpl();\n@@ -143,18 +143,18 @@ public TaskExec executeSingle(final NotificationTask task) {\n                     if (StringUtils.isNotBlank(smtpPassword)) {\n                         sender.setPassword(smtpPassword);\n                     }\n-\n+                    \n                     MimeMessage message = sender.createMimeMessage();\n                     MimeMessageHelper helper = new MimeMessageHelper(message, true);\n                     helper.setTo(to);\n                     helper.setFrom(task.getSender());\n                     helper.setSubject(task.getSubject());\n                     helper.setText(task.getTextBody(), task.getHtmlBody());\n-\n+                    \n                     sender.send(message);\n-\n+                    \n                     execution.setStatus(Status.SENT.name());\n-\n+                    \n                     StringBuilder report = new StringBuilder();\n                     switch (task.getTraceLevel()) {\n                         case ALL:\n@@ -164,63 +164,65 @@ public TaskExec executeSingle(final NotificationTask task) {\n                                     append(task.getTextBody()).append('\\n').append('\\n').\n                                     append(task.getHtmlBody()).append('\\n');\n                             break;\n-\n+                        \n                         case SUMMARY:\n                             report.append(\"E-mail sent to \").append(to).append('\\n');\n                             break;\n-\n+                        \n                         case FAILURES:\n                         case NONE:\n                         default:\n                     }\n                     if (report.length() > 0) {\n                         execution.setMessage(report.toString());\n                     }\n-\n+                    \n                     auditManager.audit(Category.notification, NotificationSubCategory.sent, Result.success,\n                             \"Successfully sent notification to \" + to);\n                 } catch (Exception e) {\n                     LOG.error(\"Could not send e-mail\", e);\n-\n+                    \n                     execution.setStatus(Status.NOT_SENT.name());\n                     StringWriter exceptionWriter = new StringWriter();\n                     exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n                     e.printStackTrace(new PrintWriter(exceptionWriter));\n-\n+                    \n                     if (task.getTraceLevel().ordinal() >= TraceLevel.FAILURES.ordinal()) {\n                         execution.setMessage(exceptionWriter.toString());\n                     }\n-\n+                    \n                     auditManager.audit(Category.notification, NotificationSubCategory.sent, Result.failure,\n                             \"Could not send notification to \" + to, e);\n                 }\n-\n+                \n                 execution.setEndDate(new Date());\n             }\n         }\n-\n+        \n         if (hasToBeRegistered(execution)) {\n-            execution = notificationManager.storeExecAndUpdateLatestExecStatus(execution);\n+            execution = notificationManager.storeExec(execution);\n+        } else {\n+            notificationManager.setTaskExecuted(execution.getTask().getId());\n         }\n-\n+        \n         return execution;\n     }\n-\n+    \n     @Override\n     public void execute(final JobExecutionContext context)\n             throws JobExecutionException {\n-\n+        \n         LOG.debug(\"Waking up...\");\n-\n+        \n         for (NotificationTask task : taskDAO.findToExec(NotificationTask.class)) {\n             LOG.debug(\"Found notification task {} to be executed: starting...\", task);\n             executeSingle(task);\n             LOG.debug(\"Notification task {} executed\", task);\n         }\n-\n+        \n         LOG.debug(\"Sleeping again...\");\n     }\n-\n+    \n     private boolean hasToBeRegistered(final TaskExec execution) {\n         NotificationTask task = (NotificationTask) execution.getTask();\n "},{"sha":"8d08543eaf593f51bd8d34a75496e94740f2725c","filename":"core/src/test/java/org/apache/syncope/core/notification/NotificationTest.java","status":"modified","additions":98,"deletions":19,"changes":117,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fnotification%2FNotificationTest.java?ref=d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","patch":"@@ -31,9 +31,11 @@\n import javax.mail.Message;\n import javax.mail.Session;\n import javax.mail.Store;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.search.MembershipCond;\n import org.apache.syncope.client.search.NodeCond;\n import org.apache.syncope.client.to.MembershipTO;\n+import org.apache.syncope.client.to.NotificationTaskTO;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.core.persistence.beans.Entitlement;\n import org.apache.syncope.core.persistence.beans.Notification;\n@@ -48,6 +50,7 @@\n import org.apache.syncope.core.rest.controller.UserController;\n import org.apache.syncope.core.scheduling.NotificationJob;\n import org.apache.syncope.types.IntMappingType;\n+import org.apache.syncope.types.TraceLevel;\n import org.junit.AfterClass;\n import org.junit.Before;\n import org.junit.BeforeClass;\n@@ -152,6 +155,24 @@ public void setupSecurity() {\n         SecurityContextHolder.getContext().setAuthentication(authentication);\n     }\n \n+    @Before\n+    public void setupSMTP() {\n+        try {\n+            SyncopeConf smtpHostConf = confDAO.find(\"smtp.host\");\n+            smtpHostConf.setValue(smtpHost);\n+            confDAO.save(smtpHostConf);\n+\n+            SyncopeConf smtpPortConf = confDAO.find(\"smtp.port\");\n+            smtpPortConf.setValue(Integer.toString(smtpPort));\n+            confDAO.save(smtpPortConf);\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected exception\", e);\n+            fail(\"Unexpected exception while setting SMTP host and port\");\n+        }\n+\n+        confDAO.flush();\n+    }\n+\n     private boolean verifyMail(final String sender, final String subject) {\n         LOG.info(\"Waiting for notification to be sent...\");\n         try {\n@@ -216,23 +237,79 @@ public void notifyByMail() {\n \n         notificationDAO.flush();\n \n-        // 2. use test SMTP server\n+        // 2. create user\n+        UserTO userTO = UserTestITCase.getSampleTO(mailAddress);\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7);\n+        userTO.addMembership(membershipTO);\n+\n         try {\n-            SyncopeConf smtpHostConf = confDAO.find(\"smtp.host\");\n-            smtpHostConf.setValue(smtpHost);\n-            confDAO.save(smtpHostConf);\n+            userController.create(new MockHttpServletResponse(), userTO);\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected exception\", e);\n+            fail(\"Unexpected exception while creating\");\n+        }\n \n-            SyncopeConf smtpPortConf = confDAO.find(\"smtp.port\");\n-            smtpPortConf.setValue(Integer.toString(smtpPort));\n-            confDAO.save(smtpPortConf);\n+        // 3. force Quartz job execution and verify e-mail\n+        try {\n+            notificationJob.execute(null);\n+        } catch (SchedulerException e) {\n+            LOG.error(\"Unexpected exception\", e);\n+            fail(\"Unexpected exception while triggering notification job\");\n+        }\n+        assertTrue(verifyMail(sender, subject));\n+\n+        // 4. get NotificationTask id\n+        Long taskId = null;\n+        for (NotificationTask task : taskDAO.findAll(NotificationTask.class)) {\n+            if (sender.equals(task.getSender())) {\n+                taskId = task.getId();\n+            }\n+        }\n+        assertNotNull(taskId);\n+\n+        // 5. execute Notification task and verify e-mail\n+        try {\n+            taskController.execute(taskId, false);\n         } catch (Exception e) {\n             LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while setting SMTP host and port\");\n+            fail(\"Unexpected exception while executing notification task\");\n         }\n+        assertTrue(verifyMail(sender, subject));\n+    }\n \n-        confDAO.flush();\n+    @Test\n+    public void issueSYNCOPE192() {\n+        // 1. create suitable notification for subsequent tests\n+        Notification notification = new Notification();\n+        notification.addEvent(\"create\");\n+\n+        MembershipCond membCond = new MembershipCond();\n+        membCond.setRoleId(7L);\n+        notification.setAbout(NodeCond.getLeafCond(membCond));\n+\n+        membCond = new MembershipCond();\n+        membCond.setRoleId(8L);\n+        notification.setRecipients(NodeCond.getLeafCond(membCond));\n+        notification.setSelfAsRecipient(true);\n+\n+        notification.setRecipientAttrName(\"email\");\n+        notification.setRecipientAttrType(IntMappingType.UserSchema);\n+\n+        Random random = new Random(System.currentTimeMillis());\n+        String sender = \"syncope192-\" + random.nextLong() + \"@syncope.apache.org\";\n+        notification.setSender(sender);\n+        String subject = \"Test notification \" + random.nextLong();\n+        notification.setSubject(subject);\n+        notification.setTemplate(\"optin\");\n+        notification.setTraceLevel(TraceLevel.NONE);\n \n-        // 3. create user\n+        Notification actual = notificationDAO.save(notification);\n+        assertNotNull(actual);\n+\n+        notificationDAO.flush();\n+\n+        // 2. create user\n         UserTO userTO = UserTestITCase.getSampleTO(mailAddress);\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7);\n@@ -245,33 +322,35 @@ public void notifyByMail() {\n             fail(\"Unexpected exception while creating\");\n         }\n \n-        // 4. force Quartz job execution and verify e-mail\n+        // 3. force Quartz job execution and verify e-mail\n         try {\n             notificationJob.execute(null);\n         } catch (SchedulerException e) {\n             LOG.error(\"Unexpected exception\", e);\n             fail(\"Unexpected exception while triggering notification job\");\n         }\n-\n         assertTrue(verifyMail(sender, subject));\n \n-        List<NotificationTask> tasks = taskDAO.findAll(NotificationTask.class);\n+        // 4. get NotificationTask id\n         Long taskId = null;\n-        for (NotificationTask task : tasks) {\n+        for (NotificationTask task : taskDAO.findAll(NotificationTask.class)) {\n             if (sender.equals(task.getSender())) {\n                 taskId = task.getId();\n             }\n         }\n         assertNotNull(taskId);\n \n-        // 5. execute Notification task and verify e-mail\n+        // 5. verify that last exec status was updated\n+        NotificationTaskTO task = null;\n         try {\n-            taskController.execute(taskId, false);\n+            task = (NotificationTaskTO) taskController.read(taskId);\n         } catch (Exception e) {\n             LOG.error(\"Unexpected exception\", e);\n-            fail(\"Unexpected exception while executing notification task\");\n+            fail(\"Unexpected exception while reading notification task\");\n         }\n-\n-        assertTrue(verifyMail(sender, subject));\n+        assertNotNull(task);\n+        assertTrue(task.getExecutions().isEmpty());\n+        assertTrue(task.isExecuted());\n+        assertTrue(StringUtils.isNotBlank(task.getLatestExecStatus()));\n     }\n }"},{"sha":"def1791edd8e390fb60cb17b838d456e557c3136","filename":"pom.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d786fa8319b9eb39a73e35a2e78dc478cf9f0a04/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=d786fa8319b9eb39a73e35a2e78dc478cf9f0a04","patch":"@@ -755,7 +755,7 @@ under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-surefire-plugin</artifactId>\n-          <version>2.12</version>\n+          <version>2.12.2</version>\n           <configuration>\n             <redirectTestOutputToFile>true</redirectTestOutputToFile>\n           </configuration>\n@@ -805,7 +805,7 @@ under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-failsafe-plugin</artifactId>\n-          <version>2.12</version>\n+          <version>2.12.2</version>\n           <configuration>\n             <redirectTestOutputToFile>true</redirectTestOutputToFile>\n             <encoding>utf-8</encoding>\n@@ -828,7 +828,7 @@ under the License.\n         <plugin>\n           <groupId>org.apache.maven.plugins</groupId>\n           <artifactId>maven-dependency-plugin</artifactId>\n-          <version>2.4</version>\n+          <version>2.5</version>\n           <configuration>\n             <artifactItems>\n               <artifactItem>"}]}