{"sha":"18b668b88eedfc8d81cea0fb325c8fb39b8bc874","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE4YjY2OGI4OGVlZGZjOGQ4MWNlYTBmYjMyNWM4ZmIzOWI4YmM4NzQ=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-25T14:18:47Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-25T14:18:47Z"},"message":"[SYNCOPE-231]\n* RoleService\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1438530 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09d1e47584b407363260e51072eb21a0503cb703","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/09d1e47584b407363260e51072eb21a0503cb703"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/18b668b88eedfc8d81cea0fb325c8fb39b8bc874","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/18b668b88eedfc8d81cea0fb325c8fb39b8bc874","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/18b668b88eedfc8d81cea0fb325c8fb39b8bc874","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/18b668b88eedfc8d81cea0fb325c8fb39b8bc874/comments","author":null,"committer":null,"parents":[{"sha":"2a352cfb20c982d8738aa353c399d0da59b58109","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/2a352cfb20c982d8738aa353c399d0da59b58109","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/2a352cfb20c982d8738aa353c399d0da59b58109"}],"stats":{"total":190,"additions":188,"deletions":2},"files":[{"sha":"069bce1e242f9098e8eba5601d9cfd0b9407e6e6","filename":"client/src/main/java/org/apache/syncope/client/services/proxy/RoleServiceProxy.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18b668b88eedfc8d81cea0fb325c8fb39b8bc874/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18b668b88eedfc8d81cea0fb325c8fb39b8bc874/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fservices%2Fproxy%2FRoleServiceProxy.java?ref=18b668b88eedfc8d81cea0fb325c8fb39b8bc874","patch":"@@ -56,7 +56,7 @@ public Response create(final RoleTO roleTO) {\n         RoleTO role = getRestTemplate().postForObject(baseUrl + \"role/create\", roleTO, RoleTO.class);\r\n \r\n         URI location = URI.create(baseUrl + \"role/read/\" + role.getId() + \".json\");\r\n-        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, role.getId()).build();\r\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, role.getId()).entity(role).build();\r\n     }\r\n \r\n     @Override\r"},{"sha":"ebf7a52fd037b55c0b2143524cb7ff1aeed07a95","filename":"console/src/main/java/org/apache/syncope/console/rest/RoleRestClient.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18b668b88eedfc8d81cea0fb325c8fb39b8bc874/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18b668b88eedfc8d81cea0fb325c8fb39b8bc874/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=18b668b88eedfc8d81cea0fb325c8fb39b8bc874","patch":"@@ -70,7 +70,7 @@ public ConnObjectTO getRemoteObject(final String resourceName, final String obje\n \n     public RoleTO create(final RoleTO roleTO) {\n         Response response = getService(RoleService.class).create(roleTO);\n-        return (RoleTO) response.getEntity(); // FIXME after CXF migration\n+        return response.readEntity(RoleTO.class);\n     }\n \n     public RoleTO read(final Long id) {"},{"sha":"b268e23086b576fef91adeff9a2e585b7f0863ff","filename":"core/src/main/java/org/apache/syncope/core/services/RoleServiceImpl.java","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/18b668b88eedfc8d81cea0fb325c8fb39b8bc874/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/18b668b88eedfc8d81cea0fb325c8fb39b8bc874/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FRoleServiceImpl.java?ref=18b668b88eedfc8d81cea0fb325c8fb39b8bc874","patch":"@@ -0,0 +1,186 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.core.services;\r\n+\r\n+import java.net.URI;\r\n+import java.util.List;\r\n+\r\n+import javax.ws.rs.BadRequestException;\r\n+import javax.ws.rs.ServiceUnavailableException;\r\n+import javax.ws.rs.core.Response;\r\n+import javax.ws.rs.core.UriInfo;\r\n+\r\n+import org.apache.syncope.common.SyncopeConstants;\r\n+import org.apache.syncope.common.mod.RoleMod;\r\n+import org.apache.syncope.common.search.NodeCond;\r\n+import org.apache.syncope.common.services.RoleService;\r\n+import org.apache.syncope.common.to.RoleTO;\r\n+import org.apache.syncope.core.persistence.dao.InvalidSearchConditionException;\r\n+import org.apache.syncope.core.propagation.PropagationException;\r\n+import org.apache.syncope.core.rest.controller.RoleController;\r\n+import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\r\n+import org.apache.syncope.core.util.NotFoundException;\r\n+import org.apache.syncope.core.workflow.WorkflowException;\r\n+import org.springframework.beans.factory.annotation.Autowired;\r\n+import org.springframework.stereotype.Service;\r\n+\r\n+@Service\r\n+public class RoleServiceImpl implements RoleService, ContextAware {\r\n+\r\n+    @Autowired\r\n+    private RoleController roleController;\r\n+\r\n+    private UriInfo uriInfo;\r\n+\r\n+    @Override\r\n+    public List<RoleTO> children(final Long roleId) {\r\n+        try {\r\n+            return roleController.children(roleId);\r\n+        } catch (UnauthorizedRoleException e) {\r\n+            throw new javax.ws.rs.NotAuthorizedException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public int count() {\r\n+        return roleController.list().size();\r\n+    }\r\n+\r\n+    @Override\r\n+    public Response create(final RoleTO roleTO) {\r\n+        try {\r\n+            RoleTO created = roleController.create(new DummyHTTPServletResponse(), roleTO);\r\n+            URI location = uriInfo.getAbsolutePathBuilder().path(created.getId() + \"\").build();\r\n+            return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, created.getId()).entity(created)\r\n+                    .build();\r\n+        } catch (UnauthorizedRoleException e) {\r\n+            throw new javax.ws.rs.NotAuthorizedException(e);\r\n+        } catch (WorkflowException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (PropagationException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO delete(final Long roleId) {\r\n+        try {\r\n+            return roleController.delete(roleId);\r\n+        } catch (UnauthorizedRoleException e) {\r\n+            throw new javax.ws.rs.NotAuthorizedException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> list() {\r\n+        return roleController.list();\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> list(final int page, final int size) {\r\n+        throw new ServiceUnavailableException();\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO parent(final Long roleId) {\r\n+        try {\r\n+            return roleController.parent(roleId);\r\n+        } catch (UnauthorizedRoleException e) {\r\n+            throw new javax.ws.rs.NotAuthorizedException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO read(final Long roleId) {\r\n+        try {\r\n+            return roleController.read(roleId);\r\n+        } catch (UnauthorizedRoleException e) {\r\n+            throw new javax.ws.rs.NotAuthorizedException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> search(final NodeCond searchCondition) {\r\n+        try {\r\n+            return roleController.search(searchCondition);\r\n+        } catch (InvalidSearchConditionException e) {\r\n+            throw new BadRequestException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public List<RoleTO> search(final NodeCond searchCondition, final int page, final int size) {\r\n+        try {\r\n+            return roleController.search(searchCondition, page, size);\r\n+        } catch (InvalidSearchConditionException e) {\r\n+            throw new BadRequestException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public int searchCount(final NodeCond searchCondition) {\r\n+        try {\r\n+            return (Integer) roleController.searchCount(searchCondition).getModel().values().iterator().next();\r\n+        } catch (InvalidSearchConditionException e) {\r\n+            throw new BadRequestException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO selfRead(final Long roleId) {\r\n+        try {\r\n+            return roleController.selfRead(roleId);\r\n+        } catch (UnauthorizedRoleException e) {\r\n+            throw new javax.ws.rs.NotAuthorizedException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+    @Override\r\n+    public void setUriInfo(final UriInfo ui) {\r\n+        this.uriInfo = ui;\r\n+    }\r\n+\r\n+    @Override\r\n+    public RoleTO update(final Long roleId, final RoleMod roleMod) {\r\n+        try {\r\n+            return roleController.update(roleMod);\r\n+        } catch (UnauthorizedRoleException e) {\r\n+            throw new javax.ws.rs.NotAuthorizedException(e);\r\n+        } catch (WorkflowException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (PropagationException e) {\r\n+            throw new BadRequestException(e);\r\n+        } catch (NotFoundException e) {\r\n+            throw new javax.ws.rs.NotFoundException(e);\r\n+        }\r\n+    }\r\n+\r\n+}\r"}]}