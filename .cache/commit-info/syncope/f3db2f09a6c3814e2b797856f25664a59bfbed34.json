{"sha":"f3db2f09a6c3814e2b797856f25664a59bfbed34","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYzZGIyZjA5YTZjMzgxNGUyYjc5Nzg1NmYyNTY2NGE1OWJmYmVkMzQ=","commit":{"author":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2019-02-20T10:39:46Z"},"committer":{"name":"skylark17","email":"matteo.alessandroni@tirasa.net","date":"2019-02-20T10:41:51Z"},"message":"[SYNCOPE-1437] Fixed error while searching for users / groups / any objects with Elasticsearch when no data are present","tree":{"sha":"fb28e7544c95c7d55b20bd90bc7d28e1b5800315","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fb28e7544c95c7d55b20bd90bc7d28e1b5800315"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f3db2f09a6c3814e2b797856f25664a59bfbed34","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f3db2f09a6c3814e2b797856f25664a59bfbed34","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f3db2f09a6c3814e2b797856f25664a59bfbed34","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f3db2f09a6c3814e2b797856f25664a59bfbed34/comments","author":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"committer":{"login":"mat-ale","id":25547301,"node_id":"MDQ6VXNlcjI1NTQ3MzAx","avatar_url":"https://avatars.githubusercontent.com/u/25547301?v=4","gravatar_id":"","url":"https://api.github.com/users/mat-ale","html_url":"https://github.com/mat-ale","followers_url":"https://api.github.com/users/mat-ale/followers","following_url":"https://api.github.com/users/mat-ale/following{/other_user}","gists_url":"https://api.github.com/users/mat-ale/gists{/gist_id}","starred_url":"https://api.github.com/users/mat-ale/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mat-ale/subscriptions","organizations_url":"https://api.github.com/users/mat-ale/orgs","repos_url":"https://api.github.com/users/mat-ale/repos","events_url":"https://api.github.com/users/mat-ale/events{/privacy}","received_events_url":"https://api.github.com/users/mat-ale/received_events","type":"User","site_admin":false},"parents":[{"sha":"715d400bbb4f8f473548c0ee5362614acb34be48","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/715d400bbb4f8f473548c0ee5362614acb34be48","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/715d400bbb4f8f473548c0ee5362614acb34be48"}],"stats":{"total":17,"additions":11,"deletions":6},"files":[{"sha":"bf8490f6bb8a55b06b569fca18562d70a1c5758b","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":11,"deletions":6,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f3db2f09a6c3814e2b797856f25664a59bfbed34/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f3db2f09a6c3814e2b797856f25664a59bfbed34/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=f3db2f09a6c3814e2b797856f25664a59bfbed34","patch":"@@ -27,6 +27,7 @@\n import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n+import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -64,6 +65,7 @@\n import org.elasticsearch.index.query.MatchNoneQueryBuilder;\n import org.elasticsearch.index.query.QueryBuilder;\n import org.elasticsearch.index.query.QueryBuilders;\n+import org.elasticsearch.search.SearchHit;\n import org.elasticsearch.search.builder.SearchSourceBuilder;\n import org.elasticsearch.search.sort.FieldSortBuilder;\n import org.elasticsearch.search.sort.SortBuilder;\n@@ -201,14 +203,17 @@ protected <T extends Any<?>> List<T> doSearch(\n                 (page <= 0 ? 0 : page - 1),\n                 (itemsPerPage < 0 ? elasticsearchUtils.getIndexMaxResultWindow() : itemsPerPage),\n                 sortBuilders(kind, orderBy));\n+\n+        SearchHit[] esResult = null;\n         try {\n-            return buildResult(Stream.of(client.search(request, RequestOptions.DEFAULT).getHits().getHits()).\n-                    map(hit -> hit.getId()).collect(Collectors.toList()),\n-                    kind);\n-        } catch (IOException e) {\n-            LOG.error(\"Search error\", e);\n-            return Collections.emptyList();\n+            esResult = client.search(request, RequestOptions.DEFAULT).getHits().getHits();\n+        } catch (Exception e) {\n+            LOG.error(\"While searching in Elasticsearch\", e);\n         }\n+\n+        return ArrayUtils.isEmpty(esResult)\n+                ? Collections.emptyList()\n+                : buildResult(Stream.of(esResult).map(hit -> hit.getId()).collect(Collectors.toList()), kind);\n     }\n \n     private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {"}]}