{"sha":"d6ce963ecc7f8d51d273460bd9336613cc24b49a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmQ2Y2U5NjNlY2M3ZjhkNTFkMjczNDYwYmQ5MzM2NjEzY2MyNGI0OWE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-14T16:28:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-03-14T16:28:54Z"},"message":"[SYNCOPE-20] Added audit features for logger, configuration and connector\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1300621 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"8a897bda7f5a7ec090a0b7f04be50df66f4982b9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/8a897bda7f5a7ec090a0b7f04be50df66f4982b9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/d6ce963ecc7f8d51d273460bd9336613cc24b49a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6ce963ecc7f8d51d273460bd9336613cc24b49a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d6ce963ecc7f8d51d273460bd9336613cc24b49a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d6ce963ecc7f8d51d273460bd9336613cc24b49a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"070da07b6ad89208705f6f6b96bfa2eef845f29a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/070da07b6ad89208705f6f6b96bfa2eef845f29a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/070da07b6ad89208705f6f6b96bfa2eef845f29a"}],"stats":{"total":194,"additions":177,"deletions":17},"files":[{"sha":"534afec728ab8c15b800172eca02f5968796001f","filename":"client/src/main/java/org/syncope/types/AuditElements.java","status":"modified","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6ce963ecc7f8d51d273460bd9336613cc24b49a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6ce963ecc7f8d51d273460bd9336613cc24b49a/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAuditElements.java?ref=d6ce963ecc7f8d51d273460bd9336613cc24b49a","patch":"@@ -55,6 +55,20 @@ public static EnumSet<? extends Enum> getSubCategories(final Category category)\n                 result = EnumSet.allOf(AuthenticationSubCategory.class);\n                 break;\n \n+            case configuration:\n+                result = EnumSet.allOf(ConfigurationSubCategory.class);\n+                break;\n+\n+            case connector:\n+                result = EnumSet.allOf(ConnectorSubCategory.class);\n+                break;\n+\n+\n+            case logger:\n+                result = EnumSet.allOf(LoggerSubCategory.class);\n+                break;\n+\n+\n             default:\n                 result = null;\n         }\n@@ -68,4 +82,40 @@ public enum AuthenticationSubCategory {\n         getEntitlements\n \n     }\n+\n+    public enum ConfigurationSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        getMailTemplates,\n+        getValidators,\n+        dbExport\n+\n+    }\n+\n+    public enum ConnectorSubCategory {\n+\n+        list,\n+        create,\n+        read,\n+        update,\n+        delete,\n+        getBundles,\n+        getSchemaNames,\n+        getConfigurationProperties,\n+        check,\n+        readConnectorBean\n+\n+    }\n+\n+    public enum LoggerSubCategory {\n+\n+        list,\n+        setLevel,\n+        delete\n+\n+    }\n }"},{"sha":"eef429a418fa19f5915d9eb3fb0e77a27f5f13b8","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":39,"deletions":5,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6ce963ecc7f8d51d273460bd9336613cc24b49a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6ce963ecc7f8d51d273460bd9336613cc24b49a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=d6ce963ecc7f8d51d273460bd9336613cc24b49a","patch":"@@ -41,17 +41,24 @@\n import org.springframework.web.bind.annotation.RequestMethod;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConfigurationTO;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.SyncopeConf;\n import org.syncope.core.persistence.dao.ConfDAO;\n import org.syncope.core.persistence.dao.MissingConfKeyException;\n import org.syncope.core.persistence.validation.attrvalue.Validator;\n import org.syncope.core.rest.data.ConfigurationDataBinder;\n import org.syncope.core.util.ImportExport;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.ConfigurationSubCategory;\n+import org.syncope.types.AuditElements.Result;\n \n @Controller\n @RequestMapping(\"/configuration\")\n public class ConfigurationController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private ConfDAO confDAO;\n \n@@ -74,6 +81,9 @@ public ConfigurationTO create(final HttpServletResponse response,\n         SyncopeConf conf = configurationDataBinder.createSyncopeConfiguration(configurationTO);\n         conf = confDAO.save(conf);\n \n+        auditManager.audit(Category.configuration, ConfigurationSubCategory.create, Result.success,\n+                \"Successfully created conf: \" + conf.getKey());\n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n \n         return configurationDataBinder.getConfigurationTO(conf);\n@@ -86,6 +96,9 @@ public void delete(@PathVariable(\"key\") final String key)\n \n         confDAO.find(key);\n         confDAO.delete(key);\n+\n+        auditManager.audit(Category.configuration, ConfigurationSubCategory.delete, Result.success,\n+                \"Successfully deleted conf: \" + key);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n@@ -98,6 +111,9 @@ public List<ConfigurationTO> list(final HttpServletRequest request) {\n             configurationTOs.add(configurationDataBinder.getConfigurationTO(configuration));\n         }\n \n+        auditManager.audit(Category.configuration, ConfigurationSubCategory.list, Result.success,\n+                \"Successfully listed all confs: \" + configurationTOs.size());\n+\n         return configurationTOs;\n     }\n \n@@ -111,11 +127,17 @@ public ConfigurationTO read(final HttpServletResponse response, @PathVariable(\"k\n         try {\n             SyncopeConf conf = confDAO.find(key);\n             result = configurationDataBinder.getConfigurationTO(conf);\n+\n+            auditManager.audit(Category.configuration, ConfigurationSubCategory.read, Result.success,\n+                    \"Successfully read conf: \" + key);\n         } catch (MissingConfKeyException e) {\n             LOG.error(\"Could not find configuration key '\" + key + \"', returning null\");\n \n             result = new ConfigurationTO();\n             result.setKey(key);\n+\n+            auditManager.audit(Category.configuration, ConfigurationSubCategory.read, Result.failure,\n+                    \"Could not read conf: \" + key);\n         }\n \n         return result;\n@@ -128,11 +150,13 @@ public ConfigurationTO update(final HttpServletResponse response,\n             @RequestBody final ConfigurationTO configurationTO)\n             throws MissingConfKeyException {\n \n-        SyncopeConf syncopeConfiguration = confDAO.find(configurationTO.getKey());\n+        SyncopeConf conf = confDAO.find(configurationTO.getKey());\n+        conf.setValue(configurationTO.getValue());\n \n-        syncopeConfiguration.setValue(configurationTO.getValue());\n+        auditManager.audit(Category.configuration, ConfigurationSubCategory.update, Result.success,\n+                \"Successfully updated conf: \" + conf.getKey());\n \n-        return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n+        return configurationDataBinder.getConfigurationTO(conf);\n     }\n \n     @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n@@ -162,6 +186,9 @@ public ModelAndView getValidators() {\n             LOG.error(\"While searching for class implementing {}\", Validator.class.getName(), e);\n         }\n \n+        auditManager.audit(Category.configuration, ConfigurationSubCategory.getValidators, Result.success,\n+                \"Successfully listed all validators: \" + validators.size());\n+\n         return new ModelAndView().addObject(validators);\n     }\n \n@@ -194,6 +221,9 @@ public ModelAndView getMailTemplates() {\n         // Only templates available both as HTML and TEXT are considered\n         htmlTemplates.retainAll(textTemplates);\n \n+        auditManager.audit(Category.configuration, ConfigurationSubCategory.getMailTemplates, Result.success,\n+                \"Successfully listed all mail templates: \" + htmlTemplates.size());\n+\n         return new ModelAndView().addObject(htmlTemplates);\n     }\n \n@@ -207,9 +237,13 @@ public void dbExport(final HttpServletResponse response) {\n         try {\n             importExport.export(response.getOutputStream());\n \n-            LOG.debug(\"Default content successfully exported\");\n+            auditManager.audit(Category.configuration, ConfigurationSubCategory.dbExport, Result.success,\n+                    \"Successfully exported database content\");\n+            LOG.debug(\"Databse content successfully exported\");\n         } catch (Throwable t) {\n-            LOG.error(\"While exporting content\", t);\n+            auditManager.audit(Category.configuration, ConfigurationSubCategory.dbExport, Result.failure,\n+                    \"Could not export database content\");\n+            LOG.error(\"While exporting database content\", t);\n         }\n     }\n }"},{"sha":"8111fe4602002f4fd719b4759c2eb40de8f84f9c","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":58,"deletions":11,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6ce963ecc7f8d51d273460bd9336613cc24b49a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6ce963ecc7f8d51d273460bd9336613cc24b49a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=d6ce963ecc7f8d51d273460bd9336613cc24b49a","patch":"@@ -48,6 +48,7 @@\n import org.syncope.client.to.ConnInstanceTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.init.ConnInstanceLoader;\n import org.syncope.core.persistence.beans.ConnInstance;\n import org.syncope.core.persistence.beans.ExternalResource;\n@@ -57,6 +58,9 @@\n import org.syncope.core.propagation.ConnectorFacadeProxy;\n import org.syncope.core.rest.data.ConnInstanceDataBinder;\n import org.syncope.core.util.ConnBundleManager;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.ConnectorSubCategory;\n+import org.syncope.types.AuditElements.Result;\n import org.syncope.types.ConnConfPropSchema;\n import org.syncope.types.ConnConfProperty;\n import org.syncope.types.SyncopeClientExceptionType;\n@@ -65,6 +69,9 @@\n @RequestMapping(\"/connector\")\n public class ConnInstanceController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private ResourceDAO resourceDAO;\n \n@@ -92,7 +99,12 @@ public ConnInstanceTO create(final HttpServletResponse response,\n \n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n+            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.success,\n+                    \"Successfully created connector instance: \" + connInstance.getDisplayName());\n         } catch (Throwable t) {\n+            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n+                    \"Could not create connector instance: \" + connectorTO.getDisplayName());\n+\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n@@ -119,13 +131,18 @@ public ConnInstanceTO update(@RequestBody final ConnInstanceTO connectorTO)\n \n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n-        } catch (RuntimeException e) {\n+            auditManager.audit(Category.connector, ConnectorSubCategory.update, Result.success,\n+                    \"Successfully update connector instance: \" + connInstance.getDisplayName());\n+        } catch (Throwable t) {\n+            auditManager.audit(Category.connector, ConnectorSubCategory.create, Result.failure,\n+                    \"Could not update connector instance: \" + connectorTO.getDisplayName());\n+\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(HttpStatus.BAD_REQUEST);\n \n             SyncopeClientException invalidConnInstance =\n                     new SyncopeClientException(SyncopeClientExceptionType.InvalidConnInstance);\n-            invalidConnInstance.addElement(e.getMessage());\n+            invalidConnInstance.addElement(t.getMessage());\n \n             scce.addException(invalidConnInstance);\n             throw scce;\n@@ -159,6 +176,8 @@ public void delete(@PathVariable(\"connectorId\") Long connectorId)\n         }\n \n         connInstanceDAO.delete(connectorId);\n+        auditManager.audit(Category.connector, ConnectorSubCategory.delete, Result.success,\n+                \"Successfully deleted connector instance: \" + connectorId);\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n@@ -183,6 +202,9 @@ public List<ConnInstanceTO> list(@RequestParam(value = \"lang\", required = false)\n             }\n         }\n \n+        auditManager.audit(Category.connector, ConnectorSubCategory.list, Result.success,\n+                \"Successfully listed all connectors: \" + connInstanceTOs.size());\n+\n         return connInstanceTOs;\n     }\n \n@@ -193,11 +215,13 @@ public ConnInstanceTO read(@PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n \n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n-\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connectorId + \"'\");\n         }\n \n+        auditManager.audit(Category.connector, ConnectorSubCategory.read, Result.success,\n+                \"Successfully read connector: \" + connInstance.getDisplayName());\n+\n         return binder.getConnInstanceTO(connInstance);\n     }\n \n@@ -276,6 +300,9 @@ public List<ConnBundleTO> getBundles(@RequestParam(value = \"lang\", required = fa\n             }\n         }\n \n+        auditManager.audit(Category.connector, ConnectorSubCategory.getBundles, Result.success,\n+                \"Successfully listed all bundles: \" + connectorBundleTOs.size());\n+\n         return connectorBundleTOs;\n     }\n \n@@ -288,7 +315,6 @@ public List<String> getSchemaNames(final HttpServletResponse response,\n             throws NotFoundException {\n \n         final ConnInstance connInstance = connInstanceDAO.find(connectorTO.getId());\n-\n         if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connectorTO.getId() + \"'\");\n         }\n@@ -308,6 +334,10 @@ public List<String> getSchemaNames(final HttpServletResponse response,\n \n         Collections.sort(result);\n \n+        auditManager.audit(Category.connector, ConnectorSubCategory.getSchemaNames, Result.success,\n+                \"Successfully listed all schema names (\" + result.size()\n+                + \") for connector \" + connInstance.getDisplayName());\n+\n         return result;\n     }\n \n@@ -317,11 +347,18 @@ public List<String> getSchemaNames(final HttpServletResponse response,\n     public List<ConnConfProperty> getConfigurationProperties(@PathVariable(\"connectorId\") final Long connectorId)\n             throws NotFoundException {\n \n-        final ConnInstance connector = connInstanceDAO.find(connectorId);\n-        if (connector == null) {\n+        final ConnInstance connInstance = connInstanceDAO.find(connectorId);\n+        if (connInstance == null) {\n             throw new NotFoundException(\"Connector '\" + connectorId + \"'\");\n         }\n-        return new ArrayList<ConnConfProperty>(connector.getConfiguration());\n+\n+        List<ConnConfProperty> result = new ArrayList<ConnConfProperty>(connInstance.getConfiguration());\n+\n+        auditManager.audit(Category.connector, ConnectorSubCategory.getConfigurationProperties, Result.success,\n+                \"Successfully listed all conf properties (\" + result.size()\n+                + \") for connector \" + connInstance.getDisplayName());\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n@@ -333,13 +370,22 @@ public ModelAndView check(final HttpServletResponse response, @RequestBody final\n         final ConnectorFacadeProxy connector =\n                 new ConnectorFacadeProxy(binder.getConnInstance(connectorTO), bundleManager);\n \n+        boolean result;\n         try {\n             connector.test();\n-            return new ModelAndView().addObject(true);\n+            result = true;\n+\n+            auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.success,\n+                    \"Successfully checked connector: \" + connectorTO);\n         } catch (Exception ex) {\n+            auditManager.audit(Category.connector, ConnectorSubCategory.check, Result.failure,\n+                    \"Unsuccessful check for connector: \" + connectorTO);\n+\n             LOG.error(\"Test connection failure {}\", ex);\n-            return new ModelAndView().addObject(false);\n+            result = false;\n         }\n+\n+        return new ModelAndView().addObject(result);\n     }\n \n     /**\n@@ -384,14 +430,15 @@ public ConnInstanceTO readConnectorBean(@PathVariable(\"resourceName\") String res\n             throws NotFoundException {\n \n         ExternalResource resource = resourceDAO.find(resourceName);\n-\n         if (resource == null) {\n-            LOG.error(\"Could not find resource '\" + resourceName + \"'\");\n             throw new NotFoundException(\"Resource '\" + resourceName + \"'\");\n         }\n \n         final ConnectorFacadeProxy connector = connLoader.getConnector(resource);\n \n+        auditManager.audit(Category.connector, ConnectorSubCategory.readConnectorBean, Result.success,\n+                \"Successfully read connector for resource: \" + resourceName);\n+\n         return binder.getConnInstanceTO(connector.getActiveConnInstance());\n     }\n }"},{"sha":"655779fb1044ea505040e65d4ebde1280e332c6e","filename":"core/src/main/java/org/syncope/core/rest/controller/LoggerController.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6ce963ecc7f8d51d273460bd9336613cc24b49a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6ce963ecc7f8d51d273460bd9336613cc24b49a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FLoggerController.java?ref=d6ce963ecc7f8d51d273460bd9336613cc24b49a","patch":"@@ -37,8 +37,12 @@\n import org.syncope.client.to.LoggerTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.SyncopeLogger;\n import org.syncope.core.persistence.dao.LoggerDAO;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.LoggerSubCategory;\n+import org.syncope.types.AuditElements.Result;\n import org.syncope.types.SyncopeClientExceptionType;\n import org.syncope.types.SyncopeLoggerLevel;\n import org.syncope.types.SyncopeLoggerType;\n@@ -47,6 +51,9 @@\n @RequestMapping(\"/logger\")\n public class LoggerController extends AbstractController {\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private LoggerDAO loggerDAO;\n \n@@ -58,6 +65,9 @@ private List<LoggerTO> list(final SyncopeLoggerType type) {\n             result.add(loggerTO);\n         }\n \n+        auditManager.audit(Category.logger, LoggerSubCategory.list, Result.success,\n+                \"Successfully listed all loggers (\" + type + \"): \" + result.size());\n+\n         return result;\n     }\n \n@@ -108,6 +118,10 @@ private LoggerTO setLevel(final String name, final Level level, final SyncopeLog\n \n         LoggerTO result = new LoggerTO();\n         BeanUtils.copyProperties(syncopeLogger, result);\n+\n+        auditManager.audit(Category.logger, LoggerSubCategory.setLevel, Result.success,\n+                String.format(\"Successfully set level %s to logger %s (%s)\", level, name, expectedType));\n+\n         return result;\n     }\n \n@@ -140,6 +154,9 @@ private void delete(final String name, final SyncopeLoggerType expectedType)\n         LoggerContext lc = (LoggerContext) LoggerFactory.getILoggerFactory();\n         Logger logger = lc.getLogger(name);\n         logger.setLevel(Level.OFF);\n+\n+        auditManager.audit(Category.logger, LoggerSubCategory.setLevel, Result.success,\n+                String.format(\"Successfully deleted logger %s (%s)\", name, expectedType));\n     }\n \n     @PreAuthorize(\"hasRole('LOG_DELETE')\")"},{"sha":"da1487d8a5931f9a6a0930f201bdb88ff2fb52a2","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/d6ce963ecc7f8d51d273460bd9336613cc24b49a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/d6ce963ecc7f8d51d273460bd9336613cc24b49a/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=d6ce963ecc7f8d51d273460bd9336613cc24b49a","patch":"@@ -30,9 +30,13 @@\n import org.springframework.security.core.AuthenticationException;\n import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.audit.AuditManager;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.types.CipherAlgorithm;\n+import org.syncope.types.AuditElements.AuthenticationSubCategory;\n+import org.syncope.types.AuditElements.Category;\n+import org.syncope.types.AuditElements.Result;\n \n @Configurable\n public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n@@ -42,6 +46,9 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeAuthenticationProvider.class);\n \n+    @Autowired\n+    private AuditManager auditManager;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n@@ -118,7 +125,10 @@ public Authentication authenticate(final Authentication authentication)\n \n             result = token;\n \n-            LOG.debug(\"User {} authenticated with roles {}\", authentication.getPrincipal(), token.getAuthorities());\n+            auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.success,\n+                    \"Successfully authenticated, with roles: \" + token.getAuthorities());\n+            LOG.debug(\"User {} successfully authenticated, with roles {}\",\n+                    authentication.getPrincipal(), token.getAuthorities());\n \n             if (user != null) {\n                 user.setLastLoginDate(new Date());\n@@ -132,6 +142,8 @@ public Authentication authenticate(final Authentication authentication)\n                 userDAO.save(user);\n             }\n \n+            auditManager.audit(Category.authentication, AuthenticationSubCategory.login, Result.failure,\n+                    \"User \" + authentication.getPrincipal() + \" not authenticated\");\n             LOG.debug(\"User {} not authenticated\", authentication.getPrincipal());\n \n             throw new BadCredentialsException(\"User \" + authentication.getPrincipal() + \" not authenticated\");"}]}