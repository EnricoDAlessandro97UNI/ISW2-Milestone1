{"sha":"32707b3b91361b36719a5a1467cf798b3e4b85af","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMyNzA3YjNiOTEzNjFiMzY3MTlhNWExNDY3Y2Y3OThiM2U0Yjg1YWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-03T16:34:03Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-02-03T16:34:03Z"},"message":"[SYNCOPE-620] Console (JAR) in, now time for console-reference","tree":{"sha":"042fe2c455ca04a584e857e0d148313c15c83c0e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/042fe2c455ca04a584e857e0d148313c15c83c0e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/32707b3b91361b36719a5a1467cf798b3e4b85af","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/32707b3b91361b36719a5a1467cf798b3e4b85af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/32707b3b91361b36719a5a1467cf798b3e4b85af","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/32707b3b91361b36719a5a1467cf798b3e4b85af/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"721f3276e6eb5b54dd6750365c37df83b63da458","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/721f3276e6eb5b54dd6750365c37df83b63da458","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/721f3276e6eb5b54dd6750365c37df83b63da458"}],"stats":{"total":48872,"additions":48769,"deletions":103},"files":[{"sha":"35185f12dd5f3b1366e7b23b2a72d0c6e84f1b66","filename":"syncope620/client/console/pom.xml","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fpom.xml?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,112 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-client</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Client Console</name>\n+  <description>Apache Syncope Client Console</description>\n+  <groupId>org.apache.syncope.client</groupId>\n+  <artifactId>syncope-client-console</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n+  </properties>\n+  \n+  <dependencies>\n+    <dependency> \n+      <groupId>javax.servlet</groupId> \n+      <artifactId>javax.servlet-api</artifactId> \n+      <scope>provided</scope>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.springframework</groupId>\n+      <artifactId>spring-web</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket</artifactId>\n+      <type>pom</type>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket-extensions</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket-datetime</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket-spring</artifactId>\n+      <!-- exclude spring framework that wicket pulls in -->\n+      <exclusions>\n+        <exclusion>\n+          <groupId>org.springframework</groupId>\n+          <artifactId>spring</artifactId>\n+        </exclusion>\n+      </exclusions>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.wicket</groupId>\n+      <artifactId>wicket-auth-roles</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.logging.log4j</groupId>\n+      <artifactId>log4j-core</artifactId>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.client</groupId>\n+      <artifactId>syncope-client-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+  \n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-pmd-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+    \n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+    </resources>\n+  </build>\n+</project>"},{"sha":"daebd4521f170e32d822ce7f54e102004aa7b9a5","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/SyncopeApplication.java","status":"added","additions":305,"deletions":0,"changes":305,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeApplication.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,305 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.XMLRolesReader;\n+import org.apache.syncope.client.console.pages.Configuration;\n+import org.apache.syncope.client.console.pages.InfoModalPage;\n+import org.apache.syncope.client.console.pages.Login;\n+import org.apache.syncope.client.console.pages.Logout;\n+import org.apache.syncope.client.console.pages.Reports;\n+import org.apache.syncope.client.console.pages.Resources;\n+import org.apache.syncope.client.console.pages.Roles;\n+import org.apache.syncope.client.console.pages.Schema;\n+import org.apache.syncope.client.console.pages.Tasks;\n+import org.apache.syncope.client.console.pages.Todo;\n+import org.apache.syncope.client.console.pages.UserSelfModalPage;\n+import org.apache.syncope.client.console.pages.Users;\n+import org.apache.syncope.client.console.pages.WelcomePage;\n+import org.apache.syncope.client.console.resources.FilesystemResource;\n+import org.apache.syncope.client.console.resources.WorkflowDefGETResource;\n+import org.apache.syncope.client.console.resources.WorkflowDefPUTResource;\n+import org.apache.syncope.client.console.rest.UserSelfRestClient;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.RestartResponseAtInterceptPageException;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.WicketRuntimeException;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authorization.IUnauthorizedComponentInstantiationListener;\n+import org.apache.wicket.authorization.UnauthorizedInstantiationException;\n+import org.apache.wicket.authroles.authorization.strategies.role.IRoleCheckingStrategy;\n+import org.apache.wicket.authroles.authorization.strategies.role.RoleAuthorizationStrategy;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.image.Image;\n+import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n+import org.apache.wicket.protocol.http.WebApplication;\n+import org.apache.wicket.request.Request;\n+import org.apache.wicket.request.Response;\n+import org.apache.wicket.request.resource.ContextRelativeResource;\n+import org.apache.wicket.request.resource.IResource;\n+import org.apache.wicket.request.resource.ResourceReference;\n+import org.apache.wicket.spring.injection.annot.SpringComponentInjector;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+/**\n+ * SyncopeApplication class.\n+ */\n+public class SyncopeApplication\n+        extends WebApplication\n+        implements IUnauthorizedComponentInstantiationListener, IRoleCheckingStrategy, Serializable {\n+\n+    private static final long serialVersionUID = -2920378752291913495L;\n+\n+    public static final String IMG_PREFIX = \"/img/menu/\";\n+\n+    public static final String IMG_NOTSEL = \"notsel/\";\n+\n+    private static final String ACTIVITI_MODELER_CONTEXT = \"activiti-modeler\";\n+\n+    private static final int EDIT_PROFILE_WIN_HEIGHT = 550;\n+\n+    private static final int EDIT_PROFILE_WIN_WIDTH = 800;\n+\n+    @Override\n+    protected void init() {\n+        super.init();\n+\n+        getComponentInstantiationListeners().add(new SpringComponentInjector(this));\n+\n+        getResourceSettings().setThrowExceptionOnMissingResource(true);\n+\n+        getSecuritySettings().setAuthorizationStrategy(new RoleAuthorizationStrategy(this));\n+        getSecuritySettings().setUnauthorizedComponentInstantiationListener(this);\n+\n+        getMarkupSettings().setStripWicketTags(true);\n+        getMarkupSettings().setCompressWhitespace(true);\n+\n+        getRequestCycleListeners().add(new SyncopeRequestCycleListener());\n+\n+        final String activitiModelerDirectory = WebApplicationContextUtils.getWebApplicationContext(\n+                WebApplication.get().getServletContext()).getBean(\"activitiModelerDirectory\", String.class);\n+        mountResource(\"/\" + ACTIVITI_MODELER_CONTEXT, new ResourceReference(ACTIVITI_MODELER_CONTEXT) {\n+\n+            private static final long serialVersionUID = -128426276529456602L;\n+\n+            @Override\n+            public IResource getResource() {\n+                return new FilesystemResource(ACTIVITI_MODELER_CONTEXT, activitiModelerDirectory);\n+            }\n+\n+        });\n+        mountResource(\"/workflowDefGET\", new ResourceReference(\"workflowDefGET\") {\n+\n+            private static final long serialVersionUID = -128426276529456602L;\n+\n+            @Override\n+            public IResource getResource() {\n+                return new WorkflowDefGETResource();\n+            }\n+        });\n+        mountResource(\"/workflowDefPUT\", new ResourceReference(\"workflowDefPUT\") {\n+\n+            private static final long serialVersionUID = -128426276529456602L;\n+\n+            @Override\n+            public IResource getResource() {\n+                return new WorkflowDefPUTResource();\n+            }\n+        });\n+    }\n+\n+    public void setupNavigationPanel(final WebPage page, final XMLRolesReader xmlRolesReader, final boolean notsel) {\n+        final ModalWindow infoModal = new ModalWindow(\"infoModal\");\n+        page.add(infoModal);\n+        infoModal.setInitialWidth(350);\n+        infoModal.setInitialHeight(300);\n+        infoModal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        infoModal.setCookieName(\"infoModal\");\n+        infoModal.setPageCreator(new ModalWindow.PageCreator() {\n+\n+            private static final long serialVersionUID = -7834632442532690940L;\n+\n+            @Override\n+            public Page createPage() {\n+                return new InfoModalPage();\n+            }\n+        });\n+\n+        final AjaxLink<Page> infoLink = new AjaxLink<Page>(\"infoLink\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                infoModal.show(target);\n+            }\n+        };\n+        page.add(infoLink);\n+\n+        BookmarkablePageLink<Page> schemaLink = new BookmarkablePageLink<Page>(\"schema\", Schema.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                schemaLink, WebPage.ENABLE, xmlRolesReader.getEntitlement(\"Schema\", \"list\"));\n+        page.add(schemaLink);\n+        schemaLink.add(new Image(\"schemaIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"schema\" + Constants.PNG_EXT)));\n+\n+        BookmarkablePageLink<Page> usersLink = new BookmarkablePageLink<Page>(\"users\", Users.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                usersLink, WebPage.ENABLE, xmlRolesReader.getEntitlement(\"Users\", \"list\"));\n+        page.add(usersLink);\n+        usersLink.add(new Image(\"usersIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"users\" + Constants.PNG_EXT)));\n+\n+        BookmarkablePageLink<Page> rolesLink = new BookmarkablePageLink<Page>(\"roles\", Roles.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                rolesLink, WebPage.ENABLE, xmlRolesReader.getEntitlement(\"Roles\", \"list\"));\n+        page.add(rolesLink);\n+        rolesLink.add(new Image(\"rolesIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"roles\" + Constants.PNG_EXT)));\n+\n+        BookmarkablePageLink<Page> resourcesLink = new BookmarkablePageLink<Page>(\"resources\", Resources.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                resourcesLink, WebPage.ENABLE, xmlRolesReader.getEntitlement(\"Resources\", \"list\"));\n+        page.add(resourcesLink);\n+        resourcesLink.add(new Image(\"resourcesIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"resources\" + Constants.PNG_EXT)));\n+\n+        BookmarkablePageLink<Page> todoLink = new BookmarkablePageLink<Page>(\"todo\", Todo.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                todoLink, WebPage.ENABLE, xmlRolesReader.getEntitlement(\"Approval\", \"list\"));\n+        page.add(todoLink);\n+        todoLink.add(new Image(\"todoIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"todo\" + Constants.PNG_EXT)));\n+\n+        BookmarkablePageLink<Page> reportLink = new BookmarkablePageLink<Page>(\"reports\", Reports.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                reportLink, WebPage.ENABLE, xmlRolesReader.getEntitlement(\"Reports\", \"list\"));\n+        page.add(reportLink);\n+        reportLink.add(new Image(\"reportsIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"reports\" + Constants.PNG_EXT)));\n+\n+        BookmarkablePageLink<Page> configurationLink = new BookmarkablePageLink<Page>(\"configuration\",\n+                Configuration.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                configurationLink, WebPage.ENABLE, xmlRolesReader.getEntitlement(\"Configuration\", \"list\"));\n+        page.add(configurationLink);\n+        configurationLink.add(new Image(\"configurationIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"configuration\" + Constants.PNG_EXT)));\n+\n+        BookmarkablePageLink<Page> taskLink = new BookmarkablePageLink<Page>(\"tasks\", Tasks.class);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                taskLink, WebPage.ENABLE, xmlRolesReader.getEntitlement(\"Tasks\", \"list\"));\n+        page.add(taskLink);\n+        taskLink.add(new Image(\"tasksIcon\", new ContextRelativeResource(IMG_PREFIX + (notsel\n+                ? IMG_NOTSEL\n+                : \"\") + \"tasks\" + Constants.PNG_EXT)));\n+\n+        page.add(new BookmarkablePageLink<Page>(\"logout\", Logout.class));\n+    }\n+\n+    public void setupEditProfileModal(final WebPage page, final UserSelfRestClient userSelfRestClient) {\n+        // Modal window for editing user profile\n+        final ModalWindow editProfileModalWin = new ModalWindow(\"editProfileModal\");\n+        editProfileModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editProfileModalWin.setInitialHeight(EDIT_PROFILE_WIN_HEIGHT);\n+        editProfileModalWin.setInitialWidth(EDIT_PROFILE_WIN_WIDTH);\n+        editProfileModalWin.setCookieName(\"edit-profile-modal\");\n+        page.add(editProfileModalWin);\n+\n+        final AjaxLink<Page> editProfileLink = new AjaxLink<Page>(\"editProfileLink\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                final UserTO userTO;\n+                if (SyncopeSession.get().isAuthenticated()) {\n+                    try {\n+                        userTO = userSelfRestClient.read();\n+                    } catch (Exception e) {\n+                        throw new WicketRuntimeException(e);\n+                    }\n+                } else {\n+                    userTO = new UserTO();\n+                }\n+\n+                editProfileModalWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new UserSelfModalPage(page.getPageReference(), editProfileModalWin, userTO);\n+                    }\n+                });\n+\n+                editProfileModalWin.show(target);\n+            }\n+        };\n+\n+        editProfileLink.add(new Label(\"username\", SyncopeSession.get().getUsername()));\n+\n+        if (\"admin\".equals(SyncopeSession.get().getUsername())) {\n+            editProfileLink.setEnabled(false);\n+        }\n+\n+        page.add(editProfileLink);\n+    }\n+\n+    @Override\n+    public Session newSession(final Request request, final Response response) {\n+        return new SyncopeSession(request);\n+    }\n+\n+    @Override\n+    public Class<? extends Page> getHomePage() {\n+        return SyncopeSession.get().isAuthenticated() ? WelcomePage.class : Login.class;\n+    }\n+\n+    @Override\n+    public void onUnauthorizedInstantiation(final Component component) {\n+        SyncopeSession.get().invalidate();\n+\n+        if (component instanceof Page) {\n+            throw new UnauthorizedInstantiationException(component.getClass());\n+        }\n+\n+        throw new RestartResponseAtInterceptPageException(Login.class);\n+    }\n+\n+    @Override\n+    public boolean hasAnyRole(final org.apache.wicket.authroles.authorization.strategies.role.Roles roles) {\n+        return SyncopeSession.get().hasAnyRole(roles);\n+    }\n+}"},{"sha":"8b27260e7e5ef0c279ee017536736b3ae49992a7","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/SyncopeRequestCycleListener.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeRequestCycleListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeRequestCycleListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeRequestCycleListener.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console;\n+\n+import java.security.AccessControlException;\n+import javax.ws.rs.BadRequestException;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.syncope.client.console.pages.ErrorPage;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.authorization.UnauthorizedInstantiationException;\n+import org.apache.wicket.core.request.handler.PageProvider;\n+import org.apache.wicket.core.request.handler.RenderPageRequestHandler;\n+import org.apache.wicket.markup.html.pages.ExceptionErrorPage;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.protocol.http.PageExpiredException;\n+import org.apache.wicket.request.IRequestHandler;\n+import org.apache.wicket.request.cycle.AbstractRequestCycleListener;\n+import org.apache.wicket.request.cycle.RequestCycle;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SyncopeRequestCycleListener extends AbstractRequestCycleListener {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeRequestCycleListener.class);\n+\n+    /**\n+     * {@inheritDoc}\n+     */\n+    @Override\n+    public IRequestHandler onException(final RequestCycle cycle, final Exception e) {\n+        LOG.error(\"Exception found\", e);\n+\n+        PageParameters errorParameters = new PageParameters();\n+        errorParameters.add(\"errorTitle\", new StringResourceModel(\"alert\", null).getString());\n+\n+        final Page errorPage;\n+        if (e instanceof UnauthorizedInstantiationException) {\n+            errorParameters.add(\"errorMessage\",\n+                    new StringResourceModel(\"unauthorizedInstantiationException\", null).getString());\n+\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e.getCause() instanceof AccessControlException) {\n+            errorParameters.add(\"errorMessage\", new StringResourceModel(\"accessControlException\", null).getString());\n+\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e instanceof PageExpiredException || !(SyncopeSession.get()).isAuthenticated()) {\n+            errorParameters.add(\"errorMessage\", new StringResourceModel(\"pageExpiredException\", null).getString());\n+\n+            errorPage = new ErrorPage(errorParameters);\n+        } else if (e.getCause() instanceof BadRequestException || e.getCause() instanceof WebServiceException\n+                || e.getCause() instanceof SyncopeClientException) {\n+\n+            errorParameters.add(\"errorMessage\", new StringResourceModel(\"restClientException\", null).getString());\n+\n+            errorPage = new ErrorPage(errorParameters);\n+        } else {\n+            // redirect to default Wicket error page\n+            errorPage = new ExceptionErrorPage(e, null);\n+        }\n+\n+        return new RenderPageRequestHandler(new PageProvider(errorPage));\n+    }\n+}"},{"sha":"fc7f7b9bde65f1c07a79999ab8a9fc1209b0f38b","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/SyncopeSession.java","status":"added","additions":185,"deletions":0,"changes":185,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeSession.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,185 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console;\n+\n+import java.text.DateFormat;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Locale;\n+import java.util.Map;\n+import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.to.SyncopeTO;\n+import org.apache.syncope.common.rest.api.service.SyncopeService;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.authroles.authorization.strategies.role.Roles;\n+import org.apache.wicket.protocol.http.WebApplication;\n+import org.apache.wicket.protocol.http.WebSession;\n+import org.apache.wicket.request.Request;\n+import org.springframework.context.ApplicationContext;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+/**\n+ * Custom Syncope Session class.\n+ */\n+public class SyncopeSession extends WebSession {\n+\n+    private static final long serialVersionUID = 7743446298924805872L;\n+\n+    public static final List<Locale> SUPPORTED_LOCALES = Arrays.asList(new Locale[] {\n+        Locale.ENGLISH, Locale.ITALIAN, new Locale(\"pt\", \"BR\") });\n+\n+    private String username;\n+\n+    private String password;\n+\n+    private String version;\n+\n+    private Roles roles = new Roles();\n+\n+    private final SyncopeClientFactoryBean clientFactory;\n+\n+    private final String anonymousUser;\n+\n+    private final String anonymousKey;\n+\n+    private final SyncopeTO syncopeTO;\n+\n+    private final Map<Integer, SyncopeClient> clients =\n+            Collections.synchronizedMap(new HashMap<Integer, SyncopeClient>());\n+\n+    public static SyncopeSession get() {\n+        return (SyncopeSession) Session.get();\n+    }\n+\n+    public SyncopeSession(final Request request) {\n+        super(request);\n+\n+        final ApplicationContext ctx = WebApplicationContextUtils.\n+                getWebApplicationContext(WebApplication.get().getServletContext());\n+\n+        clientFactory = ctx.getBean(SyncopeClientFactoryBean.class).\n+                setContentType(SyncopeClientFactoryBean.ContentType.JSON);\n+        anonymousUser = ctx.getBean(\"anonymousUser\", String.class);\n+        anonymousKey = ctx.getBean(\"anonymousKey\", String.class);\n+\n+        syncopeTO = clientFactory.create(anonymousUser, anonymousKey).getService(SyncopeService.class).info();\n+    }\n+\n+    public SyncopeTO getSyncopeTO() {\n+        return syncopeTO;\n+    }\n+\n+    public void resetClients() {\n+        clients.clear();\n+    }\n+\n+    public <T> T getService(final Class<T> service) {\n+        return getService(service, this.username, this.password);\n+    }\n+\n+    public <T> T getService(final String etag, final Class<T> service) {\n+        T serviceInstance = getService(service, this.username, this.password);\n+        WebClient.client(serviceInstance).match(new EntityTag(etag), false);\n+\n+        return serviceInstance;\n+    }\n+\n+    public <T> void resetClient(final Class<T> service) {\n+        T serviceInstance = getService(service, this.username, this.password);\n+        WebClient.client(serviceInstance).reset();\n+    }\n+\n+    public <T> T getService(final MediaType mediaType, final Class<T> serviceClass) {\n+        T service;\n+\n+        synchronized (clientFactory) {\n+            SyncopeClientFactoryBean.ContentType preType = clientFactory.getContentType();\n+\n+            clientFactory.setContentType(SyncopeClientFactoryBean.ContentType.fromString(mediaType.toString()));\n+            service = clientFactory.create(username, password).getService(serviceClass);\n+            clientFactory.setContentType(preType);\n+        }\n+\n+        return service;\n+    }\n+\n+    public <T> T getAnonymousService(final Class<T> serviceClass) {\n+        return getService(serviceClass, this.anonymousUser, this.anonymousKey);\n+    }\n+\n+    public <T> T getService(final Class<T> serviceClass, final String username, final String password) {\n+        final int clientKey = new HashCodeBuilder().append(username).append(password).toHashCode();\n+\n+        if (!clients.containsKey(clientKey)) {\n+            clients.put(clientKey, clientFactory.create(username, password));\n+        }\n+\n+        return clients.get(clientKey).getService(serviceClass);\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    public void setPassword(final String password) {\n+        this.password = password;\n+    }\n+\n+    public String getVersion() {\n+        return version;\n+    }\n+\n+    public void setVersion(final String version) {\n+        this.version = version;\n+    }\n+\n+    public void setEntitlements(final String[] entitlements) {\n+        String[] defensiveCopy = entitlements.clone();\n+        roles = new Roles(defensiveCopy);\n+    }\n+\n+    public Roles getEntitlements() {\n+        return roles;\n+    }\n+\n+    public boolean isAuthenticated() {\n+        return getUsername() != null;\n+    }\n+\n+    public boolean hasAnyRole(final Roles roles) {\n+        return this.roles.hasAnyRole(roles);\n+    }\n+\n+    public DateFormat getDateFormat() {\n+        final Locale locale = getLocale() == null ? Locale.ENGLISH : getLocale();\n+\n+        return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);\n+    }\n+}"},{"sha":"453e0c0b75e0d7d528252bd0563cf1df3ce02f94","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/ActionTableCheckGroup.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FActionTableCheckGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FActionTableCheckGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FActionTableCheckGroup.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.Collection;\n+import org.apache.wicket.markup.html.form.CheckGroup;\n+import org.apache.wicket.model.IModel;\n+\n+public class ActionTableCheckGroup<T> extends CheckGroup<T> {\n+\n+    private static final long serialVersionUID = 1288270558573401394L;\n+\n+    public ActionTableCheckGroup(final String id, final Collection<T> collection) {\n+        super(id, collection);\n+    }\n+\n+    public ActionTableCheckGroup(final String id, final IModel<Collection<T>> model) {\n+        super(id, model);\n+    }\n+\n+    public boolean isCheckable(final T element) {\n+        return true;\n+    }\n+}"},{"sha":"87cc062d036efe9efcbfe98b7c3421dd9c4d00cf","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/AttrLayoutType.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttrLayoutType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttrLayoutType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttrLayoutType.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+\n+public enum AttrLayoutType {\n+\n+    ADMIN_USER(\"admin.user.layout\", Mode.ADMIN, AttributableType.USER),\n+    SELF_USER(\"self.user.layout\", Mode.SELF, AttributableType.USER),\n+    ADMIN_ROLE(\"admin.role.layout\", Mode.ADMIN, AttributableType.ROLE),\n+    SELF_ROLE(\"self.role.layout\", Mode.SELF, AttributableType.ROLE),\n+    ADMIN_MEMBERSHIP(\"admin.membership.layout\", Mode.ADMIN, AttributableType.MEMBERSHIP),\n+    SELF_MEMBERSHIP(\"self.membership.layout\", Mode.SELF, AttributableType.MEMBERSHIP);\n+\n+    private final String confKey;\n+\n+    private final Mode mode;\n+\n+    private final AttributableType attrType;\n+\n+    AttrLayoutType(final String confKey, final Mode mode, final AttributableType attrType) {\n+        this.confKey = confKey;\n+        this.mode = mode;\n+        this.attrType = attrType;\n+    }\n+\n+    public String getConfKey() {\n+        return confKey;\n+    }\n+\n+    public Mode getMode() {\n+        return mode;\n+    }\n+\n+    public AttributableType getAttrType() {\n+        return attrType;\n+    }\n+\n+    public static List<String> confKeys() {\n+        List<String> confKeys = new ArrayList<String>();\n+        for (AttrLayoutType value : values()) {\n+            confKeys.add(value.getConfKey());\n+        }\n+\n+        return confKeys;\n+    }\n+\n+    public static AttrLayoutType valueOf(final Mode mode, final AttributableType attrType) {\n+        AttrLayoutType result = null;\n+        if (mode == Mode.ADMIN) {\n+            switch (attrType) {\n+                case USER:\n+                    result = ADMIN_USER;\n+                    break;\n+\n+                case MEMBERSHIP:\n+                    result = ADMIN_MEMBERSHIP;\n+                    break;\n+\n+                case ROLE:\n+                    result = ADMIN_ROLE;\n+                    break;\n+\n+                default:\n+            }\n+        } else if (mode == Mode.SELF) {\n+            switch (attrType) {\n+                case USER:\n+                    result = SELF_USER;\n+                    break;\n+\n+                case MEMBERSHIP:\n+                    result = SELF_MEMBERSHIP;\n+                    break;\n+\n+                case ROLE:\n+                    result = SELF_ROLE;\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"4b207a7f039d58dbbfb8d354fe12ba2955e5e223","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/AttributableDataProvider.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttributableDataProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttributableDataProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FAttributableDataProvider.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.rest.AbstractSubjectRestClient;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AttributableDataProvider extends SortableDataProvider<AbstractAttributableTO, String> {\n+\n+    private static final long serialVersionUID = 6267494272884913376L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AttributableDataProvider.class);\n+\n+    private final SortableAttributableProviderComparator comparator;\n+\n+    private String fiql = null;\n+\n+    private final int paginatorRows;\n+\n+    private final boolean filtered;\n+\n+    private final AbstractSubjectRestClient restClient;\n+\n+    public AttributableDataProvider(final AbstractSubjectRestClient restClient,\n+            final int paginatorRows, final boolean filtered) {\n+\n+        super();\n+\n+        this.restClient = restClient;\n+        this.filtered = filtered;\n+        this.paginatorRows = paginatorRows;\n+\n+        // default sorting\n+        setSort(\"id\", SortOrder.ASCENDING);\n+\n+        this.comparator = new SortableAttributableProviderComparator(this);\n+    }\n+\n+    public void setFIQL(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+\n+    @Override\n+    public Iterator<? extends AbstractAttributableTO> iterator(final long first, final long count) {\n+        List<? extends AbstractAttributableTO> result;\n+\n+        final int page = ((int) first / paginatorRows);\n+\n+        if (filtered) {\n+            result = fiql == null\n+                    ? Collections.<AbstractAttributableTO>emptyList()\n+                    : restClient.search(fiql, (page < 0 ? 0 : page) + 1, paginatorRows, getSort());\n+        } else {\n+            result = restClient.list((page < 0 ? 0 : page) + 1, paginatorRows, getSort());\n+        }\n+\n+        Collections.sort(result, comparator);\n+        return result.iterator();\n+    }\n+\n+    @Override\n+    public long size() {\n+        long result;\n+\n+        if (filtered) {\n+            result = fiql == null\n+                    ? 0\n+                    : restClient.searchCount(fiql);\n+        } else {\n+            result = restClient.count();\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public IModel<AbstractAttributableTO> model(final AbstractAttributableTO object) {\n+        return new CompoundPropertyModel<AbstractAttributableTO>(object);\n+    }\n+}"},{"sha":"2e62431435533552d88a0752c6331343251c4899","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/CloseOnESCBehavior.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FCloseOnESCBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FCloseOnESCBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FCloseOnESCBehavior.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import org.apache.wicket.Component;\n+import org.apache.wicket.ajax.AjaxEventBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxCallListener;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+\n+public class CloseOnESCBehavior extends AjaxEventBehavior {\n+\n+    private static final long serialVersionUID = 5826308247642534260L;\n+\n+    public CloseOnESCBehavior(String event) {\n+        super(event);\n+    }\n+\n+    @Override\n+    protected void onEvent(final AjaxRequestTarget target) {\n+        ModalWindow.closeCurrent(target);\n+    }\n+\n+    @Override\n+    protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+        super.updateAjaxAttributes(attributes);\n+\n+        attributes.getAjaxCallListeners().add(new AjaxCallListener() {\n+\n+            private static final long serialVersionUID = 7160235486520935153L;\n+\n+            @Override\n+            public CharSequence getPrecondition(final Component aComponent) {\n+                return \" if(Wicket.Event.keyCode(attrs.event) != 27){return false;}\";\n+            }\n+        });\n+    }\n+}"},{"sha":"3533172603bd08e329380ef1992070269592c219","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/ConnIdSpecialAttributeName.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConnIdSpecialAttributeName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConnIdSpecialAttributeName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConnIdSpecialAttributeName.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,34 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+public final class ConnIdSpecialAttributeName {\n+\n+    public static final String ENABLE = \"__ENABLE__\";\n+\n+    public static final String NAME = \"__NAME__\";\n+\n+    public static final String UID = \"__UID__\";\n+\n+    public static final String PASSWORD = \"__PASSWORD__\";\n+\n+    private ConnIdSpecialAttributeName() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"8f06874743b5e6250ee88dc82e43ace4606ffed1","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/Constants.java","status":"added","additions":110,"deletions":0,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FConstants.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,110 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+public final class Constants {\n+\n+    public static final String ON_CLICK = \"onclick\";\n+\n+    public static final String ON_CHANGE = \"onchange\";\n+\n+    public static final String ON_BLUR = \"onblur\";\n+\n+    public static final String PNG_EXT = \".png\";\n+\n+    public static final String FEEDBACK = \"feedback\";\n+\n+    public static final String OPERATION_SUCCEEDED = \"operation_succeeded\";\n+\n+    public static final String OPERATION_ERROR = \"operation_error\";\n+\n+    public static final String SEARCH_ERROR = \"search_error\";\n+\n+    public static final String ERROR = \"error\";\n+\n+    public static final String PARAM_PASSWORD_RESET_TOKEN = \"pwdResetToken\";\n+\n+    public static final String PREF_USERS_DETAILS_VIEW = \"users.details.view\";\n+\n+    public static final String PREF_USERS_ATTRIBUTES_VIEW = \"users.attributes.view\";\n+\n+    public static final String PREF_USERS_DERIVED_ATTRIBUTES_VIEW = \"users.derived.attributes.view\";\n+\n+    public static final String PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW = \"users.virtual.attributes.view\";\n+\n+    public static final String PREF_CONF_SCHEMA_PAGINATOR_ROWS = \"conf.schema.paginator.rows\";\n+\n+    public static final String PREF_USER_SCHEMA_PAGINATOR_ROWS = \"user.schema.paginator.rows\";\n+\n+    public static final String PREF_USER_DER_SCHEMA_PAGINATOR_ROWS = \"user.derived.schema.paginator.rows\";\n+\n+    public static final String PREF_USER_VIR_SCHEMA_PAGINATOR_ROWS = \"user.virtual.schema.paginator.rows\";\n+\n+    public static final String PREF_ROLE_SCHEMA_PAGINATOR_ROWS = \"role.schema.paginator.rows\";\n+\n+    public static final String PREF_ROLE_DER_SCHEMA_PAGINATOR_ROWS = \"role.derived.schema.paginator.rows\";\n+\n+    public static final String PREF_ROLE_VIR_SCHEMA_PAGINATOR_ROWS = \"role.virtual.schema.paginator.rows\";\n+\n+    public static final String PREF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS = \"membership.schema.paginator.rows\";\n+\n+    public static final String PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS = \"membership.derived.aschema.paginator.rows\";\n+\n+    public static final String PREF_MEMBERSHIP_VIR_SCHEMA_PAGINATOR_ROWS = \"membership.virtual.aschema.paginator.rows\";\n+\n+    public static final String PREF_USERS_PAGINATOR_ROWS = \"users.paginator.rows\";\n+\n+    public static final String PREF_RESOURCES_PAGINATOR_ROWS = \"resources.paginator.rows\";\n+\n+    public static final String PREF_CONNECTORS_PAGINATOR_ROWS = \"connectors.paginator.rows\";\n+\n+    public static final String PREF_NOTIFICATION_PAGINATOR_ROWS = \"notification.paginator.rows\";\n+\n+    public static final String PREF_PROPAGATION_TASKS_PAGINATOR_ROWS = \"proagationtasks.paginator.rows\";\n+\n+    public static final String PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS = \"notificationtasks.paginator.rows\";\n+\n+    public static final String PREF_SCHED_TASKS_PAGINATOR_ROWS = \"schedtasks.paginator.rows\";\n+\n+    public static final String PREF_SYNC_TASKS_PAGINATOR_ROWS = \"synctasks.paginator.rows\";\n+\n+    public static final String PREF_TODO_PAGINATOR_ROWS = \"todo.paginator.rows\";\n+\n+    public static final String PREF_REPORT_PAGINATOR_ROWS = \"report.paginator.rows\";\n+\n+    public static final String PAGEPARAM_CREATE = \"CREATE\";\n+\n+    public static final String PAGEPARAM_CURRENT_PAGE = \"_current_page\";\n+\n+    public static final String PREF_POLICY_PAGINATOR_ROWS = \"policy.paginator.rows\";\n+\n+    /**\n+     * ConnId's GuardedString is not in the classpath.\n+     */\n+    public static final String GUARDED_STRING = \"org.identityconnectors.common.security.GuardedString\";\n+\n+    /**\n+     * ConnId's GuardedByteArray is not in the classpath.\n+     */\n+    public static final String GUARDED_BYTE_ARRAY = \"org.identityconnectors.common.security.GuardedByteArray\";\n+\n+    private Constants() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"e72b7d0bc1fec4dc49839cfd386516650f0730ee","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/DateFormatROModel.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FDateFormatROModel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FDateFormatROModel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FDateFormatROModel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.Date;\n+import org.apache.syncope.client.console.SyncopeSession;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class DateFormatROModel implements IModel<String> {\n+\n+    private static final long serialVersionUID = 6677274580927636121L;\n+\n+    private final PropertyModel model;\n+\n+    public DateFormatROModel(final PropertyModel model) {\n+        this.model = model;\n+    }\n+\n+    @Override\n+    public String getObject() {\n+        return model.getObject() == null\n+                ? \"\"\n+                : SyncopeSession.get().getDateFormat().format((Date) model.getObject());\n+    }\n+\n+    @Override\n+    public void setObject(final String object) {\n+    }\n+\n+    @Override\n+    public void detach() {\n+    }\n+}\n\\ No newline at end of file"},{"sha":"feeba85d4965aa9627eea74e64369fe22af62682","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/HttpResourceStream.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FHttpResourceStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FHttpResourceStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FHttpResourceStream.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.wicket.util.lang.Bytes;\n+import org.apache.wicket.util.resource.AbstractResourceStream;\n+import org.apache.wicket.util.resource.IFixedLocationResourceStream;\n+import org.apache.wicket.util.resource.ResourceStreamNotFoundException;\n+\n+public class HttpResourceStream extends AbstractResourceStream implements IFixedLocationResourceStream {\n+\n+    private static final long serialVersionUID = 5811207817876330189L;\n+\n+    private transient InputStream inputStream;\n+\n+    private String contentType;\n+\n+    private String location;\n+\n+    private String filename;\n+\n+    public HttpResourceStream(final Response response) {\n+        super();\n+\n+        Object entity = response.getEntity();\n+        if (response.getStatusInfo().getStatusCode() == Response.Status.OK.getStatusCode()\n+                && (entity instanceof InputStream)) {\n+\n+            this.inputStream = (InputStream) entity;\n+            this.contentType = response.getHeaderString(HttpHeaders.CONTENT_TYPE);\n+            this.location = response.getLocation() == null ? null : response.getLocation().toASCIIString();\n+            String contentDisposition = response.getHeaderString(HttpHeaders.CONTENT_DISPOSITION);\n+            if (StringUtils.isNotBlank(contentDisposition)) {\n+                String[] splitted = contentDisposition.split(\"=\");\n+                if (splitted != null && splitted.length > 1) {\n+                    this.filename = splitted[1].trim();\n+                }\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public InputStream getInputStream()\n+            throws ResourceStreamNotFoundException {\n+\n+        return inputStream == null\n+                ? new ByteArrayInputStream(new byte[0])\n+                : inputStream;\n+    }\n+\n+    @Override\n+    public Bytes length() {\n+        return inputStream == null\n+                ? Bytes.bytes(0)\n+                : null;\n+    }\n+\n+    @Override\n+    public void close() throws IOException {\n+        // No need for explict closing\n+    }\n+\n+    @Override\n+    public String locationAsString() {\n+        return location;\n+    }\n+\n+    @Override\n+    public String getContentType() {\n+        return contentType == null\n+                ? MediaType.APPLICATION_OCTET_STREAM\n+                : contentType;\n+    }\n+\n+    public String getFilename() {\n+        return filename;\n+    }\n+}"},{"sha":"5cfd3ce41810e1fc71aa8d80dfafa6a6b9ab865a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/JexlHelpUtil.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FJexlHelpUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FJexlHelpUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FJexlHelpUtil.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.link.ExternalLink;\n+\n+public final class JexlHelpUtil {\n+\n+    private static final String JEXL_SYNTAX_URL = \"http://commons.apache.org/jexl/reference/syntax.html\";\n+\n+    private JexlHelpUtil() {\n+        // private constructor for static utility class\n+    }\n+\n+    public static WebMarkupContainer getJexlHelpWebContainer(final String wicketId) {\n+        final WebMarkupContainer jexlHelp = new WebMarkupContainer(wicketId);\n+        jexlHelp.setVisible(false);\n+        jexlHelp.setOutputMarkupPlaceholderTag(true);\n+        jexlHelp.setOutputMarkupId(true);\n+        jexlHelp.add(new ExternalLink(\"jexlLink\", JEXL_SYNTAX_URL));\n+        return jexlHelp;\n+    }\n+\n+    public static AjaxLink<Void> getAjaxLink(final WebMarkupContainer wmc, final String wicketId) {\n+        AjaxLink<Void> questionMarkJexlHelp = new AjaxLink<Void>(wicketId) {\n+\n+            private static final long serialVersionUID = -1838017408000591382L;\n+\n+            private boolean toogle = false;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                // using bitwise inversion as suggested by \n+                // http://pmd.sourceforge.net/pmd-4.2.5/rules/controversial.html#BooleanInversion\n+                toogle ^= true;\n+                wmc.setVisible(toogle);\n+                target.add(wmc);\n+            }\n+        };\n+        return questionMarkJexlHelp;\n+    }\n+}"},{"sha":"118db6d8effd5d26527a89f170046ab6d3111e11","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/MapChoiceRenderer.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMapChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMapChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMapChoiceRenderer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.Map;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+\n+public class MapChoiceRenderer<T, K> implements IChoiceRenderer<T> {\n+\n+    private static final long serialVersionUID = -7452881117778186644L;\n+\n+    private final Map<T, K> map;\n+\n+    public MapChoiceRenderer(final Map<T, K> map) {\n+        this.map = map;\n+    }\n+\n+    @Override\n+    public Object getDisplayValue(final T key) {\n+        return map.get(key);\n+    }\n+\n+    @Override\n+    public String getIdValue(final T key, final int index) {\n+        return key.toString();\n+    }\n+}"},{"sha":"27dad640d8350d1c7aea1ac4e85750567b2dd00f","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/Mode.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMode.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMode.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FMode.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+public enum Mode {\n+\n+    ADMIN,\n+    SELF,\n+    TEMPLATE;\n+\n+}"},{"sha":"c9b27fc816819d29e79e4ddcec8a1fb9929e9ef9","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/PreferenceManager.java","status":"added","additions":177,"deletions":0,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreferenceManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreferenceManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FPreferenceManager.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,177 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Map.Entry;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.wicket.request.Request;\n+import org.apache.wicket.request.Response;\n+import org.apache.wicket.util.cookies.CookieDefaults;\n+import org.apache.wicket.util.cookies.CookieUtils;\n+import org.apache.wicket.util.crypt.Base64;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n+\n+public class PreferenceManager {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(PreferenceManager.class);\n+\n+    private static final String PREFMAN_KEY = \"prefMan\";\n+\n+    private static final int ONE_YEAR_TIME = 60 * 60 * 24 * 365;\n+\n+    private static final TypeReference<Map<String, String>> MAP_TYPE_REF = new TypeReference<Map<String, String>>() {\n+    };\n+\n+    private static final List<Integer> PAGINATOR_CHOICES = Arrays.asList(new Integer[] { 10, 25, 50 });\n+\n+    private final ObjectMapper mapper;\n+\n+    private final CookieUtils cookieUtils;\n+\n+    public PreferenceManager() {\n+        this.mapper = new ObjectMapper();\n+\n+        CookieDefaults cookieDefaults = new CookieDefaults();\n+        cookieDefaults.setMaxAge(ONE_YEAR_TIME);\n+        this.cookieUtils = new CookieUtils(cookieDefaults);\n+    }\n+\n+    public List<Integer> getPaginatorChoices() {\n+        return PAGINATOR_CHOICES;\n+    }\n+\n+    private Map<String, String> getPrefs(final String value) {\n+        Map<String, String> prefs;\n+        try {\n+            if (StringUtils.hasText(value)) {\n+                prefs = mapper.readValue(value, MAP_TYPE_REF);\n+            } else {\n+                throw new Exception(\"Invalid cookie value '\" + value + \"'\");\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(\"No preferences found\", e);\n+            prefs = new HashMap<String, String>();\n+        }\n+\n+        return prefs;\n+    }\n+\n+    private String setPrefs(final Map<String, String> prefs) throws IOException {\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, prefs);\n+\n+        return writer.toString();\n+    }\n+\n+    public String get(final Request request, final String key) {\n+        String result = null;\n+\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n+        if (prefString != null) {\n+            final Map<String, String> prefs = getPrefs(new String(Base64.decodeBase64(prefString.getBytes())));\n+            result = prefs.get(key);\n+        }\n+\n+        return result;\n+    }\n+\n+    public Integer getPaginatorRows(final Request request, final String key) {\n+        Integer result = getPaginatorChoices().get(0);\n+\n+        String value = get(request, key);\n+        if (value != null) {\n+            result = NumberUtils.toInt(value, 10);\n+        }\n+\n+        return result;\n+    }\n+\n+    public List<String> getList(final Request request, final String key) {\n+        final List<String> result = new ArrayList<String>();\n+\n+        final String compound = get(request, key);\n+\n+        if (StringUtils.hasText(compound)) {\n+            String[] items = compound.split(\";\");\n+            result.addAll(Arrays.asList(items));\n+        }\n+\n+        return result;\n+    }\n+\n+    public void set(final Request request, final Response response, final Map<String, List<String>> prefs) {\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n+\n+        final Map<String, String> current = new HashMap<String, String>();\n+        if (prefString != null) {\n+            current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n+        }\n+\n+        // after retrieved previous setting in order to overwrite the key ...\n+        for (Entry<String, List<String>> entry : prefs.entrySet()) {\n+            current.put(entry.getKey(), StringUtils.collectionToDelimitedString(entry.getValue(), \";\"));\n+        }\n+\n+        try {\n+            cookieUtils.save(PREFMAN_KEY, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+        } catch (IOException e) {\n+            LOG.error(\"Could not save {} info: {}\", getClass().getSimpleName(), current, e);\n+        }\n+    }\n+\n+    public void set(final Request request, final Response response, final String key, final String value) {\n+        String prefString = cookieUtils.load(PREFMAN_KEY);\n+\n+        final Map<String, String> current = new HashMap<String, String>();\n+        if (prefString != null) {\n+            current.putAll(getPrefs(new String(Base64.decodeBase64(prefString.getBytes()))));\n+        }\n+\n+        // after retrieved previous setting in order to overwrite the key ...\n+        current.put(key, value);\n+\n+        try {\n+            cookieUtils.save(PREFMAN_KEY, new String(Base64.encodeBase64(setPrefs(current).getBytes())));\n+        } catch (IOException e) {\n+            LOG.error(\"Could not save {} info: {}\", getClass().getSimpleName(), current, e);\n+        }\n+    }\n+\n+    public void setList(final Request request, final Response response, final String key, final List<String> values) {\n+        set(request, response, key, StringUtils.collectionToDelimitedString(values, \";\"));\n+    }\n+\n+    public void setList(final Request request, final Response response, final Map<String, List<String>> prefs) {\n+        set(request, response, prefs);\n+    }\n+}"},{"sha":"c6ab6e48d15ae7d3356329bbc891ae71f36ef0af","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/RoleTreeBuilder.java","status":"added","additions":116,"deletions":0,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRoleTreeBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRoleTreeBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRoleTreeBuilder.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,116 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import javax.swing.tree.DefaultTreeModel;\n+import javax.swing.tree.TreeModel;\n+import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class RoleTreeBuilder {\n+\n+    @Autowired\n+    private RoleRestClient restClient;\n+\n+    private final RoleTOComparator comparator = new RoleTOComparator();\n+\n+    private List<RoleTO> allRoles;\n+\n+    private List<RoleTO> getChildRoles(final long parentRoleId, final List<RoleTO> roles) {\n+        List<RoleTO> result = new ArrayList<RoleTO>();\n+        for (RoleTO role : roles) {\n+            if (role.getParent() == parentRoleId) {\n+                result.add(role);\n+            }\n+        }\n+\n+        Collections.sort(result, comparator);\n+        return result;\n+    }\n+\n+    private void populateSubtree(final DefaultMutableTreeNode subRoot, final List<RoleTO> roles) {\n+        RoleTO role = (RoleTO) subRoot.getUserObject();\n+\n+        DefaultMutableTreeNode child;\n+        for (RoleTO subRoleTO : getChildRoles(role.getKey(), roles)) {\n+            child = new DefaultMutableTreeNode(subRoleTO);\n+            subRoot.add(child);\n+            populateSubtree(child, roles);\n+        }\n+    }\n+\n+    public List<RoleTO> getAllRoles() {\n+        return this.allRoles;\n+    }\n+\n+    public TreeModel build() {\n+        this.allRoles = this.restClient.list();\n+        return build(this.allRoles);\n+    }\n+\n+    public TreeModel build(final List<RoleTO> roles) {\n+        DefaultMutableTreeNode fakeroot = new DefaultMutableTreeNode(new FakeRootRoleTO());\n+\n+        populateSubtree(fakeroot, roles);\n+\n+        return new DefaultTreeModel(fakeroot);\n+    }\n+\n+    private static class RoleTOComparator implements Comparator<RoleTO>, Serializable {\n+\n+        private static final long serialVersionUID = 7085057398406518811L;\n+\n+        @Override\n+        public int compare(final RoleTO r1, final RoleTO r2) {\n+            if (r1.getKey() < r2.getKey()) {\n+                return -1;\n+            }\n+            if (r1.getKey() == r2.getKey()) {\n+                return 0;\n+            }\n+\n+            return 1;\n+        }\n+    }\n+\n+    private static class FakeRootRoleTO extends RoleTO {\n+\n+        private static final long serialVersionUID = 4839183625773925488L;\n+\n+        public FakeRootRoleTO() {\n+            super();\n+\n+            setKey(0);\n+            setName(\"\");\n+            setParent(-1);\n+        }\n+\n+        @Override\n+        public String getDisplayName() {\n+            return \"\";\n+        }\n+    }\n+}"},{"sha":"27e062b49753cfc3ffad448dafc36cba7ab5e6a9","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/RoleUtils.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRoleUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRoleUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRoleUtils.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import org.apache.syncope.common.lib.to.RoleTO;\n+\n+public class RoleUtils {\n+\n+    public static RoleTO findRole(final RoleTreeBuilder roleTreeBuilder, final long roleKey) {\n+        RoleTO found = null;\n+        if (roleTreeBuilder.getAllRoles() != null) {\n+            for (RoleTO roleTO : roleTreeBuilder.getAllRoles()) {\n+                if (roleTO.getKey()== roleKey) {\n+                    found = roleTO;\n+                }\n+            }\n+        }\n+        return found;\n+    }\n+}"},{"sha":"38a60fa825b04b7e1c475b9fe941215a92bcdff4","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/SchemaModalPageFactory.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSchemaModalPageFactory.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import org.apache.syncope.client.console.pages.AbstractSchemaModalPage;\n+import org.apache.syncope.client.console.pages.DerSchemaModalPage;\n+import org.apache.syncope.client.console.pages.PlainSchemaModalPage;\n+import org.apache.syncope.client.console.pages.VirSchemaModalPage;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+\n+public final class SchemaModalPageFactory {\n+\n+    private static final long serialVersionUID = -3533177688264693505L;\n+\n+    private SchemaModalPageFactory() {\n+        // empty constructor for static utility class\n+    }\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public static <T extends AbstractSchemaModalPage> T getSchemaModalPage(\n+            final AttributableType entity, final SchemaType schemaType) {\n+\n+        T page;\n+\n+        switch (schemaType) {\n+            case DERIVED:\n+                page = (T) new DerSchemaModalPage(entity);\n+                break;\n+\n+            case VIRTUAL:\n+                page = (T) new VirSchemaModalPage(entity);\n+                break;\n+\n+            default:\n+                page = (T) new PlainSchemaModalPage(entity);\n+                break;\n+        }\n+\n+        return page;\n+    }\n+}"},{"sha":"7b9164d8b6717391d3a8c3f541ef3ccacdfe156d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/SelectChoiceRenderer.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+\n+public class SelectChoiceRenderer<T> implements IChoiceRenderer<T> {\n+\n+    private static final long serialVersionUID = -3242441544405909243L;\n+\n+    @Override\n+    public Object getDisplayValue(T obj) {\n+        if (obj instanceof SelectOption) {\n+            return ((SelectOption) obj).getDisplayValue();\n+        } else {\n+            return obj.toString();\n+        }\n+    }\n+\n+    @Override\n+    public String getIdValue(T obj, int i) {\n+        return obj.toString();\n+    }\n+}"},{"sha":"839df70d1d2d361c11576890310a909c0a16653b","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/SelectOption.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSelectOption.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSelectOption.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSelectOption.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public class SelectOption implements Serializable {\n+\n+    private static final long serialVersionUID = 2961127533930849828L;\n+\n+    private String displayValue;\n+\n+    private String keyValue;\n+\n+    public SelectOption(final String displayValue, final String keyValue) {\n+        this.displayValue = displayValue;\n+        this.keyValue = keyValue;\n+    }\n+\n+    public String getDisplayValue() {\n+        return displayValue;\n+    }\n+\n+    public void setDisplayValue(final String displayValue) {\n+        this.displayValue = displayValue;\n+    }\n+\n+    public String getKeyValue() {\n+        return keyValue;\n+    }\n+\n+    public void setKeyValue(final String keyValue) {\n+        this.keyValue = keyValue;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null || !(obj instanceof SelectOption)) {\n+            return false;\n+        }\n+\n+        return (keyValue == null && ((SelectOption) obj).keyValue == null) || keyValue != null\n+                && keyValue.equals(((SelectOption) obj).keyValue);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return keyValue;\n+    }\n+}"},{"sha":"15fcddb3dfcb8f3fb4eaeb301b9e93f807550736","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/SortableAttributableProviderComparator.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableAttributableProviderComparator.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.Arrays;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+\n+public class SortableAttributableProviderComparator extends SortableDataProviderComparator<AbstractAttributableTO> {\n+\n+    private static final long serialVersionUID = 1775967163571699258L;\n+\n+    private static final Set<String> INLINE_PROPS = new HashSet<String>(Arrays.asList(\n+            new String[] { \"id\", \"status\", \"token\", \"username\" }));\n+\n+    public SortableAttributableProviderComparator(final SortableDataProvider<AbstractAttributableTO, String> provider) {\n+        super(provider);\n+    }\n+\n+    @Override\n+    public int compare(final AbstractAttributableTO attributable1, AbstractAttributableTO attributable2) {\n+        if (INLINE_PROPS.contains(provider.getSort().getProperty())) {\n+            return super.compare(attributable1, attributable2);\n+        }\n+\n+        return super.compare(new AttrModel(attributable1), new AttrModel(attributable2));\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private class AttrModel extends AbstractReadOnlyModel<Comparable> {\n+\n+        private static final long serialVersionUID = -7856686374020091808L;\n+\n+        private final Map<String, AttrTO> attrs;\n+\n+        private final Map<String, AttrTO> derAttrs;\n+\n+        private final Map<String, AttrTO> virAttrs;\n+\n+        public AttrModel(final AbstractAttributableTO attributableTO) {\n+            super();\n+\n+            this.attrs = attributableTO.getPlainAttrMap();\n+            this.derAttrs = attributableTO.getDerAttrMap();\n+            this.virAttrs = attributableTO.getVirAttrMap();\n+        }\n+\n+        /**\n+         * @see UserAttrColumn constructor\n+         */\n+        @Override\n+        public Comparable getObject() {\n+            int hashPos = provider.getSort().getProperty().indexOf('#');\n+\n+            SchemaType schemaType = null;\n+            final String schema;\n+            if (hashPos == -1) {\n+                schema = provider.getSort().getProperty();\n+            } else {\n+                String[] splitted = provider.getSort().getProperty().split(\"#\");\n+                try {\n+                    schemaType = SchemaType.valueOf(splitted[0]);\n+                } catch (IllegalArgumentException e) {\n+                    // this should never happen\n+                }\n+                schema = provider.getSort().getProperty().substring(hashPos + 1);\n+            }\n+\n+            final AttrTO attr;\n+            if (schemaType == null) {\n+                attr = this.attrs.get(schema);\n+            } else {\n+                switch (schemaType) {\n+                    case PLAIN:\n+                    default:\n+                        attr = this.attrs.get(schema);\n+                        break;\n+\n+                    case DERIVED:\n+                        attr = this.derAttrs.get(schema);\n+                        break;\n+\n+                    case VIRTUAL:\n+                        attr = this.virAttrs.get(schema);\n+                        break;\n+                }\n+            }\n+\n+            Comparable result = null;\n+\n+            List<String> values = attr == null ? null : attr.getValues();\n+            if (values != null && !values.isEmpty()) {\n+                result = values.iterator().next();\n+            }\n+\n+            return result;\n+        }\n+    }\n+}"},{"sha":"560015299a33f95f4d98ba212c6923f5825cf268","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/SortableDataProviderComparator.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FSortableDataProviderComparator.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.io.Serializable;\n+import java.util.Comparator;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class SortableDataProviderComparator<T extends Object> implements Comparator<T>, Serializable {\n+\n+    private static final long serialVersionUID = -8897687699977460543L;\n+\n+    protected final SortableDataProvider<T, String> provider;\n+\n+    public SortableDataProviderComparator(final SortableDataProvider<T, String> provider) {\n+        this.provider = provider;\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    protected int compare(final IModel<Comparable> model1, final IModel<Comparable> model2) {\n+        int result;\n+\n+        if (model1.getObject() == null && model2.getObject() == null) {\n+            result = 0;\n+        } else if (model1.getObject() == null) {\n+            result = 1;\n+        } else if (model2.getObject() == null) {\n+            result = -1;\n+        } else {\n+            result = model1.getObject().compareTo(model2.getObject());\n+        }\n+\n+        result = provider.getSort().isAscending()\n+                ? result\n+                : -result;\n+\n+        return result;\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    @Override\n+    public int compare(final T object1, final T object2) {\n+        IModel<Comparable> model1 = new PropertyModel<Comparable>(object1, provider.getSort().getProperty());\n+        IModel<Comparable> model2 = new PropertyModel<Comparable>(object2, provider.getSort().getProperty());\n+\n+        return compare(model1, model2);\n+    }\n+}"},{"sha":"3a0b446d05fe14640a44b6393986832b7fb5f1e1","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/XMLRolesReader.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FXMLRolesReader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FXMLRolesReader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FXMLRolesReader.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,118 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import javax.xml.parsers.DocumentBuilder;\n+import javax.xml.parsers.DocumentBuilderFactory;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.w3c.dom.Document;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+/**\n+ * XMLRolesReader singleton class.\n+ */\n+public class XMLRolesReader {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(XMLRolesReader.class);\n+\n+    private String authorizations;\n+\n+    private Map<Pair<String, String>, String> authMap;\n+\n+    public void setAuthorizations(final String authorizations) {\n+        this.authorizations = authorizations;\n+    }\n+\n+    private void init() {\n+        authMap = new HashMap<Pair<String, String>, String>();\n+\n+        DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();\n+        dbf.setNamespaceAware(true);\n+        try {\n+            DocumentBuilder db = dbf.newDocumentBuilder();\n+            Document doc = db.parse(getClass().getResource(\"/\" + authorizations).openStream());\n+            doc.getDocumentElement().normalize();\n+\n+            Node authNode = null;\n+            NodeList root = doc.getChildNodes();\n+            for (int i = 0; i < root.getLength() && authNode == null; i++) {\n+                if (\"auth\".equals(root.item(i).getNodeName())) {\n+                    authNode = root.item(i);\n+                }\n+            }\n+            if (authNode == null) {\n+                throw new IllegalArgumentException(\"Could not find root <auth> node\");\n+            }\n+\n+            NodeList pages = authNode.getChildNodes();\n+            for (int i = 0; i < pages.getLength(); i++) {\n+                if (\"page\".equals(pages.item(i).getNodeName())) {\n+                    String page = pages.item(i).getAttributes().getNamedItem(\"id\").getTextContent();\n+\n+                    NodeList actions = pages.item(i).getChildNodes();\n+                    for (int j = 0; j < actions.getLength(); j++) {\n+                        if (\"action\".equals(actions.item(j).getNodeName())) {\n+                            String action = actions.item(j).getAttributes().getNamedItem(\"id\").getTextContent();\n+\n+                            NodeList entitlements = actions.item(j).getChildNodes();\n+                            for (int k = 0; k < entitlements.getLength(); k++) {\n+                                if (\"entitlement\".equals(entitlements.item(k).getNodeName())) {\n+                                    String entitlement = entitlements.item(k).getTextContent();\n+                                    authMap.put(new ImmutablePair<String, String>(page, action), entitlement);\n+                                }\n+                            }\n+                        }\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"While initializing parsing of {}\", authorizations, e);\n+        }\n+    }\n+\n+    /**\n+     * Get entitlement required for page / action.\n+     *\n+     * @param pageId page\n+     * @param actionId action\n+     * @return entitlement required\n+     */\n+    public String getEntitlement(final String pageId, final String actionId) {\n+        synchronized (this) {\n+            if (authMap == null) {\n+                init();\n+            }\n+        }\n+\n+        Pair<String, String> key = new ImmutablePair<String, String>(pageId, actionId);\n+        return authMap.containsKey(key)\n+                ? authMap.get(key)\n+                : StringUtils.EMPTY;\n+    }\n+}"},{"sha":"c10f55c47579fabb8ea800a9c0ef1afdc38e4972","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/status/AbstractStatusBeanProvider.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FAbstractStatusBeanProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FAbstractStatusBeanProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FAbstractStatusBeanProvider.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons.status;\n+\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.IModel;\n+\n+public abstract class AbstractStatusBeanProvider extends SortableDataProvider<StatusBean, String> {\n+\n+    private static final long serialVersionUID = 4287357360778016173L;\n+\n+    private SortableDataProviderComparator<StatusBean> comparator;\n+\n+    public AbstractStatusBeanProvider(final String sort) {\n+        //Default sorting\n+        setSort(sort, SortOrder.ASCENDING);\n+        comparator = new SortableDataProviderComparator<StatusBean>(this);\n+    }\n+\n+    @Override\n+    public Iterator<StatusBean> iterator(final long first, final long count) {\n+        List<StatusBean> list = getStatusBeans();\n+        Collections.sort(list, comparator);\n+        return list.subList((int) first, (int) first + (int) count).iterator();\n+    }\n+\n+    @Override\n+    public long size() {\n+        return getStatusBeans().size();\n+    }\n+\n+    @Override\n+    public IModel<StatusBean> model(final StatusBean resource) {\n+        return new AbstractReadOnlyModel<StatusBean>() {\n+\n+            private static final long serialVersionUID = -7802635613997243712L;\n+\n+            @Override\n+            public StatusBean getObject() {\n+                return resource;\n+            }\n+        };\n+    }\n+\n+    public abstract List<StatusBean> getStatusBeans();\n+\n+}"},{"sha":"be038dbba7606557317a04ea20e258e7bbdcccef","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/status/ConnObjectWrapper.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FConnObjectWrapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FConnObjectWrapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FConnObjectWrapper.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons.status;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+\n+public class ConnObjectWrapper implements Serializable {\n+\n+    private static final long serialVersionUID = 9083721948999924299L;\n+\n+    private final AbstractAttributableTO attributable;\n+\n+    private final String resourceName;\n+\n+    private final ConnObjectTO connObjectTO;\n+\n+    public ConnObjectWrapper(final AbstractAttributableTO attributable, final String resourceName,\n+            final ConnObjectTO connObjectTO) {\n+\n+        this.attributable = attributable;\n+        this.resourceName = resourceName;\n+        this.connObjectTO = connObjectTO;\n+    }\n+\n+    public AbstractAttributableTO getAttributable() {\n+        return attributable;\n+    }\n+\n+    public String getResourceName() {\n+        return resourceName;\n+    }\n+\n+    public ConnObjectTO getConnObjectTO() {\n+        return connObjectTO;\n+    }\n+\n+}"},{"sha":"7198c2ce94fec272b9680ef80dc42cd95188f7a6","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/status/Status.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatus.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons.status;\n+\n+public enum Status {\n+\n+    NOT_YET_SUBMITTED(\"\"),\n+    CREATED(\"created\"),\n+    ACTIVE(\"active\"),\n+    SUSPENDED(\"inactive\"),\n+    UNDEFINED(\"undefined\"),\n+    OBJECT_NOT_FOUND(\"objectnotfound\");\n+\n+    public boolean isActive() {\n+        return this == ACTIVE;\n+    }\n+\n+    private Status(final String name) {\n+        this.name = name;\n+    }\n+\n+    private final String name;\n+\n+    @Override\n+    public String toString() {\n+        return name;\n+    }\n+\n+}"},{"sha":"96ddd1440c77fa0e913e142cf83414c1123299fa","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusBean.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusBean.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons.status;\n+\n+import java.io.Serializable;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n+import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+\n+public class StatusBean implements Serializable {\n+\n+    private static final long serialVersionUID = -5207260204921071129L;\n+\n+    private final Long attributableKey;\n+\n+    private final String attributableName;\n+\n+    private final String resourceName;\n+\n+    private String accountLink = null;\n+\n+    private Status status = Status.OBJECT_NOT_FOUND;\n+\n+    private boolean linked = true;\n+\n+    public StatusBean(final AbstractAttributableTO attributable, String resourceName) {\n+        this.attributableKey = attributable.getKey();\n+        this.attributableName = attributable instanceof UserTO\n+                ? ((UserTO) attributable).getUsername() : ((RoleTO) attributable).getName();\n+        this.resourceName = resourceName;\n+    }\n+\n+    public String getAccountLink() {\n+        return accountLink;\n+    }\n+\n+    public void setAccountLink(final String accountLink) {\n+        this.accountLink = accountLink;\n+    }\n+\n+    public String getResourceName() {\n+        return resourceName;\n+    }\n+\n+    public Status getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(final Status status) {\n+        this.status = status;\n+    }\n+\n+    public Long getAttributableId() {\n+        return attributableKey;\n+    }\n+\n+    public String getAttributableName() {\n+        return attributableName;\n+    }\n+\n+    public boolean isLinked() {\n+        return linked;\n+    }\n+\n+    public void setLinked(boolean linked) {\n+        this.linked = linked;\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return ReflectionToStringBuilder.toString(this, ToStringStyle.MULTI_LINE_STYLE);\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+}"},{"sha":"8d59e25f61f308199c8fdf0186d9563528ebd10f","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/commons/status/StatusUtils.java","status":"added","additions":322,"deletions":0,"changes":322,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2Fstatus%2FStatusUtils.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,322 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.commons.status;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.client.console.commons.ConnIdSpecialAttributeName;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.ImagePanel;\n+import org.apache.syncope.client.console.panels.StatusPanel;\n+import org.apache.syncope.client.console.rest.AbstractSubjectRestClient;\n+import org.apache.syncope.common.lib.mod.StatusMod;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.behavior.Behavior;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.image.Image;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class StatusUtils implements Serializable {\n+\n+    private static final long serialVersionUID = 7238009174387184309L;\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(StatusUtils.class);\n+\n+    public static final String IMG_STATUES = \"../statuses/\";\n+\n+    private final AbstractSubjectRestClient restClient;\n+\n+    public StatusUtils(final AbstractSubjectRestClient restClient) {\n+        this.restClient = restClient;\n+    }\n+\n+    public List<ConnObjectWrapper> getConnectorObjects(final AbstractSubjectTO subject) {\n+        final List<ConnObjectWrapper> objects = new ArrayList<>();\n+        objects.addAll(getConnectorObjects(subject, subject.getResources()));\n+        return objects;\n+    }\n+\n+    public List<ConnObjectWrapper> getConnectorObjects(\n+            final Collection<AbstractSubjectTO> subjects, final Collection<String> resources) {\n+\n+        final List<ConnObjectWrapper> objects = new ArrayList<>();\n+\n+        for (AbstractSubjectTO subject : subjects) {\n+            objects.addAll(getConnectorObjects(subject, resources));\n+        }\n+\n+        return objects;\n+    }\n+\n+    private List<ConnObjectWrapper> getConnectorObjects(\n+            final AbstractSubjectTO subject, final Collection<String> resources) {\n+\n+        final List<ConnObjectWrapper> objects = new ArrayList<>();\n+\n+        for (String resourceName : resources) {\n+            ConnObjectTO objectTO = null;\n+            try {\n+                objectTO = restClient.getConnectorObject(resourceName, subject.getKey());\n+            } catch (Exception e) {\n+                LOG.warn(\"ConnObject '{}' not found on resource '{}'\", subject.getKey(), resourceName);\n+            }\n+\n+            objects.add(new ConnObjectWrapper(subject, resourceName, objectTO));\n+        }\n+\n+        return objects;\n+    }\n+\n+    public StatusBean getStatusBean(\n+            final AbstractAttributableTO attributable,\n+            final String resourceName,\n+            final ConnObjectTO objectTO,\n+            final boolean isRole) {\n+        \n+        final StatusBean statusBean = new StatusBean(attributable, resourceName);\n+\n+        if (objectTO != null) {\n+            final Boolean enabled = isEnabled(objectTO);\n+\n+            final Status status = enabled == null\n+                    ? (isRole ? Status.ACTIVE : Status.UNDEFINED)\n+                    : enabled\n+                    ? Status.ACTIVE\n+                    : Status.SUSPENDED;\n+\n+            final String accountLink = getAccountLink(objectTO);\n+\n+            statusBean.setStatus(status);\n+            statusBean.setAccountLink(accountLink);\n+        }\n+\n+        return statusBean;\n+    }\n+\n+    private Boolean isEnabled(final ConnObjectTO objectTO) {\n+        final Map<String, AttrTO> attributeTOs = objectTO.getPlainAttrMap();\n+\n+        final AttrTO status = attributeTOs.get(ConnIdSpecialAttributeName.ENABLE);\n+\n+        return status != null && status.getValues() != null && !status.getValues().isEmpty()\n+                ? Boolean.parseBoolean(status.getValues().get(0))\n+                : null;\n+    }\n+\n+    private String getAccountLink(final ConnObjectTO objectTO) {\n+        final Map<String, AttrTO> attributeTOs = objectTO == null\n+                ? Collections.<String, AttrTO>emptyMap()\n+                : objectTO.getPlainAttrMap();\n+\n+        final AttrTO name = attributeTOs.get(ConnIdSpecialAttributeName.NAME);\n+\n+        return name != null && name.getValues() != null && !name.getValues().isEmpty()\n+                ? name.getValues().get(0)\n+                : null;\n+    }\n+\n+    public static StatusMod buildStatusMod(final Collection<StatusBean> statuses) {\n+        return buildStatusMod(statuses, null);\n+    }\n+\n+    public static StatusMod buildStatusMod(final Collection<StatusBean> statuses, final Boolean enable) {\n+        StatusMod statusMod = new StatusMod();\n+        statusMod.setOnSyncope(false);\n+\n+        for (StatusBean status : statuses) {\n+            if (enable == null\n+                    || (enable && !status.getStatus().isActive()) || (!enable && status.getStatus().isActive())) {\n+\n+                if (\"syncope\".equalsIgnoreCase(status.getResourceName())) {\n+                    statusMod.setOnSyncope(true);\n+                } else {\n+                    statusMod.getResourceNames().add(status.getResourceName());\n+                }\n+\n+            }\n+        }\n+\n+        return statusMod;\n+    }\n+\n+    public static void update(\n+            final AbstractAttributableTO attributable,\n+            final StatusPanel statusPanel,\n+            final AjaxRequestTarget target,\n+            final Collection<String> resourcesToAdd,\n+            final Collection<String> resourcesToRemove) {\n+\n+        if (statusPanel != null) {\n+            Map<String, StatusBean> statusMap = new LinkedHashMap<String, StatusBean>();\n+            for (StatusBean statusBean : statusPanel.getStatusBeans()) {\n+                statusMap.put(statusBean.getResourceName(), statusBean);\n+            }\n+\n+            for (String resourceName : resourcesToAdd) {\n+                if (!statusMap.keySet().contains(resourceName)) {\n+                    StatusBean statusBean;\n+                    if (statusPanel.getInitialStatusBeanMap().containsKey(resourceName)) {\n+                        statusBean = statusPanel.getInitialStatusBeanMap().get(resourceName);\n+                    } else {\n+                        statusBean = new StatusBean(attributable, resourceName);\n+                        statusBean.setStatus(Status.NOT_YET_SUBMITTED);\n+                    }\n+\n+                    statusMap.put(statusBean.getResourceName(), statusBean);\n+                }\n+            }\n+\n+            for (String resource : resourcesToRemove) {\n+                statusMap.remove(resource);\n+            }\n+\n+            statusPanel.updateStatusBeans(new ArrayList<StatusBean>(statusMap.values()));\n+            target.add(statusPanel);\n+        }\n+    }\n+\n+    public ConnObjectTO getConnObjectTO(\n+            final Long attributableId, final String resourceName, final List<ConnObjectWrapper> objects) {\n+\n+        for (ConnObjectWrapper object : objects) {\n+            if (attributableId.equals(object.getAttributable().getKey())\n+                    && resourceName.equalsIgnoreCase(object.getResourceName())) {\n+\n+                return object.getConnObjectTO();\n+            }\n+        }\n+\n+        return null;\n+    }\n+\n+    public Image getStatusImage(final String componentId, final Status status) {\n+        final String alt, title, statusName;\n+\n+        switch (status) {\n+\n+            case NOT_YET_SUBMITTED:\n+                statusName = Status.UNDEFINED.toString();\n+                alt = \"undefined icon\";\n+                title = \"Not yet submitted\";\n+                break;\n+\n+            case ACTIVE:\n+                statusName = Status.ACTIVE.toString();\n+                alt = \"active icon\";\n+                title = \"Enabled\";\n+                break;\n+\n+            case UNDEFINED:\n+                statusName = Status.UNDEFINED.toString();\n+                alt = \"undefined icon\";\n+                title = \"Undefined status\";\n+                break;\n+\n+            case OBJECT_NOT_FOUND:\n+                statusName = Status.OBJECT_NOT_FOUND.toString();\n+                alt = \"notfound icon\";\n+                title = \"Not found\";\n+                break;\n+\n+            default:\n+                statusName = Status.SUSPENDED.toString();\n+                alt = \"inactive icon\";\n+                title = \"Disabled\";\n+        }\n+\n+        final Image img = new Image(componentId, IMG_STATUES + statusName + Constants.PNG_EXT);\n+\n+        img.add(new Behavior() {\n+\n+            private static final long serialVersionUID = 1469628524240283489L;\n+\n+            @Override\n+            public void onComponentTag(final Component component, final ComponentTag tag) {\n+                tag.put(\"alt\", alt);\n+                tag.put(\"title\", title);\n+            }\n+        });\n+\n+        return img;\n+    }\n+\n+    public ImagePanel getStatusImagePanel(final String componentId, final Status status) {\n+        final String alt, title, statusName;\n+\n+        switch (status) {\n+\n+            case NOT_YET_SUBMITTED:\n+                statusName = Status.UNDEFINED.toString();\n+                alt = \"undefined icon\";\n+                title = \"Not yet submitted\";\n+                break;\n+\n+            case ACTIVE:\n+                statusName = Status.ACTIVE.toString();\n+                alt = \"active icon\";\n+                title = \"Enabled\";\n+                break;\n+\n+            case UNDEFINED:\n+                statusName = Status.UNDEFINED.toString();\n+                alt = \"undefined icon\";\n+                title = \"Undefined status\";\n+                break;\n+\n+            case OBJECT_NOT_FOUND:\n+                statusName = Status.OBJECT_NOT_FOUND.toString();\n+                alt = \"notfound icon\";\n+                title = \"Not found\";\n+                break;\n+\n+            default:\n+                statusName = Status.SUSPENDED.toString();\n+                alt = \"inactive icon\";\n+                title = \"Disabled\";\n+        }\n+\n+        final ImagePanel imagePanel = new ImagePanel(componentId, IMG_STATUES + statusName + Constants.PNG_EXT);\n+        imagePanel.add(new Behavior() {\n+\n+            private static final long serialVersionUID = 1469628524240283489L;\n+\n+            @Override\n+            public void onComponentTag(final Component component, final ComponentTag tag) {\n+                tag.put(\"alt\", alt);\n+                tag.put(\"title\", title);\n+            }\n+        });\n+\n+        return imagePanel;\n+    }\n+}"},{"sha":"b52991abb5a0b40e928abcc36da7348e08f04097","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/init/MIMETypesInitializer.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FMIMETypesInitializer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.init;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.wicket.util.io.IOUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class MIMETypesInitializer {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(MIMETypesInitializer.class);\n+\n+    private List<String> mimeTypes;\n+\n+    public void load() {\n+        final Set<String> mediaTypes = new HashSet<>();\n+        this.mimeTypes = new ArrayList<>();\n+        try {\n+            final String mimeTypesFile = IOUtils.toString(getClass().getResourceAsStream(\"/MIMETypes\"));\n+            for (String fileRow : mimeTypesFile.split(\"\\n\")) {\n+                if (StringUtils.isNotBlank(fileRow) && !fileRow.startsWith(\"#\")) {\n+                    mediaTypes.add(fileRow);\n+                }\n+            }\n+            this.mimeTypes.addAll(mediaTypes);\n+            Collections.sort(this.mimeTypes);\n+        } catch (Exception e) {\n+            LOG.error(\"Error reading file MIMETypes from resources\", e);\n+        }\n+    }\n+\n+    public List<String> getMimeTypes() {\n+        LOG.debug(\"Returning loaded MIME types list\");\n+        return mimeTypes;\n+    }\n+}"},{"sha":"11739bec6b9921fbdc50e0eabc4635351ea67da0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/init/PreviewPanelClassInitializer.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FPreviewPanelClassInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FPreviewPanelClassInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FPreviewPanelClassInitializer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.init;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.syncope.client.console.preview.BinaryPreview;\n+import org.apache.syncope.client.console.preview.PreviewerClassScanner;\n+import org.apache.syncope.client.console.wicket.markup.html.form.preview.AbstractBinaryPreviewer;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class PreviewPanelClassInitializer {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(PreviewPanelClassInitializer.class);\n+\n+    @Autowired\n+    private PreviewerClassScanner classScanner;\n+\n+    private List<Class<? extends AbstractBinaryPreviewer>> classes;\n+\n+    public void load() {\n+        classes = new ArrayList<Class<? extends AbstractBinaryPreviewer>>();\n+        for (Class<? extends AbstractBinaryPreviewer> candidate : classScanner.getComponentClasses()) {\n+            classes.add(candidate);\n+        }\n+    }\n+\n+    public List<Class<? extends AbstractBinaryPreviewer>> getClasses() {\n+        LOG.debug(\"Returning loaded classes: {}\", classes);\n+        return classes;\n+    }\n+\n+    public Class<? extends AbstractBinaryPreviewer> getClass(final String mimeType) {\n+        LOG.debug(\"Searching for previewer class for MIME type: {}\", mimeType);\n+        Class<? extends AbstractBinaryPreviewer> previewer = null;\n+        for (Class<? extends AbstractBinaryPreviewer> candidate : classes) {\n+            LOG.debug(\"Evaluating previewer class {} for MIME type {}\", candidate.getName(), mimeType);\n+            if (Arrays.asList(candidate.getAnnotation(BinaryPreview.class).mimeTypes()).contains(mimeType)) {\n+                LOG.debug(\"Found existing previewer for MIME type {}: {}\", mimeType, candidate.getName());\n+                previewer = candidate;\n+            }\n+        }\n+        return previewer;\n+    }\n+}"},{"sha":"116f82c26f4040d240fc028229dc248a58acabd4","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/init/SpringContextInitializer.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FSpringContextInitializer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FSpringContextInitializer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Finit%2FSpringContextInitializer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.init;\n+\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.stereotype.Component;\n+\n+/**\n+ * Take care of all initializations needed by Syncope Console to run up and safe.\n+ */\n+@Component\n+@Configurable\n+public class SpringContextInitializer implements InitializingBean {\n+\n+    @Autowired\n+    private PreviewPanelClassInitializer previewPanelClassInitializer;\n+\n+    @Autowired\n+    private MIMETypesInitializer mimeTypesInitializer;\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        previewPanelClassInitializer.load();\n+        mimeTypesInitializer.load();\n+    }\n+\n+}"},{"sha":"ca330d8fc2f6a99a7957a0b82ecb9487a22414d0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/AbstractBasePage.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractBasePage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,133 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.XMLRolesReader;\n+import org.apache.syncope.client.console.init.MIMETypesInitializer;\n+import org.apache.syncope.client.console.panels.NotificationPanel;\n+import org.apache.syncope.client.console.rest.ConfigurationRestClient;\n+import org.apache.syncope.client.console.rest.ReportRestClient;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n+import org.apache.syncope.client.console.rest.UserRestClient;\n+import org.apache.syncope.client.console.rest.UserSelfRestClient;\n+import org.apache.syncope.client.console.wicket.markup.head.MetaHeaderItem;\n+import org.apache.wicket.markup.head.HeaderItem;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.head.PriorityHeaderItem;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class AbstractBasePage extends WebPage {\n+\n+    private static final long serialVersionUID = 8611724965544132636L;\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractBasePage.class);\n+\n+    protected static final String TASKS = \"Tasks\";\n+\n+    protected static final String FORM = \"form\";\n+\n+    protected static final String CANCEL = \"cancel\";\n+\n+    protected static final String SUBMIT = \"submit\";\n+\n+    protected static final String APPLY = \"apply\";\n+\n+    protected static final String NAME = \"name\";\n+\n+    protected final HeaderItem meta = new MetaHeaderItem(\"X-UA-Compatible\", \"IE=edge\");\n+\n+    @SpringBean\n+    protected XMLRolesReader xmlRolesReader;\n+\n+    @SpringBean\n+    protected UserRestClient userRestClient;\n+\n+    @SpringBean\n+    protected UserSelfRestClient userSelfRestClient;\n+\n+    @SpringBean\n+    protected RoleRestClient roleRestClient;\n+\n+    @SpringBean\n+    protected TaskRestClient taskRestClient;\n+\n+    @SpringBean\n+    protected SchemaRestClient schemaRestClient;\n+\n+    @SpringBean\n+    protected ResourceRestClient resourceRestClient;\n+\n+    @SpringBean\n+    protected ReportRestClient reportRestClient;\n+\n+    @SpringBean\n+    protected ConfigurationRestClient confRestClient;\n+\n+    @SpringBean\n+    protected MIMETypesInitializer mimeTypesInitializer;\n+\n+    protected NotificationPanel feedbackPanel;\n+\n+    /**\n+     * Response flag set by the Modal Window after the operation is completed.\n+     */\n+    protected boolean modalResult = false;\n+\n+    public AbstractBasePage() {\n+        this(null);\n+    }\n+\n+    public AbstractBasePage(final PageParameters parameters) {\n+        super(parameters);\n+\n+        feedbackPanel = new NotificationPanel(Constants.FEEDBACK);\n+        feedbackPanel.setOutputMarkupId(true);\n+        add(feedbackPanel);\n+    }\n+\n+    public NotificationPanel getFeedbackPanel() {\n+        return feedbackPanel;\n+    }\n+\n+    public boolean isModalResult() {\n+        return modalResult;\n+    }\n+\n+    public void setModalResult(final boolean operationResult) {\n+        this.modalResult = operationResult;\n+    }\n+\n+    @Override\n+    public void renderHead(final IHeaderResponse response) {\n+        super.renderHead(response);\n+        response.render(new PriorityHeaderItem(meta));\n+    }\n+\n+}"},{"sha":"5cc8885c23c907dcd017d4c966917dd0678f1cc0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/AbstractSchedTaskModalPage.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSchedTaskModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,132 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.DateFormatROModel;\n+import org.apache.syncope.client.console.wicket.markup.html.CrontabContainer;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Modal window with Task form (to stop and start execution).\n+ */\n+public abstract class AbstractSchedTaskModalPage extends TaskModalPage {\n+\n+    private static final long serialVersionUID = 2892005971093059242L;\n+\n+    protected CrontabContainer crontab;\n+\n+    public AbstractSchedTaskModalPage(final ModalWindow window, final SchedTaskTO taskTO,\n+            final PageReference pageRef) {\n+\n+        super(taskTO);\n+\n+        crontab = new CrontabContainer(\"crontab\", new PropertyModel<String>(taskTO, \"cronExpression\"),\n+                taskTO.getCronExpression());\n+        form.add(crontab);\n+\n+        final AjaxTextFieldPanel name =\n+                new AjaxTextFieldPanel(\"name\", \"name\", new PropertyModel<String>(taskTO, \"name\"));\n+        name.setEnabled(true);\n+        profile.add(name);\n+\n+        final AjaxTextFieldPanel description = new AjaxTextFieldPanel(\"description\", \"description\",\n+                new PropertyModel<String>(taskTO, \"description\"));\n+        description.setEnabled(true);\n+        profile.add(description);\n+\n+        final AjaxTextFieldPanel lastExec = new AjaxTextFieldPanel(\"lastExec\", getString(\"lastExec\"),\n+                new DateFormatROModel(new PropertyModel<String>(taskTO, \"lastExec\")));\n+        lastExec.setEnabled(false);\n+        profile.add(lastExec);\n+\n+        final AjaxTextFieldPanel nextExec = new AjaxTextFieldPanel(\"nextExec\", getString(\"nextExec\"),\n+                new DateFormatROModel(new PropertyModel<String>(taskTO, \"nextExec\")));\n+        nextExec.setEnabled(false);\n+        profile.add(nextExec);\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(APPLY)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                SchedTaskTO taskTO = (SchedTaskTO) form.getModelObject();\n+                taskTO.setCronExpression(StringUtils.hasText(taskTO.getCronExpression())\n+                        ? crontab.getCronExpression()\n+                        : null);\n+\n+                try {\n+                    submitAction(taskTO);\n+\n+                    ((BasePage) pageRef.getPage()).setModalResult(true);\n+\n+                    window.close(target);\n+                } catch (SyncopeClientException e) {\n+                    LOG.error(\"While creating or updating task\", e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+\n+        if (taskTO.getKey() > 0) {\n+            MetaDataRoleAuthorizationStrategy.authorize(submit, RENDER, xmlRolesReader.getEntitlement(TASKS,\n+                    \"update\"));\n+        } else {\n+            MetaDataRoleAuthorizationStrategy.authorize(submit, RENDER, xmlRolesReader.getEntitlement(TASKS,\n+                    \"create\"));\n+        }\n+\n+        form.add(submit);\n+        form.add(cancel);\n+    }\n+\n+    protected abstract void submitAction(SchedTaskTO taskTO);\n+\n+}"},{"sha":"1c1bd0f78c4707afadd0e685d47947a6d8a8bae8","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/AbstractSchemaModalPage.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSchemaModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+\n+/**\n+ * Modal window with Schema form.\n+ */\n+public abstract class AbstractSchemaModalPage<T extends AbstractSchemaTO> extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 7369215690388444748L;\n+\n+    protected AttributableType kind;\n+\n+    public AbstractSchemaModalPage(final AttributableType kind) {\n+        this.kind = kind;\n+    }\n+\n+    public abstract void setSchemaModalPage(PageReference callerPageRef, ModalWindow window, T schema,\n+            boolean createFlag);\n+\n+    public AttributableType getKind() {\n+        return kind;\n+    }\n+}"},{"sha":"f5dfbcaf0f72c7df0b6863063ef982e3a2872729","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/AbstractStatusModalPage.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractStatusModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.wicket.markup.html.panel.Fragment;\n+\n+public class AbstractStatusModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 6633408683036028540L;\n+\n+    public AbstractStatusModalPage() {\n+        add(new Fragment(\"pwdMgtFields\", \"emptyFragment\", this));\n+    }\n+}"},{"sha":"aa62b414f1b1bdce49f6fcd0da7c74e3ff5853fb","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/AbstractSyncTaskModalPage.java","status":"added","additions":209,"deletions":0,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSyncTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSyncTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FAbstractSyncTaskModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,209 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.SelectChoiceRenderer;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+\n+/**\n+ * Abstract Modal window for Sync and Push Task form.\n+ */\n+public abstract class AbstractSyncTaskModalPage extends AbstractSchedTaskModalPage {\n+\n+    private static final long serialVersionUID = 2148403203517274669L;\n+\n+    protected AjaxDropDownChoicePanel<MatchingRule> matchingRule;\n+\n+    protected AjaxDropDownChoicePanel<UnmatchingRule> unmatchingRule;\n+\n+    protected abstract List<String> getSyncActions();\n+\n+    final IModel<List<String>> allResources = new LoadableDetachableModel<List<String>>() {\n+\n+        private static final long serialVersionUID = 5275935387613157437L;\n+\n+        @Override\n+        protected List<String> load() {\n+            final List<String> resourceNames = new ArrayList<>();\n+\n+            for (ResourceTO resourceTO : resourceRestClient.getAll()) {\n+                resourceNames.add(resourceTO.getKey());\n+            }\n+\n+            Collections.sort(resourceNames);\n+            return resourceNames;\n+        }\n+    };\n+\n+    final IModel<List<String>> syncActionsClasses = new LoadableDetachableModel<List<String>>() {\n+\n+        private static final long serialVersionUID = 5275935387613157438L;\n+\n+        @Override\n+        protected List<String> load() {\n+            return getSyncActions();\n+        }\n+    };\n+\n+    public AbstractSyncTaskModalPage(\n+            final ModalWindow window, final AbstractProvisioningTaskTO taskTO, final PageReference pageRef) {\n+\n+        super(window, taskTO, pageRef);\n+\n+        final AjaxDropDownChoicePanel<String> resource = new AjaxDropDownChoicePanel<>(\"resource\",\n+                getString(\"resourceName\"), new PropertyModel<String>(taskTO, \"resource\"));\n+        resource.setChoices(allResources.getObject());\n+        resource.setChoiceRenderer(new SelectChoiceRenderer<String>());\n+        resource.addRequiredLabel();\n+        resource.setEnabled(taskTO.getKey() == 0);\n+        resource.setStyleSheet(\"ui-widget-content ui-corner-all long_dynamicsize\");\n+\n+        profile.add(resource);\n+\n+        final WebMarkupContainer syncActionsClassNames = new WebMarkupContainer(\"syncActionsClassNames\");\n+        syncActionsClassNames.setOutputMarkupId(true);\n+        profile.add(syncActionsClassNames);\n+\n+        final AjaxLink<Void> first = new IndicatingAjaxLink<Void>(\"first\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                taskTO.getActionsClassNames().add(StringUtils.EMPTY);\n+                setVisible(false);\n+                target.add(syncActionsClassNames);\n+            }\n+        };\n+        first.setOutputMarkupPlaceholderTag(true);\n+        first.setVisible(taskTO.getActionsClassNames().isEmpty());\n+        syncActionsClassNames.add(first);\n+\n+        final ListView<String> actionsClasses = new ListView<String>(\n+                \"actionsClasses\", new PropertyModel<List<String>>(taskTO, \"actionsClassNames\")) {\n+\n+                    private static final long serialVersionUID = 9101744072914090143L;\n+\n+                    @Override\n+                    protected void populateItem(final ListItem<String> item) {\n+                        final String className = item.getModelObject();\n+\n+                        final DropDownChoice<String> actionsClass = new DropDownChoice<String>(\n+                                \"actionsClass\", new Model<String>(className), syncActionsClasses.getObject());\n+                        actionsClass.setNullValid(true);\n+                        actionsClass.setRequired(true);\n+                        actionsClass.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                            private static final long serialVersionUID = -1107858522700306810L;\n+\n+                            @Override\n+                            protected void onUpdate(final AjaxRequestTarget target) {\n+                                taskTO.getActionsClassNames().set(item.getIndex(), actionsClass.getModelObject());\n+                                target.add(syncActionsClassNames);\n+                            }\n+                        });\n+                        actionsClass.setRequired(true);\n+                        actionsClass.setOutputMarkupId(true);\n+                        actionsClass.setRequired(true);\n+                        item.add(actionsClass);\n+\n+                        AjaxLink<Void> minus = new IndicatingAjaxLink<Void>(\"drop\") {\n+\n+                            private static final long serialVersionUID = -7978723352517770644L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target) {\n+                                taskTO.getActionsClassNames().remove(className);\n+                                first.setVisible(taskTO.getActionsClassNames().isEmpty());\n+                                target.add(syncActionsClassNames);\n+                            }\n+                        };\n+                        item.add(minus);\n+\n+                        final AjaxLink<Void> plus = new IndicatingAjaxLink<Void>(\"add\") {\n+\n+                            private static final long serialVersionUID = -7978723352517770644L;\n+\n+                            @Override\n+                            public void onClick(final AjaxRequestTarget target) {\n+                                taskTO.getActionsClassNames().add(StringUtils.EMPTY);\n+                                target.add(syncActionsClassNames);\n+                            }\n+                        };\n+                        plus.setOutputMarkupPlaceholderTag(true);\n+                        plus.setVisible(item.getIndex() == taskTO.getActionsClassNames().size() - 1);\n+                        item.add(plus);\n+                    }\n+                };\n+        syncActionsClassNames.add(actionsClasses);\n+\n+        syncActionsClassNames.setEnabled(!syncActionsClasses.getObject().isEmpty());\n+\n+        final AjaxCheckBoxPanel creates = new AjaxCheckBoxPanel(\"performCreate\", getString(\"creates\"),\n+                new PropertyModel<Boolean>(taskTO, \"performCreate\"));\n+        profile.add(creates);\n+\n+        final AjaxCheckBoxPanel updates = new AjaxCheckBoxPanel(\"performUpdate\", getString(\"updates\"),\n+                new PropertyModel<Boolean>(taskTO, \"performUpdate\"));\n+        profile.add(updates);\n+\n+        final AjaxCheckBoxPanel deletes = new AjaxCheckBoxPanel(\"performDelete\", getString(\"updates\"),\n+                new PropertyModel<Boolean>(taskTO, \"performDelete\"));\n+        profile.add(deletes);\n+\n+        final AjaxCheckBoxPanel syncStatus = new AjaxCheckBoxPanel(\"syncStatus\", getString(\"syncStatus\"),\n+                new PropertyModel<Boolean>(taskTO, \"syncStatus\"));\n+        profile.add(syncStatus);\n+\n+        matchingRule = new AjaxDropDownChoicePanel<MatchingRule>(\n+                \"matchingRule\", \"matchingRule\", new PropertyModel<MatchingRule>(taskTO, \"matchingRule\"));\n+        matchingRule.setChoices(Arrays.asList(MatchingRule.values()));\n+        ((DropDownChoice) matchingRule.getField()).setNullValid(false);\n+\n+        unmatchingRule = new AjaxDropDownChoicePanel<UnmatchingRule>(\n+                \"unmatchingRule\", \"unmatchingRule\", new PropertyModel<UnmatchingRule>(taskTO, \"unmatchingRule\"));\n+        unmatchingRule.setChoices(Arrays.asList(UnmatchingRule.values()));\n+        ((DropDownChoice) unmatchingRule.getField()).setNullValid(false);\n+    }\n+}"},{"sha":"05658fc9a504f56b03d21945567c52764175be77","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ActivitiModelerPopupPage.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FActivitiModelerPopupPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FActivitiModelerPopupPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FActivitiModelerPopupPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.wicket.markup.html.WebPage;\n+\n+public class ActivitiModelerPopupPage extends WebPage {\n+\n+    private static final long serialVersionUID = -7031206743629422898L;\n+\n+}"},{"sha":"79deeb05e72c2e0618ac5e5fb99c46eb38659f7b","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ApprovalModalPage.java","status":"added","additions":286,"deletions":0,"changes":286,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovalModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovalModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FApprovalModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,286 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.io.Serializable;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.MapChoiceRenderer;\n+import org.apache.syncope.client.console.rest.ApprovalRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.DateTimeFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.SpinnerFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.list.AltListView;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.WorkflowFormPropertyTO;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class ApprovalModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -8847854414429745216L;\n+\n+    private final static int USER_WIN_HEIGHT = 550;\n+\n+    private final static int USER_WIN_WIDTH = 800;\n+\n+    @SpringBean\n+    private ApprovalRestClient restClient;\n+\n+    private final ModalWindow editUserWin;\n+\n+    public ApprovalModalPage(final PageReference pageRef, final ModalWindow window, final WorkflowFormTO formTO) {\n+        super();\n+\n+        IModel<List<WorkflowFormPropertyTO>> formProps = new LoadableDetachableModel<List<WorkflowFormPropertyTO>>() {\n+\n+            private static final long serialVersionUID = 3169142472626817508L;\n+\n+            @Override\n+            protected List<WorkflowFormPropertyTO> load() {\n+                return formTO.getProperties();\n+            }\n+        };\n+\n+        final ListView<WorkflowFormPropertyTO> propView =\n+                new AltListView<WorkflowFormPropertyTO>(\"propView\", formProps) {\n+\n+                    private static final long serialVersionUID = 9101744072914090143L;\n+\n+                    @Override\n+                    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+                    protected void populateItem(final ListItem<WorkflowFormPropertyTO> item) {\n+                        final WorkflowFormPropertyTO prop = item.getModelObject();\n+\n+                        Label label = new Label(\"key\", prop.getName() == null\n+                                        ? prop.getId()\n+                                        : prop.getName());\n+                        item.add(label);\n+\n+                        FieldPanel field;\n+                        switch (prop.getType()) {\n+                            case Boolean:\n+                                field = new AjaxDropDownChoicePanel(\"value\", label.getDefaultModelObjectAsString(),\n+                                        new Model<Boolean>(Boolean.valueOf(prop.getValue()))).setChoices(Arrays.asList(\n+                                                new String[] { \"Yes\", \"No\" }));\n+                                break;\n+\n+                            case Date:\n+                                SimpleDateFormat df = StringUtils.isNotBlank(prop.getDatePattern())\n+                                        ? new SimpleDateFormat(prop.getDatePattern())\n+                                        : new SimpleDateFormat();\n+                                Date parsedDate = null;\n+                                if (StringUtils.isNotBlank(prop.getValue())) {\n+                                    try {\n+                                        parsedDate = df.parse(prop.getValue());\n+                                    } catch (ParseException e) {\n+                                        LOG.error(\"Unparsable date: {}\", prop.getValue(), e);\n+                                    }\n+                                }\n+\n+                                field = new DateTimeFieldPanel(\"value\", label.getDefaultModelObjectAsString(),\n+                                        new Model<Date>(parsedDate), df.toLocalizedPattern());\n+                                break;\n+\n+                            case Enum:\n+                                MapChoiceRenderer<String, String> enumCR =\n+                                new MapChoiceRenderer<String, String>(prop.getEnumValues());\n+\n+                                field = new AjaxDropDownChoicePanel(\"value\", label.getDefaultModelObjectAsString(),\n+                                        new Model(prop.getValue())).setChoiceRenderer(enumCR).setChoices(new Model() {\n+\n+                                    private static final long serialVersionUID = -858521070366432018L;\n+\n+                                    @Override\n+                                    public Serializable getObject() {\n+                                        return new ArrayList<String>(prop.getEnumValues().keySet());\n+                                    }\n+                                });\n+                                break;\n+\n+                            case Long:\n+                                field = new SpinnerFieldPanel<Long>(\"value\", label.getDefaultModelObjectAsString(),\n+                                        Long.class, new Model<Long>(NumberUtils.toLong(prop.getValue())),\n+                                        null, null);\n+                                break;\n+\n+                            case String:\n+                            default:\n+                                field = new AjaxTextFieldPanel(\"value\", PARENT_PATH,\n+                                        new Model<String>(prop.getValue()));\n+                                break;\n+                        }\n+\n+                        field.setReadOnly(!prop.isWritable());\n+                        if (prop.isRequired()) {\n+                            field.addRequiredLabel();\n+                        }\n+\n+                        item.add(field);\n+                    }\n+                };\n+\n+        final AjaxButton userDetails = new IndicatingAjaxButton(\"userDetails\",\n+                new Model<String>(getString(\"userDetails\"))) {\n+\n+                    private static final long serialVersionUID = -4804368561204623354L;\n+\n+                    @Override\n+                    protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                        editUserWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ViewUserModalPage(ApprovalModalPage.this.getPageReference(), editUserWin,\n+                                        userRestClient.read(formTO.getUserKey())) {\n+\n+                                    private static final long serialVersionUID = -2819994749866481607L;\n+\n+                                    @Override\n+                                    protected void closeAction(final AjaxRequestTarget target, final Form form) {\n+                                        setResponsePage(ApprovalModalPage.this);\n+                                    }\n+                                };\n+                            }\n+                        });\n+\n+                        editUserWin.show(target);\n+                    }\n+                };\n+        MetaDataRoleAuthorizationStrategy.authorize(userDetails, ENABLE,\n+                xmlRolesReader.getEntitlement(\"Users\", \"read\"));\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new Model<String>(getString(SUBMIT))) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+\n+                Map<String, WorkflowFormPropertyTO> props = formTO.getPropertyMap();\n+\n+                for (int i = 0; i < propView.size(); i++) {\n+                    @SuppressWarnings(\"unchecked\")\n+                    ListItem<WorkflowFormPropertyTO> item = (ListItem<WorkflowFormPropertyTO>) propView.get(i);\n+                    String input = ((FieldPanel) item.get(\"value\")).getField().getInput();\n+\n+                    if (!props.containsKey(item.getModelObject().getId())) {\n+                        props.put(item.getModelObject().getId(), new WorkflowFormPropertyTO());\n+                    }\n+\n+                    if (item.getModelObject().isWritable()) {\n+                        switch (item.getModelObject().getType()) {\n+                            case Boolean:\n+                                props.get(item.getModelObject().getId()).setValue(String.valueOf(\"0\".equals(input)));\n+                                break;\n+\n+                            case Date:\n+                            case Enum:\n+                            case String:\n+                            case Long:\n+                            default:\n+                                props.get(item.getModelObject().getId()).setValue(input);\n+                                break;\n+                        }\n+                    }\n+                }\n+\n+                formTO.getProperties().clear();\n+                formTO.getProperties().addAll(props.values());\n+                try {\n+                    restClient.submitForm(formTO);\n+\n+                    ((Todo) pageRef.getPage()).setModalResult(true);\n+                    window.close(target);\n+                } catch (SyncopeClientException e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    LOG.error(\"While submitting form {}\", formTO, e);\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form form) {\n+                // nothing\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+\n+        Form form = new Form(FORM);\n+        form.add(propView);\n+        form.add(userDetails);\n+        form.add(submit);\n+        form.add(cancel);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(form, ENABLE, xmlRolesReader.getEntitlement(\"Approval\",\n+                SUBMIT));\n+\n+        editUserWin = new ModalWindow(\"editUserWin\");\n+        editUserWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editUserWin.setInitialHeight(USER_WIN_HEIGHT);\n+        editUserWin.setInitialWidth(USER_WIN_WIDTH);\n+        editUserWin.setCookieName(\"edit-user-modal\");\n+        add(editUserWin);\n+\n+        add(form);\n+    }\n+}"},{"sha":"20892dd5c69224ccd2b8f01a2875ca98d11f5528","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/BaseModalPage.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBaseModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBaseModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBaseModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.CloseOnESCBehavior;\n+\n+/**\n+ * Syncope Modal Window.\n+ */\n+public abstract class BaseModalPage extends AbstractBasePage {\n+\n+    private static final long serialVersionUID = -1443079028368471943L;\n+\n+    public BaseModalPage() {\n+        super();\n+\n+        add(new CloseOnESCBehavior(\"keyup\"));\n+    }\n+}"},{"sha":"2540c37aae71a4e34e1c4525d713ec0e159c0b44","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.SyncopeApplication;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.IAjaxIndicatorAware;\n+import org.apache.wicket.behavior.Behavior;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+/**\n+ * Syncope Wicket base-page.\n+ */\n+public class BasePage extends AbstractBasePage implements IAjaxIndicatorAware {\n+\n+    private static final long serialVersionUID = 1571997737305598502L;\n+\n+    public BasePage() {\n+        this(null);\n+    }\n+\n+    public BasePage(final PageParameters parameters) {\n+        super(parameters);\n+\n+        pageSetup();\n+    }\n+\n+    private void pageSetup() {\n+        ((SyncopeApplication) getApplication()).setupNavigationPanel(this, xmlRolesReader, true);\n+\n+        final String kind = getClass().getSimpleName().toLowerCase();\n+        final BookmarkablePageLink kindLink = (BookmarkablePageLink) get(kind);\n+        if (kindLink != null) {\n+            kindLink.add(new Behavior() {\n+\n+                private static final long serialVersionUID = 1469628524240283489L;\n+\n+                @Override\n+                public void onComponentTag(final Component component, final ComponentTag tag) {\n+                    tag.put(\"class\", kind);\n+                }\n+            });\n+\n+            Component kindIcon = kindLink.get(0);\n+            if (kindIcon != null) {\n+                kindIcon.add(new Behavior() {\n+\n+                    private static final long serialVersionUID = 1469628524240283489L;\n+\n+                    @Override\n+                    public void onComponentTag(final Component component, final ComponentTag tag) {\n+                        tag.put(\"src\", \"../..\" + SyncopeApplication.IMG_PREFIX + kind + Constants.PNG_EXT);\n+                    }\n+                });\n+            }\n+        }\n+\n+        ((SyncopeApplication) getApplication()).setupEditProfileModal(this, userSelfRestClient);\n+    }\n+\n+    @Override\n+    public String getAjaxIndicatorMarkupId() {\n+        return \"veil\";\n+    }\n+\n+    /**\n+     * Set a WindowClosedCallback for a ModalWindow instance.\n+     *\n+     * @param window window\n+     * @param container container\n+     */\n+    protected void setWindowClosedCallback(final ModalWindow window, final WebMarkupContainer container) {\n+\n+        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                target.add(container);\n+                if (isModalResult()) {\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                    feedbackPanel.refresh(target);\n+                    setModalResult(false);\n+                }\n+            }\n+        });\n+    }\n+}"},{"sha":"856f4692f313b34287d1912fe31a3a8792cc7639","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/BasePopupPage.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePopupPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePopupPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePopupPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+public class BasePopupPage extends AbstractBasePage {\n+\n+    private static final long serialVersionUID = -2633667311332659505L;\n+\n+}"},{"sha":"0733f636d0b921607d6dc18d0d08e5afc93892a6","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/BulkActionModalPage.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.lang.reflect.InvocationTargetException;\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.to.BulkAction;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.springframework.beans.BeanUtils;\n+\n+public class BulkActionModalPage<T, S> extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 4114026480146090962L;\n+\n+    public BulkActionModalPage(\n+            final ModalWindow window,\n+            final Collection<T> items,\n+            final List<IColumn<T, S>> columns,\n+            final Collection<ActionLink.ActionType> actions,\n+            final BaseRestClient bulkActionExecutor,\n+            final String idFieldName,\n+            final String pageId) {\n+\n+        super();\n+\n+        final SortableDataProvider<T, S> dataProvider = new SortableDataProvider<T, S>() {\n+\n+            private static final long serialVersionUID = 5291903859908641954L;\n+\n+            @Override\n+            public Iterator<? extends T> iterator(final long first, final long count) {\n+                return items.iterator();\n+            }\n+\n+            @Override\n+            public long size() {\n+                return items.size();\n+            }\n+\n+            @Override\n+            public IModel<T> model(final T object) {\n+                return new CompoundPropertyModel<T>(object);\n+            }\n+        };\n+\n+        add(new AjaxFallbackDefaultDataTable<T, S>(\n+                \"selectedObjects\",\n+                new ArrayList<IColumn<T, S>>(columns.subList(1, columns.size() - 1)),\n+                dataProvider,\n+                Integer.MAX_VALUE).setVisible(items != null && !items.isEmpty()));\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        final ActionLinksPanel actionPanel = new ActionLinksPanel(\"actions\", new Model(), getPageReference());\n+        add(actionPanel);\n+\n+        for (ActionLink.ActionType action : actions) {\n+            final BulkAction bulkAction = new BulkAction();\n+            for (T item : items) {\n+                try {\n+                    bulkAction.getTargets().add(getTargetId(item, idFieldName).toString());\n+                } catch (Exception e) {\n+                    LOG.error(\"Error retrieving item id {}\", idFieldName, e);\n+                }\n+            }\n+\n+            switch (action) {\n+                case DELETE:\n+                    bulkAction.setOperation(BulkAction.Type.DELETE);\n+                    break;\n+                case SUSPEND:\n+                    bulkAction.setOperation(BulkAction.Type.SUSPEND);\n+                    break;\n+                case REACTIVATE:\n+                    bulkAction.setOperation(BulkAction.Type.REACTIVATE);\n+                    break;\n+                case EXECUTE:\n+                    bulkAction.setOperation(BulkAction.Type.EXECUTE);\n+                    break;\n+                case DRYRUN:\n+                    bulkAction.setOperation(BulkAction.Type.DRYRUN);\n+                    break;\n+                default:\n+                    LOG.error(\"Bulk action type not supported\");\n+            }\n+\n+            actionPanel.add(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        final BulkActionResult res = (BulkActionResult) bulkActionExecutor.getClass().\n+                                getMethod(\"bulkAction\", BulkAction.class).invoke(bulkActionExecutor, bulkAction);\n+\n+                        setResponsePage(new BulkActionResultModalPage<>(window, items, columns, res, idFieldName));\n+                    } catch (Exception e) {\n+                        error(getString(Constants.ERROR)\n+                                + \": Operation \" + bulkAction.getOperation() + \" not supported\");\n+                        feedbackPanel.refresh(target);\n+                    }\n+\n+                }\n+            }, action, pageId, !items.isEmpty());\n+        }\n+\n+        final Form<Void> form = new Form<Void>(FORM);\n+        add(form);\n+\n+        final AjaxButton cancel =\n+                new ClearIndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL), getPageReference()) {\n+\n+                    private static final long serialVersionUID = -958724007591692537L;\n+\n+                    @Override\n+                    protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                        window.close(target);\n+                    }\n+                };\n+\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+    }\n+\n+    private Object getTargetId(final Object target, final String idFieldName)\n+            throws IllegalAccessException, InvocationTargetException {\n+\n+        return BeanUtils.getPropertyDescriptor(target.getClass(), idFieldName).\n+                getReadMethod().invoke(target, new Object[0]);\n+    }\n+}"},{"sha":"4ada6babaab8b142f2fbc7ed89a46d59ddf2b784","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/BulkActionResultModalPage.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionResultModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionResultModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBulkActionResultModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionResultColumn;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+\n+/**\n+ * Show user or role status after performing a successful operation.\n+ */\n+public class BulkActionResultModalPage<T, S> extends BaseModalPage {\n+\n+    /**\n+     * Serial version id.\n+     */\n+    private static final long serialVersionUID = 2646115294319713724L;\n+\n+    public BulkActionResultModalPage(\n+            final ModalWindow window,\n+            final Collection<T> items,\n+            final List<IColumn<T, S>> columns,\n+            final BulkActionResult results,\n+            final String idFieldName) {\n+\n+        super();\n+\n+        final List<IColumn<T, S>> newColumnList = new ArrayList<>(columns.subList(1, columns.size() - 1));\n+        newColumnList.add(newColumnList.size(), new ActionResultColumn<T, S>(results, idFieldName));\n+\n+        final SortableDataProvider<T, S> dataProvider = new SortableDataProvider<T, S>() {\n+\n+            private static final long serialVersionUID = 5291903859908641954L;\n+\n+            @Override\n+            public Iterator<? extends T> iterator(final long first, final long count) {\n+                return items.iterator();\n+            }\n+\n+            @Override\n+            public long size() {\n+                return items.size();\n+            }\n+\n+            @Override\n+            public IModel<T> model(final T object) {\n+                return new CompoundPropertyModel<T>(object);\n+            }\n+        };\n+\n+        add(new AjaxFallbackDefaultDataTable<T, S>(\n+                \"selectedObjects\",\n+                newColumnList,\n+                dataProvider,\n+                Integer.MAX_VALUE).setVisible(items != null && !items.isEmpty()));\n+\n+        final AjaxLink<Void> close = new IndicatingAjaxLink<Void>(\"close\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                window.close(target);\n+            }\n+        };\n+\n+        add(close);\n+    }\n+}"},{"sha":"0c65ac2d955372ef2c06c25499051ad94b6355b8","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ConfModalPage.java","status":"added","additions":112,"deletions":0,"changes":112,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,112 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.Collections;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.panels.PlainAttrsPanel;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConfTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class ConfModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 3524777398688399977L;\n+\n+    public ConfModalPage(final PageReference pageRef, final ModalWindow window, final WebMarkupContainer parameters) {\n+        super();\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                parameters, ENABLE, xmlRolesReader.getEntitlement(\"Configuration\", \"list\"));\n+        final ConfTO conf = confRestClient.list();\n+\n+        final Form<ConfTO> form = new Form<>(\"confForm\");\n+        form.setModel(new CompoundPropertyModel<>(conf));\n+\n+        form.add(new PlainAttrsPanel(\"paramAttrs\", conf, form, Mode.ADMIN));\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(SUBMIT, new ResourceModel(SUBMIT)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                final ConfTO updatedConf = (ConfTO) form.getModelObject();\n+\n+                try {\n+                    for (AttrTO attr : updatedConf.getPlainAttrs()) {\n+                        attr.getValues().removeAll(Collections.singleton(null));\n+                        if (attr.getValues().isEmpty()\n+                                || attr.getValues().equals(Collections.singletonList(StringUtils.EMPTY))) {\n+\n+                            confRestClient.delete(attr.getSchema());\n+                        } else {\n+                            confRestClient.set(attr);\n+                        }\n+                    }\n+\n+                    if (pageRef.getPage() instanceof BasePage) {\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                    }\n+\n+                    window.close(target);\n+                } catch (Exception e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                submit, ENABLE, xmlRolesReader.getEntitlement(\"Configuration\", \"set\"));\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                submit, ENABLE, xmlRolesReader.getEntitlement(\"Configuration\", \"delete\"));\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+\n+        add(form);\n+    }\n+}"},{"sha":"b52864de2c8b98cfbaa8a7582c6da954b20203f8","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Configuration.java","status":"added","additions":756,"deletions":0,"changes":756,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfiguration.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,756 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.io.File;\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.logging.log4j.LogManager;\n+import org.apache.logging.log4j.core.LoggerContext;\n+import org.apache.logging.log4j.core.config.LoggerConfig;\n+import org.apache.syncope.client.console.commons.AttrLayoutType;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.HttpResourceStream;\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.LayoutsPanel;\n+import org.apache.syncope.client.console.panels.PoliciesPanel;\n+import org.apache.syncope.client.console.rest.LoggerRestClient;\n+import org.apache.syncope.client.console.rest.NotificationRestClient;\n+import org.apache.syncope.client.console.rest.SecurityQuestionRestClient;\n+import org.apache.syncope.client.console.rest.WorkflowRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.CollectionPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.link.VeilPopupSettings;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.LoggerTO;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.syncope.common.lib.types.LoggerLevel;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.image.Image;\n+import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n+import org.apache.wicket.markup.html.link.Link;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.PropertyListView;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.protocol.http.WebApplication;\n+import org.apache.wicket.request.handler.resource.ResourceStreamRequestHandler;\n+import org.apache.wicket.request.resource.ContentDisposition;\n+import org.apache.wicket.request.resource.DynamicImageResource;\n+import org.apache.wicket.request.resource.IResource;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.springframework.web.context.support.WebApplicationContextUtils;\n+\n+/**\n+ * Configurations WebPage.\n+ */\n+public class Configuration extends BasePage {\n+\n+    private static final long serialVersionUID = -2838270869037702214L;\n+\n+    private static final int SYNCOPECONF_WIN_HEIGHT = 300;\n+\n+    private static final int SYNCOPECONF_WIN_WIDTH = 900;\n+\n+    private static final int NOTIFICATION_WIN_HEIGHT = 500;\n+\n+    private static final int NOTIFICATION_WIN_WIDTH = 1100;\n+\n+    private static final int SECURITY_QUESTION_WIN_HEIGHT = 300;\n+\n+    private static final int SECURITY_QUESTION_WIN_WIDTH = 900;\n+\n+    @SpringBean\n+    private LoggerRestClient loggerRestClient;\n+\n+    @SpringBean\n+    private NotificationRestClient notificationRestClient;\n+\n+    @SpringBean\n+    private SecurityQuestionRestClient securityQuestionRestClient;\n+\n+    @SpringBean\n+    private WorkflowRestClient wfRestClient;\n+\n+    @SpringBean\n+    private PreferenceManager prefMan;\n+\n+    private final ModalWindow syncopeConfWin;\n+\n+    private final ModalWindow createNotificationWin;\n+\n+    private final ModalWindow editNotificationWin;\n+\n+    private final ModalWindow createSecurityQuestionWin;\n+\n+    private final ModalWindow editSecurityQuestionWin;\n+\n+    private WebMarkupContainer notificationContainer;\n+\n+    private WebMarkupContainer securityQuestionContainer;\n+\n+    private int notificationPaginatorRows;\n+\n+    public Configuration() {\n+        super();\n+\n+        add(syncopeConfWin = new ModalWindow(\"syncopeConfWin\"));\n+        syncopeConfWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        syncopeConfWin.setInitialHeight(SYNCOPECONF_WIN_HEIGHT);\n+        syncopeConfWin.setInitialWidth(SYNCOPECONF_WIN_WIDTH);\n+        syncopeConfWin.setCookieName(\"syncopeconf-modal\");\n+        setupSyncopeConf();\n+\n+        add(new PoliciesPanel(\"passwordPoliciesPanel\", getPageReference(), PolicyType.PASSWORD));\n+        add(new PoliciesPanel(\"accountPoliciesPanel\", getPageReference(), PolicyType.ACCOUNT));\n+        add(new PoliciesPanel(\"syncPoliciesPanel\", getPageReference(), PolicyType.SYNC));\n+\n+        add(createNotificationWin = new ModalWindow(\"createNotificationWin\"));\n+        createNotificationWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        createNotificationWin.setInitialHeight(NOTIFICATION_WIN_HEIGHT);\n+        createNotificationWin.setInitialWidth(NOTIFICATION_WIN_WIDTH);\n+        createNotificationWin.setCookieName(\"create-notification-modal\");\n+        add(editNotificationWin = new ModalWindow(\"editNotificationWin\"));\n+        editNotificationWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editNotificationWin.setInitialHeight(NOTIFICATION_WIN_HEIGHT);\n+        editNotificationWin.setInitialWidth(NOTIFICATION_WIN_WIDTH);\n+        editNotificationWin.setCookieName(\"edit-notification-modal\");\n+        setupNotification();\n+\n+        add(createSecurityQuestionWin = new ModalWindow(\"createSecurityQuestionWin\"));\n+        createSecurityQuestionWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        createSecurityQuestionWin.setInitialHeight(SECURITY_QUESTION_WIN_HEIGHT);\n+        createSecurityQuestionWin.setInitialWidth(SECURITY_QUESTION_WIN_WIDTH);\n+        createSecurityQuestionWin.setCookieName(\"create-security-question-modal\");\n+        add(editSecurityQuestionWin = new ModalWindow(\"editSecurityQuestionWin\"));\n+        editSecurityQuestionWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editSecurityQuestionWin.setInitialHeight(SECURITY_QUESTION_WIN_HEIGHT);\n+        editSecurityQuestionWin.setInitialWidth(SECURITY_QUESTION_WIN_WIDTH);\n+        editSecurityQuestionWin.setCookieName(\"edit-security-question-modal\");\n+        setupSecurityQuestion();\n+\n+        // Workflow definition stuff\n+        WebMarkupContainer noActivitiEnabledForUsers = new WebMarkupContainer(\"noActivitiEnabledForUsers\");\n+        noActivitiEnabledForUsers.setOutputMarkupPlaceholderTag(true);\n+        add(noActivitiEnabledForUsers);\n+\n+        WebMarkupContainer workflowDefContainer = new WebMarkupContainer(\"workflowDefContainer\");\n+        workflowDefContainer.setOutputMarkupPlaceholderTag(true);\n+\n+        if (wfRestClient.isActivitiEnabledForUsers()) {\n+            noActivitiEnabledForUsers.setVisible(false);\n+        } else {\n+            workflowDefContainer.setVisible(false);\n+        }\n+\n+        BookmarkablePageLink<Void> activitiModeler =\n+                new BookmarkablePageLink<Void>(\"activitiModeler\", ActivitiModelerPopupPage.class);\n+        activitiModeler.setPopupSettings(new VeilPopupSettings().setHeight(600).setWidth(800));\n+        MetaDataRoleAuthorizationStrategy.authorize(activitiModeler, ENABLE,\n+                xmlRolesReader.getEntitlement(\"Configuration\", \"workflowDefRead\"));\n+        workflowDefContainer.add(activitiModeler);\n+        // Check if Activiti Modeler directory is found\n+        boolean activitiModelerEnabled = false;\n+        try {\n+            String activitiModelerDirectory = WebApplicationContextUtils.getWebApplicationContext(\n+                    WebApplication.get().getServletContext()).getBean(\"activitiModelerDirectory\", String.class);\n+            File baseDir = new File(activitiModelerDirectory);\n+            activitiModelerEnabled = baseDir.exists() && baseDir.canRead() && baseDir.isDirectory();\n+        } catch (Exception e) {\n+            LOG.error(\"Could not check for Activiti Modeler directory\", e);\n+        }\n+        activitiModeler.setEnabled(activitiModelerEnabled);\n+\n+        BookmarkablePageLink<Void> xmlEditor = new BookmarkablePageLink<>(\"xmlEditor\", XMLEditorPopupPage.class);\n+        xmlEditor.setPopupSettings(new VeilPopupSettings().setHeight(480).setWidth(800));\n+        MetaDataRoleAuthorizationStrategy.authorize(xmlEditor, ENABLE,\n+                xmlRolesReader.getEntitlement(\"Configuration\", \"workflowDefRead\"));\n+        workflowDefContainer.add(xmlEditor);\n+\n+        Image workflowDefDiagram = new Image(\"workflowDefDiagram\", new Model()) {\n+\n+            private static final long serialVersionUID = -8457850449086490660L;\n+\n+            @Override\n+            protected IResource getImageResource() {\n+                return new DynamicImageResource() {\n+\n+                    private static final long serialVersionUID = 923201517955737928L;\n+\n+                    @Override\n+                    protected byte[] getImageData(final IResource.Attributes attributes) {\n+                        return wfRestClient.isActivitiEnabledForUsers()\n+                                ? wfRestClient.getDiagram()\n+                                : new byte[0];\n+                    }\n+                };\n+            }\n+        };\n+        workflowDefContainer.add(workflowDefDiagram);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(workflowDefContainer, ENABLE,\n+                xmlRolesReader.getEntitlement(\"Configuration\", \"workflowDefRead\"));\n+        add(workflowDefContainer);\n+\n+        // Logger stuff\n+        PropertyListView<LoggerTO> coreLoggerList =\n+                new LoggerPropertyList(null, \"corelogger\", loggerRestClient.listLogs());\n+        WebMarkupContainer coreLoggerContainer = new WebMarkupContainer(\"coreLoggerContainer\");\n+        coreLoggerContainer.add(coreLoggerList);\n+        coreLoggerContainer.setOutputMarkupId(true);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(coreLoggerContainer, ENABLE, xmlRolesReader.getEntitlement(\n+                \"Configuration\", \"logList\"));\n+        add(coreLoggerContainer);\n+\n+        ConsoleLoggerController consoleLoggerController = new ConsoleLoggerController();\n+        PropertyListView<LoggerTO> consoleLoggerList =\n+                new LoggerPropertyList(consoleLoggerController, \"consolelogger\", consoleLoggerController.getLoggers());\n+        WebMarkupContainer consoleLoggerContainer = new WebMarkupContainer(\"consoleLoggerContainer\");\n+        consoleLoggerContainer.add(consoleLoggerList);\n+        consoleLoggerContainer.setOutputMarkupId(true);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                consoleLoggerContainer, ENABLE, xmlRolesReader.getEntitlement(\"Configuration\", \"logList\"));\n+        add(consoleLoggerContainer);\n+\n+        add(new LayoutsPanel(\"adminUserLayoutPanel\", AttrLayoutType.ADMIN_USER, feedbackPanel));\n+        add(new LayoutsPanel(\"selfUserLayoutPanel\", AttrLayoutType.SELF_USER, feedbackPanel));\n+        add(new LayoutsPanel(\"adminRoleLayoutPanel\", AttrLayoutType.ADMIN_ROLE, feedbackPanel));\n+        add(new LayoutsPanel(\"selfRoleLayoutPanel\", AttrLayoutType.SELF_ROLE, feedbackPanel));\n+        add(new LayoutsPanel(\"adminMembershipLayoutPanel\", AttrLayoutType.ADMIN_MEMBERSHIP, feedbackPanel));\n+        add(new LayoutsPanel(\"selfMembershipLayoutPanel\", AttrLayoutType.SELF_MEMBERSHIP, feedbackPanel));\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private void setupSyncopeConf() {\n+        final WebMarkupContainer parameters = new WebMarkupContainer(\"parameters\");\n+        parameters.setOutputMarkupId(true);\n+        add(parameters);\n+\n+        setWindowClosedCallback(syncopeConfWin, parameters);\n+\n+        AjaxLink<Void> confLink = new IndicatingAjaxLink<Void>(\"confLink\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                syncopeConfWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new ConfModalPage(getPageReference(), editNotificationWin, parameters);\n+                    }\n+                });\n+\n+                syncopeConfWin.show(target);\n+            }\n+        };\n+        parameters.add(confLink);\n+\n+        Link<Void> dbExportLink = new Link<Void>(\"dbExportLink\") {\n+\n+            private static final long serialVersionUID = -4331619903296515985L;\n+\n+            @Override\n+            public void onClick() {\n+                try {\n+                    HttpResourceStream stream = new HttpResourceStream(confRestClient.dbExport());\n+\n+                    ResourceStreamRequestHandler rsrh = new ResourceStreamRequestHandler(stream);\n+                    rsrh.setFileName(stream.getFilename() == null ? \"content.xml\" : stream.getFilename());\n+                    rsrh.setContentDisposition(ContentDisposition.ATTACHMENT);\n+\n+                    getRequestCycle().scheduleRequestHandlerAfterCurrent(rsrh);\n+                } catch (Exception e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                }\n+            }\n+        };\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                dbExportLink, ENABLE, xmlRolesReader.getEntitlement(\"Configuration\", \"export\"));\n+        add(dbExportLink);\n+    }\n+\n+    private void setupNotification() {\n+        notificationPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_NOTIFICATION_PAGINATOR_ROWS);\n+\n+        final List<IColumn<NotificationTO, String>> notificationCols = new ArrayList<IColumn<NotificationTO, String>>();\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"id\"), \"id\", \"id\"));\n+        notificationCols.add(new CollectionPropertyColumn<NotificationTO>(\n+                new ResourceModel(\"events\"), \"events\", \"events\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"subject\"), \"subject\", \"subject\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"template\"), \"template\", \"template\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"traceLevel\"), \"traceLevel\", \"traceLevel\"));\n+        notificationCols.add(new PropertyColumn<NotificationTO, String>(\n+                new ResourceModel(\"active\"), \"active\", \"active\"));\n+\n+        notificationCols.add(new AbstractColumn<NotificationTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<NotificationTO>> cellItem, final String componentId,\n+                    final IModel<NotificationTO> model) {\n+\n+                final NotificationTO notificationTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        editNotificationWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new NotificationModalPage(Configuration.this.getPageReference(),\n+                                        editNotificationWin, notificationTO, false);\n+                            }\n+                        });\n+\n+                        editNotificationWin.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Notification\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            notificationRestClient.delete(notificationTO.getKey());\n+                        } catch (SyncopeClientException e) {\n+                            LOG.error(\"While deleting a notification\", e);\n+                            error(e.getMessage());\n+                            return;\n+                        }\n+\n+                        info(getString(Constants.OPERATION_SUCCEEDED));\n+                        feedbackPanel.refresh(target);\n+                        target.add(notificationContainer);\n+                    }\n+                }, ActionLink.ActionType.DELETE, \"Notification\");\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n+        final AjaxFallbackDefaultDataTable<NotificationTO, String> notificationTable =\n+                new AjaxFallbackDefaultDataTable<NotificationTO, String>(\n+                        \"notificationTable\", notificationCols, new NotificationProvider(), notificationPaginatorRows);\n+\n+        notificationContainer = new WebMarkupContainer(\"notificationContainer\");\n+        notificationContainer.add(notificationTable);\n+        notificationContainer.setOutputMarkupId(true);\n+\n+        add(notificationContainer);\n+\n+        setWindowClosedCallback(createNotificationWin, notificationContainer);\n+        setWindowClosedCallback(editNotificationWin, notificationContainer);\n+\n+        AjaxLink<Void> createNotificationLink = new AjaxLink<Void>(\"createNotificationLink\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                createNotificationWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new NotificationModalPage(Configuration.this.getPageReference(), createNotificationWin,\n+                                new NotificationTO(), true);\n+                    }\n+                });\n+\n+                createNotificationWin.show(target);\n+            }\n+        };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(createNotificationLink, ENABLE, xmlRolesReader.getEntitlement(\n+                \"Notification\", \"create\"));\n+        add(createNotificationLink);\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        Form notificationPaginatorForm = new Form(\"notificationPaginatorForm\");\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this,\n+                \"notificationPaginatorRows\"), prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_NOTIFICATION_PAGINATOR_ROWS, String.valueOf(\n+                        notificationPaginatorRows));\n+                notificationTable.setItemsPerPage(notificationPaginatorRows);\n+\n+                target.add(notificationContainer);\n+            }\n+        });\n+\n+        notificationPaginatorForm.add(rowsChooser);\n+        add(notificationPaginatorForm);\n+    }\n+\n+    private void setupSecurityQuestion() {\n+        final List<IColumn<SecurityQuestionTO, String>> securityQuestionCols =\n+                new ArrayList<IColumn<SecurityQuestionTO, String>>();\n+        securityQuestionCols.add(new PropertyColumn<SecurityQuestionTO, String>(\n+                new ResourceModel(\"id\"), \"id\", \"id\"));\n+        securityQuestionCols.add(new PropertyColumn<SecurityQuestionTO, String>(\n+                new ResourceModel(\"content\"), \"content\", \"content\"));\n+\n+        securityQuestionCols.add(new AbstractColumn<SecurityQuestionTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<SecurityQuestionTO>> cellItem, final String componentId,\n+                    final IModel<SecurityQuestionTO> model) {\n+\n+                final SecurityQuestionTO securityQuestionTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        editSecurityQuestionWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new SecurityQuestionModalPage(Configuration.this.getPageReference(),\n+                                        editSecurityQuestionWin, securityQuestionTO, false);\n+                            }\n+                        });\n+\n+                        editSecurityQuestionWin.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"SecurityQuestion\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            securityQuestionRestClient.delete(securityQuestionTO.getKey());\n+                        } catch (SyncopeClientException e) {\n+                            LOG.error(\"While deleting a security question\", e);\n+                            error(e.getMessage());\n+                            return;\n+                        }\n+\n+                        info(getString(Constants.OPERATION_SUCCEEDED));\n+                        feedbackPanel.refresh(target);\n+                        target.add(securityQuestionContainer);\n+                    }\n+                }, ActionLink.ActionType.DELETE, \"SecurityQuestion\");\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n+        final AjaxFallbackDefaultDataTable<SecurityQuestionTO, String> securityQuestionTable =\n+                new AjaxFallbackDefaultDataTable<SecurityQuestionTO, String>(\"securityQuestionTable\",\n+                        securityQuestionCols, new SecurityQuestionProvider(), 50);\n+\n+        securityQuestionContainer = new WebMarkupContainer(\"securityQuestionContainer\");\n+        securityQuestionContainer.add(securityQuestionTable);\n+        securityQuestionContainer.setOutputMarkupId(true);\n+\n+        add(securityQuestionContainer);\n+\n+        setWindowClosedCallback(createSecurityQuestionWin, securityQuestionContainer);\n+        setWindowClosedCallback(editSecurityQuestionWin, securityQuestionContainer);\n+\n+        AjaxLink<Void> createSecurityQuestionLink = new AjaxLink<Void>(\"createSecurityQuestionLink\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+\n+                createSecurityQuestionWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new SecurityQuestionModalPage(Configuration.this.getPageReference(),\n+                                createSecurityQuestionWin, new SecurityQuestionTO(), true);\n+                    }\n+                });\n+\n+                createSecurityQuestionWin.show(target);\n+            }\n+        };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                createSecurityQuestionLink, ENABLE, xmlRolesReader.getEntitlement(\"SecurityQuestion\", \"create\"));\n+        add(createSecurityQuestionLink);\n+    }\n+\n+    private class NotificationProvider extends SortableDataProvider<NotificationTO, String> {\n+\n+        private static final long serialVersionUID = -276043813563988590L;\n+\n+        private final SortableDataProviderComparator<NotificationTO> comparator;\n+\n+        public NotificationProvider() {\n+            //Default sorting\n+            setSort(\"id\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<NotificationTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<NotificationTO> iterator(final long first, final long count) {\n+            List<NotificationTO> list = notificationRestClient.getAllNotifications();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return notificationRestClient.getAllNotifications().size();\n+        }\n+\n+        @Override\n+        public IModel<NotificationTO> model(final NotificationTO notification) {\n+            return new AbstractReadOnlyModel<NotificationTO>() {\n+\n+                private static final long serialVersionUID = 774694801558497248L;\n+\n+                @Override\n+                public NotificationTO getObject() {\n+                    return notification;\n+                }\n+            };\n+        }\n+    }\n+\n+    private class SecurityQuestionProvider extends SortableDataProvider<SecurityQuestionTO, String> {\n+\n+        private static final long serialVersionUID = -1458398823626281188L;\n+\n+        private final SortableDataProviderComparator<SecurityQuestionTO> comparator;\n+\n+        public SecurityQuestionProvider() {\n+            //Default sorting\n+            setSort(\"id\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<SecurityQuestionTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<SecurityQuestionTO> iterator(final long first, final long count) {\n+            List<SecurityQuestionTO> list = securityQuestionRestClient.list();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return securityQuestionRestClient.list().size();\n+        }\n+\n+        @Override\n+        public IModel<SecurityQuestionTO> model(final SecurityQuestionTO securityQuestionTO) {\n+            return new AbstractReadOnlyModel<SecurityQuestionTO>() {\n+\n+                private static final long serialVersionUID = 5079291243768775704L;\n+\n+                @Override\n+                public SecurityQuestionTO getObject() {\n+                    return securityQuestionTO;\n+                }\n+            };\n+        }\n+    }\n+\n+    private class LoggerPropertyList extends PropertyListView<LoggerTO> {\n+\n+        private static final long serialVersionUID = 5911412425994616111L;\n+\n+        private final ConsoleLoggerController consoleLoggerController;\n+\n+        public LoggerPropertyList(final ConsoleLoggerController consoleLoggerController, final String id,\n+                final List<? extends LoggerTO> list) {\n+\n+            super(id, list);\n+            this.consoleLoggerController = consoleLoggerController;\n+        }\n+\n+        @Override\n+        protected void populateItem(final ListItem<LoggerTO> item) {\n+            item.add(new Label(\"name\"));\n+\n+            DropDownChoice<LoggerLevel> level = new DropDownChoice<LoggerLevel>(\"level\");\n+            level.setModel(new IModel<LoggerLevel>() {\n+\n+                private static final long serialVersionUID = -2350428186089596562L;\n+\n+                @Override\n+                public LoggerLevel getObject() {\n+                    return item.getModelObject().getLevel();\n+                }\n+\n+                @Override\n+                public void setObject(final LoggerLevel object) {\n+                    item.getModelObject().setLevel(object);\n+                }\n+\n+                @Override\n+                public void detach() {\n+                }\n+            });\n+            level.setChoices(Arrays.asList(LoggerLevel.values()));\n+            level.setOutputMarkupId(true);\n+            level.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    try {\n+                        if (getId().equals(\"corelogger\")) {\n+                            loggerRestClient.setLogLevel(item.getModelObject().getKey(),\n+                                    item.getModelObject().getLevel());\n+                        } else {\n+                            consoleLoggerController.setLogLevel(item.getModelObject().getKey(),\n+                                    item.getModelObject().getLevel());\n+                        }\n+\n+                        info(getString(Constants.OPERATION_SUCCEEDED));\n+                    } catch (SyncopeClientException e) {\n+                        info(getString(Constants.OPERATION_ERROR));\n+                    }\n+\n+                    feedbackPanel.refresh(target);\n+                }\n+            });\n+\n+            MetaDataRoleAuthorizationStrategy.authorize(level, ENABLE, xmlRolesReader.getEntitlement(\n+                    \"Configuration\", \"logSetLevel\"));\n+\n+            item.add(level);\n+        }\n+    }\n+\n+    private static class ConsoleLoggerController implements Serializable {\n+\n+        private static final long serialVersionUID = -1550459341476431714L;\n+\n+        public List<LoggerTO> getLoggers() {\n+            LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+\n+            List<LoggerTO> result = new ArrayList<>();\n+            for (LoggerConfig logger : ctx.getConfiguration().getLoggers().values()) {\n+                final String loggerName = LogManager.ROOT_LOGGER_NAME.equals(logger.getName())\n+                        ? SyncopeConstants.ROOT_LOGGER : logger.getName();\n+                if (logger.getLevel() != null) {\n+                    LoggerTO loggerTO = new LoggerTO();\n+                    loggerTO.setKey(loggerName);\n+                    loggerTO.setLevel(LoggerLevel.fromLevel(logger.getLevel()));\n+                    result.add(loggerTO);\n+                }\n+            }\n+\n+            return result;\n+        }\n+\n+        public void setLogLevel(final String name, final LoggerLevel level) {\n+            LoggerContext ctx = (LoggerContext) LogManager.getContext(false);\n+            LoggerConfig logConf = SyncopeConstants.ROOT_LOGGER.equals(name)\n+                    ? ctx.getConfiguration().getLoggerConfig(LogManager.ROOT_LOGGER_NAME)\n+                    : ctx.getConfiguration().getLoggerConfig(name);\n+            logConf.setLevel(level.getLevel());\n+            ctx.updateLoggers();\n+        }\n+    }\n+}"},{"sha":"ebc041dd4c05db6abf970230fb734571b8e65d6d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ConfirmPasswordResetModalPage.java","status":"added","additions":103,"deletions":0,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfirmPasswordResetModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfirmPasswordResetModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConfirmPasswordResetModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,103 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.PasswordTextField;\n+import org.apache.wicket.markup.html.form.StatelessForm;\n+import org.apache.wicket.markup.html.form.validation.EqualPasswordInputValidator;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class ConfirmPasswordResetModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -8419445804421211904L;\n+\n+    public ConfirmPasswordResetModalPage(final ModalWindow window, final String token) {\n+        super();\n+        setOutputMarkupId(true);\n+\n+        final StatelessForm<?> form = new StatelessForm<Object>(FORM);\n+        form.setOutputMarkupId(true);\n+\n+        final FieldPanel<String> password =\n+                new AjaxPasswordFieldPanel(\"password\", \"password\", new Model<String>()).setRequired(true);\n+        ((PasswordTextField) password.getField()).setResetPassword(true);\n+        form.add(password);\n+\n+        final FieldPanel<String> confirmPassword =\n+                new AjaxPasswordFieldPanel(\"confirmPassword\", \"confirmPassword\", new Model<String>());\n+        ((PasswordTextField) confirmPassword.getField()).setResetPassword(true);\n+        form.add(confirmPassword);\n+\n+        form.add(new EqualPasswordInputValidator(password.getField(), confirmPassword.getField()));\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(SUBMIT, SUBMIT)) {\n+\n+            private static final long serialVersionUID = -4804368561204623354L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    userSelfRestClient.confirmPasswordReset(token, password.getModelObject());\n+\n+                    setResponsePage(new ResultStatusModalPage.Builder(window, new UserTO()).mode(Mode.SELF).build());\n+                } catch (Exception e) {\n+                    LOG.error(\"While confirming password reset for {}\", token, e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+            }\n+        };\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+\n+        add(form);\n+    }\n+}"},{"sha":"cf1c4050382474c9a2d15d4c49b34aa4f6be8780","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ConnObjectModalPage.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConnObjectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConnObjectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConnObjectModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,101 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.list.AltListView;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.util.ListModel;\n+\n+public class ConnObjectModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -6469290753080058487L;\n+\n+    public ConnObjectModalPage(final ConnObjectTO connObjectTO) {\n+        super();\n+\n+        final Form<Void> form = new Form<Void>(FORM);\n+        form.setEnabled(false);\n+        add(form);\n+\n+        IModel<List<AttrTO>> formProps = new LoadableDetachableModel<List<AttrTO>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<AttrTO> load() {\n+                List<AttrTO> attrs = connObjectTO.getPlainAttrs();\n+                Collections.sort(attrs, new Comparator<AttrTO>() {\n+\n+                    @Override\n+                    public int compare(final AttrTO attr1, final AttrTO attr2) {\n+                        if (attr1 == null || attr1.getSchema() == null) {\n+                            return -1;\n+                        }\n+                        if (attr2 == null || attr2.getSchema() == null) {\n+                            return 1;\n+                        }\n+                        return attr1.getSchema().compareTo(attr2.getSchema());\n+                    }\n+                });\n+\n+                return attrs;\n+            }\n+        };\n+        final ListView<AttrTO> propView = new AltListView<AttrTO>(\"propView\", formProps) {\n+\n+            private static final long serialVersionUID = 3109256773218160485L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<AttrTO> item) {\n+                final AttrTO prop = item.getModelObject();\n+\n+                Label label = new Label(\"key\", prop.getSchema());\n+                item.add(label);\n+\n+                Panel field;\n+                if (prop.getValues().isEmpty()) {\n+                    field = new AjaxTextFieldPanel(\"value\",\n+                            prop.getSchema(), new Model<String>());\n+                } else if (prop.getValues().size() == 1) {\n+                    field = new AjaxTextFieldPanel(\"value\",\n+                            prop.getSchema(), new Model<String>(prop.getValues().get(0)));\n+                } else {\n+                    field = new MultiFieldPanel<String>(\"value\", new ListModel<String>(prop.getValues()),\n+                            new AjaxTextFieldPanel(\"panel\", prop.getSchema(), new Model<String>()));\n+                }\n+                item.add(field);\n+            }\n+        };\n+        form.add(propView);\n+    }\n+}"},{"sha":"529a55a6a9899d280838d08a39f272a755ae66ca","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ConnectorModalPage.java","status":"added","additions":471,"deletions":0,"changes":471,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,471 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.SpinnerFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.list.ConnConfPropertyListView;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ConnBundleTO;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.ConnPoolConfTO;\n+import org.apache.syncope.common.lib.types.ConnConfPropSchema;\n+import org.apache.syncope.common.lib.types.ConnConfProperty;\n+import org.apache.syncope.common.lib.types.ConnectorCapability;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.CheckBoxMultipleChoice;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.apache.wicket.validation.validator.RangeValidator;\n+\n+/**\n+ * Modal window with Connector form.\n+ */\n+public class ConnectorModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -2025535531121434050L;\n+\n+    @SpringBean\n+    private ConnectorRestClient restClient;\n+\n+    private final Map<String, Map<String, Map<String, ConnBundleTO>>> mapConnBundleTOs;\n+\n+    private final List<ConnectorCapability> selectedCapabilities;\n+\n+    private ConnBundleTO bundleTO;\n+\n+    private List<ConnConfProperty> properties;\n+\n+    private final WebMarkupContainer propertiesContainer;\n+\n+    public ConnectorModalPage(final PageReference pageRef, final ModalWindow window,\n+            final ConnInstanceTO connInstanceTO) {\n+\n+        super();\n+\n+        // general data setup\n+        selectedCapabilities = new ArrayList<ConnectorCapability>(connInstanceTO.getKey() == 0\n+                ? EnumSet.noneOf(ConnectorCapability.class)\n+                : connInstanceTO.getCapabilities());\n+\n+        mapConnBundleTOs = new HashMap<String, Map<String, Map<String, ConnBundleTO>>>();\n+        for (ConnBundleTO connBundleTO : restClient.getAllBundles()) {\n+            // by location\n+            if (!mapConnBundleTOs.containsKey(connBundleTO.getLocation())) {\n+                mapConnBundleTOs.put(connBundleTO.getLocation(), new HashMap<String, Map<String, ConnBundleTO>>());\n+            }\n+            final Map<String, Map<String, ConnBundleTO>> byLocation = mapConnBundleTOs.get(connBundleTO.getLocation());\n+\n+            // by name\n+            if (!byLocation.containsKey(connBundleTO.getBundleName())) {\n+                byLocation.put(connBundleTO.getBundleName(), new HashMap<String, ConnBundleTO>());\n+            }\n+            final Map<String, ConnBundleTO> byName = byLocation.get(connBundleTO.getBundleName());\n+\n+            // by version\n+            if (!byName.containsKey(connBundleTO.getVersion())) {\n+                byName.put(connBundleTO.getVersion(), connBundleTO);\n+            }\n+        }\n+\n+        bundleTO = getSelectedBundleTO(connInstanceTO);\n+        properties = fillProperties(bundleTO, connInstanceTO);\n+\n+        // form - first tab\n+        final Form<ConnInstanceTO> connectorForm = new Form<ConnInstanceTO>(FORM);\n+        connectorForm.setModel(new CompoundPropertyModel<ConnInstanceTO>(connInstanceTO));\n+        connectorForm.setOutputMarkupId(true);\n+        add(connectorForm);\n+\n+        propertiesContainer = new WebMarkupContainer(\"container\");\n+        propertiesContainer.setOutputMarkupId(true);\n+        connectorForm.add(propertiesContainer);\n+\n+        final Form<ConnInstanceTO> connectorPropForm = new Form<ConnInstanceTO>(\"connectorPropForm\");\n+        connectorPropForm.setModel(new CompoundPropertyModel<ConnInstanceTO>(connInstanceTO));\n+        connectorPropForm.setOutputMarkupId(true);\n+        propertiesContainer.add(connectorPropForm);\n+\n+        final AjaxTextFieldPanel displayName = new AjaxTextFieldPanel(\n+                \"displayName\", \"display name\", new PropertyModel<String>(connInstanceTO, \"displayName\"));\n+        displayName.setOutputMarkupId(true);\n+        displayName.addRequiredLabel();\n+        connectorForm.add(displayName);\n+\n+        final AjaxDropDownChoicePanel<String> location =\n+                new AjaxDropDownChoicePanel<>(\"location\", \"location\",\n+                        new Model<>(bundleTO == null ? null : bundleTO.getLocation()));\n+        ((DropDownChoice<String>) location.getField()).setNullValid(true);\n+        location.setStyleSheet(\"long_dynamicsize\");\n+        location.setChoices(new ArrayList<>(mapConnBundleTOs.keySet()));\n+        location.setRequired(true);\n+        location.addRequiredLabel();\n+        location.setOutputMarkupId(true);\n+        location.setEnabled(connInstanceTO.getKey() == 0);\n+        location.getField().setOutputMarkupId(true);\n+        connectorForm.add(location);\n+\n+        final AjaxDropDownChoicePanel<String> connectorName =\n+                new AjaxDropDownChoicePanel<>(\"connectorName\", \"connectorName\",\n+                        new Model<>(bundleTO == null ? null : bundleTO.getBundleName()));\n+        ((DropDownChoice<String>) connectorName.getField()).setNullValid(true);\n+        connectorName.setStyleSheet(\"long_dynamicsize\");\n+        connectorName.setChoices(bundleTO == null\n+                ? new ArrayList<String>()\n+                : new ArrayList<>(mapConnBundleTOs.get(connInstanceTO.getLocation()).keySet()));\n+        connectorName.setRequired(true);\n+        connectorName.addRequiredLabel();\n+        connectorName.setEnabled(connInstanceTO.getLocation() != null);\n+        connectorName.setOutputMarkupId(true);\n+        connectorName.setEnabled(connInstanceTO.getKey() == 0);\n+        connectorName.getField().setOutputMarkupId(true);\n+        connectorForm.add(connectorName);\n+\n+        final AjaxDropDownChoicePanel<String> version =\n+                new AjaxDropDownChoicePanel<String>(\"version\", \"version\",\n+                        new Model<>(bundleTO == null ? null : bundleTO.getVersion()));\n+        version.setStyleSheet(\"long_dynamicsize\");\n+        version.setChoices(bundleTO == null\n+                ? new ArrayList<String>()\n+                : new ArrayList<>(mapConnBundleTOs.get(connInstanceTO.getLocation()).\n+                        get(connInstanceTO.getBundleName()).keySet()));\n+        version.setRequired(true);\n+        version.addRequiredLabel();\n+        version.setEnabled(connInstanceTO.getBundleName() != null);\n+        version.setOutputMarkupId(true);\n+        version.addRequiredLabel();\n+        version.getField().setOutputMarkupId(true);\n+        connectorForm.add(version);\n+\n+        final SpinnerFieldPanel<Integer> connRequestTimeout =\n+                new SpinnerFieldPanel<Integer>(\"connRequestTimeout\", \"connRequestTimeout\", Integer.class,\n+                        new PropertyModel<Integer>(connInstanceTO, \"connRequestTimeout\"), 0, null);\n+        connRequestTimeout.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n+        connectorForm.add(connRequestTimeout);\n+\n+        if (connInstanceTO.getPoolConf() == null) {\n+            connInstanceTO.setPoolConf(new ConnPoolConfTO());\n+        }\n+        final SpinnerFieldPanel<Integer> poolMaxObjects =\n+                new SpinnerFieldPanel<Integer>(\"poolMaxObjects\", \"poolMaxObjects\", Integer.class,\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxObjects\"), 0, null);\n+        poolMaxObjects.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n+        connectorForm.add(poolMaxObjects);\n+        final SpinnerFieldPanel<Integer> poolMinIdle =\n+                new SpinnerFieldPanel<Integer>(\"poolMinIdle\", \"poolMinIdle\", Integer.class,\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"minIdle\"), 0, null);\n+        poolMinIdle.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n+        connectorForm.add(poolMinIdle);\n+        final SpinnerFieldPanel<Integer> poolMaxIdle =\n+                new SpinnerFieldPanel<Integer>(\"poolMaxIdle\", \"poolMaxIdle\", Integer.class,\n+                        new PropertyModel<Integer>(connInstanceTO.getPoolConf(), \"maxIdle\"), 0, null);\n+        poolMaxIdle.getField().add(new RangeValidator<Integer>(0, Integer.MAX_VALUE));\n+        connectorForm.add(poolMaxIdle);\n+        final SpinnerFieldPanel<Long> poolMaxWait =\n+                new SpinnerFieldPanel<Long>(\"poolMaxWait\", \"poolMaxWait\", Long.class,\n+                        new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"maxWait\"), 0L, null);\n+        poolMaxWait.getField().add(new RangeValidator<Long>(0L, Long.MAX_VALUE));\n+        connectorForm.add(poolMaxWait);\n+        final SpinnerFieldPanel<Long> poolMinEvictableIdleTime =\n+                new SpinnerFieldPanel<Long>(\"poolMinEvictableIdleTime\", \"poolMinEvictableIdleTime\", Long.class,\n+                        new PropertyModel<Long>(connInstanceTO.getPoolConf(), \"minEvictableIdleTimeMillis\"),\n+                        0L, null);\n+        poolMinEvictableIdleTime.getField().add(new RangeValidator<Long>(0L, Long.MAX_VALUE));\n+        connectorForm.add(poolMinEvictableIdleTime);\n+\n+        // form - first tab - onchange()\n+        location.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                ((DropDownChoice<String>) location.getField()).setNullValid(false);\n+                connInstanceTO.setLocation(location.getModelObject());\n+                target.add(location);\n+\n+                connectorName.setChoices(new ArrayList<String>(\n+                        mapConnBundleTOs.get(location.getModelObject()).keySet()));\n+                connectorName.setEnabled(true);\n+                connectorName.getField().setModelValue(null);\n+                target.add(connectorName);\n+\n+                version.setChoices(new ArrayList<String>());\n+                version.getField().setModelValue(null);\n+                version.setEnabled(false);\n+                target.add(version);\n+\n+                properties.clear();\n+                target.add(propertiesContainer);\n+            }\n+        });\n+        connectorName.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                ((DropDownChoice<String>) connectorName.getField()).setNullValid(false);\n+                connInstanceTO.setBundleName(connectorName.getModelObject());\n+                target.add(connectorName);\n+\n+                List<String> versions = new ArrayList<String>(\n+                        mapConnBundleTOs.get(location.getModelObject()).get(connectorName.getModelObject()).keySet());\n+                version.setChoices(versions);\n+                version.setEnabled(true);\n+                if (versions.size() == 1) {\n+                    selectVersion(target, connInstanceTO, version, versions.get(0));\n+                    version.getField().setModelObject(versions.get(0));\n+                } else {\n+                    version.getField().setModelValue(null);\n+                    properties.clear();\n+                    target.add(propertiesContainer);\n+                }\n+                target.add(version);\n+            }\n+        });\n+        version.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                selectVersion(target, connInstanceTO, version, version.getModelObject());\n+            }\n+        });\n+\n+        // form - second tab (properties)\n+        final ListView<ConnConfProperty> connPropView = new ConnConfPropertyListView(\"connectorProperties\",\n+                new PropertyModel<List<ConnConfProperty>>(this, \"properties\"),\n+                true, connInstanceTO.getConfiguration());\n+        connPropView.setOutputMarkupId(true);\n+        connectorPropForm.add(connPropView);\n+\n+        final AjaxButton check = new IndicatingAjaxButton(\"check\", new ResourceModel(\"check\")) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                final ConnInstanceTO conn = (ConnInstanceTO) form.getModelObject();\n+\n+                // ensure that connector bundle information is in sync\n+                conn.setBundleName(bundleTO.getBundleName());\n+                conn.setVersion(bundleTO.getVersion());\n+                conn.setConnectorName(bundleTO.getConnectorName());\n+\n+                if (restClient.check(conn)) {\n+                    info(getString(\"success_connection\"));\n+                } else {\n+                    error(getString(\"error_connection\"));\n+                }\n+\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+        connectorPropForm.add(check);\n+\n+        // form - third tab (capabilities)\n+        final IModel<List<ConnectorCapability>> capabilities =\n+                new LoadableDetachableModel<List<ConnectorCapability>>() {\n+\n+                    private static final long serialVersionUID = 5275935387613157437L;\n+\n+                    @Override\n+                    protected List<ConnectorCapability> load() {\n+                        return Arrays.asList(ConnectorCapability.values());\n+                    }\n+                };\n+        CheckBoxMultipleChoice<ConnectorCapability> capabilitiesPalette =\n+                new CheckBoxMultipleChoice<ConnectorCapability>(\"capabilitiesPalette\",\n+                        new PropertyModel<List<ConnectorCapability>>(this, \"selectedCapabilities\"), capabilities);\n+\n+        capabilitiesPalette.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(AjaxRequestTarget target) {\n+            }\n+        });\n+\n+        connectorForm.add(capabilitiesPalette);\n+\n+        // form - submit / cancel buttons\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new Model<String>(getString(SUBMIT))) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                final ConnInstanceTO conn = (ConnInstanceTO) form.getModelObject();\n+\n+                conn.setConnectorName(bundleTO.getConnectorName());\n+                conn.setBundleName(bundleTO.getBundleName());\n+                conn.setVersion(bundleTO.getVersion());\n+                conn.getConfiguration().clear();\n+                conn.getConfiguration().addAll(connPropView.getModelObject());\n+\n+                // Set the model object's capabilities to capabilitiesPalette's converted Set\n+                conn.getCapabilities().clear();\n+                conn.getCapabilities().addAll(selectedCapabilities.isEmpty()\n+                        ? EnumSet.noneOf(ConnectorCapability.class)\n+                        : EnumSet.copyOf(selectedCapabilities));\n+\n+                // Reset pool configuration if all fields are null\n+                if (conn.getPoolConf() != null\n+                        && conn.getPoolConf().getMaxIdle() == null\n+                        && conn.getPoolConf().getMaxObjects() == null\n+                        && conn.getPoolConf().getMaxWait() == null\n+                        && conn.getPoolConf().getMinEvictableIdleTimeMillis() == null\n+                        && conn.getPoolConf().getMinIdle() == null) {\n+\n+                    conn.setPoolConf(null);\n+                }\n+\n+                try {\n+                    if (connInstanceTO.getKey() == 0) {\n+                        restClient.create(conn);\n+                    } else {\n+                        restClient.update(conn);\n+                    }\n+\n+                    ((Resources) pageRef.getPage()).setModalResult(true);\n+                    window.close(target);\n+                } catch (SyncopeClientException e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                    ((Resources) pageRef.getPage()).setModalResult(false);\n+                    LOG.error(\"While creating or updating connector {}\", conn, e);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+        String roles = connInstanceTO.getKey() == 0\n+                ? xmlRolesReader.getEntitlement(\"Connectors\", \"create\")\n+                : xmlRolesReader.getEntitlement(\"Connectors\", \"update\");\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, roles);\n+        connectorForm.add(submit);\n+\n+        final IndicatingAjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+        cancel.setDefaultFormProcessing(false);\n+        connectorForm.add(cancel);\n+    }\n+\n+    private ConnBundleTO getSelectedBundleTO(final ConnInstanceTO connInstanceTO) {\n+        ConnBundleTO result = null;\n+        if (connInstanceTO != null\n+                && StringUtils.isNotBlank(connInstanceTO.getLocation())\n+                && StringUtils.isNotBlank(connInstanceTO.getBundleName())\n+                && StringUtils.isNotBlank(connInstanceTO.getVersion())\n+                && mapConnBundleTOs.containsKey(connInstanceTO.getLocation())) {\n+\n+            Map<String, Map<String, ConnBundleTO>> byLocation = mapConnBundleTOs.get(connInstanceTO.getLocation());\n+            if (byLocation.containsKey(connInstanceTO.getBundleName())) {\n+                Map<String, ConnBundleTO> byName = byLocation.get(connInstanceTO.getBundleName());\n+                if (byName.containsKey(connInstanceTO.getVersion())) {\n+                    result = byName.get(connInstanceTO.getVersion());\n+                }\n+            }\n+        }\n+        return result;\n+    }\n+\n+    private List<ConnConfProperty> fillProperties(final ConnBundleTO bundleTO, final ConnInstanceTO connInstanceTO) {\n+        final List<ConnConfProperty> props = new ArrayList<>();\n+\n+        if (bundleTO != null) {\n+            for (ConnConfPropSchema key : bundleTO.getProperties()) {\n+                final ConnConfProperty property = new ConnConfProperty();\n+                property.setSchema(key);\n+                if (connInstanceTO.getKey() != 0\n+                        && connInstanceTO.getConfigurationMap().containsKey(key.getName())\n+                        && connInstanceTO.getConfigurationMap().get(key.getName()).getValues() != null) {\n+\n+                    property.getValues().addAll(connInstanceTO.getConfigurationMap().get(key.getName()).getValues());\n+                    property.setOverridable(connInstanceTO.getConfigurationMap().get(key.getName()).isOverridable());\n+                }\n+\n+                if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {\n+                    property.getValues().addAll(key.getDefaultValues());\n+                }\n+\n+                props.add(property);\n+            }\n+        }\n+\n+        // re-order properties (implements Comparable)\n+        Collections.sort(props);\n+        return props;\n+    }\n+\n+    private void selectVersion(final AjaxRequestTarget target, final ConnInstanceTO connInstanceTO,\n+            final AjaxDropDownChoicePanel<String> version, final String versionValue) {\n+\n+        connInstanceTO.setVersion(versionValue);\n+        target.add(version);\n+\n+        bundleTO = getSelectedBundleTO(connInstanceTO);\n+        properties = fillProperties(bundleTO, connInstanceTO);\n+        target.add(propertiesContainer);\n+    }\n+\n+    public List<ConnConfProperty> getProperties() {\n+        return properties;\n+    }\n+}"},{"sha":"fd948b1000b90350603026f060efdc140e78cb74","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/DerSchemaModalPage.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDerSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDerSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDerSchemaModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.DerSchemaTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+/**\n+ * Modal window with Schema form.\n+ */\n+public class DerSchemaModalPage extends AbstractSchemaModalPage<DerSchemaTO> {\n+\n+    private static final long serialVersionUID = 6668789770131753386L;\n+\n+    public DerSchemaModalPage(final AttributableType kind) {\n+        super(kind);\n+    }\n+\n+    @Override\n+    public void setSchemaModalPage(final PageReference pageRef, final ModalWindow window,\n+            DerSchemaTO schema, final boolean createFlag) {\n+\n+        if (schema == null) {\n+            schema = new DerSchemaTO();\n+        }\n+\n+        final Form<DerSchemaTO> schemaForm = new Form<DerSchemaTO>(FORM);\n+\n+        schemaForm.setModel(new CompoundPropertyModel<DerSchemaTO>(schema));\n+\n+        final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", getString(\"name\"), new PropertyModel<String>(\n+                schema, \"name\"));\n+        name.addRequiredLabel();\n+\n+        final AjaxTextFieldPanel expression = new AjaxTextFieldPanel(\"expression\", getString(\"expression\"),\n+                new PropertyModel<String>(schema, \"expression\"));\n+        expression.addRequiredLabel();\n+\n+        final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+\n+        final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n+        schemaForm.add(questionMarkJexlHelp);\n+        questionMarkJexlHelp.add(jexlHelp);\n+\n+        name.setEnabled(createFlag);\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(SUBMIT)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n+                DerSchemaTO schemaTO = (DerSchemaTO) form.getDefaultModelObject();\n+\n+                try {\n+                    if (createFlag) {\n+                        schemaRestClient.createDerSchema(kind, schemaTO);\n+                    } else {\n+                        schemaRestClient.updateDerSchema(kind, schemaTO);\n+                    }\n+\n+                    if (pageRef.getPage() instanceof BasePage) {\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                    }\n+\n+                    window.close(target);\n+                } catch (SyncopeClientException e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(\n+                false);\n+\n+        String allowedRoles = createFlag\n+                ? xmlRolesReader.getEntitlement(\"Schema\", \"create\")\n+                : xmlRolesReader.getEntitlement(\"Schema\", \"update\");\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, allowedRoles);\n+\n+        schemaForm.add(name);\n+\n+        schemaForm.add(expression);\n+\n+        schemaForm.add(submit);\n+\n+        schemaForm.add(cancel);\n+\n+        add(schemaForm);\n+    }\n+}"},{"sha":"3de8efe7023ff6a41cd64c0658a4a2b6c7e5657a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/DisplayAttributesModalPage.java","status":"added","additions":273,"deletions":0,"changes":273,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FDisplayAttributesModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,273 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.common.lib.search.SearchableFields;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Check;\n+import org.apache.wicket.markup.html.form.CheckGroup;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Modal window with Display attributes form.\n+ */\n+@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+public class DisplayAttributesModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -4274117450918385110L;\n+\n+    /**\n+     * Max allowed selections.\n+     */\n+    private static final int MAX_SELECTIONS = 9;\n+\n+    public static final String[] DEFAULT_SELECTION = { \"id\", \"username\", \"status\" };\n+\n+    @SpringBean\n+    private PreferenceManager prefMan;\n+\n+    private final List<String> selectedDetails;\n+\n+    private final List<String> selectedSchemas;\n+\n+    private final List<String> selectedDerSchemas;\n+\n+    private final List<String> selectedVirSchemas;\n+\n+    public DisplayAttributesModalPage(final PageReference pageRef, final ModalWindow window,\n+            final List<String> schemaNames, final List<String> dSchemaNames, final List<String> vSchemaNames) {\n+\n+        super();\n+\n+        final IModel<List<String>> fnames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return SearchableFields.get(UserTO.class);\n+            }\n+        };\n+\n+        final IModel<List<String>> names = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return schemaNames;\n+            }\n+        };\n+\n+        final IModel<List<String>> dsnames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return dSchemaNames;\n+            }\n+        };\n+\n+        final IModel<List<String>> vsnames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return vSchemaNames;\n+            }\n+        };\n+\n+        final Form form = new Form(FORM);\n+        form.setModel(new CompoundPropertyModel(this));\n+\n+        selectedDetails = prefMan.getList(getRequest(), Constants.PREF_USERS_DETAILS_VIEW);\n+\n+        selectedSchemas = prefMan.getList(getRequest(), Constants.PREF_USERS_ATTRIBUTES_VIEW);\n+\n+        selectedDerSchemas = prefMan.getList(getRequest(), Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW);\n+\n+        selectedVirSchemas = prefMan.getList(getRequest(), Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW);\n+\n+        final CheckGroup dgroup = new CheckGroup(\"dCheckGroup\", new PropertyModel(this, \"selectedDetails\"));\n+        form.add(dgroup);\n+\n+        final ListView<String> details = new ListView<String>(\"details\", fnames) {\n+\n+            private static final long serialVersionUID = 9101744072914090143L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                item.add(new Check(\"dcheck\", item.getModel()));\n+                item.add(new Label(\"dname\", new ResourceModel(item.getModelObject(), item.getModelObject())));\n+            }\n+        };\n+        dgroup.add(details);\n+\n+        if (names.getObject() == null || names.getObject().isEmpty()) {\n+            final Fragment fragment = new Fragment(\"schemas\", \"emptyFragment\", form);\n+            form.add(fragment);\n+\n+            selectedSchemas.clear();\n+        } else {\n+            final Fragment fragment = new Fragment(\"schemas\", \"sfragment\", form);\n+            form.add(fragment);\n+\n+            final CheckGroup sgroup = new CheckGroup(\"sCheckGroup\", new PropertyModel(this, \"selectedSchemas\"));\n+            fragment.add(sgroup);\n+\n+            final ListView<String> schemas = new ListView<String>(\"schemas\", names) {\n+\n+                private static final long serialVersionUID = 9101744072914090143L;\n+\n+                @Override\n+                protected void populateItem(ListItem<String> item) {\n+                    item.add(new Check(\"scheck\", item.getModel()));\n+                    item.add(new Label(\"sname\", new ResourceModel(item.getModelObject(), item.getModelObject())));\n+                }\n+            };\n+            sgroup.add(schemas);\n+        }\n+\n+        if (dsnames.getObject() == null || dsnames.getObject().isEmpty()) {\n+            final Fragment fragment = new Fragment(\"dschemas\", \"emptyFragment\", form);\n+            form.add(fragment);\n+\n+            selectedDerSchemas.clear();\n+        } else {\n+            final Fragment fragment = new Fragment(\"dschemas\", \"dsfragment\", form);\n+            form.add(fragment);\n+\n+            final CheckGroup dsgroup = new CheckGroup(\"dsCheckGroup\", new PropertyModel(this, \"selectedDerSchemas\"));\n+            fragment.add(dsgroup);\n+\n+            final ListView<String> derSchemas = new ListView<String>(\"derSchemas\", dsnames) {\n+\n+                private static final long serialVersionUID = 9101744072914090143L;\n+\n+                @Override\n+                protected void populateItem(ListItem<String> item) {\n+                    item.add(new Check(\"dscheck\", item.getModel()));\n+                    item.add(new Label(\"dsname\", new ResourceModel(item.getModelObject(), item.getModelObject())));\n+                }\n+            };\n+            dsgroup.add(derSchemas);\n+        }\n+\n+        if (vsnames.getObject() == null || vsnames.getObject().isEmpty()) {\n+            final Fragment fragment = new Fragment(\"vschemas\", \"emptyFragment\", form);\n+            form.add(fragment);\n+\n+            selectedVirSchemas.clear();\n+        } else {\n+            final Fragment fragment = new Fragment(\"vschemas\", \"vsfragment\", form);\n+            form.add(fragment);\n+\n+            final CheckGroup vsgroup = new CheckGroup(\"vsCheckGroup\", new PropertyModel(this, \"selectedVirSchemas\"));\n+            fragment.add(vsgroup);\n+\n+            final ListView<String> virSchemas = new ListView<String>(\"virSchemas\", vsnames) {\n+\n+                private static final long serialVersionUID = 9101744072914090143L;\n+\n+                @Override\n+                protected void populateItem(ListItem<String> item) {\n+                    item.add(new Check(\"vscheck\", item.getModel()));\n+                    item.add(new Label(\"vsname\", new ResourceModel(item.getModelObject(), item.getModelObject())));\n+                }\n+            };\n+            vsgroup.add(virSchemas);\n+        }\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(SUBMIT, new ResourceModel(SUBMIT)) {\n+\n+            private static final long serialVersionUID = -4804368561204623354L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                if (selectedDetails.size() + selectedSchemas.size() + selectedVirSchemas.size() + selectedDerSchemas.\n+                        size()\n+                        > MAX_SELECTIONS) {\n+\n+                    error(getString(\"tooManySelections\"));\n+                    onError(target, form);\n+                } else {\n+                    final Map<String, List<String>> prefs = new HashMap<String, List<String>>();\n+\n+                    prefs.put(Constants.PREF_USERS_DETAILS_VIEW, selectedDetails);\n+\n+                    prefs.put(Constants.PREF_USERS_ATTRIBUTES_VIEW, selectedSchemas);\n+\n+                    prefs.put(Constants.PREF_USERS_DERIVED_ATTRIBUTES_VIEW, selectedDerSchemas);\n+\n+                    prefs.put(Constants.PREF_USERS_VIRTUAL_ATTRIBUTES_VIEW, selectedVirSchemas);\n+\n+                    prefMan.setList(getRequest(), getResponse(), prefs);\n+\n+                    ((BasePage) pageRef.getPage()).setModalResult(true);\n+\n+                    window.close(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        form.add(submit);\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+\n+        add(form);\n+    }\n+}"},{"sha":"af502d20b79e136fd0b10e2ded2f273f67bedc18","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/EditUserModalPage.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEditUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEditUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FEditUserModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.commons.status.StatusBean;\n+import org.apache.syncope.client.console.panels.AccountInformationPanel;\n+import org.apache.syncope.client.console.panels.MembershipsPanel;\n+import org.apache.syncope.client.console.panels.ResourcesPanel;\n+import org.apache.syncope.client.console.panels.StatusPanel;\n+import org.apache.syncope.common.lib.AttributableOperations;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.ResourceModel;\n+\n+/**\n+ * Modal window with User form.\n+ */\n+public class EditUserModalPage extends UserModalPage {\n+\n+    private static final long serialVersionUID = -6479209496805705739L;\n+\n+    protected Form form;\n+\n+    private final UserTO initialUserTO;\n+\n+    private StatusPanel statusPanel;\n+\n+    public EditUserModalPage(final PageReference pageRef, final ModalWindow window, final UserTO userTO) {\n+        super(pageRef, window, userTO, Mode.ADMIN, true);\n+\n+        this.initialUserTO = SerializationUtils.clone(userTO);\n+\n+        form = setupEditPanel();\n+\n+        // add resource assignment details in case of update\n+        if (userTO.getKey() != 0) {\n+            form.addOrReplace(new Label(\"pwdChangeInfo\", new ResourceModel(\"pwdChangeInfo\")));\n+\n+            statusPanel = new StatusPanel(\"statuspanel\", userTO, new ArrayList<StatusBean>(), getPageReference());\n+            statusPanel.setOutputMarkupId(true);\n+            MetaDataRoleAuthorizationStrategy.authorize(\n+                    statusPanel, RENDER, xmlRolesReader.getEntitlement(\"Resources\", \"getConnectorObject\"));\n+            form.addOrReplace(statusPanel);\n+\n+            form.addOrReplace(new AccountInformationPanel(\"accountinformation\", userTO));\n+\n+            form.addOrReplace(new ResourcesPanel.Builder(\"resources\").attributableTO(userTO).\n+                    statusPanel(statusPanel).build());\n+\n+            form.addOrReplace(new MembershipsPanel(\"memberships\", userTO, mode, statusPanel, getPageReference()));\n+        }\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    @Override\n+    protected void submitAction(final AjaxRequestTarget target, final Form form) {\n+        final UserTO updatedUserTO = (UserTO) form.getModelObject();\n+\n+        if (updatedUserTO.getKey() == 0) {\n+            userTO = userRestClient.create(updatedUserTO, storePassword.getModelObject());\n+        } else {\n+            final UserMod userMod = AttributableOperations.diff(updatedUserTO, initialUserTO);\n+\n+            if (statusPanel != null) {\n+                userMod.setPwdPropRequest(statusPanel.getStatusMod());\n+            }\n+\n+            // update user just if it is changed\n+            if (!userMod.isEmpty()) {\n+                userTO = userRestClient.update(initialUserTO.getETagValue(), userMod);\n+            }\n+        }\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    @Override\n+    protected void closeAction(final AjaxRequestTarget target, final Form form) {\n+        setResponsePage(new ResultStatusModalPage.Builder(window, userTO).mode(mode).build());\n+    }\n+}"},{"sha":"db4617142350ccd952b62224343bd433657d22d5","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ErrorPage.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FErrorPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FErrorPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FErrorPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.wicket.Page;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+/**\n+ * Error WebPage.\n+ */\n+public class ErrorPage extends BasePage {\n+\n+    private static final long serialVersionUID = -390761262038796657L;\n+\n+    public ErrorPage(final PageParameters parameters) {\n+        super(parameters);\n+\n+        add(new Label(\"errorTitle\", new Model<String>(parameters.get(\"errorTitle\").toString())));\n+        add(new Label(\"errorMessage\", new Model<String>(parameters.get(\"errorMessage\").toString())));\n+\n+        add(new BookmarkablePageLink<Page>(\"home\", getApplication().getHomePage()));\n+    }\n+}"},{"sha":"e39f3fca54aece32cab181f518cf7d15b9c9cb50","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ExecMessageModalPage.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FExecMessageModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FExecMessageModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FExecMessageModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.model.Model;\n+\n+public class ExecMessageModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 3163146190501510888L;\n+\n+    public ExecMessageModalPage(final String message) {\n+        final Label dialogContent = new Label(\"message\", new Model<String>(message));\n+        add(dialogContent.setOutputMarkupId(true));\n+    }\n+}"},{"sha":"c0ee7ec0258f4b16ed249c24a14753c2e856ba40","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/FailureMessageModalPage.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFailureMessageModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFailureMessageModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FFailureMessageModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.model.Model;\n+\n+public class FailureMessageModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 9216117990503199258L;\n+\n+    public FailureMessageModalPage(final String message, final String failureMessage) {\n+        final Label executionFailureMessage;\n+        if (!failureMessage.isEmpty()) {\n+            executionFailureMessage = new Label(\"failureMessage\", new Model<String>(failureMessage));\n+        } else {\n+            executionFailureMessage = new Label(\"failureMessage\");\n+        }\n+        add(executionFailureMessage.setOutputMarkupId(true));\n+    }\n+}"},{"sha":"7b4ba68db3a48ff130937aba6171ce5b96dfd3f3","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/HomePage.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FHomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FHomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FHomePage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+/**\n+ * Syncope Home-Page.\n+ */\n+public class HomePage extends BasePage {\n+\n+    private static final long serialVersionUID = -6712990478380766293L;\n+\n+    public HomePage(final PageParameters parameters) {\n+        super(parameters);\n+    }\n+}"},{"sha":"83e01634703bc7e534cb0516c6dd7d38aaaf058e","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/InfoModalPage.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FInfoModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FInfoModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FInfoModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.SyncopeSession;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.link.ExternalLink;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class InfoModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 5558354927844399580L;\n+\n+    @SpringBean(name = \"site\")\n+    private String siteUrl;\n+\n+    @SpringBean(name = \"license\")\n+    private String licenseUrl;\n+\n+    public InfoModalPage() {\n+        super();\n+\n+        add(new ExternalLink(\"syncopeLink\", siteUrl));\n+        add(new ExternalLink(\"licenseLink\", licenseUrl));\n+        add(new Label(\"version\", SyncopeSession.get().getVersion()));\n+    }\n+}"},{"sha":"deaa359a033fcd228309d3c68cc6f39d1be923e1","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java","status":"added","additions":365,"deletions":0,"changes":365,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,365 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.security.AccessControlException;\n+import java.util.List;\n+import java.util.Locale;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.NotificationPanel;\n+import org.apache.syncope.client.console.rest.UserSelfRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.LinkPanel;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.wrap.EntitlementTO;\n+import org.apache.syncope.common.rest.api.CollectionWrapper;\n+import org.apache.syncope.common.rest.api.service.EntitlementService;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.ajax.AbstractDefaultAjaxBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.head.IHeaderResponse;\n+import org.apache.wicket.markup.head.JavaScriptHeaderItem;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.ChoiceRenderer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.PasswordTextField;\n+import org.apache.wicket.markup.html.form.StatelessForm;\n+import org.apache.wicket.markup.html.form.TextField;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.request.cycle.RequestCycle;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Syncope Login page.\n+ */\n+public class Login extends WebPage {\n+\n+    private static final long serialVersionUID = -3744389270366566218L;\n+\n+    private final static int SELF_REG_WIN_HEIGHT = 550;\n+\n+    private final static int SELF_REG_WIN_WIDTH = 800;\n+\n+    private final static int PWD_RESET_WIN_HEIGHT = 300;\n+\n+    private final static int PWD_RESET_WIN_WIDTH = 800;\n+\n+    @SpringBean(name = \"version\")\n+    private String version;\n+\n+    @SpringBean(name = \"anonymousUser\")\n+    private String anonymousUser;\n+\n+    @SpringBean(name = \"anonymousKey\")\n+    private String anonymousKey;\n+\n+    @SpringBean\n+    private UserSelfRestClient userSelfRestClient;\n+\n+    private final StatelessForm<Void> form;\n+\n+    private final TextField<String> userIdField;\n+\n+    private final TextField<String> passwordField;\n+\n+    private final DropDownChoice<Locale> languageSelect;\n+\n+    private final NotificationPanel feedbackPanel;\n+\n+    public Login(final PageParameters parameters) {\n+        super(parameters);\n+        setStatelessHint(true);\n+\n+        feedbackPanel = new NotificationPanel(Constants.FEEDBACK);\n+        add(feedbackPanel);\n+\n+        form = new StatelessForm<Void>(\"login\");\n+\n+        userIdField = new TextField<String>(\"userId\", new Model<String>());\n+        userIdField.setMarkupId(\"userId\");\n+        form.add(userIdField);\n+\n+        passwordField = new PasswordTextField(\"password\", new Model<String>());\n+        passwordField.setMarkupId(\"password\");\n+        form.add(passwordField);\n+\n+        languageSelect = new LocaleDropDown(\"language\");\n+\n+        form.add(languageSelect);\n+\n+        AjaxButton submitButton = new AjaxButton(\"submit\", new Model<String>(getString(\"submit\"))) {\n+\n+            private static final long serialVersionUID = 429178684321093953L;\n+\n+            @Override\n+            protected void onSubmit(AjaxRequestTarget target, Form<?> form) {\n+                try {\n+                    if (anonymousUser.equals(userIdField.getRawInput())) {\n+                        throw new AccessControlException(\"Illegal username\");\n+                    }\n+\n+                    authenticate(userIdField.getRawInput(), passwordField.getRawInput());\n+\n+                    setResponsePage(WelcomePage.class, parameters);\n+                } catch (AccessControlException e) {\n+                    error(getString(\"login-error\"));\n+                    feedbackPanel.refresh(target);\n+                    SyncopeSession.get().resetClients();\n+                }\n+            }\n+        };\n+\n+        submitButton.setDefaultFormProcessing(false);\n+        form.add(submitButton);\n+\n+        add(form);\n+\n+        // Modal window for self registration\n+        final ModalWindow selfRegModalWin = new ModalWindow(\"selfRegModal\");\n+        selfRegModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        selfRegModalWin.setInitialHeight(SELF_REG_WIN_HEIGHT);\n+        selfRegModalWin.setInitialWidth(SELF_REG_WIN_WIDTH);\n+        selfRegModalWin.setCookieName(\"self-reg-modal\");\n+        add(selfRegModalWin);\n+\n+        Fragment selfRegFrag;\n+        if (userSelfRestClient.isSelfRegistrationAllowed()) {\n+            selfRegFrag = new Fragment(\"selfRegistration\", \"selfRegAllowed\", this);\n+\n+            final AjaxLink<Void> selfRegLink = new ClearIndicatingAjaxLink<Void>(\"link\", getPageReference()) {\n+\n+                private static final long serialVersionUID = -7978723352517770644L;\n+\n+                @Override\n+                protected void onClickInternal(final AjaxRequestTarget target) {\n+                    selfRegModalWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                        private static final long serialVersionUID = -7834632442532690940L;\n+\n+                        @Override\n+                        public Page createPage() {\n+                            // anonymous authentication needed for self-registration\n+                            authenticate(anonymousUser, anonymousKey);\n+\n+                            return new UserSelfModalPage(Login.this.getPageReference(), selfRegModalWin, new UserTO());\n+                        }\n+                    });\n+\n+                    selfRegModalWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+                        private static final long serialVersionUID = 251794406325329768L;\n+\n+                        @Override\n+                        public void onClose(final AjaxRequestTarget target) {\n+                            SyncopeSession.get().invalidate();\n+                        }\n+                    });\n+\n+                    selfRegModalWin.show(target);\n+                }\n+            };\n+            selfRegLink.add(new Label(\"linkTitle\", getString(\"selfRegistration\")));\n+\n+            Panel panel = new LinkPanel(\"selfRegistration\", new ResourceModel(\"selfRegistration\"));\n+            panel.add(selfRegLink);\n+            selfRegFrag.add(panel);\n+        } else {\n+            selfRegFrag = new Fragment(\"selfRegistration\", \"selfRegNotAllowed\", this);\n+        }\n+        add(selfRegFrag);\n+\n+        // Modal window for password reset request\n+        final ModalWindow pwdResetReqModalWin = new ModalWindow(\"pwdResetReqModal\");\n+        pwdResetReqModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        pwdResetReqModalWin.setInitialHeight(PWD_RESET_WIN_HEIGHT);\n+        pwdResetReqModalWin.setInitialWidth(PWD_RESET_WIN_WIDTH);\n+        pwdResetReqModalWin.setCookieName(\"pwd-reset-req-modal\");\n+        add(pwdResetReqModalWin);\n+\n+        Fragment pwdResetFrag;\n+        if (userSelfRestClient.isPasswordResetAllowed()) {\n+            pwdResetFrag = new Fragment(\"passwordReset\", \"pwdResetAllowed\", this);\n+\n+            final AjaxLink<Void> pwdResetLink = new ClearIndicatingAjaxLink<Void>(\"link\", getPageReference()) {\n+\n+                private static final long serialVersionUID = -6957616042924610290L;\n+\n+                @Override\n+                protected void onClickInternal(final AjaxRequestTarget target) {\n+                    pwdResetReqModalWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                        private static final long serialVersionUID = -7834632442532690940L;\n+\n+                        @Override\n+                        public Page createPage() {\n+                            // anonymous authentication needed for password reset request\n+                            authenticate(anonymousUser, anonymousKey);\n+\n+                            return new RequestPasswordResetModalPage(pwdResetReqModalWin);\n+                        }\n+                    });\n+\n+                    pwdResetReqModalWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+                        private static final long serialVersionUID = 8804221891699487139L;\n+\n+                        @Override\n+                        public void onClose(final AjaxRequestTarget target) {\n+                            SyncopeSession.get().invalidate();\n+                            setResponsePage(Login.class);\n+                        }\n+                    });\n+\n+                    pwdResetReqModalWin.show(target);\n+                }\n+            };\n+            pwdResetLink.add(new Label(\"linkTitle\", getString(\"passwordReset\")));\n+\n+            Panel panel = new LinkPanel(\"passwordReset\", new ResourceModel(\"passwordReset\"));\n+            panel.add(pwdResetLink);\n+            pwdResetFrag.add(panel);\n+        } else {\n+            pwdResetFrag = new Fragment(\"passwordReset\", \"pwdResetNotAllowed\", this);\n+        }\n+        add(pwdResetFrag);\n+\n+        // Modal window for password reset confirm - automatically shown when token is available as request parameter\n+        final String pwdResetToken = RequestCycle.get().getRequest().getRequestParameters().\n+                getParameterValue(Constants.PARAM_PASSWORD_RESET_TOKEN).toOptionalString();\n+        final ModalWindow pwdResetConfModalWin = new ModalWindow(\"pwdResetConfModal\");\n+        if (StringUtils.isNotBlank(pwdResetToken)) {\n+            pwdResetConfModalWin.add(new AbstractDefaultAjaxBehavior() {\n+\n+                private static final long serialVersionUID = 3109256773218160485L;\n+\n+                @Override\n+                protected void respond(final AjaxRequestTarget target) {\n+                    ModalWindow window = (ModalWindow) getComponent();\n+                    window.show(target);\n+                }\n+\n+                @Override\n+                public void renderHead(final Component component, final IHeaderResponse response) {\n+                    response.render(JavaScriptHeaderItem.forScript(getCallbackScript(), null));\n+                }\n+            });\n+        }\n+        pwdResetConfModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        pwdResetConfModalWin.setInitialHeight(PWD_RESET_WIN_HEIGHT);\n+        pwdResetConfModalWin.setInitialWidth(PWD_RESET_WIN_WIDTH);\n+        pwdResetConfModalWin.setCookieName(\"pwd-reset-conf-modal\");\n+        pwdResetConfModalWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+            private static final long serialVersionUID = -7834632442532690940L;\n+\n+            @Override\n+            public Page createPage() {\n+                // anonymous authentication needed for password reset confirm\n+                authenticate(anonymousUser, anonymousKey);\n+\n+                return new ConfirmPasswordResetModalPage(pwdResetConfModalWin, pwdResetToken);\n+            }\n+        });\n+        pwdResetConfModalWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                SyncopeSession.get().invalidate();\n+                setResponsePage(Login.class);\n+            }\n+        });\n+        add(pwdResetConfModalWin);\n+    }\n+\n+    private void authenticate(final String username, final String password) {\n+        List<EntitlementTO> entitlements = SyncopeSession.get().\n+                getService(EntitlementService.class, username, password).getOwnEntitlements();\n+\n+        SyncopeSession.get().setUsername(username);\n+        SyncopeSession.get().setPassword(password);\n+        SyncopeSession.get().setEntitlements(CollectionWrapper.unwrap(entitlements).toArray(new String[0]));\n+        SyncopeSession.get().setVersion(version);\n+    }\n+\n+    /**\n+     * Inner class which implements (custom) Locale DropDownChoice component.\n+     */\n+    private class LocaleDropDown extends DropDownChoice<Locale> {\n+\n+        private static final long serialVersionUID = 2349382679992357202L;\n+\n+        private class LocaleRenderer extends ChoiceRenderer<Locale> {\n+\n+            private static final long serialVersionUID = -3657529581555164741L;\n+\n+            @Override\n+            public String getDisplayValue(final Locale locale) {\n+                return locale.getDisplayName(getLocale());\n+            }\n+        }\n+\n+        public LocaleDropDown(final String id) {\n+            super(id, SyncopeSession.SUPPORTED_LOCALES);\n+\n+            setChoiceRenderer(new LocaleRenderer());\n+            setModel(new IModel<Locale>() {\n+\n+                private static final long serialVersionUID = -6985170095629312963L;\n+\n+                @Override\n+                public Locale getObject() {\n+                    return getSession().getLocale();\n+                }\n+\n+                @Override\n+                public void setObject(final Locale object) {\n+                    getSession().setLocale(object);\n+                }\n+\n+                @Override\n+                public void detach() {\n+                    // Empty.\n+                }\n+            });\n+\n+            // set default value to English\n+            getModel().setObject(Locale.ENGLISH);\n+        }\n+\n+        @Override\n+        protected boolean wantOnSelectionChangedNotifications() {\n+            return true;\n+        }\n+    }\n+}"},{"sha":"acf313b50859236f1556ce40bba5d56308ab8fde","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Logout.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogout.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.SyncopeSession;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+\n+/**\n+ * Syncope Logout.\n+ */\n+public class Logout extends BasePage {\n+\n+    private static final long serialVersionUID = -2143007520243939450L;\n+\n+    public Logout(final PageParameters parameters) {\n+        super(parameters);\n+\n+        SyncopeSession.get().invalidate();\n+\n+        setResponsePage(getApplication().getHomePage());\n+    }\n+}"},{"sha":"f2e2189ffec3b8f15adc7254d90b8bab7d0ce38c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/MembershipModalPage.java","status":"added","additions":114,"deletions":0,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMembershipModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMembershipModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMembershipModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,114 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.panels.AnnotatedBeanPanel;\n+import org.apache.syncope.client.console.panels.DerAttrsPanel;\n+import org.apache.syncope.client.console.panels.PlainAttrsPanel;\n+import org.apache.syncope.client.console.panels.VirAttrsPanel;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class MembershipModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -4360802478081432549L;\n+\n+    private final AjaxButton submit;\n+\n+    public MembershipModalPage(final PageReference pageRef, final ModalWindow window, final MembershipTO membershipTO,\n+            final Mode mode) {\n+\n+        final Form<MembershipTO> form = new Form<MembershipTO>(\"MembershipForm\");\n+\n+        final UserTO userTO = ((UserModalPage) pageRef.getPage()).getUserTO();\n+\n+        form.setModel(new CompoundPropertyModel<MembershipTO>(membershipTO));\n+\n+        submit = new AjaxButton(SUBMIT, new ResourceModel(SUBMIT)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form form) {\n+                userTO.getMemberships().remove(membershipTO);\n+                userTO.getMemberships().add(membershipTO);\n+\n+                ((UserModalPage) pageRef.getPage()).setUserTO(userTO);\n+\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        final IndicatingAjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                ((UserModalPage) pageRef.getPage()).setUserTO(userTO);\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+\n+        //--------------------------------\n+        // Attributes panel\n+        //--------------------------------\n+        form.add(new PlainAttrsPanel(\"plainAttrs\", membershipTO, form, mode));\n+        form.add(new AnnotatedBeanPanel(\"systeminformation\", membershipTO));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Derived attributes container\n+        //--------------------------------\n+        form.add(new DerAttrsPanel(\"derAttrs\", membershipTO));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Virtual attributes container\n+        //--------------------------------\n+        form.add(new VirAttrsPanel(\"virAttrs\", membershipTO, mode == Mode.TEMPLATE));\n+        //--------------------------------\n+\n+        add(form);\n+    }\n+}"},{"sha":"cb342ae22c971f9237a2f2e4f5ef9fdba6eabfee","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/NotificationModalPage.java","status":"added","additions":441,"deletions":0,"changes":441,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotificationModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotificationModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotificationModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,441 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.EnumSet;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.LoggerCategoryPanel;\n+import org.apache.syncope.client.console.panels.RoleSearchPanel;\n+import org.apache.syncope.client.console.panels.UserSearchPanel;\n+import org.apache.syncope.client.console.rest.LoggerRestClient;\n+import org.apache.syncope.client.console.rest.NotificationRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.NotificationTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.TraceLevel;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.apache.wicket.validation.validator.EmailAddressValidator;\n+\n+class NotificationModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -1975312550059578553L;\n+\n+    @SpringBean\n+    private NotificationRestClient restClient;\n+\n+    @SpringBean\n+    private LoggerRestClient loggerRestClient;\n+\n+    public NotificationModalPage(final PageReference pageRef, final ModalWindow window,\n+            final NotificationTO notificationTO, final boolean createFlag) {\n+\n+        final Form<NotificationTO> form =\n+                new Form<NotificationTO>(FORM, new CompoundPropertyModel<NotificationTO>(notificationTO));\n+\n+        final AjaxTextFieldPanel sender = new AjaxTextFieldPanel(\"sender\", getString(\"sender\"),\n+                new PropertyModel<String>(notificationTO, \"sender\"));\n+        sender.addRequiredLabel();\n+        sender.addValidator(EmailAddressValidator.getInstance());\n+        form.add(sender);\n+\n+        final AjaxTextFieldPanel subject = new AjaxTextFieldPanel(\"subject\", getString(\"subject\"),\n+                new PropertyModel<String>(notificationTO, \"subject\"));\n+        subject.addRequiredLabel();\n+        form.add(subject);\n+\n+        final AjaxDropDownChoicePanel<String> template = new AjaxDropDownChoicePanel<String>(\n+                \"template\", getString(\"template\"),\n+                new PropertyModel<String>(notificationTO, \"template\"));\n+        template.setChoices(confRestClient.getMailTemplates());\n+        template.addRequiredLabel();\n+        form.add(template);\n+\n+        final AjaxDropDownChoicePanel<TraceLevel> traceLevel = new AjaxDropDownChoicePanel<TraceLevel>(\n+                \"traceLevel\", getString(\"traceLevel\"),\n+                new PropertyModel<TraceLevel>(notificationTO, \"traceLevel\"));\n+        traceLevel.setChoices(Arrays.asList(TraceLevel.values()));\n+        traceLevel.addRequiredLabel();\n+        form.add(traceLevel);\n+\n+        final AjaxCheckBoxPanel isActive = new AjaxCheckBoxPanel(\"isActive\",\n+                getString(\"isActive\"), new PropertyModel<Boolean>(notificationTO, \"active\"));\n+        if (createFlag) {\n+            isActive.getField().setDefaultModelObject(Boolean.TRUE);\n+        }\n+        form.add(isActive);\n+\n+        final WebMarkupContainer aboutContainer = new WebMarkupContainer(\"aboutContainer\");\n+        aboutContainer.setOutputMarkupId(true);\n+\n+        form.add(aboutContainer);\n+\n+        final AjaxCheckBoxPanel checkAbout = new AjaxCheckBoxPanel(\"checkAbout\", \"checkAbout\", new Model<Boolean>(\n+                notificationTO.getUserAbout() == null && notificationTO.getRoleAbout() == null));\n+        aboutContainer.add(checkAbout);\n+\n+        final AjaxCheckBoxPanel checkUserAbout = new AjaxCheckBoxPanel(\"checkUserAbout\", \"checkUserAbout\",\n+                new Model<Boolean>(notificationTO.getUserAbout() != null));\n+        aboutContainer.add(checkUserAbout);\n+\n+        final AjaxCheckBoxPanel checkRoleAbout = new AjaxCheckBoxPanel(\"checkRoleAbout\", \"checkRoleAbout\",\n+                new Model<Boolean>(notificationTO.getRoleAbout() != null));\n+        aboutContainer.add(checkRoleAbout);\n+\n+        final UserSearchPanel userAbout =\n+                new UserSearchPanel.Builder(\"userAbout\").fiql(notificationTO.getUserAbout()).build();\n+        aboutContainer.add(userAbout);\n+        userAbout.setEnabled(checkUserAbout.getModelObject());\n+\n+        final RoleSearchPanel roleAbout =\n+                new RoleSearchPanel.Builder(\"roleAbout\").fiql(notificationTO.getRoleAbout()).build();\n+        aboutContainer.add(roleAbout);\n+        roleAbout.setEnabled(checkRoleAbout.getModelObject());\n+\n+        checkAbout.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (checkAbout.getModelObject()) {\n+                    checkUserAbout.setModelObject(Boolean.FALSE);\n+                    checkRoleAbout.setModelObject(Boolean.FALSE);\n+                    userAbout.setEnabled(Boolean.FALSE);\n+                    roleAbout.setEnabled(Boolean.FALSE);\n+                } else {\n+                    checkAbout.setModelObject(Boolean.TRUE);\n+                }\n+                target.add(aboutContainer);\n+            }\n+        });\n+\n+        checkUserAbout.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (checkUserAbout.getModelObject()) {\n+                    checkAbout.setModelObject(!checkUserAbout.getModelObject());\n+                    checkRoleAbout.setModelObject(!checkUserAbout.getModelObject());\n+                    roleAbout.setEnabled(Boolean.FALSE);\n+                } else {\n+                    checkUserAbout.setModelObject(Boolean.TRUE);\n+                }\n+                userAbout.setEnabled(Boolean.TRUE);\n+                target.add(aboutContainer);\n+            }\n+        });\n+\n+        checkRoleAbout.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (checkRoleAbout.getModelObject()) {\n+                    checkAbout.setModelObject(Boolean.FALSE);\n+                    checkUserAbout.setModelObject(Boolean.FALSE);\n+                    userAbout.setEnabled(Boolean.FALSE);\n+                } else {\n+                    checkRoleAbout.setModelObject(Boolean.TRUE);\n+                }\n+                roleAbout.setEnabled(Boolean.TRUE);\n+                target.add(aboutContainer);\n+            }\n+        });\n+\n+        final AjaxDropDownChoicePanel<IntMappingType> recipientAttrType = new AjaxDropDownChoicePanel<IntMappingType>(\n+                \"recipientAttrType\", new ResourceModel(\"recipientAttrType\", \"recipientAttrType\").getObject(),\n+                new PropertyModel<IntMappingType>(notificationTO, \"recipientAttrType\"));\n+        recipientAttrType.setChoices(new ArrayList<IntMappingType>(\n+                IntMappingType.getAttributeTypes(AttributableType.USER,\n+                        EnumSet.of(IntMappingType.UserId, IntMappingType.Password))));\n+        recipientAttrType.setRequired(true);\n+        form.add(recipientAttrType);\n+\n+        final AjaxDropDownChoicePanel<String> recipientAttrName = new AjaxDropDownChoicePanel<String>(\n+                \"recipientAttrName\", new ResourceModel(\"recipientAttrName\", \"recipientAttrName\").getObject(),\n+                new PropertyModel<String>(notificationTO, \"recipientAttrName\"));\n+        recipientAttrName.setChoices(getSchemaNames(recipientAttrType.getModelObject()));\n+        recipientAttrName.setRequired(true);\n+        form.add(recipientAttrName);\n+\n+        recipientAttrType.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                recipientAttrName.setChoices(getSchemaNames(recipientAttrType.getModelObject()));\n+                target.add(recipientAttrName);\n+            }\n+        });\n+\n+        form.add(new LoggerCategoryPanel(\n+                \"eventSelection\",\n+                loggerRestClient.listEvents(),\n+                new PropertyModel<List<String>>(notificationTO, \"events\"),\n+                getPageReference(),\n+                \"Notification\") {\n+\n+                    private static final long serialVersionUID = 6429053774964787735L;\n+\n+                    @Override\n+                    protected String[] getListRoles() {\n+                        return new String[] {};\n+                    }\n+\n+                    @Override\n+                    protected String[] getChangeRoles() {\n+                        return new String[] {};\n+                    }\n+                });\n+\n+        final WebMarkupContainer recipientsContainer = new WebMarkupContainer(\"recipientsContainer\");\n+        recipientsContainer.setOutputMarkupId(true);\n+\n+        form.add(recipientsContainer);\n+\n+        final AjaxCheckBoxPanel checkStaticRecipients = new AjaxCheckBoxPanel(\"checkStaticRecipients\",\n+                \"recipients\", new Model<Boolean>(!notificationTO.getStaticRecipients().isEmpty()));\n+        form.add(checkStaticRecipients);\n+\n+        if (createFlag) {\n+            checkStaticRecipients.getField().setDefaultModelObject(Boolean.FALSE);\n+        }\n+\n+        final AjaxTextFieldPanel staticRecipientsFieldPanel =\n+                new AjaxTextFieldPanel(\"panel\", \"staticRecipients\", new Model<String>(null));\n+        staticRecipientsFieldPanel.addValidator(EmailAddressValidator.getInstance());\n+        staticRecipientsFieldPanel.setRequired(checkStaticRecipients.getModelObject());\n+\n+        if (notificationTO.getStaticRecipients().isEmpty()) {\n+            notificationTO.getStaticRecipients().add(null);\n+        }\n+\n+        final MultiFieldPanel<String> staticRecipients = new MultiFieldPanel<String>(\"staticRecipients\",\n+                new PropertyModel<List<String>>(notificationTO, \"staticRecipients\"), staticRecipientsFieldPanel);\n+        staticRecipients.setEnabled(checkStaticRecipients.getModelObject());\n+        form.add(staticRecipients);\n+\n+        final AjaxCheckBoxPanel checkRecipients =\n+                new AjaxCheckBoxPanel(\"checkRecipients\", \"checkRecipients\",\n+                        new Model<Boolean>(notificationTO.getRecipients() == null ? false : true));\n+        recipientsContainer.add(checkRecipients);\n+\n+        if (createFlag) {\n+            checkRecipients.getField().setDefaultModelObject(Boolean.TRUE);\n+        }\n+\n+        final UserSearchPanel recipients =\n+                new UserSearchPanel.Builder(\"recipients\").fiql(notificationTO.getRecipients()).build();\n+\n+        recipients.setEnabled(checkRecipients.getModelObject());\n+        recipientsContainer.add(recipients);\n+\n+        final AjaxCheckBoxPanel selfAsRecipient = new AjaxCheckBoxPanel(\"selfAsRecipient\",\n+                getString(\"selfAsRecipient\"), new PropertyModel<Boolean>(notificationTO, \"selfAsRecipient\"));\n+        form.add(selfAsRecipient);\n+\n+        if (createFlag) {\n+            selfAsRecipient.getField().setDefaultModelObject(Boolean.FALSE);\n+        }\n+\n+        selfAsRecipient.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (!selfAsRecipient.getModelObject()\n+                        && !checkRecipients.getModelObject()\n+                        && !checkStaticRecipients.getModelObject()) {\n+\n+                    checkRecipients.getField().setDefaultModelObject(Boolean.TRUE);\n+                    target.add(checkRecipients);\n+                    recipients.setEnabled(checkRecipients.getModelObject());\n+                    target.add(recipients);\n+                    target.add(recipientsContainer);\n+                }\n+            }\n+        });\n+\n+        checkRecipients.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (!checkRecipients.getModelObject()\n+                        && !selfAsRecipient.getModelObject()\n+                        && !checkStaticRecipients.getModelObject()) {\n+\n+                    checkStaticRecipients.getField().setDefaultModelObject(Boolean.TRUE);\n+                    target.add(checkStaticRecipients);\n+                    staticRecipients.setEnabled(Boolean.TRUE);\n+                    target.add(staticRecipients);\n+                    staticRecipientsFieldPanel.setRequired(Boolean.TRUE);\n+                    target.add(staticRecipientsFieldPanel);\n+                }\n+                recipients.setEnabled(checkRecipients.getModelObject());\n+                target.add(recipients);\n+                target.add(recipientsContainer);\n+            }\n+        });\n+\n+        checkStaticRecipients.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                if (!checkStaticRecipients.getModelObject()\n+                        && !selfAsRecipient.getModelObject()\n+                        && !checkRecipients.getModelObject()) {\n+                    checkRecipients.getField().setDefaultModelObject(Boolean.TRUE);\n+                    checkRecipients.setEnabled(Boolean.TRUE);\n+                    target.add(checkRecipients);\n+                }\n+                staticRecipients.setEnabled(checkStaticRecipients.getModelObject());\n+                staticRecipientsFieldPanel.setRequired(checkStaticRecipients.getModelObject());\n+                recipients.setEnabled(checkRecipients.getModelObject());\n+                target.add(staticRecipientsFieldPanel);\n+                target.add(staticRecipients);\n+                target.add(recipients);\n+                target.add(recipientsContainer);\n+            }\n+        });\n+\n+        AjaxButton submit = new IndicatingAjaxButton(APPLY, new Model<String>(getString(SUBMIT))) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                notificationTO.setUserAbout(\n+                        !checkAbout.getModelObject() && checkUserAbout.getModelObject() ? userAbout.buildFIQL() : null);\n+                notificationTO.setRoleAbout(\n+                        !checkAbout.getModelObject()\n+                        && checkRoleAbout.getModelObject() ? roleAbout.buildFIQL() : null);\n+                notificationTO.setRecipients(checkRecipients.getModelObject() ? recipients.buildFIQL() : null);\n+                notificationTO.getStaticRecipients().removeAll(Collections.singleton(null));\n+\n+                try {\n+                    if (createFlag) {\n+                        restClient.create(notificationTO);\n+                    } else {\n+                        restClient.update(notificationTO);\n+                    }\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+\n+                    Configuration callerPage = (Configuration) pageRef.getPage();\n+                    callerPage.setModalResult(true);\n+\n+                    window.close(target);\n+                } catch (SyncopeClientException scee) {\n+                    error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+\n+        String allowedRoles = createFlag\n+                ? xmlRolesReader.getEntitlement(\"Notification\", \"create\")\n+                : xmlRolesReader.getEntitlement(\"Notification\", \"update\");\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, allowedRoles);\n+\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        form.add(cancel);\n+\n+        add(form);\n+    }\n+\n+    private List<String> getSchemaNames(final IntMappingType type) {\n+        final List<String> result;\n+\n+        if (type == null) {\n+            result = Collections.<String>emptyList();\n+        } else {\n+            switch (type) {\n+                case UserPlainSchema:\n+                    result = schemaRestClient.getSchemaNames(AttributableType.USER);\n+                    break;\n+\n+                case UserDerivedSchema:\n+                    result = schemaRestClient.getDerSchemaNames(AttributableType.USER);\n+                    break;\n+\n+                case UserVirtualSchema:\n+                    result = schemaRestClient.getVirSchemaNames(AttributableType.USER);\n+                    break;\n+\n+                case Username:\n+                    result = Collections.singletonList(\"Username\");\n+                    break;\n+\n+                default:\n+                    result = Collections.<String>emptyList();\n+            }\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"70f63d6129e4516e2ae52b63d0a6cacd7069df77","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/NotificationTaskModalPage.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotificationTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotificationTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FNotificationTaskModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.wicket.markup.html.form.ListMultipleChoice;\n+import org.apache.wicket.markup.html.form.TextArea;\n+import org.apache.wicket.model.PropertyModel;\n+\n+public class NotificationTaskModalPage extends TaskModalPage {\n+\n+    private static final long serialVersionUID = -4399606755452034216L;\n+\n+    public NotificationTaskModalPage(final AbstractTaskTO taskTO) {\n+        super(taskTO);\n+\n+        final AjaxTextFieldPanel sender = new AjaxTextFieldPanel(\"sender\", getString(\"sender\"),\n+                new PropertyModel<String>(taskTO, \"sender\"));\n+        sender.setEnabled(false);\n+        profile.add(sender);\n+\n+        if (taskTO instanceof NotificationTaskTO) {\n+            final ListMultipleChoice<String> recipients = new ListMultipleChoice<>(\"recipients\",\n+                    new ArrayList<>(((NotificationTaskTO) taskTO).getRecipients()));\n+            recipients.setMaxRows(5);\n+            recipients.setEnabled(false);\n+            profile.add(recipients);\n+        }\n+\n+        final AjaxTextFieldPanel subject = new AjaxTextFieldPanel(\"subject\", getString(\"subject\"),\n+                new PropertyModel<String>(taskTO, \"subject\"));\n+        subject.setEnabled(false);\n+        profile.add(subject);\n+\n+        final TextArea<String> textBody = new TextArea<String>(\"textBody\",\n+                new PropertyModel<String>(taskTO, \"textBody\"));\n+        textBody.setEnabled(false);\n+        profile.add(textBody);\n+\n+        final TextArea<String> htmlBody = new TextArea<String>(\"htmlBody\",\n+                new PropertyModel<String>(taskTO, \"htmlBody\"));\n+        htmlBody.setEnabled(false);\n+        profile.add(htmlBody);\n+\n+        final AjaxTextFieldPanel traceLevel = new AjaxTextFieldPanel(\"traceLevel\", getString(\"traceLevel\"),\n+                new PropertyModel<String>(taskTO, \"traceLevel\"));\n+        traceLevel.setEnabled(false);\n+        profile.add(traceLevel);\n+    }\n+}"},{"sha":"869f3a6ee9be657aadb8d8c1ac0c97a0f9d5dff5","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/PlainSchemaModalPage.java","status":"added","additions":456,"deletions":0,"changes":456,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPlainSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPlainSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPlainSchemaModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,456 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.CipherAlgorithm;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.autocomplete.AutoCompleteTextField;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.util.string.Strings;\n+\n+/**\n+ * Modal window with Schema form.\n+ */\n+public class PlainSchemaModalPage extends AbstractSchemaModalPage<PlainSchemaTO> {\n+\n+    private static final long serialVersionUID = -5991561277287424057L;\n+\n+    public PlainSchemaModalPage(final AttributableType kind) {\n+        super(kind);\n+    }\n+\n+    @Override\n+    public void setSchemaModalPage(final PageReference pageRef, final ModalWindow window,\n+            final PlainSchemaTO schemaTO, final boolean createFlag) {\n+\n+        final PlainSchemaTO schema = schemaTO == null\n+                ? new PlainSchemaTO()\n+                : schemaTO;\n+\n+        final Form<PlainSchemaTO> schemaForm = new Form<>(FORM);\n+\n+        schemaForm.setModel(new CompoundPropertyModel<>(schema));\n+        schemaForm.setOutputMarkupId(true);\n+\n+        final AjaxTextFieldPanel name =\n+                new AjaxTextFieldPanel(\"name\", getString(\"name\"), new PropertyModel<String>(schema, \"name\"));\n+        name.addRequiredLabel();\n+        name.setEnabled(createFlag);\n+        schemaForm.add(name);\n+\n+        final AjaxDropDownChoicePanel<AttrSchemaType> type = new AjaxDropDownChoicePanel<>(\n+                \"type\", getString(\"type\"), new PropertyModel<AttrSchemaType>(schema, \"type\"));\n+        type.setChoices(Arrays.asList(AttrSchemaType.values()));\n+        type.addRequiredLabel();\n+        schemaForm.add(type);\n+\n+        // -- long, double, date\n+        final AjaxTextFieldPanel conversionPattern = new AjaxTextFieldPanel(\"conversionPattern\",\n+                getString(\"conversionPattern\"), new PropertyModel<String>(schema, \"conversionPattern\"));\n+        schemaForm.add(conversionPattern);\n+\n+        final WebMarkupContainer conversionParams = new WebMarkupContainer(\"conversionParams\");\n+        conversionParams.setOutputMarkupPlaceholderTag(true);\n+        conversionParams.add(conversionPattern);\n+        schemaForm.add(conversionParams);\n+\n+        final WebMarkupContainer typeParams = new WebMarkupContainer(\"typeParams\");\n+        typeParams.setOutputMarkupPlaceholderTag(true);\n+        // -- enum\n+        final AjaxTextFieldPanel enumerationValuesPanel =\n+                new AjaxTextFieldPanel(\"panel\", \"enumerationValues\", new Model<String>(null));\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final MultiFieldPanel<String> enumerationValues = new MultiFieldPanel<>(\"enumerationValues\",\n+                new Model(),\n+                enumerationValuesPanel);\n+        enumerationValues.setModelObject(getEnumValuesAsList(schema.getEnumerationValues()));\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final MultiFieldPanel<String> enumerationKeys = new MultiFieldPanel<>(\"enumerationKeys\",\n+                new Model(),\n+                new AjaxTextFieldPanel(\"panel\", \"enumerationKeys\", new Model<String>(null)));\n+        enumerationKeys.setModelObject(getEnumValuesAsList(schema.getEnumerationKeys()));\n+\n+        final WebMarkupContainer enumParams = new WebMarkupContainer(\"enumParams\");\n+        enumParams.setOutputMarkupPlaceholderTag(true);\n+        enumParams.add(enumerationValues);\n+        enumParams.add(enumerationKeys);\n+        typeParams.add(enumParams);\n+\n+        // -- encrypted\n+        final AjaxTextFieldPanel secretKey = new AjaxTextFieldPanel(\"secretKey\",\n+                getString(\"secretKey\"), new PropertyModel<String>(schema, \"secretKey\"));\n+\n+        final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm = new AjaxDropDownChoicePanel<>(\n+                \"cipherAlgorithm\", getString(\"cipherAlgorithm\"),\n+                new PropertyModel<CipherAlgorithm>(schema, \"cipherAlgorithm\"));\n+        cipherAlgorithm.setChoices(Arrays.asList(CipherAlgorithm.values()));\n+\n+        final WebMarkupContainer encryptedParams = new WebMarkupContainer(\"encryptedParams\");\n+        encryptedParams.setOutputMarkupPlaceholderTag(true);\n+        encryptedParams.add(secretKey);\n+        encryptedParams.add(cipherAlgorithm);\n+        typeParams.add(encryptedParams);\n+\n+        // -- binary\n+        final AjaxTextFieldPanel mimeType = new AjaxTextFieldPanel(\"mimeType\",\n+                getString(\"mimeType\"), new PropertyModel<String>(schema, \"mimeType\"));\n+        mimeType.setChoices(mimeTypesInitializer.getMimeTypes());\n+\n+        final WebMarkupContainer binaryParams = new WebMarkupContainer(\"binaryParams\");\n+        binaryParams.setOutputMarkupPlaceholderTag(true);\n+        binaryParams.add(mimeType);\n+        typeParams.add(binaryParams);\n+\n+        schemaForm.add(typeParams);\n+\n+        // -- show or hide\n+        showHide(schema, type,\n+                conversionParams, conversionPattern,\n+                enumParams, enumerationValuesPanel, enumerationValues, enumerationKeys,\n+                encryptedParams, secretKey, cipherAlgorithm,\n+                binaryParams, mimeType);\n+        type.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                PlainSchemaModalPage.this.showHide(schema, type,\n+                        conversionParams, conversionPattern,\n+                        enumParams, enumerationValuesPanel, enumerationValues, enumerationKeys,\n+                        encryptedParams, secretKey, cipherAlgorithm,\n+                        binaryParams, mimeType);\n+                target.add(typeParams);\n+            }\n+        });\n+\n+        final IModel<List<String>> validatorsList = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return schemaRestClient.getAllValidatorClasses();\n+            }\n+        };\n+        final AjaxDropDownChoicePanel<String> validatorClass = new AjaxDropDownChoicePanel<>(\"validatorClass\",\n+                getString(\"validatorClass\"), new PropertyModel<String>(schema, \"validatorClass\"));\n+        ((DropDownChoice) validatorClass.getField()).setNullValid(true);\n+        validatorClass.setChoices(validatorsList.getObject());\n+        schemaForm.add(validatorClass);\n+\n+        final AutoCompleteTextField<String> mandatoryCondition =\n+                new AutoCompleteTextField<String>(\"mandatoryCondition\") {\n+\n+                    private static final long serialVersionUID = -2428903969518079100L;\n+\n+                    @Override\n+                    protected Iterator<String> getChoices(final String input) {\n+                        List<String> choices = new ArrayList<String>();\n+\n+                        if (Strings.isEmpty(input)) {\n+                            choices = Collections.emptyList();\n+                        } else if (\"true\".startsWith(input.toLowerCase())) {\n+                            choices.add(\"true\");\n+                        } else if (\"false\".startsWith(input.toLowerCase())) {\n+                            choices.add(\"false\");\n+                        }\n+\n+                        return choices.iterator();\n+                    }\n+                };\n+        mandatoryCondition.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+            }\n+        });\n+        schemaForm.add(mandatoryCondition);\n+\n+        final WebMarkupContainer pwdJexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+\n+        final AjaxLink<Void> pwdQuestionMarkJexlHelp = JexlHelpUtil.getAjaxLink(pwdJexlHelp, \"questionMarkJexlHelp\");\n+        schemaForm.add(pwdQuestionMarkJexlHelp);\n+        pwdQuestionMarkJexlHelp.add(pwdJexlHelp);\n+\n+        final AjaxCheckBoxPanel multivalue = new AjaxCheckBoxPanel(\"multivalue\", getString(\"multivalue\"),\n+                new PropertyModel<Boolean>(schema, \"multivalue\"));\n+        schemaForm.add(multivalue);\n+\n+        final AjaxCheckBoxPanel readonly = new AjaxCheckBoxPanel(\"readonly\", getString(\"readonly\"),\n+                new PropertyModel<Boolean>(schema, \"readonly\"));\n+        schemaForm.add(readonly);\n+\n+        final AjaxCheckBoxPanel uniqueConstraint = new AjaxCheckBoxPanel(\"uniqueConstraint\",\n+                getString(\"uniqueConstraint\"), new PropertyModel<Boolean>(schema, \"uniqueConstraint\"));\n+        schemaForm.add(uniqueConstraint);\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(SUBMIT)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                final PlainSchemaTO schemaTO = (PlainSchemaTO) form.getDefaultModelObject();\n+\n+                schemaTO.setEnumerationValues(getEnumValuesAsString(enumerationValues.getView().getModelObject()));\n+                schemaTO.setEnumerationKeys(getEnumValuesAsString(enumerationKeys.getView().getModelObject()));\n+\n+                if (schemaTO.isMultivalue() && schemaTO.isUniqueConstraint()) {\n+                    error(getString(\"multivalueAndUniqueConstr.validation\"));\n+                    feedbackPanel.refresh(target);\n+                    return;\n+                }\n+\n+                try {\n+                    if (createFlag) {\n+                        schemaRestClient.createSchema(kind, schemaTO);\n+                    } else {\n+                        schemaRestClient.updateSchema(kind, schemaTO);\n+                    }\n+                    if (pageRef.getPage() instanceof BasePage) {\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                    }\n+\n+                    window.close(target);\n+                } catch (SyncopeClientException e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+        schemaForm.add(submit);\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+        cancel.setDefaultFormProcessing(false);\n+        schemaForm.add(cancel);\n+\n+        String allowedRoles = createFlag\n+                ? xmlRolesReader.getEntitlement(\"Schema\", \"create\")\n+                : xmlRolesReader.getEntitlement(\"Schema\", \"update\");\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, allowedRoles);\n+\n+        add(schemaForm);\n+    }\n+\n+    private void showHide(final PlainSchemaTO schema, final AjaxDropDownChoicePanel<AttrSchemaType> type,\n+            final WebMarkupContainer conversionParams, final AjaxTextFieldPanel conversionPattern,\n+            final WebMarkupContainer enumParams, final AjaxTextFieldPanel enumerationValuesPanel,\n+            final MultiFieldPanel<String> enumerationValues, final MultiFieldPanel<String> enumerationKeys,\n+            final WebMarkupContainer encryptedParams,\n+            final AjaxTextFieldPanel secretKey, final AjaxDropDownChoicePanel<CipherAlgorithm> cipherAlgorithm,\n+            final WebMarkupContainer binaryParams, final AjaxTextFieldPanel mimeType) {\n+\n+        final int typeOrdinal = Integer.parseInt(type.getField().getValue());\n+        if (AttrSchemaType.Long.ordinal() == typeOrdinal\n+                || AttrSchemaType.Double.ordinal() == typeOrdinal\n+                || AttrSchemaType.Date.ordinal() == typeOrdinal) {\n+\n+            conversionParams.setVisible(true);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+        } else if (AttrSchemaType.Enum.ordinal() == typeOrdinal) {\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(true);\n+            if (!enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.addRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(getEnumValuesAsList(schema.getEnumerationValues()));\n+            enumerationKeys.setModelObject(getEnumValuesAsList(schema.getEnumerationKeys()));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+        } else if (AttrSchemaType.Encrypted.ordinal() == typeOrdinal) {\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(true);\n+            if (!secretKey.isRequired()) {\n+                secretKey.addRequiredLabel();\n+            }\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.addRequiredLabel();\n+            }\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+        } else if (AttrSchemaType.Binary.ordinal() == typeOrdinal) {\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(true);\n+        } else {\n+            conversionParams.setVisible(false);\n+            conversionPattern.setModelObject(null);\n+\n+            enumParams.setVisible(false);\n+            if (enumerationValuesPanel.isRequired()) {\n+                enumerationValuesPanel.removeRequiredLabel();\n+            }\n+            enumerationValues.setModelObject(getEnumValuesAsList(null));\n+            enumerationKeys.setModelObject(getEnumValuesAsList(null));\n+\n+            encryptedParams.setVisible(false);\n+            if (secretKey.isRequired()) {\n+                secretKey.removeRequiredLabel();\n+            }\n+            secretKey.setModelObject(null);\n+            if (cipherAlgorithm.isRequired()) {\n+                cipherAlgorithm.removeRequiredLabel();\n+            }\n+            cipherAlgorithm.setModelObject(null);\n+\n+            binaryParams.setVisible(false);\n+            mimeType.setModelObject(null);\n+        }\n+    }\n+\n+    private String getEnumValuesAsString(final List<String> enumerationValues) {\n+        final StringBuilder builder = new StringBuilder();\n+\n+        for (String str : enumerationValues) {\n+            if (StringUtils.isNotBlank(str)) {\n+                if (builder.length() > 0) {\n+                    builder.append(SyncopeConstants.ENUM_VALUES_SEPARATOR);\n+                }\n+\n+                builder.append(str.trim());\n+            }\n+        }\n+\n+        return builder.toString();\n+    }\n+\n+    private List<String> getEnumValuesAsList(final String enumerationValues) {\n+        final List<String> values = new ArrayList<String>();\n+\n+        if (StringUtils.isNotBlank(enumerationValues)) {\n+            for (String value : enumerationValues.split(SyncopeConstants.ENUM_VALUES_SEPARATOR)) {\n+                values.add(value.trim());\n+            }\n+        } else {\n+            values.add(StringUtils.EMPTY);\n+        }\n+\n+        return values;\n+    }\n+}"},{"sha":"70b646c1f2e48a7abbe94b8df6b94e4db460ea15","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/PolicyModalPage.java","status":"added","additions":451,"deletions":0,"changes":451,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPolicyModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,451 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.NotificationPanel;\n+import org.apache.syncope.client.console.panels.PolicyBeanPanel;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.to.AccountPolicyTO;\n+import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.types.AccountPolicySpec;\n+import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n+import org.apache.syncope.common.lib.types.PolicySpec;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.common.lib.types.SyncPolicySpec;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.ChoiceRenderer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Modal window with Resource form.\n+ */\n+public class PolicyModalPage<T extends AbstractPolicyTO> extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -7325772767481076679L;\n+\n+    private static final int WIN_HEIGHT = 600;\n+\n+    private static final int WIN_WIDTH = 1100;\n+\n+    @SpringBean\n+    private PolicyRestClient policyRestClient;\n+\n+    public PolicyModalPage(final PageReference pageRef, final ModalWindow window, final T policyTO) {\n+        super();\n+\n+        final Form<?> form = new Form<Void>(FORM);\n+        form.setOutputMarkupId(true);\n+        add(form);\n+\n+        final AjaxTextFieldPanel policyid = new AjaxTextFieldPanel(\"id\", \"id\",\n+                new PropertyModel<String>(policyTO, \"id\"));\n+        policyid.setEnabled(false);\n+        policyid.setStyleSheet(\"ui-widget-content ui-corner-all short_fixedsize\");\n+        form.add(policyid);\n+\n+        final AjaxTextFieldPanel description = new AjaxTextFieldPanel(\"description\", \"description\",\n+                new PropertyModel<String>(policyTO, \"description\"));\n+        description.addRequiredLabel();\n+        description.setStyleSheet(\"ui-widget-content ui-corner-all medium_dynamicsize\");\n+        form.add(description);\n+\n+        final AjaxDropDownChoicePanel<PolicyType> type = new AjaxDropDownChoicePanel<PolicyType>(\"type\", \"type\",\n+                new PropertyModel<PolicyType>(policyTO, \"type\"));\n+        switch (policyTO.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                type.setChoices(Arrays.asList(new PolicyType[] { PolicyType.GLOBAL_ACCOUNT, PolicyType.ACCOUNT }));\n+                break;\n+\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                type.setChoices(Arrays.asList(new PolicyType[] { PolicyType.GLOBAL_PASSWORD, PolicyType.PASSWORD }));\n+                break;\n+\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                type.setChoices(Arrays.asList(new PolicyType[] { PolicyType.GLOBAL_SYNC, PolicyType.SYNC }));\n+\n+            default:\n+        }\n+        type.setChoiceRenderer(new PolicyTypeRenderer());\n+        type.addRequiredLabel();\n+        form.add(type);\n+\n+        // Authentication resources - only for AccountPolicyTO\n+        Fragment fragment;\n+        if (policyTO instanceof AccountPolicyTO) {\n+            fragment = new Fragment(\"forAccountOnly\", \"authResourcesFragment\", form);\n+\n+            final List<String> resourceNames = new ArrayList<>();\n+            for (ResourceTO resource : resourceRestClient.getAll()) {\n+                resourceNames.add(resource.getKey());\n+            }\n+            fragment.add(new AjaxPalettePanel<>(\"authResources\",\n+                    new PropertyModel<List<String>>(policyTO, \"resources\"),\n+                    new ListModel<>(resourceNames)));\n+        } else {\n+            fragment = new Fragment(\"forAccountOnly\", \"emptyFragment\", form);\n+        }\n+        form.add(fragment);\n+        //\n+\n+        final PolicySpec policy = getPolicySpecification(policyTO);\n+\n+        form.add(new PolicyBeanPanel(\"panel\", policy));\n+\n+        final ModalWindow mwindow = new ModalWindow(\"metaEditModalWin\");\n+        mwindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        mwindow.setInitialHeight(WIN_HEIGHT);\n+        mwindow.setInitialWidth(WIN_WIDTH);\n+        mwindow.setCookieName(\"meta-edit-modal\");\n+        add(mwindow);\n+\n+        List<IColumn<String, String>> resColumns = new ArrayList<IColumn<String, String>>();\n+        resColumns.add(new AbstractColumn<String, String>(new StringResourceModel(\"name\", this, null, \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<String>> cellItem,\n+                    final String componentId, final IModel<String> rowModel) {\n+\n+                cellItem.add(new Label(componentId, rowModel.getObject()));\n+            }\n+        });\n+        resColumns.add(new AbstractColumn<String, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<String>> cellItem, final String componentId,\n+                    final IModel<String> model) {\n+\n+                final String resource = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        mwindow.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ResourceModalPage(PolicyModalPage.this.getPageReference(),\n+                                        mwindow, resourceRestClient.read(resource), false);\n+                            }\n+                        });\n+\n+                        mwindow.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Resources\");\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+        ISortableDataProvider<String, String> resDataProvider = new SortableDataProvider<String, String>() {\n+\n+            private static final long serialVersionUID = 8263758912838836438L;\n+\n+            @Override\n+            public Iterator<? extends String> iterator(final long first, final long count) {\n+                return policyTO.getKey() == 0\n+                        ? Collections.<String>emptyList().iterator()\n+                        : policyRestClient.getPolicy(policyTO.getKey()).\n+                        getUsedByResources().subList((int) first, (int) first + (int) count).iterator();\n+            }\n+\n+            @Override\n+            public long size() {\n+                return policyTO.getKey() == 0\n+                        ? 0\n+                        : policyRestClient.getPolicy(policyTO.getKey()).\n+                        getUsedByResources().size();\n+            }\n+\n+            @Override\n+            public IModel<String> model(final String object) {\n+                return new Model<String>(object);\n+            }\n+        };\n+        final AjaxFallbackDefaultDataTable<String, String> resources =\n+                new AjaxFallbackDefaultDataTable<String, String>(\"resources\", resColumns, resDataProvider, 10);\n+        form.add(resources);\n+\n+        List<IColumn<RoleTO, String>> roleColumns = new ArrayList<IColumn<RoleTO, String>>();\n+        roleColumns.add(new PropertyColumn<RoleTO, String>(new ResourceModel(\"id\", \"id\"), \"id\", \"id\"));\n+        roleColumns.add(new PropertyColumn<RoleTO, String>(new ResourceModel(\"name\", \"name\"), \"name\", \"name\"));\n+        roleColumns.add(new AbstractColumn<RoleTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<RoleTO>> cellItem, final String componentId,\n+                    final IModel<RoleTO> model) {\n+\n+                final RoleTO role = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        mwindow.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new RoleModalPage(PolicyModalPage.this.getPageReference(), mwindow, role);\n+                            }\n+                        });\n+\n+                        mwindow.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Roles\");\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+        ISortableDataProvider<RoleTO, String> roleDataProvider = new SortableDataProvider<RoleTO, String>() {\n+\n+            private static final long serialVersionUID = 8263758912838836438L;\n+\n+            @Override\n+            public Iterator<? extends RoleTO> iterator(final long first, final long count) {\n+                List<RoleTO> roles = new ArrayList<>();\n+\n+                if (policyTO.getKey() > 0) {\n+                    for (Long roleId : policyRestClient.getPolicy(policyTO.getKey()).\n+                            getUsedByRoles().subList((int) first, (int) first + (int) count)) {\n+\n+                        roles.add(roleRestClient.read(roleId));\n+                    }\n+                }\n+\n+                return roles.iterator();\n+            }\n+\n+            @Override\n+            public long size() {\n+                return policyTO.getKey() == 0\n+                        ? 0\n+                        : policyRestClient.getPolicy(policyTO.getKey()).\n+                        getUsedByRoles().size();\n+            }\n+\n+            @Override\n+            public IModel<RoleTO> model(final RoleTO object) {\n+                return new Model<RoleTO>(object);\n+            }\n+        };\n+        final AjaxFallbackDefaultDataTable<RoleTO, String> roles =\n+                new AjaxFallbackDefaultDataTable<RoleTO, String>(\"roles\", roleColumns, roleDataProvider, 10);\n+        form.add(roles);\n+\n+        mwindow.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                target.add(resources);\n+                target.add(roles);\n+                if (isModalResult()) {\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                    feedbackPanel.refresh(target);\n+                    setModalResult(false);\n+                }\n+            }\n+        });\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(APPLY)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                setPolicySpecification(policyTO, policy);\n+\n+                try {\n+                    if (policyTO.getKey() > 0) {\n+                        policyRestClient.updatePolicy(policyTO);\n+                    } else {\n+                        policyRestClient.createPolicy(policyTO);\n+                    }\n+                    ((BasePage) pageRef.getPage()).setModalResult(true);\n+\n+                    window.close(target);\n+                } catch (Exception e) {\n+                    LOG.error(\"While creating policy\", e);\n+\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    ((NotificationPanel) getPage().get(Constants.FEEDBACK)).refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                ((NotificationPanel) getPage().get(Constants.FEEDBACK)).refresh(target);\n+            }\n+        };\n+        form.add(submit);\n+\n+        final IndicatingAjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+            }\n+        };\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+    }\n+\n+    private PolicySpec getPolicySpecification(final AbstractPolicyTO policyTO) {\n+        PolicySpec spec;\n+\n+        switch (policyTO.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                spec = ((AccountPolicyTO) policyTO).getSpecification() != null\n+                        ? ((AccountPolicyTO) policyTO).getSpecification()\n+                        : new AccountPolicySpec();\n+                break;\n+\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                spec = ((PasswordPolicyTO) policyTO).getSpecification() != null\n+                        ? ((PasswordPolicyTO) policyTO).getSpecification()\n+                        : new PasswordPolicySpec();\n+                break;\n+\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+            default:\n+                spec = ((SyncPolicyTO) policyTO).getSpecification() != null\n+                        ? ((SyncPolicyTO) policyTO).getSpecification()\n+                        : new SyncPolicySpec();\n+        }\n+\n+        return spec;\n+    }\n+\n+    private void setPolicySpecification(final AbstractPolicyTO policyTO, final PolicySpec specification) {\n+        switch (policyTO.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                if (!(specification instanceof AccountPolicySpec)) {\n+                    throw new ClassCastException(\"policy is type Account, but spec is not: \"\n+                            + specification.getClass().getName());\n+                }\n+                ((AccountPolicyTO) policyTO).setSpecification((AccountPolicySpec) specification);\n+                break;\n+\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                if (!(specification instanceof PasswordPolicySpec)) {\n+                    throw new ClassCastException(\"policy is type Password, but spec is not: \"\n+                            + specification.getClass().getName());\n+                }\n+                ((PasswordPolicyTO) policyTO).setSpecification((PasswordPolicySpec) specification);\n+                break;\n+\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                if (!(specification instanceof SyncPolicySpec)) {\n+                    throw new ClassCastException(\"policy is type Sync, but spec is not: \"\n+                            + specification.getClass().getName());\n+                }\n+                ((SyncPolicyTO) policyTO).setSpecification((SyncPolicySpec) specification);\n+\n+            default:\n+        }\n+    }\n+\n+    private class PolicyTypeRenderer extends ChoiceRenderer<PolicyType> {\n+\n+        private static final long serialVersionUID = -8993265421104002134L;\n+\n+        @Override\n+        public Object getDisplayValue(final PolicyType object) {\n+            return getString(object.name());\n+        }\n+    };\n+}"},{"sha":"5a6779f3cbf0fa3ede978f250679a135c868c1d2","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/PropagationTaskModalPage.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPropagationTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPropagationTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPropagationTaskModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.wicket.model.PropertyModel;\n+\n+/**\n+ * Modal window with Task form (to stop and start execution).\n+ */\n+public class PropagationTaskModalPage extends TaskModalPage {\n+\n+    private static final long serialVersionUID = 523379887023786151L;\n+\n+    public PropagationTaskModalPage(final AbstractTaskTO taskTO) {\n+        super(taskTO);\n+\n+        final AjaxTextFieldPanel accountId = new AjaxTextFieldPanel(\"accountId\", getString(\"accountId\"),\n+                new PropertyModel<String>(taskTO, \"accountId\"));\n+        accountId.setEnabled(false);\n+        profile.add(accountId);\n+\n+        final AjaxTextFieldPanel resource = new AjaxTextFieldPanel(\"resource\", getString(\"resource\"),\n+                new PropertyModel<String>(taskTO, \"resource\"));\n+        resource.setEnabled(false);\n+        profile.add(resource);\n+    }\n+}"},{"sha":"c7e192f18a6ea54de35d73576b648642a61744a8","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ProvisioningModalPage.java","status":"added","additions":250,"deletions":0,"changes":250,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FProvisioningModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,250 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.status.AbstractStatusBeanProvider;\n+import org.apache.syncope.client.console.commons.status.ConnObjectWrapper;\n+import org.apache.syncope.client.console.commons.status.StatusBean;\n+import org.apache.syncope.client.console.commons.status.StatusUtils;\n+import org.apache.syncope.client.console.panels.ActionDataTablePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ResourceDeassociationActionType;\n+import org.apache.syncope.common.lib.wrap.AbstractWrappable;\n+import org.apache.syncope.common.lib.wrap.SubjectId;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class ProvisioningModalPage<T extends AbstractAttributableTO> extends AbstractStatusModalPage {\n+\n+    private static final long serialVersionUID = -4285220460543213901L;\n+\n+    private static final int ROWS_PER_PAGE = 10;\n+\n+    private final ResourceTO resourceTO;\n+\n+    private final Class<? extends AbstractAttributableTO> typeRef;\n+\n+    private final PageReference pageRef;\n+\n+    private final ModalWindow window;\n+\n+    private final StatusUtils statusUtils;\n+\n+    public ProvisioningModalPage(\n+            final PageReference pageRef,\n+            final ModalWindow window,\n+            final ResourceTO resourceTO,\n+            final Class<T> typeRef) {\n+\n+        super();\n+\n+        this.pageRef = pageRef;\n+        this.window = window;\n+        this.resourceTO = resourceTO;\n+        this.typeRef = typeRef;\n+\n+        statusUtils = new StatusUtils((UserTO.class.isAssignableFrom(typeRef) ? userRestClient : roleRestClient));\n+\n+        final List<IColumn<StatusBean, String>> columns = new ArrayList<IColumn<StatusBean, String>>();\n+        columns.add(new PropertyColumn<StatusBean, String>(\n+                new StringResourceModel(\"id\", this, null, \"Attributable id\"),\n+                \"attributableId\", \"attributableId\"));\n+        columns.add(new PropertyColumn<StatusBean, String>(\n+                new StringResourceModel(\"name\", this, null, \"Attributable name\"),\n+                \"attributableName\", \"attributableName\"));\n+        columns.add(new PropertyColumn<StatusBean, String>(\n+                new StringResourceModel(\"resourceName\", this, null, \"Resource name\"),\n+                \"resourceName\", \"resourceName\"));\n+        columns.add(new PropertyColumn<StatusBean, String>(\n+                new StringResourceModel(\"accountLink\", this, null, \"Account link\"),\n+                \"accountLink\", \"accountLink\"));\n+        columns.add(new AbstractColumn<StatusBean, String>(\n+                new StringResourceModel(\"status\", this, null, \"\")) {\n+\n+                    private static final long serialVersionUID = -3503023501954863131L;\n+\n+                    @Override\n+                    public String getCssClass() {\n+                        return \"action\";\n+                    }\n+\n+                    @Override\n+                    public void populateItem(\n+                            final Item<ICellPopulator<StatusBean>> cellItem,\n+                            final String componentId,\n+                            final IModel<StatusBean> model) {\n+                                cellItem.\n+                                add(statusUtils.getStatusImagePanel(componentId, model.getObject().getStatus()));\n+                            }\n+                });\n+\n+        final ActionDataTablePanel<StatusBean, String> table = new ActionDataTablePanel<StatusBean, String>(\n+                \"resourceDatatable\",\n+                columns,\n+                (ISortableDataProvider<StatusBean, String>) new StatusBeanProvider(),\n+                ROWS_PER_PAGE,\n+                pageRef);\n+\n+        final String pageId = \"Resources\";\n+\n+        table.addAction(new ActionLink() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                try {\n+                    bulkAssociationAction(target, ResourceDeassociationActionType.UNLINK, table, columns);\n+                } catch (Exception e) {\n+                    LOG.error(\"Error unlinkink resources\", e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+        }, ActionLink.ActionType.UNLINK, pageId);\n+\n+        table.addAction(new ActionLink() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                try {\n+                    bulkAssociationAction(target, ResourceDeassociationActionType.DEPROVISION, table, columns);\n+                } catch (Exception e) {\n+                    LOG.error(\"Error de-provisioning user\", e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+        }, ActionLink.ActionType.DEPROVISION, pageId);\n+\n+        table.addAction(new ActionLink() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                try {\n+                    bulkAssociationAction(target, ResourceDeassociationActionType.UNASSIGN, table, columns);\n+                } catch (Exception e) {\n+                    LOG.error(\"Error unassigning resources\", e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+        }, ActionLink.ActionType.UNASSIGN, pageId);\n+\n+        table.addCancelButton(window);\n+\n+        add(table);\n+    }\n+\n+    private class StatusBeanProvider extends AbstractStatusBeanProvider {\n+\n+        private static final long serialVersionUID = 4287357360778016173L;\n+\n+        public StatusBeanProvider() {\n+            super(\"accountLink\");\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public List<StatusBean> getStatusBeans() {\n+            final String fiql = SyncopeClient.getUserSearchConditionBuilder().hasResources(resourceTO.getKey()).query();\n+\n+            final List<T> subjects = new ArrayList<T>();\n+            if (UserTO.class.isAssignableFrom(typeRef)) {\n+                subjects.addAll((List<T>) userRestClient.search(fiql, 1, ROWS_PER_PAGE,\n+                        new SortParam<String>(\"id\", true)));\n+            } else {\n+                subjects.addAll((List<T>) roleRestClient.search(fiql, 1, ROWS_PER_PAGE,\n+                        new SortParam<String>(\"id\", true)));\n+            }\n+\n+            final List<ConnObjectWrapper> connObjects = statusUtils.getConnectorObjects(\n+                    (List<AbstractSubjectTO>) subjects, Collections.<String>singleton(resourceTO.getKey()));\n+\n+            final List<StatusBean> statusBeans = new ArrayList<StatusBean>(connObjects.size() + 1);\n+            final LinkedHashMap<String, StatusBean> initialStatusBeanMap = new LinkedHashMap<String, StatusBean>(\n+                    connObjects.size());\n+\n+            for (ConnObjectWrapper entry : connObjects) {\n+                final StatusBean statusBean = statusUtils.getStatusBean(\n+                        entry.getAttributable(),\n+                        entry.getResourceName(),\n+                        entry.getConnObjectTO(),\n+                        RoleTO.class.isAssignableFrom(typeRef));\n+\n+                initialStatusBeanMap.put(entry.getResourceName(), statusBean);\n+                statusBeans.add(statusBean);\n+            }\n+\n+            return statusBeans;\n+        }\n+    }\n+\n+    private void bulkAssociationAction(\n+            final AjaxRequestTarget target,\n+            final ResourceDeassociationActionType type,\n+            final ActionDataTablePanel<StatusBean, String> table,\n+            final List<IColumn<StatusBean, String>> columns) {\n+\n+        final List<StatusBean> beans = new ArrayList<StatusBean>(table.getModelObject());\n+        List<SubjectId> subjectIds = new ArrayList<SubjectId>();\n+        for (StatusBean bean : beans) {\n+            LOG.debug(\"Selected bean {}\", bean);\n+            subjectIds.add(AbstractWrappable.getInstance(SubjectId.class, bean.getAttributableId()));\n+        }\n+\n+        if (beans.isEmpty()) {\n+            window.close(target);\n+        } else {\n+            final BulkActionResult res = resourceRestClient.bulkAssociationAction(\n+                    resourceTO.getKey(), typeRef, type, subjectIds);\n+\n+            ((BasePage) pageRef.getPage()).setModalResult(true);\n+\n+            setResponsePage(new BulkActionResultModalPage<StatusBean, String>(\n+                    window, beans, columns, res, \"attributableId\"));\n+        }\n+    }\n+}"},{"sha":"a799b1518a177fed3c9c3027648eefac0bb0b27f","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/PushTaskModalPage.java","status":"added","additions":135,"deletions":0,"changes":135,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPushTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPushTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FPushTaskModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,135 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.RoleSearchPanel;\n+import org.apache.syncope.client.console.panels.UserSearchPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.model.Model;\n+\n+/**\n+ * Modal window with Push Task form.\n+ */\n+public class PushTaskModalPage extends AbstractSyncTaskModalPage {\n+\n+    private static final long serialVersionUID = 2148403203517274669L;\n+\n+    private final UserSearchPanel userFilter;\n+\n+    private final RoleSearchPanel roleFilter;\n+\n+    private final AjaxCheckBoxPanel checkUserFilter;\n+\n+    private final AjaxCheckBoxPanel checkRoleFilter;\n+\n+    @Override\n+    protected List<String> getSyncActions() {\n+        return taskRestClient.getPushActionsClasses();\n+    }\n+\n+    public PushTaskModalPage(final ModalWindow window, final PushTaskTO taskTO, final PageReference pageRef) {\n+\n+        super(window, taskTO, pageRef);\n+\n+        // set default Matching rule\n+        ((DropDownChoice) matchingRule.getField()).setDefaultModelObject(taskTO.getMatchingRule() == null\n+                ? MatchingRule.UPDATE\n+                : taskTO.getMatchingRule());\n+        profile.add(matchingRule);\n+\n+        // set default Unmatching rule\n+        ((DropDownChoice) unmatchingRule.getField()).setDefaultModelObject(taskTO.getUnmatchingRule() == null\n+                ? UnmatchingRule.ASSIGN\n+                : taskTO.getUnmatchingRule());\n+        profile.add(unmatchingRule);\n+\n+        final WebMarkupContainer filterContainer = new WebMarkupContainer(\"filterContainer\");\n+        filterContainer.setOutputMarkupId(true);\n+\n+        checkUserFilter = new AjaxCheckBoxPanel(\"checkUserFilter\", \"checkUserFilter\",\n+                new Model<Boolean>(taskTO.getUserFilter() != null));\n+        filterContainer.add(checkUserFilter);\n+\n+        checkRoleFilter = new AjaxCheckBoxPanel(\"checkRoleFilter\", \"checkRoleFilter\",\n+                new Model<Boolean>(taskTO.getRoleFilter() != null));\n+        filterContainer.add(checkRoleFilter);\n+\n+        userFilter = new UserSearchPanel.Builder(\"userFilter\").fiql(taskTO.getUserFilter()).build();\n+        userFilter.setEnabled(checkUserFilter.getModelObject());\n+\n+        filterContainer.add(userFilter);\n+\n+        roleFilter = new RoleSearchPanel.Builder(\"roleFilter\").fiql(taskTO.getRoleFilter()).build();\n+        roleFilter.setEnabled(checkRoleFilter.getModelObject());\n+        filterContainer.add(roleFilter);\n+\n+        checkUserFilter.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                userFilter.setEnabled(checkUserFilter.getModelObject());\n+                target.add(filterContainer);\n+            }\n+        });\n+\n+        checkRoleFilter.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                roleFilter.setEnabled(checkRoleFilter.getModelObject());\n+                target.add(filterContainer);\n+            }\n+        });\n+\n+        profile.add(filterContainer);\n+    }\n+\n+    @Override\n+    public void submitAction(final SchedTaskTO taskTO) {\n+        setFilters((PushTaskTO) taskTO);\n+        if (taskTO.getKey() > 0) {\n+            taskRestClient.updateSchedTask((PushTaskTO) taskTO);\n+        } else {\n+            taskRestClient.createSchedTask((PushTaskTO) taskTO);\n+        }\n+    }\n+\n+    private void setFilters(final PushTaskTO pushTaskTO) {\n+        // set user filter if enabled\n+        pushTaskTO.setUserFilter(checkUserFilter.getModelObject() ? userFilter.buildFIQL() : null);\n+        // set role filter if enabled\n+        pushTaskTO.setRoleFilter(checkRoleFilter.getModelObject() ? roleFilter.buildFIQL() : null);\n+    }\n+}"},{"sha":"c6b57d22a3bb852f61c76dd7c44fff0bfc178a19","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ReportExecResultDownloadModalPage.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportExecResultDownloadModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.Arrays;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.model.Model;\n+\n+public class ReportExecResultDownloadModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 3163146190501510888L;\n+\n+    public ReportExecResultDownloadModalPage(final ModalWindow window, final PageReference callerPageRef) {\n+\n+        final AjaxDropDownChoicePanel<ReportExecExportFormat> format =\n+                new AjaxDropDownChoicePanel<>(\"format\", \"format\", new Model<ReportExecExportFormat>());\n+\n+        format.setChoices(Arrays.asList(ReportExecExportFormat.values()));\n+\n+        format.setChoiceRenderer(new IChoiceRenderer<ReportExecExportFormat>() {\n+\n+            private static final long serialVersionUID = -3941271550163141339L;\n+\n+            @Override\n+            public Object getDisplayValue(final ReportExecExportFormat object) {\n+                return object.name();\n+            }\n+\n+            @Override\n+            public String getIdValue(final ReportExecExportFormat object, final int index) {\n+\n+                return object.name();\n+            }\n+        });\n+\n+        format.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                format.getField();\n+\n+                ((ReportModalPage) callerPageRef.getPage()).setExportFormat(format.getField().getModelObject());\n+                window.close(target);\n+            }\n+        });\n+        add(format);\n+    }\n+}"},{"sha":"ebf91bd831f1ee92de6a39366c304134fe5f7359","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ReportModalPage.java","status":"added","additions":640,"deletions":0,"changes":640,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,640 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.DateFormatROModel;\n+import org.apache.syncope.client.console.commons.HttpResourceStream;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.wicket.ajax.form.AbstractAjaxDownloadBehavior;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.CrontabContainer;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.report.AbstractReportletConf;\n+import org.apache.syncope.common.lib.report.ReportletConf;\n+import org.apache.syncope.common.lib.to.ReportExecTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n+import org.apache.syncope.common.lib.types.ReportExecStatus;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxCallListener;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.form.ListChoice;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.util.resource.IResourceStream;\n+import org.springframework.util.StringUtils;\n+\n+public class ReportModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -5747628615211127644L;\n+\n+    private static final String ADD_BUTTON_ID = \"addButton\";\n+\n+    private static final String EDIT_BUTTON_ID = \"editButton\";\n+\n+    private static final String REMOVE_BUTTON_ID = \"removeButton\";\n+\n+    private static final String UP_BUTTON_ID = \"upButton\";\n+\n+    private static final String DOWN_BUTTON_ID = \"downButton\";\n+\n+    private static final int EXEC_EXPORT_WIN_HEIGHT = 100;\n+\n+    private static final int EXEC_EXPORT_WIN_WIDTH = 400;\n+\n+    private static final int REPORTLET_CONF_WIN_HEIGHT = 500;\n+\n+    private static final int REPORTLET_CONF_WIN_WIDTH = 800;\n+\n+    private final ReportTO reportTO;\n+\n+    private final Form<ReportTO> form;\n+\n+    private ReportExecExportFormat exportFormat;\n+\n+    private long exportExecId;\n+\n+    private AbstractReportletConf modalReportletConf;\n+\n+    private String modalReportletConfOldName;\n+\n+    private ListChoice<AbstractReportletConf> reportlets;\n+\n+    public ReportModalPage(final ModalWindow window, final ReportTO reportTO, final PageReference callerPageRef) {\n+        super();\n+        this.reportTO = reportTO;\n+\n+        form = new Form<ReportTO>(FORM);\n+        form.setModel(new CompoundPropertyModel<ReportTO>(reportTO));\n+        add(form);\n+\n+        setupProfile();\n+        setupExecutions();\n+\n+        final CrontabContainer crontab = new CrontabContainer(\"crontab\", new PropertyModel<String>(reportTO,\n+                \"cronExpression\"), reportTO.getCronExpression());\n+        form.add(crontab);\n+\n+        final AjaxButton submit =\n+                new ClearIndicatingAjaxButton(APPLY, new ResourceModel(APPLY), getPageReference()) {\n+\n+                    private static final long serialVersionUID = -958724007591692537L;\n+\n+                    @Override\n+                    protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                        ReportTO toSubmit = (ReportTO) form.getModelObject();\n+                        toSubmit.setCronExpression(StringUtils.hasText(toSubmit.getCronExpression())\n+                                        ? crontab.getCronExpression()\n+                                        : null);\n+\n+                        try {\n+                            if (toSubmit.getKey() > 0) {\n+                                reportRestClient.update(toSubmit);\n+                            } else {\n+                                reportRestClient.create(toSubmit);\n+                            }\n+\n+                            ((BasePage) callerPageRef.getPage()).setModalResult(true);\n+\n+                            window.close(target);\n+                        } catch (SyncopeClientException e) {\n+                            LOG.error(\"While creating or updating report\", e);\n+                            error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                            feedbackPanel.refresh(target);\n+                        }\n+                    }\n+\n+                    @Override\n+                    protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                        feedbackPanel.refresh(target);\n+                    }\n+                };\n+\n+        if (reportTO.getKey() > 0) {\n+            MetaDataRoleAuthorizationStrategy.authorize(submit, RENDER,\n+                    xmlRolesReader.getEntitlement(\"Reports\", \"update\"));\n+        } else {\n+            MetaDataRoleAuthorizationStrategy.authorize(submit, RENDER,\n+                    xmlRolesReader.getEntitlement(\"Reports\", \"create\"));\n+        }\n+\n+        form.add(submit);\n+\n+        final AjaxButton cancel =\n+                new ClearIndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL), getPageReference()) {\n+\n+                    private static final long serialVersionUID = -958724007591692537L;\n+\n+                    @Override\n+                    protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                        window.close(target);\n+                    }\n+                };\n+\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+    }\n+\n+    private void setupProfile() {\n+        final WebMarkupContainer profile = new WebMarkupContainer(\"profile\");\n+        profile.setOutputMarkupId(true);\n+        form.add(profile);\n+\n+        final ModalWindow reportletConfWin = new ModalWindow(\"reportletConfWin\");\n+        reportletConfWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        reportletConfWin.setCookieName(\"reportlet-conf-win-modal\");\n+        reportletConfWin.setInitialHeight(REPORTLET_CONF_WIN_HEIGHT);\n+        reportletConfWin.setInitialWidth(REPORTLET_CONF_WIN_WIDTH);\n+        reportletConfWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                int foundIdx = -1;\n+                if (modalReportletConfOldName != null) {\n+                    for (int i = 0; i < reportTO.getReportletConfs().size() && foundIdx == -1; i++) {\n+                        if (reportTO.getReportletConfs().get(i).getName().equals(modalReportletConfOldName)) {\n+                            foundIdx = i;\n+                        }\n+                    }\n+                }\n+                if (modalReportletConf != null) {\n+                    if (foundIdx == -1) {\n+                        reportTO.getReportletConfs().add(modalReportletConf);\n+                    } else {\n+                        reportTO.getReportletConfs().set(foundIdx, modalReportletConf);\n+                    }\n+                }\n+\n+                target.add(reportlets);\n+            }\n+        });\n+        add(reportletConfWin);\n+\n+        final Label idLabel = new Label(\"idLabel\", new ResourceModel(\"id\"));\n+        profile.add(idLabel);\n+\n+        final AjaxTextFieldPanel id = new AjaxTextFieldPanel(\"id\", getString(\"id\"), new PropertyModel<String>(reportTO,\n+                \"id\"));\n+        id.setEnabled(false);\n+        profile.add(id);\n+\n+        final Label nameLabel = new Label(\"nameLabel\", new ResourceModel(\"name\"));\n+        profile.add(nameLabel);\n+\n+        final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", getString(\"name\"), new PropertyModel<String>(\n+                reportTO, \"name\"));\n+        profile.add(name);\n+\n+        final AjaxTextFieldPanel lastExec = new AjaxTextFieldPanel(\"lastExec\", getString(\"lastExec\"),\n+                new DateFormatROModel(new PropertyModel<String>(reportTO, \"lastExec\")));\n+        lastExec.setEnabled(false);\n+        profile.add(lastExec);\n+\n+        final AjaxTextFieldPanel nextExec = new AjaxTextFieldPanel(\"nextExec\", getString(\"nextExec\"),\n+                new DateFormatROModel(new PropertyModel<String>(reportTO, \"nextExec\")));\n+        nextExec.setEnabled(false);\n+        profile.add(nextExec);\n+\n+        reportlets = new ListChoice<AbstractReportletConf>(\"reportletConfs\", new Model<AbstractReportletConf>(),\n+                reportTO.getReportletConfs(), new IChoiceRenderer<ReportletConf>() {\n+\n+                    private static final long serialVersionUID = 1048000918946220007L;\n+\n+                    @Override\n+                    public Object getDisplayValue(final ReportletConf object) {\n+                        return object.getName();\n+                    }\n+\n+                    @Override\n+                    public String getIdValue(final ReportletConf object, final int index) {\n+                        return object.getName();\n+                    }\n+                }) {\n+\n+                    private static final long serialVersionUID = 4022366881854379834L;\n+\n+                    @Override\n+                    protected CharSequence getDefaultChoice(final String selectedValue) {\n+                        return null;\n+                    }\n+                };\n+\n+        reportlets.setNullValid(true);\n+        profile.add(reportlets);\n+        reportlets.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                target.add(reportlets);\n+            }\n+        });\n+\n+        profile.add(new AjaxLink<Void>(ADD_BUTTON_ID) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                reportletConfWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        modalReportletConfOldName = null;\n+                        modalReportletConf = null;\n+                        return new ReportletConfModalPage(null, reportletConfWin,\n+                                ReportModalPage.this.getPageReference());\n+                    }\n+                });\n+                reportletConfWin.show(target);\n+            }\n+        });\n+\n+        profile.add(new AjaxLink<Void>(EDIT_BUTTON_ID) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                if (reportlets.getModelObject() != null) {\n+                    reportletConfWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                        private static final long serialVersionUID = -7834632442532690940L;\n+\n+                        @Override\n+                        public Page createPage() {\n+                            modalReportletConfOldName = reportlets.getModelObject().getName();\n+                            modalReportletConf = null;\n+                            return new ReportletConfModalPage(reportlets.getModelObject(), reportletConfWin,\n+                                    ReportModalPage.this.getPageReference());\n+                        }\n+                    });\n+                    reportletConfWin.show(target);\n+                }\n+            }\n+        });\n+\n+        profile.add(new AjaxLink<Void>(REMOVE_BUTTON_ID) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                reportTO.getReportletConfs().remove(reportlets.getModelObject());\n+                reportlets.setModelObject(null);\n+                target.add(reportlets);\n+            }\n+\n+            @Override\n+            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+                if (reportlets.getModelObject() != null) {\n+\n+                    super.updateAjaxAttributes(attributes);\n+\n+                    final AjaxCallListener ajaxCallListener = new AjaxCallListener() {\n+\n+                        private static final long serialVersionUID = 7160235486520935153L;\n+\n+                        @Override\n+                        public CharSequence getPrecondition(final Component component) {\n+                            return \"if (!confirm('\" + getString(\"confirmDelete\") + \"')) {return false;}\";\n+                        }\n+                    };\n+                    attributes.getAjaxCallListeners().add(ajaxCallListener);\n+                }\n+            }\n+        });\n+\n+        profile.add(new AjaxLink<Void>(UP_BUTTON_ID) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                if (reportlets.getModelObject() != null) {\n+                    moveUp(reportlets.getModelObject());\n+                    target.add(reportlets);\n+                }\n+            }\n+        });\n+\n+        profile.add(new AjaxLink<Void>(DOWN_BUTTON_ID) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                if (reportlets.getModelObject() != null) {\n+                    moveDown(reportlets.getModelObject());\n+                    target.add(reportlets);\n+                }\n+            }\n+        });\n+    }\n+\n+    private void moveUp(final AbstractReportletConf item) {\n+        final List<AbstractReportletConf> list = reportTO.getReportletConfs();\n+        int newPosition = list.indexOf(item) - 1;\n+        if (newPosition > -1) {\n+            list.remove(item);\n+            list.add(newPosition, item);\n+        }\n+    }\n+\n+    private void moveDown(final AbstractReportletConf item) {\n+        final List<AbstractReportletConf> list = reportTO.getReportletConfs();\n+        int newPosition = list.indexOf(item) + 1;\n+        if (newPosition < list.size()) {\n+            list.remove(item);\n+            list.add(newPosition, item);\n+        }\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private void setupExecutions() {\n+        final WebMarkupContainer executions = new WebMarkupContainer(\"executionContainer\");\n+        executions.setOutputMarkupId(true);\n+        form.add(executions);\n+\n+        final ModalWindow reportExecMessageWin = new ModalWindow(\"reportExecMessageWin\");\n+        reportExecMessageWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        reportExecMessageWin.setCookieName(\"report-exec-message-win-modal\");\n+        add(reportExecMessageWin);\n+\n+        final ModalWindow reportExecExportWin = new ModalWindow(\"reportExecExportWin\");\n+        reportExecExportWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        reportExecExportWin.setCookieName(\"report-exec-export-win-modal\");\n+        reportExecExportWin.setInitialHeight(EXEC_EXPORT_WIN_HEIGHT);\n+        reportExecExportWin.setInitialWidth(EXEC_EXPORT_WIN_WIDTH);\n+        reportExecExportWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                AjaxExportDownloadBehavior behavior = new AjaxExportDownloadBehavior(ReportModalPage.this.exportFormat,\n+                        ReportModalPage.this.exportExecId);\n+                executions.add(behavior);\n+                behavior.initiate(target);\n+            }\n+        });\n+        add(reportExecExportWin);\n+\n+        final List<IColumn> columns = new ArrayList<IColumn>();\n+        columns.add(new PropertyColumn(new ResourceModel(\"id\"), \"id\", \"id\"));\n+        columns.add(new DatePropertyColumn(new ResourceModel(\"startDate\"), \"startDate\", \"startDate\"));\n+        columns.add(new DatePropertyColumn(new ResourceModel(\"endDate\"), \"endDate\", \"endDate\"));\n+        columns.add(new PropertyColumn(new ResourceModel(\"status\"), \"status\", \"status\"));\n+        columns.add(new ActionColumn<ReportExecTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public ActionLinksPanel getActions(final String componentId, final IModel<ReportExecTO> model) {\n+\n+                final ReportExecTO taskExecutionTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        reportExecMessageWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ExecMessageModalPage(model.getObject().getMessage());\n+                            }\n+                        });\n+                        reportExecMessageWin.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Reports\", StringUtils.hasText(model.getObject().getMessage()));\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        reportExecExportWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                ReportModalPage.this.exportExecId = model.getObject().getKey();\n+                                return new ReportExecResultDownloadModalPage(reportExecExportWin,\n+                                        ReportModalPage.this.getPageReference());\n+                            }\n+                        });\n+                        reportExecExportWin.show(target);\n+                    }\n+                }, ActionLink.ActionType.EXPORT, \"Reports\", ReportExecStatus.SUCCESS.name().equals(\n+                        model.getObject().getStatus()));\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            reportRestClient.deleteExecution(taskExecutionTO.getKey());\n+\n+                            reportTO.getExecutions().remove(taskExecutionTO);\n+\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException scce) {\n+                            error(scce.getMessage());\n+                        }\n+\n+                        feedbackPanel.refresh(target);\n+                        target.add(executions);\n+                    }\n+                }, ActionLink.ActionType.DELETE, \"Reports\");\n+\n+                return panel;\n+            }\n+\n+            @Override\n+            public Component getHeader(final String componentId) {\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, new Model(), getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        if (target != null) {\n+                            final ReportTO currentReportTO = reportTO.getKey() == 0\n+                                    ? reportTO\n+                                    : reportRestClient.read(reportTO.getKey());\n+                            reportTO.getExecutions().clear();\n+                            reportTO.getExecutions().addAll(currentReportTO.getExecutions());\n+                            final AjaxFallbackDefaultDataTable currentTable =\n+                                    new AjaxFallbackDefaultDataTable(\"executionsTable\", columns,\n+                                            new ReportExecutionsProvider(reportTO), 10);\n+                            currentTable.setOutputMarkupId(true);\n+                            target.add(currentTable);\n+                            executions.addOrReplace(currentTable);\n+                        }\n+                    }\n+                }, ActionLink.ActionType.RELOAD, TASKS, \"list\");\n+\n+                return panel;\n+            }\n+        });\n+\n+        final AjaxFallbackDefaultDataTable table = new AjaxFallbackDefaultDataTable(\"executionsTable\", columns,\n+                new ReportExecutionsProvider(reportTO), 10);\n+        executions.add(table);\n+    }\n+\n+    public void setExportFormat(final ReportExecExportFormat exportFormat) {\n+        this.exportFormat = exportFormat;\n+    }\n+\n+    public void setModalReportletConf(final AbstractReportletConf modalReportletConf) {\n+        this.modalReportletConf = modalReportletConf;\n+    }\n+\n+    private static class ReportExecutionsProvider extends SortableDataProvider<ReportExecTO, String> {\n+\n+        private static final long serialVersionUID = 2118096121691420539L;\n+\n+        private final SortableDataProviderComparator<ReportExecTO> comparator;\n+\n+        private final ReportTO reportTO;\n+\n+        public ReportExecutionsProvider(final ReportTO reportTO) {\n+            super();\n+            this.reportTO = reportTO;\n+            setSort(\"startDate\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<ReportExecTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<ReportExecTO> iterator(final long first, final long count) {\n+\n+            List<ReportExecTO> list = reportTO.getExecutions();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return reportTO.getExecutions().size();\n+        }\n+\n+        @Override\n+        public IModel<ReportExecTO> model(final ReportExecTO taskExecution) {\n+\n+            return new AbstractReadOnlyModel<ReportExecTO>() {\n+\n+                private static final long serialVersionUID = 7485475149862342421L;\n+\n+                @Override\n+                public ReportExecTO getObject() {\n+                    return taskExecution;\n+                }\n+            };\n+        }\n+    }\n+\n+    private class AjaxExportDownloadBehavior extends AbstractAjaxDownloadBehavior {\n+\n+        private static final long serialVersionUID = 3109256773218160485L;\n+\n+        private final ReportExecExportFormat exportFormat;\n+\n+        private final long exportExecId;\n+\n+        private HttpResourceStream stream;\n+\n+        public AjaxExportDownloadBehavior(final ReportExecExportFormat exportFormat, final long exportExecId) {\n+            super();\n+            this.exportFormat = exportFormat;\n+            this.exportExecId = exportExecId;\n+        }\n+\n+        private void createResourceStream() {\n+            if (stream == null) {\n+                stream = new HttpResourceStream(reportRestClient.exportExecutionResult(exportExecId, exportFormat));\n+            }\n+        }\n+\n+        @Override\n+        protected String getFileName() {\n+            createResourceStream();\n+            return stream == null\n+                    ? null\n+                    : stream.getFilename();\n+        }\n+\n+        @Override\n+        protected IResourceStream getResourceStream() {\n+            createResourceStream();\n+            return stream;\n+        }\n+    }\n+}"},{"sha":"9c625e1e807287e438a3334e596071a1b418f13e","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ReportletConfModalPage.java","status":"added","additions":362,"deletions":0,"changes":362,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportletConfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportletConfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReportletConfModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,362 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.ParameterizedType;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.List;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.RoleSearchPanel;\n+import org.apache.syncope.client.console.panels.UserSearchPanel;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.CheckBoxMultipleChoiceFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.DateTimeFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.SpinnerFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.annotation.FormAttributeField;\n+import org.apache.syncope.common.lib.report.AbstractReportletConf;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.util.visit.IVisit;\n+import org.apache.wicket.util.visit.IVisitor;\n+import org.springframework.beans.BeanWrapper;\n+import org.springframework.beans.PropertyAccessorFactory;\n+import org.springframework.util.ClassUtils;\n+\n+public class ReportletConfModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 3910027601200382958L;\n+\n+    private static final String[] EXCLUDE_PROPERTIES = new String[] { \"serialVersionUID\", \"class\", \"name\",\n+        \"reportletClassName\" };\n+\n+    private AbstractReportletConf reportletConf;\n+\n+    private final AjaxTextFieldPanel name;\n+\n+    private WebMarkupContainer propertiesContainer;\n+\n+    private ListView<String> propView;\n+\n+    public ReportletConfModalPage(final AbstractReportletConf reportletConf, final ModalWindow window,\n+            final PageReference pageRef) {\n+\n+        this.reportletConf = reportletConf;\n+\n+        final Form form = new Form(FORM);\n+        add(form);\n+\n+        propertiesContainer = new WebMarkupContainer(\"container\");\n+        propertiesContainer.setOutputMarkupId(true);\n+        form.add(propertiesContainer);\n+\n+        name = new AjaxTextFieldPanel(\"name\", \"name\", this.reportletConf == null\n+                ? new Model<String>()\n+                : new PropertyModel<String>(this.reportletConf, \"name\"));\n+        name.setOutputMarkupId(true);\n+        name.addRequiredLabel();\n+        form.add(name);\n+\n+        final AjaxDropDownChoicePanel<String> reportletClass = new AjaxDropDownChoicePanel<String>(\"reportletClass\",\n+                \"reportletClass\", new IModel<String>() {\n+\n+                    private static final long serialVersionUID = -2316468110411802130L;\n+\n+                    @Override\n+                    public String getObject() {\n+                        return ReportletConfModalPage.this.reportletConf == null\n+                                ? null\n+                                : ReportletConfModalPage.this.reportletConf.getClass().getName();\n+                    }\n+\n+                    @Override\n+                    public void setObject(final String object) {\n+                        try {\n+                            Class<?> reportletClass = Class.forName(object);\n+                            ReportletConfModalPage.this.reportletConf = (AbstractReportletConf) reportletClass.\n+                            newInstance();\n+                            propertiesContainer.replace(buildPropView());\n+                        } catch (Exception e) {\n+                            LOG.error(\"Cannot find or initialize {}\", object, e);\n+                        }\n+                    }\n+\n+                    @Override\n+                    public void detach() {\n+                    }\n+                });\n+        reportletClass.setStyleSheet(\"long_dynamicsize\");\n+        reportletClass.setChoices(reportRestClient.getReportletConfClasses());\n+        ((DropDownChoice) reportletClass.getField()).setNullValid(true);\n+        reportletClass.addRequiredLabel();\n+        reportletClass.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = 5538299138211283825L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                ((DropDownChoice) reportletClass.getField()).setNullValid(false);\n+                target.add(reportletClass.getField());\n+                target.add(propertiesContainer);\n+            }\n+        });\n+        form.add(reportletClass);\n+\n+        propertiesContainer.add(buildPropView());\n+\n+        final AjaxButton submit = new AjaxButton(APPLY, new ResourceModel(APPLY)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                final BeanWrapper wrapper = PropertyAccessorFactory.\n+                        forBeanPropertyAccess(ReportletConfModalPage.this.reportletConf);\n+                wrapper.setPropertyValue(\"name\", name.getField().getInput());\n+\n+                // Iterate over properties in order to find UserSearchPanel instances and manually update\n+                // this.reportletConf with select search criteria - this is needed because UserSearchPanel\n+                // does not comply with usual Wicket model paradigm.\n+                ReportletConfModalPage.this.propView.visitChildren(new IVisitor<Component, Void>() {\n+\n+                    @Override\n+                    public void component(final Component component, final IVisit<Void> ivisit) {\n+                        if (component instanceof UserSearchPanel) {\n+                            // using component.getDefaultModelObjectAsString() to fetch field name (set above)\n+                            wrapper.setPropertyValue(component.getDefaultModelObjectAsString(),\n+                                    ((UserSearchPanel) component).buildFIQL());\n+                        }\n+                    }\n+                });\n+\n+                ((ReportModalPage) pageRef.getPage()).setModalReportletConf(ReportletConfModalPage.this.reportletConf);\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+        form.add(submit);\n+\n+        final AjaxButton cancel = new ClearIndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL), pageRef) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    private FieldPanel buildSinglePanel(final Class<?> type, final String fieldName, final String id) {\n+        FieldPanel result = null;\n+        PropertyModel model = new PropertyModel(ReportletConfModalPage.this.reportletConf, fieldName);\n+        if (ClassUtils.isAssignable(Boolean.class, type)) {\n+            result = new AjaxCheckBoxPanel(id, fieldName, model);\n+        } else if (ClassUtils.isAssignable(Number.class, type)) {\n+            result = new SpinnerFieldPanel<Number>(id, fieldName,\n+                    (Class<Number>) ClassUtils.resolvePrimitiveIfNecessary(type), model, null, null);\n+        } else if (Date.class.equals(type)) {\n+            result = new DateTimeFieldPanel(id, fieldName, model, SyncopeConstants.DEFAULT_DATE_PATTERN);\n+        } else if (type.isEnum()) {\n+            result = new AjaxDropDownChoicePanel(id, fieldName, model).setChoices(\n+                    Arrays.asList(type.getEnumConstants()));\n+        }\n+\n+        // treat as String if nothing matched above\n+        if (result == null) {\n+            result = new AjaxTextFieldPanel(id, fieldName, model);\n+        }\n+\n+        return result;\n+    }\n+\n+    private ListView<String> buildPropView() {\n+        LoadableDetachableModel<List<String>> propViewModel = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                List<String> result = new ArrayList<String>();\n+                if (ReportletConfModalPage.this.reportletConf != null) {\n+                    for (Field field : ReportletConfModalPage.this.reportletConf.getClass().getDeclaredFields()) {\n+                        if (!ArrayUtils.contains(EXCLUDE_PROPERTIES, field.getName())) {\n+                            result.add(field.getName());\n+                        }\n+                    }\n+                }\n+\n+                return result;\n+            }\n+        };\n+\n+        propView = new ListView<String>(\"propView\", propViewModel) {\n+\n+            private static final long serialVersionUID = 9101744072914090143L;\n+\n+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String fieldName = item.getModelObject();\n+\n+                Label label = new Label(\"key\", fieldName);\n+                item.add(label);\n+\n+                Field field = null;\n+                try {\n+                    field = ReportletConfModalPage.this.reportletConf.getClass().getDeclaredField(fieldName);\n+                } catch (Exception e) {\n+                    LOG.error(\"Could not find field {} in class {}\",\n+                            fieldName, ReportletConfModalPage.this.reportletConf.getClass(), e);\n+                }\n+                if (field == null) {\n+                    return;\n+                }\n+\n+                FormAttributeField annotation = field.getAnnotation(FormAttributeField.class);\n+\n+                BeanWrapper wrapper = PropertyAccessorFactory.\n+                        forBeanPropertyAccess(ReportletConfModalPage.this.reportletConf);\n+\n+                Panel panel;\n+\n+                if (String.class.equals(field.getType()) && annotation != null && annotation.userSearch()) {\n+                    panel = new UserSearchPanel.Builder(\"value\").\n+                            fiql((String) wrapper.getPropertyValue(fieldName)).required(false).build();\n+                    // This is needed in order to manually update this.reportletConf with search panel selections\n+                    panel.setDefaultModel(new Model<String>(fieldName));\n+                } else if (String.class.equals(field.getType()) && annotation != null && annotation.roleSearch()) {\n+                    panel = new RoleSearchPanel.Builder(\"value\").\n+                            fiql((String) wrapper.getPropertyValue(fieldName)).required(false).build();\n+                    // This is needed in order to manually update this.reportletConf with search panel selections\n+                    panel.setDefaultModel(new Model<String>(fieldName));\n+                } else if (List.class.equals(field.getType())) {\n+                    Class<?> listItemType = String.class;\n+                    if (field.getGenericType() instanceof ParameterizedType) {\n+                        listItemType =\n+                                (Class<?>) ((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0];\n+                    }\n+\n+                    if (listItemType.equals(String.class) && annotation != null) {\n+                        List<String> choices;\n+                        switch (annotation.schema()) {\n+                            case UserPlainSchema:\n+                                choices = schemaRestClient.getSchemaNames(AttributableType.USER);\n+                                break;\n+\n+                            case UserDerivedSchema:\n+                                choices = schemaRestClient.getDerSchemaNames(AttributableType.USER);\n+                                break;\n+\n+                            case UserVirtualSchema:\n+                                choices = schemaRestClient.getVirSchemaNames(AttributableType.USER);\n+                                break;\n+\n+                            case RolePlainSchema:\n+                                choices = schemaRestClient.getSchemaNames(AttributableType.ROLE);\n+                                break;\n+\n+                            case RoleDerivedSchema:\n+                                choices = schemaRestClient.getDerSchemaNames(AttributableType.ROLE);\n+                                break;\n+\n+                            case RoleVirtualSchema:\n+                                choices = schemaRestClient.getVirSchemaNames(AttributableType.ROLE);\n+                                break;\n+\n+                            case MembershipPlainSchema:\n+                                choices = schemaRestClient.getSchemaNames(AttributableType.MEMBERSHIP);\n+                                break;\n+\n+                            case MembershipDerivedSchema:\n+                                choices = schemaRestClient.getDerSchemaNames(AttributableType.MEMBERSHIP);\n+                                break;\n+\n+                            case MembershipVirtualSchema:\n+                                choices = schemaRestClient.getVirSchemaNames(AttributableType.MEMBERSHIP);\n+                                break;\n+\n+                            default:\n+                                choices = Collections.emptyList();\n+                        }\n+\n+                        panel = new AjaxPalettePanel(\"value\", new PropertyModel<List<String>>(\n+                                ReportletConfModalPage.this.reportletConf, fieldName), new ListModel<String>(choices),\n+                                true);\n+                    } else if (listItemType.isEnum()) {\n+                        panel = new CheckBoxMultipleChoiceFieldPanel(\"value\", new PropertyModel(\n+                                ReportletConfModalPage.this.reportletConf, fieldName),\n+                                new ListModel(Arrays.asList(listItemType.getEnumConstants())));\n+                    } else {\n+                        if (((List) wrapper.getPropertyValue(fieldName)).isEmpty()) {\n+                            ((List) wrapper.getPropertyValue(fieldName)).add(null);\n+                        }\n+\n+                        panel = new MultiFieldPanel(\"value\", new PropertyModel<List>(\n+                                ReportletConfModalPage.this.reportletConf, fieldName),\n+                                buildSinglePanel(field.getType(), fieldName, \"panel\"));\n+                    }\n+                } else {\n+                    panel = buildSinglePanel(field.getType(), fieldName, \"value\");\n+                }\n+\n+                item.add(panel);\n+            }\n+        };\n+\n+        return propView;\n+    }\n+}"},{"sha":"6c53dee209509f73ce219cf84e06d842f7362dc1","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Reports.java","status":"added","additions":413,"deletions":0,"changes":413,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FReports.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,413 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.LoggerCategoryPanel;\n+import org.apache.syncope.client.console.panels.SelectedEventsPanel;\n+import org.apache.syncope.client.console.rest.LoggerRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.AuditElements.Result;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.springframework.util.CollectionUtils;\n+\n+/**\n+ * Auditing and Reporting.\n+ */\n+public class Reports extends BasePage {\n+\n+    private static final long serialVersionUID = -2071214196989178694L;\n+\n+    private static final int WIN_HEIGHT = 500;\n+\n+    private static final int WIN_WIDTH = 700;\n+\n+    @SpringBean\n+    private LoggerRestClient loggerRestClient;\n+\n+    @SpringBean\n+    private PreferenceManager prefMan;\n+\n+    private WebMarkupContainer reportContainer;\n+\n+    private WebMarkupContainer auditContainer;\n+\n+    private int paginatorRows;\n+\n+    private final ModalWindow window;\n+\n+    public Reports(final PageParameters parameters) {\n+        super(parameters);\n+\n+        window = new ModalWindow(\"reportWin\");\n+        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        window.setInitialHeight(WIN_HEIGHT);\n+        window.setInitialWidth(WIN_WIDTH);\n+        window.setCookieName(\"view-report-win\");\n+        add(window);\n+\n+        setupReport();\n+        setupAudit();\n+    }\n+\n+    private void setupReport() {\n+        reportContainer = new WebMarkupContainer(\"reportContainer\");\n+        setWindowClosedCallback(window, reportContainer);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(reportContainer, RENDER,\n+                xmlRolesReader.getEntitlement(\"Reports\", \"list\"));\n+\n+        paginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_REPORT_PAGINATOR_ROWS);\n+\n+        List<IColumn<ReportTO, String>> columns = new ArrayList<IColumn<ReportTO, String>>();\n+        columns.add(new PropertyColumn<ReportTO, String>(new ResourceModel(\"id\"), \"id\", \"id\"));\n+        columns.add(new PropertyColumn<ReportTO, String>(new ResourceModel(\"name\"), \"name\", \"name\"));\n+        columns.add(new DatePropertyColumn<ReportTO>(new ResourceModel(\"lastExec\"), \"lastExec\", \"lastExec\"));\n+        columns.add(new DatePropertyColumn<ReportTO>(new ResourceModel(\"nextExec\"), \"nextExec\", \"nextExec\"));\n+        columns.add(new DatePropertyColumn<ReportTO>(new ResourceModel(\"startDate\"), \"startDate\", \"startDate\"));\n+        columns.add(new DatePropertyColumn<ReportTO>(new ResourceModel(\"endDate\"), \"endDate\", \"endDate\"));\n+        columns.add(new PropertyColumn<ReportTO, String>(\n+                new ResourceModel(\"latestExecStatus\"), \"latestExecStatus\", \"latestExecStatus\"));\n+        columns.add(new ActionColumn<ReportTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public ActionLinksPanel getActions(final String componentId, final IModel<ReportTO> model) {\n+\n+                final ReportTO reportTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+\n+                        window.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ReportModalPage(window, reportTO, Reports.this.getPageReference());\n+                            }\n+                        });\n+\n+                        window.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Reports\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            reportRestClient.startExecution(reportTO.getKey());\n+                            getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException scce) {\n+                            error(scce.getMessage());\n+                        }\n+\n+                        feedbackPanel.refresh(target);\n+                        target.add(reportContainer);\n+                    }\n+                }, ActionLink.ActionType.EXECUTE, \"Reports\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            reportRestClient.delete(reportTO.getKey());\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException scce) {\n+                            error(scce.getMessage());\n+                        }\n+                        target.add(reportContainer);\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }, ActionLink.ActionType.DELETE, \"Reports\");\n+\n+                return panel;\n+            }\n+\n+            @Override\n+            public Component getHeader(final String componentId) {\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, new Model(), getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        if (target != null) {\n+                            target.add(reportContainer);\n+                        }\n+                    }\n+                }, ActionLink.ActionType.RELOAD, TASKS, \"list\");\n+\n+                return panel;\n+            }\n+        });\n+\n+        final AjaxFallbackDefaultDataTable<ReportTO, String> reportTable =\n+                new AjaxFallbackDefaultDataTable<ReportTO, String>(\n+                        \"reportTable\", columns, new ReportProvider(), paginatorRows);\n+\n+        reportContainer.add(reportTable);\n+        reportContainer.setOutputMarkupId(true);\n+\n+        add(reportContainer);\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        Form paginatorForm = new Form(\"paginatorForm\");\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(paginatorForm, RENDER,\n+                xmlRolesReader.getEntitlement(\"Reports\", \"list\"));\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_REPORT_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n+                reportTable.setItemsPerPage(paginatorRows);\n+\n+                target.add(reportContainer);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+\n+        AjaxLink createLink = new ClearIndicatingAjaxLink(\"createLink\", getPageReference()) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                window.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new ReportModalPage(window, new ReportTO(), Reports.this.getPageReference());\n+                    }\n+                });\n+\n+                window.show(target);\n+            }\n+        };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(createLink, RENDER, xmlRolesReader.getEntitlement(\"Reports\",\n+                \"create\"));\n+\n+        add(createLink);\n+    }\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private void setupAudit() {\n+        auditContainer = new WebMarkupContainer(\"auditContainer\");\n+        auditContainer.setOutputMarkupId(true);\n+        add(auditContainer);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                auditContainer, RENDER, xmlRolesReader.getEntitlement(\"Audit\", \"list\"));\n+\n+        final Form form = new Form(\"auditForm\");\n+        auditContainer.add(form);\n+\n+        final List<String> events = new ArrayList<>();\n+\n+        final List<AuditLoggerName> audits = loggerRestClient.listAudits();\n+        for (AuditLoggerName audit : audits) {\n+            events.add(AuditLoggerName.buildEvent(\n+                    audit.getType(),\n+                    audit.getCategory(),\n+                    audit.getSubcategory(),\n+                    audit.getEvent(),\n+                    audit.getResult()));\n+        }\n+\n+        final ListModel<String> model = new ListModel<String>(new ArrayList<String>(events));\n+\n+        form.add(new LoggerCategoryPanel(\n+                \"events\", loggerRestClient.listEvents(), model, getPageReference(), \"Reports\") {\n+\n+                    private static final long serialVersionUID = 6113164334533550277L;\n+\n+                    @Override\n+                    protected String[] getListRoles() {\n+                        return new String[] {\n+                            xmlRolesReader.getEntitlement(\"Audit\", \"list\")\n+                        };\n+                    }\n+\n+                    @Override\n+                    protected String[] getChangeRoles() {\n+                        return new String[] {\n+                            xmlRolesReader.getEntitlement(\"Audit\", \"enable\"),\n+                            xmlRolesReader.getEntitlement(\"Audit\", \"disable\")\n+                        };\n+                    }\n+\n+                    @Override\n+                    public void onEventAction(final IEvent<?> event) {\n+                        if (event.getPayload() instanceof SelectedEventsPanel.EventSelectionChanged) {\n+\n+                            final SelectedEventsPanel.EventSelectionChanged eventSelectionChanged =\n+                            (SelectedEventsPanel.EventSelectionChanged) event.getPayload();\n+\n+                            for (String toBeRemoved : eventSelectionChanged.getToBeRemoved()) {\n+                                if (events.contains(toBeRemoved)) {\n+                                    final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    AuditLoggerName.parseEventCategory(toBeRemoved);\n+\n+                                    final AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                                            eventCategory.getKey().getType(),\n+                                            eventCategory.getKey().getCategory(),\n+                                            eventCategory.getKey().getSubcategory(),\n+                                            CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n+                                                    ? null : eventCategory.getKey().getEvents().iterator().next(),\n+                                            eventCategory.getValue());\n+\n+                                    loggerRestClient.disableAudit(auditLoggerName);\n+                                    events.remove(toBeRemoved);\n+                                }\n+                            }\n+\n+                            for (String toBeAdded : eventSelectionChanged.getToBeAdded()) {\n+                                if (!events.contains(toBeAdded)) {\n+                                    final Map.Entry<EventCategoryTO, Result> eventCategory =\n+                                    AuditLoggerName.parseEventCategory(toBeAdded);\n+\n+                                    final AuditLoggerName auditLoggerName = new AuditLoggerName(\n+                                            eventCategory.getKey().getType(),\n+                                            eventCategory.getKey().getCategory(),\n+                                            eventCategory.getKey().getSubcategory(),\n+                                            CollectionUtils.isEmpty(eventCategory.getKey().getEvents())\n+                                                    ? null : eventCategory.getKey().getEvents().iterator().next(),\n+                                            eventCategory.getValue());\n+\n+                                    loggerRestClient.enableAudit(auditLoggerName);\n+                                    events.add(toBeAdded);\n+                                }\n+                            }\n+                        }\n+                    }\n+                });\n+    }\n+\n+    private class ReportProvider extends SortableDataProvider<ReportTO, String> {\n+\n+        private static final long serialVersionUID = -2311716167583335852L;\n+\n+        private final SortableDataProviderComparator<ReportTO> comparator;\n+\n+        public ReportProvider() {\n+            super();\n+\n+            //Default sorting\n+            setSort(\"id\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<ReportTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<ReportTO> iterator(final long first, final long count) {\n+            final int page = ((int) first / paginatorRows);\n+\n+            final List<ReportTO> list =\n+                    reportRestClient.list((page < 0 ? 0 : page) + 1, paginatorRows, getSort());\n+            Collections.sort(list, comparator);\n+            return list.iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return reportRestClient.count();\n+        }\n+\n+        @Override\n+        public IModel<ReportTO> model(final ReportTO configuration) {\n+\n+            return new AbstractReadOnlyModel<ReportTO>() {\n+\n+                private static final long serialVersionUID = 4921104837546595602L;\n+\n+                @Override\n+                public ReportTO getObject() {\n+                    return configuration;\n+                }\n+            };\n+        }\n+    }\n+}"},{"sha":"d8b762f118844eb6eea743a4edfd0b82022c6b9f","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/RequestPasswordResetModalPage.java","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRequestPasswordResetModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,153 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.rest.SecurityQuestionRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.StatelessForm;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class RequestPasswordResetModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -8419445804421211904L;\n+\n+    @SpringBean\n+    private SecurityQuestionRestClient securityQuestionRestClient;\n+\n+    public RequestPasswordResetModalPage(final ModalWindow window) {\n+        super();\n+        setOutputMarkupId(true);\n+\n+        final boolean handleSecurityQuestion = userSelfRestClient.isPwdResetRequiringSecurityQuestions();\n+\n+        final StatelessForm<?> form = new StatelessForm<Object>(FORM);\n+        form.setOutputMarkupId(true);\n+\n+        final Label securityQuestionLabel = new Label(\"securityQuestionLabel\", getString(\"securityQuestion\"));\n+        securityQuestionLabel.setOutputMarkupPlaceholderTag(true);\n+        securityQuestionLabel.setVisible(handleSecurityQuestion);\n+        form.add(securityQuestionLabel);\n+        final AjaxTextFieldPanel securityQuestion =\n+                new AjaxTextFieldPanel(\"securityQuestion\", \"securityQuestion\", new Model<String>());\n+        securityQuestion.setReadOnly(true);\n+        securityQuestion.setRequired(true);\n+        securityQuestion.getField().setOutputMarkupId(true);\n+        securityQuestion.setOutputMarkupPlaceholderTag(true);\n+        securityQuestion.setVisible(handleSecurityQuestion);\n+        form.add(securityQuestion);\n+\n+        final AjaxTextFieldPanel username =\n+                new AjaxTextFieldPanel(\"username\", \"username\", new Model<String>());\n+        username.setRequired(true);\n+        username.getField().setOutputMarkupId(true);\n+        if (handleSecurityQuestion) {\n+            username.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_BLUR) {\n+\n+                private static final long serialVersionUID = -1107858522700306810L;\n+\n+                @Override\n+                protected void onUpdate(final AjaxRequestTarget target) {\n+                    getFeedbackMessages().clear();\n+                    target.add(feedbackPanel);\n+                    try {\n+                        SecurityQuestionTO read = securityQuestionRestClient.readByUser(username.getModelObject());\n+                        securityQuestion.setModelObject(read.getContent());\n+                    } catch (Exception e) {\n+                        LOG.error(\"While fetching security question for {}\", username.getModelObject(), e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                        securityQuestion.setModelObject(null);\n+                    } finally {\n+                        target.add(securityQuestion);\n+                    }\n+                }\n+            });\n+        }\n+        form.add(username);\n+\n+        final Label securityAnswerLabel = new Label(\"securityAnswerLabel\", getString(\"securityAnswer\"));\n+        securityAnswerLabel.setOutputMarkupPlaceholderTag(true);\n+        securityAnswerLabel.setVisible(handleSecurityQuestion);\n+        form.add(securityAnswerLabel);\n+        final AjaxTextFieldPanel securityAnswer =\n+                new AjaxTextFieldPanel(\"securityAnswer\", \"securityAnswer\", new Model<String>());\n+        securityAnswer.setRequired(handleSecurityQuestion);\n+        securityAnswer.setOutputMarkupPlaceholderTag(true);\n+        securityAnswer.setVisible(handleSecurityQuestion);\n+        form.add(securityAnswer);\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(SUBMIT, SUBMIT)) {\n+\n+            private static final long serialVersionUID = -4804368561204623354L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    userSelfRestClient.requestPasswordReset(username.getModelObject(), securityAnswer.getModelObject());\n+\n+                    setResponsePage(new ResultStatusModalPage.Builder(window, new UserTO()).\n+                            mode(Mode.SELF).build());\n+                } catch (Exception e) {\n+                    LOG.error(\"While requesting password reset for {}\", username.getModelObject(), e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                // do nothing\n+            }\n+        };\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+\n+        add(form);\n+    }\n+}"},{"sha":"824c39cb78f21b2a46202d8723d1182af80b37a9","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ResourceModalPage.java","status":"added","additions":217,"deletions":0,"changes":217,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResourceModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResourceModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResourceModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,217 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.AnnotatedBeanPanel;\n+import org.apache.syncope.client.console.panels.ResourceConnConfPanel;\n+import org.apache.syncope.client.console.panels.ResourceDetailsPanel;\n+import org.apache.syncope.client.console.panels.ResourceMappingPanel;\n+import org.apache.syncope.client.console.panels.ResourceSecurityPanel;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+\n+/**\n+ * Modal window with Resource form.\n+ */\n+public class ResourceModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 1734415311027284221L;\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public ResourceModalPage(final PageReference pageRef, final ModalWindow window, final ResourceTO resourceTO,\n+            final boolean createFlag) {\n+\n+        super();\n+\n+        this.add(new Label(\"new\", StringUtils.isBlank(resourceTO.getKey())\n+                ? new ResourceModel(\"new\")\n+                : new Model(\"\")));\n+\n+        this.add(new Label(\"name\", StringUtils.isBlank(resourceTO.getKey())\n+                ? \"\"\n+                : resourceTO.getKey()));\n+\n+        final Form<ResourceTO> form = new Form<ResourceTO>(FORM);\n+        form.setModel(new CompoundPropertyModel<ResourceTO>(resourceTO));\n+\n+        //--------------------------------\n+        // Resource details panel\n+        //--------------------------------\n+        form.add(new ResourceDetailsPanel(\"details\", resourceTO,\n+                resourceRestClient.getPropagationActionsClasses(), createFlag));\n+\n+        form.add(new AnnotatedBeanPanel(\"systeminformation\", resourceTO));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Resource mapping panels\n+        //--------------------------------\n+        form.add(new ResourceMappingPanel(\"umapping\", resourceTO, AttributableType.USER));\n+        form.add(new ResourceMappingPanel(\"rmapping\", resourceTO, AttributableType.ROLE));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Resource connector configuration panel\n+        //--------------------------------\n+        ResourceConnConfPanel resourceConnConfPanel = new ResourceConnConfPanel(\"connconf\", resourceTO, createFlag);\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                resourceConnConfPanel, ENABLE, xmlRolesReader.getEntitlement(\"Connectors\", \"read\"));\n+        form.add(resourceConnConfPanel);\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Resource security panel\n+        //--------------------------------\n+        form.add(new ResourceSecurityPanel(\"security\", resourceTO));\n+        //--------------------------------\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(SUBMIT, SUBMIT)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                final ResourceTO resourceTO = (ResourceTO) form.getDefaultModelObject();\n+\n+                boolean accountIdError = false;\n+\n+                if (resourceTO.getUmapping() == null || resourceTO.getUmapping().getItems().isEmpty()) {\n+                    resourceTO.setUmapping(null);\n+                } else {\n+                    int uAccountIdCount = 0;\n+                    for (MappingItemTO item : resourceTO.getUmapping().getItems()) {\n+                        if (item.isAccountid()) {\n+                            uAccountIdCount++;\n+                        }\n+                    }\n+                    accountIdError = uAccountIdCount != 1;\n+                }\n+\n+                if (resourceTO.getRmapping() == null || resourceTO.getRmapping().getItems().isEmpty()) {\n+                    resourceTO.setRmapping(null);\n+                } else {\n+                    int rAccountIdCount = 0;\n+                    for (MappingItemTO item : resourceTO.getRmapping().getItems()) {\n+                        if (item.isAccountid()) {\n+                            rAccountIdCount++;\n+                        }\n+                    }\n+                    accountIdError |= rAccountIdCount != 1;\n+                }\n+\n+                if (accountIdError) {\n+                    error(getString(\"accountIdValidation\"));\n+                    feedbackPanel.refresh(target);\n+                } else {\n+                    try {\n+                        if (createFlag) {\n+                            resourceRestClient.create(resourceTO);\n+                        } else {\n+                            resourceRestClient.update(resourceTO);\n+                        }\n+\n+                        if (pageRef != null && pageRef.getPage() instanceof AbstractBasePage) {\n+                            ((AbstractBasePage) pageRef.getPage()).setModalResult(true);\n+                        }\n+                        window.close(target);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Failure managing resource {}\", resourceTO, e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+\n+        add(form);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, xmlRolesReader.getEntitlement(\"Resources\",\n+                createFlag\n+                        ? \"create\"\n+                        : \"update\"));\n+    }\n+\n+    /**\n+     * Generic resource event.\n+     */\n+    public static class ResourceEvent {\n+\n+        /**\n+         * Request target.\n+         */\n+        private AjaxRequestTarget target;\n+\n+        /**\n+         * Constructor.\n+         *\n+         * @param target request target.\n+         */\n+        public ResourceEvent(final AjaxRequestTarget target) {\n+            this.target = target;\n+        }\n+\n+        /**\n+         * Target getter.\n+         *\n+         * @return request target.\n+         */\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+    }\n+}"},{"sha":"c0ebfa079e96e09080dc0968d773eea1b3cd0371","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Resources.java","status":"added","additions":732,"deletions":0,"changes":732,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResources.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResources.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResources.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,732 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.AbstractSearchResultPanel;\n+import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n+import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.LinkPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ConnInstanceTO;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxCallListener;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Resources WebPage.\n+ */\n+public class Resources extends BasePage {\n+\n+    private static final long serialVersionUID = -3789252860990261728L;\n+\n+    private static final int WIN_HEIGHT = 600;\n+\n+    private static final int WIN_WIDTH = 1100;\n+\n+    @SpringBean\n+    private ConnectorRestClient connectorRestClient;\n+\n+    @SpringBean\n+    private PreferenceManager prefMan;\n+\n+    private final ModalWindow createResourceWin;\n+\n+    private final ModalWindow editResourceWin;\n+\n+    private final ModalWindow createConnectorWin;\n+\n+    private final ModalWindow editConnectorWin;\n+\n+    private final int resourcePaginatorRows;\n+\n+    private final int connectorPaginatorRows;\n+\n+    private WebMarkupContainer resourceContainer;\n+\n+    private WebMarkupContainer connectorContainer;\n+\n+    /**\n+     * Modal window to be used for user status management.\n+     */\n+    protected final ModalWindow statusmodal = new ModalWindow(\"statusModal\");\n+\n+    /**\n+     * Schemas to be shown modal window height.\n+     */\n+    private final static int STATUS_MODAL_WIN_HEIGHT = 500;\n+\n+    /**\n+     * Schemas to be shown modal window width.\n+     */\n+    private final static int STATUS_MODAL_WIN_WIDTH = 700;\n+\n+    public Resources(final PageParameters parameters) {\n+        super(parameters);\n+\n+        add(createResourceWin = new ModalWindow(\"createResourceWin\"));\n+        add(editResourceWin = new ModalWindow(\"editResourceWin\"));\n+        add(createConnectorWin = new ModalWindow(\"createConnectorWin\"));\n+        add(editConnectorWin = new ModalWindow(\"editConnectorWin\"));\n+\n+        statusmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        statusmodal.setInitialHeight(STATUS_MODAL_WIN_HEIGHT);\n+        statusmodal.setInitialWidth(STATUS_MODAL_WIN_WIDTH);\n+        statusmodal.setCookieName(\"status-modal\");\n+        add(statusmodal);\n+\n+        AjaxLink<Void> reloadLink = new ClearIndicatingAjaxLink<Void>(\"reloadLink\", getPageReference()) {\n+\n+            private static final long serialVersionUID = 3109256773218160485L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                try {\n+                    connectorRestClient.reload();\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                } catch (Exception e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                }\n+                feedbackPanel.refresh(target);\n+                target.add(connectorContainer);\n+            }\n+\n+            @Override\n+            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+                super.updateAjaxAttributes(attributes);\n+\n+                final AjaxCallListener ajaxCallListener = new AjaxCallListener() {\n+\n+                    private static final long serialVersionUID = 7160235486520935153L;\n+\n+                    @Override\n+                    public CharSequence getPrecondition(final Component component) {\n+                        return \"if (!confirm('\" + getString(\"confirmReloadConnectors\") + \"')) \"\n+                                + \"{return false;} else {return true;}\";\n+                    }\n+                };\n+                attributes.getAjaxCallListeners().add(ajaxCallListener);\n+            }\n+        };\n+        MetaDataRoleAuthorizationStrategy.authorize(reloadLink, ENABLE, xmlRolesReader.getEntitlement(\n+                \"Connectors\", \"reload\"));\n+        add(reloadLink);\n+\n+        resourcePaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_RESOURCES_PAGINATOR_ROWS);\n+        connectorPaginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_CONNECTORS_PAGINATOR_ROWS);\n+\n+        setupResources();\n+        setupConnectors();\n+    }\n+\n+    private void setupResources() {\n+        List<IColumn<ResourceTO, String>> columns = new ArrayList<IColumn<ResourceTO, String>>();\n+\n+        columns.add(\n+                new PropertyColumn<ResourceTO, String>(new StringResourceModel(\"name\", this, null), \"name\", \"name\"));\n+\n+        columns.add(new AbstractColumn<ResourceTO, String>(\n+                new StringResourceModel(\"connector\", this, null, \"connector\")) {\n+\n+                    private static final long serialVersionUID = 8263694778917279290L;\n+\n+                    @Override\n+                    public void populateItem(final Item<ICellPopulator<ResourceTO>> cellItem, final String componentId,\n+                            final IModel<ResourceTO> rowModel) {\n+\n+                        final AjaxLink<String> editLink =\n+                        new ClearIndicatingAjaxLink<String>(\"link\", getPageReference()) {\n+\n+                            private static final long serialVersionUID = -7978723352517770644L;\n+\n+                            @Override\n+                            protected void onClickInternal(final AjaxRequestTarget target) {\n+\n+                                editConnectorWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                                    @Override\n+                                    public Page createPage() {\n+                                        return new ConnectorModalPage(Resources.this.getPageReference(),\n+                                                editConnectorWin,\n+                                                connectorRestClient.read(rowModel.getObject().getConnectorId()));\n+                                    }\n+                                });\n+\n+                                editConnectorWin.show(target);\n+                            }\n+                        };\n+                        editLink.add(new Label(\"linkTitle\", rowModel.getObject().getConnectorDisplayName()));\n+\n+                        LinkPanel editConnPanel = new LinkPanel(componentId);\n+                        editConnPanel.add(editLink);\n+\n+                        cellItem.add(editConnPanel);\n+\n+                        MetaDataRoleAuthorizationStrategy.authorize(editConnPanel, ENABLE, xmlRolesReader.\n+                                getEntitlement(\n+                                        \"Connectors\", \"read\"));\n+                    }\n+                });\n+\n+        columns.add(new AbstractColumn<ResourceTO, String>(\n+                new StringResourceModel(\"propagationPrimary\", this, null)) {\n+\n+                    private static final long serialVersionUID = -3503023501954863131L;\n+\n+                    @Override\n+                    public void populateItem(final Item<ICellPopulator<ResourceTO>> item,\n+                            final String componentId, final IModel<ResourceTO> model) {\n+\n+                        item.add(new Label(componentId, \"\"));\n+                        item.add(new AttributeModifier(\"class\", new Model<String>(\n+                                                Boolean.toString(model.getObject().isPropagationPrimary()))));\n+                    }\n+\n+                    @Override\n+                    public String getCssClass() {\n+                        return \"narrowcolumn\";\n+                    }\n+                });\n+\n+        columns.add(new PropertyColumn<ResourceTO, String>(new StringResourceModel(\n+                \"propagationPriority\", this, null), \"propagationPriority\", \"propagationPriority\") {\n+\n+                    @Override\n+                    public String getCssClass() {\n+                        return \"narrowcolumn\";\n+                    }\n+                });\n+\n+        columns.add(new AbstractColumn<ResourceTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<ResourceTO>> cellItem, final String componentId,\n+                    final IModel<ResourceTO> model) {\n+\n+                final ResourceTO resourceTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        statusmodal.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ProvisioningModalPage<>(\n+                                        getPageReference(), statusmodal, model.getObject(), UserTO.class);\n+                            }\n+                        });\n+\n+                        statusmodal.show(target);\n+                    }\n+                }, ActionLink.ActionType.MANAGE_USERS, \"Resources\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+\n+                        statusmodal.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ProvisioningModalPage<RoleTO>(\n+                                        getPageReference(), statusmodal, model.getObject(), RoleTO.class);\n+                            }\n+                        });\n+\n+                        statusmodal.show(target);\n+                    }\n+                }, ActionLink.ActionType.MANAGE_ROLES, \"Resources\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        resourceTO.setUsyncToken(null);\n+                        resourceTO.setRsyncToken(null);\n+                        try {\n+                            resourceRestClient.update(resourceTO);\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException e) {\n+                            error(getString(Constants.ERROR) + \":\" + e.getMessage());\n+\n+                            LOG.error(\"While resetting sync token from \" + resourceTO.getKey(), e);\n+                        }\n+\n+                        feedbackPanel.refresh(target);\n+                        target.add(resourceContainer);\n+                    }\n+                }, ActionLink.ActionType.RESET, \"Resources\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        editResourceWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ResourceModalPage(Resources.this.getPageReference(),\n+                                        editResourceWin, resourceTO, false);\n+                            }\n+                        });\n+\n+                        editResourceWin.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Resources\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            resourceRestClient.delete(resourceTO.getKey());\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException e) {\n+                            error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+\n+                            LOG.error(\"While deleting resource \" + resourceTO.getKey(), e);\n+                        }\n+\n+                        feedbackPanel.refresh(target);\n+                        target.add(resourceContainer);\n+                    }\n+                }, ActionLink.ActionType.DELETE, \"Resources\");\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n+        final AjaxDataTablePanel<ResourceTO, String> table = new AjaxDataTablePanel<ResourceTO, String>(\n+                \"resourceDatatable\",\n+                columns,\n+                (ISortableDataProvider<ResourceTO, String>) new ResourcesProvider(),\n+                resourcePaginatorRows,\n+                Arrays.asList(new ActionLink.ActionType[] { ActionLink.ActionType.DELETE }),\n+                resourceRestClient,\n+                \"name\",\n+                \"Resources\",\n+                getPageReference());\n+\n+        resourceContainer = new WebMarkupContainer(\"resourceContainer\");\n+        resourceContainer.add(table);\n+        resourceContainer.setOutputMarkupId(true);\n+\n+        add(resourceContainer);\n+\n+        setWindowClosedCallback(createResourceWin, resourceContainer);\n+        setWindowClosedCallback(editResourceWin, resourceContainer);\n+\n+        createResourceWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        createResourceWin.setInitialHeight(WIN_HEIGHT);\n+        createResourceWin.setInitialWidth(WIN_WIDTH);\n+        createResourceWin.setCookieName(\"create-res-modal\");\n+\n+        editResourceWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editResourceWin.setInitialHeight(WIN_HEIGHT);\n+        editResourceWin.setInitialWidth(WIN_WIDTH);\n+        editResourceWin.setCookieName(\"edit-res-modal\");\n+\n+        AjaxLink<Void> createResourceLink =\n+                new ClearIndicatingAjaxLink<Void>(\"createResourceLink\", getPageReference()) {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    protected void onClickInternal(final AjaxRequestTarget target) {\n+                        createResourceWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                final ResourceModalPage windows = new ResourceModalPage(Resources.this.\n+                                        getPageReference(),\n+                                        editResourceWin, new ResourceTO(), true);\n+                                return windows;\n+                            }\n+                        });\n+\n+                        createResourceWin.show(target);\n+                    }\n+                };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(createResourceLink, ENABLE, xmlRolesReader.getEntitlement(\n+                \"Resources\", \"create\"));\n+\n+        add(createResourceLink);\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        final Form paginatorForm = new Form(\"resourcePaginatorForm\");\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this,\n+                \"resourcePaginatorRows\"), prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_RESOURCES_PAGINATOR_ROWS,\n+                        String.valueOf(resourcePaginatorRows));\n+\n+                table.setItemsPerPage(resourcePaginatorRows);\n+                target.add(resourceContainer);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+    }\n+\n+    private void setupConnectors() {\n+        List<IColumn<ConnInstanceTO, String>> columns = new ArrayList<IColumn<ConnInstanceTO, String>>();\n+\n+        columns.add(new PropertyColumn<ConnInstanceTO, String>(\n+                new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n+        columns.add(new PropertyColumn<ConnInstanceTO, String>(\n+                new StringResourceModel(\"name\", this, null), \"connectorName\", \"connectorName\"));\n+        columns.add(new PropertyColumn<ConnInstanceTO, String>(\n+                new StringResourceModel(\"displayName\", this, null), \"displayName\", \"displayName\"));\n+        columns.add(new PropertyColumn<ConnInstanceTO, String>(\n+                new StringResourceModel(\"bundleName\", this, null), \"bundleName\", \"bundleName\"));\n+        columns.add(new PropertyColumn<ConnInstanceTO, String>(\n+                new StringResourceModel(\"version\", this, null), \"version\", \"version\"));\n+        columns.add(new AbstractColumn<ConnInstanceTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<ConnInstanceTO>> cellItem, final String componentId,\n+                    final IModel<ConnInstanceTO> model) {\n+\n+                final ConnInstanceTO connectorTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        editConnectorWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ConnectorModalPage(Resources.this.getPageReference(), editConnectorWin,\n+                                        connectorTO);\n+                            }\n+                        });\n+\n+                        editConnectorWin.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Connectors\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            connectorRestClient.delete(connectorTO.getKey());\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException e) {\n+                            error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+\n+                            LOG.error(\"While deleting connector \" + connectorTO.getKey(), e);\n+                        }\n+\n+                        target.add(connectorContainer);\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }, ActionLink.ActionType.DELETE, \"Connectors\");\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n+        final AjaxDataTablePanel<ConnInstanceTO, String> table = new AjaxDataTablePanel<ConnInstanceTO, String>(\n+                \"connectorDatatable\",\n+                columns,\n+                (ISortableDataProvider<ConnInstanceTO, String>) new ConnectorsProvider(),\n+                connectorPaginatorRows,\n+                Arrays.asList(new ActionLink.ActionType[] { ActionLink.ActionType.DELETE }),\n+                connectorRestClient,\n+                \"id\",\n+                \"Connectors\",\n+                getPageReference());\n+\n+        connectorContainer = new WebMarkupContainer(\"connectorContainer\");\n+        connectorContainer.add(table);\n+        connectorContainer.setOutputMarkupId(true);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(connectorContainer, RENDER, xmlRolesReader.getEntitlement(\n+                \"Connectors\", \"list\"));\n+\n+        add(connectorContainer);\n+\n+        setWindowClosedCallback(createConnectorWin, connectorContainer);\n+        setWindowClosedCallback(editConnectorWin, connectorContainer);\n+\n+        createConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        createConnectorWin.setInitialHeight(WIN_HEIGHT);\n+        createConnectorWin.setInitialWidth(WIN_WIDTH);\n+        createConnectorWin.setCookieName(\"create-conn-modal\");\n+\n+        editConnectorWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editConnectorWin.setInitialHeight(WIN_HEIGHT);\n+        editConnectorWin.setInitialWidth(WIN_WIDTH);\n+        editConnectorWin.setCookieName(\"edit-conn-modal\");\n+\n+        AjaxLink<Void> createConnectorLink =\n+                new ClearIndicatingAjaxLink<Void>(\"createConnectorLink\", getPageReference()) {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    protected void onClickInternal(final AjaxRequestTarget target) {\n+                        createConnectorWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                ConnectorModalPage form = new ConnectorModalPage(Resources.this.getPageReference(),\n+                                        editConnectorWin, new ConnInstanceTO());\n+                                return form;\n+                            }\n+                        });\n+\n+                        createConnectorWin.show(target);\n+                    }\n+                };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(createConnectorLink, ENABLE, xmlRolesReader.getEntitlement(\n+                \"Connectors\", \"create\"));\n+\n+        add(createConnectorLink);\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        Form paginatorForm = new Form(\"connectorPaginatorForm\");\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(paginatorForm, RENDER, xmlRolesReader.getEntitlement(\n+                \"Connectors\", \"list\"));\n+\n+        final DropDownChoice<Integer> rowsChooser = new DropDownChoice<Integer>(\n+                \"rowsChooser\",\n+                new PropertyModel<Integer>(this,\n+                        \"connectorPaginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(AjaxRequestTarget target) {\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_CONNECTORS_PAGINATOR_ROWS,\n+                        String.valueOf(connectorPaginatorRows));\n+                table.setItemsPerPage(connectorPaginatorRows);\n+\n+                target.add(connectorContainer);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+    }\n+\n+    class ResourcesProvider extends SortableDataProvider<ResourceTO, String> {\n+\n+        private static final long serialVersionUID = -9055916672926643975L;\n+\n+        private final SortableDataProviderComparator<ResourceTO> comparator;\n+\n+        public ResourcesProvider() {\n+            super();\n+            //Default sorting\n+            setSort(\"name\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<ResourceTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<ResourceTO> iterator(final long first, final long count) {\n+            List<ResourceTO> list = getResourcesListDB();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return getResourcesListDB().size();\n+        }\n+\n+        @Override\n+        public IModel<ResourceTO> model(final ResourceTO resource) {\n+            return new AbstractReadOnlyModel<ResourceTO>() {\n+\n+                private static final long serialVersionUID = 8952474152465381634L;\n+\n+                @Override\n+                public ResourceTO getObject() {\n+                    return resource;\n+                }\n+            };\n+        }\n+\n+        public List<ResourceTO> getResourcesListDB() {\n+            return resourceRestClient.getAll();\n+        }\n+    }\n+\n+    private class ConnectorsProvider extends SortableDataProvider<ConnInstanceTO, String> {\n+\n+        private static final long serialVersionUID = 4445909568349448518L;\n+\n+        private final SortableDataProviderComparator<ConnInstanceTO> comparator;\n+\n+        public ConnectorsProvider() {\n+            super();\n+            //Default sorting\n+            setSort(\"id\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<ConnInstanceTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<ConnInstanceTO> iterator(long first, long count) {\n+            List<ConnInstanceTO> list = getConnectorsListDB();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return getConnectorsListDB().size();\n+        }\n+\n+        @Override\n+        public IModel<ConnInstanceTO> model(final ConnInstanceTO connector) {\n+\n+            return new AbstractReadOnlyModel<ConnInstanceTO>() {\n+\n+                private static final long serialVersionUID = -6033068018293569398L;\n+\n+                @Override\n+                public ConnInstanceTO getObject() {\n+                    return connector;\n+                }\n+            };\n+        }\n+\n+        public List<ConnInstanceTO> getConnectorsListDB() {\n+            return connectorRestClient.getAllConnectors();\n+        }\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof AbstractSearchResultPanel.EventDataWrapper) {\n+            ((AbstractSearchResultPanel.EventDataWrapper) event.getPayload()).getTarget().add(resourceContainer);\n+            ((AbstractSearchResultPanel.EventDataWrapper) event.getPayload()).getTarget().add(connectorContainer);\n+        }\n+    }\n+}"},{"sha":"4a3589c41bf069e1c06af0ff7deb9a0d581e599c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ResultStatusModalPage.java","status":"added","additions":426,"deletions":0,"changes":426,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResultStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResultStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FResultStatusModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,426 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.ConnIdSpecialAttributeName;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.commons.status.Status;\n+import org.apache.syncope.client.console.commons.status.StatusUtils;\n+import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConnObjectTO;\n+import org.apache.syncope.common.lib.to.PropagationStatus;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.PropagationTaskExecStatus;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.behavior.Behavior;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.image.Image;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Show user or role status after performing a successful operation.\n+ */\n+public class ResultStatusModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 2646115294319713723L;\n+\n+    private static final String IMG_STATUSES = \"statuses/\";\n+\n+    @SpringBean(name = \"anonymousUser\")\n+    private String anonymousUser;\n+\n+    private final AbstractSubjectTO subject;\n+\n+    private final Mode mode;\n+\n+    /**\n+     * Status management utilities.\n+     */\n+    private final StatusUtils statusUtils;\n+\n+    public static class Builder implements Serializable {\n+\n+        private static final long serialVersionUID = 220361441802274899L;\n+\n+        private ModalWindow window;\n+\n+        private Mode mode;\n+\n+        private AbstractSubjectTO subject;\n+\n+        public Builder(final ModalWindow window, final AbstractSubjectTO attributable) {\n+            this.window = window;\n+            this.subject = attributable;\n+        }\n+\n+        public ResultStatusModalPage.Builder mode(final Mode mode) {\n+            this.mode = mode;\n+            return this;\n+        }\n+\n+        public ResultStatusModalPage build() {\n+            return new ResultStatusModalPage(this);\n+        }\n+    }\n+\n+    private ResultStatusModalPage(final Builder builder) {\n+        super();\n+        this.subject = builder.subject;\n+        statusUtils = new StatusUtils(this.userRestClient);\n+        if (builder.mode == null) {\n+            this.mode = Mode.ADMIN;\n+        } else {\n+            this.mode = builder.mode;\n+        }\n+\n+        final BaseModalPage page = this;\n+\n+        final WebMarkupContainer container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n+        final Fragment fragment = new Fragment(\"resultFrag\", mode == Mode.SELF\n+                ? \"userSelfResultFrag\"\n+                : \"propagationResultFrag\", this);\n+        fragment.setOutputMarkupId(true);\n+        container.add(fragment);\n+\n+        if (mode == Mode.ADMIN) {\n+            // add Syncope propagation status\n+            PropagationStatus syncope = new PropagationStatus();\n+            syncope.setResource(\"Syncope\");\n+            syncope.setStatus(PropagationTaskExecStatus.SUCCESS);\n+\n+            List<PropagationStatus> propagations = new ArrayList<PropagationStatus>();\n+            propagations.add(syncope);\n+            propagations.addAll(subject.getPropagationStatusTOs());\n+\n+            fragment.add(new Label(\"info\",\n+                    ((subject instanceof UserTO) && ((UserTO) subject).getUsername() != null)\n+                            ? ((UserTO) subject).getUsername()\n+                            : ((subject instanceof RoleTO) && ((RoleTO) subject).getName() != null)\n+                                    ? ((RoleTO) subject).getName()\n+                                    : String.valueOf(subject.getKey())));\n+\n+            final ListView<PropagationStatus> propRes = new ListView<PropagationStatus>(\"resources\",\n+                    propagations) {\n+\n+                        private static final long serialVersionUID = -1020475259727720708L;\n+\n+                        @Override\n+                        protected void populateItem(final ListItem<PropagationStatus> item) {\n+                            final PropagationStatus propTO = (PropagationStatus) item.getDefaultModelObject();\n+\n+                            final ListView attributes = getConnObjectView(propTO);\n+\n+                            final Fragment attrhead;\n+                            if (attributes.getModelObject() == null || attributes.getModelObject().isEmpty()) {\n+                                attrhead = new Fragment(\"attrhead\", \"emptyAttrHeadFrag\", page);\n+                            } else {\n+                                attrhead = new Fragment(\"attrhead\", \"attrHeadFrag\", page);\n+                            }\n+\n+                            item.add(attrhead);\n+                            item.add(attributes);\n+\n+                            attrhead.add(new Label(\"resource\", propTO.getResource()));\n+\n+                            attrhead.add(new Label(\"propagation\", propTO.getStatus() == null\n+                                                    ? \"UNDEFINED\" : propTO.getStatus().toString()));\n+\n+                            final Image image;\n+                            final String alt, title;\n+                            final ModalWindow failureWindow = new ModalWindow(\"failureWindow\");\n+                            final AjaxLink<?> failureWindowLink = new AjaxLink<Void>(\"showFailureWindow\") {\n+\n+                                private static final long serialVersionUID = -7978723352517770644L;\n+\n+                                @Override\n+                                public void onClick(AjaxRequestTarget target) {\n+                                    failureWindow.show(target);\n+                                }\n+                            };\n+\n+                            switch (propTO.getStatus()) {\n+\n+                                case SUCCESS:\n+                                case SUBMITTED:\n+                                case CREATED:\n+                                    image = new Image(\"icon\", IMG_STATUSES + Status.ACTIVE.toString()\n+                                            + Constants.PNG_EXT);\n+                                    alt = \"success icon\";\n+                                    title = \"success\";\n+                                    failureWindow.setVisible(false);\n+                                    failureWindowLink.setEnabled(false);\n+                                    break;\n+\n+                                default:\n+                                    image = new Image(\"icon\", IMG_STATUSES + Status.SUSPENDED.toString()\n+                                            + Constants.PNG_EXT);\n+                                    alt = \"failure icon\";\n+                                    title = \"failure\";\n+                            }\n+\n+                            image.add(new Behavior() {\n+\n+                                private static final long serialVersionUID = 1469628524240283489L;\n+\n+                                @Override\n+                                public void onComponentTag(final Component component, final ComponentTag tag) {\n+                                    tag.put(\"alt\", alt);\n+                                    tag.put(\"title\", title);\n+                                }\n+                            });\n+                            final FailureMessageModalPage executionFailureMessagePage;\n+                            if (propTO.getFailureReason() == null) {\n+                                executionFailureMessagePage =\n+                                new FailureMessageModalPage(failureWindow.getContentId(), StringUtils.EMPTY);\n+                            } else {\n+                                executionFailureMessagePage =\n+                                new FailureMessageModalPage(failureWindow.getContentId(), propTO.getFailureReason());\n+                            }\n+\n+                            failureWindow.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                                private static final long serialVersionUID = -7834632442532690940L;\n+\n+                                @Override\n+                                public Page createPage() {\n+                                    return executionFailureMessagePage;\n+                                }\n+                            });\n+                            failureWindow.setCookieName(\"failureWindow\");\n+                            failureWindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+                            failureWindowLink.add(image);\n+                            attrhead.add(failureWindowLink);\n+                            attrhead.add(failureWindow);\n+                        }\n+                    };\n+            fragment.add(propRes);\n+        }\n+\n+        final AjaxLink<Void> close = new IndicatingAjaxLink<Void>(\"close\") {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                builder.window.close(target);\n+            }\n+        };\n+        container.add(close);\n+\n+        setOutputMarkupId(true);\n+    }\n+\n+    /**\n+     * Get remote attributes list view.\n+     *\n+     * @param propTO propagation TO.\n+     * @return list view.\n+     */\n+    private ListView<String> getConnObjectView(final PropagationStatus propTO) {\n+        final ConnObjectTO before = propTO.getBeforeObj();\n+        final ConnObjectTO after = propTO.getAfterObj();\n+\n+        // sorted in reversed presentation order\n+        final List<String> head = new ArrayList<String>();\n+        if (subject instanceof UserTO) {\n+            head.add(ConnIdSpecialAttributeName.PASSWORD);\n+            head.add(ConnIdSpecialAttributeName.ENABLE);\n+        }\n+        head.add(ConnIdSpecialAttributeName.UID);\n+        head.add(ConnIdSpecialAttributeName.NAME);\n+\n+        final Map<String, AttrTO> beforeAttrMap = before == null\n+                ? Collections.<String, AttrTO>emptyMap()\n+                : before.getPlainAttrMap();\n+\n+        final Map<String, AttrTO> afterAttrMap = after == null\n+                ? Collections.<String, AttrTO>emptyMap()\n+                : after.getPlainAttrMap();\n+\n+        final Set<String> attributes = new HashSet<String>();\n+        attributes.addAll(beforeAttrMap.keySet());\n+        attributes.addAll(afterAttrMap.keySet());\n+\n+        if (!(subject instanceof UserTO)) {\n+            attributes.remove(ConnIdSpecialAttributeName.PASSWORD);\n+            attributes.remove(ConnIdSpecialAttributeName.ENABLE);\n+        }\n+\n+        final List<String> profile = new ArrayList<String>();\n+        profile.addAll(attributes);\n+        profile.removeAll(head);\n+        Collections.sort(profile);\n+\n+        for (String attr : head) {\n+            if (attributes.contains(attr)) {\n+                profile.add(0, attr);\n+            }\n+        }\n+\n+        return new ListView<String>(\"attrs\", profile) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                String name = item.getModelObject();\n+\n+                final Fragment beforeValue;\n+                final Fragment afterValue;\n+                if (ConnIdSpecialAttributeName.ENABLE.equals(name)) {\n+                    beforeValue = getStatusIcon(\"beforeValue\", propTO.getResource(), before);\n+                    afterValue = getStatusIcon(\"afterValue\", propTO.getResource(), after);\n+                } else {\n+                    beforeValue = getLabelValue(\"beforeValue\", name, beforeAttrMap);\n+                    afterValue = getLabelValue(\"afterValue\", name, afterAttrMap);\n+                }\n+\n+                item.add(new Label(\"attrName\", new ResourceModel(name, name)));\n+\n+                item.add(beforeValue);\n+                item.add(afterValue);\n+            }\n+        };\n+    }\n+\n+    /**\n+     * Get fragment for attribute value (not remote status).\n+     *\n+     * @param id component id to be replaced with the fragment content.\n+     * @param attrName remote attribute name\n+     * @param attrMap remote attributes map.\n+     * @return fragment.\n+     */\n+    private Fragment getLabelValue(final String id, final String attrName, final Map<String, AttrTO> attrMap) {\n+        final String value;\n+\n+        final AttrTO attr = attrMap.get(attrName);\n+\n+        if (attr == null || attr.getValues() == null || attr.getValues().isEmpty()) {\n+            value = \"\";\n+        } else {\n+            if (ConnIdSpecialAttributeName.PASSWORD.equals(attrName)) {\n+                value = \"********\";\n+            } else {\n+                value = attr.getValues().size() > 1\n+                        ? attr.getValues().toString()\n+                        : attr.getValues().get(0);\n+            }\n+        }\n+\n+        Component label = new Label(\"value\", value.length() > 50 ? value.substring(0, 50) + \"...\" : value).\n+                add(new Behavior() {\n+\n+                    private static final long serialVersionUID = 1469628524240283489L;\n+\n+                    @Override\n+                    public void onComponentTag(final Component component, final ComponentTag tag) {\n+                        tag.put(\"title\", value);\n+                    }\n+                });\n+\n+        final Fragment frag = new Fragment(id, \"attrValueFrag\", this);\n+        frag.add(label);\n+\n+        return frag;\n+    }\n+\n+    /**\n+     * Get fragment for user status icon.\n+     *\n+     * @param id component id to be replaced with the fragment content\n+     * @param resourceName resource name\n+     * @param objectTO connector object TO\n+     * @return fragment.\n+     */\n+    private Fragment getStatusIcon(final String id, final String resourceName, final ConnObjectTO objectTO) {\n+        final Image image;\n+        final String alt, title;\n+        switch (statusUtils.getStatusBean(\n+                subject, resourceName, objectTO, this.subject instanceof RoleTO).getStatus()) {\n+\n+            case ACTIVE:\n+                image = new Image(\"status\", IMG_STATUSES + Status.ACTIVE.toString()\n+                        + Constants.PNG_EXT);\n+                alt = \"active icon\";\n+                title = \"Enabled\";\n+                break;\n+\n+            case SUSPENDED:\n+                image = new Image(\"status\", IMG_STATUSES + Status.SUSPENDED.toString()\n+                        + Constants.PNG_EXT);\n+                alt = \"inactive icon\";\n+                title = \"Disabled\";\n+                break;\n+\n+            default:\n+                image = null;\n+                alt = null;\n+                title = null;\n+        }\n+\n+        final Fragment frag;\n+        if (image == null) {\n+            frag = new Fragment(id, \"emptyFrag\", this);\n+        } else {\n+            image.add(new Behavior() {\n+\n+                private static final long serialVersionUID = 1469628524240283489L;\n+\n+                @Override\n+                public void onComponentTag(final Component component, final ComponentTag tag) {\n+                    tag.put(\"alt\", alt);\n+                    tag.put(\"title\", title);\n+                    tag.put(\"width\", \"12px\");\n+                    tag.put(\"height\", \"12px\");\n+                }\n+            });\n+\n+            frag = new Fragment(id, \"remoteStatusFrag\", this);\n+            frag.add(image);\n+        }\n+\n+        return frag;\n+    }\n+}"},{"sha":"3cb9148d9b193e24474e494bda6743521e6ac543","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/RoleModalPage.java","status":"added","additions":162,"deletions":0,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,162 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.panels.RolePanel;\n+import org.apache.syncope.common.lib.AttributableOperations;\n+import org.apache.syncope.common.lib.mod.RoleMod;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+/**\n+ * Modal window with Role form.\n+ */\n+public class RoleModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -1732493223434085205L;\n+\n+    protected final PageReference pageRef;\n+\n+    protected final ModalWindow window;\n+\n+    protected final Mode mode;\n+\n+    protected final boolean createFlag;\n+\n+    protected final RolePanel rolePanel;\n+\n+    protected RoleTO originalRoleTO;\n+\n+    public RoleModalPage(final PageReference pageRef, final ModalWindow window, final RoleTO roleTO) {\n+        this(pageRef, window, roleTO, Mode.ADMIN);\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    public RoleModalPage(final PageReference pageRef, final ModalWindow window, final RoleTO roleTO, final Mode mode) {\n+        super();\n+\n+        this.pageRef = pageRef;\n+        this.window = window;\n+        this.mode = mode;\n+\n+        this.createFlag = roleTO.getKey() == 0;\n+        if (!createFlag) {\n+            originalRoleTO = SerializationUtils.clone(roleTO);\n+        }\n+\n+        final Form<RoleTO> form = new Form<RoleTO>(\"roleForm\");\n+        form.setMultiPart(true);\n+\n+        add(new Label(\"displayName\", roleTO.getKey() == 0 ? \"\" : roleTO.getDisplayName()));\n+\n+        form.setModel(new CompoundPropertyModel<RoleTO>(roleTO));\n+\n+        this.rolePanel = new RolePanel.Builder(\"rolePanel\").form(form).roleTO(roleTO).\n+                roleModalPageMode(mode).pageRef(getPageReference()).build();\n+        form.add(rolePanel);\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(SUBMIT, new ResourceModel(SUBMIT)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    submitAction(target, form);\n+\n+                    if (pageRef.getPage() instanceof BasePage) {\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                    }\n+\n+                    closeAction(target, form);\n+                } catch (Exception e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                closeAction(target, form);\n+            }\n+        };\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, xmlRolesReader.getEntitlement(\"Roles\",\n+                createFlag\n+                        ? \"create\"\n+                        : \"update\"));\n+\n+        add(form);\n+    }\n+\n+    protected void submitAction(final AjaxRequestTarget target, final Form<?> form) {\n+        final RoleTO roleTO = (RoleTO) form.getDefaultModelObject();\n+        final List<String> entitlementList = new ArrayList<String>(rolePanel.getSelectedEntitlements());\n+        roleTO.getEntitlements().clear();\n+        roleTO.getEntitlements().addAll(entitlementList);\n+\n+        RoleTO result;\n+        if (createFlag) {\n+            result = roleRestClient.create(roleTO);\n+        } else {\n+            RoleMod roleMod = AttributableOperations.diff(roleTO, originalRoleTO);\n+\n+            // update role just if it is changed\n+            if (roleMod.isEmpty()) {\n+                result = roleTO;\n+            } else {\n+                result = roleRestClient.update(originalRoleTO.getETagValue(), roleMod);\n+            }\n+        }\n+\n+        setResponsePage(new ResultStatusModalPage.Builder(window, result).build());\n+    }\n+\n+    protected void closeAction(final AjaxRequestTarget target, final Form<?> form) {\n+        window.close(target);\n+    }\n+}"},{"sha":"26b1aeacc7e4c614236c8f8a72974b561691babd","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/RoleSelectModalPage.java","status":"added","additions":105,"deletions":0,"changes":105,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleSelectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleSelectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleSelectModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,105 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.lang.reflect.Constructor;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import org.apache.syncope.client.console.commons.RoleTreeBuilder;\n+import org.apache.syncope.client.console.wicket.markup.html.tree.DefaultMutableTreeNodeExpansion;\n+import org.apache.syncope.client.console.wicket.markup.html.tree.DefaultMutableTreeNodeExpansionModel;\n+import org.apache.syncope.client.console.wicket.markup.html.tree.TreeRoleProvider;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.DefaultNestedTree;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.ITreeProvider;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.NestedTree;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.content.Folder;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.theme.WindowsTheme;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class RoleSelectModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 2106489458494696439L;\n+\n+    @SpringBean\n+    private RoleTreeBuilder roleTreeBuilder;\n+\n+    private final NestedTree<DefaultMutableTreeNode> tree;\n+\n+    public RoleSelectModalPage(final PageReference pageRef, final ModalWindow window, final Class<?> payloadClass) {\n+        super();\n+\n+        final ITreeProvider<DefaultMutableTreeNode> treeProvider = new TreeRoleProvider(roleTreeBuilder, true);\n+        final DefaultMutableTreeNodeExpansionModel treeModel = new DefaultMutableTreeNodeExpansionModel();\n+\n+        tree = new DefaultNestedTree<DefaultMutableTreeNode>(\"treeTable\", treeProvider, treeModel) {\n+\n+            private static final long serialVersionUID = 7137658050662575546L;\n+\n+            @Override\n+            protected Component newContentComponent(final String id, final IModel<DefaultMutableTreeNode> node) {\n+                final DefaultMutableTreeNode treeNode = node.getObject();\n+                final RoleTO roleTO = (RoleTO) treeNode.getUserObject();\n+\n+                return new Folder<DefaultMutableTreeNode>(id, RoleSelectModalPage.this.tree, node) {\n+\n+                    private static final long serialVersionUID = 9046323319920426493L;\n+\n+                    @Override\n+                    protected boolean isClickable() {\n+                        return true;\n+                    }\n+\n+                    @Override\n+                    protected IModel<?> newLabelModel(final IModel<DefaultMutableTreeNode> model) {\n+                        return new Model<>(roleTO.getDisplayName());\n+                    }\n+\n+                    @Override\n+                    protected void onClick(final AjaxRequestTarget target) {\n+                        super.onClick(target);\n+\n+                        try {\n+                            Constructor<?> constructor = payloadClass.getConstructor(Long.class);\n+                            Object payload = constructor.newInstance(roleTO.getKey());\n+\n+                            send(pageRef.getPage(), Broadcast.BREADTH, payload);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Could not send role select event\", e);\n+                        }\n+\n+                        window.close(target);\n+                    }\n+                };\n+            }\n+        };\n+        tree.add(new WindowsTheme());\n+        tree.setOutputMarkupId(true);\n+\n+        DefaultMutableTreeNodeExpansion.get().expandAll();\n+\n+        this.add(tree);\n+    }\n+}"},{"sha":"66395172e42671ffb4d2a2a4bc61cc9e63b62d11","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/RoleTemplateModalPage.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleTemplateModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleTemplateModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoleTemplateModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,50 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+\n+public class RoleTemplateModalPage extends RoleModalPage {\n+\n+    private static final long serialVersionUID = -3849135555203409845L;\n+\n+    private final SyncTaskTO syncTaskTO;\n+\n+    public RoleTemplateModalPage(final PageReference callerPageRef, final ModalWindow window,\n+            final SyncTaskTO syncTaskTO) {\n+\n+        super(callerPageRef, window, syncTaskTO.getRoleTemplate() == null\n+                ? new RoleTO()\n+                : syncTaskTO.getRoleTemplate(), Mode.TEMPLATE);\n+\n+        this.syncTaskTO = syncTaskTO;\n+    }\n+\n+    @Override\n+    protected void submitAction(final AjaxRequestTarget target, final Form form) {\n+        syncTaskTO.setRoleTemplate((RoleTO) form.getModelObject());\n+        taskRestClient.updateSyncTask(syncTaskTO);\n+    }\n+}"},{"sha":"8310792b0c4caaaddf66aa7adccaec0f5be77d57","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Roles.java","status":"added","additions":186,"deletions":0,"changes":186,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoles.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoles.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FRoles.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,186 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.AbstractSearchResultPanel;\n+import org.apache.syncope.client.console.panels.RoleSearchPanel;\n+import org.apache.syncope.client.console.panels.RoleSearchResultPanel;\n+import org.apache.syncope.client.console.panels.RoleSummaryPanel;\n+import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.client.console.wicket.markup.html.tree.TreeRolePanel;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Roles WebPage.\n+ */\n+public class Roles extends BasePage {\n+\n+    private static final long serialVersionUID = -2147758241610831969L;\n+\n+    private static final int WIN_HEIGHT = 500;\n+\n+    private static final int WIN_WIDTH = 800;\n+\n+    @SpringBean\n+    private RoleRestClient restClient;\n+\n+    private final ModalWindow editRoleWin;\n+\n+    private final WebMarkupContainer roleTabsContainer;\n+\n+    public Roles(final PageParameters parameters) {\n+        super(parameters);\n+\n+        roleTabsContainer = new WebMarkupContainer(\"roleTabsContainer\");\n+        roleTabsContainer.setOutputMarkupId(true);\n+        add(roleTabsContainer);\n+\n+        editRoleWin = new ModalWindow(\"editRoleWin\");\n+        editRoleWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editRoleWin.setInitialHeight(WIN_HEIGHT);\n+        editRoleWin.setInitialWidth(WIN_WIDTH);\n+        editRoleWin.setCookieName(\"edit-role-modal\");\n+        add(editRoleWin);\n+\n+        final TreeRolePanel treePanel = new TreeRolePanel(\"treePanel\");\n+        treePanel.setOutputMarkupId(true);\n+        roleTabsContainer.add(treePanel);\n+\n+        final RoleSummaryPanel summaryPanel = new RoleSummaryPanel.Builder(\"summaryPanel\")\n+                .window(editRoleWin).callerPageRef(Roles.this.getPageReference()).build();\n+        roleTabsContainer.add(summaryPanel);\n+\n+        editRoleWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                final RoleSummaryPanel summaryPanel = (RoleSummaryPanel) roleTabsContainer.get(\"summaryPanel\");\n+\n+                final TreeNodeClickUpdate data = new TreeNodeClickUpdate(target,\n+                        summaryPanel == null || summaryPanel.getSelectedNode() == null\n+                        ? 0\n+                        : summaryPanel.getSelectedNode().getKey());\n+\n+                send(getPage(), Broadcast.BREADTH, data);\n+\n+                if (modalResult) {\n+                    getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n+                    feedbackPanel.refresh(target);\n+                    modalResult = false;\n+                }\n+\n+            }\n+        });\n+\n+        final AbstractSearchResultPanel searchResult =\n+                new RoleSearchResultPanel(\"searchResult\", true, null, getPageReference(), restClient);\n+        add(searchResult);\n+\n+        final Form searchForm = new Form(\"searchForm\");\n+        add(searchForm);\n+\n+        final RoleSearchPanel searchPanel = new RoleSearchPanel.Builder(\"searchPanel\").build();\n+        searchForm.add(searchPanel);\n+\n+        searchForm.add(new ClearIndicatingAjaxButton(\"search\", new ResourceModel(\"search\"), getPageReference()) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                final String fiql = searchPanel.buildFIQL();\n+                LOG.debug(\"Node condition {}\", fiql);\n+\n+                doSearch(target, fiql, searchResult);\n+\n+                Session.get().getFeedbackMessages().clear();\n+                searchPanel.getSearchFeedback().refresh(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                searchPanel.getSearchFeedback().refresh(target);\n+            }\n+        });\n+    }\n+\n+    private void doSearch(final AjaxRequestTarget target, final String fiql,\n+            final AbstractSearchResultPanel resultsetPanel) {\n+\n+        if (fiql == null) {\n+            error(getString(Constants.SEARCH_ERROR));\n+            return;\n+        }\n+\n+        resultsetPanel.search(fiql, target);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        super.onEvent(event);\n+\n+        if (event.getPayload() instanceof TreeNodeClickUpdate) {\n+            final TreeNodeClickUpdate update = (TreeNodeClickUpdate) event.getPayload();\n+\n+            final RoleSummaryPanel summaryPanel = new RoleSummaryPanel.Builder(\"summaryPanel\")\n+                    .window(editRoleWin).callerPageRef(Roles.this.getPageReference())\n+                    .selectedNodeId(update.getSelectedNodeId()).build();\n+\n+            roleTabsContainer.addOrReplace(summaryPanel);\n+            update.getTarget().add(roleTabsContainer);\n+        }\n+    }\n+\n+    public static class TreeNodeClickUpdate {\n+\n+        private final AjaxRequestTarget target;\n+\n+        private Long selectedNodeId;\n+\n+        public TreeNodeClickUpdate(final AjaxRequestTarget target, final Long selectedNodeId) {\n+            this.target = target;\n+            this.selectedNodeId = selectedNodeId;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public Long getSelectedNodeId() {\n+            return selectedNodeId;\n+        }\n+\n+        public void setSelectedNodeId(final Long selectedNodeId) {\n+            this.selectedNodeId = selectedNodeId;\n+        }\n+    }\n+}"},{"sha":"622271704391a8463f410ba2e10f3f900157a3ad","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/SchedTaskModalPage.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchedTaskModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.PropertyModel;\n+\n+/**\n+ * Modal window with Task form (to stop and start execution).\n+ */\n+public class SchedTaskModalPage extends AbstractSchedTaskModalPage {\n+\n+    private static final long serialVersionUID = -2501860242590060867L;\n+\n+    public SchedTaskModalPage(final ModalWindow window, final SchedTaskTO taskTO, final PageReference callerPageRef) {\n+\n+        super(window, taskTO, callerPageRef);\n+\n+        final IModel<List<String>> classNames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return taskRestClient.getJobClasses();\n+            }\n+        };\n+\n+        final AjaxDropDownChoicePanel<String> className = new AjaxDropDownChoicePanel<String>(\"jobClassName\",\n+                getString(\"class\"), new PropertyModel<String>(taskTO, \"jobClassName\"));\n+        className.setChoices(classNames.getObject());\n+        className.addRequiredLabel();\n+        className.setEnabled(taskTO.getKey() == 0);\n+        className.setStyleSheet(\"ui-widget-content ui-corner-all long_dynamicsize\");\n+        profile.add(className);\n+    }\n+\n+    @Override\n+    public void submitAction(final SchedTaskTO taskTO) {\n+        if (taskTO.getKey() > 0) {\n+            taskRestClient.updateSchedTask(taskTO);\n+        } else {\n+            taskRestClient.createSchedTask(taskTO);\n+        }\n+    }\n+}"},{"sha":"885286282a72a2e8ead79331be02c14e64bbcf0d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Schema.java","status":"added","additions":467,"deletions":0,"changes":467,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSchema.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,467 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.lang.reflect.Field;\n+import java.util.AbstractMap.SimpleEntry;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.client.console.commons.SchemaModalPageFactory;\n+import org.apache.syncope.client.console.commons.SelectChoiceRenderer;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.JQueryUITabbedPanel;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.springframework.beans.BeanWrapper;\n+import org.springframework.beans.BeanWrapperImpl;\n+import org.springframework.util.ReflectionUtils;\n+\n+/**\n+ * Schema WebPage.\n+ */\n+@SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+public class Schema extends BasePage {\n+\n+    private static final long serialVersionUID = 8091922398776299403L;\n+\n+    private static final Map<SchemaType, List<String>> COL_NAMES = new HashMap<SchemaType, List<String>>() {\n+\n+        private static final long serialVersionUID = 3109256773218160485L;\n+\n+        {\n+            put(SchemaType.PLAIN, Arrays.asList(new String[] { \"name\", \"type\",\n+                \"mandatoryCondition\", \"uniqueConstraint\", \"multivalue\", \"readonly\" }));\n+            put(SchemaType.DERIVED, Arrays.asList(new String[] { \"name\", \"expression\" }));\n+            put(SchemaType.VIRTUAL, Arrays.asList(new String[] { \"name\", \"readonly\" }));\n+        }\n+    };\n+\n+    private static final Map<Map.Entry<AttributableType, SchemaType>, String> PAGINATOR_ROWS_KEYS =\n+            new HashMap<Map.Entry<AttributableType, SchemaType>, String>() {\n+\n+                private static final long serialVersionUID = 3109256773218160485L;\n+\n+                {\n+                    put(new SimpleEntry<>(AttributableType.CONFIGURATION, SchemaType.PLAIN),\n+                            Constants.PREF_CONF_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.USER, SchemaType.PLAIN),\n+                            Constants.PREF_USER_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.USER, SchemaType.DERIVED),\n+                            Constants.PREF_USER_DER_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.USER, SchemaType.VIRTUAL),\n+                            Constants.PREF_USER_VIR_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.MEMBERSHIP, SchemaType.PLAIN),\n+                            Constants.PREF_MEMBERSHIP_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.MEMBERSHIP, SchemaType.DERIVED),\n+                            Constants.PREF_MEMBERSHIP_DER_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL),\n+                            Constants.PREF_MEMBERSHIP_VIR_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.ROLE, SchemaType.PLAIN),\n+                            Constants.PREF_ROLE_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.ROLE, SchemaType.DERIVED),\n+                            Constants.PREF_ROLE_DER_SCHEMA_PAGINATOR_ROWS);\n+                    put(new SimpleEntry<>(AttributableType.ROLE, SchemaType.VIRTUAL),\n+                            Constants.PREF_ROLE_VIR_SCHEMA_PAGINATOR_ROWS);\n+                }\n+            };\n+\n+    private static final int WIN_WIDTH = 600;\n+\n+    private static final int WIN_HEIGHT = 200;\n+\n+    private static final int PLAIN_WIN_HEIGHT = 500;\n+\n+    @SpringBean\n+    private SchemaRestClient restClient;\n+\n+    @SpringBean\n+    private PreferenceManager prefMan;\n+\n+    private final String allowedCreateRoles = xmlRolesReader.getEntitlement(\"Schema\", \"create\");\n+\n+    private final String allowedReadRoles = xmlRolesReader.getEntitlement(\"Schema\", \"read\");\n+\n+    private final String allowedDeleteRoles = xmlRolesReader.getEntitlement(\"Schema\", \"delete\");\n+\n+    public Schema() {\n+        super();\n+\n+        for (final AttributableType attrType : AttributableType.values()) {\n+            final String attrTypeAsString = attrType.name().toLowerCase();\n+\n+            List<ITab> tabs = new ArrayList<ITab>();\n+\n+            for (final SchemaType schemaType : SchemaType.values()) {\n+                if (attrType != AttributableType.CONFIGURATION || schemaType == SchemaType.PLAIN) {\n+                    final String schemaTypeAsString = schemaType.name().toLowerCase();\n+\n+                    tabs.add(new AbstractTab(new Model<String>(getString(schemaTypeAsString))) {\n+\n+                        private static final long serialVersionUID = -5861786415855103549L;\n+\n+                        @Override\n+                        public WebMarkupContainer getPanel(final String panelId) {\n+                            return new SchemaTypePanel(panelId, attrType, schemaType);\n+                        }\n+                    });\n+                }\n+            }\n+\n+            add(new JQueryUITabbedPanel(attrTypeAsString + \"Tabs\", tabs));\n+        }\n+    }\n+\n+    private <T extends AbstractSchemaModalPage> List<IColumn> getColumns(\n+            final WebMarkupContainer webContainer, final ModalWindow modalWindow,\n+            final AttributableType attributableType, final SchemaType schemaType,\n+            final Collection<String> fields) {\n+\n+        List<IColumn> columns = new ArrayList<IColumn>();\n+\n+        for (final String field : fields) {\n+            final Field clazzField = ReflectionUtils.findField(schemaType.getToClass(), field);\n+\n+            if (clazzField != null) {\n+                if (clazzField.getType().equals(Boolean.class) || clazzField.getType().equals(boolean.class)) {\n+                    columns.add(new AbstractColumn<AbstractSchemaTO, String>(new ResourceModel(field)) {\n+\n+                        private static final long serialVersionUID = 8263694778917279290L;\n+\n+                        @Override\n+                        public void populateItem(final Item<ICellPopulator<AbstractSchemaTO>> item,\n+                                final String componentId, final IModel<AbstractSchemaTO> model) {\n+\n+                            BeanWrapper bwi = new BeanWrapperImpl(model.getObject());\n+                            Object obj = bwi.getPropertyValue(field);\n+\n+                            item.add(new Label(componentId, \"\"));\n+                            item.add(new AttributeModifier(\"class\", new Model<String>(obj.toString())));\n+                        }\n+\n+                        @Override\n+                        public String getCssClass() {\n+                            return \"small_fixedsize\";\n+                        }\n+                    });\n+                } else {\n+                    IColumn column = new PropertyColumn(new ResourceModel(field), field, field) {\n+\n+                        private static final long serialVersionUID = 3282547854226892169L;\n+\n+                        @Override\n+                        public String getCssClass() {\n+                            String css = super.getCssClass();\n+                            if (\"name\".equals(field)) {\n+                                css = StringUtils.isBlank(css)\n+                                        ? \"medium_fixedsize\"\n+                                        : css + \" medium_fixedsize\";\n+                            }\n+                            return css;\n+                        }\n+                    };\n+                    columns.add(column);\n+                }\n+            }\n+        }\n+\n+        columns.add(new AbstractColumn<AbstractSchemaTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<AbstractSchemaTO>> item, final String componentId,\n+                    final IModel<AbstractSchemaTO> model) {\n+\n+                final AbstractSchemaTO schemaTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.addWithRoles(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        modalWindow.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                AbstractSchemaModalPage page = SchemaModalPageFactory.getSchemaModalPage(\n+                                        attributableType, schemaType);\n+\n+                                page.setSchemaModalPage(Schema.this.getPageReference(), modalWindow, schemaTO, false);\n+\n+                                return page;\n+                            }\n+                        });\n+\n+                        modalWindow.show(target);\n+                    }\n+                }, ActionType.EDIT, allowedReadRoles);\n+\n+                panel.addWithRoles(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+\n+                        switch (schemaType) {\n+                            case DERIVED:\n+                                restClient.deleteDerSchema(attributableType, schemaTO.getKey());\n+                                break;\n+\n+                            case VIRTUAL:\n+                                restClient.deleteVirSchema(attributableType, schemaTO.getKey());\n+                                break;\n+\n+                            default:\n+                                restClient.deleteSchema(attributableType, schemaTO.getKey());\n+                                break;\n+                        }\n+\n+                        info(getString(Constants.OPERATION_SUCCEEDED));\n+                        feedbackPanel.refresh(target);\n+\n+                        target.add(webContainer);\n+                    }\n+                }, ActionType.DELETE, allowedDeleteRoles);\n+\n+                item.add(panel);\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    private Form<Void> getPaginatorForm(final WebMarkupContainer webContainer,\n+            final AjaxFallbackDefaultDataTable dataTable,\n+            final String formname, final SchemaTypePanel schemaTypePanel, final String rowsPerPagePrefName) {\n+\n+        Form<Void> form = new Form<Void>(formname);\n+\n+        final DropDownChoice<Integer> rowChooser = new DropDownChoice<Integer>(\"rowsChooser\",\n+                new PropertyModel<Integer>(schemaTypePanel, \"pageRows\"), prefMan.getPaginatorChoices(),\n+                new SelectChoiceRenderer<Integer>());\n+\n+        rowChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getRequest(), getResponse(), rowsPerPagePrefName, rowChooser.getInput());\n+                dataTable.setItemsPerPage(rowChooser.getModelObject());\n+\n+                target.add(webContainer);\n+            }\n+        });\n+\n+        form.add(rowChooser);\n+\n+        return form;\n+    }\n+\n+    private <T extends AbstractSchemaModalPage> AjaxLink<Void> getCreateSchemaLink(final ModalWindow modalWindow,\n+            final AttributableType attrType, final SchemaType schemaType, final String winLinkName) {\n+\n+        AjaxLink<Void> link = new ClearIndicatingAjaxLink<Void>(winLinkName, getPageReference()) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                modalWindow.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        T page = SchemaModalPageFactory.getSchemaModalPage(attrType, schemaType);\n+                        page.setSchemaModalPage(Schema.this.getPageReference(), modalWindow, null, true);\n+\n+                        return page;\n+                    }\n+                });\n+\n+                modalWindow.show(target);\n+            }\n+        };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(link, ENABLE, allowedCreateRoles);\n+\n+        return link;\n+\n+    }\n+\n+    private class SchemaProvider extends SortableDataProvider<AbstractSchemaTO, String> {\n+\n+        private static final long serialVersionUID = -185944053385660794L;\n+\n+        private final SortableDataProviderComparator<AbstractSchemaTO> comparator;\n+\n+        private final AttributableType attrType;\n+\n+        private final SchemaType schemaType;\n+\n+        public SchemaProvider(final AttributableType attrType, final SchemaType schemaType) {\n+            super();\n+\n+            this.attrType = attrType;\n+            this.schemaType = schemaType;\n+\n+            // Default sorting\n+            setSort(\"name\", SortOrder.ASCENDING);\n+\n+            comparator = new SortableDataProviderComparator<AbstractSchemaTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<AbstractSchemaTO> iterator(final long first, final long count) {\n+            @SuppressWarnings(\"unchecked\")\n+            List<AbstractSchemaTO> list =\n+                    (List<AbstractSchemaTO>) restClient.getSchemas(this.attrType, this.schemaType);\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return restClient.getSchemas(this.attrType, this.schemaType).size();\n+        }\n+\n+        @Override\n+        public IModel<AbstractSchemaTO> model(final AbstractSchemaTO object) {\n+            return new CompoundPropertyModel<AbstractSchemaTO>(object);\n+        }\n+    }\n+\n+    private class SchemaTypePanel extends Panel {\n+\n+        private static final long serialVersionUID = 2854050613688773575L;\n+\n+        private int pageRows;\n+\n+        private final AttributableType attrType;\n+\n+        private final SchemaType schemaType;\n+\n+        public SchemaTypePanel(final String id, final AttributableType attrType, final SchemaType schemaType) {\n+            super(id);\n+\n+            this.attrType = attrType;\n+            this.schemaType = schemaType;\n+\n+            setup();\n+        }\n+\n+        private void setup() {\n+            ModalWindow editSchemaWin = new ModalWindow(\"editSchemaWin\");\n+            editSchemaWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+            editSchemaWin.setInitialWidth(WIN_WIDTH);\n+            if (schemaType == SchemaType.PLAIN) {\n+                editSchemaWin.setInitialHeight(PLAIN_WIN_HEIGHT);\n+            } else {\n+                editSchemaWin.setInitialHeight(WIN_HEIGHT);\n+            }\n+            editSchemaWin.setCookieName(\"editSchemaWin\");\n+            editSchemaWin.setMarkupId(\"editSchemaWin\");\n+            add(editSchemaWin);\n+\n+            WebMarkupContainer schemaWrapContainer = new WebMarkupContainer(\"schemaWrapContainer\");\n+            schemaWrapContainer.setOutputMarkupId(true);\n+            if (schemaType != SchemaType.VIRTUAL) {\n+                schemaWrapContainer.add(new AttributeModifier(\"style\", \"width:auto;\"));\n+            }\n+            add(schemaWrapContainer);\n+\n+            WebMarkupContainer schemaContainer = new WebMarkupContainer(\"schemaContainer\");\n+            schemaContainer.setOutputMarkupId(true);\n+            schemaWrapContainer.add(schemaContainer);\n+            setWindowClosedCallback(editSchemaWin, schemaContainer);\n+\n+            final String paginatorRowsKey = PAGINATOR_ROWS_KEYS.get(\n+                    new SimpleEntry<AttributableType, SchemaType>(attrType, schemaType));\n+            pageRows = prefMan.getPaginatorRows(getRequest(), paginatorRowsKey);\n+\n+            List<IColumn> tableCols = getColumns(schemaContainer, editSchemaWin, attrType,\n+                    schemaType, COL_NAMES.get(schemaType));\n+            final AjaxFallbackDefaultDataTable table = new AjaxFallbackDefaultDataTable(\"datatable\", tableCols,\n+                    new SchemaProvider(attrType, schemaType), pageRows);\n+            table.setOutputMarkupId(true);\n+            schemaContainer.add(table);\n+\n+            schemaWrapContainer.add(getPaginatorForm(schemaContainer, table, \"paginatorForm\", this, paginatorRowsKey));\n+\n+            add(getCreateSchemaLink(editSchemaWin, attrType, schemaType, \"createSchemaLink\"));\n+        }\n+    }\n+}"},{"sha":"12bfc2b8437513e2514b59ca0bbd978d77f88dd1","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/SecurityQuestionModalPage.java","status":"added","additions":111,"deletions":0,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSecurityQuestionModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSecurityQuestionModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSecurityQuestionModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,111 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.rest.SecurityQuestionRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.SecurityQuestionTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+class SecurityQuestionModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -6709838862698327502L;\n+\n+    @SpringBean\n+    private SecurityQuestionRestClient restClient;\n+\n+    public SecurityQuestionModalPage(final PageReference pageRef, final ModalWindow window,\n+            final SecurityQuestionTO securityQuestionTO, final boolean createFlag) {\n+\n+        final Form<SecurityQuestionTO> form =\n+                new Form<SecurityQuestionTO>(FORM, new CompoundPropertyModel<SecurityQuestionTO>(securityQuestionTO));\n+\n+        final AjaxTextFieldPanel contentFieldPanel =\n+                new AjaxTextFieldPanel(\"content\", \"content\", new PropertyModel<String>(securityQuestionTO, \"content\"));\n+        contentFieldPanel.setRequired(true);\n+        form.add(contentFieldPanel);\n+\n+        AjaxButton submit = new IndicatingAjaxButton(APPLY, new Model<String>(getString(SUBMIT))) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    if (createFlag) {\n+                        restClient.create(securityQuestionTO);\n+                    } else {\n+                        restClient.update(securityQuestionTO);\n+                    }\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+\n+                    Configuration callerPage = (Configuration) pageRef.getPage();\n+                    callerPage.setModalResult(true);\n+\n+                    window.close(target);\n+                } catch (SyncopeClientException scee) {\n+                    error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+\n+        String allowedRoles = createFlag\n+                ? xmlRolesReader.getEntitlement(\"SecurityQuestion\", \"create\")\n+                : xmlRolesReader.getEntitlement(\"SecurityQuestion\", \"update\");\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, allowedRoles);\n+\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        form.add(cancel);\n+\n+        add(form);\n+    }\n+}"},{"sha":"7580f642b69d2daaec668e826d1aae11c8afd560","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/StatusModalPage.java","status":"added","additions":641,"deletions":0,"changes":641,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FStatusModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,641 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.status.AbstractStatusBeanProvider;\n+import org.apache.syncope.client.console.commons.status.ConnObjectWrapper;\n+import org.apache.syncope.client.console.commons.status.Status;\n+import org.apache.syncope.client.console.commons.status.StatusBean;\n+import org.apache.syncope.client.console.commons.status.StatusUtils;\n+import org.apache.syncope.client.console.panels.ActionDataTablePanel;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.common.lib.to.AbstractSubjectTO;\n+import org.apache.syncope.common.lib.to.BulkActionResult;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ResourceAssociationActionType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.ComponentTag;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.PasswordTextField;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class StatusModalPage<T extends AbstractSubjectTO> extends AbstractStatusModalPage {\n+\n+    private static final long serialVersionUID = -9148734710505211261L;\n+\n+    private final AbstractSubjectTO subjectTO;\n+\n+    private int rowsPerPage = 10;\n+\n+    final StatusUtils statusUtils;\n+\n+    final boolean statusOnly;\n+\n+    // --------------------------------\n+    // password management fields ..\n+    // --------------------------------\n+    final ClearIndicatingAjaxButton cancel;\n+\n+    final WebMarkupContainer pwdMgt;\n+\n+    final Form<?> pwdMgtForm;\n+\n+    final AjaxCheckBoxPanel changepwd;\n+\n+    final PasswordTextField password;\n+\n+    final PasswordTextField confirm;\n+    // --------------------------------\n+\n+    final PageReference pageRef;\n+\n+    final ModalWindow window;\n+\n+    final ActionDataTablePanel<StatusBean, String> table;\n+\n+    final List<IColumn<StatusBean, String>> columns;\n+\n+    public StatusModalPage(\n+            final PageReference pageRef,\n+            final ModalWindow window,\n+            final AbstractSubjectTO attributableTO) {\n+\n+        this(pageRef, window, attributableTO, false);\n+    }\n+\n+    public StatusModalPage(\n+            final PageReference pageRef,\n+            final ModalWindow window,\n+            final AbstractSubjectTO subjectTO,\n+            final boolean statusOnly) {\n+\n+        super();\n+\n+        this.pageRef = pageRef;\n+        this.window = window;\n+        this.statusOnly = statusOnly;\n+        this.subjectTO = subjectTO;\n+\n+        statusUtils = new StatusUtils(subjectTO instanceof UserTO ? userRestClient : roleRestClient);\n+\n+        columns = new ArrayList<IColumn<StatusBean, String>>();\n+        columns.add(new AbstractColumn<StatusBean, String>(\n+                new StringResourceModel(\"resourceName\", this, null, \"Resource name\"), \"resourceName\") {\n+\n+                    private static final long serialVersionUID = 2054811145491901166L;\n+\n+                    @Override\n+                    public void populateItem(\n+                            final Item<ICellPopulator<StatusBean>> cellItem,\n+                            final String componentId,\n+                            final IModel<StatusBean> model) {\n+\n+                                cellItem.add(new Label(componentId, model.getObject().getResourceName()) {\n+\n+                                    private static final long serialVersionUID = 8432079838783825801L;\n+\n+                                    @Override\n+                                    protected void onComponentTag(final ComponentTag tag) {\n+                                        if (model.getObject().isLinked()) {\n+                                            super.onComponentTag(tag);\n+                                        } else {\n+                                            tag.put(\"style\", \"color: #DDDDDD\");\n+                                        }\n+                                    }\n+                                });\n+                            }\n+                });\n+\n+        columns.add(new PropertyColumn<StatusBean, String>(\n+                new StringResourceModel(\"accountLink\", this, null, \"Account link\"), \"accountLink\", \"accountLink\"));\n+\n+        columns.add(new AbstractColumn<StatusBean, String>(\n+                new StringResourceModel(\"status\", this, null, \"\")) {\n+\n+                    private static final long serialVersionUID = -3503023501954863131L;\n+\n+                    @Override\n+                    public String getCssClass() {\n+                        return \"action\";\n+                    }\n+\n+                    @Override\n+                    public void populateItem(\n+                            final Item<ICellPopulator<StatusBean>> cellItem,\n+                            final String componentId,\n+                            final IModel<StatusBean> model) {\n+\n+                                if (model.getObject().isLinked()) {\n+                                    cellItem.add(statusUtils.getStatusImagePanel(componentId, model.getObject().\n+                                                    getStatus()));\n+                                } else {\n+                                    cellItem.add(new Label(componentId, \"\"));\n+                                }\n+                            }\n+                });\n+\n+        table = new ActionDataTablePanel<StatusBean, String>(\n+                \"resourceDatatable\",\n+                columns,\n+                (ISortableDataProvider<StatusBean, String>) new AttributableStatusProvider(),\n+                rowsPerPage,\n+                pageRef) {\n+\n+                    private static final long serialVersionUID = 6510391461033818316L;\n+\n+                    @Override\n+                    public boolean isElementEnabled(final StatusBean element) {\n+                        return !statusOnly || element.getStatus() != Status.OBJECT_NOT_FOUND;\n+                    }\n+                };\n+        table.setOutputMarkupId(true);\n+\n+        final String pageId = subjectTO instanceof RoleTO ? \"Roles\" : \"Users\";\n+\n+        final Fragment pwdMgtFragment = new Fragment(\"pwdMgtFields\", \"pwdMgtFragment\", this);\n+        addOrReplace(pwdMgtFragment);\n+\n+        pwdMgt = new WebMarkupContainer(\"pwdMgt\");\n+        pwdMgtFragment.add(pwdMgt.setOutputMarkupId(true));\n+\n+        pwdMgtForm = new Form(\"pwdMgtForm\");\n+        pwdMgtForm.setVisible(false).setEnabled(false);\n+        pwdMgt.add(pwdMgtForm);\n+\n+        password = new PasswordTextField(\"password\", new Model<String>());\n+        pwdMgtForm.add(password.setRequired(false).setEnabled(false));\n+\n+        confirm = new PasswordTextField(\"confirm\", new Model<String>());\n+        pwdMgtForm.add(confirm.setRequired(false).setEnabled(false));\n+\n+        changepwd = new AjaxCheckBoxPanel(\"changepwd\", \"changepwd\", new Model<Boolean>(false));\n+        pwdMgtForm.add(changepwd.setModelObject(false));\n+        pwdMgtForm.add(new Label(\"changePwdLabel\", new ResourceModel(\"changePwdLabel\", \"Password propagation\")));\n+\n+        changepwd.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                password.setEnabled(changepwd.getModelObject());\n+                confirm.setEnabled(changepwd.getModelObject());\n+                target.add(pwdMgt);\n+            }\n+        });\n+\n+        cancel = new ClearIndicatingAjaxButton(\"cancel\", new ResourceModel(\"cancel\"), pageRef) {\n+\n+            private static final long serialVersionUID = -2341391430136818026L;\n+\n+            @Override\n+            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                // ignore\n+                window.close(target);\n+            }\n+        }.feedbackPanelAutomaticReload(false);\n+\n+        pwdMgtForm.add(cancel);\n+\n+        final ClearIndicatingAjaxButton goon =\n+                new ClearIndicatingAjaxButton(\"continue\", new ResourceModel(\"continue\"), pageRef) {\n+\n+                    private static final long serialVersionUID = -2341391430136818027L;\n+\n+                    @Override\n+                    protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                        // none\n+                    }\n+                };\n+\n+        pwdMgtForm.add(goon);\n+\n+        if (statusOnly) {\n+            table.addAction(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        userRestClient.reactivate(\n+                                subjectTO.getETagValue(),\n+                                subjectTO.getKey(),\n+                                new ArrayList<>(table.getModelObject()));\n+\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+\n+                        window.close(target);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error enabling resources\", e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }\n+            }, ActionLink.ActionType.REACTIVATE, pageId);\n+\n+            table.addAction(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        userRestClient.suspend(\n+                                subjectTO.getETagValue(),\n+                                subjectTO.getKey(),\n+                                new ArrayList<>(table.getModelObject()));\n+\n+                        if (pageRef.getPage() instanceof BasePage) {\n+                            ((BasePage) pageRef.getPage()).setModalResult(true);\n+                        }\n+\n+                        window.close(target);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error disabling resources\", e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }\n+            }, ActionLink.ActionType.SUSPEND, pageId);\n+        } else {\n+            table.addAction(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        if (subjectTO instanceof UserTO) {\n+                            userRestClient.unlink(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+                        } else {\n+                            roleRestClient.unlink(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+                        }\n+\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                        window.close(target);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error unlinking resources\", e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }\n+            }, ActionLink.ActionType.UNLINK, pageId);\n+\n+            table.addAction(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        if (subjectTO instanceof UserTO) {\n+                            userRestClient.link(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+                        } else {\n+                            roleRestClient.link(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+                        }\n+\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                        window.close(target);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error linking resources\", e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }\n+            }, ActionLink.ActionType.LINK, pageId);\n+\n+            table.addAction(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        BulkActionResult bulkActionResult;\n+                        if (subjectTO instanceof UserTO) {\n+                            bulkActionResult = userRestClient.deprovision(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+                        } else {\n+                            bulkActionResult = roleRestClient.deprovision(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+                        }\n+\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                        loadBulkActionResultPage(table.getModelObject(), bulkActionResult);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error de-provisioning user\", e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }\n+            }, ActionLink.ActionType.DEPROVISION, pageId);\n+\n+            table.addAction(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+\n+                    if (subjectTO instanceof UserTO) {\n+                        StatusModalPage.this.passwordManagement(\n+                                target, ResourceAssociationActionType.PROVISION, table.getModelObject());\n+                    } else {\n+                        try {\n+                            final BulkActionResult bulkActionResult = roleRestClient.provision(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+\n+                            ((BasePage) pageRef.getPage()).setModalResult(true);\n+                            loadBulkActionResultPage(table.getModelObject(), bulkActionResult);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Error provisioning user\", e);\n+                            error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                            feedbackPanel.refresh(target);\n+                        }\n+                    }\n+                }\n+            }.feedbackPanelAutomaticReload(!(subjectTO instanceof UserTO)), ActionLink.ActionType.PROVISION, pageId);\n+\n+            table.addAction(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    try {\n+                        final BulkActionResult bulkActionResult;\n+                        if (subjectTO instanceof UserTO) {\n+                            bulkActionResult = userRestClient.unassign(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+                        } else {\n+                            bulkActionResult = roleRestClient.unassign(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+                        }\n+\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                        loadBulkActionResultPage(table.getModelObject(), bulkActionResult);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error unassigning resources\", e);\n+                        error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                        feedbackPanel.refresh(target);\n+                    }\n+                }\n+            }, ActionLink.ActionType.UNASSIGN, pageId);\n+\n+            table.addAction(new ActionLink() {\n+\n+                private static final long serialVersionUID = -3722207913631435501L;\n+\n+                @Override\n+                public void onClick(final AjaxRequestTarget target) {\n+                    if (subjectTO instanceof UserTO) {\n+                        StatusModalPage.this.passwordManagement(\n+                                target, ResourceAssociationActionType.ASSIGN, table.getModelObject());\n+                    } else {\n+                        try {\n+                            final BulkActionResult bulkActionResult = roleRestClient.assign(\n+                                    subjectTO.getETagValue(),\n+                                    subjectTO.getKey(),\n+                                    new ArrayList<>(table.getModelObject()));\n+\n+                            ((BasePage) pageRef.getPage()).setModalResult(true);\n+                            loadBulkActionResultPage(table.getModelObject(), bulkActionResult);\n+                        } catch (Exception e) {\n+                            LOG.error(\"Error assigning resources\", e);\n+                            error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                            feedbackPanel.refresh(target);\n+                        }\n+                    }\n+                }\n+            }.feedbackPanelAutomaticReload(!(subjectTO instanceof UserTO)), ActionLink.ActionType.ASSIGN, pageId);\n+        }\n+\n+        table.addCancelButton(window);\n+        add(table);\n+    }\n+\n+    private class AttributableStatusProvider extends AbstractStatusBeanProvider {\n+\n+        private static final long serialVersionUID = 4586969457669796621L;\n+\n+        public AttributableStatusProvider() {\n+            super(statusOnly ? \"resourceName\" : \"accountLink\");\n+        }\n+\n+        @SuppressWarnings(\"unchecked\")\n+        @Override\n+        public List<StatusBean> getStatusBeans() {\n+            final List<String> resources = new ArrayList<>();\n+            for (ResourceTO resourceTO : resourceRestClient.getAll()) {\n+                resources.add(resourceTO.getKey());\n+            }\n+\n+            final List<ConnObjectWrapper> connObjects = statusUtils.getConnectorObjects(subjectTO);\n+\n+            final List<StatusBean> statusBeans = new ArrayList<StatusBean>(connObjects.size() + 1);\n+\n+            for (ConnObjectWrapper entry : connObjects) {\n+                final StatusBean statusBean = statusUtils.getStatusBean(\n+                        subjectTO,\n+                        entry.getResourceName(),\n+                        entry.getConnObjectTO(),\n+                        subjectTO instanceof RoleTO);\n+\n+                statusBeans.add(statusBean);\n+                resources.remove(entry.getResourceName());\n+            }\n+\n+            if (statusOnly) {\n+                final StatusBean syncope = new StatusBean(subjectTO, \"Syncope\");\n+\n+                syncope.setAccountLink(((UserTO) subjectTO).getUsername());\n+\n+                Status syncopeStatus = Status.UNDEFINED;\n+                if (((UserTO) subjectTO).getStatus() != null) {\n+                    try {\n+                        syncopeStatus = Status.valueOf(((UserTO) subjectTO).getStatus().toUpperCase());\n+                    } catch (IllegalArgumentException e) {\n+                        LOG.warn(\"Unexpected status found: {}\", ((UserTO) subjectTO).getStatus(), e);\n+                    }\n+                }\n+                syncope.setStatus(syncopeStatus);\n+\n+                statusBeans.add(syncope);\n+            } else {\n+                for (String resource : resources) {\n+                    final StatusBean statusBean = statusUtils.getStatusBean(\n+                            subjectTO,\n+                            resource,\n+                            null,\n+                            subjectTO instanceof RoleTO);\n+\n+                    statusBean.setLinked(false);\n+                    statusBeans.add(statusBean);\n+                }\n+            }\n+\n+            return statusBeans;\n+        }\n+    }\n+\n+    private void passwordManagement(\n+            final AjaxRequestTarget target,\n+            final ResourceAssociationActionType type,\n+            final Collection<StatusBean> selection) {\n+\n+        final ClearIndicatingAjaxButton goon =\n+                new ClearIndicatingAjaxButton(\"continue\", new ResourceModel(\"continue\", \"Continue\"), pageRef) {\n+\n+                    private static final long serialVersionUID = -2341391430136818027L;\n+\n+                    @Override\n+                    protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                        try {\n+                            if (StringUtils.isNotBlank(password.getModelObject())\n+                            && !password.getModelObject().equals(confirm.getModelObject())) {\n+                                throw new Exception(getString(\"passwordMismatch\"));\n+                            }\n+\n+                            final BulkActionResult bulkActionResult;\n+                            switch (type) {\n+                                case ASSIGN:\n+                                    bulkActionResult = userRestClient.assign(\n+                                            subjectTO.getETagValue(),\n+                                            subjectTO.getKey(),\n+                                            new ArrayList<>(selection),\n+                                            changepwd.getModelObject(),\n+                                            password.getModelObject());\n+                                    break;\n+                                case PROVISION:\n+                                    bulkActionResult = userRestClient.provision(\n+                                            subjectTO.getETagValue(),\n+                                            subjectTO.getKey(),\n+                                            new ArrayList<>(selection),\n+                                            changepwd.getModelObject(),\n+                                            password.getModelObject());\n+                                    break;\n+                                default:\n+                                    bulkActionResult = null;\n+                                // ignore\n+                            }\n+\n+                            ((BasePage) pageRef.getPage()).setModalResult(true);\n+\n+                            if (bulkActionResult != null) {\n+                                loadBulkActionResultPage(selection, bulkActionResult);\n+                            } else {\n+\n+                                target.add(((BasePage) pageRef.getPage()).getFeedbackPanel());\n+                                window.close(target);\n+                            }\n+                        } catch (Exception e) {\n+                            LOG.error(\"Error provisioning resources\", e);\n+                            error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                            feedbackPanel.refresh(target);\n+                        }\n+                    }\n+                }.feedbackPanelAutomaticReload(false);\n+\n+        pwdMgtForm.addOrReplace(goon);\n+\n+        table.setVisible(false);\n+        pwdMgtForm.setVisible(true).setEnabled(true);\n+\n+        target.add(table);\n+        target.add(pwdMgt);\n+    }\n+\n+    private void loadBulkActionResultPage(\n+            final Collection<StatusBean> selection, final BulkActionResult bulkActionResult) {\n+        final List<String> resources = new ArrayList<String>(selection.size());\n+        for (StatusBean statusBean : selection) {\n+            resources.add(statusBean.getResourceName());\n+        }\n+\n+        final List<ConnObjectWrapper> connObjects =\n+                statusUtils.getConnectorObjects(Collections.singletonList(subjectTO), resources);\n+\n+        final List<StatusBean> statusBeans = new ArrayList<StatusBean>(connObjects.size());\n+\n+        for (ConnObjectWrapper entry : connObjects) {\n+            final StatusBean statusBean = statusUtils.getStatusBean(\n+                    subjectTO,\n+                    entry.getResourceName(),\n+                    entry.getConnObjectTO(),\n+                    subjectTO instanceof RoleTO);\n+\n+            statusBeans.add(statusBean);\n+        }\n+\n+        setResponsePage(new BulkActionResultModalPage<StatusBean, String>(\n+                window,\n+                statusBeans,\n+                columns,\n+                bulkActionResult,\n+                \"resourceName\"));\n+    }\n+}"},{"sha":"544f6704119245aba3b4a46d2c95f2c923c43408","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/SyncTaskModalPage.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSyncTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSyncTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FSyncTaskModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.types.MatchingRule;\n+import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.model.PropertyModel;\n+\n+/**\n+ * Modal window with Sync Task form.\n+ */\n+public class SyncTaskModalPage extends AbstractSyncTaskModalPage {\n+\n+    private static final long serialVersionUID = 2148403203517274669L;\n+\n+    public SyncTaskModalPage(final ModalWindow window, final SyncTaskTO taskTO, final PageReference pageRef) {\n+\n+        super(window, taskTO, pageRef);\n+\n+        // set default Matching rule\n+        ((DropDownChoice) matchingRule.getField()).setDefaultModelObject(taskTO.getMatchingRule() == null\n+                ? MatchingRule.UPDATE\n+                : taskTO.getMatchingRule());\n+        profile.add(matchingRule);\n+\n+        // set default Unmatching rule\n+        ((DropDownChoice) unmatchingRule.getField()).setDefaultModelObject(taskTO.getUnmatchingRule() == null\n+                ? UnmatchingRule.PROVISION\n+                : taskTO.getUnmatchingRule());\n+        profile.add(unmatchingRule);\n+\n+        final AjaxCheckBoxPanel fullReconciliation = new AjaxCheckBoxPanel(\"fullReconciliation\",\n+                getString(\"fullReconciliation\"), new PropertyModel<Boolean>(taskTO, \"fullReconciliation\"));\n+        profile.add(fullReconciliation);\n+    }\n+\n+    @Override\n+    protected List<String> getSyncActions() {\n+        return taskRestClient.getSyncActionsClasses();\n+    }\n+\n+    @Override\n+    public void submitAction(final SchedTaskTO taskTO) {\n+        if (taskTO.getKey() > 0) {\n+            taskRestClient.updateSyncTask((SyncTaskTO) taskTO);\n+        } else {\n+            taskRestClient.createSyncTask((SyncTaskTO) taskTO);\n+        }\n+    }\n+}"},{"sha":"cd4e8127c05ad258fe9683d1e669e95d0feda61c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/TaskModalPage.java","status":"added","additions":257,"deletions":0,"changes":257,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTaskModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,257 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.syncope.common.lib.to.PropagationTaskTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.springframework.util.StringUtils;\n+\n+/**\n+ * Modal window with Task form (to stop and start execution).\n+ */\n+public abstract class TaskModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -4110576026663173545L;\n+\n+    protected WebMarkupContainer profile;\n+\n+    protected WebMarkupContainer executions;\n+\n+    protected Form<AbstractTaskTO> form;\n+\n+    public TaskModalPage(final AbstractTaskTO taskTO) {\n+        final ModalWindow taskExecMessageWin = new ModalWindow(\"taskExecMessageWin\");\n+        taskExecMessageWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        taskExecMessageWin.setCookieName(\"task-exec-message-win-modal\");\n+        add(taskExecMessageWin);\n+\n+        form = new Form<AbstractTaskTO>(FORM);\n+        form.setModel(new CompoundPropertyModel<AbstractTaskTO>(taskTO));\n+        add(form);\n+\n+        profile = new WebMarkupContainer(\"profile\");\n+        profile.setOutputMarkupId(true);\n+        form.add(profile);\n+\n+        executions = new WebMarkupContainer(\"executionContainer\");\n+        executions.setOutputMarkupId(true);\n+        form.add(executions);\n+\n+        final Label idLabel = new Label(\"idLabel\", new ResourceModel(\"id\"));\n+        profile.add(idLabel);\n+\n+        final AjaxTextFieldPanel id =\n+                new AjaxTextFieldPanel(\"id\", getString(\"id\"), new PropertyModel<String>(taskTO, \"id\"));\n+\n+        id.setEnabled(false);\n+        profile.add(id);\n+\n+        final List<IColumn<TaskExecTO, String>> columns = new ArrayList<IColumn<TaskExecTO, String>>();\n+\n+        final int paginatorRows = 10;\n+\n+        columns.add(new PropertyColumn<TaskExecTO, String>(new ResourceModel(\"id\"), \"id\", \"id\"));\n+\n+        columns.add(new DatePropertyColumn<TaskExecTO>(new ResourceModel(\"startDate\"), \"startDate\", \"startDate\"));\n+\n+        columns.add(new DatePropertyColumn<TaskExecTO>(new ResourceModel(\"endDate\"), \"endDate\", \"endDate\"));\n+\n+        columns.add(new PropertyColumn<TaskExecTO, String>(new ResourceModel(\"status\"), \"status\", \"status\"));\n+\n+        columns.add(new ActionColumn<TaskExecTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public ActionLinksPanel getActions(final String componentId, final IModel<TaskExecTO> model) {\n+\n+                final TaskExecTO taskExecutionTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        taskExecMessageWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ExecMessageModalPage(model.getObject().getMessage());\n+                            }\n+                        });\n+                        taskExecMessageWin.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, TASKS, StringUtils.hasText(model.getObject().getMessage()));\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            taskRestClient.deleteExecution(taskExecutionTO.getKey());\n+\n+                            taskTO.getExecutions().remove(taskExecutionTO);\n+\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException scce) {\n+                            error(scce.getMessage());\n+                        }\n+\n+                        feedbackPanel.refresh(target);\n+                        target.add(executions);\n+                    }\n+                }, ActionLink.ActionType.DELETE, TASKS);\n+\n+                return panel;\n+            }\n+\n+            @Override\n+            public Component getHeader(final String componentId) {\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, new Model(), getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        if (target != null) {\n+                            final AjaxFallbackDefaultDataTable<TaskExecTO, String> currentTable =\n+                                    new AjaxFallbackDefaultDataTable<TaskExecTO, String>(\"executionsTable\", columns,\n+                                            new TaskExecutionsProvider(getCurrentTaskExecution(taskTO)), paginatorRows);\n+                            currentTable.setOutputMarkupId(true);\n+                            target.add(currentTable);\n+                            executions.addOrReplace(currentTable);\n+                        }\n+                    }\n+                }, ActionLink.ActionType.RELOAD, TASKS, \"list\");\n+\n+                return panel;\n+            }\n+        });\n+\n+        final AjaxFallbackDefaultDataTable<TaskExecTO, String> table =\n+                new AjaxFallbackDefaultDataTable<TaskExecTO, String>(\"executionsTable\", columns,\n+                        new TaskExecutionsProvider(getCurrentTaskExecution(taskTO)), paginatorRows);\n+\n+        executions.add(table);\n+    }\n+\n+    protected static class TaskExecutionsProvider extends SortableDataProvider<TaskExecTO, String> {\n+\n+        private static final long serialVersionUID = 8943636537120648961L;\n+\n+        private SortableDataProviderComparator<TaskExecTO> comparator;\n+\n+        private AbstractTaskTO taskTO;\n+\n+        public TaskExecutionsProvider(final AbstractTaskTO taskTO) {\n+            //Default sorting\n+            this.taskTO = taskTO;\n+            setSort(\"startDate\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<TaskExecTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<TaskExecTO> iterator(final long first, final long count) {\n+\n+            List<TaskExecTO> list = taskTO.getExecutions();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return taskTO.getExecutions().size();\n+        }\n+\n+        @Override\n+        public IModel<TaskExecTO> model(final TaskExecTO taskExecution) {\n+\n+            return new AbstractReadOnlyModel<TaskExecTO>() {\n+\n+                private static final long serialVersionUID = 7485475149862342421L;\n+\n+                @Override\n+                public TaskExecTO getObject() {\n+                    return taskExecution;\n+                }\n+            };\n+        }\n+    }\n+\n+    private AbstractTaskTO getCurrentTaskExecution(final AbstractTaskTO taskTO) {\n+        final AbstractTaskTO currentTask = taskTO.getKey() == 0\n+                ? taskTO\n+                : taskTO instanceof PropagationTaskTO\n+                        ? taskRestClient.readPropagationTask(taskTO.getKey())\n+                        : taskTO instanceof NotificationTaskTO\n+                                ? taskRestClient.readNotificationTask(taskTO.getKey())\n+                                : taskTO instanceof SyncTaskTO\n+                                        ? taskRestClient.readSchedTask(SyncTaskTO.class, taskTO.getKey())\n+                                        : taskRestClient.readSchedTask(SchedTaskTO.class, taskTO.getKey());\n+\n+        taskTO.getExecutions().clear();\n+        taskTO.getExecutions().addAll(currentTask.getExecutions());\n+        return taskTO;\n+    }\n+}"},{"sha":"948af7203be5c8ed5a9789ff7bdf2cf18016315c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Tasks.java","status":"added","additions":230,"deletions":0,"changes":230,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTasks.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,230 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.AjaxDataTablePanel;\n+import org.apache.syncope.client.console.panels.NotificationTasks;\n+import org.apache.syncope.client.console.panels.PropagationTasks;\n+import org.apache.syncope.client.console.panels.PushTasksPanel;\n+import org.apache.syncope.client.console.panels.SchedTasks;\n+import org.apache.syncope.client.console.panels.SyncTasksPanel;\n+import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.SchedTaskTO;\n+import org.apache.syncope.common.lib.to.TaskExecTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+\n+public class Tasks extends BasePage {\n+\n+    private static final long serialVersionUID = 5289215853622289061L;\n+\n+    public Tasks() {\n+        super();\n+\n+        add(new PropagationTasks(\"propagation\", getPageReference()));\n+        add(new NotificationTasks(\"notification\", getPageReference()));\n+        add(new SchedTasks(\"sched\", getPageReference()));\n+        add(new SyncTasksPanel(\"sync\", getPageReference()));\n+        add(new PushTasksPanel(\"push\", getPageReference()));\n+\n+        getPageReference();\n+    }\n+\n+    @Override\n+    public void setWindowClosedCallback(final ModalWindow window, final WebMarkupContainer container) {\n+\n+        super.setWindowClosedCallback(window, container);\n+    }\n+\n+    public static class TaskExecutionsProvider extends SortableDataProvider<TaskExecTO, String> {\n+\n+        private static final long serialVersionUID = -5401263348984206145L;\n+\n+        private SortableDataProviderComparator<TaskExecTO> comparator;\n+\n+        private AbstractTaskTO taskTO;\n+\n+        public TaskExecutionsProvider(final AbstractTaskTO taskTO) {\n+            super();\n+\n+            //Default sorting\n+            this.taskTO = taskTO;\n+            setSort(\"startDate\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<TaskExecTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<TaskExecTO> iterator(final long first, final long count) {\n+\n+            List<TaskExecTO> list = getTaskDB();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return getTaskDB().size();\n+        }\n+\n+        @Override\n+        public IModel<TaskExecTO> model(final TaskExecTO taskExecution) {\n+\n+            return new AbstractReadOnlyModel<TaskExecTO>() {\n+\n+                private static final long serialVersionUID = 7485475149862342421L;\n+\n+                @Override\n+                public TaskExecTO getObject() {\n+                    return taskExecution;\n+                }\n+            };\n+        }\n+\n+        public List<TaskExecTO> getTaskDB() {\n+            return taskTO.getExecutions();\n+        }\n+    }\n+\n+    public static class TasksProvider<T extends AbstractTaskTO> extends SortableDataProvider<T, String> {\n+\n+        private static final long serialVersionUID = -20112718133295756L;\n+\n+        private SortableDataProviderComparator<T> comparator;\n+\n+        private TaskRestClient restClient;\n+\n+        private int paginatorRows;\n+\n+        private String id;\n+\n+        private Class<T> reference;\n+\n+        public TasksProvider(\n+                final TaskRestClient restClient, final int paginatorRows, final String id, final Class<T> reference) {\n+\n+            super();\n+\n+            //Default sorting\n+            setSort(\"id\", SortOrder.DESCENDING);\n+            comparator = new SortableDataProviderComparator<T>(this);\n+            this.paginatorRows = paginatorRows;\n+            this.restClient = restClient;\n+            this.id = id;\n+            this.reference = reference;\n+        }\n+\n+        @Override\n+        public Iterator<T> iterator(final long first, final long count) {\n+            final List<T> tasks = new ArrayList<T>();\n+\n+            final int page = ((int) first / paginatorRows);\n+\n+            for (T task : restClient.list(reference, (page < 0 ? 0 : page) + 1, paginatorRows, getSort())) {\n+                if (task instanceof SchedTaskTO && ((SchedTaskTO) task).getLastExec() == null\n+                        && task.getExecutions() != null && !task.getExecutions().isEmpty()) {\n+\n+                    Collections.sort(task.getExecutions(), new Comparator<TaskExecTO>() {\n+\n+                        @Override\n+                        public int compare(final TaskExecTO left, final TaskExecTO right) {\n+                            return left.getStartDate().compareTo(right.getStartDate());\n+                        }\n+                    });\n+\n+                    ((SchedTaskTO) task).setLastExec(task.getExecutions().get(task.getExecutions().size() - 1).\n+                            getStartDate());\n+                }\n+                tasks.add(task);\n+            }\n+\n+            Collections.sort(tasks, comparator);\n+            return tasks.iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return restClient.count(id);\n+        }\n+\n+        @Override\n+        public IModel<T> model(final T object) {\n+            return new CompoundPropertyModel<T>(object);\n+        }\n+    }\n+\n+    /**\n+     * Update task table.\n+     *\n+     * @param columns columns.\n+     * @param dataProvider data provider.\n+     * @param container container.\n+     * @param currentPage current page index.\n+     * @param pageRef page reference\n+     * @param restClient syncope base rest client\n+     * @return data table.\n+     */\n+    public static AjaxDataTablePanel<AbstractTaskTO, String> updateTaskTable(\n+            final List<IColumn<AbstractTaskTO, String>> columns,\n+            final TasksProvider<? extends AbstractTaskTO> dataProvider,\n+            final WebMarkupContainer container,\n+            final int currentPage,\n+            final PageReference pageRef,\n+            final BaseRestClient restClient) {\n+\n+        @SuppressWarnings(\"unchecked\")\n+        final AjaxDataTablePanel<AbstractTaskTO, String> table = new AjaxDataTablePanel<AbstractTaskTO, String>(\n+                \"datatable\",\n+                columns,\n+                (ISortableDataProvider<AbstractTaskTO, String>) dataProvider,\n+                dataProvider.paginatorRows,\n+                Arrays.asList(new ActionLink.ActionType[] {\n+                    ActionLink.ActionType.DELETE, ActionLink.ActionType.DRYRUN, ActionLink.ActionType.EXECUTE }),\n+                restClient,\n+                \"id\",\n+                TASKS,\n+                pageRef);\n+\n+        table.setCurrentPage(currentPage);\n+        table.setOutputMarkupId(true);\n+\n+        container.addOrReplace(table);\n+\n+        return table;\n+    }\n+}"},{"sha":"1329fe4be390fc4a5988ae3b23d40f124f670749","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Todo.java","status":"added","additions":245,"deletions":0,"changes":245,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTodo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTodo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FTodo.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,245 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.SyncopeSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.rest.ApprovalRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.DatePropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.WorkflowFormTO;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.AbstractReadOnlyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class Todo extends BasePage {\n+\n+    private static final long serialVersionUID = -7122136682275797903L;\n+\n+    @SpringBean\n+    private ApprovalRestClient restClient;\n+\n+    @SpringBean\n+    private PreferenceManager prefMan;\n+\n+    private final ModalWindow window;\n+\n+    private static final int WIN_HEIGHT = 400;\n+\n+    private static final int WIN_WIDTH = 600;\n+\n+    private WebMarkupContainer container;\n+\n+    private int paginatorRows;\n+\n+    public Todo(final PageParameters parameters) {\n+        super(parameters);\n+\n+        add(window = new ModalWindow(\"editApprovalWin\"));\n+\n+        container = new WebMarkupContainer(\"approvalContainer\");\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                container, RENDER, xmlRolesReader.getEntitlement(\"Approval\", \"list\"));\n+\n+        paginatorRows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_TODO_PAGINATOR_ROWS);\n+\n+        List<IColumn<WorkflowFormTO, String>> columns = new ArrayList<IColumn<WorkflowFormTO, String>>();\n+        columns.add(new PropertyColumn<WorkflowFormTO, String>(\n+                new ResourceModel(\"taskId\"), \"taskId\", \"taskId\"));\n+        columns.add(new PropertyColumn<WorkflowFormTO, String>(\n+                new ResourceModel(\"key\"), \"key\", \"key\"));\n+        columns.add(new PropertyColumn<WorkflowFormTO, String>(\n+                new ResourceModel(\"description\"), \"description\", \"description\"));\n+        columns.add(new DatePropertyColumn<WorkflowFormTO>(\n+                new ResourceModel(\"createTime\"), \"createTime\", \"createTime\"));\n+        columns.add(new DatePropertyColumn<WorkflowFormTO>(\n+                new ResourceModel(\"dueDate\"), \"dueDate\", \"dueDate\"));\n+        columns.add(new PropertyColumn<WorkflowFormTO, String>(new ResourceModel(\"owner\"), \"owner\", \"owner\"));\n+        columns.add(new AbstractColumn<WorkflowFormTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<WorkflowFormTO>> cellItem, final String componentId,\n+                    final IModel<WorkflowFormTO> model) {\n+\n+                final WorkflowFormTO formTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, getPageReference());\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            restClient.claimForm(formTO.getTaskId());\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException scee) {\n+                            error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n+                        }\n+                        feedbackPanel.refresh(target);\n+                        target.add(container);\n+                    }\n+                }, ActionLink.ActionType.CLAIM, \"Approval\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        window.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new ApprovalModalPage(Todo.this.getPageReference(), window, formTO);\n+                            }\n+                        });\n+\n+                        window.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Approval\",\n+                        SyncopeSession.get().getUsername().equals(formTO.getOwner()));\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n+        final AjaxFallbackDefaultDataTable<WorkflowFormTO, String> approvalTable =\n+                new AjaxFallbackDefaultDataTable<WorkflowFormTO, String>(\n+                        \"approvalTable\", columns, new ApprovalProvider(), paginatorRows);\n+        container.add(approvalTable);\n+\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        Form approvalPaginatorForm = new Form(\"paginatorForm\");\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(approvalPaginatorForm, RENDER,\n+                xmlRolesReader.getEntitlement(\"Approval\", \"list\"));\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\",\n+                new PropertyModel(this, \"paginatorRows\"), prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_TODO_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n+                approvalTable.setItemsPerPage(paginatorRows);\n+\n+                target.add(container);\n+            }\n+        });\n+\n+        approvalPaginatorForm.add(rowsChooser);\n+        add(approvalPaginatorForm);\n+\n+        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        window.setInitialHeight(WIN_HEIGHT);\n+        window.setInitialWidth(WIN_WIDTH);\n+        window.setCookieName(\"edit-approval-modal\");\n+\n+        setWindowClosedCallback(window, container);\n+    }\n+\n+    private class ApprovalProvider extends SortableDataProvider<WorkflowFormTO, String> {\n+\n+        private static final long serialVersionUID = -2311716167583335852L;\n+\n+        private final SortableDataProviderComparator<WorkflowFormTO> comparator;\n+\n+        public ApprovalProvider() {\n+            super();\n+            //Default sorting\n+            setSort(\"key\", SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<WorkflowFormTO>(this);\n+        }\n+\n+        @Override\n+        public Iterator<WorkflowFormTO> iterator(final long first, final long count) {\n+            final List<WorkflowFormTO> list = restClient.getForms();\n+\n+            Collections.sort(list, comparator);\n+\n+            return list.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return restClient.getForms().size();\n+        }\n+\n+        @Override\n+        public IModel<WorkflowFormTO> model(final WorkflowFormTO configuration) {\n+            return new AbstractReadOnlyModel<WorkflowFormTO>() {\n+\n+                private static final long serialVersionUID = -2566070996511906708L;\n+\n+                @Override\n+                public WorkflowFormTO getObject() {\n+                    return configuration;\n+                }\n+            };\n+        }\n+    }\n+\n+}"},{"sha":"7319c3823aa4917714b34f13a101ad6b421923f0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/UserModalPage.java","status":"added","additions":228,"deletions":0,"changes":228,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,228 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.panels.DerAttrsPanel;\n+import org.apache.syncope.client.console.panels.MembershipsPanel;\n+import org.apache.syncope.client.console.panels.PlainAttrsPanel;\n+import org.apache.syncope.client.console.panels.ResourcesPanel;\n+import org.apache.syncope.client.console.panels.SecurityQuestionPanel;\n+import org.apache.syncope.client.console.panels.UserDetailsPanel;\n+import org.apache.syncope.client.console.panels.VirAttrsPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+\n+/**\n+ * Modal window with User form.\n+ */\n+public abstract class UserModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 5002005009737457667L;\n+\n+    protected final PageReference pageRef;\n+\n+    protected final ModalWindow window;\n+\n+    protected UserTO userTO;\n+\n+    protected final Mode mode;\n+\n+    private Fragment fragment = null;\n+\n+    private final boolean resetPassword;\n+\n+    protected final AjaxCheckBoxPanel storePassword;\n+\n+    public UserModalPage(final PageReference callerPageRef, final ModalWindow window, final UserTO userTO,\n+            final Mode mode, final boolean resetPassword) {\n+\n+        super();\n+\n+        this.pageRef = callerPageRef;\n+        this.window = window;\n+        this.userTO = userTO;\n+        this.mode = mode;\n+        this.resetPassword = resetPassword;\n+\n+        fragment = new Fragment(\"userModalFrag\", \"userModalEditFrag\", this);\n+        fragment.setOutputMarkupId(true);\n+        add(fragment);\n+\n+        storePassword = new AjaxCheckBoxPanel(\"storePassword\", \"storePassword\",\n+                new Model<Boolean>(Boolean.TRUE));\n+    }\n+\n+    public UserTO getUserTO() {\n+        return userTO;\n+    }\n+\n+    public void setUserTO(final UserTO userTO) {\n+        this.userTO = userTO;\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    protected Form setupEditPanel() {\n+        fragment.add(new Label(\"id\", userTO.getKey() == 0\n+                ? \"\"\n+                : userTO.getUsername()));\n+\n+        fragment.add(new Label(\"new\", userTO.getKey() == 0\n+                ? new ResourceModel(\"new\")\n+                : new Model(\"\")));\n+\n+        final Form form = new Form(\"UserForm\");\n+        form.setModel(new CompoundPropertyModel(userTO));\n+\n+        //--------------------------------\n+        // User details\n+        //--------------------------------\n+        form.add(new UserDetailsPanel(\"details\", userTO, form, resetPassword, mode == Mode.TEMPLATE));\n+\n+        form.add(new Label(\"statuspanel\", \"\"));\n+\n+        form.add(new Label(\"pwdChangeInfo\", \"\"));\n+\n+        form.add(new Label(\"securityQuestion\", \"\"));\n+        form.addOrReplace(new SecurityQuestionPanel(\"securityQuestion\", userTO));\n+\n+        form.add(new Label(\"accountinformation\", \"\"));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Store password internally checkbox\n+        //--------------------------------\n+        final Fragment storePwdFragment = new Fragment(\"storePwdFrag\", \"storePwdCheck\", form);\n+        storePwdFragment.setOutputMarkupId(true);\n+        final Label storePasswordLabel = new Label(\"storePasswordLabel\", new ResourceModel(\"storePassword\"));\n+        storePwdFragment.add(storePasswordLabel);\n+        storePwdFragment.add(storePassword);\n+        form.add(userTO.getKey() == 0 && mode != Mode.TEMPLATE\n+                ? storePwdFragment : new Fragment(\"storePwdFrag\", \"emptyFragment\", form));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Attributes panel\n+        //--------------------------------\n+        form.add(new PlainAttrsPanel(\"plainAttrs\", userTO, form, mode));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Derived attributes panel\n+        //--------------------------------\n+        form.add(new DerAttrsPanel(\"derAttrs\", userTO));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Virtual attributes panel\n+        //--------------------------------\n+        form.add(new VirAttrsPanel(\"virAttrs\", userTO, mode == Mode.TEMPLATE));\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Resources panel\n+        //--------------------------------\n+        form.add(new ResourcesPanel.Builder(\"resources\").attributableTO(userTO).build());\n+        //--------------------------------\n+\n+        //--------------------------------\n+        // Roles panel\n+        //--------------------------------\n+        form.add(new MembershipsPanel(\"memberships\", userTO, mode, null, getPageReference()));\n+        //--------------------------------\n+\n+        final AjaxButton submit = getOnSubmit();\n+\n+        if (mode == Mode.ADMIN) {\n+            String allowedRoles = userTO.getKey() == 0\n+                    ? xmlRolesReader.getEntitlement(\"Users\", \"create\")\n+                    : xmlRolesReader.getEntitlement(\"Users\", \"update\");\n+            MetaDataRoleAuthorizationStrategy.authorize(submit, RENDER, allowedRoles);\n+        }\n+\n+        fragment.add(form);\n+        form.add(submit);\n+        form.setDefaultButton(submit);\n+\n+        final AjaxButton cancel = new AjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = 530608535790823587L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+\n+        return form;\n+    }\n+\n+    protected AjaxButton getOnSubmit() {\n+        return new IndicatingAjaxButton(APPLY, new ResourceModel(SUBMIT)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    submitAction(target, form);\n+\n+                    if (pageRef.getPage() instanceof BasePage) {\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                    }\n+\n+                    closeAction(target, form);\n+                } catch (Exception e) {\n+                    LOG.error(\"While creating or updating user\", e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+    }\n+\n+    protected abstract void submitAction(AjaxRequestTarget target, Form<?> form);\n+\n+    protected abstract void closeAction(AjaxRequestTarget target, Form<?> form);\n+}"},{"sha":"ae8a5da251bce0391cb91429d4bb9db63f05732b","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/UserOwnerSelectModalPage.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserOwnerSelectModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,81 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.AbstractSearchResultPanel;\n+import org.apache.syncope.client.console.panels.SelectOnlyUserSearchResultPanel;\n+import org.apache.syncope.client.console.panels.UserSearchPanel;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class UserOwnerSelectModalPage extends BaseModalPage {\n+\n+    private static final long serialVersionUID = 2106489458494696439L;\n+\n+    public UserOwnerSelectModalPage(final PageReference pageRef, final ModalWindow window) {\n+        super();\n+\n+        final SelectOnlyUserSearchResultPanel searchResult =\n+                new SelectOnlyUserSearchResultPanel(\"searchResult\", true, null, pageRef, window, userRestClient);\n+        add(searchResult);\n+\n+        final Form<?> searchForm = new Form(\"searchForm\");\n+        add(searchForm);\n+\n+        final UserSearchPanel searchPanel = new UserSearchPanel.Builder(\"searchPanel\").build();\n+        searchForm.add(searchPanel);\n+\n+        searchForm.add(new IndicatingAjaxButton(\"search\", new ResourceModel(\"search\")) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                final String searchCond = searchPanel.buildFIQL();\n+                doSearch(target, searchCond, searchResult);\n+\n+                Session.get().getFeedbackMessages().clear();\n+                searchPanel.getSearchFeedback().refresh(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                searchPanel.getSearchFeedback().refresh(target);\n+            }\n+        });\n+\n+    }\n+\n+    private void doSearch(final AjaxRequestTarget target, final String fiql,\n+            final AbstractSearchResultPanel resultsetPanel) {\n+\n+        if (fiql == null) {\n+            error(getString(Constants.SEARCH_ERROR));\n+            return;\n+        }\n+\n+        resultsetPanel.search(fiql, target);\n+    }\n+}"},{"sha":"087bd696f12a16e6a49957d17de2dc004cffb737","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/UserSelfModalPage.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserSelfModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserSelfModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserSelfModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.rest.UserSelfRestClient;\n+import org.apache.syncope.common.lib.AttributableOperations;\n+import org.apache.syncope.common.lib.mod.UserMod;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Modal window with User form.\n+ */\n+public class UserSelfModalPage extends UserModalPage {\n+\n+    private static final long serialVersionUID = 603212869211672852L;\n+\n+    @SpringBean\n+    private UserSelfRestClient restClient;\n+\n+    private final UserTO initialUserTO;\n+\n+    public UserSelfModalPage(final PageReference callerPageRef, final ModalWindow window, final UserTO userTO) {\n+        super(callerPageRef, window, userTO, Mode.SELF, userTO.getKey() != 0);\n+\n+        this.initialUserTO = SerializationUtils.clone(userTO);\n+        setupEditPanel();\n+    }\n+\n+    @Override\n+    protected void submitAction(final AjaxRequestTarget target, final Form<?> form) {\n+        final UserTO updatedUserTO = (UserTO) form.getModelObject();\n+\n+        if (updatedUserTO.getKey() == 0) {\n+            restClient.create(updatedUserTO, storePassword.getModelObject());\n+        } else {\n+            final UserMod userMod = AttributableOperations.diff(updatedUserTO, initialUserTO);\n+\n+            // update user only if it has changed\n+            if (!userMod.isEmpty()) {\n+                restClient.update(userMod);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void closeAction(final AjaxRequestTarget target, final Form<?> form) {\n+        setResponsePage(new ResultStatusModalPage.Builder(window, userTO).mode(mode).build());\n+    }\n+}"},{"sha":"2b04035a222faa44e12dee2744d371b8cd64f83f","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/UserTemplateModalPage.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserTemplateModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserTemplateModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUserTemplateModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,60 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+\n+/**\n+ * Modal window with User form.\n+ */\n+public class UserTemplateModalPage extends UserModalPage {\n+\n+    private static final long serialVersionUID = 511003221213581368L;\n+\n+    private final SyncTaskTO syncTaskTO;\n+\n+    public UserTemplateModalPage(final PageReference callerPageRef, final ModalWindow window,\n+            final SyncTaskTO syncTaskTO) {\n+\n+        super(callerPageRef, window, syncTaskTO.getUserTemplate() == null\n+                ? new UserTO()\n+                : syncTaskTO.getUserTemplate(), Mode.TEMPLATE, true);\n+\n+        this.syncTaskTO = syncTaskTO;\n+\n+        setupEditPanel();\n+    }\n+\n+    @Override\n+    protected void submitAction(final AjaxRequestTarget target, final Form form) {\n+        syncTaskTO.setUserTemplate((UserTO) form.getModelObject());\n+        taskRestClient.updateSyncTask(syncTaskTO);\n+    }\n+\n+    @Override\n+    protected void closeAction(final AjaxRequestTarget target, final Form form) {\n+        window.close(target);\n+    }\n+}"},{"sha":"ed8419ef78f7a9b4b5dd222b4982b66bee779b33","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/Users.java","status":"added","additions":166,"deletions":0,"changes":166,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FUsers.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,166 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.AbstractSearchResultPanel;\n+import org.apache.syncope.client.console.panels.AbstractSearchResultPanel.EventDataWrapper;\n+import org.apache.syncope.client.console.panels.UserSearchPanel;\n+import org.apache.syncope.client.console.panels.UserSearchResultPanel;\n+import org.apache.syncope.client.console.rest.UserRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.Session;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class Users extends BasePage {\n+\n+    private static final long serialVersionUID = 134681165644474568L;\n+\n+    private final static int EDIT_MODAL_WIN_HEIGHT = 550;\n+\n+    private final static int EDIT_MODAL_WIN_WIDTH = 800;\n+\n+    @SpringBean\n+    private UserRestClient restClient;\n+\n+    public Users(final PageParameters parameters) {\n+        super(parameters);\n+\n+        // Modal window for editing user attributes\n+        final ModalWindow editModalWin = new ModalWindow(\"editModal\");\n+        editModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editModalWin.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);\n+        editModalWin.setInitialWidth(EDIT_MODAL_WIN_WIDTH);\n+        editModalWin.setCookieName(\"edit-modal\");\n+        add(editModalWin);\n+\n+        final AbstractSearchResultPanel searchResult =\n+                new UserSearchResultPanel(\"searchResult\", true, null, getPageReference(), restClient);\n+        add(searchResult);\n+\n+        final AbstractSearchResultPanel listResult =\n+                new UserSearchResultPanel(\"listResult\", false, null, getPageReference(), restClient);\n+        add(listResult);\n+\n+        // create new user\n+        final AjaxLink<Void> createLink = new ClearIndicatingAjaxLink<Void>(\"createLink\", getPageReference()) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                editModalWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new EditUserModalPage(Users.this.getPageReference(), editModalWin, new UserTO());\n+                    }\n+                });\n+\n+                editModalWin.show(target);\n+            }\n+        };\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                createLink, ENABLE, xmlRolesReader.getEntitlement(\"Users\", \"create\"));\n+        add(createLink);\n+\n+        setWindowClosedReloadCallback(editModalWin);\n+\n+        final Form searchForm = new Form(\"searchForm\");\n+        add(searchForm);\n+\n+        final UserSearchPanel searchPanel = new UserSearchPanel.Builder(\"searchPanel\").build();\n+        searchForm.add(searchPanel);\n+\n+        final ClearIndicatingAjaxButton searchButton =\n+                new ClearIndicatingAjaxButton(\"search\", new ResourceModel(\"search\"), getPageReference()) {\n+\n+                    private static final long serialVersionUID = -958724007591692537L;\n+\n+                    @Override\n+                    protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                        final String fiql = searchPanel.buildFIQL();\n+                        LOG.debug(\"FIQL: \" + fiql);\n+\n+                        doSearch(target, fiql, searchResult);\n+\n+                        Session.get().getFeedbackMessages().clear();\n+                        searchPanel.getSearchFeedback().refresh(target);\n+                    }\n+\n+                    @Override\n+                    protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+\n+                        searchPanel.getSearchFeedback().refresh(target);\n+                    }\n+                };\n+\n+        searchForm.add(searchButton);\n+        searchForm.setDefaultButton(searchButton);\n+    }\n+\n+    private void doSearch(final AjaxRequestTarget target, final String fiql,\n+            final AbstractSearchResultPanel resultsetPanel) {\n+\n+        if (fiql == null) {\n+            error(getString(Constants.SEARCH_ERROR));\n+            return;\n+        }\n+\n+        resultsetPanel.search(fiql, target);\n+    }\n+\n+    private void setWindowClosedReloadCallback(final ModalWindow window) {\n+        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                final EventDataWrapper data = new EventDataWrapper();\n+                data.setTarget(target);\n+                data.setCreate(true);\n+\n+                send(getPage(), Broadcast.BREADTH, data);\n+\n+                if (isModalResult()) {\n+                    // reset modal result\n+                    setModalResult(false);\n+                    // set operation succeeded\n+                    getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n+                    // refresh feedback panel\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+        });\n+    }\n+}"},{"sha":"d47e07f30a2df457416a8c5da1d6b629d4168f5a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/ViewUserModalPage.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FViewUserModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FViewUserModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FViewUserModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,49 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+\n+public class ViewUserModalPage extends EditUserModalPage {\n+\n+    private static final long serialVersionUID = -8715255026876951611L;\n+\n+    public ViewUserModalPage(final PageReference callerPageRef, final ModalWindow window, final UserTO userTO) {\n+        super(callerPageRef, window, userTO);\n+        form.setEnabled(false);\n+        form.get(CANCEL).setVisible(false);\n+    }\n+\n+    @Override\n+    protected AjaxButton getOnSubmit() {\n+        AjaxButton submit = super.getOnSubmit();\n+        submit.setVisible(false);\n+        return submit;\n+    }\n+\n+    @Override\n+    protected void submitAction(final AjaxRequestTarget target, final Form form) {\n+        // No submit allowed, read-only form\n+    }\n+}"},{"sha":"daa65d626d771f2478c39c1b27c25d947b44f2fb","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/VirSchemaModalPage.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FVirSchemaModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FVirSchemaModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FVirSchemaModalPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.VirSchemaTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+\n+/**\n+ * Modal window with Schema form.\n+ */\n+public class VirSchemaModalPage extends AbstractSchemaModalPage<VirSchemaTO> {\n+\n+    private static final long serialVersionUID = 5979623248182851337L;\n+\n+    public VirSchemaModalPage(final AttributableType kind) {\n+        super(kind);\n+    }\n+\n+    @Override\n+    public void setSchemaModalPage(final PageReference pageRef, final ModalWindow window,\n+            VirSchemaTO schema, final boolean createFlag) {\n+\n+        if (schema == null) {\n+            schema = new VirSchemaTO();\n+        }\n+\n+        final Form<VirSchemaTO> schemaForm = new Form<VirSchemaTO>(FORM);\n+\n+        schemaForm.setModel(new CompoundPropertyModel<VirSchemaTO>(schema));\n+\n+        final AjaxTextFieldPanel name = new AjaxTextFieldPanel(\"name\", getString(\"name\"), new PropertyModel<String>(\n+                schema, \"name\"));\n+        name.addRequiredLabel();\n+\n+        name.setEnabled(createFlag);\n+\n+        final AjaxCheckBoxPanel readonly = new AjaxCheckBoxPanel(\"readonly\", getString(\"readonly\"),\n+                new PropertyModel<Boolean>(schema, \"readonly\"));\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(SUBMIT)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                VirSchemaTO schemaTO = (VirSchemaTO) form.getDefaultModelObject();\n+                try {\n+                    if (createFlag) {\n+                        schemaRestClient.createVirSchema(kind, schemaTO);\n+                    } else {\n+                        schemaRestClient.updateVirSchema(kind, schemaTO);\n+                    }\n+                    if (pageRef.getPage() instanceof BasePage) {\n+                        ((BasePage) pageRef.getPage()).setModalResult(true);\n+                    }\n+\n+                    window.close(target);\n+                } catch (SyncopeClientException e) {\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        final AjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+\n+        String allowedRoles = createFlag\n+                ? xmlRolesReader.getEntitlement(\"Schema\", \"create\")\n+                : xmlRolesReader.getEntitlement(\"Schema\", \"update\");\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(submit, ENABLE, allowedRoles);\n+\n+        schemaForm.add(name);\n+        schemaForm.add(readonly);\n+\n+        schemaForm.add(submit);\n+        schemaForm.add(cancel);\n+\n+        add(schemaForm);\n+    }\n+}"},{"sha":"d9f884dbe849f6e2e806f40f353e5f2e6118b0dc","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/WelcomePage.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWelcomePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWelcomePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FWelcomePage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.SyncopeApplication;\n+import org.apache.syncope.client.console.commons.XMLRolesReader;\n+import org.apache.syncope.client.console.rest.UserSelfRestClient;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+/**\n+ * Welcome page to display after successful login.\n+ */\n+public class WelcomePage extends WebPage {\n+\n+    private static final long serialVersionUID = 8851399358753120581L;\n+\n+    @SpringBean\n+    private XMLRolesReader xmlRolesReader;\n+\n+    @SpringBean\n+    private UserSelfRestClient userSelfRestClient;\n+\n+    public WelcomePage(final PageParameters parameters) {\n+        super(parameters);\n+        setupNavigationPanel();\n+        setupEditProfileModal();\n+    }\n+\n+    //To prevent warning: \"leaking this in constructor java\" \n+    private void setupNavigationPanel() {\n+        ((SyncopeApplication) getApplication()).setupNavigationPanel(this, xmlRolesReader, false);\n+    }\n+\n+    private void setupEditProfileModal() {\n+        ((SyncopeApplication) getApplication()).setupEditProfileModal(this, userSelfRestClient);\n+    }\n+}"},{"sha":"b5a8d101e5597e8ded601dbe54483c814d9c8fa5","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/pages/XMLEditorPopupPage.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FXMLEditorPopupPage.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import java.io.IOException;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.rest.WorkflowRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.markup.html.form.Button;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.TextArea;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.apache.wicket.util.io.IOUtils;\n+\n+public class XMLEditorPopupPage extends BasePopupPage {\n+\n+    private static final long serialVersionUID = 5816041644635271734L;\n+\n+    @SpringBean\n+    private WorkflowRestClient wfRestClient;\n+\n+    public XMLEditorPopupPage() {\n+        Form wfForm = new Form(\"workflowDefForm\");\n+\n+        String definition;\n+        try {\n+            definition = IOUtils.toString(wfRestClient.getDefinition(MediaType.APPLICATION_XML_TYPE));\n+        } catch (IOException e) {\n+            LOG.error(\"Could not get workflow definition\", e);\n+            definition = StringUtils.EMPTY;\n+        }\n+        final TextArea<String> workflowDefArea = new TextArea<String>(\"workflowDefArea\", new Model<String>(definition));\n+        wfForm.add(workflowDefArea);\n+\n+        AjaxButton submit =\n+                new ClearIndicatingAjaxButton(APPLY, new Model<String>(getString(SUBMIT)), getPageReference()) {\n+\n+                    private static final long serialVersionUID = -958724007591692537L;\n+\n+                    @Override\n+                    protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                        try {\n+                            wfRestClient.updateDefinition(\n+                                    MediaType.APPLICATION_XML_TYPE, workflowDefArea.getModelObject());\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException scee) {\n+                            error(getString(Constants.ERROR) + \": \" + scee.getMessage());\n+                        }\n+                        feedbackPanel.refresh(target);\n+                    }\n+\n+                    @Override\n+                    protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                        feedbackPanel.refresh(target);\n+                    }\n+                };\n+\n+        final Button close = new Button(\"closePage\", new Model<String>(getString(CANCEL)));\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                submit, ENABLE, xmlRolesReader.getEntitlement(\"Configuration\", \"workflowDefUpdate\"));\n+        wfForm.add(submit);\n+        wfForm.add(close);\n+        this.add(wfForm);\n+    }\n+\n+}"},{"sha":"e066aacb91bd4d862803bfc9a68455114d770f93","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractProvisioningTasksPanel.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractProvisioningTasksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractProvisioningTasksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractProvisioningTasksPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,160 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.pages.PushTaskModalPage;\n+import org.apache.syncope.client.console.pages.SyncTaskModalPage;\n+import org.apache.syncope.client.console.pages.Tasks;\n+import org.apache.syncope.client.console.pages.Tasks.TasksProvider;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.PushTaskTO;\n+import org.apache.syncope.common.lib.to.SyncTaskTO;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.request.http.WebResponse;\n+\n+public abstract class AbstractProvisioningTasksPanel<T extends AbstractProvisioningTaskTO> extends AbstractTasks {\n+\n+    private static final long serialVersionUID = -8674781241465369244L;\n+\n+    private final int paginatorRows;\n+\n+    protected WebMarkupContainer container;\n+\n+    protected ModalWindow window;\n+\n+    protected AjaxDataTablePanel<AbstractTaskTO, String> table;\n+\n+    private final Class<T> reference;\n+\n+    public AbstractProvisioningTasksPanel(final String id, final PageReference pageRef, final Class<T> reference) {\n+        super(id, pageRef);\n+\n+        this.reference = reference;\n+\n+        container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n+        window = new ModalWindow(\"taskWin\");\n+        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        window.setInitialHeight(WIN_HEIGHT);\n+        window.setInitialWidth(WIN_WIDTH);\n+        window.setCookieName(VIEW_TASK_WIN_COOKIE_NAME);\n+        add(window);\n+\n+        ((Tasks) pageRef.getPage()).setWindowClosedCallback(window, container);\n+\n+        paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof AbstractSearchResultPanel.EventDataWrapper) {\n+            ((AbstractSearchResultPanel.EventDataWrapper) event.getPayload()).getTarget().add(container);\n+        }\n+    }\n+\n+    protected void initTasksTable() {\n+\n+        table = Tasks.updateTaskTable(\n+                getColumns(),\n+                new TasksProvider<T>(restClient, paginatorRows, getId(), this.reference),\n+                container,\n+                0,\n+                this.pageRef,\n+                restClient);\n+\n+        Form paginatorForm = new Form(\"PaginatorForm\");\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequest(), (WebResponse) getResponse(), Constants.PREF_SYNC_TASKS_PAGINATOR_ROWS,\n+                        String.valueOf(paginatorRows));\n+\n+                table = Tasks.updateTaskTable(\n+                        getColumns(),\n+                        new TasksProvider<T>(restClient, paginatorRows, getId(), reference),\n+                        container,\n+                        table == null ? 0 : (int) table.getCurrentPage(),\n+                        pageRef,\n+                        restClient);\n+\n+                target.add(container);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        container.add(paginatorForm);\n+\n+        // create new task\n+        AjaxLink<Void> createLink = new ClearIndicatingAjaxLink<Void>(\"createLink\", pageRef) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                window.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return reference.equals(SyncTaskTO.class)\n+                                ? new SyncTaskModalPage(window, new SyncTaskTO(), pageRef)\n+                                : new PushTaskModalPage(window, new PushTaskTO(), pageRef);\n+                    }\n+                });\n+\n+                window.show(target);\n+            }\n+        };\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                createLink, RENDER, xmlRolesReader.getEntitlement(TASKS, \"create\"));\n+\n+        add(createLink);\n+\n+    }\n+\n+    protected abstract List<IColumn<AbstractTaskTO, String>> getColumns();\n+}"},{"sha":"aa30fae282657b595c257ad19d2c75632364866a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSearchPanel.java","status":"added","additions":401,"deletions":0,"changes":401,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,401 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.math.NumberUtils;\n+import org.apache.cxf.jaxrs.ext.search.ConditionType;\n+import org.apache.cxf.jaxrs.ext.search.SearchBean;\n+import org.apache.cxf.jaxrs.ext.search.SearchCondition;\n+import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n+import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+import org.apache.syncope.client.console.rest.AuthRestClient;\n+import org.apache.syncope.client.console.rest.ResourceRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.common.lib.search.RoleFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.SearchableFields;\n+import org.apache.syncope.common.lib.search.SpecialAttr;\n+import org.apache.syncope.common.lib.search.SyncopeFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.SyncopeProperty;\n+import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.to.ResourceTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.wicket.feedback.FeedbackMessage;\n+import org.apache.wicket.feedback.IFeedbackMessageFilter;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSearchPanel extends Panel {\n+\n+    private static final long serialVersionUID = 5922413053568696414L;\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSearchPanel.class);\n+\n+    @SpringBean\n+    protected SchemaRestClient schemaRestClient;\n+\n+    @SpringBean\n+    protected ResourceRestClient resourceRestClient;\n+\n+    @SpringBean\n+    protected AuthRestClient authRestClient;\n+\n+    protected IModel<List<String>> dnames;\n+\n+    protected IModel<List<String>> anames;\n+\n+    protected IModel<List<String>> resourceNames;\n+\n+    protected IModel<List<String>> entitlements;\n+\n+    protected IModel<List<SearchClause.Type>> types;\n+\n+    protected IModel<List<String>> roleNames;\n+\n+    protected NotificationPanel searchFeedback;\n+\n+    protected List<SearchClause> searchClauses;\n+\n+    protected WebMarkupContainer searchFormContainer;\n+\n+    protected AttributableType attributableType;\n+\n+    protected boolean required;\n+\n+    protected AbstractSearchPanel(final String id, final AttributableType attributableType) {\n+        this(id, attributableType, null, true);\n+    }\n+\n+    protected AbstractSearchPanel(final String id, final AttributableType attributableType,\n+            final String fiql, final boolean required) {\n+\n+        super(id);\n+        populate();\n+\n+        this.attributableType = attributableType;\n+        this.required = required;\n+\n+        setOutputMarkupId(true);\n+\n+        searchFormContainer = new WebMarkupContainer(\"searchFormContainer\");\n+        searchFormContainer.setOutputMarkupId(true);\n+\n+        searchFeedback = new NotificationPanel(\"searchFeedback\", \"notificationpanel_top_right\",\n+                new IFeedbackMessageFilter() {\n+\n+                    private static final long serialVersionUID = 6895024863321391672L;\n+\n+                    @Override\n+                    public boolean accept(final FeedbackMessage message) {\n+                        boolean result;\n+\n+                        // messages reported on the session have a null reporter\n+                        if (message.getReporter() == null) {\n+                            result = false;\n+                        } else {\n+                            // only accept messages coming from the children of the search form container\n+                            result = searchFormContainer.contains(message.getReporter(), true);\n+                        }\n+\n+                        return result;\n+                    }\n+                });\n+        searchFeedback.setOutputMarkupId(true);\n+        add(searchFeedback);\n+\n+        this.searchClauses = new ArrayList<SearchClause>();\n+        this.searchClauses.add(new SearchClause());\n+        if (StringUtils.isNotBlank(fiql)) {\n+            try {\n+                FiqlParser<SearchBean> fiqlParser = new FiqlParser<SearchBean>(\n+                        SearchBean.class, SyncopeFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n+                List<SearchClause> parsed = getSearchClauses(fiqlParser.parse(fiql));\n+\n+                this.searchClauses.clear();\n+                this.searchClauses.addAll(parsed);\n+            } catch (Exception e) {\n+                LOG.error(\"Unparseable FIQL expression '{}'\", fiql, e);\n+            }\n+        }\n+\n+        searchFormContainer.add(new SearchView(\"searchView\", searchClauses, searchFormContainer, required,\n+                types, anames, dnames, roleNames, resourceNames, entitlements));\n+        add(searchFormContainer);\n+    }\n+\n+    protected void populate() {\n+        dnames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return SearchableFields.get(attributableType == AttributableType.USER\n+                        ? SubjectType.USER : SubjectType.ROLE);\n+            }\n+        };\n+\n+        anames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                return schemaRestClient.getSchemaNames(attributableType);\n+            }\n+        };\n+\n+        resourceNames = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                List<ResourceTO> resourceTOs = resourceRestClient.getAll();\n+\n+                List<String> result = new ArrayList<>(resourceTOs.size());\n+\n+                for (ResourceTO resource : resourceTOs) {\n+                    result.add(resource.getKey());\n+                }\n+\n+                return result;\n+            }\n+        };\n+\n+        entitlements = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                List<String> result = authRestClient.getOwnedEntitlements();\n+                Collections.sort(result);\n+                return result;\n+            }\n+        };\n+    }\n+\n+    public NotificationPanel getSearchFeedback() {\n+        return searchFeedback;\n+    }\n+\n+    private SearchClause getPrimitiveSearchClause(final SearchCondition<SearchBean> sc) {\n+        SearchClause searchClause = new SearchClause();\n+\n+        String property = sc.getCondition().getKeySet().iterator().next();\n+        searchClause.setProperty(property);\n+        String value = sc.getCondition().get(property);\n+        searchClause.setValue(value);\n+\n+        if (SpecialAttr.ROLES.toString().equals(property)) {\n+            searchClause.setType(SearchClause.Type.MEMBERSHIP);\n+            for (String label : roleNames.getObject()) {\n+                if (value.equals(label.substring(0, label.indexOf(' ')))) {\n+                    searchClause.setProperty(label);\n+                }\n+            }\n+        } else if (SpecialAttr.RESOURCES.toString().equals(property)) {\n+            searchClause.setType(SearchClause.Type.RESOURCE);\n+        } else if (SpecialAttr.ENTITLEMENTS.toString().equals(property)) {\n+            searchClause.setType(SearchClause.Type.ENTITLEMENT);\n+        } else {\n+            searchClause.setType(SearchClause.Type.ATTRIBUTE);\n+        }\n+\n+        switch (sc.getConditionType()) {\n+            case EQUALS:\n+                searchClause.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                        ? SearchClause.Comparator.IS_NULL : SearchClause.Comparator.EQUALS);\n+                break;\n+\n+            case NOT_EQUALS:\n+                searchClause.setComparator(SpecialAttr.NULL.toString().equals(value)\n+                        ? SearchClause.Comparator.IS_NOT_NULL : SearchClause.Comparator.NOT_EQUALS);\n+                break;\n+\n+            case GREATER_OR_EQUALS:\n+                searchClause.setComparator(SearchClause.Comparator.GREATER_OR_EQUALS);\n+                break;\n+\n+            case GREATER_THAN:\n+                searchClause.setComparator(SearchClause.Comparator.GREATER_THAN);\n+                break;\n+\n+            case LESS_OR_EQUALS:\n+                searchClause.setComparator(SearchClause.Comparator.LESS_OR_EQUALS);\n+                break;\n+\n+            case LESS_THAN:\n+                searchClause.setComparator(SearchClause.Comparator.LESS_THAN);\n+                break;\n+\n+            default:\n+                break;\n+        }\n+\n+        return searchClause;\n+    }\n+\n+    private List<SearchClause> getCompoundSearchClause(final SearchCondition<SearchBean> sc) {\n+        List<SearchClause> clauses = new ArrayList<SearchClause>();\n+\n+        for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n+            if (searchCondition.getStatement() == null) {\n+                clauses.addAll(getCompoundSearchClause(searchCondition));\n+            } else {\n+                SearchClause clause = getPrimitiveSearchClause(searchCondition);\n+                if (sc.getConditionType() == ConditionType.AND) {\n+                    clause.setOperator(SearchClause.Operator.AND);\n+                }\n+                if (sc.getConditionType() == ConditionType.OR) {\n+                    clause.setOperator(SearchClause.Operator.OR);\n+                }\n+                clauses.add(clause);\n+            }\n+        }\n+\n+        return clauses;\n+    }\n+\n+    private List<SearchClause> getSearchClauses(final SearchCondition<SearchBean> sc) {\n+        List<SearchClause> clauses = new ArrayList<SearchClause>();\n+\n+        if (sc.getStatement() == null) {\n+            clauses.addAll(getCompoundSearchClause(sc));\n+        } else {\n+            clauses.add(getPrimitiveSearchClause(sc));\n+        }\n+\n+        return clauses;\n+    }\n+\n+    protected abstract SyncopeFiqlSearchConditionBuilder getSearchConditionBuilder();\n+\n+    public String buildFIQL() {\n+        LOG.debug(\"Generating FIQL from List<SearchClause>: {}\", searchClauses);\n+\n+        if (searchClauses.isEmpty() || searchClauses.get(0).getType() == null) {\n+            return StringUtils.EMPTY;\n+        }\n+\n+        SyncopeFiqlSearchConditionBuilder builder = getSearchConditionBuilder();\n+\n+        CompleteCondition prevCondition;\n+        CompleteCondition condition = null;\n+        for (int i = 0; i < searchClauses.size(); i++) {\n+            prevCondition = condition;\n+\n+            switch (searchClauses.get(i).getType()) {\n+                case ENTITLEMENT:\n+                    condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n+                            ? ((RoleFiqlSearchConditionBuilder) builder).\n+                            hasEntitlements(searchClauses.get(i).getProperty())\n+                            : ((RoleFiqlSearchConditionBuilder) builder).\n+                            hasNotEntitlements(searchClauses.get(i).getProperty());\n+                    break;\n+\n+                case MEMBERSHIP:\n+                    Long roleId = NumberUtils.toLong(searchClauses.get(i).getProperty().split(\" \")[0]);\n+                    condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n+                            ? ((UserFiqlSearchConditionBuilder) builder).hasRoles(roleId)\n+                            : ((UserFiqlSearchConditionBuilder) builder).hasNotRoles(roleId);\n+                    break;\n+\n+                case RESOURCE:\n+                    condition = searchClauses.get(i).getComparator() == SearchClause.Comparator.EQUALS\n+                            ? builder.hasResources(searchClauses.get(i).getProperty())\n+                            : builder.hasNotResources(searchClauses.get(i).getProperty());\n+                    break;\n+\n+                case ATTRIBUTE:\n+                    SyncopeProperty property = builder.is(searchClauses.get(i).getProperty());\n+                    switch (searchClauses.get(i).getComparator()) {\n+                        case IS_NULL:\n+                            condition = builder.isNull(searchClauses.get(i).getProperty());\n+                            break;\n+\n+                        case IS_NOT_NULL:\n+                            condition = builder.isNotNull(searchClauses.get(i).getProperty());\n+                            break;\n+\n+                        case LESS_THAN:\n+                            condition = StringUtils.isNumeric(searchClauses.get(i).getProperty())\n+                                    ? property.lessThan(NumberUtils.toDouble(searchClauses.get(i).getValue()))\n+                                    : property.lexicalBefore(searchClauses.get(i).getValue());\n+                            break;\n+\n+                        case LESS_OR_EQUALS:\n+                            condition = StringUtils.isNumeric(searchClauses.get(i).getProperty())\n+                                    ? property.lessOrEqualTo(NumberUtils.toDouble(searchClauses.get(i).getValue()))\n+                                    : property.lexicalNotAfter(searchClauses.get(i).getValue());\n+                            break;\n+\n+                        case GREATER_THAN:\n+                            condition = StringUtils.isNumeric(searchClauses.get(i).getProperty())\n+                                    ? property.greaterThan(NumberUtils.toDouble(searchClauses.get(i).getValue()))\n+                                    : property.lexicalAfter(searchClauses.get(i).getValue());\n+                            break;\n+\n+                        case GREATER_OR_EQUALS:\n+                            condition = StringUtils.isNumeric(searchClauses.get(i).getProperty())\n+                                    ? property.greaterOrEqualTo(NumberUtils.toDouble(searchClauses.get(i).getValue()))\n+                                    : property.lexicalNotBefore(searchClauses.get(i).getValue());\n+                            break;\n+\n+                        case NOT_EQUALS:\n+                            condition = property.notEqualTo(searchClauses.get(i).getValue());\n+                            break;\n+\n+                        case EQUALS:\n+                        default:\n+                            condition = property.equalTo(searchClauses.get(i).getValue());\n+                            break;\n+                    }\n+                default:\n+                    break;\n+            }\n+\n+            if (i > 0) {\n+                if (searchClauses.get(i).getOperator() == SearchClause.Operator.AND) {\n+                    condition = builder.and(prevCondition, condition);\n+                }\n+                if (searchClauses.get(i).getOperator() == SearchClause.Operator.OR) {\n+                    condition = builder.or(prevCondition, condition);\n+                }\n+            }\n+        }\n+\n+        String fiql = condition == null ? StringUtils.EMPTY : condition.query();\n+        LOG.debug(\"Generated FIQL: {}\", fiql);\n+        return fiql;\n+    }\n+}"},{"sha":"386392c674a063ee3310dc61e4f9ec862207c55a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractSearchResultPanel.java","status":"added","additions":353,"deletions":0,"changes":353,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractSearchResultPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,353 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.AttributableDataProvider;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.client.console.commons.XMLRolesReader;\n+import org.apache.syncope.client.console.pages.AbstractBasePage;\n+import org.apache.syncope.client.console.rest.AbstractSubjectRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.event.IEventSource;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractSearchResultPanel extends Panel implements IEventSource {\n+\n+    private static final long serialVersionUID = -9170191461250434024L;\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(AbstractSearchResultPanel.class);\n+\n+    /**\n+     * Edit modal window height.\n+     */\n+    private final static int EDIT_MODAL_WIN_HEIGHT = 550;\n+\n+    /**\n+     * Edit modal window width.\n+     */\n+    private final static int EDIT_MODAL_WIN_WIDTH = 800;\n+\n+    /**\n+     * Schemas to be shown modal window height.\n+     */\n+    private final static int DISPLAYATTRS_MODAL_WIN_HEIGHT = 550;\n+\n+    /**\n+     * Schemas to be shown modal window width.\n+     */\n+    private final static int DISPLAYATTRS_MODAL_WIN_WIDTH = 550;\n+\n+    /**\n+     * Schemas to be shown modal window height.\n+     */\n+    private final static int STATUS_MODAL_WIN_HEIGHT = 500;\n+\n+    /**\n+     * Schemas to be shown modal window width.\n+     */\n+    private final static int STATUS_MODAL_WIN_WIDTH = 700;\n+\n+    /**\n+     * Application preferences.\n+     */\n+    @SpringBean\n+    protected PreferenceManager prefMan;\n+\n+    /**\n+     * Role reader for authorizations management.\n+     */\n+    @SpringBean\n+    protected XMLRolesReader xmlRolesReader;\n+\n+    protected final AbstractSubjectRestClient restClient;\n+\n+    /**\n+     * Number of rows per page.\n+     */\n+    private final int rows;\n+\n+    /**\n+     * Container used to refresh table.\n+     */\n+    protected final WebMarkupContainer container;\n+\n+    /**\n+     * Feedback panel specified by the caller.\n+     */\n+    protected final NotificationPanel feedbackPanel;\n+\n+    /**\n+     * Specify if results are about a filtered search or not. Using this attribute it is possible to use this panel to\n+     * show results about user list and user search.\n+     */\n+    private final boolean filtered;\n+\n+    /**\n+     * Filter used in case of filtered search.\n+     */\n+    private String fiql;\n+\n+    /**\n+     * Result table.\n+     */\n+    private AjaxDataTablePanel<AbstractAttributableTO, String> resultTable;\n+\n+    /**\n+     * Data provider used to search for users.\n+     */\n+    private AttributableDataProvider dataProvider;\n+\n+    /**\n+     * Modal window to be used for user profile editing. Global visibility is required ...\n+     */\n+    protected final ModalWindow editmodal = new ModalWindow(\"editModal\");\n+\n+    /**\n+     * Modal window to be used for attributes choosing to display in tables.\n+     */\n+    protected final ModalWindow displaymodal = new ModalWindow(\"displayModal\");\n+\n+    /**\n+     * Modal window to be used for user status management.\n+     */\n+    protected final ModalWindow statusmodal = new ModalWindow(\"statusModal\");\n+\n+    /**\n+     * Owner page.\n+     */\n+    protected final AbstractBasePage page;\n+\n+    protected <T extends AbstractAttributableTO> AbstractSearchResultPanel(final String id, final boolean filtered,\n+            final String fiql, final PageReference pageRef, final AbstractSubjectRestClient restClient) {\n+\n+        super(id);\n+\n+        setOutputMarkupId(true);\n+\n+        this.page = (AbstractBasePage) pageRef.getPage();\n+\n+        this.filtered = filtered;\n+        this.fiql = fiql;\n+        this.feedbackPanel = page.getFeedbackPanel();\n+\n+        this.restClient = restClient;\n+\n+        editmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        editmodal.setInitialHeight(EDIT_MODAL_WIN_HEIGHT);\n+        editmodal.setInitialWidth(EDIT_MODAL_WIN_WIDTH);\n+        editmodal.setCookieName(\"edit-modal\");\n+        add(editmodal);\n+\n+        displaymodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        displaymodal.setInitialHeight(DISPLAYATTRS_MODAL_WIN_HEIGHT);\n+        displaymodal.setInitialWidth(DISPLAYATTRS_MODAL_WIN_WIDTH);\n+        displaymodal.setCookieName(\"display-modal\");\n+        add(displaymodal);\n+\n+        statusmodal.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        statusmodal.setInitialHeight(STATUS_MODAL_WIN_HEIGHT);\n+        statusmodal.setInitialWidth(STATUS_MODAL_WIN_WIDTH);\n+        statusmodal.setCookieName(\"status-modal\");\n+        add(statusmodal);\n+\n+        // Container for user search result\n+        container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n+        rows = prefMan.getPaginatorRows(getRequest(), Constants.PREF_USERS_PAGINATOR_ROWS);\n+    }\n+\n+    protected void initResultTable() {\n+        // ---------------------------\n+        // Result table initialization\n+        // ---------------------------\n+        updateResultTable(false);\n+        // ---------------------------\n+\n+        // ---------------------------\n+        // Rows-per-page selector\n+        // ---------------------------\n+        final Form paginatorForm = new Form(\"paginator\");\n+        container.add(paginatorForm);\n+\n+        final DropDownChoice<Integer> rowsChooser = new DropDownChoice<Integer>(\n+                \"rowsChooser\", new PropertyModel<Integer>(this, \"rows\"), prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getRequest(), getResponse(), Constants.PREF_USERS_PAGINATOR_ROWS, String.valueOf(rows));\n+\n+                final EventDataWrapper data = new EventDataWrapper();\n+                data.setTarget(target);\n+                data.setRows(rows);\n+\n+                send(getParent(), Broadcast.BREADTH, data);\n+            }\n+        });\n+        paginatorForm.add(rowsChooser);\n+        // ---------------------------\n+\n+        setWindowClosedReloadCallback(statusmodal);\n+        setWindowClosedReloadCallback(editmodal);\n+        setWindowClosedReloadCallback(displaymodal);\n+    }\n+\n+    public void search(final String fiql, final AjaxRequestTarget target) {\n+        this.fiql = fiql;\n+        dataProvider.setFIQL(fiql);\n+        target.add(container);\n+    }\n+\n+    private void updateResultTable(final boolean create) {\n+        updateResultTable(create, rows);\n+    }\n+\n+    private void updateResultTable(final boolean create, final int rows) {\n+        dataProvider = new AttributableDataProvider(restClient, rows, filtered);\n+        dataProvider.setFIQL(fiql);\n+\n+        final int currentPage = resultTable != null\n+                ? (create\n+                        ? (int) resultTable.getPageCount() - 1\n+                        : (int) resultTable.getCurrentPage())\n+                : 0;\n+\n+        resultTable = new AjaxDataTablePanel<AbstractAttributableTO, String>(\n+                \"resultTable\",\n+                getColumns(),\n+                dataProvider,\n+                rows,\n+                getBulkActions(),\n+                restClient,\n+                \"id\",\n+                getPageId(),\n+                page.getPageReference());\n+\n+        resultTable.setCurrentPage(currentPage);\n+\n+        resultTable.setOutputMarkupId(true);\n+\n+        container.addOrReplace(resultTable);\n+    }\n+\n+    protected abstract List<IColumn<AbstractAttributableTO, String>> getColumns();\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof EventDataWrapper) {\n+            final EventDataWrapper data = (EventDataWrapper) event.getPayload();\n+\n+            if (data.getRows() < 1) {\n+                updateResultTable(data.isCreate());\n+            } else {\n+                updateResultTable(data.isCreate(), data.getRows());\n+            }\n+\n+            data.getTarget().add(container);\n+        }\n+    }\n+\n+    private void setWindowClosedReloadCallback(final ModalWindow window) {\n+        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                final EventDataWrapper data = new EventDataWrapper();\n+                data.setTarget(target);\n+                data.setRows(rows);\n+\n+                send(getParent(), Broadcast.BREADTH, data);\n+\n+                if (page.isModalResult()) {\n+                    // reset modal result\n+                    page.setModalResult(false);\n+                    // set operation succeeded\n+                    getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n+                    // refresh feedback panel\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+        });\n+    }\n+\n+    public static class EventDataWrapper {\n+\n+        private AjaxRequestTarget target;\n+\n+        private boolean create;\n+\n+        private int rows;\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public void setTarget(final AjaxRequestTarget target) {\n+            this.target = target;\n+        }\n+\n+        public boolean isCreate() {\n+            return create;\n+        }\n+\n+        public void setCreate(boolean create) {\n+            this.create = create;\n+        }\n+\n+        public int getRows() {\n+            return rows;\n+        }\n+\n+        public void setRows(int rows) {\n+            this.rows = rows;\n+        }\n+    }\n+\n+    protected abstract <T extends AbstractAttributableTO> Collection<ActionLink.ActionType> getBulkActions();\n+\n+    protected abstract String getPageId();\n+}"},{"sha":"381f878e5948464d0975b8d5ab485e90aafdbc0d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/AbstractTasks.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAbstractTasks.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,55 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.client.console.commons.XMLRolesReader;\n+import org.apache.syncope.client.console.rest.TaskRestClient;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public abstract class AbstractTasks extends Panel {\n+\n+    private static final long serialVersionUID = -1190836516156843561L;\n+\n+    protected static final String VIEW_TASK_WIN_COOKIE_NAME = \"view-task-win\";\n+\n+    protected static final int WIN_HEIGHT = 500;\n+\n+    protected static final int WIN_WIDTH = 700;\n+\n+    protected static final String TASKS = \"Tasks\";\n+\n+    protected PageReference pageRef;\n+\n+    @SpringBean\n+    protected TaskRestClient restClient;\n+\n+    @SpringBean\n+    protected PreferenceManager prefMan;\n+\n+    @SpringBean\n+    protected XMLRolesReader xmlRolesReader;\n+\n+    public AbstractTasks(final String id, final PageReference pageRef) {\n+        super(id);\n+        this.pageRef = pageRef;\n+    }\n+}"},{"sha":"3bc7dd88edc443a6835581a5d2da9c7208199f57","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/AccountInformationPanel.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccountInformationPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccountInformationPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccountInformationPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeSession;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.model.Model;\n+\n+public class AccountInformationPanel extends AnnotatedBeanPanel {\n+\n+    private static final long serialVersionUID = 4228064224811390808L;\n+\n+    public <T extends AbstractAttributableTO> AccountInformationPanel(final String id, final UserTO userTO) {\n+        super(id, userTO);\n+\n+        // ------------------------\n+        // Change password date\n+        // ------------------------\n+        add(new Label(\"changePwdDate\", new Model<String>(userTO.getChangePwdDate() == null\n+                ? StringUtils.EMPTY\n+                : SyncopeSession.get().getDateFormat().format(userTO.getChangePwdDate()))));\n+        // ------------------------\n+\n+        // ------------------------\n+        // Last login date\n+        // ------------------------\n+        add(new Label(\"lastLoginDate\", new Model<String>(userTO.getLastLoginDate() == null\n+                ? StringUtils.EMPTY\n+                : SyncopeSession.get().getDateFormat().format(userTO.getLastLoginDate()))));\n+        // ------------------------\n+\n+        // ------------------------\n+        // Failed logins\n+        // ------------------------\n+        add(new Label(\"failedLogins\", new Model<Integer>(userTO.getFailedLogins())));\n+        // ------------------------\n+\n+        // ------------------------\n+        // Token\n+        // ------------------------\n+        add(new Label(\"token\", new Model<String>(userTO.getToken() == null\n+                ? StringUtils.EMPTY\n+                : userTO.getToken())));\n+        // ------------------------\n+\n+        // ------------------------\n+        // Token expire time\n+        // ------------------------\n+        add(new Label(\"tokenExpireTime\", new Model<String>(userTO.getTokenExpireTime() == null\n+                ? StringUtils.EMPTY\n+                : SyncopeSession.get().getDateFormat().format(userTO.getTokenExpireTime()))));\n+        // ------------------------\n+    }\n+}"},{"sha":"bfade982cd0ce14c7c06fd878ea75f2b8c34abdc","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/ActionDataTablePanel.java","status":"added","additions":149,"deletions":0,"changes":149,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FActionDataTablePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,149 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.ActionTableCheckGroup;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.CheckGroupColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink.ActionType;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+\n+public class ActionDataTablePanel<T, S> extends DataTablePanel<T, S> {\n+\n+    private static final long serialVersionUID = -8826989026203543957L;\n+\n+    private static final String CANCEL = \"cancel\";\n+\n+    private final Form<T> bulkActionForm;\n+\n+    private final ActionLinksPanel actionPanel;\n+\n+    private final PageReference pageRef;\n+\n+    public ActionDataTablePanel(\n+            final String id,\n+            final List<IColumn<T, S>> columns,\n+            final ISortableDataProvider<T, S> dataProvider,\n+            final int rowsPerPage,\n+            final PageReference pageRef) {\n+\n+        super(id);\n+\n+        this.pageRef = pageRef;\n+\n+        bulkActionForm = new Form<T>(\"groupForm\");\n+        add(bulkActionForm);\n+\n+        group = new ActionTableCheckGroup<T>(\"checkgroup\", model) {\n+\n+            private static final long serialVersionUID = -8667764190925075389L;\n+\n+            @Override\n+            public boolean isCheckable(final T element) {\n+                return isElementEnabled(element);\n+            }\n+        };\n+        group.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                // triggers AJAX form submit\n+            }\n+        });\n+        bulkActionForm.add(group);\n+\n+        columns.add(0, new CheckGroupColumn<T, S>(group));\n+        dataTable = new AjaxFallbackDefaultDataTable<T, S>(\"dataTable\", columns, dataProvider, rowsPerPage);\n+        group.add(dataTable);\n+\n+        final WebMarkupContainer actionPanelContainer = new WebMarkupContainer(\"actionPanelContainer\");\n+        bulkActionForm.add(actionPanelContainer);\n+\n+        actionPanel = new ActionLinksPanel(\"actions\", new Model(), pageRef);\n+        actionPanelContainer.add(actionPanel);\n+\n+        if (dataTable.getRowCount() == 0) {\n+            actionPanelContainer.add(new AttributeModifier(\"style\", \"display: none\"));\n+        }\n+\n+        bulkActionForm.add(new ClearIndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL), pageRef) {\n+\n+            private static final long serialVersionUID = -2341391430136818025L;\n+\n+            @Override\n+            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                // ignore\n+            }\n+        }.setVisible(false).setEnabled(false));\n+    }\n+\n+    public void addAction(final ActionLink action, final ActionType type, final String pageId) {\n+        actionPanel.add(action, type, pageId);\n+    }\n+\n+    public void addAction(final ActionLink action, final ActionType type, final String pageId, final String actionId) {\n+        actionPanel.add(action, type, pageId, actionId);\n+    }\n+\n+    public void addAction(final ActionLink action, final ActionType type, final String pageId, final boolean enabled) {\n+        actionPanel.add(action, type, pageId, enabled);\n+    }\n+\n+    public void addCancelButton(final ModalWindow window) {\n+\n+        final AjaxButton cancel = new ClearIndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL), pageRef) {\n+\n+            private static final long serialVersionUID = -2341391430136818025L;\n+\n+            @Override\n+            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                window.close(target);\n+            }\n+        }.feedbackPanelAutomaticReload(false);\n+\n+        cancel.setDefaultFormProcessing(false);\n+        bulkActionForm.addOrReplace(cancel);\n+    }\n+\n+    public Collection<T> getModelObject() {\n+        return group.getModelObject();\n+    }\n+\n+    public boolean isElementEnabled(final T element) {\n+        return true;\n+    }\n+}"},{"sha":"563bd17c3eb7bcda58ebc7a63cf754c7c08abd2b","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/AjaxDataTablePanel.java","status":"added","additions":142,"deletions":0,"changes":142,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAjaxDataTablePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,142 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.Collection;\n+import java.util.List;\n+import org.apache.syncope.client.console.rest.BaseRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.panels.AbstractSearchResultPanel.EventDataWrapper;\n+import org.apache.syncope.client.console.pages.AbstractBasePage;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.CheckGroupColumn;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxButton;\n+import org.apache.syncope.client.console.pages.BulkActionModalPage;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.ISortableDataProvider;\n+import org.apache.wicket.markup.html.form.CheckGroup;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+\n+public class AjaxDataTablePanel<T, S> extends DataTablePanel<T, S> {\n+\n+    private static final long serialVersionUID = -7264400471578272966L;\n+\n+    public AjaxDataTablePanel(\n+            final String id,\n+            final List<IColumn<T, S>> columns,\n+            final ISortableDataProvider<T, S> dataProvider,\n+            final int rowsPerPage,\n+            final Collection<ActionLink.ActionType> actions,\n+            final BaseRestClient bulkActionExecutor,\n+            final String itemIdField,\n+            final String pageId,\n+            final PageReference pageRef) {\n+\n+        super(id);\n+\n+        final ModalWindow bulkModalWin = new ModalWindow(\"bulkModal\");\n+        bulkModalWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        bulkModalWin.setInitialHeight(600);\n+        bulkModalWin.setInitialWidth(900);\n+        bulkModalWin.setCookieName(\"bulk-modal\");\n+        add(bulkModalWin);\n+\n+        bulkModalWin.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487149L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                final EventDataWrapper data = new EventDataWrapper();\n+                data.setTarget(target);\n+                data.setRows(rowsPerPage);\n+\n+                send(pageRef.getPage(), Broadcast.BREADTH, data);\n+\n+                final AbstractBasePage page = (AbstractBasePage) pageRef.getPage();\n+\n+                if (page.isModalResult()) {\n+                    // reset modal result\n+                    page.setModalResult(false);\n+                    // set operation succeeded\n+                    getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n+                    // refresh feedback panel\n+                    target.add(page.getFeedbackPanel());\n+                }\n+            }\n+        });\n+\n+        Fragment fragment = new Fragment(\"tablePanel\", \"bulkAvailable\", this);\n+        add(fragment);\n+\n+        Form<T> bulkActionForm = new Form<>(\"groupForm\");\n+        fragment.add(bulkActionForm);\n+\n+        group = new CheckGroup<>(\"checkgroup\", model);\n+        group.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                // triggers AJAX form submit\n+            }\n+        });\n+        bulkActionForm.add(group);\n+\n+        columns.add(0, new CheckGroupColumn<T, S>(group));\n+        dataTable = new AjaxFallbackDefaultDataTable<>(\"dataTable\", columns, dataProvider, rowsPerPage);\n+        group.add(dataTable);\n+\n+        fragment.add(new ClearIndicatingAjaxButton(\"bulkActionLink\", bulkActionForm, pageRef) {\n+\n+            private static final long serialVersionUID = 382302811235019988L;\n+\n+            @Override\n+            protected void onSubmitInternal(final AjaxRequestTarget target, final Form<?> form) {\n+                bulkModalWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690941L;\n+\n+                    @Override\n+                    public Page createPage() {\n+                        return new BulkActionModalPage<>(\n+                                bulkModalWin,\n+                                group.getModelObject(),\n+                                columns,\n+                                actions,\n+                                bulkActionExecutor,\n+                                itemIdField,\n+                                pageId);\n+                    }\n+                });\n+\n+                bulkModalWin.show(target);\n+            }\n+        });\n+    }\n+}"},{"sha":"714cb5f3120585eee9eac3817450fd83ca7c389b","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/AnnotatedBeanPanel.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnnotatedBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnnotatedBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnnotatedBeanPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import org.apache.syncope.client.console.SyncopeSession;\n+import org.apache.syncope.common.lib.to.AbstractAnnotatedBean;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+\n+public class AnnotatedBeanPanel extends Panel {\n+\n+    private static final long serialVersionUID = 4228064224811390809L;\n+\n+    public <T extends AbstractAttributableTO> AnnotatedBeanPanel(\n+            final String id, final AbstractAnnotatedBean sysInfoTO) {\n+\n+        super(id);\n+\n+        // ------------------------\n+        // Creation date\n+        // ------------------------\n+        add(new Label(\"creationDate\", new Model<String>(sysInfoTO.getCreationDate() != null\n+                ? SyncopeSession.get().getDateFormat().format(sysInfoTO.getCreationDate()) : \"\")));\n+        // ------------------------\n+\n+        // ------------------------\n+        // Last change date\n+        // ------------------------\n+        add(new Label(\"lastChangeDate\", new Model<String>(sysInfoTO.getLastChangeDate() != null\n+                ? SyncopeSession.get().getDateFormat().format(sysInfoTO.getCreationDate()) : \"\")));\n+        // ------------------------\n+\n+        // ------------------------\n+        // Creator\n+        // ------------------------\n+        add(new Label(\"creator\", new Model<String>(sysInfoTO.getCreator() != null\n+                ? sysInfoTO.getCreator() : \"\")));\n+        // ------------------------\n+\n+        // ------------------------\n+        // Last modifier\n+        // ------------------------\n+        add(new Label(\"lastModifier\", new Model<String>(sysInfoTO.getLastModifier() != null\n+                ? sysInfoTO.getLastModifier() : \"\")));\n+        // ------------------------\n+\n+    }\n+}"},{"sha":"b9162da0b49d9c38559a872032af7bb9411748fd","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/AttrTemplatesPanel.java","status":"added","additions":167,"deletions":0,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrTemplatesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrTemplatesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAttrTemplatesPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,167 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.Collection;\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.SelectChoiceRenderer;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.NonI18nPalette;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.extensions.markup.html.form.palette.component.Recorder;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class AttrTemplatesPanel extends Panel {\n+\n+    public enum Type {\n+\n+        rAttrTemplates,\n+        rDerAttrTemplates,\n+        rVirAttrTemplates,\n+        mPlainAttrTemplates,\n+        mDerAttrTemplates,\n+        mVirAttrTemplates;\n+\n+    }\n+\n+    private static final long serialVersionUID = 1016028222120619000L;\n+\n+    @SpringBean\n+    private SchemaRestClient schemaRestClient;\n+\n+    private final RoleTO roleTO;\n+\n+    private final NonI18nPalette<String> rPlainAttrTemplates;\n+\n+    private final NonI18nPalette<String> rDerAttrTemplates;\n+\n+    private final NonI18nPalette<String> rVirAttrTemplates;\n+\n+    public AttrTemplatesPanel(final String id, final RoleTO roleTO) {\n+        super(id);\n+        this.roleTO = roleTO;\n+\n+        rPlainAttrTemplates = buildPalette(Type.rAttrTemplates,\n+                schemaRestClient.getSchemaNames(AttributableType.ROLE, SchemaType.PLAIN));\n+        this.add(rPlainAttrTemplates);\n+        rDerAttrTemplates = buildPalette(Type.rDerAttrTemplates,\n+                schemaRestClient.getSchemaNames(AttributableType.ROLE, SchemaType.DERIVED));\n+        this.add(rDerAttrTemplates);\n+        rVirAttrTemplates = buildPalette(Type.rVirAttrTemplates,\n+                schemaRestClient.getSchemaNames(AttributableType.ROLE, SchemaType.VIRTUAL));\n+        this.add(rVirAttrTemplates);\n+\n+        this.add(buildPalette(Type.mPlainAttrTemplates,\n+                schemaRestClient.getSchemaNames(AttributableType.MEMBERSHIP, SchemaType.PLAIN)));\n+        this.add(buildPalette(Type.mDerAttrTemplates,\n+                schemaRestClient.getSchemaNames(AttributableType.MEMBERSHIP, SchemaType.DERIVED)));\n+        this.add(buildPalette(Type.mVirAttrTemplates,\n+                schemaRestClient.getSchemaNames(AttributableType.MEMBERSHIP, SchemaType.VIRTUAL)));\n+    }\n+\n+    private NonI18nPalette<String> buildPalette(final Type type, final List<String> allSchemas) {\n+        if (allSchemas != null && !allSchemas.isEmpty()) {\n+            Collections.sort(allSchemas);\n+        }\n+        ListModel<String> availableSchemas = new ListModel<String>(allSchemas);\n+\n+        return new NonI18nPalette<String>(type.name(), new PropertyModel<List<String>>(roleTO, type.name()),\n+                availableSchemas, new SelectChoiceRenderer<String>(), 8, false, true) {\n+\n+                    private static final long serialVersionUID = 2295567122085510330L;\n+\n+                    @Override\n+                    protected Recorder<String> newRecorderComponent() {\n+                        final Recorder<String> recorder = super.newRecorderComponent();\n+\n+                        switch (type) {\n+                            case rAttrTemplates:\n+                            case rDerAttrTemplates:\n+                            case rVirAttrTemplates:\n+                                recorder.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+                                    private static final long serialVersionUID = -1107858522700306810L;\n+\n+                                    @Override\n+                                    protected void onUpdate(final AjaxRequestTarget target) {\n+                                        send(getPage(), Broadcast.BREADTH, new RoleAttrTemplatesChange(type, target));\n+                                    }\n+                                });\n+                                break;\n+\n+                            default:\n+                        }\n+\n+                        return recorder;\n+                    }\n+                };\n+    }\n+\n+    public Collection<String> getSelected(final Type type) {\n+        Collection<String> selected;\n+        switch (type) {\n+            case rAttrTemplates:\n+                selected = this.rPlainAttrTemplates.getModelCollection();\n+                break;\n+\n+            case rDerAttrTemplates:\n+                selected = this.rDerAttrTemplates.getModelCollection();\n+                break;\n+\n+            case rVirAttrTemplates:\n+                selected = this.rVirAttrTemplates.getModelCollection();\n+                break;\n+\n+            default:\n+                selected = Collections.emptyList();\n+        }\n+\n+        return selected;\n+    }\n+\n+    public static class RoleAttrTemplatesChange {\n+\n+        private final Type type;\n+\n+        private final AjaxRequestTarget target;\n+\n+        public RoleAttrTemplatesChange(final Type type, final AjaxRequestTarget target) {\n+            this.type = type;\n+            this.target = target;\n+        }\n+\n+        public Type getType() {\n+            return type;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+    }\n+}"},{"sha":"a5f6588412a535fd29d20483a432a280af43c87e","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/DataTablePanel.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDataTablePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDataTablePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDataTablePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,113 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.Set;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.DataGridView;\n+import org.apache.wicket.markup.html.form.CheckGroup;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.IModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class DataTablePanel<T, S> extends Panel {\n+\n+    private static final long serialVersionUID = -7264400471578272966L;\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(DataTablePanel.class);\n+\n+    protected CheckGroup<T> group;\n+\n+    protected AjaxFallbackDefaultDataTable<T, S> dataTable;\n+\n+    protected IModel<Collection<T>> model;\n+\n+    public DataTablePanel(final String id) {\n+        super(id);\n+\n+        model = new IModel<Collection<T>>() {\n+\n+            private static final long serialVersionUID = 4886729136344643465L;\n+\n+            private Collection<T> values = new HashSet<T>();\n+\n+            @Override\n+            public Collection<T> getObject() {\n+                // Someone or something call this method to change the model: this is not the right behavior.\n+                // Return a copy of the model object in order to avoid SYNCOPE-465\n+                return new HashSet<T>(values);\n+            }\n+\n+            @Override\n+            public void setObject(final Collection<T> selected) {\n+                final Collection<T> all = getGroupModelObjects();\n+                values.removeAll(all);\n+                values.addAll(selected);\n+            }\n+\n+            @Override\n+            public void detach() {\n+            }\n+        };\n+    }\n+\n+    public final void setCurrentPage(final long page) {\n+        dataTable.setCurrentPage(page);\n+    }\n+\n+    public final long getRowCount() {\n+        return dataTable.getRowCount();\n+    }\n+\n+    public final long getCurrentPage() {\n+        return dataTable.getCurrentPage();\n+    }\n+\n+    public final long getPageCount() {\n+        return dataTable.getPageCount();\n+    }\n+\n+    public void setItemsPerPage(final int resourcePaginatorRows) {\n+        dataTable.setItemsPerPage(resourcePaginatorRows);\n+    }\n+\n+    protected Collection<T> getGroupModelObjects() {\n+        final Set<T> res = new HashSet<T>();\n+\n+        final Component rows = group.get(\"dataTable:body:rows\");\n+        if (rows instanceof DataGridView) {\n+            @SuppressWarnings(\"unchecked\")\n+            final Iterator<Item<T>> iter = ((DataGridView<T>) rows).getItems();\n+\n+            while (iter.hasNext()) {\n+                res.add(iter.next().getModelObject());\n+            }\n+        }\n+        return res;\n+    }\n+}"},{"sha":"d68038f9796625e6d38d2347689f1ce662936471","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/DerAttrsPanel.java","status":"added","additions":206,"deletions":0,"changes":206,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDerAttrsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,206 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.AttrTemplatesPanel.RoleAttrTemplatesChange;\n+import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDecoratedCheckbox;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.attributes.AjaxCallListener;\n+import org.apache.wicket.ajax.attributes.AjaxRequestAttributes;\n+import org.apache.wicket.ajax.attributes.IAjaxCallListener;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.TextField;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class DerAttrsPanel extends Panel {\n+\n+    private static final long serialVersionUID = -5387344116983102292L;\n+\n+    @SpringBean\n+    private SchemaRestClient schemaRestClient;\n+\n+    @SpringBean\n+    private RoleRestClient roleRestClient;\n+\n+    private final AttrTemplatesPanel attrTemplates;\n+\n+    public <T extends AbstractAttributableTO> DerAttrsPanel(final String id, final T entityTO) {\n+        this(id, entityTO, null);\n+    }\n+\n+    public <T extends AbstractAttributableTO> DerAttrsPanel(final String id, final T entityTO,\n+            final AttrTemplatesPanel attrTemplates) {\n+\n+        super(id);\n+        this.attrTemplates = attrTemplates;\n+        setOutputMarkupId(true);\n+\n+        final IModel<List<String>> derSchemas = new LoadableDetachableModel<List<String>>() {\n+\n+            private static final long serialVersionUID = 5275935387613157437L;\n+\n+            @Override\n+            protected List<String> load() {\n+                List<String> derSchemaNames;\n+\n+                if (entityTO instanceof RoleTO) {\n+                    final RoleTO roleTO = (RoleTO) entityTO;\n+\n+                    if (attrTemplates == null) {\n+                        derSchemaNames = roleTO.getRDerAttrTemplates();\n+                    } else {\n+                        derSchemaNames = new ArrayList<>(\n+                                attrTemplates.getSelected(AttrTemplatesPanel.Type.rDerAttrTemplates));\n+                        if (roleTO.isInheritTemplates() && roleTO.getParent() != 0) {\n+                            derSchemaNames.addAll(roleRestClient.read(roleTO.getParent()).getRDerAttrTemplates());\n+                        }\n+                    }\n+                } else if (entityTO instanceof UserTO) {\n+                    derSchemaNames = schemaRestClient.getDerSchemaNames(AttributableType.USER);\n+                } else {\n+                    derSchemaNames = roleRestClient.read(((MembershipTO) entityTO).getRoleId()).getMDerAttrTemplates();\n+                }\n+\n+                return derSchemaNames;\n+            }\n+        };\n+\n+        final WebMarkupContainer attributesContainer = new WebMarkupContainer(\"derAttrContainer\");\n+\n+        attributesContainer.setOutputMarkupId(true);\n+        add(attributesContainer);\n+\n+        AjaxButton addAttributeBtn = new IndicatingAjaxButton(\"addAttributeBtn\", new ResourceModel(\"addAttributeBtn\")) {\n+\n+            private static final long serialVersionUID = -4804368561204623354L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                entityTO.getDerAttrs().add(new AttrTO());\n+                target.add(attributesContainer);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                target.add(attributesContainer);\n+            }\n+        };\n+        add(addAttributeBtn.setDefaultFormProcessing(false));\n+\n+        ListView<AttrTO> attributes = new ListView<AttrTO>(\"attrs\",\n+                new PropertyModel<List<? extends AttrTO>>(entityTO, \"derAttrs\")) {\n+\n+                    private static final long serialVersionUID = 9101744072914090143L;\n+\n+                    @Override\n+                    protected void populateItem(final ListItem<AttrTO> item) {\n+                        final AttrTO attributeTO = item.getModelObject();\n+\n+                        item.add(new AjaxDecoratedCheckbox(\"toRemove\", new Model<>(Boolean.FALSE)) {\n+\n+                            private static final long serialVersionUID = 7170946748485726506L;\n+\n+                            @Override\n+                            protected void onUpdate(final AjaxRequestTarget target) {\n+                                entityTO.getDerAttrs().remove(attributeTO);\n+                                target.add(attributesContainer);\n+                            }\n+\n+                            @Override\n+                            protected void updateAjaxAttributes(final AjaxRequestAttributes attributes) {\n+                                super.updateAjaxAttributes(attributes);\n+\n+                                IAjaxCallListener ajaxCallListener = new AjaxCallListener() {\n+\n+                                    private static final long serialVersionUID = 7160235486520935153L;\n+\n+                                    @Override\n+                                    public CharSequence getPrecondition(final Component component) {\n+                                        return \"if (!confirm('\" + getString(\"confirmDelete\") + \"')) return false;\";\n+                                    }\n+                                };\n+                                attributes.getAjaxCallListeners().add(ajaxCallListener);\n+                            }\n+                        });\n+\n+                        final DropDownChoice<String> schemaChoice = new DropDownChoice<String>(\"schema\",\n+                                new PropertyModel<String>(attributeTO, \"schema\"), derSchemas);\n+                        schemaChoice.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_BLUR) {\n+\n+                            private static final long serialVersionUID = -1107858522700306810L;\n+\n+                            @Override\n+                            protected void onUpdate(final AjaxRequestTarget target) {\n+                                attributeTO.setSchema(schemaChoice.getModelObject());\n+                            }\n+                        });\n+                        schemaChoice.setRequired(true);\n+                        schemaChoice.setOutputMarkupId(true);\n+                        schemaChoice.setRequired(true);\n+                        item.add(schemaChoice);\n+\n+                        final List<String> values = attributeTO.getValues();\n+                        if (values == null || values.isEmpty()) {\n+                            item.add(new TextField<String>(\"value\",\n+                                            new Model<String>(null)).setVisible(false));\n+                        } else {\n+                            item.add(new TextField<String>(\"value\",\n+                                            new Model<String>(values.get(0))).setEnabled(false));\n+                        }\n+                    }\n+                };\n+        attributesContainer.add(attributes);\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if ((event.getPayload() instanceof RoleAttrTemplatesChange)) {\n+            final RoleAttrTemplatesChange update = (RoleAttrTemplatesChange) event.getPayload();\n+            if (attrTemplates != null && update.getType() == AttrTemplatesPanel.Type.rDerAttrTemplates) {\n+                update.getTarget().add(this);\n+            }\n+        }\n+    }\n+}"},{"sha":"5332cb52ef953069d2d75410d7e9410ad4d635ab","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/EventSelectionPanel.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FEventSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FEventSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FEventSelectionPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,243 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.wicket.markup.html.list.AltListView;\n+import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormChoiceComponentUpdatingBehavior;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Check;\n+import org.apache.wicket.markup.html.form.CheckGroup;\n+import org.apache.wicket.markup.html.form.CheckGroupSelector;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.ResourceModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class EventSelectionPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(EventSelectionPanel.class);\n+\n+    private static final long serialVersionUID = 752233163798301002L;\n+\n+    private final Set<String> selected = new HashSet<String>();\n+\n+    public EventSelectionPanel(\n+            final String id, final EventCategoryTO eventCategoryTO, final IModel<List<String>> model) {\n+        super(id);\n+        setOutputMarkupId(true);\n+\n+        final List<String> events = getEvents(eventCategoryTO);\n+\n+        // needed to avoid model reset: model have to be managed into SelectedEventsPanel\n+        selected.addAll(model.getObject());\n+\n+        final CheckGroup<String> successGroup = new CheckGroup<String>(\n+                \"successGroup\",\n+                selected);\n+\n+        successGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+\n+                final Set<String> toBeRemoved = new HashSet<>();\n+                final Set<String> toBeAdded = new HashSet<>();\n+\n+                for (String event : getEvents(eventCategoryTO)) {\n+                    final String eventString = AuditLoggerName.buildEvent(\n+                            eventCategoryTO.getType(),\n+                            eventCategoryTO.getCategory(),\n+                            eventCategoryTO.getSubcategory(),\n+                            event,\n+                            AuditElements.Result.SUCCESS);\n+\n+                    if (successGroup.getModelObject().contains(eventString)) {\n+                        toBeAdded.add(eventString);\n+                    } else {\n+                        toBeRemoved.add(eventString);\n+                    }\n+                }\n+\n+                send(EventSelectionPanel.this.getPage(), Broadcast.BREADTH,\n+                        new SelectedEventsPanel.EventSelectionChanged(target, toBeAdded, toBeRemoved));\n+            }\n+        });\n+\n+        successGroup.setVisible(!events.isEmpty());\n+        add(successGroup);\n+\n+        add(new Label(\"successLabel\", new ResourceModel(\"Success\", \"Success\"))).setVisible(!events.isEmpty());\n+\n+        final CheckGroupSelector successSelector = new CheckGroupSelector(\"successSelector\", successGroup);\n+        successSelector.setVisible(!events.isEmpty());\n+        add(successSelector);\n+\n+        final ListView<String> categoryView = new AltListView<String>(\"categoryView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String subcategory = item.getModelObject();\n+\n+                item.add(new Label(\"subcategory\", new ResourceModel(subcategory, subcategory)));\n+            }\n+        };\n+        add(categoryView);\n+\n+        final ListView<String> successView = new AltListView<String>(\"successView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String event = item.getModelObject();\n+\n+                final Check<String> successCheck = new Check<>(\"successCheck\",\n+                        new Model<String>(AuditLoggerName.buildEvent(\n+                                        eventCategoryTO.getType(),\n+                                        eventCategoryTO.getCategory(),\n+                                        eventCategoryTO.getSubcategory(),\n+                                        event,\n+                                        AuditElements.Result.SUCCESS)),\n+                        successGroup);\n+                item.add(successCheck);\n+            }\n+        };\n+        successGroup.add(successView);\n+\n+        final CheckGroup<String> failureGroup = new CheckGroup<String>(\n+                \"failureGroup\",\n+                selected);\n+\n+        failureGroup.add(new AjaxFormChoiceComponentUpdatingBehavior() {\n+\n+            private static final long serialVersionUID = -151291731388673682L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+\n+                final Set<String> toBeRemoved = new HashSet<>();\n+                final Set<String> toBeAdded = new HashSet<>();\n+\n+                for (String event : getEvents(eventCategoryTO)) {\n+                    final String eventString = AuditLoggerName.buildEvent(\n+                            eventCategoryTO.getType(),\n+                            eventCategoryTO.getCategory(),\n+                            eventCategoryTO.getSubcategory(),\n+                            event,\n+                            AuditElements.Result.FAILURE);\n+\n+                    if (failureGroup.getModelObject().contains(eventString)) {\n+                        toBeAdded.add(eventString);\n+                    } else {\n+                        toBeRemoved.add(eventString);\n+                    }\n+                }\n+\n+                send(EventSelectionPanel.this.getPage(), Broadcast.BREADTH,\n+                        new SelectedEventsPanel.EventSelectionChanged(target, toBeAdded, toBeRemoved));\n+            }\n+        });\n+\n+        failureGroup.setVisible(!events.isEmpty());\n+        add(failureGroup);\n+\n+        add(new Label(\"failureLabel\", new ResourceModel(\"Failure\", \"Failure\"))).setVisible(!events.isEmpty());\n+\n+        final CheckGroupSelector failureSelector = new CheckGroupSelector(\"failureSelector\", failureGroup);\n+        failureSelector.setVisible(!events.isEmpty());\n+        add(failureSelector);\n+\n+        final ListView<String> failureView = new AltListView<String>(\"failureView\", events) {\n+\n+            private static final long serialVersionUID = 4949588177564901031L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<String> item) {\n+                final String event = item.getModelObject();\n+\n+                final Check<String> failureCheck = new Check<>(\"failureCheck\",\n+                        new Model<String>(AuditLoggerName.buildEvent(\n+                                        eventCategoryTO.getType(),\n+                                        eventCategoryTO.getCategory(),\n+                                        eventCategoryTO.getSubcategory(),\n+                                        event,\n+                                        AuditElements.Result.FAILURE)),\n+                        failureGroup);\n+                item.add(failureCheck);\n+            }\n+        };\n+        failureGroup.add(failureView);\n+    }\n+\n+    private List<String> getEvents(final EventCategoryTO eventCategoryTO) {\n+        final List<String> res;\n+\n+        res = eventCategoryTO.getEvents();\n+\n+        if (res.isEmpty()) {\n+            if ((AuditElements.EventCategoryType.PROPAGATION == eventCategoryTO.getType()\n+                    || AuditElements.EventCategoryType.SYNCHRONIZATION == eventCategoryTO.getType()\n+                    || AuditElements.EventCategoryType.PUSH == eventCategoryTO.getType())\n+                    && StringUtils.isEmpty(eventCategoryTO.getCategory())) {\n+                res.add(eventCategoryTO.getType().toString());\n+            } else if (AuditElements.EventCategoryType.TASK == eventCategoryTO.getType()\n+                    && StringUtils.isNotEmpty(eventCategoryTO.getCategory())) {\n+                res.add(eventCategoryTO.getCategory());\n+            }\n+        } else {\n+            Collections.sort(res);\n+        }\n+\n+        return res;\n+    }\n+\n+    /**\n+     * To be extended in order to add actions on events.\n+     *\n+     * @param event event.\n+     */\n+    protected abstract void onEventAction(final IEvent<?> event);\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        onEventAction(event);\n+    }\n+}"},{"sha":"b0b3d9a8b1e515fcf5d952c27b4e2f95e4d7b800","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/ImagePanel.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImagePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImagePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FImagePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import org.apache.wicket.Component;\n+import org.apache.wicket.behavior.Behavior;\n+import org.apache.wicket.markup.html.image.Image;\n+import org.apache.wicket.markup.html.panel.Panel;\n+\n+public class ImagePanel extends Panel {\n+\n+    private static final long serialVersionUID = 5564818820574092960L;\n+\n+    final Image img;\n+\n+    public ImagePanel(final String id, final String img) {\n+        super(id);\n+        this.img = new Image(\"img\", img);\n+        add(this.img);\n+    }\n+\n+    @Override\n+    public Component add(final Behavior... behaviors) {\n+        this.img.add(behaviors);\n+        return this;\n+    }\n+}"},{"sha":"d898ba610706ad43aeac4e6c2b620d33f34c084d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/JQueryUITabbedPanel.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FJQueryUITabbedPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FJQueryUITabbedPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FJQueryUITabbedPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.List;\n+import org.apache.wicket.extensions.ajax.markup.html.tabs.AjaxTabbedPanel;\n+import org.apache.wicket.extensions.markup.html.tabs.ITab;\n+\n+/**\n+ * AjaxTabbedPanel with JQueryUI styling.\n+ */\n+public class JQueryUITabbedPanel<T extends ITab> extends AjaxTabbedPanel<T> {\n+\n+    private static final long serialVersionUID = -5059184710433341333L;\n+\n+    public JQueryUITabbedPanel(final String id, final List<T> tabs) {\n+        super(id, tabs);\n+    }\n+\n+    @Override\n+    protected String getTabContainerCssClass() {\n+        return \"\";\n+    }\n+\n+    @Override\n+    protected String getSelectedTabCssClass() {\n+        return \"ui-state-active selected\";\n+    }\n+}"},{"sha":"a68d8cda4f277ee8de96f2452b9f971ec6df1ef4","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/LayoutsPanel.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLayoutsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLayoutsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLayoutsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,130 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.AttrLayoutType;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.SelectChoiceRenderer;\n+import org.apache.syncope.client.console.commons.XMLRolesReader;\n+import org.apache.syncope.client.console.rest.ConfigurationRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class LayoutsPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(LayoutsPanel.class);\n+\n+    private static final long serialVersionUID = -6804066913177804275L;\n+\n+    private static final String CANCEL = \"cancel\";\n+\n+    private static final String APPLY = \"apply\";\n+\n+    @SpringBean\n+    protected XMLRolesReader xmlRolesReader;\n+\n+    @SpringBean\n+    private SchemaRestClient schemaRestClient;\n+\n+    @SpringBean\n+    private ConfigurationRestClient confRestClient;\n+\n+    @SuppressWarnings(\"unchecked\")\n+    public LayoutsPanel(final String id, final AttrLayoutType attrLayoutType, final NotificationPanel feedbackPanel) {\n+        super(id);\n+\n+        final WebMarkupContainer container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+\n+        final Form<String> form = new Form<String>(\"form\");\n+        form.setOutputMarkupId(true);\n+\n+        final AttrTO attrLayout = confRestClient.readAttrLayout(attrLayoutType);\n+        form.setModel(new CompoundPropertyModel(attrLayout.getValues()));\n+\n+        final List<String> fields = schemaRestClient.getSchemaNames(attrLayoutType.getAttrType());\n+        final ListModel<String> selectedFields =\n+                new ListModel<String>(attrLayout.getValues().isEmpty() ? fields : attrLayout.getValues());\n+        final ListModel<String> availableFields = new ListModel<String>(fields);\n+\n+        form.add(new AjaxPalettePanel<String>(\"fields\", selectedFields, availableFields,\n+                new SelectChoiceRenderer<String>(), true, true));\n+\n+        final AjaxButton submit = new IndicatingAjaxButton(APPLY, new ResourceModel(APPLY)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    confRestClient.set(attrLayout);\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                } catch (Exception e) {\n+                    LOG.error(\"While saving layout configuration\", e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                }\n+                feedbackPanel.refresh(target);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                error(getString(Constants.ERROR) + \": While saving layout configuration\");\n+                feedbackPanel.refresh(target);\n+            }\n+        };\n+\n+        form.add(submit);\n+\n+        final IndicatingAjaxButton cancel = new IndicatingAjaxButton(CANCEL, new ResourceModel(CANCEL)) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                target.add(container);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+            }\n+        };\n+\n+        cancel.setDefaultFormProcessing(false);\n+        form.add(cancel);\n+        container.add(form);\n+        add(container);\n+    }\n+}"},{"sha":"aa3c3eb1f506715aa4d4a469f92e93eaad25e0f1","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/LoggerCategoryPanel.java","status":"added","additions":468,"deletions":0,"changes":468,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLoggerCategoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLoggerCategoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FLoggerCategoryPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,468 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.SelectedEventsPanel.EventSelectionChanged;\n+import org.apache.syncope.client.console.panels.SelectedEventsPanel.InspectSelectedEvent;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.common.lib.to.EventCategoryTO;\n+import org.apache.syncope.common.lib.types.AuditElements;\n+import org.apache.syncope.common.lib.types.AuditElements.EventCategoryType;\n+import org.apache.syncope.common.lib.types.AuditLoggerName;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.event.Broadcast;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class LoggerCategoryPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(LoggerCategoryPanel.class);\n+\n+    private static final long serialVersionUID = 6429053774964787734L;\n+\n+    private final List<EventCategoryTO> eventCategoryTOs;\n+\n+    private final EventCategoryTO eventCategoryTO = new EventCategoryTO();\n+\n+    private final WebMarkupContainer categoryContainer;\n+\n+    private final WebMarkupContainer eventsContainer;\n+\n+    private final SelectedEventsPanel selectedEventsPanel;\n+\n+    private final AjaxDropDownChoicePanel<EventCategoryType> type;\n+\n+    private final AjaxDropDownChoicePanel<String> category;\n+\n+    private final AjaxDropDownChoicePanel<String> subcategory;\n+\n+    private final AjaxTextFieldPanel custom;\n+\n+    private final ActionLinksPanel actionPanel;\n+\n+    private final IModel<List<String>> model;\n+\n+    public LoggerCategoryPanel(\n+            final String id,\n+            final List<EventCategoryTO> eventCategoryTOs,\n+            final IModel<List<String>> model,\n+            final PageReference pageReference,\n+            final String pageId) {\n+        super(id);\n+\n+        this.model = model;\n+        selectedEventsPanel = new SelectedEventsPanel(\"selectedEventsPanel\", model);\n+        add(selectedEventsPanel);\n+\n+        this.eventCategoryTOs = eventCategoryTOs;\n+\n+        categoryContainer = new WebMarkupContainer(\"categoryContainer\");\n+        categoryContainer.setOutputMarkupId(true);\n+        add(categoryContainer);\n+\n+        eventsContainer = new WebMarkupContainer(\"eventsContainer\");\n+        eventsContainer.setOutputMarkupId(true);\n+        add(eventsContainer);\n+\n+        authorizeList();\n+        authorizeChanges();\n+\n+        categoryContainer.add(new Label(\"typeLabel\", new ResourceModel(\"type\", \"type\")));\n+\n+        type = new AjaxDropDownChoicePanel<EventCategoryType>(\n+                \"type\",\n+                \"type\",\n+                new PropertyModel<EventCategoryType>(eventCategoryTO, \"type\"),\n+                false);\n+        type.setChoices(Arrays.asList(EventCategoryType.values()));\n+        type.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        type.setChoiceRenderer(new IChoiceRenderer<EventCategoryType>() {\n+\n+            private static final long serialVersionUID = 2317134950949778735L;\n+\n+            @Override\n+            public String getDisplayValue(final EventCategoryType eventCategoryType) {\n+                return eventCategoryType.name();\n+            }\n+\n+            @Override\n+            public String getIdValue(final EventCategoryType eventCategoryType, final int i) {\n+                return eventCategoryType.name();\n+            }\n+        });\n+        categoryContainer.add(type);\n+\n+        type.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, type));\n+            }\n+        });\n+\n+        categoryContainer.add(new Label(\"categoryLabel\", new ResourceModel(\"category\", \"category\")));\n+\n+        category = new AjaxDropDownChoicePanel<String>(\n+                \"category\",\n+                \"category\",\n+                new PropertyModel<String>(eventCategoryTO, \"category\"),\n+                false);\n+        category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n+        category.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        categoryContainer.add(category);\n+\n+        category.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306811L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, category));\n+            }\n+        });\n+\n+        categoryContainer.add(new Label(\"subcategoryLabel\", new ResourceModel(\"subcategory\", \"subcategory\")));\n+\n+        subcategory = new AjaxDropDownChoicePanel<String>(\n+                \"subcategory\",\n+                \"subcategory\",\n+                new PropertyModel<String>(eventCategoryTO, \"subcategory\"),\n+                false);\n+        subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n+        subcategory.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+        categoryContainer.add(subcategory);\n+\n+        subcategory.getField().add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306812L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                send(LoggerCategoryPanel.this, Broadcast.EXACT, new ChangeCategoryEvent(target, subcategory));\n+            }\n+        });\n+\n+        categoryContainer.add(new Label(\"customLabel\", new ResourceModel(\"custom\", \"custom\")).setVisible(false));\n+\n+        custom = new AjaxTextFieldPanel(\"custom\", \"custom\", new Model<String>(null));\n+        custom.setStyleSheet(\"ui-widget-content ui-corner-all short_fixedsize\");\n+        custom.setVisible(false);\n+        custom.setEnabled(false);\n+\n+        categoryContainer.add(custom);\n+\n+        actionPanel = new ActionLinksPanel(\"customActions\", new Model(), pageReference);\n+        categoryContainer.add(actionPanel);\n+\n+        actionPanel.add(new ActionLink() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                if (StringUtils.isNotBlank(custom.getModelObject())) {\n+                    final Map.Entry<EventCategoryTO, AuditElements.Result> parsed =\n+                            AuditLoggerName.parseEventCategory(custom.getModelObject());\n+\n+                    final String eventString = AuditLoggerName.buildEvent(\n+                            parsed.getKey().getType(),\n+                            null,\n+                            null,\n+                            parsed.getKey().getEvents().isEmpty()\n+                                    ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                            parsed.getValue());\n+\n+                    custom.setModelObject(StringUtils.EMPTY);\n+                    send(LoggerCategoryPanel.this.getPage(), Broadcast.BREADTH, new EventSelectionChanged(\n+                            target,\n+                            Collections.<String>singleton(eventString),\n+                            Collections.<String>emptySet()));\n+                    target.add(categoryContainer);\n+                }\n+            }\n+        }, ActionLink.ActionType.CREATE, pageId, true);\n+\n+        actionPanel.add(new ActionLink() {\n+\n+            private static final long serialVersionUID = -3722207913631435502L;\n+\n+            @Override\n+            public void onClick(AjaxRequestTarget target) {\n+                if (StringUtils.isNotBlank(custom.getModelObject())) {\n+                    final Map.Entry<EventCategoryTO, AuditElements.Result> parsed =\n+                            AuditLoggerName.parseEventCategory(custom.getModelObject());\n+\n+                    final String eventString = AuditLoggerName.buildEvent(\n+                            parsed.getKey().getType(),\n+                            null,\n+                            null,\n+                            parsed.getKey().getEvents().isEmpty()\n+                                    ? StringUtils.EMPTY : parsed.getKey().getEvents().iterator().next(),\n+                            parsed.getValue());\n+\n+                    custom.setModelObject(StringUtils.EMPTY);\n+                    send(LoggerCategoryPanel.this.getPage(), Broadcast.BREADTH, new EventSelectionChanged(\n+                            target,\n+                            Collections.<String>emptySet(),\n+                            Collections.<String>singleton(eventString)));\n+                    target.add(categoryContainer);\n+                }\n+            }\n+        }, ActionLink.ActionType.DELETE, pageId, true);\n+\n+        actionPanel.setVisible(false);\n+        actionPanel.setEnabled(false);\n+\n+        eventsContainer.add(new EventSelectionPanel(\"eventsPanel\", eventCategoryTO, model) {\n+\n+            private static final long serialVersionUID = 3513194801190026082L;\n+\n+            @Override\n+            protected void onEventAction(final IEvent<?> event) {\n+                LoggerCategoryPanel.this.onEventAction(event);\n+            }\n+        });\n+    }\n+\n+    private List<String> filter(\n+            final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type) {\n+        final Set<String> res = new HashSet<String>();\n+\n+        for (EventCategoryTO eventCategory : eventCategoryTOs) {\n+            if (type == eventCategory.getType() && StringUtils.isNotEmpty(eventCategory.getCategory())) {\n+                res.add(eventCategory.getCategory());\n+            }\n+        }\n+\n+        final List<String> filtered = new ArrayList<String>(res);\n+        Collections.sort(filtered);\n+        return filtered;\n+    }\n+\n+    private List<String> filter(\n+            final List<EventCategoryTO> eventCategoryTOs, final EventCategoryType type, final String category) {\n+        final Set<String> res = new HashSet<String>();\n+\n+        for (EventCategoryTO eventCategory : eventCategoryTOs) {\n+            if (type == eventCategory.getType() && StringUtils.equals(category, eventCategory.getCategory())\n+                    && StringUtils.isNotEmpty(eventCategory.getSubcategory())) {\n+                res.add(eventCategory.getSubcategory());\n+            }\n+        }\n+\n+        final List<String> filtered = new ArrayList<String>(res);\n+        Collections.sort(filtered);\n+        return filtered;\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof ChangeCategoryEvent) {\n+            // update objects ....\n+            eventCategoryTO.getEvents().clear();\n+\n+            final ChangeCategoryEvent change = (ChangeCategoryEvent) event.getPayload();\n+\n+            final Panel changedPanel = change.getChangedPanel();\n+            if (\"type\".equals(changedPanel.getId())) {\n+                eventCategoryTO.setType(type.getModelObject());\n+                eventCategoryTO.setCategory(null);\n+                eventCategoryTO.setSubcategory(null);\n+\n+                if (type.getModelObject() == EventCategoryType.CUSTOM) {\n+                    category.setChoices(Collections.<String>emptyList());\n+                    subcategory.setChoices(Collections.<String>emptyList());\n+                    category.setEnabled(false);\n+                    subcategory.setEnabled(false);\n+                    custom.setVisible(true);\n+                    custom.setEnabled(true);\n+                    actionPanel.setVisible(true);\n+                    actionPanel.setEnabled(true);\n+\n+                } else {\n+                    category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n+                    subcategory.setChoices(Collections.<String>emptyList());\n+                    category.setEnabled(true);\n+                    subcategory.setEnabled(true);\n+                    custom.setVisible(false);\n+                    custom.setEnabled(false);\n+                    actionPanel.setVisible(false);\n+                    actionPanel.setEnabled(false);\n+                }\n+                change.getTarget().add(categoryContainer);\n+            } else if (\"category\".equals(changedPanel.getId())) {\n+                subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n+                eventCategoryTO.setCategory(category.getModelObject());\n+                eventCategoryTO.setSubcategory(null);\n+                change.getTarget().add(categoryContainer);\n+            } else {\n+                eventCategoryTO.setSubcategory(subcategory.getModelObject());\n+            }\n+\n+            updateEventsContainer(change.getTarget());\n+        } else if (event.getPayload() instanceof InspectSelectedEvent) {\n+            // update objects ....\n+            eventCategoryTO.getEvents().clear();\n+\n+            final InspectSelectedEvent inspectSelectedEvent = (InspectSelectedEvent) event.getPayload();\n+\n+            final Map.Entry<EventCategoryTO, AuditElements.Result> categoryEvent =\n+                    AuditLoggerName.parseEventCategory(inspectSelectedEvent.getEvent());\n+\n+            eventCategoryTO.setType(categoryEvent.getKey().getType());\n+            category.setChoices(filter(eventCategoryTOs, type.getModelObject()));\n+\n+            eventCategoryTO.setCategory(categoryEvent.getKey().getCategory());\n+            subcategory.setChoices(filter(eventCategoryTOs, type.getModelObject(), category.getModelObject()));\n+\n+            eventCategoryTO.setSubcategory(categoryEvent.getKey().getSubcategory());\n+\n+            if (categoryEvent.getKey().getType() == EventCategoryType.CUSTOM) {\n+                custom.setModelObject(AuditLoggerName.buildEvent(\n+                        categoryEvent.getKey().getType(),\n+                        categoryEvent.getKey().getCategory(),\n+                        categoryEvent.getKey().getSubcategory(),\n+                        categoryEvent.getKey().getEvents().isEmpty()\n+                                ? StringUtils.EMPTY : categoryEvent.getKey().getEvents().iterator().next(),\n+                        categoryEvent.getValue()));\n+\n+                category.setEnabled(false);\n+                subcategory.setEnabled(false);\n+                custom.setVisible(true);\n+                custom.setEnabled(true);\n+                actionPanel.setVisible(true);\n+                actionPanel.setEnabled(true);\n+            } else {\n+                category.setEnabled(true);\n+                subcategory.setEnabled(true);\n+                custom.setVisible(false);\n+                custom.setEnabled(false);\n+                actionPanel.setVisible(false);\n+                actionPanel.setEnabled(false);\n+            }\n+\n+            inspectSelectedEvent.getTarget().add(categoryContainer);\n+            updateEventsContainer(inspectSelectedEvent.getTarget());\n+        }\n+    }\n+\n+    private void setEvents() {\n+        final Iterator<EventCategoryTO> itor = eventCategoryTOs.iterator();\n+        while (itor.hasNext() && eventCategoryTO.getEvents().isEmpty()) {\n+            final EventCategoryTO eventCategory = itor.next();\n+            if (eventCategory.getType() == eventCategoryTO.getType()\n+                    && StringUtils.equals(eventCategory.getCategory(), eventCategoryTO.getCategory())\n+                    && StringUtils.equals(eventCategory.getSubcategory(), eventCategoryTO.getSubcategory())) {\n+                eventCategoryTO.getEvents().addAll(eventCategory.getEvents());\n+            }\n+        }\n+    }\n+\n+    private class ChangeCategoryEvent {\n+\n+        private final AjaxRequestTarget target;\n+\n+        private final Panel changedPanel;\n+\n+        public ChangeCategoryEvent(final AjaxRequestTarget target, final Panel changedPanel) {\n+            this.target = target;\n+            this.changedPanel = changedPanel;\n+        }\n+\n+        public AjaxRequestTarget getTarget() {\n+            return target;\n+        }\n+\n+        public Panel getChangedPanel() {\n+            return changedPanel;\n+        }\n+    }\n+\n+    /**\n+     * To be extended in order to add actions on events.\n+     *\n+     * @param event event.\n+     */\n+    protected void onEventAction(final IEvent<?> event) {\n+        // nothing by default\n+    }\n+\n+    private void authorizeList() {\n+        for (String role : getListRoles()) {\n+            MetaDataRoleAuthorizationStrategy.authorize(selectedEventsPanel, RENDER, role);\n+        }\n+    }\n+\n+    private void authorizeChanges() {\n+        for (String role : getChangeRoles()) {\n+            MetaDataRoleAuthorizationStrategy.authorize(categoryContainer, RENDER, role);\n+            MetaDataRoleAuthorizationStrategy.authorize(eventsContainer, RENDER, role);\n+        }\n+    }\n+\n+    private void updateEventsContainer(final AjaxRequestTarget target) {\n+        setEvents();\n+\n+        eventsContainer.addOrReplace(new EventSelectionPanel(\"eventsPanel\", eventCategoryTO, model) {\n+\n+            private static final long serialVersionUID = 3513194801190026082L;\n+\n+            @Override\n+            public void onEventAction(final IEvent<?> event) {\n+                LoggerCategoryPanel.this.onEventAction(event);\n+            }\n+        });\n+        target.add(eventsContainer);\n+    }\n+\n+    protected abstract String[] getListRoles();\n+\n+    protected abstract String[] getChangeRoles();\n+}"},{"sha":"fb00dcf8e5e6f9e2c8c720ae6c5af19015d853b0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/MembershipsPanel.java","status":"added","additions":256,"deletions":0,"changes":256,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembershipsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembershipsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FMembershipsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,256 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.swing.tree.DefaultMutableTreeNode;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.commons.RoleTreeBuilder;\n+import org.apache.syncope.client.console.commons.RoleUtils;\n+import org.apache.syncope.client.console.commons.status.StatusUtils;\n+import org.apache.syncope.client.console.pages.MembershipModalPage;\n+import org.apache.syncope.client.console.pages.UserModalPage;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.IndicatingOnConfirmAjaxLink;\n+import org.apache.syncope.client.console.wicket.markup.html.tree.DefaultMutableTreeNodeExpansion;\n+import org.apache.syncope.client.console.wicket.markup.html.tree.DefaultMutableTreeNodeExpansionModel;\n+import org.apache.syncope.client.console.wicket.markup.html.tree.TreeRoleProvider;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.DefaultNestedTree;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.ITreeProvider;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.NestedTree;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.content.Folder;\n+import org.apache.wicket.extensions.markup.html.repeater.tree.theme.WindowsTheme;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class MembershipsPanel extends Panel {\n+\n+    private static final long serialVersionUID = -2559791301973107191L;\n+\n+    @SpringBean\n+    private RoleTreeBuilder roleTreeBuilder;\n+\n+    private final ListView<MembershipTO> membView;\n+\n+    private final UserTO userTO;\n+\n+    private final StatusPanel statusPanel;\n+\n+    private final NestedTree<DefaultMutableTreeNode> tree;\n+\n+    public MembershipsPanel(final String id, final UserTO userTO, final Mode mode,\n+            final StatusPanel statusPanel, final PageReference pageRef) {\n+\n+        super(id);\n+        this.userTO = userTO;\n+        this.statusPanel = statusPanel;\n+\n+        final WebMarkupContainer membershipsContainer = new WebMarkupContainer(\"membershipsContainer\");\n+        membershipsContainer.setOutputMarkupId(true);\n+        add(membershipsContainer);\n+\n+        final ModalWindow membWin = new ModalWindow(\"membershipWin\");\n+        membWin.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        membWin.setCookieName(\"create-membership-modal\");\n+        add(membWin);\n+\n+        final ITreeProvider<DefaultMutableTreeNode> treeProvider = new TreeRoleProvider(roleTreeBuilder, true);\n+        final DefaultMutableTreeNodeExpansionModel treeModel = new DefaultMutableTreeNodeExpansionModel();\n+\n+        tree = new DefaultNestedTree<DefaultMutableTreeNode>(\"treeTable\", treeProvider, treeModel) {\n+\n+            private static final long serialVersionUID = 7137658050662575546L;\n+\n+            @Override\n+            protected Component newContentComponent(final String id, final IModel<DefaultMutableTreeNode> node) {\n+                final DefaultMutableTreeNode treeNode = node.getObject();\n+                final RoleTO roleTO = (RoleTO) treeNode.getUserObject();\n+\n+                return new Folder<DefaultMutableTreeNode>(id, MembershipsPanel.this.tree, node) {\n+\n+                    private static final long serialVersionUID = 9046323319920426493L;\n+\n+                    @Override\n+                    protected boolean isClickable() {\n+                        return true;\n+                    }\n+\n+                    @Override\n+                    protected IModel<?> newLabelModel(final IModel<DefaultMutableTreeNode> model) {\n+                        return new Model<String>(roleTO.getDisplayName());\n+                    }\n+\n+                    @Override\n+                    protected void onClick(final AjaxRequestTarget target) {\n+                        if (roleTO.getKey() > 0) {\n+                            membWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                                private static final long serialVersionUID = 7661763358801821185L;\n+\n+                                @Override\n+                                public Page createPage() {\n+                                    PageReference pageRef = getPage().getPageReference();\n+\n+                                    for (MembershipTO membTO : membView.getList()) {\n+                                        if (membTO.getRoleId() == roleTO.getKey()) {\n+                                            return new MembershipModalPage(pageRef, membWin, membTO, mode);\n+                                        }\n+                                    }\n+                                    MembershipTO membTO = new MembershipTO();\n+                                    membTO.setRoleId(roleTO.getKey());\n+                                    membTO.setRoleName(roleTO.getName());\n+\n+                                    return new MembershipModalPage(pageRef, membWin, membTO, mode);\n+                                }\n+                            });\n+                            membWin.show(target);\n+                        }\n+                    }\n+                };\n+            }\n+        };\n+        tree.add(new WindowsTheme());\n+        tree.setOutputMarkupId(true);\n+\n+        DefaultMutableTreeNodeExpansion.get().expandAll();\n+\n+        this.add(tree);\n+\n+        membView = new ListView<MembershipTO>(\"memberships\",\n+                new PropertyModel<List<? extends MembershipTO>>(userTO, \"memberships\")) {\n+\n+                    private static final long serialVersionUID = 9101744072914090143L;\n+\n+                    @Override\n+                    protected void populateItem(final ListItem<MembershipTO> item) {\n+                        final MembershipTO membershipTO = (MembershipTO) item.getDefaultModelObject();\n+\n+                        item.add(new Label(\"roleId\", new Model<Long>(membershipTO.getRoleId())));\n+                        item.add(new Label(\"roleName\", new Model<String>(membershipTO.getRoleName())));\n+\n+                        AjaxLink editLink = new ClearIndicatingAjaxLink(\"editLink\", pageRef) {\n+\n+                            private static final long serialVersionUID = -7978723352517770644L;\n+\n+                            @Override\n+                            protected void onClickInternal(final AjaxRequestTarget target) {\n+                                membWin.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                                    @Override\n+                                    public Page createPage() {\n+                                        return new MembershipModalPage(getPage().getPageReference(), membWin,\n+                                                membershipTO, mode);\n+\n+                                    }\n+                                });\n+                                membWin.show(target);\n+                            }\n+                        };\n+                        item.add(editLink);\n+\n+                        AjaxLink deleteLink = new IndicatingOnConfirmAjaxLink(\"deleteLink\", pageRef) {\n+\n+                            private static final long serialVersionUID = -7978723352517770644L;\n+\n+                            @Override\n+                            protected void onClickInternal(final AjaxRequestTarget target) {\n+                                userTO.getMemberships().remove(membershipTO);\n+                                ((UserModalPage) getPage()).getUserTO().getMemberships().remove(membershipTO);\n+                                target.add(membershipsContainer);\n+\n+                                RoleTO roleTO = RoleUtils.findRole(roleTreeBuilder, membershipTO.getRoleId());\n+                                Set<String> resourcesToRemove = roleTO == null\n+                                        ? Collections.<String>emptySet() : roleTO.getResources();\n+                                if (!resourcesToRemove.isEmpty()) {\n+                                    Set<String> resourcesAssignedViaMembership = new HashSet<String>();\n+                                    for (MembershipTO membTO : userTO.getMemberships()) {\n+                                        roleTO = RoleUtils.findRole(roleTreeBuilder, membTO.getRoleId());\n+                                        if (roleTO != null) {\n+                                            resourcesAssignedViaMembership.addAll(roleTO.getResources());\n+                                        }\n+                                    }\n+                                    resourcesToRemove.removeAll(resourcesAssignedViaMembership);\n+                                    resourcesToRemove.removeAll(userTO.getResources());\n+                                }\n+\n+                                StatusUtils.update(\n+                                        userTO, statusPanel, target, Collections.<String>emptySet(), resourcesToRemove);\n+                            }\n+                        };\n+                        item.add(deleteLink);\n+                    }\n+                };\n+\n+        membershipsContainer.add(membView);\n+\n+        setWindowClosedCallback(membWin, membershipsContainer);\n+    }\n+\n+    private void setWindowClosedCallback(final ModalWindow window, final WebMarkupContainer container) {\n+        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                final UserTO updatedUserTO = ((UserModalPage) getPage()).getUserTO();\n+                if (!userTO.equals(updatedUserTO)) {\n+                    if (updatedUserTO.getMemberships().size() > userTO.getMemberships().size()) {\n+                        Set<Long> diff = new HashSet<Long>(updatedUserTO.getMembershipMap().keySet());\n+                        diff.removeAll(userTO.getMembershipMap().keySet());\n+\n+                        Set<String> resourcesToAdd = new HashSet<String>();\n+                        for (Long diffMembId : diff) {\n+                            long roleId = updatedUserTO.getMembershipMap().get(diffMembId).getRoleId();\n+                            RoleTO roleTO = RoleUtils.findRole(roleTreeBuilder, roleId);\n+                            resourcesToAdd.addAll(roleTO.getResources());\n+                            StatusUtils.update(\n+                                    userTO, statusPanel, target, resourcesToAdd, Collections.<String>emptySet());\n+                        }\n+                    }\n+\n+                    MembershipsPanel.this.userTO.getMemberships().clear();\n+                    MembershipsPanel.this.userTO.getMemberships().addAll(updatedUserTO.getMemberships());\n+                    target.add(container);\n+                }\n+            }\n+        });\n+    }\n+}"},{"sha":"8624d26173c57f2ed5d76638f43df0d8164df442","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/NotificationPanel.java","status":"added","additions":119,"deletions":0,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,119 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.wicket.AttributeModifier;\n+import org.apache.wicket.ajax.AjaxEventBehavior;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.feedback.FeedbackMessage;\n+import org.apache.wicket.feedback.IFeedbackMessageFilter;\n+import org.apache.wicket.markup.html.panel.FeedbackPanel;\n+import org.apache.wicket.model.Model;\n+\n+public class NotificationPanel extends FeedbackPanel {\n+\n+    private static final long serialVersionUID = 5895940553202128621L;\n+\n+    private static final String CSS_CLASS = \"notificationpanel\";\n+\n+    private static final String DEFAULT_ADDITIONAL_CSS_CLASS = \"notificationpanel_top_right\";\n+\n+    private final String additionalCSSClass;\n+\n+    public NotificationPanel(final String id) {\n+        this(id, null, null);\n+    }\n+\n+    public NotificationPanel(final String id, final String additionalCSSClass,\n+            final IFeedbackMessageFilter feedbackMessageFilter) {\n+\n+        super(id, feedbackMessageFilter);\n+\n+        this.add(new AjaxEventBehavior(Constants.ON_CLICK) {\n+\n+            private static final long serialVersionUID = -7133385027739964990L;\n+\n+            @Override\n+            protected void onEvent(final AjaxRequestTarget target) {\n+                target.appendJavaScript(\n+                        \"setTimeout(\\\"$('div#\" + getMarkupId() + \"').fadeOut('normal')\\\", 0);\");\n+            }\n+        });\n+\n+        this.additionalCSSClass = StringUtils.isBlank(additionalCSSClass)\n+                ? DEFAULT_ADDITIONAL_CSS_CLASS\n+                : additionalCSSClass;\n+\n+        // set custom markup id and ouput it, to find the component later on in the js function\n+        setMarkupId(id);\n+        setOutputMarkupId(true);\n+\n+        // Add the additional cssClass and hide the element by default\n+        add(new AttributeModifier(\"class\", new Model<String>(CSS_CLASS + \" \" + this.additionalCSSClass)));\n+        add(new AttributeModifier(\"style\", new Model<String>(\"opacity: 0;\")));\n+    }\n+\n+    /**\n+     * Method to refresh the notification panel.\n+     *\n+     * If there are any feedback messages for the user, find the gravest level, format the notification panel\n+     * accordingly and show it.\n+     *\n+     * @param target AjaxRequestTarget to add panel and the calling javascript function\n+     */\n+    public void refresh(final AjaxRequestTarget target) {\n+        // any feedback at all in the current form?\n+        if (anyMessage()) {\n+            int highestFeedbackLevel = FeedbackMessage.INFO;\n+\n+            // any feedback with the given level?\n+            if (anyMessage(FeedbackMessage.WARNING)) {\n+                highestFeedbackLevel = FeedbackMessage.WARNING;\n+            }\n+            if (anyMessage(FeedbackMessage.ERROR)) {\n+                highestFeedbackLevel = FeedbackMessage.ERROR;\n+            }\n+\n+            // add the css classes to the notification panel, \n+            // including the border css which represents the highest level of feedback\n+            add(new AttributeModifier(\"class\",\n+                    new Model<String>(CSS_CLASS\n+                            + \" \" + additionalCSSClass\n+                            + \" notificationpanel_border_\" + highestFeedbackLevel)));\n+\n+            // refresh the panel and call the js function with the panel markup id \n+            // and the total count of messages\n+            target.add(this);\n+            if (anyMessage(FeedbackMessage.ERROR)) {\n+                target.appendJavaScript(\n+                        \"$('div#\" + getMarkupId() + \"').fadeTo('normal', 1.0);\");\n+            } else {\n+                target.appendJavaScript(\n+                        \"showNotification('\" + getMarkupId() + \"', \" + getCurrentMessages().size() + \");\");\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected String getCSSClass(final FeedbackMessage message) {\n+        return \"notificationpanel_row_\" + message.getLevelAsString();\n+    }\n+}"},{"sha":"41ac64eccad769d2f4d40c2c26f33717af843e5a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/NotificationTasks.java","status":"added","additions":254,"deletions":0,"changes":254,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNotificationTasks.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,254 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.pages.NotificationTaskModalPage;\n+import org.apache.syncope.client.console.pages.Tasks;\n+import org.apache.syncope.client.console.pages.Tasks.TasksProvider;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.ActionColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractTaskTO;\n+import org.apache.syncope.common.lib.to.NotificationTaskTO;\n+import org.apache.wicket.Component;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.StringResourceModel;\n+import org.apache.wicket.request.http.WebResponse;\n+\n+public class NotificationTasks extends AbstractTasks {\n+\n+    private static final long serialVersionUID = 4984337552918213290L;\n+\n+    private int paginatorRows;\n+\n+    private WebMarkupContainer container;\n+\n+    private boolean operationResult = false;\n+\n+    private ModalWindow window;\n+\n+    private AjaxDataTablePanel<AbstractTaskTO, String> table;\n+\n+    public NotificationTasks(final String id, final PageReference pageRef) {\n+        super(id, pageRef);\n+\n+        container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n+        add(window = new ModalWindow(\"taskWin\"));\n+\n+        paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS);\n+\n+        table = Tasks.updateTaskTable(\n+                getColumns(),\n+                new TasksProvider<NotificationTaskTO>(restClient, paginatorRows, getId(), NotificationTaskTO.class),\n+                container,\n+                0,\n+                pageRef,\n+                restClient);\n+\n+        container.add(table);\n+\n+        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                target.add(container);\n+                if (operationResult) {\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                    target.add(getPage().get(Constants.FEEDBACK));\n+                    operationResult = false;\n+                }\n+            }\n+        });\n+\n+        window.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        window.setInitialHeight(WIN_HEIGHT);\n+        window.setInitialWidth(WIN_WIDTH);\n+        window.setCookieName(VIEW_TASK_WIN_COOKIE_NAME);\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        final Form paginatorForm = new Form(\"PaginatorForm\");\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequest(), (WebResponse) getResponse(),\n+                        Constants.PREF_NOTIFICATION_TASKS_PAGINATOR_ROWS, String.valueOf(paginatorRows));\n+\n+                table = Tasks.updateTaskTable(\n+                        getColumns(),\n+                        new TasksProvider<NotificationTaskTO>(restClient, paginatorRows, getId(),\n+                                NotificationTaskTO.class),\n+                        container,\n+                        table == null ? 0 : (int) table.getCurrentPage(),\n+                        pageRef,\n+                        restClient);\n+\n+                target.add(container);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+    }\n+\n+    private List<IColumn<AbstractTaskTO, String>> getColumns() {\n+        final List<IColumn<AbstractTaskTO, String>> columns = new ArrayList<IColumn<AbstractTaskTO, String>>();\n+\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n+                new StringResourceModel(\"id\", this, null), \"id\", \"id\"));\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n+                new StringResourceModel(\"sender\", this, null), \"sender\", \"sender\"));\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n+                new StringResourceModel(\"recipients\", this, null), \"recipients\", \"recipients\"));\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n+                new StringResourceModel(\"subject\", this, null), \"subject\", \"subject\"));\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n+                new StringResourceModel(\"traceLevel\", this, null), \"traceLevel\", \"traceLevel\"));\n+        columns.add(new PropertyColumn<AbstractTaskTO, String>(\n+                new StringResourceModel(\"latestExecStatus\", this, null), \"latestExecStatus\", \"latestExecStatus\"));\n+\n+        columns.add(new ActionColumn<AbstractTaskTO, String>(new StringResourceModel(\"actions\", this, null, \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public ActionLinksPanel getActions(final String componentId, final IModel<AbstractTaskTO> model) {\n+\n+                final AbstractTaskTO taskTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, pageRef);\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+\n+                        window.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @Override\n+                            public Page createPage() {\n+                                return new NotificationTaskModalPage(taskTO);\n+                            }\n+                        });\n+\n+                        window.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, TASKS);\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            restClient.startExecution(taskTO.getKey(), false);\n+                            getSession().info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException scce) {\n+                            error(scce.getMessage());\n+                        }\n+\n+                        ((NotificationPanel) getPage().get(Constants.FEEDBACK)).refresh(target);\n+                        target.add(container);\n+                    }\n+                }, ActionLink.ActionType.EXECUTE, TASKS);\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            restClient.delete(taskTO.getKey(), NotificationTaskTO.class);\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException scce) {\n+                            error(scce.getMessage());\n+                        }\n+                        target.add(container);\n+                        ((NotificationPanel) getPage().get(Constants.FEEDBACK)).refresh(target);\n+                    }\n+                }, ActionLink.ActionType.DELETE, TASKS);\n+\n+                return panel;\n+            }\n+\n+            @Override\n+            public Component getHeader(String componentId) {\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, new Model(), pageRef);\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        if (target != null) {\n+                            target.add(table);\n+                        }\n+                    }\n+                }, ActionLink.ActionType.RELOAD, TASKS, \"list\");\n+\n+                return panel;\n+            }\n+        });\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if (event.getPayload() instanceof AbstractSearchResultPanel.EventDataWrapper) {\n+            ((AbstractSearchResultPanel.EventDataWrapper) event.getPayload()).getTarget().add(container);\n+        }\n+    }\n+}"},{"sha":"34d4f815a9267325fde40fcf3659af6887ece314","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/PlainAttrsPanel.java","status":"added","additions":395,"deletions":0,"changes":395,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPlainAttrsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,395 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Comparator;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Iterator;\n+import java.util.LinkedHashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import java.util.TreeMap;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.AttrLayoutType;\n+import org.apache.syncope.client.console.commons.JexlHelpUtil;\n+import org.apache.syncope.client.console.commons.Mode;\n+import org.apache.syncope.client.console.panels.AttrTemplatesPanel.RoleAttrTemplatesChange;\n+import org.apache.syncope.client.console.rest.ConfigurationRestClient;\n+import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.BinaryFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.DateTextFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.DateTimeFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.form.SpinnerFieldPanel;\n+import org.apache.syncope.client.console.wicket.markup.html.list.AltListView;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.AbstractAttributableTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.ConfTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.PlainSchemaTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.event.IEvent;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.IChoiceRenderer;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+\n+public class PlainAttrsPanel extends Panel {\n+\n+    private static final long serialVersionUID = 552437609667518888L;\n+\n+    @SpringBean\n+    private SchemaRestClient schemaRestClient;\n+\n+    @SpringBean\n+    private ConfigurationRestClient confRestClient;\n+\n+    @SpringBean\n+    private RoleRestClient roleRestClient;\n+\n+    private final AbstractAttributableTO entityTO;\n+\n+    private final Mode mode;\n+\n+    private final AttrTemplatesPanel attrTemplates;\n+\n+    private Map<String, PlainSchemaTO> schemas = new LinkedHashMap<>();\n+\n+    public <T extends AbstractAttributableTO> PlainAttrsPanel(final String id, final T entityTO,\n+            final Form<?> form, final Mode mode) {\n+\n+        this(id, entityTO, form, mode, null);\n+    }\n+\n+    public <T extends AbstractAttributableTO> PlainAttrsPanel(final String id, final T entityTO,\n+            final Form<?> form, final Mode mode, final AttrTemplatesPanel attrTemplates) {\n+\n+        super(id);\n+        this.entityTO = entityTO;\n+        this.mode = mode;\n+        this.attrTemplates = attrTemplates;\n+        this.setOutputMarkupId(true);\n+\n+        setSchemas();\n+        setAttrs();\n+\n+        add(new AltListView<AttrTO>(\"schemas\", new PropertyModel<List<? extends AttrTO>>(entityTO, \"attrs\")) {\n+\n+            private static final long serialVersionUID = 9101744072914090143L;\n+\n+            @Override\n+            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+            protected void populateItem(final ListItem<AttrTO> item) {\n+                final AttrTO attributeTO = (AttrTO) item.getDefaultModelObject();\n+\n+                final WebMarkupContainer jexlHelp = JexlHelpUtil.getJexlHelpWebContainer(\"jexlHelp\");\n+\n+                final AjaxLink<Void> questionMarkJexlHelp = JexlHelpUtil.getAjaxLink(jexlHelp, \"questionMarkJexlHelp\");\n+                item.add(questionMarkJexlHelp);\n+                questionMarkJexlHelp.add(jexlHelp);\n+\n+                if (mode != Mode.TEMPLATE) {\n+                    questionMarkJexlHelp.setVisible(false);\n+                }\n+\n+                item.add(new Label(\"name\", attributeTO.getSchema()));\n+\n+                final FieldPanel panel = getFieldPanel(schemas.get(attributeTO.getSchema()), form, attributeTO);\n+\n+                if (mode == Mode.TEMPLATE || !schemas.get(attributeTO.getSchema()).isMultivalue()) {\n+                    item.add(panel);\n+                } else {\n+                    item.add(new MultiFieldPanel<String>(\n+                            \"panel\", new PropertyModel<List<String>>(attributeTO, \"values\"), panel));\n+                }\n+            }\n+        }\n+        );\n+    }\n+\n+    private void setSchemas() {\n+        AttrTO attrLayout = null;\n+        List<PlainSchemaTO> schemaTOs;\n+\n+        if (entityTO instanceof RoleTO) {\n+            final RoleTO roleTO = (RoleTO) entityTO;\n+\n+            attrLayout = confRestClient.readAttrLayout(AttrLayoutType.valueOf(mode, AttributableType.ROLE));\n+            schemaTOs = schemaRestClient.getSchemas(AttributableType.ROLE);\n+            Set<String> allowed;\n+            if (attrTemplates == null) {\n+                allowed = new HashSet<>(roleTO.getRAttrTemplates());\n+            } else {\n+                allowed = new HashSet<>(attrTemplates.getSelected(AttrTemplatesPanel.Type.rAttrTemplates));\n+                if (roleTO.isInheritTemplates() && roleTO.getParent() != 0) {\n+                    allowed.addAll(roleRestClient.read(roleTO.getParent()).getRAttrTemplates());\n+                }\n+            }\n+            schemaRestClient.filter(schemaTOs, allowed, true);\n+        } else if (entityTO instanceof UserTO) {\n+            attrLayout = confRestClient.readAttrLayout(AttrLayoutType.valueOf(mode, AttributableType.USER));\n+            schemaTOs = schemaRestClient.getSchemas(AttributableType.USER);\n+        } else if (entityTO instanceof MembershipTO) {\n+            attrLayout = confRestClient.readAttrLayout(AttrLayoutType.valueOf(mode, AttributableType.MEMBERSHIP));\n+            schemaTOs = schemaRestClient.getSchemas(AttributableType.MEMBERSHIP);\n+            Set<String> allowed = new HashSet<>(\n+                    roleRestClient.read(((MembershipTO) entityTO).getRoleId()).getMAttrTemplates());\n+            schemaRestClient.filter(schemaTOs, allowed, true);\n+        } else {\n+            schemas = new TreeMap<>();\n+            schemaTOs = schemaRestClient.getSchemas(AttributableType.CONFIGURATION);\n+            for (Iterator<PlainSchemaTO> it = schemaTOs.iterator(); it.hasNext();) {\n+                PlainSchemaTO schemaTO = it.next();\n+                for (AttrLayoutType type : AttrLayoutType.values()) {\n+                    if (type.getConfKey().equals(schemaTO.getKey())) {\n+                        it.remove();\n+                    }\n+                }\n+            }\n+        }\n+\n+        schemas.clear();\n+\n+        if (attrLayout != null && mode != Mode.TEMPLATE && !(entityTO instanceof ConfTO)) {\n+            // 1. remove attributes not selected for display\n+            schemaRestClient.filter(schemaTOs, attrLayout.getValues(), true);\n+            // 2. sort remainig attributes according to configuration, e.g. attrLayout\n+            final Map<String, Integer> attrLayoutMap = new HashMap<>(attrLayout.getValues().size());\n+            for (int i = 0; i < attrLayout.getValues().size(); i++) {\n+                attrLayoutMap.put(attrLayout.getValues().get(i), i);\n+            }\n+            Collections.sort(schemaTOs, new Comparator<PlainSchemaTO>() {\n+\n+                @Override\n+                public int compare(final PlainSchemaTO schema1, final PlainSchemaTO schema2) {\n+                    int value = 0;\n+\n+                    if (attrLayoutMap.get(schema1.getKey()) > attrLayoutMap.get(schema2.getKey())) {\n+                        value = 1;\n+                    } else if (attrLayoutMap.get(schema1.getKey()) < attrLayoutMap.get(schema2.getKey())) {\n+                        value = -1;\n+                    }\n+\n+                    return value;\n+                }\n+            });\n+        }\n+        for (PlainSchemaTO schemaTO : schemaTOs) {\n+            schemas.put(schemaTO.getKey(), schemaTO);\n+        }\n+    }\n+\n+    private void setAttrs() {\n+        final List<AttrTO> entityData = new ArrayList<>();\n+\n+        final Map<String, AttrTO> attrMap = entityTO.getPlainAttrMap();\n+\n+        for (PlainSchemaTO schema : schemas.values()) {\n+            final AttrTO attributeTO = new AttrTO();\n+            attributeTO.setSchema(schema.getKey());\n+\n+            if (attrMap.get(schema.getKey()) == null || attrMap.get(schema.getKey()).getValues().isEmpty()) {\n+                attributeTO.getValues().add(\"\");\n+\n+                // is important to set readonly only after values setting\n+                attributeTO.setReadonly(schema.isReadonly());\n+            } else {\n+                attributeTO.getValues().addAll(attrMap.get(schema.getKey()).getValues());\n+            }\n+            entityData.add(attributeTO);\n+        }\n+\n+        entityTO.getPlainAttrs().clear();\n+        entityTO.getPlainAttrs().addAll(entityData);\n+    }\n+\n+    @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n+    private FieldPanel getFieldPanel(final PlainSchemaTO schemaTO, final Form form, final AttrTO attributeTO) {\n+        final boolean required = mode == Mode.TEMPLATE\n+                ? false\n+                : schemaTO.getMandatoryCondition().equalsIgnoreCase(\"true\");\n+\n+        final boolean readOnly = mode == Mode.TEMPLATE ? false : schemaTO.isReadonly();\n+\n+        final AttrSchemaType type = mode == Mode.TEMPLATE ? AttrSchemaType.String : schemaTO.getType();\n+\n+        final FieldPanel panel;\n+        switch (type) {\n+            case Boolean:\n+                panel = new AjaxCheckBoxPanel(\"panel\", schemaTO.getKey(), new Model<Boolean>());\n+                panel.setRequired(required);\n+                break;\n+\n+            case Date:\n+                final String dataPattern = schemaTO.getConversionPattern() == null\n+                        ? SyncopeConstants.DEFAULT_DATE_PATTERN\n+                        : schemaTO.getConversionPattern();\n+\n+                if (dataPattern.contains(\"H\")) {\n+                    panel = new DateTimeFieldPanel(\"panel\", schemaTO.getKey(), new Model<Date>(), dataPattern);\n+\n+                    if (required) {\n+                        panel.addRequiredLabel();\n+                        ((DateTimeFieldPanel) panel).setFormValidator(form);\n+                    }\n+                    panel.setStyleSheet(\"ui-widget-content ui-corner-all\");\n+                } else {\n+                    panel = new DateTextFieldPanel(\"panel\", schemaTO.getKey(), new Model<Date>(), dataPattern);\n+\n+                    if (required) {\n+                        panel.addRequiredLabel();\n+                    }\n+                }\n+                break;\n+\n+            case Enum:\n+                panel = new AjaxDropDownChoicePanel<String>(\"panel\", schemaTO.getKey(), new Model<String>());\n+                ((AjaxDropDownChoicePanel<String>) panel).setChoices(getEnumeratedValues(schemaTO));\n+\n+                if (StringUtils.isNotBlank(schemaTO.getEnumerationKeys())) {\n+                    ((AjaxDropDownChoicePanel) panel).setChoiceRenderer(new IChoiceRenderer<String>() {\n+\n+                        private static final long serialVersionUID = -3724971416312135885L;\n+\n+                        private final Map<String, String> valueMap = getEnumeratedKeyValues(schemaTO);\n+\n+                        @Override\n+                        public String getDisplayValue(final String value) {\n+                            return valueMap.get(value) == null ? value : valueMap.get(value);\n+                        }\n+\n+                        @Override\n+                        public String getIdValue(final String value, final int i) {\n+                            return value;\n+                        }\n+                    });\n+                }\n+\n+                if (required) {\n+                    panel.addRequiredLabel();\n+                }\n+                break;\n+\n+            case Long:\n+                panel = new SpinnerFieldPanel<Long>(\"panel\", schemaTO.getKey(),\n+                        Long.class, new Model<Long>(), null, null);\n+\n+                if (required) {\n+                    panel.addRequiredLabel();\n+                }\n+                break;\n+\n+            case Double:\n+                panel = new SpinnerFieldPanel<Double>(\"panel\", schemaTO.getKey(),\n+                        Double.class, new Model<Double>(), null, null);\n+\n+                if (required) {\n+                    panel.addRequiredLabel();\n+                }\n+                break;\n+\n+            case Binary:\n+                panel = new BinaryFieldPanel(\"panel\", schemaTO.getKey(), new Model<String>(),\n+                        schemas.containsKey(schemaTO.getKey())\n+                                ? schemas.get(schemaTO.getKey()).getMimeType()\n+                                : null);\n+\n+                if (required) {\n+                    panel.addRequiredLabel();\n+                }\n+                break;\n+\n+            default:\n+                panel = new AjaxTextFieldPanel(\"panel\", schemaTO.getKey(), new Model<String>());\n+\n+                if (required) {\n+                    panel.addRequiredLabel();\n+                }\n+        }\n+\n+        panel.setReadOnly(readOnly);\n+        panel.setNewModel(attributeTO.getValues());\n+\n+        return panel;\n+    }\n+\n+    private Map<String, String> getEnumeratedKeyValues(final PlainSchemaTO schemaTO) {\n+        final Map<String, String> res = new HashMap<>();\n+\n+        final String[] values = StringUtils.isBlank(schemaTO.getEnumerationValues())\n+                ? new String[0]\n+                : schemaTO.getEnumerationValues().split(SyncopeConstants.ENUM_VALUES_SEPARATOR);\n+\n+        final String[] keys = StringUtils.isBlank(schemaTO.getEnumerationKeys())\n+                ? new String[0]\n+                : schemaTO.getEnumerationKeys().split(SyncopeConstants.ENUM_VALUES_SEPARATOR);\n+\n+        for (int i = 0; i < values.length; i++) {\n+            res.put(values[i].trim(), keys.length > i ? keys[i].trim() : null);\n+        }\n+\n+        return res;\n+    }\n+\n+    private List<String> getEnumeratedValues(final PlainSchemaTO schemaTO) {\n+        final List<String> res = new ArrayList<>();\n+\n+        final String[] values = StringUtils.isBlank(schemaTO.getEnumerationValues())\n+                ? new String[0]\n+                : schemaTO.getEnumerationValues().split(SyncopeConstants.ENUM_VALUES_SEPARATOR);\n+\n+        for (String value : values) {\n+            res.add(value.trim());\n+        }\n+\n+        return res;\n+    }\n+\n+    @Override\n+    public void onEvent(final IEvent<?> event) {\n+        if ((event.getPayload() instanceof RoleAttrTemplatesChange)) {\n+            final RoleAttrTemplatesChange update = (RoleAttrTemplatesChange) event.getPayload();\n+            if (attrTemplates != null && update.getType() == AttrTemplatesPanel.Type.rAttrTemplates) {\n+                setSchemas();\n+                setAttrs();\n+                update.getTarget().add(this);\n+            }\n+        }\n+    }\n+}"},{"sha":"9979ee08125a8cd04f0cd2fe2ed26348910146d4","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/PoliciesPanel.java","status":"added","additions":343,"deletions":0,"changes":343,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPoliciesPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af","patch":"@@ -0,0 +1,343 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels;\n+\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Iterator;\n+import java.util.List;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.commons.PreferenceManager;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.commons.XMLRolesReader;\n+import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.pages.PolicyModalPage;\n+import org.apache.syncope.client.console.rest.PolicyRestClient;\n+import org.apache.syncope.client.console.wicket.ajax.markup.html.ClearIndicatingAjaxLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+import org.apache.syncope.common.lib.to.AccountPolicyTO;\n+import org.apache.syncope.common.lib.to.PasswordPolicyTO;\n+import org.apache.syncope.common.lib.to.SyncPolicyTO;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.wicket.Page;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.extensions.ajax.markup.html.repeater.data.table.AjaxFallbackDefaultDataTable;\n+import org.apache.wicket.extensions.markup.html.repeater.data.grid.ICellPopulator;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.AbstractColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.util.SortableDataProvider;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.DropDownChoice;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.markup.repeater.Item;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.request.http.WebResponse;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class PoliciesPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(PoliciesPanel.class);\n+\n+    private static final int MODAL_WIN_HEIGHT = 400;\n+\n+    private static final int MODAL_WIN_WIDTH = 1000;\n+\n+    private static final long serialVersionUID = -6804066913177804275L;\n+\n+    @SpringBean\n+    private PolicyRestClient policyRestClient;\n+\n+    @SpringBean\n+    protected XMLRolesReader xmlRolesReader;\n+\n+    @SpringBean\n+    private PreferenceManager prefMan;\n+\n+    private final PageReference pageRef;\n+\n+    private final int paginatorRows = prefMan.getPaginatorRows(getWebRequest(), Constants.PREF_POLICY_PAGINATOR_ROWS);\n+\n+    protected boolean modalResult = false;\n+\n+    private final PolicyType policyType;\n+\n+    public PoliciesPanel(final String id, final PageReference pageRef, final PolicyType policyType) {\n+        super(id);\n+        this.pageRef = pageRef;\n+        this.policyType = policyType;\n+\n+        // Modal window for editing user attributes\n+        final ModalWindow mwindow = new ModalWindow(\"editModalWin\");\n+        mwindow.setCssClassName(ModalWindow.CSS_CLASS_GRAY);\n+        mwindow.setInitialHeight(MODAL_WIN_HEIGHT);\n+        mwindow.setInitialWidth(MODAL_WIN_WIDTH);\n+        mwindow.setCookieName(\"policy-modal\");\n+        add(mwindow);\n+\n+        // Container for user list\n+        final WebMarkupContainer container = new WebMarkupContainer(\"container\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+\n+        setWindowClosedCallback(mwindow, container);\n+\n+        final List<IColumn<AbstractPolicyTO, String>> columns = new ArrayList<IColumn<AbstractPolicyTO, String>>();\n+\n+        columns.add(new PropertyColumn<AbstractPolicyTO, String>(new ResourceModel(\"id\"), \"id\", \"id\"));\n+\n+        columns.add(new PropertyColumn<AbstractPolicyTO, String>(\n+                new ResourceModel(\"description\"), \"description\", \"description\"));\n+\n+        columns.add(new AbstractColumn<AbstractPolicyTO, String>(new ResourceModel(\"type\")) {\n+\n+            private static final long serialVersionUID = 8263694778917279290L;\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<AbstractPolicyTO>> cellItem, final String componentId,\n+                    final IModel<AbstractPolicyTO> model) {\n+\n+                cellItem.add(new Label(componentId, getString(model.getObject().getType().name())));\n+            }\n+        });\n+\n+        columns.add(new AbstractColumn<AbstractPolicyTO, String>(new ResourceModel(\"actions\", \"\")) {\n+\n+            private static final long serialVersionUID = 2054811145491901166L;\n+\n+            @Override\n+            public String getCssClass() {\n+                return \"action\";\n+            }\n+\n+            @Override\n+            public void populateItem(final Item<ICellPopulator<AbstractPolicyTO>> cellItem, final String componentId,\n+                    final IModel<AbstractPolicyTO> model) {\n+\n+                final AbstractPolicyTO policyTO = model.getObject();\n+\n+                final ActionLinksPanel panel = new ActionLinksPanel(componentId, model, pageRef);\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+\n+                        mwindow.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                            private static final long serialVersionUID = -7834632442532690940L;\n+\n+                            @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+                            @Override\n+                            public Page createPage() {\n+                                return new PolicyModalPage(pageRef, mwindow, policyTO);\n+                            }\n+                        });\n+\n+                        mwindow.show(target);\n+                    }\n+                }, ActionLink.ActionType.EDIT, \"Policies\");\n+\n+                panel.add(new ActionLink() {\n+\n+                    private static final long serialVersionUID = -3722207913631435501L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        try {\n+                            policyRestClient.delete(policyTO.getKey(), policyTO.getClass());\n+                            info(getString(Constants.OPERATION_SUCCEEDED));\n+                        } catch (SyncopeClientException e) {\n+                            error(getString(Constants.OPERATION_ERROR));\n+\n+                            LOG.error(\"While deleting policy {}({})\",\n+                                    policyTO.getKey(), policyTO.getDescription(), e);\n+                        }\n+\n+                        target.add(container);\n+                        ((NotificationPanel) getPage().get(Constants.FEEDBACK)).refresh(target);\n+                    }\n+                }, ActionLink.ActionType.DELETE, \"Policies\");\n+\n+                cellItem.add(panel);\n+            }\n+        });\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final AjaxFallbackDefaultDataTable table = new AjaxFallbackDefaultDataTable(\"datatable\", columns,\n+                new PolicyDataProvider(), paginatorRows);\n+\n+        container.add(table);\n+\n+        final AjaxLink<Void> createButton = new ClearIndicatingAjaxLink<Void>(\"createLink\", pageRef) {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            protected void onClickInternal(final AjaxRequestTarget target) {\n+                mwindow.setPageCreator(new ModalWindow.PageCreator() {\n+\n+                    private static final long serialVersionUID = -7834632442532690940L;\n+\n+                    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+                    @Override\n+                    public Page createPage() {\n+                        return new PolicyModalPage(pageRef, mwindow, getPolicyTOInstance(policyType));\n+                    }\n+                });\n+\n+                mwindow.show(target);\n+            }\n+        };\n+\n+        add(createButton);\n+\n+        MetaDataRoleAuthorizationStrategy.authorize(\n+                createButton, ENABLE, xmlRolesReader.getEntitlement(\"Policies\", \"create\"));\n+\n+        @SuppressWarnings(\"rawtypes\")\n+        final Form paginatorForm = new Form(\"PaginatorForm\");\n+\n+        @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+        final DropDownChoice rowsChooser = new DropDownChoice(\"rowsChooser\", new PropertyModel(this, \"paginatorRows\"),\n+                prefMan.getPaginatorChoices());\n+\n+        rowsChooser.add(new AjaxFormComponentUpdatingBehavior(Constants.ON_CHANGE) {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(final AjaxRequestTarget target) {\n+                prefMan.set(getWebRequest(), (WebResponse) getResponse(), Constants.PREF_POLICY_PAGINATOR_ROWS, String\n+                        .valueOf(paginatorRows));\n+                table.setItemsPerPage(paginatorRows);\n+\n+                target.add(container);\n+            }\n+        });\n+\n+        paginatorForm.add(rowsChooser);\n+        add(paginatorForm);\n+    }\n+\n+    private void setWindowClosedCallback(final ModalWindow window, final WebMarkupContainer container) {\n+        window.setWindowClosedCallback(new ModalWindow.WindowClosedCallback() {\n+\n+            private static final long serialVersionUID = 8804221891699487139L;\n+\n+            @Override\n+            public void onClose(final AjaxRequestTarget target) {\n+                target.add(container);\n+                BasePage configuration = ((BasePage) pageRef.getPage());\n+                if (configuration.isModalResult()) {\n+                    info(getString(Constants.OPERATION_SUCCEEDED));\n+                    configuration.getFeedbackPanel().refresh(target);\n+                    configuration.setModalResult(false);\n+                }\n+            }\n+        });\n+    }\n+\n+    private class PolicyDataProvider extends SortableDataProvider<AbstractPolicyTO, String> {\n+\n+        private static final long serialVersionUID = -6976327453925166730L;\n+\n+        private final SortableDataProviderComparator<AbstractPolicyTO> comparator;\n+\n+        public PolicyDataProvider() {\n+            super();\n+\n+            //Default sorting\n+            setSort(\"description\", SortOrder.ASCENDING);\n+\n+            comparator = new SortableDataProviderComparator<AbstractPolicyTO>(this);\n+        }\n+\n+        @Override\n+        public long size() {\n+            return policyRestClient.getPolicies(policyType, true).size();\n+        }\n+\n+        @Override\n+        public Iterator<AbstractPolicyTO> iterator(final long first, final long count) {\n+            final List<AbstractPolicyTO> policies = policyRestClient.getPolicies(policyType, true);\n+\n+            Collections.sort(policies, comparator);\n+\n+            return policies.subList((int) first, (int) first + (int) count).iterator();\n+        }\n+\n+        @Override\n+        public IModel<AbstractPolicyTO> model(final AbstractPolicyTO object) {\n+            return new CompoundPropertyModel<AbstractPolicyTO>(object);\n+        }\n+    }\n+\n+    private AbstractPolicyTO getPolicyTOInstance(final PolicyType policyType) {\n+        AbstractPolicyTO policyTO;\n+        switch (policyType) {\n+            case GLOBAL_ACCOUNT:\n+                policyTO = new AccountPolicyTO(true);\n+                break;\n+\n+            case ACCOUNT:\n+                policyTO = new AccountPolicyTO();\n+                break;\n+\n+            case GLOBAL_PASSWORD:\n+                policyTO = new PasswordPolicyTO(true);\n+                break;\n+\n+            case PASSWORD:\n+                policyTO = new PasswordPolicyTO();\n+                break;\n+\n+            case GLOBAL_SYNC:\n+                policyTO = new SyncPolicyTO(true);\n+                break;\n+\n+            case SYNC:\n+            default:\n+                policyTO = new SyncPolicyTO();\n+        }\n+\n+        return policyTO;\n+    }\n+}"},{"sha":"a46bcd15751a79ce7bf61dd2f6d3b025dcbd4548","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/PolicyBeanPanel.java","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPolicyBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPolicyBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPolicyBeanPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"5a942fd7f232e7264ec147a6b8ec678a5df97113","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/PropagationTasks.java","status":"added","additions":273,"deletions":0,"changes":273,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPropagationTasks.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2d25a83bc46f56702c12f7d1d96b9b9b827f6c69","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/PushTasksPanel.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPushTasksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPushTasksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FPushTasksPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"b3e63c572fa4ab0a913a4fd12158baff5b9ac092","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceConnConfPanel.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceConnConfPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"c3b0455013015d5363932cc60ad9bd78041dcf9c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceDetailsPanel.java","status":"added","additions":306,"deletions":0,"changes":306,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceDetailsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"0e8d34b63fccbbc94ea3b382b935e5a2242b03c6","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceMappingPanel.java","status":"added","additions":644,"deletions":0,"changes":644,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceMappingPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"40e031a84c4c418890ed59cd224ca29aff360d41","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceSecurityPanel.java","status":"added","additions":189,"deletions":0,"changes":189,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceSecurityPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"67e2281579ec5bf78461d5bdb9b044394e82c5fa","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/ResourcesPanel.java","status":"added","additions":178,"deletions":0,"changes":178,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourcesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourcesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourcesPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2a97b3ac2dcefa076b2087a939db5c009f0e7053","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleDetailsPanel.java","status":"added","additions":435,"deletions":0,"changes":435,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleDetailsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"09f838a4cad721395067171da744988911515bcf","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/RolePanel.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRolePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRolePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRolePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"c8d9727240ae3bafd1142e2a8ddda139291746a8","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleSearchPanel.java","status":"added","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSearchPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"3762deee4e2778be28a3618085423ded587c2c35","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleSearchResultPanel.java","status":"added","additions":175,"deletions":0,"changes":175,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSearchResultPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"b60d1e404a1d3746b6f57b82768a7435c07682ed","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleSecurityPanel.java","status":"added","additions":198,"deletions":0,"changes":198,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSecurityPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"d7663be7c62fed85879eb264721dc2e540a202e4","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleSummaryPanel.java","status":"added","additions":153,"deletions":0,"changes":153,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSummaryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSummaryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleSummaryPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"7c483b5352659e34d8183bc891dbb47320543586","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/RoleTabPanel.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleTabPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleTabPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRoleTabPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"bbc10b7a3813f65fb690d9f6aa6038394202f53e","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/SchedTasks.java","status":"added","additions":286,"deletions":0,"changes":286,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchedTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchedTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSchedTasks.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"488a2cf4cd05bcd53e865003db9d631f57710a94","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/SearchClause.java","status":"added","additions":129,"deletions":0,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSearchClause.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSearchClause.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSearchClause.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"b432d82225bbb9d876e7ce6f971c6b648ffac868","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/SearchView.java","status":"added","additions":461,"deletions":0,"changes":461,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSearchView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSearchView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSearchView.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8658cf67afa9bd4d40652549a4b3c75acc519fa5","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/SecurityQuestionPanel.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSecurityQuestionPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"a55db53f49f53431bf80f4ef32a321b42594e811","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/SelectOnlyUserSearchResultPanel.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSelectOnlyUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSelectOnlyUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSelectOnlyUserSearchResultPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"96c8d77fcf6ccd5d1ff3242fa60ef54bf58854d0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/SelectedEventsPanel.java","status":"added","additions":167,"deletions":0,"changes":167,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSelectedEventsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSelectedEventsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSelectedEventsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"e8b3af7230cb2a172b5663721da158c29dade393","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/StatusPanel.java","status":"added","additions":263,"deletions":0,"changes":263,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FStatusPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FStatusPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FStatusPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"cf752850949737016ab858b50087b4c8f4131a78","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/SyncTasksPanel.java","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSyncTasksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSyncTasksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FSyncTasksPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"18e2066e3cabb7c3db1684085e50684ab4b2b5b1","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/UserDetailsPanel.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserDetailsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2ca1b94845f93fa8b736c4aadeb05ebf9cff0379","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/UserSearchPanel.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"7e494a58499fe9bca24c2593e79c8b63d67581c5","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/UserSearchResultPanel.java","status":"added","additions":298,"deletions":0,"changes":298,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FUserSearchResultPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"34d21d55e0fed8168c2cbb7a4883600e870d3906","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/panels/VirAttrsPanel.java","status":"added","additions":295,"deletions":0,"changes":295,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirAttrsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirAttrsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FVirAttrsPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"bc5998a0817087bfe3cff379381d06a768da1a15","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/preview/BinaryPreview.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FBinaryPreview.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FBinaryPreview.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FBinaryPreview.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2baff261a82284802b15e2e90269621c9a283d79","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/preview/PreviewUtil.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FPreviewUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FPreviewUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FPreviewUtil.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"921d783122b40d9acb723a6a465bb076a396d157","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/preview/PreviewerClassScanner.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FPreviewerClassScanner.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FPreviewerClassScanner.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpreview%2FPreviewerClassScanner.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8a95de60907b9adb4d6d7db13aabe2f97c670ada","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/resources/FilesystemResource.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FFilesystemResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FFilesystemResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FFilesystemResource.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2104745454e85010dd6e6320652df310d7e01b0c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/resources/WorkflowDefGETResource.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefGETResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefGETResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefGETResource.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"add6485dd547c2835e6d83fffd0c4931380cf798","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/resources/WorkflowDefPUTResource.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefPUTResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefPUTResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fresources%2FWorkflowDefPUTResource.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"a18a0a9dc1bf78d4d270edd55186dbbaabfff744","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/AbstractSubjectRestClient.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractSubjectRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractSubjectRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAbstractSubjectRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"dc9d12fa97db1b60c15a23ff4bfc9126d8c697bb","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/ApprovalRestClient.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FApprovalRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FApprovalRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FApprovalRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"01e68388a89b257910bcbb5fe136a4b1a9c14c9f","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/AuthRestClient.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuthRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuthRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FAuthRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"ddab7afd98909a1c8ae7f2c2276ceabaed03d06d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/BaseRestClient.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"9d0998470f7118c06e3b220aa255acf68913b3e8","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/ConfigurationRestClient.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConfigurationRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"d9a729dc5c9b698c9a3333c5576efe089c596ef0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"added","additions":217,"deletions":0,"changes":217,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"f78a6824ece773f5be276287b8b21d60f6f1ecde","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/ExecutionRestClient.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FExecutionRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"6c7959c288e7553fc9d6593ea414c2eaa6f27c8d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/InvalidPolicyType.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FInvalidPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FInvalidPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FInvalidPolicyType.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"a8b40ac55a3b5ba02b110f881267a0383c5832fe","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/LoggerRestClient.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FLoggerRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"687ade0311c7f1cb561a345d540d17ddd60dfcb9","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/NotificationRestClient.java","status":"added","additions":50,"deletions":0,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FNotificationRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"eb9e7cb92eedd673f07396edb594e8428d3d1b3d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/PolicyRestClient.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FPolicyRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"81b58ac9fbd5143dfa2c29bd0a578f5fe739c9a0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/ReportRestClient.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FReportRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"a62b644f8f70ab4df457ca4206577a83748dc86b","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"added","additions":94,"deletions":0,"changes":94,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"5cffe09ef643fea780bcd4247787d6e0adc8bf40","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/RoleRestClient.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FRoleRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"d5d70463b6f8b8615e7ceba0dfbdde26987c0f31","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/SchemaRestClient.java","status":"added","additions":253,"deletions":0,"changes":253,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSchemaRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"119b3b5bf163a0c5ac19ee3e3393eb87f6bffb0a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/SecurityQuestionRestClient.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSecurityQuestionRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSecurityQuestionRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSecurityQuestionRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"541b5cd50271f9256310fa3986bcb31519364509","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/TaskRestClient.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FTaskRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"bca0e28e1f8755cd43ad1a2b258c75283f1f024c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/UserRestClient.java","status":"added","additions":228,"deletions":0,"changes":228,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"1bb10793925ed28ef7bb9cf543163e1f55c8d34c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/UserSelfRestClient.java","status":"added","additions":96,"deletions":0,"changes":96,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"f3bf60cd935385598abbd1296d84c253260bad79","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/rest/WorkflowRestClient.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FWorkflowRestClient.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8074d37c32d652775510a696ad1b1a87a259116d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/ajax/form/AbstractAjaxDownloadBehavior.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FAbstractAjaxDownloadBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FAbstractAjaxDownloadBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fform%2FAbstractAjaxDownloadBehavior.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"314f66c60914a27f0ce847217bc9ffa8d1297d66","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/ajax/markup/html/ClearIndicatingAjaxButton.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FClearIndicatingAjaxButton.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FClearIndicatingAjaxButton.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FClearIndicatingAjaxButton.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"5bb56423e68fe383a43bb5be4819b07af542ea36","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/ajax/markup/html/ClearIndicatingAjaxLink.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FClearIndicatingAjaxLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FClearIndicatingAjaxLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FClearIndicatingAjaxLink.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"86db9156d3c69f1622d1db837efb9f3a50ae932a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/ajax/markup/html/IndicatingOnConfirmAjaxLink.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingOnConfirmAjaxLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingOnConfirmAjaxLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fajax%2Fmarkup%2Fhtml%2FIndicatingOnConfirmAjaxLink.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"b9dfa62e51a84a5e9323a15025e93676c8854303","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/ActionColumn.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionColumn.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"a2c40ff862410fd6c80d9e1f5523367d09cea7d6","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/ActionResultColumn.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionResultColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionResultColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FActionResultColumn.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"b40d7c8b9065e0f91949ff6f00754545220445b7","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/AttrColumn.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FAttrColumn.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8f880b7b63799abc25f26ad83080b62fdceb5978","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/CheckBoxGroupSelectorPanel.java","status":"added","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckBoxGroupSelectorPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckBoxGroupSelectorPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckBoxGroupSelectorPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"db8719230b94bc6dcdf07f7215e82a4217856d9c","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/CheckBoxPanel.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckBoxPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"cf13f3cbb00f0e7b01d35ff852562b2608e06ace","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/CheckGroupColumn.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckGroupColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckGroupColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCheckGroupColumn.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"f04fa5a5b1f0289fed0724b80bf281e4b9a64281","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/CollectionPanel.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"a5fd774da17c4591b32e4604eafc6c92e6badfe7","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/CollectionPropertyColumn.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FCollectionPropertyColumn.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"f767aa2b097e1e9455a8f680e4c762256816aefa","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/DatePropertyColumn.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FDatePropertyColumn.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"094e450c6fde2c7c960055ab71bb9b3d003c8be0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/extensions/markup/html/repeater/data/table/TokenColumn.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fextensions%2Fmarkup%2Fhtml%2Frepeater%2Fdata%2Ftable%2FTokenColumn.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2c5150e44af4e26606c15987ffbf50fb63c69384","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/head/MetaHeaderItem.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhead%2FMetaHeaderItem.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"555561648e18e20528bd28f29265ee06ec8096db","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/CrontabContainer.java","status":"added","additions":184,"deletions":0,"changes":184,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2FCrontabContainer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2FCrontabContainer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2FCrontabContainer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"30bb47cb988b4855cb37bfb74ec742033f628006","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AbstractFieldPanel.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"159e5d99f90a5525cf02563263e0ea4694d08de3","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLink.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLink.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8582741941bf7c2b327eef2e2f64ac0617811a98","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksPanel.java","status":"added","additions":586,"deletions":0,"changes":586,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"3702aa20995c5c0a2d82a84038f7607a7b2b20f7","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxCheckBoxPanel.java","status":"added","additions":130,"deletions":0,"changes":130,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"547d91a3c075df241652468694386f843242941d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDecoratedCheckbox.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDecoratedCheckbox.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDecoratedCheckbox.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDecoratedCheckbox.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"19e0e1d162a9000da164d4495536c5210a9548c7","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"91b6306b2f8c27e3a556db743dc572db8472004b","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPalettePanel.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"14fdf9e9232c9f5a3fe9a1084f4e1f395df5bb6a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPasswordFieldPanel.java","status":"added","additions":60,"deletions":0,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"6854fb0049384c589e65b49341e152b026e80273","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/AjaxTextFieldPanel.java","status":"added","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"df91c7d8281023d00f5068348d1f65e79c5ee516","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/BinaryFieldPanel.java","status":"added","additions":211,"deletions":0,"changes":211,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FBinaryFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"3c5119b2eb357f3e139edc335b99561fd421c166","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/CheckBoxMultipleChoiceFieldPanel.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FCheckBoxMultipleChoiceFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FCheckBoxMultipleChoiceFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FCheckBoxMultipleChoiceFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"1f5aaf6282405ec974ed709a0b7a9627186353cf","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/DateFieldPanel.java","status":"added","additions":132,"deletions":0,"changes":132,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"add3de6506a73b23c10a53bc584abcb053fa2922","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/DateTextFieldPanel.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"d8014f68dc6ba4c4745f85d0195c1f1f22073397","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/DateTimeFieldPanel.java","status":"added","additions":195,"deletions":0,"changes":195,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8dbc4349333c7e7f4144a68486b539d9e1ce20bc","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/FieldPanel.java","status":"added","additions":199,"deletions":0,"changes":199,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"b31bbab69a3ed75366dc588c9a0b26f545b6f3e9","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/LinkPanel.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2c41f3713be2f5d0107caea15847d99735229366","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/MappingPurposePanel.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMappingPurposePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMappingPurposePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMappingPurposePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"cd4ab2ad44de6e701dedeef227170d0efbbb4144","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/MultiFieldPanel.java","status":"added","additions":172,"deletions":0,"changes":172,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"55038da2d81ebf30cb4de65e7caf8434b072cc73","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/NonI18nPalette.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FNonI18nPalette.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FNonI18nPalette.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FNonI18nPalette.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2893533834b9251b70da894c2c9047c49344f447","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/SelectableRecorder.java","status":"added","additions":204,"deletions":0,"changes":204,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSelectableRecorder.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"4f71f812722b47c943035ddc39d6783625a5f896","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/SpinnerFieldPanel.java","status":"added","additions":197,"deletions":0,"changes":197,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FSpinnerFieldPanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"24bdb47940b294beee90ec9d0d62f4cbcc62ae18","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/AbstractBinaryPreviewer.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FAbstractBinaryPreviewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FAbstractBinaryPreviewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FAbstractBinaryPreviewer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"c5b9164a669f7587d9042e38b921ea27226af11d","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryCertPreviewer.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryCertPreviewer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"6ab90a704487b1c513172f8fa665c4aa425fb182","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/preview/BinaryImagePreviewer.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryImagePreviewer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryImagePreviewer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2Fpreview%2FBinaryImagePreviewer.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"51c8ec520907d5c0244eb36be3acc3a727a89466","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/link/VeilPopupSettings.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flink%2FVeilPopupSettings.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flink%2FVeilPopupSettings.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flink%2FVeilPopupSettings.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"5a491ae6300a0f3e0ba6120f3a1dada6f91288c0","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/list/AltListView.java","status":"added","additions":59,"deletions":0,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FAltListView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FAltListView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FAltListView.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"30775f5e1f99203ebc64f069e167be20cd7f0108","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/list/ConnConfPropertyListView.java","status":"added","additions":152,"deletions":0,"changes":152,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Flist%2FConnConfPropertyListView.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"50db23c3d61045b8dfebffa89f35da98612866fa","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/tree/DefaultMutableTreeNodeExpansion.java","status":"added","additions":160,"deletions":0,"changes":160,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansion.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansion.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansion.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"1b342bdbf68491a2361c39cfaef60174e10f9aee","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/tree/DefaultMutableTreeNodeExpansionModel.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansionModel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansionModel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FDefaultMutableTreeNodeExpansionModel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"b0be4e9b43ce71aa67c93eebc8bef34bf3bf490a","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/tree/TreeRolePanel.java","status":"added","additions":121,"deletions":0,"changes":121,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRolePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRolePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRolePanel.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"6fbe9a4316461c62b4c919ffc2b98ec904869d90","filename":"syncope620/client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/tree/TreeRoleProvider.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRoleProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRoleProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Ftree%2FTreeRoleProvider.java?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"1f0e6219089d31a00b7d85dd4d0151b416b55b0c","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/bulk.css","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbulk.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbulk.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fbulk.css?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"23ef109c7571eab9c24253c8672eb62a5ba255ef","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/fieldstyle.css","status":"added","additions":191,"deletions":0,"changes":191,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Ffieldstyle.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Ffieldstyle.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Ffieldstyle.css?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"64ece5707d91a6edf9fad4bfcce0c4dbcafcf58d","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_diagonals-thick_20_666666_40x40.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_diagonals-thick_20_666666_40x40.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_diagonals-thick_20_666666_40x40.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_diagonals-thick_20_666666_40x40.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"fc9ef062c613a297345f8e4a90000bb689ee9f61","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_flat_0_aaaaaa_40x100.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_flat_0_aaaaaa_40x100.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_flat_0_aaaaaa_40x100.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_flat_0_aaaaaa_40x100.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"b3d19991052cdb5b6405be6dec11b9078f918b4e","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_flat_0_aaaaaa_40x100_greennotused.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_flat_0_aaaaaa_40x100_greennotused.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_flat_0_aaaaaa_40x100_greennotused.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_flat_0_aaaaaa_40x100_greennotused.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"ad3d6346e00f246102f72f2e026ed0491988b394","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_glass_55_fbf9ee_1x400.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_55_fbf9ee_1x400.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_55_fbf9ee_1x400.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_55_fbf9ee_1x400.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"42ccba269b6e91bef12ad0fa18be651b5ef0ee68","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_glass_65_ffffff_1x400.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_65_ffffff_1x400.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_65_ffffff_1x400.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_65_ffffff_1x400.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"5a46b47cb16631068aee9e0bd61269fc4e95e5cd","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_glass_75_dadada_1x400.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_75_dadada_1x400.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_75_dadada_1x400.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_75_dadada_1x400.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"86c2baa655eac8539db34f8d9adb69ec1226201c","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_glass_75_e6e6e6_1x400.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_75_e6e6e6_1x400.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_75_e6e6e6_1x400.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_75_e6e6e6_1x400.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"4443fdc1a156babad4336f004eaf5ca5dfa0f9ab","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_glass_95_fef1ec_1x400.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_95_fef1ec_1x400.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_95_fef1ec_1x400.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_glass_95_fef1ec_1x400.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"5749fc490195c45bd0b928f659a162034f04257f","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_highlight-soft_75_cccccc_1x100.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"7c9fa6c6edcfcdd3e5b77e6f547b719e6fc66e30","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_highlight-soft_75_cccccc_1x100_greynotused.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100_greynotused.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100_greynotused.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100_greynotused.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"46325297b761c0703ca0ccc57498f6ee49fd50af","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-bg_highlight-soft_75_cccccc_1x100_red.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100_red.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100_red.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-bg_highlight-soft_75_cccccc_1x100_red.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"ee039dc096a38a3753f92519546eee94bcfbeffa","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-icons_222222_256x240.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_222222_256x240.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_222222_256x240.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_222222_256x240.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"45e8928e5284adacea3f9ec07b9b50667d2ac65f","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-icons_2e83ff_256x240.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_2e83ff_256x240.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_2e83ff_256x240.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_2e83ff_256x240.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"7ec70d11bfb2f77374dfd00ef61ba0c3647b5a0c","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-icons_454545_256x240.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_454545_256x240.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_454545_256x240.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_454545_256x240.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"5ba708c39172a69e069136bd1309c4322c61f571","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-icons_888888_256x240.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_888888_256x240.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_888888_256x240.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_888888_256x240.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"7930a558099bc8d92b4264eb67a0f040460f4a4f","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/images/ui-icons_cd0a0a_256x240.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_cd0a0a_256x240.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_cd0a0a_256x240.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fimages%2Fui-icons_cd0a0a_256x240.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"54d8f5065bce6d21c37b45445d4ab1a3f5290b2a","filename":"syncope620/client/console/src/main/resources/META-INF/resources/css/style.css","status":"added","additions":550,"deletions":0,"changes":550,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fstyle.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fstyle.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fcss%2Fstyle.css?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"f9f2a33097a794547b09d538311fcecb9c1837e9","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/assign-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fassign-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fassign-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fassign-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"0f98eec8f41d3011586f7d420194c3c0cb5b7727","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/both-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fboth-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fboth-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fboth-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"ea6d145a1d9275cb60fc1d876b7563d1fa3c1bef","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/bulk.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fbulk.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fbulk.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fbulk.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"79332c043da9eebcc7a0d27a5c3a546d785daa63","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/claim.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fclaim.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fclaim.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fclaim.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"3f8faf108d0f1d4640dd38b83024fda3434a7ad8","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/create.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fcreate.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fcreate.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fcreate.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"1207d8d6a4e6a1edd29644ae4b717264769a80bc","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/delete.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdelete.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdelete.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdelete.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"4bc2f4e456f3857fd9f1d9126f48edcd20febd6d","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/deprovision-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdeprovision-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdeprovision-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdeprovision-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"910b148c39666fb193fb66666721051844350255","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/dryrun.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdryrun.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdryrun.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fdryrun.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"80e00db26b7d2ff285b6731dc1803d6ba6b9e019","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/edit.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fedit.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fedit.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fedit.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"39ba0cadaab10faab1d3ddff2ead1b26183fd6a5","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/enable.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fenable.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fenable.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fenable.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"443c7196b9eff72cc5826da9df08da5461858f0f","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/execute.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fexecute.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fexecute.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fexecute.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"038583bcb7e532815d435688460fe5a46e133862","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/export.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fexport.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fexport.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fexport.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8c166afc03ca8d351ef483622633c24aa0ebade8","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/link-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Flink-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Flink-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Flink-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2e8e1903d9bcef0c039d67384f3e327c3ccaf5cc","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/manage-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fmanage-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fmanage-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fmanage-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"cc49adbb3bf8c90e4e43961c77b5c319022591a9","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/none-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fnone-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fnone-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fnone-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"d7fa5e91e7ffe991cf1ec8bb90cc685ea7fa627f","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/propagation-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fpropagation-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fpropagation-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fpropagation-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"3f8faf108d0f1d4640dd38b83024fda3434a7ad8","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/provision-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fprovision-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fprovision-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fprovision-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"50503e2d8636564f0d1f0be02067bde74b7b990d","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/reactivate.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freactivate.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freactivate.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freactivate.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"bbf878ee1069e6953380e1c3d3a4d802859b5fa3","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/reload.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freload.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freload.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freload.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"bbf878ee1069e6953380e1c3d3a4d802859b5fa3","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/reset.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freset.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freset.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Freset.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"6240ba929182d1c2bb09fe4559ccded80a2c692e","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/resources-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fresources-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fresources-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fresources-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"9669486ce123cd439f6fc52ddb52af71a929a9de","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/roles-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Froles-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Froles-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Froles-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"3ac297e8a0fedde91ef20dd193a4118eaa3f0de0","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/search.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsearch.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsearch.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsearch.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"f2ea103e95f485f3036d487e8c5685ead5774e24","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/select.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fselect.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fselect.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fselect.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"1da7e05341b5f3dd19a1913e9e6be4878da4a1a6","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/settings-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsettings-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsettings-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsettings-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"bd5f0bd08540a08ab85ef345be2f56b35e5e7304","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/suspend.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsuspend.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsuspend.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsuspend.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"394b9078658bba8fb3c4044c93f7ddb0f0753871","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/synchronization-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsynchronization-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsynchronization-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fsynchronization-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"860dc4937710f0a71a7fecdc218e92a4ddbb3959","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/unassign-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Funassign-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Funassign-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Funassign-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"86700a53bf3af4702f057fbaa69d839a83e76133","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/unlink-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Funlink-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Funlink-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Funlink-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"6db6de8afef7b29cceed0b6ffcc7603b728ef78a","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/user_template.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fuser_template.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fuser_template.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fuser_template.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"cfab4654c456c135cce33addbc4dc1625dbafec5","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/actions/users-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fusers-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fusers-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Factions%2Fusers-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"043aba86c37d3f6ffd4a3b9642748b709ff49d98","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/add.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fadd.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fadd.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fadd.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"86633fcc1d994496d44842bf07b64ccb930c8e7b","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/addAll.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2FaddAll.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2FaddAll.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2FaddAll.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"e77264f1526a28fee215308bf4107bde8272db23","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/busy.gif","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fbusy.gif","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fbusy.gif","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fbusy.gif?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"413cb0673cdb221f076d5a04eceb3fa8341fe842","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/db_export.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdb_export.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdb_export.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdb_export.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"26fbe851e0a784835a1c702298245352ee495b0b","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/disable.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdisable.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdisable.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdisable.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"6f818eece99c285cef03d336965ffbda144ba0e2","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/down-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdown-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdown-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fdown-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"599ec2b109d652870fa506bfda8051309f5677ef","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/favicon.ico","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffavicon.ico","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffavicon.ico","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffavicon.ico?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"ceae906ebf1a74f91a7c68b81ce1b35cb72a10c4","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/file-download.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffile-download.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffile-download.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffile-download.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"d4a399ef18c1b6f0aeacadf359403e8f6c9cb7f4","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/file-upload.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffile-upload.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffile-upload.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Ffile-upload.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"560064e9f2c1cd0ce22589e898da130385dcdc61","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/help.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fhelp.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fhelp.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fhelp.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"f1a4832aa301b62485f8f75906622ef520586855","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/info.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Finfo.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Finfo.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Finfo.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"03b215c7f0aea25848507a6c484e3f5aa1dcb68b","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/left-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fleft-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fleft-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fleft-icon.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"85b99d46b9911ba53a792d716d9f688f3bb3c784","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/loading.gif","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Floading.gif","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Floading.gif","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Floading.gif?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"f05105e2cc3bf3989c803e326b86874832b13b54","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/logo.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Flogo.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Flogo.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Flogo.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"7d4bb916622a3ab7dfa9967bddce9a7d0b3e0661","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/configuration.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fconfiguration.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fconfiguration.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fconfiguration.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8ae870506cd0695d3709a4fb9a4c44d44fff3c7f","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/connectors.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fconnectors.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fconnectors.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fconnectors.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"e8ad795c26a3c29d2fc4d42bc5d9050874910465","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/logout.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Flogout.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Flogout.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Flogout.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"2c3bb8e87759a43482d3604195f64ea87f2cabd3","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/configuration.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fconfiguration.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fconfiguration.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fconfiguration.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"98394a97a3f7a0f501f5ab887e9341bd2bf29803","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/connectors.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fconnectors.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fconnectors.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fconnectors.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"ffe07298f1320329666c4235f687f248bf77de29","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/logout.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Flogout.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Flogout.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Flogout.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"596ff39a889bf69ec4b06f49c5e1d910842908a9","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/reports.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Freports.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Freports.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Freports.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"98394a97a3f7a0f501f5ab887e9341bd2bf29803","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/resources.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fresources.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fresources.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fresources.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"9b64b4be48060c7c7dd8c709be4c02e7bf8de4a2","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/roles.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Froles.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Froles.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Froles.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"ee1ad4c3757d9cd9bb83a80ca62bdc57bbe58661","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/schema.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fschema.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fschema.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fschema.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"0e3bc4c6fdd42aebc03b6bd459dc4b3a28241b45","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/sf_body.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fsf_body.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fsf_body.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fsf_body.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"08cde6d5096f9fc0058f91c76bf69f23472dba29","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/tasks.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Ftasks.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Ftasks.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Ftasks.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"26a10e337b702223b5022120e719cd8d114c1300","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/todo.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Ftodo.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Ftodo.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Ftodo.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"97bf71b8cbc5e286c99fa020e44b3d32fdf4b06d","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/notsel/users.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fusers.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fusers.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fnotsel%2Fusers.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"847fd2b986acc8015b633948d2946aa3d9c49874","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/reports.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Freports.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Freports.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Freports.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"8ae870506cd0695d3709a4fb9a4c44d44fff3c7f","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/resources.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fresources.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fresources.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fresources.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"fba8be7bcf36476308b3440547685f402d55da82","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/roles.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Froles.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Froles.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Froles.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"378a83c49974d9a3916395ade6ff606e11842aeb","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/schema.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fschema.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fschema.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Fschema.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"},{"sha":"05bdc112ed61410cac9b585801cff3e5418be0a5","filename":"syncope620/client/console/src/main/resources/META-INF/resources/img/menu/tasks.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Ftasks.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32707b3b91361b36719a5a1467cf798b3e4b85af/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Ftasks.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fconsole%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fimg%2Fmenu%2Ftasks.png?ref=32707b3b91361b36719a5a1467cf798b3e4b85af"}]}