{"sha":"ff26658e78ccde5ace071fc5450a21ddee0e5b6a","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmZmMjY2NThlNzhjY2RlNWFjZTA3MWZjNTQ1MGEyMWRkZWUwZTViNmE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-20T07:39:32Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-31T13:37:26Z"},"message":"[SYNCOPE-1041] SAML 2.0 SP extension: core components","tree":{"sha":"27733efad14d7137b747c258cc5b79ffc2b891d6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/27733efad14d7137b747c258cc5b79ffc2b891d6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ff26658e78ccde5ace071fc5450a21ddee0e5b6a","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff26658e78ccde5ace071fc5450a21ddee0e5b6a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ff26658e78ccde5ace071fc5450a21ddee0e5b6a","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f0ad5d5790fde215f2c327b4d2dff29744b6f14b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f0ad5d5790fde215f2c327b4d2dff29744b6f14b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f0ad5d5790fde215f2c327b4d2dff29744b6f14b"}],"stats":{"total":5003,"additions":4857,"deletions":146},"files":[{"sha":"d5489acb4c2d4a74352c6e0282cc6dd25b9241c9","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.java","status":"modified","additions":0,"deletions":16,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -41,7 +41,6 @@\n import org.apache.syncope.client.console.wicket.markup.html.form.ActionLinksPanel;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.PageReference;\n@@ -108,21 +107,6 @@ public void populateItem(\n \n         columns.add(new DatePropertyColumn<AccessTokenTO>(new ResourceModel(\"expiryTime\"), \"expiryTime\", \"expiryTime\"));\n \n-        columns.add(new AbstractColumn<AccessTokenTO, String>(new ResourceModel(\"remoteHost\", \"\")) {\n-\n-            private static final long serialVersionUID = -1822504503325964706L;\n-\n-            @Override\n-            public void populateItem(\n-                    final Item<ICellPopulator<AccessTokenTO>> cellItem,\n-                    final String componentId,\n-                    final IModel<AccessTokenTO> model) {\n-\n-                JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(model.getObject().getBody());\n-                cellItem.add(new Label(componentId,\n-                        consumer.getJwtClaims().getClaim(SyncopeConstants.JWT_CLAIM_REMOTE_HOST).toString()));\n-            }\n-        });\n \n         columns.add(new ActionColumn<AccessTokenTO, String>(new ResourceModel(\"actions\", \"\")) {\n "},{"sha":"b55a13f0bba53e9d359ac71b6725ca0de6ef7320","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel.properties?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -19,4 +19,3 @@ any.new=New access token\n owner=Owner\n expiryTime=Expiry\n issuedAt=Start\n-remoteHost=Remote Host"},{"sha":"c5b59aedeb0c038f05742c6b4fe09d5f1c8125fd","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel_it.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_it.properties?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -19,4 +19,3 @@ any.new=Nuovo token di accesso\n owner=Proprietario\n expiryTime=Termine\n issuedAt=Inizio\n-remoteHost=Host remoto"},{"sha":"125ba730fba7085a0dd7ef48391493f386aff50b","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel_pt_BR.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_pt_BR.properties?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -19,4 +19,3 @@ any.new=Novo token de acesso\n owner=Propriet\\u00e1rio\n expiryTime=Termo\n issuedAt=Iniciar\n-remoteHost=Host remoto"},{"sha":"33830e1c1a00608bd159fbb7a9db6535a2fa5baf","filename":"client/console/src/main/resources/org/apache/syncope/client/console/panels/AccessTokenDirectoryPanel_ru.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAccessTokenDirectoryPanel_ru.properties?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -20,4 +20,3 @@ any.new=\\u041d\\u043e\\u0432\\u044b\\u0439 \\u043c\\u0430\\u0440\\u043a\\u0435\\u0440 \\u04\n owner=\\u0412\\u043b\\u0430\\u0434\\u0435\\u043b\\u0435\\u0446\n expiryTime=\\u0438\\u0441\\u0442\\u0435\\u0447\\u0435\\u043d\\u0438\\u0435 \\u0441\\u0440\\u043e\\u043a\\u0430\n issuedAt=\\u041d\\u0430\\u0447\\u0430\\u043b\\u043e\n-remoteHost=\\u0423\\u0434\\u0430\\u043b\\u0435\\u043d\\u043d\\u044b\\u0439 \\u0443\\u0437\\u0435\\u043b"},{"sha":"9b804bc4868fb71ef6760bea72884c2be2eceb26","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -28,8 +28,6 @@ public final class SyncopeConstants {\n \n     public static final String NS = \"http://syncope.apache.org/2.0\";\n \n-    public static final String JWT_CLAIM_REMOTE_HOST = \"remoteHost\";\n-\n     public static final String MASTER_DOMAIN = \"Master\";\n \n     public static final String ROOT_REALM = \"/\";"},{"sha":"35518bdbcaf8802e03f85f7de53a5410dec70b89","filename":"core/logic/pom.xml","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -43,11 +43,6 @@ under the License.\n       <artifactId>cxf-rt-rs-security-jose</artifactId>\n     </dependency>\n \n-    <dependency>\n-      <groupId>com.fasterxml.uuid</groupId>\n-      <artifactId>java-uuid-generator</artifactId>\n-    </dependency>\n-\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-dbcp2</artifactId>"},{"sha":"ece23d07315f211b195c9b2fee92cde493024207","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"modified","additions":4,"deletions":77,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -18,29 +18,16 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import com.fasterxml.uuid.Generators;\n-import com.fasterxml.uuid.impl.RandomBasedGenerator;\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n-import java.util.Calendar;\n-import java.util.Date;\n+import java.util.Collections;\n import java.util.List;\n import javax.annotation.Resource;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n-import org.apache.cxf.rs.security.jose.common.JoseType;\n-import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n-import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n-import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n-import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactProducer;\n-import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n-import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n-import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n-import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n@@ -53,66 +40,22 @@\n @Component\n public class AccessTokenLogic extends AbstractTransactionalLogic<AccessTokenTO> {\n \n-    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n-\n-    private static final JwsHeaders JWS_HEADERS = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n-\n-    @Resource(name = \"jwtIssuer\")\n-    private String jwtIssuer;\n-\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n-    @Autowired\n-    private JwsSignatureProvider jwsSignatureProvider;\n-\n     @Autowired\n     private AccessTokenDataBinder binder;\n \n     @Autowired\n     private AccessTokenDAO accessTokenDAO;\n \n-    @Autowired\n-    private ConfDAO confDAO;\n-\n     @PreAuthorize(\"isAuthenticated()\")\n-    public String login(final String remoteHost) {\n+    public String login() {\n         if (anonymousUser.equals(AuthContextUtils.getUsername())) {\n             throw new IllegalArgumentException(anonymousUser + \" cannot be granted for an access token\");\n         }\n \n-        String body = null;\n-\n-        AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());\n-        if (accessToken != null) {\n-            body = accessToken.getBody();\n-        }\n-\n-        if (body == null) {\n-            Date now = new Date();\n-            Calendar expiry = Calendar.getInstance();\n-            expiry.setTime(now);\n-            expiry.add(Calendar.MINUTE,\n-                    confDAO.find(\"jwt.lifetime.minutes\", \"120\").getValues().get(0).getLongValue().intValue());\n-\n-            JwtClaims claims = new JwtClaims();\n-            claims.setTokenId(UUID_GENERATOR.generate().toString());\n-            claims.setSubject(AuthContextUtils.getUsername());\n-            claims.setIssuedAt(now.getTime());\n-            claims.setIssuer(jwtIssuer);\n-            claims.setExpiryTime(expiry.getTime().getTime());\n-            claims.setNotBefore(now.getTime());\n-            claims.setClaim(SyncopeConstants.JWT_CLAIM_REMOTE_HOST, remoteHost);\n-\n-            JwtToken token = new JwtToken(JWS_HEADERS, claims);\n-            JwsJwtCompactProducer producer = new JwsJwtCompactProducer(token);\n-\n-            body = producer.signWith(jwsSignatureProvider);\n-\n-            binder.create(claims.getTokenId(), body, expiry.getTime());\n-        }\n-\n-        return body;\n+        return binder.create(AuthContextUtils.getUsername(), Collections.<String, Object>emptyMap(), false);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n@@ -122,23 +65,7 @@ public String refresh() {\n             throw new NotFoundException(\"AccessToken for \" + AuthContextUtils.getUsername());\n         }\n \n-        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken.getBody());\n-\n-        Date now = new Date();\n-        Calendar expiry = Calendar.getInstance();\n-        expiry.setTime(now);\n-        expiry.add(Calendar.MINUTE,\n-                confDAO.find(\"jwt.lifetime.minutes\", \"120\").getValues().get(0).getLongValue().intValue());\n-        consumer.getJwtClaims().setExpiryTime(expiry.getTime().getTime());\n-\n-        JwtToken token = new JwtToken(JWS_HEADERS, consumer.getJwtClaims());\n-        JwsJwtCompactProducer producer = new JwsJwtCompactProducer(token);\n-\n-        String body = producer.signWith(jwsSignatureProvider);\n-\n-        binder.update(accessToken, body, expiry.getTime());\n-\n-        return body;\n+        return binder.update(accessToken);\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")"},{"sha":"80f4d6e94dac9ac641205e8b025e7a5e7b29d34d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ExternalResourceValidator.java","status":"modified","additions":6,"deletions":5,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FExternalResourceValidator.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -56,12 +56,13 @@ public boolean evaluate(final MappingItem item) {\n \n         boolean isValid = true;\n \n-        int passwords = 0;\n-        for (MappingItem item : mapping.getItems()) {\n-            if (item.isPassword()) {\n-                passwords++;\n+        long passwords = IterableUtils.countMatches(mapping.getItems(), new Predicate<MappingItem>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItem item) {\n+                return item.isPassword();\n             }\n-        }\n+        });\n         if (passwords > 1) {\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidMapping, \"One password mapping is allowed at most\"))."},{"sha":"b24137fcb1cc02601281c012c0393fb07ec8c95b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AccessTokenDataBinder.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -19,14 +19,18 @@\n package org.apache.syncope.core.provisioning.api.data;\n \n import java.util.Date;\n+import java.util.Map;\n+import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n \n public interface AccessTokenDataBinder {\n \n-    void create(String key, String body, Date expiryTime);\n+    Triple<String, String, Date> generateJWT(String subject, int duration, Map<String, Object> claims);\n \n-    void update(AccessToken accessToken, String body, Date expiryTime);\n+    String create(String subject, Map<String, Object> claims, boolean replaceExisting);\n+\n+    String update(AccessToken accessToken);\n \n     AccessTokenTO getAccessTokenTO(AccessToken accessToken);\n "},{"sha":"53cd3c5f988a7c3c9032e2c9cb020a2e0696c10f","filename":"core/provisioning-java/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -49,6 +49,11 @@ under the License.\n       <artifactId>commons-jexl3</artifactId>\n     </dependency>\n \n+    <dependency>\n+      <groupId>com.fasterxml.uuid</groupId>\n+      <artifactId>java-uuid-generator</artifactId>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context-support</artifactId>"},{"sha":"b278e301f31f0315708de112111987d4d0076bf1","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"modified","additions":103,"deletions":10,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -18,14 +18,28 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.RandomBasedGenerator;\n+import java.util.Calendar;\n import java.util.Date;\n+import java.util.Map;\n+import javax.annotation.Resource;\n+import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.cxf.rs.security.jose.common.JoseType;\n+import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n+import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n+import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n+import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactProducer;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n+import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n import org.apache.syncope.common.lib.to.AccessTokenTO;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n import org.apache.syncope.core.spring.BeanUtils;\n-import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n@@ -34,29 +48,108 @@ public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n \n     private static final String[] IGNORE_PROPERTIES = { \"owner\" };\n \n+    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n+\n+    private static final JwsHeaders JWS_HEADERS = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+\n+    @Resource(name = \"jwtIssuer\")\n+    private String jwtIssuer;\n+\n+    @Autowired\n+    private JwsSignatureProvider jwsSignatureProvider;\n+\n     @Autowired\n     private AccessTokenDAO accessTokenDAO;\n \n+    @Autowired\n+    private ConfDAO confDAO;\n+\n     @Autowired\n     private EntityFactory entityFactory;\n \n     @Override\n-    public void create(final String key, final String body, final Date expiryTime) {\n-        AccessToken accessToken = entityFactory.newEntity(AccessToken.class);\n-        accessToken.setKey(key);\n-        accessToken.setBody(body);\n-        accessToken.setExpiryTime(expiryTime);\n-        accessToken.setOwner(AuthContextUtils.getUsername());\n+    public Triple<String, String, Date> generateJWT(\n+            final String subject, final int duration, final Map<String, Object> claims) {\n \n-        accessTokenDAO.save(accessToken);\n+        Date now = new Date();\n+\n+        Calendar expiry = Calendar.getInstance();\n+        expiry.setTime(now);\n+        expiry.add(Calendar.MINUTE, duration);\n+\n+        JwtClaims jwtClaims = new JwtClaims();\n+        jwtClaims.setTokenId(UUID_GENERATOR.generate().toString());\n+        jwtClaims.setSubject(subject);\n+        jwtClaims.setIssuedAt(now.getTime());\n+        jwtClaims.setIssuer(jwtIssuer);\n+        jwtClaims.setExpiryTime(expiry.getTime().getTime());\n+        jwtClaims.setNotBefore(now.getTime());\n+        for (Map.Entry<String, Object> entry : claims.entrySet()) {\n+            jwtClaims.setClaim(entry.getKey(), entry.getValue());\n+        }\n+\n+        JwtToken token = new JwtToken(JWS_HEADERS, jwtClaims);\n+        JwsJwtCompactProducer producer = new JwsJwtCompactProducer(token);\n+\n+        String signed = producer.signWith(jwsSignatureProvider);\n+\n+        return Triple.of(jwtClaims.getTokenId(), signed, expiry.getTime());\n     }\n \n     @Override\n-    public void update(final AccessToken accessToken, final String body, final Date expiryTime) {\n+    public String create(final String subject, final Map<String, Object> claims, final boolean replaceExisting) {\n+        String body = null;\n+\n+        AccessToken existing = accessTokenDAO.findByOwner(subject);\n+        if (existing != null) {\n+            body = existing.getBody();\n+        }\n+\n+        if (replaceExisting || body == null) {\n+            Triple<String, String, Date> created = generateJWT(\n+                    subject,\n+                    confDAO.find(\"jwt.lifetime.minutes\", \"120\").getValues().get(0).getLongValue().intValue(),\n+                    claims);\n+\n+            body = created.getMiddle();\n+\n+            AccessToken accessToken = entityFactory.newEntity(AccessToken.class);\n+            accessToken.setKey(created.getLeft());\n+            accessToken.setBody(body);\n+            accessToken.setExpiryTime(created.getRight());\n+            accessToken.setOwner(subject);\n+            accessTokenDAO.save(accessToken);\n+        }\n+\n+        if (replaceExisting && existing != null) {\n+            accessTokenDAO.delete(existing);\n+        }\n+\n+        return body;\n+    }\n+\n+    @Override\n+    public String update(final AccessToken accessToken) {\n+        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken.getBody());\n+\n+        Date now = new Date();\n+        Calendar expiry = Calendar.getInstance();\n+        expiry.setTime(now);\n+        expiry.add(Calendar.MINUTE,\n+                confDAO.find(\"jwt.lifetime.minutes\", \"120\").getValues().get(0).getLongValue().intValue());\n+        consumer.getJwtClaims().setExpiryTime(expiry.getTime().getTime());\n+\n+        JwtToken token = new JwtToken(JWS_HEADERS, consumer.getJwtClaims());\n+        JwsJwtCompactProducer producer = new JwsJwtCompactProducer(token);\n+\n+        String body = producer.signWith(jwsSignatureProvider);\n+\n         accessToken.setBody(body);\n-        accessToken.setExpiryTime(expiryTime);\n+        accessToken.setExpiryTime(expiry.getTime());\n \n         accessTokenDAO.save(accessToken);\n+\n+        return body;\n     }\n \n     @Override"},{"sha":"e719a38beae5ce824ff38220a50edadeb59a6683","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/utils/MappingUtils.java","status":"modified","additions":26,"deletions":8,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Futils%2FMappingUtils.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -28,6 +28,7 @@\n import org.apache.commons.jexl3.MapContext;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n@@ -168,24 +169,27 @@ public static Name evaluateNAME(final Any<?> any, final Provision provision, fin\n         return name;\n     }\n \n-    public static List<MappingItemTransformer> getMappingItemTransformers(final MappingItem mappingItem) {\n+    private static List<MappingItemTransformer> getMappingItemTransformers(\n+            final String propagationJEXLTransformer,\n+            final String pullJEXLTransformer,\n+            final List<String> mappingItemTransformerClassNames) {\n+\n         List<MappingItemTransformer> result = new ArrayList<>();\n \n         // First consider the JEXL transformation expressions\n-        if (StringUtils.isNotBlank(mappingItem.getPropagationJEXLTransformer())\n-                || StringUtils.isNotBlank(mappingItem.getPullJEXLTransformer())) {\n-\n+        if (StringUtils.isNotBlank(propagationJEXLTransformer) || StringUtils.isNotBlank(pullJEXLTransformer)) {\n             JEXLMappingItemTransformer jexlTransformer =\n                     (JEXLMappingItemTransformer) ApplicationContextProvider.getBeanFactory().\n-                    createBean(JEXLMappingItemTransformerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME, false);\n+                            createBean(JEXLMappingItemTransformerImpl.class, AbstractBeanDefinition.AUTOWIRE_BY_NAME,\n+                                    false);\n \n-            jexlTransformer.setPropagationJEXL(mappingItem.getPropagationJEXLTransformer());\n-            jexlTransformer.setPullJEXL(mappingItem.getPullJEXLTransformer());\n+            jexlTransformer.setPropagationJEXL(propagationJEXLTransformer);\n+            jexlTransformer.setPullJEXL(pullJEXLTransformer);\n             result.add(jexlTransformer);\n         }\n \n         // Then other custom tranaformers\n-        for (String className : mappingItem.getMappingItemTransformerClassNames()) {\n+        for (String className : mappingItemTransformerClassNames) {\n             try {\n                 Class<?> transformerClass = ClassUtils.getClass(className);\n \n@@ -199,6 +203,20 @@ public static List<MappingItemTransformer> getMappingItemTransformers(final Mapp\n         return result;\n     }\n \n+    public static List<MappingItemTransformer> getMappingItemTransformers(final MappingItemTO mappingItem) {\n+        return getMappingItemTransformers(\n+                mappingItem.getPropagationJEXLTransformer(),\n+                mappingItem.getPullJEXLTransformer(),\n+                mappingItem.getMappingItemTransformerClassNames());\n+    }\n+\n+    public static List<MappingItemTransformer> getMappingItemTransformers(final MappingItem mappingItem) {\n+        return getMappingItemTransformers(\n+                mappingItem.getPropagationJEXLTransformer(),\n+                mappingItem.getPullJEXLTransformer(),\n+                mappingItem.getMappingItemTransformerClassNames());\n+    }\n+\n     /**\n      * Build options for requesting all mapped connector attributes.\n      *"},{"sha":"b16780f32921ef17e50a258214f0edf079d68f3d","filename":"core/provisioning-java/src/test/resources/provisioningTest.xml","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Ftest%2Fresources%2FprovisioningTest.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -37,5 +37,24 @@ under the License.\n     <property name=\"ignoreResourceNotFound\" value=\"true\"/>\n     <property name=\"ignoreUnresolvablePlaceholders\" value=\"true\"/>\n   </bean>\n+\n+  <bean id=\"jwtIssuer\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${jwtIssuer}\"/>\n+  </bean>\n+  <bean id=\"jwsKey\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${jwsKey}\"/>\n+  </bean>\n+  <bean id=\"jwsSignatureVerifier\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier\">\n+    <constructor-arg value=\"${jwsKey}.bytes\" index=\"0\"/>\n+    <constructor-arg index=\"1\">\n+      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">HS512</value>\n+    </constructor-arg>\n+  </bean>\n+  <bean id=\"jwsSignatureProvider\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider\">\n+    <constructor-arg value=\"${jwsKey}.bytes\" index=\"0\"/>\n+    <constructor-arg index=\"1\">\n+      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">HS512</value>\n+    </constructor-arg>\n+  </bean>\n   \n </beans>"},{"sha":"f5859dbcf638cb5e2d98a1fec26de9155c8af6e4","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -37,7 +37,7 @@ public class AccessTokenServiceImpl extends AbstractServiceImpl implements Acces\n     @Override\n     public Response login() {\n         return Response.noContent().\n-                header(RESTHeaders.TOKEN, logic.login(messageContext.getHttpServletRequest().getRemoteHost())).\n+                header(RESTHeaders.TOKEN, logic.login()).\n                 build();\n     }\n "},{"sha":"1ff6f0aa033a58a1f6e4fc87fb858cd02138fc1d","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationProvider.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -21,7 +21,6 @@\n import java.util.Date;\n import javax.annotation.Resource;\n import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.authentication.AuthenticationProvider;\n import org.springframework.security.authentication.BadCredentialsException;\n@@ -74,13 +73,6 @@ public Void exec() {\n             throw new BadCredentialsException(\"Invalid JWT issuer\");\n         }\n \n-        if (!claims.containsProperty(SyncopeConstants.JWT_CLAIM_REMOTE_HOST)\n-                || !claims.getClaim(SyncopeConstants.JWT_CLAIM_REMOTE_HOST).\n-                        equals(jwtAuthentication.getDetails().getRemoteHost())) {\n-\n-            throw new BadCredentialsException(\"Unexpected property found in JWT\");\n-        }\n-\n         jwtAuthentication.setAuthenticated(true);\n         return jwtAuthentication;\n     }"},{"sha":"e5a6726e83c6892cd5af468dfb8105171588b7e2","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationDetails.java","status":"modified","additions":0,"deletions":8,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -32,18 +32,14 @@ public class SyncopeAuthenticationDetails implements Serializable {\n \n     private static final long serialVersionUID = -5899959397393502897L;\n \n-    private final String remoteHost;\n-\n     private final String domain;\n \n     public SyncopeAuthenticationDetails(final HttpServletRequest request) {\n         this.domain = request.getHeader(RESTHeaders.DOMAIN);\n-        this.remoteHost = request.getRemoteHost();\n     }\n \n     public SyncopeAuthenticationDetails(final String domain) {\n         this.domain = domain;\n-        this.remoteHost = null;\n     }\n \n     public String getDomain() {\n@@ -52,10 +48,6 @@ public String getDomain() {\n                 : domain;\n     }\n \n-    public String getRemoteHost() {\n-        return remoteHost;\n-    }\n-\n     @Override\n     public boolean equals(final Object obj) {\n         return EqualsBuilder.reflectionEquals(this, obj);"},{"sha":"156fc1c8467e115b27a16d6164e208bba9f8a189","filename":"ext/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -79,6 +79,7 @@ under the License.\n   <modules>\n     <module>camel</module>\n     <module>swagger-ui</module>\n+    <module>saml2sp</module>\n   </modules>\n \n </project>"},{"sha":"532f760dd1b6f2b1f49e1d01eb8c517b85f34059","filename":"ext/saml2sp/agent/pom.xml","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,126 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP Agent</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP Agent</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-agent</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency> \n+      <groupId>javax.servlet</groupId> \n+      <artifactId>javax.servlet-api</artifactId> \n+    </dependency>\n+    <dependency>\n+      <groupId>javax.servlet.jsp</groupId>\n+      <artifactId>javax.servlet.jsp-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>javax.servlet</groupId>\n+      <artifactId>jstl</artifactId>\n+      <scope>provided</scope>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>commons-io</groupId>\n+      <artifactId>commons-io</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.client</groupId>\n+      <artifactId>syncope-client-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+  \n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+    \n+    <resources>\n+      <resource>\n+        <directory>src/main/resources</directory>\n+        <filtering>true</filtering>\n+      </resource>\n+      \n+      <resource>\n+        <directory>${basedir}</directory>\n+        <targetPath>META-INF</targetPath>\n+        <includes>\n+          <include>LICENSE</include>\n+          <include>NOTICE</include>\n+        </includes>\n+      </resource>\n+    </resources>\n+  </build>\n+  \n+  <profiles>\n+    <profile>\n+      <id>apache-release</id>\n+\n+      <build>\n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.maven.plugins</groupId>\n+            <artifactId>maven-source-plugin</artifactId>\n+            <inherited>false</inherited>\n+            <executions>\n+              <execution>\n+                <id>attach-sources</id>\n+                <goals>\n+                  <goal>jar-no-fork</goal>\n+                </goals>\n+                <configuration>\n+                  <includes>\n+                    <include>${basedir}/LICENSE</include>\n+                    <include>${basedir}/NOTICE</include>\n+                  </includes>\n+                </configuration>\n+              </execution>\n+            </executions>\n+          </plugin>\n+        </plugins>\n+      </build>\n+    </profile>\n+  </profiles>\n+</project>"},{"sha":"6461a4773fcab79f40235ffef80e5b7b6867ddae","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/AssertionConsumer.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FAssertionConsumer.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.saml2lsp.agent;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@WebServlet(name = \"assertionConsumer\", urlPatterns = { \"/saml2sp/assertion-consumer\" })\n+public class AssertionConsumer extends HttpServlet {\n+\n+    private static final long serialVersionUID = 968480296813639041L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(AssertionConsumer.class);\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n+                getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+        try {\n+            SAML2LoginResponseTO responseTO = anonymous.getService(SAML2SPService.class).\n+                    validateLoginResponse(request.getInputStream());\n+\n+            request.getSession(true).setAttribute(Constants.SAML2SPJWT, responseTO.getAccessToken());\n+\n+            String successURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_SUCCESS_URL);\n+            if (successURL == null) {\n+                request.setAttribute(\"responseTO\", responseTO);\n+                request.getRequestDispatcher(\"loginSuccess.jsp\").forward(request, response);\n+            } else {\n+                response.sendRedirect(successURL);\n+            }\n+        } catch (Exception e) {\n+            LOG.error(\"While processing authentication response from IdP\", e);\n+\n+            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_ERROR_URL);\n+            if (errorURL == null) {\n+                request.setAttribute(\"exception\", e);\n+                request.getRequestDispatcher(\"loginError.jsp\").forward(request, response);\n+\n+                e.printStackTrace(response.getWriter());\n+            } else {\n+                response.sendRedirect(errorURL + \"?message=\" + e.getMessage());\n+            }\n+        }\n+    }\n+}"},{"sha":"619e4b8ccc649afa1815d7cbaaf678846e6e1699","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Constants.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FConstants.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.saml2lsp.agent;\n+\n+public final class Constants {\n+\n+    public static final String SYNCOPE_CLIENT_FACTORY = \"SyncopeClientFactory\";\n+\n+    public static final String SYNCOPE_ANONYMOUS_CLIENT = \"SyncopeAnonymousClient\";\n+\n+    public static final String PARAM_IDP = \"idp\";\n+\n+    public static final String CONTEXT_PARAM_LOGIN_SUCCESS_URL = \"saml2sp.login.success.url\";\n+\n+    public static final String CONTEXT_PARAM_LOGIN_ERROR_URL = \"saml2sp.login.error.url\";\n+\n+    public static final String CONTEXT_PARAM_LOGOUT_SUCCESS_URL = \"saml2sp.logout.success.url\";\n+\n+    public static final String CONTEXT_PARAM_LOGOUT_ERROR_URL = \"saml2sp.logout.error.url\";\n+\n+    public static final String SAML2SPJWT = \"saml2sp.jwt\";\n+\n+    private Constants() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"198f6b3161cb564e0b54ff05b2116c9aeb4886b7","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Login.java","status":"added","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogin.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,63 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.saml2lsp.agent;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+\n+@WebServlet(name = \"login\", urlPatterns = { \"/saml2sp/login\" })\n+public class Login extends SAML2PostBinding {\n+\n+    private static final long serialVersionUID = 968480296813639041L;\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        String idp = request.getParameter(Constants.PARAM_IDP);\n+\n+        SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n+                getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+        try {\n+            SAML2RequestTO requestTO = anonymous.getService(SAML2SPService.class).createLoginRequest(\n+                    StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"), idp);\n+\n+            prepare(response, requestTO);\n+        } catch (Exception e) {\n+            LOG.error(\"While preparing authentication request to IdP\", e);\n+\n+            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGIN_ERROR_URL);\n+            if (errorURL == null) {\n+                request.setAttribute(\"exception\", e);\n+                request.getRequestDispatcher(\"loginError.jsp\").forward(request, response);\n+\n+                e.printStackTrace(response.getWriter());\n+            } else {\n+                response.sendRedirect(errorURL + \"?message=\" + e.getMessage());\n+            }\n+        }\n+    }\n+}"},{"sha":"b41d004edecc3e6097b05d54f338f74855dcdb57","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Logout.java","status":"added","additions":106,"deletions":0,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FLogout.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,106 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.saml2lsp.agent;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+\n+@WebServlet(name = \"logout\", urlPatterns = { \"/saml2sp/logout\" })\n+public class Logout extends SAML2PostBinding {\n+\n+    private static final long serialVersionUID = 3010286040376932117L;\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        SyncopeClientFactoryBean clientFactory = (SyncopeClientFactoryBean) request.getServletContext().\n+                getAttribute(Constants.SYNCOPE_CLIENT_FACTORY);\n+        try {\n+            String accessToken = (String) request.getSession().getAttribute(Constants.SAML2SPJWT);\n+            if (StringUtils.isBlank(accessToken)) {\n+                throw new IllegalArgumentException(\"No access token found \");\n+            }\n+\n+            SyncopeClient client = clientFactory.create(accessToken);\n+            SAML2RequestTO requestTO = client.getService(SAML2SPService.class).createLogoutRequest(\n+                    StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"));\n+\n+            prepare(response, requestTO);\n+        } catch (Exception e) {\n+            LOG.error(\"While preparing logout request to IdP\", e);\n+\n+            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_ERROR_URL);\n+            if (errorURL == null) {\n+                request.setAttribute(\"exception\", e);\n+                request.getRequestDispatcher(\"logoutError.jsp\").forward(request, response);\n+\n+                e.printStackTrace(response.getWriter());\n+            } else {\n+                response.sendRedirect(errorURL + \"?message=\" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+    @Override\n+    protected void doPost(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        SyncopeClientFactoryBean clientFactory = (SyncopeClientFactoryBean) request.getServletContext().\n+                getAttribute(Constants.SYNCOPE_CLIENT_FACTORY);\n+        try {\n+            String accessToken = (String) request.getSession().getAttribute(Constants.SAML2SPJWT);\n+            if (StringUtils.isBlank(accessToken)) {\n+                throw new IllegalArgumentException(\"No access token found \");\n+            }\n+\n+            SyncopeClient client = clientFactory.create(accessToken);\n+            client.getService(SAML2SPService.class).validateLogoutResponse(request.getInputStream());\n+\n+            String successURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_SUCCESS_URL);\n+            if (successURL == null) {\n+                request.getRequestDispatcher(\"logoutSuccess.jsp\").forward(request, response);\n+            } else {\n+                response.sendRedirect(successURL);\n+            }\n+            request.getSession().removeAttribute(Constants.SAML2SPJWT);\n+        } catch (Exception e) {\n+            LOG.error(\"While processing authentication response from IdP\", e);\n+\n+            String errorURL = getServletContext().getInitParameter(Constants.CONTEXT_PARAM_LOGOUT_ERROR_URL);\n+            if (errorURL == null) {\n+                request.setAttribute(\"exception\", e);\n+                request.getRequestDispatcher(\"logoutError.jsp\").forward(request, response);\n+\n+                e.printStackTrace(response.getWriter());\n+            } else {\n+                response.sendRedirect(errorURL + \"?message=\" + e.getMessage());\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"aaa3df6dd1779f5a72172d5c7702527fc25164cd","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/Metadata.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FMetadata.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.saml2lsp.agent;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import javax.servlet.ServletException;\n+import javax.servlet.annotation.WebServlet;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+\n+@WebServlet(name = \"metadata\", urlPatterns = { \"/saml2sp/metadata\" })\n+public class Metadata extends HttpServlet {\n+\n+    private static final long serialVersionUID = 694030186105137875L;\n+\n+    @Override\n+    protected void doGet(final HttpServletRequest request, final HttpServletResponse response)\n+            throws ServletException, IOException {\n+\n+        SyncopeClient anonymous = (SyncopeClient) request.getServletContext().\n+                getAttribute(Constants.SYNCOPE_ANONYMOUS_CLIENT);\n+        SAML2SPService service = anonymous.getService(SAML2SPService.class);\n+        WebClient.client(service).accept(MediaType.APPLICATION_XML_TYPE).type(MediaType.APPLICATION_XML_TYPE);\n+        Response metadataResponse = service.getMetadata(\n+                StringUtils.substringBefore(request.getRequestURL().toString(), \"/saml2sp\"));\n+\n+        response.setContentType(metadataResponse.getMediaType().toString());\n+        IOUtils.copy((InputStream) metadataResponse.getEntity(), response.getOutputStream());\n+        ((InputStream) metadataResponse.getEntity()).close();\n+    }\n+}"},{"sha":"086884181952de6cff0df8fb9ea97bb6d3c5e976","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/SAML2PostBinding.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2PostBinding.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2PostBinding.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2PostBinding.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.saml2lsp.agent;\n+\n+import java.io.IOException;\n+import javax.servlet.http.HttpServlet;\n+import javax.servlet.http.HttpServletResponse;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class SAML2PostBinding extends HttpServlet {\n+\n+    private static final long serialVersionUID = 7969539245875799817L;\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(SAML2PostBinding.class);\n+\n+    protected void prepare(final HttpServletResponse response, final SAML2RequestTO requestTO) throws IOException {\n+        response.setContentType(MediaType.TEXT_HTML);\n+        response.setHeader(HttpHeaders.CACHE_CONTROL, \"no-cache, no-store\");\n+        response.setHeader(\"Pragma\", \"no-cache\");\n+        response.getWriter().write(\"\"\n+                + \"<html xmlns=\\\"http://www.w3.org/1999/xhtml\\\">\"\n+                + \"  <body onLoad=\\\"document.forms[0].submit();\\\">\"\n+                + \"    <form action=\\\"\" + requestTO.getIdpServiceAddress() + \"\\\" method=\\\"POST\\\">\"\n+                + \"      <input type=\\\"hidden\\\" name=\\\"SAMLRequest\\\" value=\\\"\" + requestTO.getContent() + \"\\\"/>\"\n+                + \"      <input type=\\\"hidden\\\" name=\\\"RelayState\\\" value=\\\"\" + requestTO.getRelayState() + \"\\\"/>\"\n+                + \"      <input type=\\\"submit\\\" style=\\\"visibility: hidden;\\\"/>\"\n+                + \"    </form>\"\n+                + \"  </body>\"\n+                + \"</html>\");\n+    }\n+}"},{"sha":"e42d438f5c517f2454af2a5340554e4cabda0d6f","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/SAML2SPAgentSetup.java","status":"added","additions":92,"deletions":0,"changes":92,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,92 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.saml2lsp.agent;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.util.Properties;\n+import javax.servlet.ServletContextEvent;\n+import javax.servlet.ServletContextListener;\n+import javax.servlet.annotation.WebListener;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+\n+@WebListener\n+public class SAML2SPAgentSetup implements ServletContextListener {\n+\n+    private static final String SAML2SP_AGENT_PROPERTIES = \"saml2sp-agent.properties\";\n+\n+    private static <T> T assertNotNull(final T argument, final String name) {\n+        if (argument == null) {\n+            throw new IllegalArgumentException(\"Argument '\" + name + \"' may not be null.\");\n+        }\n+        return argument;\n+    }\n+\n+    @Override\n+    public void contextInitialized(final ServletContextEvent sce) {\n+        // read saml2spagent.properties\n+        Properties props = new Properties();\n+        try (InputStream is = getClass().getResourceAsStream(\"/\" + SAML2SP_AGENT_PROPERTIES)) {\n+            props.load(is);\n+            File confDir = new File(props.getProperty(\"conf.directory\"));\n+            if (confDir.exists() && confDir.canRead() && confDir.isDirectory()) {\n+                File consoleDirProps = FileUtils.getFile(confDir, SAML2SP_AGENT_PROPERTIES);\n+                if (consoleDirProps.exists() && consoleDirProps.canRead() && consoleDirProps.isFile()) {\n+                    props.clear();\n+                    props.load(FileUtils.openInputStream(consoleDirProps));\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not read \" + SAML2SP_AGENT_PROPERTIES, e);\n+        }\n+\n+        String anonymousUser = props.getProperty(\"anonymousUser\");\n+        assertNotNull(anonymousUser, \"<anonymousUser>\");\n+        String anonymousKey = props.getProperty(\"anonymousKey\");\n+        assertNotNull(anonymousKey, \"<anonymousKey>\");\n+\n+        String scheme = props.getProperty(\"scheme\");\n+        assertNotNull(scheme, \"<scheme>\");\n+        String host = props.getProperty(\"host\");\n+        assertNotNull(host, \"<host>\");\n+        String port = props.getProperty(\"port\");\n+        assertNotNull(port, \"<port>\");\n+        String rootPath = props.getProperty(\"rootPath\");\n+        assertNotNull(rootPath, \"<rootPath>\");\n+        String useGZIPCompression = props.getProperty(\"useGZIPCompression\");\n+        assertNotNull(useGZIPCompression, \"<useGZIPCompression>\");\n+\n+        SyncopeClientFactoryBean clientFactory = new SyncopeClientFactoryBean().\n+                setAddress(scheme + \"://\" + host + \":\" + port + \"/\" + rootPath).\n+                setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n+\n+        sce.getServletContext().setAttribute(Constants.SYNCOPE_CLIENT_FACTORY, clientFactory);\n+        sce.getServletContext().setAttribute(\n+                Constants.SYNCOPE_ANONYMOUS_CLIENT,\n+                clientFactory.create(new AnonymousAuthenticationHandler(anonymousUser, anonymousKey)));\n+    }\n+\n+    @Override\n+    public void contextDestroyed(final ServletContextEvent sce) {\n+    }\n+\n+}"},{"sha":"a99747938c673720387d3fc80be283b85ebcc8fb","filename":"ext/saml2sp/agent/src/main/resources/META-INF/resources/saml2sp/loginError.jsp","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginError.jsp?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,35 @@\n+<%--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+--%>\n+<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n+<%\n+    Exception exception = (Exception) request.getAttribute(\"exception\");\n+%>\n+<html>\n+  <head>\n+    <title>Apache Syncope ${syncope.version} - SAML 2.0 SP - Login Error</title>\n+  </head>\n+  <body>\n+    <h1>An error was found</h1>\n+\n+    <h2><%=exception.getMessage()%></h2>\n+    <pre>\n+      <%exception.printStackTrace(new java.io.PrintWriter(out));%>\n+    </pre>\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"7f7034949fddbd443ff6878f0e77ea2f4ca1071a","filename":"ext/saml2sp/agent/src/main/resources/META-INF/resources/saml2sp/loginSuccess.jsp","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginSuccess.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginSuccess.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FloginSuccess.jsp?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,48 @@\n+<%--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+--%>\n+<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n+<%@page import=\"org.apache.syncope.common.lib.to.SAML2LoginResponseTO\"%>\n+<%@taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n+<c:set var=\"responseTO\" value=\"${requestScope['responseTO']}\"/>\n+<html>\n+  <head>\n+    <title>Apache Syncope ${syncope.version} - SAML 2.0 SP - Successful Login</title>\n+  </head>\n+  <body>\n+    <h1>Welcome ${responseTO.username}</h1>\n+\n+    <p>You have been successfully authenticated by the requested SAML 2.0 IdP with\n+      <tt>NameID ${responseTO.nameID}</tt> and <tt>SessionIndex ${responseTO.sessionIndex}</tt>.</p>\n+    \n+    <p>Your current session is valid:</p>\n+    <ul>\n+      <li>not before ${responseTO.authInstant}</li>\n+      <li>not on or after ${responseTO.notOnOrAfter}</li>\n+    </ul>\n+\n+    <p>The following attributes are available:</p>\n+    <ul>\n+      <c:forEach items=\"${responseTO.attrs}\" var=\"attr\">\n+        <li>\n+          <b>${attr.schema}</b><br/>${attr.values}\n+        </li>\n+      </c:forEach>\n+    </ul>\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"d40e5d4cd4165a0aa0aaaa7a70ef7a007b1fa467","filename":"ext/saml2sp/agent/src/main/resources/META-INF/resources/saml2sp/logoutError.jsp","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutError.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutError.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutError.jsp?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,35 @@\n+<%--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+--%>\n+<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n+<%\n+    Exception exception = (Exception) request.getAttribute(\"exception\");\n+%>\n+<html>\n+  <head>\n+    <title>Apache Syncope ${syncope.version} - SAML 2.0 SP - Logout Error</title>\n+  </head>\n+  <body>\n+    <h1>An error was found</h1>\n+\n+    <h2><%=exception.getMessage()%></h2>\n+    <pre>\n+      <%exception.printStackTrace(new java.io.PrintWriter(out));%>\n+    </pre>\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"2e81d48605813de4c213d26c611ea66820be53c1","filename":"ext/saml2sp/agent/src/main/resources/META-INF/resources/saml2sp/logoutSuccess.jsp","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutSuccess.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutSuccess.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fsaml2sp%2FlogoutSuccess.jsp?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,27 @@\n+<%--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+--%>\n+<%@page contentType=\"text/html; charset=UTF-8\" pageEncoding=\"UTF-8\"%>\n+<html>\n+  <head>\n+    <title>Apache Syncope ${syncope.version} - SAML 2.0 SP - Successful Logout</title>\n+  </head>\n+  <body>\n+    <h1>You have been successfully logged out.</h1>\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"fab858afd86ee0eee96398395e3b2675040ca67c","filename":"ext/saml2sp/agent/src/main/resources/META-INF/web-fragment.xml","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fweb-fragment.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,26 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<web-fragment xmlns=\"http://xmlns.jcp.org/xml/ns/javaee\"\n+              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+              xsi:schemaLocation=\"http://xmlns.jcp.org/xml/ns/javaee \n+                                  http://xmlns.jcp.org/xml/ns/javaee/web-fragment_3_1.xsd\"\n+              id=\"${pom.artifactId}\" version=\"3.1\">\n+\n+</web-fragment>"},{"sha":"d3fee301868b829256d41401d39d0e9c76245c29","filename":"ext/saml2sp/agent/src/main/resources/saml2sp-agent.properties","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+conf.directory=${conf.directory}\n+\n+anonymousUser=${anonymousUser}\n+anonymousKey=${anonymousKey}\n+\n+scheme=http\n+host=localhost\n+port=8080\n+rootPath=/syncope/rest/\n+useGZIPCompression=true"},{"sha":"80c71575efbc9f5153dcf194f02d121ca5140805","filename":"ext/saml2sp/common-lib/pom.xml","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP Common Lib</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP Common Lib</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-common-lib</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"9b5eb20271f08026a69198c069aec4d56ea1fa2b","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2IdPTO.java","status":"added","additions":122,"deletions":0,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2IdPTO.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,122 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"saml2idp\")\n+@XmlType\n+public class SAML2IdPTO extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 4426527052873779881L;\n+\n+    private String key;\n+\n+    private String entityID;\n+\n+    private String metadata;\n+\n+    private boolean useDeflateEncoding;\n+\n+    private final List<MappingItemTO> mappingItems = new ArrayList<>();\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getEntityID() {\n+        return entityID;\n+    }\n+\n+    public void setEntityID(final String entityID) {\n+        this.entityID = entityID;\n+    }\n+\n+    public String getMetadata() {\n+        return metadata;\n+    }\n+\n+    public void setMetadata(final String metadata) {\n+        this.metadata = metadata;\n+    }\n+\n+    public boolean isUseDeflateEncoding() {\n+        return useDeflateEncoding;\n+    }\n+\n+    public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n+        this.useDeflateEncoding = useDeflateEncoding;\n+    }\n+\n+    public MappingItemTO getConnObjectKeyItem() {\n+        return IterableUtils.find(getMappingItems(), new Predicate<MappingItemTO>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItemTO item) {\n+                return item.isConnObjectKey();\n+            }\n+        });\n+    }\n+\n+    protected boolean addConnObjectKeyItem(final MappingItemTO connObjectItem) {\n+        connObjectItem.setMandatoryCondition(\"true\");\n+        connObjectItem.setConnObjectKey(true);\n+\n+        return this.add(connObjectItem);\n+    }\n+\n+    public boolean setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n+        return connObjectKeyItem == null\n+                ? remove(getConnObjectKeyItem())\n+                : addConnObjectKeyItem(connObjectKeyItem);\n+    }\n+\n+    @XmlElementWrapper(name = \"mappingItems\")\n+    @XmlElement(name = \"mappingItem\")\n+    @JsonProperty(\"mappingItems\")\n+    public List<MappingItemTO> getMappingItems() {\n+        return mappingItems;\n+    }\n+\n+    public boolean add(final MappingItemTO item) {\n+        return item == null ? false : this.mappingItems.contains(item) || this.mappingItems.add(item);\n+    }\n+\n+    public boolean remove(final MappingItemTO item) {\n+        return this.mappingItems.remove(item);\n+    }\n+\n+}"},{"sha":"b6ece530f4aa8e50cc89271782531265c9f49181","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2LoginResponseTO.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2LoginResponseTO.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"saml2LoginResponse\")\n+@XmlType\n+public class SAML2LoginResponseTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 794772343787258010L;\n+\n+    private String nameID;\n+\n+    private String sessionIndex;\n+\n+    private Date authInstant;\n+\n+    private Date notOnOrAfter;\n+\n+    private String accessToken;\n+\n+    private String username;\n+\n+    private final Set<AttrTO> attrs = new HashSet<>();\n+\n+    public String getNameID() {\n+        return nameID;\n+    }\n+\n+    public void setNameID(final String nameID) {\n+        this.nameID = nameID;\n+    }\n+\n+    public String getSessionIndex() {\n+        return sessionIndex;\n+    }\n+\n+    public void setSessionIndex(final String sessionIndex) {\n+        this.sessionIndex = sessionIndex;\n+    }\n+\n+    public Date getAuthInstant() {\n+        if (authInstant != null) {\n+            return new Date(authInstant.getTime());\n+        }\n+        return null;\n+    }\n+\n+    public void setAuthInstant(final Date authInstant) {\n+        if (authInstant != null) {\n+            this.authInstant = new Date(authInstant.getTime());\n+        } else {\n+            this.authInstant = null;\n+        }\n+    }\n+\n+    public Date getNotOnOrAfter() {\n+        if (notOnOrAfter != null) {\n+            return new Date(notOnOrAfter.getTime());\n+        }\n+        return null;\n+    }\n+\n+    public void setNotOnOrAfter(final Date notOnOrAfter) {\n+        if (notOnOrAfter != null) {\n+            this.notOnOrAfter = new Date(notOnOrAfter.getTime());\n+        } else {\n+            this.notOnOrAfter = null;\n+        }\n+    }\n+\n+    public String getAccessToken() {\n+        return accessToken;\n+    }\n+\n+    public void setAccessToken(final String accessToken) {\n+        this.accessToken = accessToken;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public void setUsername(final String username) {\n+        this.username = username;\n+    }\n+\n+    @XmlElementWrapper(name = \"attrs\")\n+    @XmlElement(name = \"attr\")\n+    @JsonProperty(\"attrs\")\n+    public Set<AttrTO> getAttrs() {\n+        return attrs;\n+    }\n+\n+}"},{"sha":"136b58eede78d22e2319538429ade3eba271b687","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/to/SAML2RequestTO.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2RequestTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2RequestTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSAML2RequestTO.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"saml2request\")\n+@XmlType\n+public class SAML2RequestTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -2454209295007372086L;\n+\n+    private String idpServiceAddress;\n+\n+    private String content;\n+\n+    private String relayState;\n+\n+    public String getIdpServiceAddress() {\n+        return idpServiceAddress;\n+    }\n+\n+    public void setIdpServiceAddress(final String idpServiceAddress) {\n+        this.idpServiceAddress = idpServiceAddress;\n+    }\n+\n+    public String getContent() {\n+        return content;\n+    }\n+\n+    public void setContent(final String content) {\n+        this.content = content;\n+    }\n+\n+    public String getRelayState() {\n+        return relayState;\n+    }\n+\n+    public void setRelayState(final String relayState) {\n+        this.relayState = relayState;\n+    }\n+\n+}"},{"sha":"985bf8b996605e3e52b7c3d564ec1777abd21111","filename":"ext/saml2sp/common-lib/src/main/java/org/apache/syncope/common/lib/types/SAML2SPEntitlement.java","status":"added","additions":58,"deletions":0,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SPEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SPEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SPEntitlement.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,58 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Modifier;\n+import java.util.Collections;\n+import java.util.Set;\n+import java.util.TreeSet;\n+\n+public final class SAML2SPEntitlement {\n+\n+    public static final String IDP_READ = \"IDP_READ\";\n+\n+    public static final String IDP_LIST = \"IDP_LIST\";\n+\n+    public static final String IDP_IMPORT = \"IDP_IMPORT\";\n+\n+    public static final String IDP_UPDATE = \"IDP_UPDATE\";\n+\n+    public static final String IDP_DELETE = \"IDP_DELETE\";\n+\n+    private static final Set<String> VALUES;\n+\n+    static {\n+        Set<String> values = new TreeSet<>();\n+        for (Field field : SAML2SPEntitlement.class.getDeclaredFields()) {\n+            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n+                values.add(field.getName());\n+            }\n+        }\n+        VALUES = Collections.unmodifiableSet(values);\n+    }\n+\n+    public static Set<String> values() {\n+        return VALUES;\n+    }\n+\n+    private SAML2SPEntitlement() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"54500a8d97086107ff7b3ff74373ebca85fe15db","filename":"ext/saml2sp/logic/pom.xml","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP Logic</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP Logic</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-logic</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-provisioning-java</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-security-sso-saml</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.wss4j</groupId>\n+      <artifactId>wss4j-ws-security-dom</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.opensaml</groupId>\n+      <artifactId>opensaml-saml-impl</artifactId>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"3f6b4a39e6f829e68c37b66e1be807c34a62155c","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2IdPLogic.java","status":"added","additions":226,"deletions":0,"changes":226,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2IdPLogic.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,226 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.OutputStreamWriter;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n+import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n+import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n+import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n+import org.apache.wss4j.common.saml.OpenSAMLUtil;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.metadata.EntitiesDescriptor;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.w3c.dom.Element;\n+import org.w3c.dom.Node;\n+import org.w3c.dom.NodeList;\n+\n+@Component\n+public class SAML2IdPLogic extends AbstractTransactionalLogic<SAML2IdPTO> {\n+\n+    static {\n+        OpenSAMLUtil.initSamlEngine(false);\n+    }\n+\n+    @Autowired\n+    private SAML2IdPCache cache;\n+\n+    @Autowired\n+    private SAML2IdPDataBinder binder;\n+\n+    @Autowired\n+    private SAML2IdPDAO idpDAO;\n+\n+    @Autowired\n+    private SAML2ReaderWriter saml2rw;\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_LIST + \"')\")\n+    @Transactional(readOnly = true)\n+    public List<SAML2IdPTO> list() {\n+        return CollectionUtils.collect(idpDAO.findAll(), new Transformer<SAML2IdP, SAML2IdPTO>() {\n+\n+            @Override\n+            public SAML2IdPTO transform(final SAML2IdP input) {\n+                return binder.getIdPTO(input);\n+            }\n+        }, new ArrayList<SAML2IdPTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public SAML2IdPTO read(final String key) {\n+        SAML2IdP idp = idpDAO.find(key);\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + key + \"'\");\n+        }\n+\n+        return binder.getIdPTO(idp);\n+    }\n+\n+    private List<SAML2IdPTO> importIdPs(final InputStream input) throws Exception {\n+        List<EntityDescriptor> idpEntityDescriptors = new ArrayList<>();\n+\n+        Element root = OpenSAMLUtil.getParserPool().parse(new InputStreamReader(input)).getDocumentElement();\n+        if (SAMLConstants.SAML20MD_NS.equals(root.getNamespaceURI())\n+                && EntityDescriptor.DEFAULT_ELEMENT_LOCAL_NAME.equals(root.getLocalName())) {\n+\n+            idpEntityDescriptors.add((EntityDescriptor) OpenSAMLUtil.fromDom(root));\n+        } else if (SAMLConstants.SAML20MD_NS.equals(root.getNamespaceURI())\n+                && EntitiesDescriptor.DEFAULT_ELEMENT_LOCAL_NAME.equals(root.getLocalName())) {\n+\n+            NodeList children = root.getChildNodes();\n+            for (int i = 0; i < children.getLength(); i++) {\n+                Node child = children.item(i);\n+                if (SAMLConstants.SAML20MD_NS.equals(child.getNamespaceURI())\n+                        && EntityDescriptor.DEFAULT_ELEMENT_LOCAL_NAME.equals(child.getLocalName())) {\n+\n+                    NodeList descendants = child.getChildNodes();\n+                    for (int j = 0; j < descendants.getLength(); j++) {\n+                        Node descendant = descendants.item(j);\n+                        if (SAMLConstants.SAML20MD_NS.equals(descendant.getNamespaceURI())\n+                                && IDPSSODescriptor.DEFAULT_ELEMENT_LOCAL_NAME.equals(descendant.getLocalName())) {\n+\n+                            idpEntityDescriptors.add((EntityDescriptor) OpenSAMLUtil.fromDom((Element) child));\n+                        }\n+                    }\n+                }\n+            }\n+        }\n+\n+        List<SAML2IdPTO> result = new ArrayList<>(idpEntityDescriptors.size());\n+        for (EntityDescriptor idpEntityDescriptor : idpEntityDescriptors) {\n+            SAML2IdPTO idpTO = new SAML2IdPTO();\n+            idpTO.setEntityID(idpEntityDescriptor.getEntityID());\n+            idpTO.setUseDeflateEncoding(false);\n+            try (ByteArrayOutputStream baos = new ByteArrayOutputStream()) {\n+                saml2rw.write(new OutputStreamWriter(baos), idpEntityDescriptor, false);\n+                idpTO.setMetadata(Base64.encodeBase64String(baos.toByteArray()));\n+            }\n+            MappingItemTO connObjectKeyItem = new MappingItemTO();\n+            connObjectKeyItem.setIntAttrName(\"username\");\n+            connObjectKeyItem.setExtAttrName(\"NameID\");\n+            idpTO.setConnObjectKeyItem(connObjectKeyItem);\n+            result.add(idpTO);\n+\n+            cache.put(idpEntityDescriptor, connObjectKeyItem, false);\n+        }\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_IMPORT + \"')\")\n+    public List<String> importFromMetadata(final InputStream input) {\n+        List<String> imported = new ArrayList<>();\n+\n+        try {\n+            for (SAML2IdPTO idpTO : importIdPs(input)) {\n+                SAML2IdP idp = idpDAO.save(binder.create(idpTO));\n+                imported.add(idp.getKey());\n+            }\n+        } catch (SyncopeClientException e) {\n+            throw e;\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected error while importing IdP metadata\", e);\n+            SyncopeClientException ex = SyncopeClientException.build(ClientExceptionType.InvalidEntity);\n+            ex.getElements().add(e.getMessage());\n+            throw ex;\n+        }\n+\n+        return imported;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_UPDATE + \"')\")\n+    public void update(final SAML2IdPTO saml2IdpTO) {\n+        SAML2IdP saml2Idp = idpDAO.find(saml2IdpTO.getKey());\n+        if (saml2Idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + saml2IdpTO.getKey() + \"'\");\n+        }\n+\n+        saml2Idp = idpDAO.save(binder.update(saml2Idp, saml2IdpTO));\n+\n+        SAML2IdPEntity idpEntity = cache.get(saml2Idp.getEntityID());\n+        if (idpEntity != null) {\n+            idpEntity.setUseDeflateEncoding(saml2Idp.isUseDeflateEncoding());\n+            idpEntity.setConnObjectKeyItem(binder.getIdPTO(saml2Idp).getConnObjectKeyItem());\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + SAML2SPEntitlement.IDP_DELETE + \"')\")\n+    public void delete(final String key) {\n+        SAML2IdP idp = idpDAO.find(key);\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + key + \"'\");\n+        }\n+\n+        idpDAO.delete(key);\n+        cache.remove(idp.getEntityID());\n+    }\n+\n+    @Override\n+    protected SAML2IdPTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof SAML2IdPTO) {\n+                    key = ((SAML2IdPTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getIdPTO(idpDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"f4522082e3a3f25c2a21795c42da72e1202b1a02","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"added","additions":689,"deletions":0,"changes":689,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,689 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.RandomBasedGenerator;\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import java.io.OutputStreamWriter;\n+import java.lang.reflect.Method;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.util.ArrayList;\n+import java.util.Collections;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.core.MultivaluedMap;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.cxf.helpers.IOUtils;\n+import org.apache.cxf.jaxrs.utils.JAXRSUtils;\n+import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.cxf.rs.security.saml.sso.SSOConstants;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.logic.init.SAML2SPLoader;\n+import org.apache.syncope.core.logic.saml2.SAML2ReaderWriter;\n+import org.apache.syncope.core.logic.saml2.SAML2IdPCache;\n+import org.apache.syncope.core.logic.saml2.SAML2IdPEntity;\n+import org.apache.syncope.core.logic.saml2.SAML2Signer;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n+import org.apache.wss4j.common.saml.OpenSAMLUtil;\n+import org.joda.time.DateTime;\n+import org.opensaml.core.xml.XMLObject;\n+import org.opensaml.core.xml.schema.XSString;\n+import org.opensaml.saml.common.SAMLVersion;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.core.Assertion;\n+import org.opensaml.saml.saml2.core.Attribute;\n+import org.opensaml.saml.saml2.core.AttributeStatement;\n+import org.opensaml.saml.saml2.core.AuthnContext;\n+import org.opensaml.saml.saml2.core.AuthnContextClassRef;\n+import org.opensaml.saml.saml2.core.AuthnContextComparisonTypeEnumeration;\n+import org.opensaml.saml.saml2.core.AuthnRequest;\n+import org.opensaml.saml.saml2.core.AuthnStatement;\n+import org.opensaml.saml.saml2.core.Issuer;\n+import org.opensaml.saml.saml2.core.LogoutRequest;\n+import org.opensaml.saml.saml2.core.LogoutResponse;\n+import org.opensaml.saml.saml2.core.NameID;\n+import org.opensaml.saml.saml2.core.NameIDPolicy;\n+import org.opensaml.saml.saml2.core.NameIDType;\n+import org.opensaml.saml.saml2.core.RequestedAuthnContext;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.opensaml.saml.saml2.core.SessionIndex;\n+import org.opensaml.saml.saml2.core.StatusCode;\n+import org.opensaml.saml.saml2.core.impl.AuthnContextClassRefBuilder;\n+import org.opensaml.saml.saml2.core.impl.AuthnRequestBuilder;\n+import org.opensaml.saml.saml2.core.impl.IssuerBuilder;\n+import org.opensaml.saml.saml2.core.impl.LogoutRequestBuilder;\n+import org.opensaml.saml.saml2.core.impl.NameIDBuilder;\n+import org.opensaml.saml.saml2.core.impl.NameIDPolicyBuilder;\n+import org.opensaml.saml.saml2.core.impl.RequestedAuthnContextBuilder;\n+import org.opensaml.saml.saml2.core.impl.SessionIndexBuilder;\n+import org.opensaml.saml.saml2.metadata.AssertionConsumerService;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n+import org.opensaml.saml.saml2.metadata.NameIDFormat;\n+import org.opensaml.saml.saml2.metadata.SPSSODescriptor;\n+import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n+import org.opensaml.saml.saml2.metadata.impl.AssertionConsumerServiceBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.EntityDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.KeyDescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.NameIDFormatBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SPSSODescriptorBuilder;\n+import org.opensaml.saml.saml2.metadata.impl.SingleLogoutServiceBuilder;\n+import org.opensaml.xmlsec.keyinfo.KeyInfoGenerator;\n+import org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SAML2SPLogic extends AbstractTransactionalLogic<AbstractBaseBean> {\n+\n+    private static final Integer JWT_RELAY_STATE_DURATION = 5;\n+\n+    private static final String JWT_CLAIM_IDP_DEFLATE = \"IDP_DEFLATE\";\n+\n+    private static final String JWT_CLAIM_IDP_ENTITYID = \"IDP_ENTITYID\";\n+\n+    private static final String JWT_CLAIM_NAMEID_FORMAT = \"NAMEID_FORMAT\";\n+\n+    private static final String JWT_CLAIM_NAMEID_VALUE = \"NAMEID_VALUE\";\n+\n+    private static final String JWT_CLAIM_SESSIONINDEX = \"SESSIONINDEX\";\n+\n+    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n+\n+    static {\n+        OpenSAMLUtil.initSamlEngine(false);\n+    }\n+\n+    @Autowired\n+    private JwsSignatureVerifier jwsSignatureCerifier;\n+\n+    @Autowired\n+    private AccessTokenDataBinder accessTokenDataBinder;\n+\n+    @Autowired\n+    private SAML2SPLoader loader;\n+\n+    @Autowired\n+    private SAML2IdPCache cache;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private SAML2IdPDAO saml2IdPDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n+    @Autowired\n+    private IntAttrNameParser intAttrNameParser;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private SAML2ReaderWriter saml2rw;\n+\n+    @Autowired\n+    private SAML2Signer saml2Signer;\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    public void getMetadata(final String spEntityID, final OutputStream os) {\n+        try {\n+            EntityDescriptor spEntityDescriptor = new EntityDescriptorBuilder().buildObject();\n+            spEntityDescriptor.setEntityID(spEntityID);\n+\n+            SPSSODescriptor spSSODescriptor = new SPSSODescriptorBuilder().buildObject();\n+            spSSODescriptor.setWantAssertionsSigned(true);\n+            spSSODescriptor.setAuthnRequestsSigned(true);\n+\n+            X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory();\n+            keyInfoGeneratorFactory.setEmitEntityCertificate(true);\n+            KeyInfoGenerator keyInfoGenerator = keyInfoGeneratorFactory.newInstance();\n+            keyInfoGenerator.generate(loader.getCredential());\n+\n+            KeyDescriptor keyDescriptor = new KeyDescriptorBuilder().buildObject();\n+            keyDescriptor.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));\n+            spSSODescriptor.getKeyDescriptors().add(keyDescriptor);\n+\n+            SingleLogoutService singleLogoutService = new SingleLogoutServiceBuilder().buildObject();\n+            singleLogoutService.setBinding(SAMLConstants.SAML2_POST_BINDING_URI);\n+            singleLogoutService.setLocation(spEntityID + \"saml2sp/logout\");\n+            singleLogoutService.setResponseLocation(spEntityID + \"saml2sp/logout\");\n+            spSSODescriptor.getSingleLogoutServices().add(singleLogoutService);\n+\n+            NameIDFormat nameIDFormat = new NameIDFormatBuilder().buildObject();\n+            nameIDFormat.setFormat(NameIDType.PERSISTENT);\n+            spSSODescriptor.getNameIDFormats().add(nameIDFormat);\n+            nameIDFormat = new NameIDFormatBuilder().buildObject();\n+            nameIDFormat.setFormat(NameIDType.TRANSIENT);\n+            spSSODescriptor.getNameIDFormats().add(nameIDFormat);\n+\n+            AssertionConsumerService assertionConsumerService = new AssertionConsumerServiceBuilder().buildObject();\n+            assertionConsumerService.setIndex(0);\n+            assertionConsumerService.setBinding(SAMLConstants.SAML2_POST_BINDING_URI);\n+            assertionConsumerService.setLocation(spEntityID + \"saml2sp/assertion-consumer\");\n+\n+            spSSODescriptor.getAssertionConsumerServices().add(assertionConsumerService);\n+            spSSODescriptor.addSupportedProtocol(SAMLConstants.SAML20P_NS);\n+\n+            spEntityDescriptor.getRoleDescriptors().add(spSSODescriptor);\n+\n+            saml2rw.write(new OutputStreamWriter(os), spEntityDescriptor, true);\n+        } catch (Exception e) {\n+            LOG.error(\"While getting SP metadata\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+    }\n+\n+    private SAML2IdPEntity getIdP(final String entityID) {\n+        SAML2IdPEntity idp = null;\n+\n+        SAML2IdP saml2IdP = saml2IdPDAO.findByEntityID(entityID);\n+        if (saml2IdP != null) {\n+            try {\n+                idp = cache.put(saml2IdP);\n+            } catch (Exception e) {\n+                LOG.error(\"Could not build SAML 2.0 IdP with key \", entityID, e);\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+                sce.getElements().add(e.getMessage());\n+                throw sce;\n+            }\n+        }\n+\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + entityID + \"'\");\n+        }\n+        return idp;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    public SAML2RequestTO createLoginRequest(\n+            final String spEntityID, final String idpEntityID) {\n+\n+        // 1. look for IdP\n+        SAML2IdPEntity idp = StringUtils.isBlank(idpEntityID) ? cache.getFirst() : cache.get(idpEntityID);\n+        if (idp == null) {\n+            if (StringUtils.isBlank(idpEntityID)) {\n+                List<SAML2IdP> all = saml2IdPDAO.findAll();\n+                if (!all.isEmpty()) {\n+                    idp = getIdP(all.get(0).getKey());\n+                }\n+            } else {\n+                idp = getIdP(idpEntityID);\n+            }\n+        }\n+        if (idp == null) {\n+            throw new NotFoundException(StringUtils.isBlank(idpEntityID)\n+                    ? \"Any SAML 2.0 IdP\"\n+                    : \"SAML 2.0 IdP '\" + idpEntityID + \"'\");\n+        }\n+\n+        // 2. create AuthnRequest\n+        Issuer issuer = new IssuerBuilder().buildObject();\n+        issuer.setValue(spEntityID);\n+\n+        NameIDPolicy nameIDPolicy = new NameIDPolicyBuilder().buildObject();\n+        if (idp.supportsNameIDFormat(NameIDType.TRANSIENT)) {\n+            nameIDPolicy.setFormat(NameIDType.TRANSIENT);\n+        } else if (idp.supportsNameIDFormat(NameIDType.PERSISTENT)) {\n+            nameIDPolicy.setFormat(NameIDType.PERSISTENT);\n+        } else {\n+            throw new IllegalArgumentException(\"Could not find supported NameIDFormat for IdP \" + idpEntityID);\n+        }\n+        nameIDPolicy.setAllowCreate(true);\n+        nameIDPolicy.setSPNameQualifier(spEntityID);\n+\n+        AuthnContextClassRef authnContextClassRef = new AuthnContextClassRefBuilder().buildObject();\n+        authnContextClassRef.setAuthnContextClassRef(AuthnContext.PPT_AUTHN_CTX);\n+        RequestedAuthnContext requestedAuthnContext = new RequestedAuthnContextBuilder().buildObject();\n+        requestedAuthnContext.setComparison(AuthnContextComparisonTypeEnumeration.EXACT);\n+        requestedAuthnContext.getAuthnContextClassRefs().add(authnContextClassRef);\n+\n+        AuthnRequest authnRequest = new AuthnRequestBuilder().buildObject();\n+        authnRequest.setID(\"_\" + UUID_GENERATOR.generate().toString());\n+        authnRequest.setAssertionConsumerServiceURL(spEntityID + \"saml2sp/assertion-consumer\");\n+        authnRequest.setForceAuthn(false);\n+        authnRequest.setIsPassive(false);\n+        authnRequest.setVersion(SAMLVersion.VERSION_20);\n+        authnRequest.setProtocolBinding(SAMLConstants.SAML2_POST_BINDING_URI);\n+        authnRequest.setIssueInstant(new DateTime());\n+        authnRequest.setIssuer(issuer);\n+        authnRequest.setNameIDPolicy(nameIDPolicy);\n+        authnRequest.setRequestedAuthnContext(requestedAuthnContext);\n+        authnRequest.setDestination(idp.getSSOLocation(SAMLConstants.SAML2_POST_BINDING_URI).getLocation());\n+\n+        SAML2RequestTO requestTO = new SAML2RequestTO();\n+        requestTO.setIdpServiceAddress(authnRequest.getDestination());\n+        try {\n+            // 3. sign and encode AuthnRequest\n+            requestTO.setContent(saml2Signer.signAndEncode(authnRequest, idp.isUseDeflateEncoding()));\n+\n+            // 4. generate relay state as JWT\n+            Map<String, Object> claims = new HashMap<>();\n+            claims.put(JWT_CLAIM_IDP_DEFLATE, idp.isUseDeflateEncoding());\n+            Triple<String, String, Date> relayState =\n+                    accessTokenDataBinder.generateJWT(authnRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n+            requestTO.setRelayState(relayState.getMiddle());\n+        } catch (Exception e) {\n+            LOG.error(\"While generating AuthnRequest\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        return requestTO;\n+    }\n+\n+    private List<String> findMatchingUser(final String keyValue, final MappingItemTO connObjectKeyItem) {\n+        List<String> result = new ArrayList<>();\n+\n+        String transformed = keyValue;\n+        for (MappingItemTransformer transformer : MappingUtils.getMappingItemTransformers(connObjectKeyItem)) {\n+            List<Object> output = transformer.beforePull(\n+                    null,\n+                    null,\n+                    Collections.<Object>singletonList(transformed));\n+            if (output != null && !output.isEmpty()) {\n+                transformed = output.get(0).toString();\n+            }\n+        }\n+\n+        IntAttrName intAttrName = intAttrNameParser.parse(connObjectKeyItem.getIntAttrName(), AnyTypeKind.USER);\n+\n+        if (intAttrName.getField() != null) {\n+            switch (intAttrName.getField()) {\n+                case \"key\":\n+                    User byKey = userDAO.find(transformed);\n+                    if (byKey != null) {\n+                        result.add(byKey.getKey());\n+                    }\n+                    break;\n+\n+                case \"username\":\n+                    User byUsername = userDAO.findByUsername(transformed);\n+                    if (byUsername != null) {\n+                        result.add(byUsername.getKey());\n+                    }\n+                    break;\n+\n+                default:\n+            }\n+        } else if (intAttrName.getSchemaType() != null) {\n+            switch (intAttrName.getSchemaType()) {\n+                case PLAIN:\n+                    PlainAttrValue value = entityFactory.newEntity(UPlainAttrValue.class);\n+\n+                    PlainSchema schema = plainSchemaDAO.find(intAttrName.getSchemaName());\n+                    if (schema == null) {\n+                        value.setStringValue(transformed);\n+                    } else {\n+                        try {\n+                            value.parseValue(schema, transformed);\n+                        } catch (ParsingValidationException e) {\n+                            LOG.error(\"While parsing provided key value {}\", transformed, e);\n+                            value.setStringValue(transformed);\n+                        }\n+                    }\n+\n+                    CollectionUtils.collect(userDAO.findByAttrValue(intAttrName.getSchemaName(), value),\n+                            EntityUtils.keyTransformer(), result);\n+                    break;\n+\n+                case DERIVED:\n+                    CollectionUtils.collect(userDAO.findByDerAttrValue(intAttrName.getSchemaName(), transformed),\n+                            EntityUtils.keyTransformer(), result);\n+                    break;\n+\n+                default:\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private Pair<String, String> extract(final InputStream response) throws IOException {\n+        String strForm = IOUtils.toString(response);\n+        MultivaluedMap<String, String> params = JAXRSUtils.getStructuredParams(strForm, \"&\", false, false);\n+\n+        String samlResponse = URLDecoder.decode(\n+                params.getFirst(SSOConstants.SAML_RESPONSE), StandardCharsets.UTF_8.name());\n+        LOG.debug(\"Received SAML Response: {}\", samlResponse);\n+\n+        String relayState = params.getFirst(SSOConstants.RELAY_STATE);\n+        LOG.debug(\"Received Relay State: {}\", relayState);\n+\n+        return Pair.of(samlResponse, relayState);\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ANONYMOUS + \"')\")\n+    public SAML2LoginResponseTO validateLoginResponse(final InputStream response) {\n+        // 1. extract raw SAML response and relay state\n+        Pair<String, String> extracted;\n+        try {\n+            extracted = extract(response);\n+        } catch (Exception e) {\n+            LOG.error(\"While reading AuthnResponse\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        // 2. first checks for the provided relay state\n+        JwsJwtCompactConsumer relayState = new JwsJwtCompactConsumer(extracted.getRight());\n+        if (!relayState.verifySignatureWith(jwsSignatureCerifier)) {\n+            throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n+        }\n+        Boolean useDeflateEncoding = Boolean.valueOf(\n+                relayState.getJwtClaims().getClaim(JWT_CLAIM_IDP_DEFLATE).toString());\n+\n+        // 3. parse the provided SAML response\n+        Response samlResponse;\n+        try {\n+            XMLObject responseObject = saml2rw.read(true, useDeflateEncoding, extracted.getLeft());\n+            if (!(responseObject instanceof Response)) {\n+                throw new IllegalArgumentException(\"Expected \" + Response.class.getName()\n+                        + \", got \" + responseObject.getClass().getName());\n+            }\n+            samlResponse = (Response) responseObject;\n+        } catch (Exception e) {\n+            LOG.error(\"While parsing AuthnResponse\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        // 4. further checks:\n+        //   4a. the SAML Reponse's InResponseTo\n+        if (!relayState.getJwtClaims().getSubject().equals(samlResponse.getInResponseTo())) {\n+            throw new IllegalArgumentException(\"Unmatching request ID: \" + samlResponse.getInResponseTo());\n+        }\n+        //   4b. the SAML Response status\n+        if (!StatusCode.SUCCESS.equals(samlResponse.getStatus().getStatusCode().getValue())) {\n+            throw new BadCredentialsException(\"The SAML IdP replied with \"\n+                    + samlResponse.getStatus().getStatusCode().getValue());\n+        }\n+\n+        // 5. validate the SAML response and, if needed, decrypt the provided assertion(s)\n+        SAML2IdPEntity idp = getIdP(samlResponse.getIssuer().getValue());\n+        if (idp.getConnObjectKeyItem() == null) {\n+            throw new IllegalArgumentException(\"No mapping provided for SAML 2.0 IdP '\" + idp.getId() + \"'\");\n+        }\n+        try {\n+            saml2rw.validate(samlResponse, idp.getTrustStore());\n+        } catch (Exception e) {\n+            LOG.error(\"While validating AuthnResponse\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        // 6. prepare the result: find matching user (if any) and return the received attributes\n+        SAML2LoginResponseTO responseTO = new SAML2LoginResponseTO();\n+\n+        NameID nameID = null;\n+        String keyValue = null;\n+        for (Assertion assertion : samlResponse.getAssertions()) {\n+            nameID = assertion.getSubject().getNameID();\n+            if (StringUtils.isNotBlank(nameID.getValue())\n+                    && idp.getConnObjectKeyItem().getExtAttrName().equals(\"NameID\")) {\n+\n+                keyValue = nameID.getValue();\n+            }\n+\n+            if (assertion.getConditions().getNotOnOrAfter() != null) {\n+                responseTO.setNotOnOrAfter(assertion.getConditions().getNotOnOrAfter().toDate());\n+            }\n+            for (AuthnStatement authnStmt : assertion.getAuthnStatements()) {\n+                responseTO.setSessionIndex(authnStmt.getSessionIndex());\n+\n+                responseTO.setAuthInstant(authnStmt.getAuthnInstant().toDate());\n+                if (authnStmt.getSessionNotOnOrAfter() != null) {\n+                    responseTO.setNotOnOrAfter(authnStmt.getSessionNotOnOrAfter().toDate());\n+                }\n+            }\n+\n+            for (AttributeStatement attrStmt : assertion.getAttributeStatements()) {\n+                for (Attribute attr : attrStmt.getAttributes()) {\n+                    if (!attr.getAttributeValues().isEmpty()) {\n+                        String attrName = attr.getFriendlyName() == null ? attr.getName() : attr.getFriendlyName();\n+                        if (attrName.equals(idp.getConnObjectKeyItem().getExtAttrName())\n+                                && attr.getAttributeValues().get(0) instanceof XSString) {\n+\n+                            keyValue = ((XSString) attr.getAttributeValues().get(0)).getValue();\n+                        }\n+\n+                        AttrTO attrTO = new AttrTO();\n+                        attrTO.setSchema(attrName);\n+                        for (XMLObject value : attr.getAttributeValues()) {\n+                            if (value.getDOM() != null) {\n+                                attrTO.getValues().add(value.getDOM().getTextContent());\n+                            }\n+                        }\n+                        responseTO.getAttrs().add(attrTO);\n+                    }\n+                }\n+            }\n+        }\n+        if (nameID == null) {\n+            throw new IllegalArgumentException(\"NameID not found\");\n+        }\n+\n+        List<String> matchingUsers = keyValue == null\n+                ? Collections.<String>emptyList()\n+                : findMatchingUser(keyValue, idp.getConnObjectKeyItem());\n+        LOG.debug(\"Found {} matching users for NameID {}\", matchingUsers.size(), nameID.getValue());\n+\n+        if (matchingUsers.isEmpty()) {\n+            throw new NotFoundException(\"User matching the provided NameID value \" + nameID.getValue());\n+        } else if (matchingUsers.size() > 1) {\n+            throw new IllegalArgumentException(\"Several users match the provided NameID value \" + nameID.getValue());\n+        }\n+        responseTO.setUsername(userDAO.find(matchingUsers.get(0)).getUsername());\n+\n+        responseTO.setNameID(nameID.getValue());\n+        // 7. generate JWT for further access\n+        Map<String, Object> claims = new HashMap<>();\n+        claims.put(JWT_CLAIM_IDP_ENTITYID, idp.getId());\n+        claims.put(JWT_CLAIM_NAMEID_FORMAT, nameID.getFormat());\n+        claims.put(JWT_CLAIM_NAMEID_VALUE, nameID.getValue());\n+        claims.put(JWT_CLAIM_SESSIONINDEX, responseTO.getSessionIndex());\n+        responseTO.setAccessToken(accessTokenDataBinder.create(responseTO.getUsername(), claims, true));\n+\n+        return responseTO;\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n+    public SAML2RequestTO createLogoutRequest(final String accessToken, final String spEntityID) {\n+        // 1. fetch the current JWT used for Syncope authentication\n+        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken);\n+        if (!consumer.verifySignatureWith(jwsSignatureCerifier)) {\n+            throw new IllegalArgumentException(\"Invalid signature found in Access Token\");\n+        }\n+\n+        // 2. look for IdP\n+        String idpEntityID = (String) consumer.getJwtClaims().getClaim(JWT_CLAIM_IDP_ENTITYID);\n+        SAML2IdPEntity idp = cache.get(idpEntityID);\n+        if (idp == null) {\n+            throw new NotFoundException(\"SAML 2.0 IdP '\" + idpEntityID + \"'\");\n+        }\n+        if (idp.getSLOLocation(SAMLConstants.SAML2_POST_BINDING_URI) == null) {\n+            throw new IllegalArgumentException(\"No SingleLogoutService available for \" + idp.getId());\n+        }\n+\n+        // 3. create LogoutRequest\n+        LogoutRequest logoutRequest = new LogoutRequestBuilder().buildObject();\n+        logoutRequest.setID(\"_\" + UUID_GENERATOR.generate().toString());\n+        logoutRequest.setDestination(idp.getSLOLocation(SAMLConstants.SAML2_POST_BINDING_URI).getLocation());\n+\n+        DateTime now = new DateTime();\n+        logoutRequest.setIssueInstant(now);\n+        logoutRequest.setNotOnOrAfter(now.plusMinutes(5));\n+\n+        Issuer issuer = new IssuerBuilder().buildObject();\n+        issuer.setValue(spEntityID);\n+        logoutRequest.setIssuer(issuer);\n+\n+        NameID nameID = new NameIDBuilder().buildObject();\n+        nameID.setFormat((String) consumer.getJwtClaims().getClaim(JWT_CLAIM_NAMEID_FORMAT));\n+        nameID.setValue((String) consumer.getJwtClaims().getClaim(JWT_CLAIM_NAMEID_VALUE));\n+        logoutRequest.setNameID(nameID);\n+\n+        SessionIndex sessionIndex = new SessionIndexBuilder().buildObject();\n+        sessionIndex.setSessionIndex((String) consumer.getJwtClaims().getClaim(JWT_CLAIM_SESSIONINDEX));\n+        logoutRequest.getSessionIndexes().add(sessionIndex);\n+\n+        SAML2RequestTO requestTO = new SAML2RequestTO();\n+        requestTO.setIdpServiceAddress(logoutRequest.getDestination());\n+        try {\n+            // 3. sign and encode LogoutRequest\n+            requestTO.setContent(saml2Signer.signAndEncode(logoutRequest, idp.isUseDeflateEncoding()));\n+\n+            // 4. generate relay state as JWT\n+            Map<String, Object> claims = new HashMap<>();\n+            claims.put(JWT_CLAIM_IDP_DEFLATE, idp.isUseDeflateEncoding());\n+            Triple<String, String, Date> relayState =\n+                    accessTokenDataBinder.generateJWT(logoutRequest.getID(), JWT_RELAY_STATE_DURATION, claims);\n+            requestTO.setRelayState(relayState.getMiddle());\n+        } catch (Exception e) {\n+            LOG.error(\"While generating LogoutRequest\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        return requestTO;\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + StandardEntitlement.ANONYMOUS + \"'))\")\n+    public void validateLogoutResponse(final String accessToken, final InputStream response) {\n+        // 1. fetch the current JWT used for Syncope authentication\n+        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken);\n+        if (!consumer.verifySignatureWith(jwsSignatureCerifier)) {\n+            throw new IllegalArgumentException(\"Invalid signature found in Access Token\");\n+        }\n+\n+        // 2. extract raw SAML response and relay state\n+        Pair<String, String> extracted;\n+        try {\n+            extracted = extract(response);\n+        } catch (Exception e) {\n+            LOG.error(\"While reading LogoutResponse\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        JwsJwtCompactConsumer relayState = null;\n+        Boolean useDeflateEncoding = false;\n+        if (StringUtils.isNotBlank(extracted.getRight())) {\n+            // first checks for the provided relay state, if available\n+            relayState = new JwsJwtCompactConsumer(extracted.getRight());\n+            if (!relayState.verifySignatureWith(jwsSignatureCerifier)) {\n+                throw new IllegalArgumentException(\"Invalid signature found in Relay State\");\n+            }\n+            useDeflateEncoding = Boolean.valueOf(\n+                    relayState.getJwtClaims().getClaim(JWT_CLAIM_IDP_DEFLATE).toString());\n+        }\n+\n+        // 3. parse the provided SAML response\n+        LogoutResponse logoutResponse;\n+        try {\n+            XMLObject responseObject = saml2rw.read(true, useDeflateEncoding, extracted.getLeft());\n+            if (!(responseObject instanceof LogoutResponse)) {\n+                throw new IllegalArgumentException(\"Expected \" + LogoutResponse.class.getName()\n+                        + \", got \" + responseObject.getClass().getName());\n+            }\n+            logoutResponse = (LogoutResponse) responseObject;\n+        } catch (Exception e) {\n+            LOG.error(\"While parsing LogoutResponse\", e);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            sce.getElements().add(e.getMessage());\n+            throw sce;\n+        }\n+\n+        // 4. if relay state was available, check the SAML Reponse's InResponseTo\n+        if (relayState != null && !relayState.getJwtClaims().getSubject().equals(logoutResponse.getInResponseTo())) {\n+            throw new IllegalArgumentException(\"Unmatching request ID: \" + logoutResponse.getInResponseTo());\n+        }\n+\n+        // 5. finally check for the logout status\n+        if (StatusCode.SUCCESS.equals(logoutResponse.getStatus().getStatusCode().getValue())) {\n+            accessTokenDAO.delete(consumer.getJwtClaims().getTokenId());\n+        } else {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unknown);\n+            if (logoutResponse.getStatus().getStatusMessage() == null) {\n+                sce.getElements().add(logoutResponse.getStatus().getStatusCode().getValue());\n+            } else {\n+                sce.getElements().add(logoutResponse.getStatus().getStatusMessage().getMessage());\n+            }\n+            throw sce;\n+        }\n+    }\n+\n+    @Override\n+    protected AbstractBaseBean resolveReference(\n+            final Method method, final Object... args) throws UnresolvedReferenceException {\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"dee85ef50021ad381da252da9ece47b3df6a112b","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.init;\n+\n+import java.io.File;\n+import java.io.InputStream;\n+import java.security.KeyStore;\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.Properties;\n+import net.shibboleth.utilities.java.support.resolver.CriteriaSet;\n+import org.apache.commons.io.FileUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.SyncopeLoader;\n+import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n+import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.ResourceWithFallbackLoader;\n+import org.opensaml.core.criterion.EntityIdCriterion;\n+import org.opensaml.security.credential.Credential;\n+import org.opensaml.security.credential.impl.KeyStoreCredentialResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SAML2SPLoader implements SyncopeLoader {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2SPLoader.class);\n+\n+    private static final String SAML2SP_LOGIC_PROPERTIES = \"saml2sp-logic.properties\";\n+\n+    private static <T> T assertNotNull(final T argument, final String name) {\n+        if (argument == null) {\n+            throw new IllegalArgumentException(\"Argument '\" + name + \"' may not be null.\");\n+        }\n+        return argument;\n+    }\n+\n+    private KeyStore keystore;\n+\n+    private String keyPass;\n+\n+    private Credential credential;\n+\n+    @Override\n+    public Integer getPriority() {\n+        return 1000;\n+    }\n+\n+    @Override\n+    public void load() {\n+        EntitlementsHolder.getInstance().init(SAML2SPEntitlement.values());\n+\n+        String confDirectory = null;\n+\n+        Properties props = new Properties();\n+        try (InputStream is = getClass().getResourceAsStream(\"/\" + SAML2SP_LOGIC_PROPERTIES)) {\n+            props.load(is);\n+            confDirectory = props.getProperty(\"conf.directory\");\n+\n+            File confDir = new File(confDirectory);\n+            if (confDir.exists() && confDir.canRead() && confDir.isDirectory()) {\n+                File confDirProps = FileUtils.getFile(confDir, SAML2SP_LOGIC_PROPERTIES);\n+                if (confDirProps.exists() && confDirProps.canRead() && confDirProps.isFile()) {\n+                    props.clear();\n+                    props.load(FileUtils.openInputStream(confDirProps));\n+                    confDirectory = props.getProperty(\"conf.directory\");\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not read \" + SAML2SP_LOGIC_PROPERTIES, e);\n+        }\n+\n+        assertNotNull(confDirectory, \"<conf.directory>\");\n+\n+        String name = props.getProperty(\"keystore.name\");\n+        assertNotNull(name, \"<keystore.name>\");\n+        String type = props.getProperty(\"keystore.type\");\n+        assertNotNull(type, \"<keystore.type>\");\n+        String storePass = props.getProperty(\"keystore.storepass\");\n+        assertNotNull(storePass, \"<keystore.storepass>\");\n+        keyPass = props.getProperty(\"keystore.keypass\");\n+        assertNotNull(keyPass, \"<keystore.keypass>\");\n+        String certAlias = props.getProperty(\"sp.cert.alias\");\n+        assertNotNull(certAlias, \"<sp.cert.alias>\");\n+\n+        LOG.debug(\"Attempting to load the provided keystore...\");\n+        try {\n+            ResourceWithFallbackLoader loader = new ResourceWithFallbackLoader();\n+            loader.setResourceLoader(ApplicationContextProvider.getApplicationContext());\n+            loader.setPrimary(StringUtils.appendIfMissing(\"file:\" + confDirectory, \"/\") + name);\n+            loader.setFallback(\"classpath:\" + name);\n+\n+            keystore = KeyStore.getInstance(type);\n+            try (InputStream inputStream = loader.getResource().getInputStream()) {\n+                keystore.load(inputStream, storePass.toCharArray());\n+                LOG.debug(\"Keystore loaded\");\n+            }\n+\n+            Map<String, String> passwordMap = new HashMap<>();\n+            passwordMap.put(certAlias, keyPass);\n+            KeyStoreCredentialResolver resolver = new KeyStoreCredentialResolver(keystore, passwordMap);\n+\n+            this.credential = resolver.resolveSingle(new CriteriaSet(new EntityIdCriterion(certAlias)));\n+            LOG.debug(\"SAML 2.0 Service Provider certificate loaded\");\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not initialize the SAML 2.0 Service Provider certificate\", e);\n+        }\n+    }\n+\n+    public KeyStore getKeyStore() {\n+        return keystore;\n+    }\n+\n+    public String getKeyPass() {\n+        return keyPass;\n+    }\n+\n+    public Credential getCredential() {\n+        return credential;\n+    }\n+\n+}"},{"sha":"21e185d032da81fa58687664906bb61373da028e","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPCache.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCache.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.io.InputStreamReader;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+import net.shibboleth.utilities.java.support.xml.XMLParserException;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.core.logic.init.SAML2SPLoader;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n+import org.apache.wss4j.common.ext.WSSecurityException;\n+import org.apache.wss4j.common.saml.OpenSAMLUtil;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.w3c.dom.Element;\n+\n+/**\n+ * Basic in-memory cache for available {@link SAML2IdPEntity} identity providers.\n+ */\n+@Component\n+public class SAML2IdPCache {\n+\n+    private final Map<String, SAML2IdPEntity> cache =\n+            Collections.synchronizedMap(new HashMap<String, SAML2IdPEntity>());\n+\n+    @Autowired\n+    private SAML2SPLoader loader;\n+\n+    @Autowired\n+    private SAML2IdPDataBinder binder;\n+\n+    public SAML2IdPEntity get(final String entityID) {\n+        return cache.get(entityID);\n+    }\n+\n+    public SAML2IdPEntity getFirst() {\n+        return cache.isEmpty() ? null : cache.entrySet().iterator().next().getValue();\n+    }\n+\n+    public SAML2IdPEntity put(\n+            final EntityDescriptor entityDescriptor,\n+            final MappingItemTO connObjectKeyItem,\n+            final boolean useDeflateEncoding)\n+            throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {\n+\n+        return cache.put(entityDescriptor.getEntityID(),\n+                new SAML2IdPEntity(entityDescriptor, connObjectKeyItem, useDeflateEncoding, loader.getKeyPass()));\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public SAML2IdPEntity put(final SAML2IdP idp)\n+            throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException, WSSecurityException,\n+            XMLParserException {\n+\n+        Element element = OpenSAMLUtil.getParserPool().parse(\n+                new InputStreamReader(new ByteArrayInputStream(idp.getMetadata()))).getDocumentElement();\n+        EntityDescriptor entityDescriptor = (EntityDescriptor) OpenSAMLUtil.fromDom(element);\n+        return put(entityDescriptor, binder.getIdPTO(idp).getConnObjectKeyItem(), idp.isUseDeflateEncoding());\n+    }\n+\n+    public SAML2IdPEntity remove(final String entityID) {\n+        return cache.remove(entityID);\n+    }\n+}"},{"sha":"17cf6f0d3b4be7c917d7b7b742af9bef1be5485d","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPCallbackHandler.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCallbackHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCallbackHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPCallbackHandler.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.io.IOException;\n+import javax.security.auth.callback.Callback;\n+import javax.security.auth.callback.CallbackHandler;\n+import javax.security.auth.callback.UnsupportedCallbackException;\n+import org.apache.wss4j.common.ext.WSPasswordCallback;\n+\n+public class SAML2IdPCallbackHandler implements CallbackHandler {\n+\n+    private final String keyPass;\n+\n+    public SAML2IdPCallbackHandler(final String keyPass) {\n+        this.keyPass = keyPass;\n+    }\n+\n+    @Override\n+    public void handle(final Callback[] callbacks) throws IOException, UnsupportedCallbackException {\n+        for (Callback callback : callbacks) {\n+            if (callback instanceof WSPasswordCallback) {\n+                WSPasswordCallback wspc = (WSPasswordCallback) callback;\n+                wspc.setPassword(keyPass);\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"35eacaff385d7c9cf8a4fc9f7e6973e405ba4740","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2IdPEntity.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2IdPEntity.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.security.KeyStore;\n+import java.security.KeyStoreException;\n+import java.security.NoSuchAlgorithmException;\n+import java.security.cert.CertificateException;\n+import java.security.cert.CertificateFactory;\n+import java.security.cert.X509Certificate;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.opensaml.saml.common.xml.SAMLConstants;\n+import org.opensaml.saml.saml2.metadata.Endpoint;\n+import org.opensaml.saml.saml2.metadata.EntityDescriptor;\n+import org.opensaml.saml.saml2.metadata.IDPSSODescriptor;\n+import org.opensaml.saml.saml2.metadata.KeyDescriptor;\n+import org.opensaml.saml.saml2.metadata.NameIDFormat;\n+import org.opensaml.saml.saml2.metadata.SingleLogoutService;\n+import org.opensaml.saml.saml2.metadata.SingleSignOnService;\n+import org.opensaml.xmlsec.signature.X509Data;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class SAML2IdPEntity {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2IdPEntity.class);\n+\n+    private final String id;\n+\n+    private boolean useDeflateEncoding;\n+\n+    private MappingItemTO connObjectKeyItem;\n+\n+    private final Map<String, Endpoint> ssoBindings = new HashMap<>();\n+\n+    private final Map<String, SingleLogoutService> sloBindings = new HashMap<>();\n+\n+    private final List<String> nameIDFormats = new ArrayList<>();\n+\n+    private final KeyStore trustStore;\n+\n+    public SAML2IdPEntity(\n+            final EntityDescriptor entityDescriptor,\n+            final MappingItemTO connObjectKeyItem,\n+            final boolean useDeflateEncoding,\n+            final String keyPass)\n+            throws CertificateException, IOException, KeyStoreException, NoSuchAlgorithmException {\n+\n+        this.id = entityDescriptor.getEntityID();\n+        this.connObjectKeyItem = connObjectKeyItem;\n+        this.useDeflateEncoding = useDeflateEncoding;\n+\n+        IDPSSODescriptor idpdescriptor = entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS);\n+\n+        for (SingleSignOnService sso : idpdescriptor.getSingleSignOnServices()) {\n+            LOG.debug(\"[{}] Add SSO binding {}({})\", id, sso.getBinding(), sso.getLocation());\n+            this.ssoBindings.put(sso.getBinding(), sso);\n+        }\n+\n+        for (SingleLogoutService slo : idpdescriptor.getSingleLogoutServices()) {\n+            LOG.debug(\"[{}] Add SLO binding '{}'\\n\\tLocation: '{}'\\n\\tResponse Location: '{}'\",\n+                    id, slo.getBinding(), slo.getLocation(), slo.getResponseLocation());\n+            this.sloBindings.put(slo.getBinding(), slo);\n+        }\n+\n+        for (NameIDFormat nameIDFormat : idpdescriptor.getNameIDFormats()) {\n+            LOG.debug(\"[{}] Add NameIDFormat '{}'\", id, nameIDFormat.getFormat());\n+            nameIDFormats.add(nameIDFormat.getFormat());\n+        }\n+\n+        CertificateFactory cf = CertificateFactory.getInstance(\"X.509\");\n+\n+        List<X509Certificate> chain = new ArrayList<>();\n+        for (KeyDescriptor key : idpdescriptor.getKeyDescriptors()) {\n+            for (X509Data x509Data : key.getKeyInfo().getX509Datas()) {\n+                for (org.opensaml.xmlsec.signature.X509Certificate cert : x509Data.getX509Certificates()) {\n+                    try (ByteArrayInputStream bais = new ByteArrayInputStream(Base64.decodeBase64(cert.getValue()))) {\n+                        chain.add(X509Certificate.class.cast(cf.generateCertificate(bais)));\n+                    }\n+                }\n+            }\n+        }\n+\n+        this.trustStore = KeyStore.getInstance(KeyStore.getDefaultType());\n+        this.trustStore.load(null, keyPass.toCharArray());\n+        if (!chain.isEmpty()) {\n+            for (X509Certificate cert : chain) {\n+                LOG.debug(\"[{}] Add X.509 certificate {}\", id, cert.getSubjectX500Principal().getName());\n+                this.trustStore.setCertificateEntry(cert.getSubjectX500Principal().getName(), cert);\n+            }\n+            LOG.debug(\"[{}] Set default X.509 certificate {}\", id, chain.get(0).getSubjectX500Principal().getName());\n+            this.trustStore.setCertificateEntry(id, chain.get(0));\n+        }\n+    }\n+\n+    public String getId() {\n+        return id;\n+    }\n+\n+    public boolean isUseDeflateEncoding() {\n+        return useDeflateEncoding;\n+    }\n+\n+    public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n+        this.useDeflateEncoding = useDeflateEncoding;\n+    }\n+\n+    public MappingItemTO getConnObjectKeyItem() {\n+        return connObjectKeyItem;\n+    }\n+\n+    public void setConnObjectKeyItem(final MappingItemTO connObjectKeyItem) {\n+        this.connObjectKeyItem = connObjectKeyItem;\n+    }\n+\n+    public Endpoint getSSOLocation(final String binding) {\n+        return ssoBindings.get(binding);\n+    }\n+\n+    public Endpoint getSLOLocation(final String binding) {\n+        return sloBindings.get(binding);\n+    }\n+\n+    public boolean supportsNameIDFormat(final String nameIDFormat) {\n+        return nameIDFormats.contains(nameIDFormat);\n+    }\n+\n+    public KeyStore getTrustStore() {\n+        return trustStore;\n+    }\n+\n+}"},{"sha":"23b3a3853a064e0ec53024b3a7b502aebd213196","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"added","additions":145,"deletions":0,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,145 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.InputStream;\n+import java.io.InputStreamReader;\n+import java.io.StringWriter;\n+import java.io.UnsupportedEncodingException;\n+import java.io.Writer;\n+import java.net.URLDecoder;\n+import java.nio.charset.StandardCharsets;\n+import java.security.KeyStore;\n+import java.util.zip.DataFormatException;\n+import javax.xml.stream.XMLStreamException;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.TransformerConfigurationException;\n+import javax.xml.transform.TransformerException;\n+import javax.xml.transform.TransformerFactory;\n+import javax.xml.transform.dom.DOMSource;\n+import javax.xml.transform.stream.StreamResult;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.cxf.rs.security.saml.DeflateEncoderDecoder;\n+import org.apache.cxf.rs.security.saml.sso.SAMLProtocolResponseValidator;\n+import org.apache.cxf.staxutils.StaxUtils;\n+import org.apache.syncope.core.logic.init.SAML2SPLoader;\n+import org.apache.wss4j.common.crypto.Merlin;\n+import org.apache.wss4j.common.ext.WSSecurityException;\n+import org.apache.wss4j.common.saml.OpenSAMLUtil;\n+import org.opensaml.core.xml.XMLObject;\n+import org.opensaml.saml.saml2.core.Response;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.w3c.dom.Document;\n+\n+@Component\n+public class SAML2ReaderWriter implements InitializingBean {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2ReaderWriter.class);\n+\n+    private static final TransformerFactory TRANSFORMER_FACTORY = TransformerFactory.newInstance();\n+\n+    static {\n+        OpenSAMLUtil.initSamlEngine(false);\n+    }\n+\n+    @Autowired\n+    private SAML2SPLoader loader;\n+\n+    private SAMLProtocolResponseValidator protocolValidator;\n+\n+    private SAML2IdPCallbackHandler callbackHandler;\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        protocolValidator = new SAMLProtocolResponseValidator();\n+        protocolValidator.setKeyInfoMustBeAvailable(true);\n+\n+        callbackHandler = new SAML2IdPCallbackHandler(loader.getKeyPass());\n+    }\n+\n+    public void write(final Writer writer, final XMLObject object, final boolean signObject)\n+            throws TransformerConfigurationException, WSSecurityException, TransformerException {\n+\n+        Transformer transformer = TRANSFORMER_FACTORY.newTransformer();\n+        StreamResult streamResult = new StreamResult(writer);\n+        DOMSource source = new DOMSource(OpenSAMLUtil.toDom(object, null, signObject));\n+        transformer.transform(source, streamResult);\n+    }\n+\n+    public XMLObject read(final boolean postBinding, final boolean useDeflateEncoding, final String response)\n+            throws DataFormatException, UnsupportedEncodingException, XMLStreamException, WSSecurityException {\n+\n+        String decodedResponse = response;\n+        // URL Decoding only applies for the redirect binding\n+        if (!postBinding) {\n+            decodedResponse = URLDecoder.decode(response, StandardCharsets.UTF_8.name());\n+        }\n+\n+        InputStream tokenStream;\n+        byte[] deflatedToken = Base64.decodeBase64(decodedResponse);\n+        tokenStream = !postBinding && useDeflateEncoding\n+                ? new DeflateEncoderDecoder().inflateToken(deflatedToken)\n+                : new ByteArrayInputStream(deflatedToken);\n+\n+        // parse the provided SAML response\n+        Document responseDoc = StaxUtils.read(new InputStreamReader(tokenStream, StandardCharsets.UTF_8));\n+        XMLObject responseObject = OpenSAMLUtil.fromDom(responseDoc.getDocumentElement());\n+\n+        if (LOG.isDebugEnabled()) {\n+            try {\n+                StringWriter writer = new StringWriter();\n+                write(writer, responseObject, false);\n+                writer.close();\n+\n+                LOG.debug(\"Parsed SAML response: {}\", writer.toString());\n+            } catch (Exception e) {\n+                LOG.error(\"Could not log the received SAML response\", e);\n+            }\n+        }\n+\n+        return responseObject;\n+    }\n+\n+    public void validate(final Response samlResponse, final KeyStore idpTrustStore) throws WSSecurityException {\n+        // validate the SAML response and, if needed, decrypt the provided assertion(s)\n+        Merlin crypto = new Merlin();\n+        crypto.setKeyStore(loader.getKeyStore());\n+        crypto.setTrustStore(idpTrustStore);\n+\n+        protocolValidator.validateSamlResponse(samlResponse, crypto, callbackHandler);\n+\n+        if (LOG.isDebugEnabled()) {\n+            try {\n+                StringWriter writer = new StringWriter();\n+                write(writer, samlResponse, false);\n+                writer.close();\n+\n+                LOG.debug(\"SAML response with decrypted assertions: {}\", writer.toString());\n+            } catch (Exception e) {\n+                LOG.error(\"Could not log the SAML response with decrypted assertions\", e);\n+            }\n+        }\n+    }\n+\n+}"},{"sha":"9a036276a59b367582b2bfcd70d8c79b030e165f","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2Signer.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2Signer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2Signer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2Signer.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic.saml2;\n+\n+import java.io.IOException;\n+import java.io.StringWriter;\n+import java.nio.charset.StandardCharsets;\n+import javax.xml.transform.TransformerException;\n+import org.apache.commons.codec.binary.Base64;\n+import org.apache.cxf.rs.security.saml.DeflateEncoderDecoder;\n+import org.apache.syncope.core.logic.init.SAML2SPLoader;\n+import org.apache.wss4j.common.ext.WSSecurityException;\n+import org.apache.wss4j.common.saml.OpenSAMLUtil;\n+import org.opensaml.saml.common.SignableSAMLObject;\n+import org.opensaml.saml.saml2.core.RequestAbstractType;\n+import org.opensaml.security.SecurityException;\n+import org.opensaml.xmlsec.keyinfo.KeyInfoGenerator;\n+import org.opensaml.xmlsec.keyinfo.impl.X509KeyInfoGeneratorFactory;\n+import org.opensaml.xmlsec.signature.Signature;\n+import org.opensaml.xmlsec.signature.support.SignatureConstants;\n+import org.springframework.beans.factory.InitializingBean;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SAML2Signer implements InitializingBean {\n+\n+    static {\n+        OpenSAMLUtil.initSamlEngine(false);\n+    }\n+\n+    @Autowired\n+    private SAML2SPLoader loader;\n+\n+    @Autowired\n+    private SAML2ReaderWriter saml2rw;\n+\n+    private KeyInfoGenerator keyInfoGenerator;\n+\n+    private String signatureAlgorithm;\n+\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        X509KeyInfoGeneratorFactory keyInfoGeneratorFactory = new X509KeyInfoGeneratorFactory();\n+        keyInfoGeneratorFactory.setEmitEntityCertificate(true);\n+        keyInfoGenerator = keyInfoGeneratorFactory.newInstance();\n+\n+        signatureAlgorithm = SignatureConstants.ALGO_ID_SIGNATURE_RSA_SHA1;\n+        String pubKeyAlgo = loader.getCredential().getPublicKey().getAlgorithm();\n+        if (pubKeyAlgo.equalsIgnoreCase(\"DSA\")) {\n+            signatureAlgorithm = SignatureConstants.ALGO_ID_SIGNATURE_DSA_SHA1;\n+        }\n+    }\n+\n+    public String signAndEncode(final RequestAbstractType request, final boolean useDeflateEncoding)\n+            throws SecurityException, WSSecurityException, TransformerException, IOException {\n+\n+        // 1. sign request\n+        Signature signature = OpenSAMLUtil.buildSignature();\n+        signature.setCanonicalizationAlgorithm(SignatureConstants.ALGO_ID_C14N_EXCL_OMIT_COMMENTS);\n+        signature.setSignatureAlgorithm(signatureAlgorithm);\n+        signature.setSigningCredential(loader.getCredential());\n+        signature.setKeyInfo(keyInfoGenerator.generate(loader.getCredential()));\n+\n+        SignableSAMLObject signableObject = (SignableSAMLObject) request;\n+        signableObject.setSignature(signature);\n+        signableObject.releaseDOM();\n+        signableObject.releaseChildrenDOM(true);\n+\n+        // 2. serialize and encode request\n+        StringWriter writer = new StringWriter();\n+        saml2rw.write(writer, request, true);\n+        writer.close();\n+\n+        String requestMessage = writer.toString();\n+        byte[] deflatedBytes;\n+        // not correct according to the spec but required by some IdPs.\n+        if (useDeflateEncoding) {\n+            deflatedBytes = new DeflateEncoderDecoder().\n+                    deflateToken(requestMessage.getBytes(StandardCharsets.UTF_8));\n+        } else {\n+            deflatedBytes = requestMessage.getBytes(StandardCharsets.UTF_8);\n+        }\n+\n+        return Base64.encodeBase64String(deflatedBytes);\n+    }\n+\n+}"},{"sha":"2d7e91824edd1447ee3191aefdf2ec6605a7ec87","filename":"ext/saml2sp/logic/src/main/resources/saml2sp-logic.properties","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-logic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-logic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-logic.properties?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,23 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+conf.directory=${conf.directory}\n+\n+keystore.name=keystore\n+keystore.type=jks\n+keystore.storepass=changeit\n+keystore.keypass=changeit\n+sp.cert.alias=sp"},{"sha":"d4885564e81b620635f94073e53bc623c06f61b6","filename":"ext/saml2sp/persistence-api/pom.xml","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,56 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP Persistence API</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP Persistence API</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-persistence-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"234d6530e27b7ef06ece7e0c4ba81100ab981f3e","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/SAML2IdPDAO.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2IdPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2IdPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FSAML2IdPDAO.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+\n+public interface SAML2IdPDAO extends DAO<SAML2IdP> {\n+\n+    SAML2IdP find(String key);\n+\n+    SAML2IdP findByEntityID(String entityID);\n+\n+    List<SAML2IdP> findAll();\n+\n+    SAML2IdP save(SAML2IdP idp);\n+\n+    void delete(String key);\n+\n+}"},{"sha":"991463c1987f842295863dbcd30030a2e0955920","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2EntityFactory.java","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2EntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2EntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2EntityFactory.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,25 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface SAML2EntityFactory {\n+\n+    <E extends Entity> E newEntity(Class<E> reference);\n+\n+}"},{"sha":"d3372c2928f48a36491cc63c9a3f77e85500c3ae","filename":"ext/saml2sp/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/SAML2IdP.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FSAML2IdP.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,46 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+\n+public interface SAML2IdP extends Entity {\n+\n+    String getEntityID();\n+\n+    void setEntityID(String entityID);\n+\n+    byte[] getMetadata();\n+\n+    void setMetadata(byte[] metadata);\n+\n+    boolean isUseDeflateEncoding();\n+\n+    void setUseDeflateEncoding(boolean useDeflateEncoding);\n+\n+    MappingItem getConnObjectKeyItem();\n+\n+    void setConnObjectKeyItem(MappingItem item);\n+\n+    boolean add(MappingItem item);\n+\n+    List<? extends MappingItem> getMappingItems();\n+\n+}"},{"sha":"5e743cc2df2a5731486ef27f0dcd0e294d250863","filename":"ext/saml2sp/persistence-jpa/pom.xml","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,134 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP Persistence JPA</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP Persistence JPA</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>    \n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-persistence-jpa</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.openjpa</groupId>\n+        <artifactId>openjpa-maven-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <dependencies>\n+          <dependency>\n+            <groupId>com.h2database</groupId>\n+            <artifactId>h2</artifactId>\n+            <version>${h2.version}</version>\n+          </dependency>\n+        </dependencies>\n+        <configuration>\n+          <persistenceXmlFile>${rootpom.basedir}/core/persistence-jpa/src/main/resources/persistence-enhance.xml</persistenceXmlFile> \n+          <includes>org/apache/syncope/core/persistence/jpa/entity/**/*.class</includes>\n+          <connectionDriverName>org.springframework.jdbc.datasource.DriverManagerDataSource</connectionDriverName>\n+          <connectionProperties>\n+            driverClassName=org.h2.Driver,\n+            url=jdbc:h2:mem:syncopedb\n+            username=sa,\n+            password=\n+          </connectionProperties>\n+        </configuration>\n+        <executions>\n+          <execution>\n+            <id>enhancer</id>\n+            <phase>process-classes</phase>\n+            <goals>\n+              <goal>enhance</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+      \n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+\n+    <testResources>\n+      <testResource>\n+        <directory>${rootpom.basedir}/core/persistence-jpa/src/main/resources</directory>\n+        <filtering>true</filtering>        \n+      </testResource>\n+    </testResources>\n+  </build>\n+\n+  <profiles>\n+    <profile>\n+      <id>sqlgen</id>\n+      \n+      <properties>\n+        <skipTests>true</skipTests>\n+      </properties>\n+      \n+      <build>\n+        <defaultGoal>clean verify</defaultGoal>\n+        \n+        <plugins>\n+          <plugin>\n+            <groupId>org.apache.openjpa</groupId>\n+            <artifactId>openjpa-maven-plugin</artifactId>\n+            <inherited>true</inherited>\n+            <executions>\n+              <execution>\n+                <id>sqlgenr</id>\n+                <phase>process-classes</phase>\n+                <goals>\n+                  <goal>sql</goal>\n+                </goals>\n+              </execution>\n+            </executions>\n+          </plugin>          \n+        </plugins>\n+      </build>\n+        \n+    </profile>\n+  </profiles>\n+\n+</project>"},{"sha":"ccf67b6126bd81ae6deff44c7af184f222193435","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASAML2IdPDAO.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASAML2IdPDAO.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.jpa.entity.JPASAML2IdP;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Repository\n+public class JPASAML2IdPDAO extends AbstractDAO<SAML2IdP> implements SAML2IdPDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public SAML2IdP find(final String key) {\n+        return entityManager().find(JPASAML2IdP.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public SAML2IdP findByEntityID(final String entityID) {\n+        TypedQuery<SAML2IdP> query = entityManager().createQuery(\"SELECT e FROM \" + JPASAML2IdP.class.getSimpleName()\n+                + \" e WHERE e.entityID = :entityID\", SAML2IdP.class);\n+        query.setParameter(\"entityID\", entityID);\n+\n+        SAML2IdP result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No IdP found with entityID {}\", entityID, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<SAML2IdP> findAll() {\n+        TypedQuery<SAML2IdP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2IdP.class.getSimpleName() + \" e\", SAML2IdP.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public SAML2IdP save(final SAML2IdP idp) {\n+        return entityManager().merge(idp);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        SAML2IdP idp = find(key);\n+        if (idp != null) {\n+            entityManager().remove(idp);\n+        }\n+    }\n+\n+}"},{"sha":"d99d5d9dda24b00e37ea87e07a986630e96ca135","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2EntityFactory.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2EntityFactory.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JPASAML2EntityFactory implements SAML2EntityFactory {\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <E extends Entity> E newEntity(final Class<E> reference) {\n+        E result;\n+\n+        if (reference.equals(SAML2IdP.class)) {\n+            result = (E) new JPASAML2IdP();\n+        } else {\n+            throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n+        }\n+\n+        return result;\n+    }\n+\n+}"},{"sha":"1b46051ebea1bb5d3912f33abf86af5db42d2e10","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPASAML2IdP.java","status":"added","additions":125,"deletions":0,"changes":125,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPASAML2IdP.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,125 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Basic;\n+import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.Lob;\n+import javax.persistence.OneToMany;\n+import javax.persistence.Table;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n+import org.apache.syncope.core.persistence.jpa.validation.entity.SAML2IdPCheck;\n+\n+@Entity\n+@Table(name = JPASAML2IdP.TABLE)\n+@Cacheable\n+@SAML2IdPCheck\n+public class JPASAML2IdP extends AbstractGeneratedKeyEntity implements SAML2IdP {\n+\n+    private static final long serialVersionUID = -392372595500355552L;\n+\n+    public static final String TABLE = \"SAML2IdP\";\n+\n+    @Column(nullable = false)\n+    private String entityID;\n+\n+    @Lob\n+    @Basic(fetch = FetchType.EAGER)\n+    private Byte[] metadata;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER)\n+    private List<JPAMappingItem> mappingItems = new ArrayList<>();\n+\n+    @Min(0)\n+    @Max(1)\n+    @Column(nullable = false)\n+    private Integer useDeflateEncoding;\n+\n+    @Override\n+    public String getEntityID() {\n+        return entityID;\n+    }\n+\n+    @Override\n+    public void setEntityID(final String entityID) {\n+        this.entityID = entityID;\n+    }\n+\n+    @Override\n+    public byte[] getMetadata() {\n+        return metadata == null ? null : ArrayUtils.toPrimitive(metadata);\n+    }\n+\n+    @Override\n+    public void setMetadata(final byte[] metadata) {\n+        this.metadata = metadata == null ? null : ArrayUtils.toObject(metadata);\n+    }\n+\n+    @Override\n+    public boolean isUseDeflateEncoding() {\n+        return isBooleanAsInteger(useDeflateEncoding);\n+    }\n+\n+    @Override\n+    public void setUseDeflateEncoding(final boolean useDeflateEncoding) {\n+        this.useDeflateEncoding = getBooleanAsInteger(useDeflateEncoding);\n+    }\n+\n+    @Override\n+    public boolean add(final MappingItem item) {\n+        checkType(item, JPAMappingItem.class);\n+        return mappingItems.contains((JPAMappingItem) item) || mappingItems.add((JPAMappingItem) item);\n+    }\n+\n+    @Override\n+    public List<? extends MappingItem> getMappingItems() {\n+        return mappingItems;\n+    }\n+\n+    @Override\n+    public MappingItem getConnObjectKeyItem() {\n+        return IterableUtils.find(getMappingItems(), new Predicate<MappingItem>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItem item) {\n+                return item.isConnObjectKey();\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public void setConnObjectKeyItem(final MappingItem item) {\n+        item.setConnObjectKey(true);\n+        this.add(item);\n+    }\n+\n+}"},{"sha":"2598ab1d58df3388bdad1e3142f4635e7cfe40b0","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPCheck.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPCheck.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({ ElementType.TYPE })\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = SAML2IdPValidator.class)\n+@Documented\n+public @interface SAML2IdPCheck {\n+\n+    String message() default \"{org.apache.syncope.core.persistence.validation.saml2idp}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"3e5968c985f3f6f97bfc7b39a17dc35f59cc7075","filename":"ext/saml2sp/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/SAML2IdPValidator.java","status":"added","additions":89,"deletions":0,"changes":89,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FSAML2IdPValidator.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,89 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.validation.entity;\n+\n+import static org.apache.syncope.core.persistence.jpa.validation.entity.AbstractValidator.LOG;\n+\n+import javax.validation.ConstraintValidatorContext;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.provisioning.api.data.MappingItemTransformer;\n+\n+public class SAML2IdPValidator extends AbstractValidator<SAML2IdPCheck, SAML2IdP> {\n+\n+    @Override\n+    public boolean isValid(final SAML2IdP value, final ConstraintValidatorContext context) {\n+        long connObjectKeys = IterableUtils.countMatches(value.getMappingItems(), new Predicate<MappingItem>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItem item) {\n+                return item.isConnObjectKey();\n+            }\n+        });\n+        if (!value.getMappingItems().isEmpty() && connObjectKeys != 1) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidMapping, \"Single ConnObjectKey mapping is required\")).\n+                    addPropertyNode(\"connObjectKey.size\").addConstraintViolation();\n+            return false;\n+        }\n+\n+        boolean isValid = true;\n+\n+        long passwords = IterableUtils.countMatches(value.getMappingItems(), new Predicate<MappingItem>() {\n+\n+            @Override\n+            public boolean evaluate(final MappingItem item) {\n+                return item.isPassword();\n+            }\n+        });\n+        if (passwords > 0) {\n+            context.buildConstraintViolationWithTemplate(\n+                    getTemplate(EntityViolationType.InvalidMapping, \"No password mapping is allowed\")).\n+                    addPropertyNode(\"password.size\").addConstraintViolation();\n+            isValid = false;\n+        }\n+\n+        for (MappingItem item : value.getMappingItems()) {\n+            for (String className : item.getMappingItemTransformerClassNames()) {\n+                Class<?> actionsClass = null;\n+                boolean isAssignable = false;\n+                try {\n+                    actionsClass = Class.forName(className);\n+                    isAssignable = MappingItemTransformer.class.isAssignableFrom(actionsClass);\n+                } catch (Exception e) {\n+                    LOG.error(\"Invalid MappingItemTransformer specified: {}\", className, e);\n+                }\n+\n+                if (actionsClass == null || !isAssignable) {\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidMapping,\n+                                    \"Invalid mapping item trasformer class name\")).\n+                            addPropertyNode(\"mappingItemTransformerClassName\").addConstraintViolation();\n+                    isValid = false;\n+                }\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+\n+}"},{"sha":"16a1a14b33b2b750ffd3f27f55251d7205c38212","filename":"ext/saml2sp/pom.xml","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,52 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-ext</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP</description>\n+  <groupId>org.apache.syncope.ext</groupId>\n+  <artifactId>syncope-ext-saml2sp</artifactId>\n+  <packaging>pom</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n+  </properties>\n+  \n+  <modules>\n+    <module>common-lib</module>\n+    <module>persistence-api</module>\n+    <module>persistence-jpa</module>\n+    <module>provisioning-api</module>\n+    <module>provisioning-java</module>\n+    <module>rest-api</module>\n+    <module>logic</module>\n+    <module>rest-cxf</module>\n+    <module>agent</module>\n+  </modules>\n+\n+</project>"},{"sha":"a5fbcd629ba2b83363490b9c94747ee739c43d03","filename":"ext/saml2sp/provisioning-api/pom.xml","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fprovisioning-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fprovisioning-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-api%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,67 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP Provisioning API</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP Provisioning API</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-provisioning-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-provisioning-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-persistence-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-common-lib</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"4caec8f849ea2cdd4bfb66889a521ee561d8c7d2","filename":"ext/saml2sp/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/SAML2IdPDataBinder.java","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FSAML2IdPDataBinder.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,32 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+\n+public interface SAML2IdPDataBinder {\n+\n+    SAML2IdPTO getIdPTO(SAML2IdP idp);\n+\n+    SAML2IdP create(SAML2IdPTO idpTO);\n+\n+    SAML2IdP update(SAML2IdP idp, SAML2IdPTO idpTO);\n+\n+}"},{"sha":"61d34c8af2210a3dfe1eedf7ac1f9dbcc0866bbd","filename":"ext/saml2sp/provisioning-java/pom.xml","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fprovisioning-java%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fprovisioning-java%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,61 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP Provisioning Java</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP Provisioning Java</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-provisioning-java</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-provisioning-java</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-provisioning-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"2687e0bc3eb999ad59b8dd7dda218a30dbd7d253","filename":"ext/saml2sp/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/SAML2IdPDataBinderImpl.java","status":"added","additions":221,"deletions":0,"changes":221,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FSAML2IdPDataBinderImpl.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,221 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n+import org.apache.syncope.common.lib.to.MappingItemTO;\n+import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.SAML2IdPDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.DerSchema;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.SAML2EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.SAML2IdP;\n+import org.apache.syncope.core.persistence.api.entity.VirSchema;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+import org.apache.syncope.core.provisioning.api.IntAttrName;\n+import org.apache.syncope.core.provisioning.api.data.SAML2IdPDataBinder;\n+import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n+import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n+import org.apache.syncope.core.provisioning.java.jexl.JexlUtils;\n+import org.apache.syncope.core.spring.BeanUtils;\n+import org.identityconnectors.common.Base64;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class SAML2IdPDataBinderImpl implements SAML2IdPDataBinder {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SAML2IdPDataBinder.class);\n+\n+    private static final String[] MAPPINGITEM_IGNORE_PROPERTIES = { \"key\", \"mapping\", \"purpose\" };\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private SAML2IdPDAO saml2IdPDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Autowired\n+    private SAML2EntityFactory saml2EntityFactory;\n+\n+    @Autowired\n+    private IntAttrNameParser intAttrNameParser;\n+\n+    @Override\n+    public SAML2IdP create(final SAML2IdPTO idpTO) {\n+        return update(saml2EntityFactory.newEntity(SAML2IdP.class), idpTO);\n+    }\n+\n+    private void populateMapping(\n+            final SAML2IdPTO idpTO,\n+            final SAML2IdP idp,\n+            final AnyTypeClassTO allowedSchemas) {\n+\n+        SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n+        SyncopeClientException invalidMapping = SyncopeClientException.build(ClientExceptionType.InvalidMapping);\n+        SyncopeClientException requiredValuesMissing = SyncopeClientException.build(\n+                ClientExceptionType.RequiredValuesMissing);\n+\n+        for (MappingItemTO itemTO : idpTO.getMappingItems()) {\n+            if (itemTO == null) {\n+                LOG.error(\"Null {}\", MappingItemTO.class.getSimpleName());\n+                invalidMapping.getElements().add(\"Null \" + MappingItemTO.class.getSimpleName());\n+            } else if (itemTO.getIntAttrName() == null) {\n+                requiredValuesMissing.getElements().add(\"intAttrName\");\n+                scce.addException(requiredValuesMissing);\n+            } else {\n+                IntAttrName intAttrName = intAttrNameParser.parse(itemTO.getIntAttrName(), AnyTypeKind.USER);\n+\n+                if (intAttrName.getSchemaType() == null && intAttrName.getField() == null) {\n+                    LOG.error(\"'{}' not existing\", itemTO.getIntAttrName());\n+                    invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not existing\");\n+                } else {\n+                    boolean allowed = true;\n+                    if (intAttrName.getSchemaType() != null\n+                            && intAttrName.getEnclosingGroup() == null\n+                            && intAttrName.getRelatedAnyObject() == null) {\n+                        switch (intAttrName.getSchemaType()) {\n+                            case PLAIN:\n+                                allowed = allowedSchemas.getPlainSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            case DERIVED:\n+                                allowed = allowedSchemas.getDerSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            case VIRTUAL:\n+                                allowed = allowedSchemas.getVirSchemas().contains(intAttrName.getSchemaName());\n+                                break;\n+\n+                            default:\n+                        }\n+                    }\n+\n+                    if (allowed) {\n+                        // no mandatory condition implies mandatory condition false\n+                        if (!JexlUtils.isExpressionValid(itemTO.getMandatoryCondition() == null\n+                                ? \"false\" : itemTO.getMandatoryCondition())) {\n+\n+                            SyncopeClientException invalidMandatoryCondition = SyncopeClientException.build(\n+                                    ClientExceptionType.InvalidValues);\n+                            invalidMandatoryCondition.getElements().add(itemTO.getMandatoryCondition());\n+                            scce.addException(invalidMandatoryCondition);\n+                        }\n+\n+                        MappingItem item = entityFactory.newEntity(MappingItem.class);\n+                        BeanUtils.copyProperties(itemTO, item, MAPPINGITEM_IGNORE_PROPERTIES);\n+                        item.setPurpose(MappingPurpose.NONE);\n+                        if (item.isConnObjectKey()) {\n+                            if (intAttrName.getSchemaType() == SchemaType.VIRTUAL) {\n+                                invalidMapping.getElements().\n+                                        add(\"Virtual attributes cannot be set as ConnObjectKey\");\n+                            }\n+                            if (\"password\".equals(intAttrName.getField())) {\n+                                invalidMapping.getElements().add(\n+                                        \"Password attributes cannot be set as ConnObjectKey\");\n+                            }\n+\n+                            idp.setConnObjectKeyItem(item);\n+                        } else {\n+                            idp.add(item);\n+                        }\n+                    } else {\n+                        LOG.error(\"'{}' not allowed\", itemTO.getIntAttrName());\n+                        invalidMapping.getElements().add(\"'\" + itemTO.getIntAttrName() + \"' not allowed\");\n+                    }\n+                }\n+            }\n+        }\n+\n+        if (!invalidMapping.getElements().isEmpty()) {\n+            scce.addException(invalidMapping);\n+        }\n+        if (scce.hasExceptions()) {\n+            throw scce;\n+        }\n+    }\n+\n+    @Override\n+    public SAML2IdP update(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n+        idp.setEntityID(idpTO.getEntityID());\n+        idp.setMetadata(Base64.decode(idpTO.getMetadata()));\n+        idp.setUseDeflateEncoding(idpTO.isUseDeflateEncoding());\n+\n+        idp.getMappingItems().clear();\n+        AnyTypeClassTO allowedSchemas = new AnyTypeClassTO();\n+        for (AnyTypeClass anyTypeClass : anyTypeDAO.findUser().getClasses()) {\n+            allowedSchemas.getPlainSchemas().addAll(\n+                    CollectionUtils.collect(anyTypeClass.getPlainSchemas(),\n+                            EntityUtils.<PlainSchema>keyTransformer()));\n+            allowedSchemas.getDerSchemas().addAll(\n+                    CollectionUtils.collect(anyTypeClass.getDerSchemas(),\n+                            EntityUtils.<DerSchema>keyTransformer()));\n+            allowedSchemas.getVirSchemas().addAll(\n+                    CollectionUtils.collect(anyTypeClass.getVirSchemas(),\n+                            EntityUtils.<VirSchema>keyTransformer()));\n+        }\n+        populateMapping(idpTO, idp, allowedSchemas);\n+\n+        return saml2IdPDAO.save(idp);\n+    }\n+\n+    private void populateMappingTO(final SAML2IdP idp, final SAML2IdPTO idpTO) {\n+        for (MappingItem item : idp.getMappingItems()) {\n+            MappingItemTO itemTO = new MappingItemTO();\n+            itemTO.setKey(item.getKey());\n+            BeanUtils.copyProperties(item, itemTO, MAPPINGITEM_IGNORE_PROPERTIES);\n+            itemTO.setPurpose(MappingPurpose.NONE);\n+\n+            if (itemTO.isConnObjectKey()) {\n+                idpTO.setConnObjectKeyItem(itemTO);\n+            } else {\n+                idpTO.add(itemTO);\n+            }\n+        }\n+    }\n+\n+    @Override\n+    public SAML2IdPTO getIdPTO(final SAML2IdP idp) {\n+        SAML2IdPTO idpTO = new SAML2IdPTO();\n+\n+        idpTO.setKey(idp.getKey());\n+        idpTO.setEntityID(idp.getEntityID());\n+        idpTO.setUseDeflateEncoding(idp.isUseDeflateEncoding());\n+        idpTO.setMetadata(Base64.encode(idp.getMetadata()));\n+\n+        populateMappingTO(idp, idpTO);\n+\n+        return idpTO;\n+    }\n+}"},{"sha":"e0c27ae0f043c3e3a367b5bf2a785818f1a4a3bb","filename":"ext/saml2sp/rest-api/pom.xml","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-api%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-api%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-api%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,77 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP REST API</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP REST API</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-common-lib</artifactId>      \n+      <version>${project.version}</version>\n+    </dependency>    \n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <!-- Generating javadoc JAR artifact for usage with CXF's WADL generator (for core) -->\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-javadoc-plugin</artifactId>\n+        <inherited>true</inherited>\n+        <executions>\n+          <execution>\n+            <id>attach-javadocs</id>\n+            <goals>\n+              <goal>jar</goal>\n+            </goals>\n+          </execution>\n+        </executions>\n+      </plugin>\n+\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"5761c01d692d6fe772b9ebc1548cb3db812219d5","filename":"ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2IdPService.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2IdPService.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,90 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+\n+/**\n+ * REST operations for SAML 2.0 Identity Providers.\n+ */\n+@Path(\"saml2sp/identityProviders\")\n+public interface SAML2IdPService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all defined SAML 2.0 Identity Providers.\n+     *\n+     * @return list of all defined SAML 2.0 Identity Providers\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    List<SAML2IdPTO> list();\n+\n+    /**\n+     * Returns the SAML 2.0 Identity Provider with matching entityID, if available.\n+     *\n+     * @param key SAML 2.0 Identity Provider's entityID\n+     * @return SAML 2.0 Identity Provider with matching entityID, if available\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    SAML2IdPTO read(@PathParam(\"key\") String key);\n+\n+    /**\n+     * Imports the SAML 2.0 Identity Provider definitions available in the provided XML metadata.\n+     *\n+     * @param input XML metadata\n+     * @return the entityID values for all imported SAML 2.0 Identity Providers\n+     */\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_XML })\n+    Response importFromMetadata(@NotNull InputStream input);\n+\n+    /**\n+     * Updates the SAML 2.0 Identity Provider with matching entityID.\n+     *\n+     * @param saml2IdpTO idp configuration to be stored\n+     */\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    void update(@NotNull SAML2IdPTO saml2IdpTO);\n+\n+    /**\n+     * Deletes the SAML 2.0 Identity Provider with matching entityID.\n+     *\n+     * @param key SAML 2.0 Identity Provider's entityID\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@PathParam(\"key\") String key);\n+}"},{"sha":"f9c2cf4ca7614484158e2b744117799fb62ce05a","filename":"ext/saml2sp/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/SAML2SPService.java","status":"added","additions":93,"deletions":0,"changes":93,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FSAML2SPService.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,93 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import java.io.InputStream;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+\n+/**\n+ * REST operations for the provided SAML 2.0 Service Provider.\n+ */\n+@Path(\"saml2sp/serviceProvider\")\n+public interface SAML2SPService extends JAXRSService {\n+\n+    /**\n+     * Returns the XML metadata for the provided SAML 2.0 Service Provider.\n+     *\n+     * @param spEntityID SAML 2.0 SP entity ID.\n+     * @return XML metadata for the provided SAML 2.0 Service Provider\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_XML })\n+    Response getMetadata(@QueryParam(\"spEntityID\") String spEntityID);\n+\n+    /**\n+     * Generates SAML 2.0 authentication request for the IdP matching the provided entity ID.\n+     *\n+     * @param spEntityID SAML 2.0 SP entity ID.\n+     * @param idpEntityID SAML 2.0 IdP entity ID.\n+     * @return SAML 2.0 authentication request\n+     */\n+    @POST\n+    @Path(\"loginRequest\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    SAML2RequestTO createLoginRequest(\n+            @QueryParam(\"spEntityID\") String spEntityID,\n+            @QueryParam(\"idpEntityID\") String idpEntityID);\n+\n+    /**\n+     * Validates the received SAML 2.0 authentication response and creates JWT for the matching user, if found.\n+     *\n+     * @param response SAML 2.0 authentication response\n+     * @return JWT for the matching user plus attributes returned in the response\n+     */\n+    @POST\n+    @Path(\"loginResponse\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    SAML2LoginResponseTO validateLoginResponse(InputStream response);\n+\n+    /**\n+     * Generates SAML 2.0 logout request for the IdP matching the requesting access token.\n+     *\n+     * @param spEntityID SAML 2.0 SP entity ID.\n+     * @return SAML 2.0 logout request\n+     */\n+    @POST\n+    @Path(\"logoutRequest\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    SAML2RequestTO createLogoutRequest(@QueryParam(\"spEntityID\") String spEntityID);\n+\n+    /**\n+     * Validates the received SAML 2.0 logout response.\n+     *\n+     * @param response SAML 2.0 logout response\n+     */\n+    @POST\n+    @Path(\"logoutResponse\")\n+    @Produces({ MediaType.APPLICATION_JSON, MediaType.APPLICATION_XML })\n+    void validateLogoutResponse(InputStream response);\n+}"},{"sha":"df82720524abbb18860f2abbd23a68cf68709dcd","filename":"ext/saml2sp/rest-cxf/pom.xml","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-cxf%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,72 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope.ext</groupId>\n+    <artifactId>syncope-ext-saml2sp</artifactId>\n+    <version>2.1.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Extensions: SAML 2.0 SP REST CXF</name>\n+  <description>Apache Syncope Extensions: SAML 2.0 SP REST CXF</description>\n+  <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+  <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>\n+  <packaging>jar</packaging>\n+  \n+  <properties>\n+    <rootpom.basedir>${basedir}/../../..</rootpom.basedir>\n+  </properties>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>org.apache.syncope.core</groupId>\n+      <artifactId>syncope-core-rest-cxf</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-rest-api</artifactId>\n+      <version>${project.version}</version>\n+      <classifier>javadoc</classifier>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-logic</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+\n+  <build>\n+    <plugins>\n+      <plugin>\n+        <groupId>org.apache.maven.plugins</groupId>\n+        <artifactId>maven-checkstyle-plugin</artifactId>\n+      </plugin>\n+    </plugins>\n+  </build>\n+</project>"},{"sha":"1f2790f20904299d2c88086e87764f3f076b499b","filename":"ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2IdPServiceImpl.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2IdPServiceImpl.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.io.InputStream;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.SAML2IdPTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.SAML2IdPService;\n+import org.apache.syncope.core.logic.SAML2IdPLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SAML2IdPServiceImpl extends AbstractServiceImpl implements SAML2IdPService {\n+\n+    @Autowired\n+    private SAML2IdPLogic logic;\n+\n+    @Override\n+    public List<SAML2IdPTO> list() {\n+        return logic.list();\n+    }\n+\n+    @Override\n+    public SAML2IdPTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response importFromMetadata(final InputStream input) {\n+        List<String> imported = logic.importFromMetadata(input);\n+        if (imported.isEmpty()) {\n+            return Response.ok().build();\n+        } else {\n+            return Response.ok().header(RESTHeaders.RESOURCE_KEY, imported).build();\n+        }\n+    }\n+\n+    @Override\n+    public void update(final SAML2IdPTO saml2IdpTO) {\n+        logic.update(saml2IdpTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"d9d3dc675e5df0e2d99b5726fbad181ec31b6d46","filename":"ext/saml2sp/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/SAML2SPServiceImpl.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FSAML2SPServiceImpl.java?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.io.IOException;\n+import java.io.InputStream;\n+import java.io.OutputStream;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.StreamingOutput;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.to.SAML2RequestTO;\n+import org.apache.syncope.common.lib.to.SAML2LoginResponseTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.SAML2SPService;\n+import org.apache.syncope.core.logic.SAML2SPLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class SAML2SPServiceImpl extends AbstractServiceImpl implements SAML2SPService {\n+\n+    @Autowired\n+    private SAML2SPLogic logic;\n+\n+    @Override\n+    public Response getMetadata(final String spEntityID) {\n+        StreamingOutput sout = new StreamingOutput() {\n+\n+            @Override\n+            public void write(final OutputStream os) throws IOException {\n+                logic.getMetadata(StringUtils.appendIfMissing(spEntityID, \"/\"), os);\n+            }\n+        };\n+        return Response.ok(sout).\n+                type(MediaType.APPLICATION_XML).\n+                build();\n+    }\n+\n+    @Override\n+    public SAML2RequestTO createLoginRequest(\n+            final String spEntityID, final String idpEntityID) {\n+\n+        return logic.createLoginRequest(StringUtils.appendIfMissing(spEntityID, \"/\"), idpEntityID);\n+    }\n+\n+    @Override\n+    public SAML2LoginResponseTO validateLoginResponse(final InputStream response) {\n+        return logic.validateLoginResponse(response);\n+    }\n+\n+    @Override\n+    public SAML2RequestTO createLogoutRequest(final String spEntityID) {\n+        return logic.createLogoutRequest(\n+                messageContext.getHttpHeaders().getHeaderString(RESTHeaders.TOKEN),\n+                StringUtils.appendIfMissing(spEntityID, \"/\"));\n+    }\n+\n+    @Override\n+    public void validateLogoutResponse(final InputStream response) {\n+        logic.validateLogoutResponse(\n+                messageContext.getHttpHeaders().getHeaderString(RESTHeaders.TOKEN),\n+                response);\n+    }\n+\n+}"},{"sha":"244aafc3b36b77af5e51e3e632e976b3cf00bd51","filename":"fit/console-reference/pom.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fconsole-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fconsole-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -62,6 +62,12 @@ under the License.\n       <version>${project.version}</version>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+      <artifactId>syncope-ext-saml2sp-agent</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+    \n     <dependency>\n       <groupId>org.slf4j</groupId>\n       <artifactId>slf4j-api</artifactId>"},{"sha":"1d53d49db4816f429b6e3c6af4a088d5f5dc8ffb","filename":"fit/console-reference/src/main/resources/saml2sp-agent.properties","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Fmain%2Fresources%2Fsaml2sp-agent.properties?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,26 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+conf.directory=${conf.directory}\n+\n+anonymousUser=${anonymousUser}\n+anonymousKey=${anonymousKey}\n+\n+scheme=http\n+host=localhost\n+port=9080\n+rootPath=/syncope/rest/\n+useGZIPCompression=true"},{"sha":"022ee5d0ed8d51f479bb0b357a9cadddd1d2d13b","filename":"fit/console-reference/src/test/resources/rebel.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fconsole-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -28,6 +28,8 @@ under the License.\n     </dir>\n     <dir name=\"${basedir}/../../ext/camel/client-console/target/classes\">\n     </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/agent/target/classes\">\n+    </dir>\n   </classpath>\n \n   <web>"},{"sha":"f4c9c854c3a610fb3b89eb6e003a23d9cbb2ebe6","filename":"fit/core-reference/pom.xml","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -345,6 +345,16 @@ under the License.\n       <testResource>\n         <directory>src/test/resources</directory>\n         <filtering>true</filtering>\n+\t<excludes>\n+\t  <exclude>keystore</exclude>\n+\t</excludes>\n+      </testResource>\n+      <testResource>\n+        <directory>src/test/resources</directory>\n+        <filtering>false</filtering>\n+\t<includes>\n+\t  <include>keystore</include>\n+\t</includes>\n       </testResource>\n       <testResource>\n         <directory>${basedir}/../../core/rest-cxf/src/main/resources</directory>\n@@ -973,6 +983,17 @@ under the License.\n           <version>${project.version}</version>\n         </dependency>\n         \n+        <dependency>\n+          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+          <artifactId>syncope-ext-saml2sp-rest-cxf</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+        <dependency>\n+          <groupId>org.apache.syncope.ext.saml2sp</groupId>\n+          <artifactId>syncope-ext-saml2sp-persistence-jpa</artifactId>\n+          <version>${project.version}</version>\n+        </dependency>\n+        \n         <dependency>\n           <groupId>org.apache.syncope.ext</groupId>\n           <artifactId>syncope-ext-swagger-ui</artifactId>"},{"sha":"2d7e91824edd1447ee3191aefdf2ec6605a7ec87","filename":"fit/core-reference/src/main/resources/all/saml2sp-logic.properties","status":"added","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp-logic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp-logic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fall%2Fsaml2sp-logic.properties?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -0,0 +1,23 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+conf.directory=${conf.directory}\n+\n+keystore.name=keystore\n+keystore.type=jks\n+keystore.storepass=changeit\n+keystore.keypass=changeit\n+sp.cert.alias=sp"},{"sha":"bc4771c8afe970e9a363e390de5e582f4271c8d3","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -148,10 +148,26 @@ under the License.\n       <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.apache.wss4j\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"org.apache.xml\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"org.opensaml\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     <asyncLogger name=\"io.swagger\" additivity=\"false\" level=\"ERROR\">\n       <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n+    <asyncLogger name=\"org.reflections\" additivity=\"false\" level=\"ERROR\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n     \n     <root level=\"INFO\">\n       <appender-ref ref=\"mainFile\"/>"},{"sha":"8c3f6709a6269c4a134c667883f83d23a046ec0c","filename":"fit/core-reference/src/test/resources/keystore","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fkeystore","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fkeystore","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fkeystore?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a"},{"sha":"e5bb2584a8d28f0ae6c39548e93b54baee8719f6","filename":"fit/core-reference/src/test/resources/rebel.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Frebel.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -65,6 +65,23 @@ under the License.\n     <dir name=\"${basedir}/../../ext/camel/provisioning-camel/target/classes\">\n       <exclude name=\"provisioningCamelContext.xml\"/>\n     </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/common-lib/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/logic/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/persistence-api/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/persistence-jpa/target/classes\">\n+      <exclude name=\"org/apache/syncope/core/persistence/jpa/entity/**\"/>\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/provisioning-api/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/provisioning-java/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/rest-api/target/classes\">\n+    </dir>\n+    <dir name=\"${basedir}/../../ext/saml2sp/rest-cxf/target/classes\">\n+    </dir>\n   </classpath>\n \n   <web>"},{"sha":"a43b88addb23a57592b75989ae5930cf2070facd","filename":"pom.xml","status":"modified","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -381,6 +381,8 @@ under the License.\n     <camel.version>2.18.3</camel.version>\t\n \n     <slf4j.version>1.7.25</slf4j.version>\n+    <opensaml.version>3.2.0</opensaml.version>\n+\n     <log4j.version>2.8.1</log4j.version>\n     <disruptor.version>3.3.6</disruptor.version>\n \n@@ -564,6 +566,40 @@ under the License.\n         <artifactId>cxf-rt-features-logging</artifactId>\n         <version>${cxf.version}</version>\n       </dependency>\n+      <dependency>\n+\t<groupId>org.apache.cxf</groupId>\n+\t<artifactId>cxf-rt-rs-security-sso-saml</artifactId>\n+\t<version>${cxf.version}</version>\n+\t<exclusions>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-xacml-impl</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-xacml-saml-impl</artifactId>\n+          </exclusion>\n+\t  <exclusion>\n+            <groupId>org.apache.wss4j</groupId>\n+            <artifactId>wss4j-ws-security-dom</artifactId>\n+\t  </exclusion>\n+\t</exclusions>\n+      </dependency>\n+      <dependency>\n+\t<groupId>org.apache.wss4j</groupId>\n+        <artifactId>wss4j-ws-security-dom</artifactId>\n+\t<version>2.1.9-SNAPSHOT</version>\n+\t<exclusions>\n+\t  <exclusion>\n+\t    <groupId>org.jasypt</groupId>\n+\t    <artifactId>jasypt</artifactId>\n+\t  </exclusion>\n+          <exclusion>\n+            <groupId>org.apache.geronimo.specs</groupId>\n+            <artifactId>geronimo-javamail_1.4_spec</artifactId>\n+          </exclusion>\n+\t</exclusions>\n+      </dependency>\n       <!-- /CXF -->\n \n       <!-- Swagger -->      \n@@ -632,6 +668,40 @@ under the License.\n       </dependency>\n       <!-- /Camel -->\n       \n+      <!-- OpenSAML -->\n+      <dependency>\n+        <groupId>org.opensaml</groupId>\n+        <artifactId>opensaml-saml-impl</artifactId>\n+        <version>${opensaml.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-soap-impl</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-storage-api</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.opensaml</groupId>\n+            <artifactId>opensaml-messaging-api</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.apache.velocity</groupId>\n+            <artifactId>velocity</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.apache.httpcomponents</groupId>\n+            <artifactId>httpclient</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>com.google.code.findbugs</groupId>\n+            <artifactId>jsr305</artifactId>\n+          </exclusion>\n+        </exclusions>\n+      </dependency>\n+      <!-- /OpenSAML -->\n+          \n       <dependency>\n         <groupId>org.apache.openjpa</groupId>\n         <artifactId>openjpa-jdbc</artifactId>"},{"sha":"89dd1bca3ede85b8fbc6840a90fbce371bd41dd1","filename":"standalone/pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/standalone%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ff26658e78ccde5ace071fc5450a21ddee0e5b6a/standalone%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/standalone%2Fpom.xml?ref=ff26658e78ccde5ace071fc5450a21ddee0e5b6a","patch":"@@ -142,6 +142,8 @@ under the License.\n                 <copy todir=\"${work.dir}/apache-tomcat-${tomcat.version}/webapps/syncope/WEB-INF/classes\" overwrite=\"true\">\n                   <fileset dir=\"${project.build.outputDirectory}/core\" />\n                 </copy>\n+                <copy file=\"../fit/core-reference/target/test-classes/keystore\"\n+                      todir=\"${work.dir}/apache-tomcat-${tomcat.version}/webapps/syncope/WEB-INF/classes\" overwrite=\"true\"/>\n \n                 <!-- Syncope console -->\n                 <copy todir=\"${work.dir}/apache-tomcat-${tomcat.version}/webapps/syncope-console\">"}]}