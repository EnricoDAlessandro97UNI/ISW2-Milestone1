{"sha":"113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjExM2ZiMGYxZWI0MmFhMmUxZTBmM2VhNTZmYTY2NmJiMmQxOTU2ZTU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-01T15:22:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2019-04-01T15:22:46Z"},"message":"[SYNCOPE-1410] Allowing Groovy implementations for OIDCClient ext","tree":{"sha":"e6dd11955572fa1e578508dede8108040df5390e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e6dd11955572fa1e578508dede8108040df5390e"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"494be3d685c30431ba250fc420eccb7f60cd0aaa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/494be3d685c30431ba250fc420eccb7f60cd0aaa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/494be3d685c30431ba250fc420eccb7f60cd0aaa"}],"stats":{"total":511,"additions":203,"deletions":308},"files":[{"sha":"9aba44165c594c6fc89d03f715248c8e082041f2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/WizardMgtPanel.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FWizardMgtPanel.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -56,8 +56,6 @@\n \n     private static final long serialVersionUID = -4152438633429194882L;\n \n-    protected static final String WIZARD_ID = \"wizard\";\n-\n     private boolean readOnly = false;\n \n     private final String actualId;"},{"sha":"f8cc797e3dcce390a93b3dc5ae8a3f9384da3329","filename":"common/idm/lib/src/main/java/org/apache/syncope/common/lib/types/IdMImplementationType.java","status":"modified","additions":11,"deletions":17,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidm%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdMImplementationType.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -18,11 +18,8 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.util.Collections;\n-import java.util.Set;\n-import java.util.TreeSet;\n+import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n \n public final class IdMImplementationType {\n \n@@ -40,19 +37,16 @@ public final class IdMImplementationType {\n \n     public static final String PUSH_CORRELATION_RULE = \"PUSH_CORRELATION_RULE\";\n \n-    private static final Set<String> VALUES;\n+    private static final Map<String, String> VALUES = Map.ofEntries(\n+            Pair.of(ITEM_TRANSFORMER, \"org.apache.syncope.core.spring.security.JWTSSOProvider\"),\n+            Pair.of(RECON_FILTER_BUILDER, \"org.apache.syncope.core.persistence.api.dao.Reportlet\"),\n+            Pair.of(PROPAGATION_ACTIONS, \"org.apache.syncope.core.persistence.api.dao.AccountRule\"),\n+            Pair.of(PULL_ACTIONS, \"org.apache.syncope.core.persistence.api.dao.PasswordRule\"),\n+            Pair.of(PUSH_ACTIONS, \"org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate\"),\n+            Pair.of(PULL_CORRELATION_RULE, \"org.apache.syncope.core.provisioning.api.LogicActions\"),\n+            Pair.of(PUSH_CORRELATION_RULE, \"org.apache.syncope.core.persistence.api.attrvalue.validation.Validator\"));\n \n-    static {\n-        Set<String> values = new TreeSet<>();\n-        for (Field field : IdMImplementationType.class.getDeclaredFields()) {\n-            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n-                values.add(field.getName());\n-            }\n-        }\n-        VALUES = Collections.unmodifiableSet(values);\n-    }\n-\n-    public static Set<String> values() {\n+    public static Map<String, String> values() {\n         return VALUES;\n     }\n "},{"sha":"d7a34b44c54185a20026f249abafeb8484bb020d","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/EntitlementsHolder.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlementsHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlementsHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlementsHolder.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -18,10 +18,12 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n+import java.util.Collection;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n \n-public final class EntitlementsHolder extends ValueHolder<String> {\n+public final class EntitlementsHolder {\n \n     private static final Object MONITOR = new Object();\n \n@@ -36,10 +38,16 @@ public static EntitlementsHolder getInstance() {\n         return INSTANCE;\n     }\n \n+    private final Set<String> values = Collections.synchronizedSet(new HashSet<>());\n+\n     private EntitlementsHolder() {\n         // private constructor for singleton\n     }\n \n+    public void addAll(final Collection<String> values) {\n+        this.values.addAll(values);\n+    }\n+\n     public Set<String> addFor(final String anyType) {\n         Set<String> added = new HashSet<>();\n \n@@ -61,4 +69,8 @@ public Set<String> removeFor(final String anyType) {\n \n         return removed;\n     }\n+\n+    public Set<String> getValues() {\n+        return Collections.unmodifiableSet(values);\n+    }\n }"},{"sha":"013cb06bc9bbc549bae79afc7632caf0852bd732","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/IdRepoImplementationType.java","status":"modified","additions":14,"deletions":18,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FIdRepoImplementationType.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -18,11 +18,8 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-import java.lang.reflect.Field;\n-import java.lang.reflect.Modifier;\n-import java.util.Collections;\n-import java.util.Set;\n-import java.util.TreeSet;\n+import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n \n public final class IdRepoImplementationType {\n \n@@ -44,19 +41,18 @@ public final class IdRepoImplementationType {\n \n     public static final String AUDIT_APPENDER = \"AUDIT_APPENDER\";\n \n-    private static final Set<String> VALUES;\n-\n-    static {\n-        Set<String> values = new TreeSet<>();\n-        for (Field field : IdRepoImplementationType.class.getDeclaredFields()) {\n-            if (Modifier.isStatic(field.getModifiers()) && String.class.equals(field.getType())) {\n-                values.add(field.getName());\n-            }\n-        }\n-        VALUES = Collections.unmodifiableSet(values);\n-    }\n-\n-    public static Set<String> values() {\n+    private static final Map<String, String> VALUES = Map.ofEntries(\n+            Pair.of(JWT_SSO_PROVIDER, \"org.apache.syncope.core.spring.security.JWTSSOProvider\"),\n+            Pair.of(REPORTLET, \"org.apache.syncope.core.persistence.api.dao.Reportlet\"),\n+            Pair.of(ACCOUNT_RULE, \"org.apache.syncope.core.persistence.api.dao.AccountRule\"),\n+            Pair.of(PASSWORD_RULE, \"org.apache.syncope.core.persistence.api.dao.PasswordRule\"),\n+            Pair.of(TASKJOB_DELEGATE, \"org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate\"),\n+            Pair.of(LOGIC_ACTIONS, \"org.apache.syncope.core.provisioning.api.LogicActions\"),\n+            Pair.of(VALIDATOR, \"org.apache.syncope.core.persistence.api.attrvalue.validation.Validator\"),\n+            Pair.of(RECIPIENTS_PROVIDER, \"org.apache.syncope.core.provisioning.api.notification.RecipientsProvider\"),\n+            Pair.of(AUDIT_APPENDER, \"org.apache.syncope.core.logic.audit.AuditAppender\"));\n+\n+    public static Map<String, String> values() {\n         return VALUES;\n     }\n "},{"sha":"5ef7d8112ed3485625660a820ca56bc1b0676d0b","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ImplementationTypesHolder.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationTypesHolder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationTypesHolder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FImplementationTypesHolder.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -18,7 +18,11 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-public final class ImplementationTypesHolder extends ValueHolder<String> {\n+import java.util.Collections;\n+import java.util.HashMap;\n+import java.util.Map;\n+\n+public final class ImplementationTypesHolder {\n \n     private static final Object MONITOR = new Object();\n \n@@ -33,7 +37,21 @@ public static ImplementationTypesHolder getInstance() {\n         return INSTANCE;\n     }\n \n+    private final Map<String, String> values = Collections.synchronizedMap(new HashMap<>());\n+\n     private ImplementationTypesHolder() {\n         // private constructor for singleton\n     }\n+\n+    public void putAll(final Map<String, String> value2Class) {\n+        this.values.putAll(value2Class);\n+    }\n+\n+    public Map<String, String> getValues() {\n+        return Collections.unmodifiableMap(values);\n+    }\n+\n+//    public String getClass(final String implementationType) {\n+//        return values.get(implementationType);\n+//    }\n }"},{"sha":"b3a039c85998e7304aa2ac0faea0a92e960843ad","filename":"core/idm/logic/src/main/java/org/apache/syncope/core/logic/init/IdMImplementationTypeLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidm%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdMImplementationTypeLoader.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -33,6 +33,6 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        ImplementationTypesHolder.getInstance().addAll(IdMImplementationType.values());\n+        ImplementationTypesHolder.getInstance().putAll(IdMImplementationType.values());\n     }\n }"},{"sha":"8b45f86eeba3cb0b2f72e2e5b05bb5c644eec636","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/ImplementationLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FImplementationLogic.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -78,7 +78,7 @@ public class ImplementationLogic extends AbstractTransactionalLogic<Implementati\n     private NotificationDAO notificationDAO;\n \n     private void checkType(final String type) {\n-        if (!ImplementationTypesHolder.getInstance().getValues().contains(type)) {\n+        if (!ImplementationTypesHolder.getInstance().getValues().containsKey(type)) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidImplementationType);\n             sce.getElements().add(\"Implementation type not found: \");\n             throw sce;"},{"sha":"5a8f331967a8db9dd58320c04dad5df1c37d59e0","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":10,"deletions":6,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -30,6 +30,7 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Optional;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.StringUtils;\n@@ -282,12 +283,15 @@ public PlatformInfo platform() {\n                 PLATFORM_INFO.getPersistenceInfo().\n                         setConfDAO(AopUtils.getTargetClass(confDAO).getName());\n \n-                ImplementationTypesHolder.getInstance().getValues().forEach(type -> {\n-                    JavaImplInfo javaImplInfo = new JavaImplInfo();\n-                    javaImplInfo.setType(type);\n-                    javaImplInfo.getClasses().addAll(implLookup.getClassNames(type));\n+                ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n+                    Set<String> classNames = implLookup.getClassNames(typeName);\n+                    if (classNames != null) {\n+                        JavaImplInfo javaImplInfo = new JavaImplInfo();\n+                        javaImplInfo.setType(typeName);\n+                        javaImplInfo.getClasses().addAll(classNames);\n \n-                    PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n+                        PLATFORM_INFO.getJavaImplInfos().add(javaImplInfo);\n+                    }\n                 });\n             }\n \n@@ -299,7 +303,7 @@ public PlatformInfo platform() {\n             PLATFORM_INFO.getEntitlements().addAll(EntitlementsHolder.getInstance().getValues());\n \n             PLATFORM_INFO.getImplementationTypes().clear();\n-            PLATFORM_INFO.getImplementationTypes().addAll(ImplementationTypesHolder.getInstance().getValues());\n+            PLATFORM_INFO.getImplementationTypes().addAll(ImplementationTypesHolder.getInstance().getValues().keySet());\n \n             AuthContextUtils.execWithAuthContext(AuthContextUtils.getDomain(), () -> {\n                 PLATFORM_INFO.getAnyTypes().clear();"},{"sha":"690bdb0ea14218bc025d635376690e07c38e7bde","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":10,"deletions":20,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -107,8 +107,16 @@ protected String getBasePackage() {\n     @Override\n     public void load() {\n         classNames = new HashMap<>();\n-        ImplementationTypesHolder.getInstance().getValues().\n-                forEach(type -> classNames.put(type, new HashSet<>()));\n+        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n+        ImplementationTypesHolder.getInstance().getValues().forEach((typeName, typeInterface) -> {\n+            classNames.put(typeName, new HashSet<>());\n+            try {\n+                scanner.addIncludeFilter(new AssignableTypeFilter(\n+                        ClassUtils.resolveClassName(typeInterface, ClassUtils.getDefaultClassLoader())));\n+            } catch (IllegalArgumentException e) {\n+                LOG.error(\"Could not find class {}, ignoring...\", e);\n+            }\n+        });\n \n         jwtSSOProviderClasses = new HashSet<>();\n         reportletClasses = new HashMap<>();\n@@ -118,24 +126,6 @@ public void load() {\n         pushCRClasses = new HashMap<>();\n         auditAppenderClasses = new HashSet<>();\n \n-        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n-        scanner.addIncludeFilter(new AssignableTypeFilter(JWTSSOProvider.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(Reportlet.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PullCorrelationRule.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PushCorrelationRule.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(ItemTransformer.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(ReconFilterBuilder.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(LogicActions.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PropagationActions.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PullActions.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(RecipientsProvider.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(AuditAppender.class));\n-\n         scanner.findCandidateComponents(getBasePackage()).forEach(bd -> {\n             try {\n                 Class<?> clazz = ClassUtils.resolveClassName("},{"sha":"3735d1ce135722d7488410e7c65bddc55601a131","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/init/IdRepoImplementationTypeLoader.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FIdRepoImplementationTypeLoader.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -33,6 +33,6 @@ public int getOrder() {\n \n     @Override\n     public void load() {\n-        ImplementationTypesHolder.getInstance().addAll(IdRepoImplementationType.values());\n+        ImplementationTypesHolder.getInstance().putAll(IdRepoImplementationType.values());\n     }\n }"},{"sha":"02de590a09e308e93ab3190d45b410ef28674a33","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/PlainSchemaTest.java","status":"modified","additions":14,"deletions":40,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FPlainSchemaTest.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -25,12 +25,11 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n import static org.junit.jupiter.api.Assertions.fail;\n \n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import java.util.UUID;\n import java.util.stream.Collectors;\n import javax.persistence.EntityExistsException;\n+import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -41,11 +40,11 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.SchemaLabel;\n-import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.persistence.jpa.entity.JPASchemaLabel;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.junit.jupiter.api.AfterAll;\n@@ -110,6 +109,14 @@ public void checkIdUniqueness() {\n         }\n     }\n \n+    private List<MappingItem> getMappingItems(final String intAttrName) {\n+        TypedQuery<MappingItem> mapItemsQuery = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAMappingItem.class.getSimpleName() + \" e WHERE e.intAttrName=:intAttrName\",\n+                MappingItem.class);\n+        mapItemsQuery.setParameter(\"intAttrName\", intAttrName);\n+        return mapItemsQuery.getResultList();\n+    }\n+\n     @Test\n     public void deleteFullname() {\n         // fullname is mapped as ConnObjectKey for ws-target-resource-2, need to swap it otherwise validation errors \n@@ -129,18 +136,7 @@ public void deleteFullname() {\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        Set<MappingItem> mapItems = new HashSet<>();\n-        for (ExternalResource resource : resourceDAO.findAll()) {\n-            if (resource.getProvision(anyTypeDAO.findUser()).isPresent()\n-                    && resource.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n-\n-                for (MappingItem mapItem : resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n-                    if (schema.getKey().equals(mapItem.getIntAttrName())) {\n-                        mapItems.add(mapItem);\n-                    }\n-                }\n-            }\n-        }\n+        List<MappingItem> mapItems = getMappingItems(\"fullname\");\n         assertFalse(mapItems.isEmpty());\n \n         // delete user schema fullname\n@@ -155,18 +151,7 @@ public void deleteFullname() {\n         plainSchemaDAO.clear();\n \n         // check for mappings deletion\n-        mapItems = new HashSet<>();\n-        for (ExternalResource resource : resourceDAO.findAll()) {\n-            if (resource.getProvision(anyTypeDAO.findUser()).isPresent()\n-                    && resource.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n-\n-                for (MappingItem mapItem : resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n-                    if (\"fullname\".equals(mapItem.getIntAttrName())) {\n-                        mapItems.add(mapItem);\n-                    }\n-                }\n-            }\n-        }\n+        mapItems = getMappingItems(\"fullname\");\n         assertTrue(mapItems.isEmpty());\n \n         assertNull(findPlainAttr(\"01f22fbd-b672-40af-b528-686d9b27ebc4\", UPlainAttr.class));\n@@ -182,19 +167,8 @@ public void deleteSurname() {\n         assertNotNull(schema);\n \n         // check for associated mappings\n-        Set<MappingItem> mappings = new HashSet<>();\n-        for (ExternalResource resource : resourceDAO.findAll()) {\n-            if (resource.getProvision(anyTypeDAO.findUser()).isPresent()\n-                    && resource.getProvision(anyTypeDAO.findUser()).get().getMapping() != null) {\n-\n-                for (MappingItem item : resource.getProvision(anyTypeDAO.findUser()).get().getMapping().getItems()) {\n-                    if (schema.getKey().equals(item.getIntAttrName())) {\n-                        mappings.add(item);\n-                    }\n-                }\n-            }\n-        }\n-        assertFalse(mappings.isEmpty());\n+        List<MappingItem> mapItems = getMappingItems(\"surname\");\n+        assertFalse(mapItems.isEmpty());\n \n         // check for labels\n         List<SchemaLabel> labels = entityManager().createQuery("},{"sha":"4477c2db3f8fac99c58488f07536811bbe9e3e85","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/rest/OIDCProviderRestClient.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FOIDCProviderRestClient.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.client.console.rest;\n \n import java.util.List;\n-import java.util.Set;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.common.lib.to.OIDCProviderTO;\n import org.apache.syncope.common.rest.api.service.OIDCProviderService;\n@@ -32,10 +31,6 @@ public List<OIDCProviderTO> list() {\n         return getService(OIDCProviderService.class).list();\n     }\n \n-    public Set<String> getActionsClasses() {\n-        return getService(OIDCProviderService.class).getActionsClasses();\n-    }\n-\n     public void create(final OIDCProviderTO op) {\n         SyncopeConsoleSession.get().getService(OIDCProviderService.class).create(op);\n     }\n@@ -55,5 +50,4 @@ public void update(final OIDCProviderTO op) {\n     public void delete(final String key) {\n         getService(OIDCProviderService.class).delete(key);\n     }\n-\n }"},{"sha":"73ad117de713a91ef4be778c73fefe7d54cada4b","filename":"ext/oidcclient/client-console/src/main/java/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder.java","status":"modified","additions":38,"deletions":35,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -18,27 +18,30 @@\n  */\n package org.apache.syncope.client.console.wizards;\n \n-import org.apache.syncope.client.console.wizards.resources.OIDCProviderMappingPanel;\n import java.io.Serializable;\n-import java.util.ArrayList;\n import java.util.List;\n import java.util.concurrent.Callable;\n import java.util.concurrent.Future;\n+import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.commons.Constants;\n import org.apache.syncope.client.console.panels.OIDCProvidersDirectoryPanel;\n+import org.apache.syncope.client.console.rest.ImplementationRestClient;\n import org.apache.syncope.client.console.rest.OIDCProviderRestClient;\n import org.apache.syncope.client.console.wizards.resources.ItemTransformersTogglePanel;\n import org.apache.syncope.client.console.wizards.resources.JEXLTransformersTogglePanel;\n+import org.apache.syncope.client.console.wizards.resources.OIDCProviderMappingPanel;\n import org.apache.syncope.client.ui.commons.ajax.form.IndicatorAjaxFormComponentUpdatingBehavior;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxCheckBoxPanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizardBuilder;\n+import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.OIDCProviderTO;\n+import org.apache.syncope.common.lib.types.OIDCClientImplementationType;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.extensions.wizard.WizardModel;\n@@ -58,15 +61,18 @@ public class OIDCProviderWizardBuilder extends AjaxWizardBuilder<OIDCProviderTO>\n \n     private final OIDCProviderRestClient restClient = new OIDCProviderRestClient();\n \n+    private final ImplementationRestClient implRestClient = new ImplementationRestClient();\n+\n     private final OIDCProvidersDirectoryPanel directoryPanel;\n \n-    private final IModel<List<String>> actionsClasses = new LoadableDetachableModel<List<String>>() {\n+    private final IModel<List<String>> opActions = new LoadableDetachableModel<List<String>>() {\n \n         private static final long serialVersionUID = 5275935387613157437L;\n \n         @Override\n         protected List<String> load() {\n-            return new ArrayList<>(restClient.getActionsClasses());\n+            return implRestClient.list(OIDCClientImplementationType.OP_ACTION).stream().\n+                    map(EntityTO::getKey).sorted().collect(Collectors.toList());\n         }\n     };\n \n@@ -141,45 +147,45 @@ public class OP extends WizardStep {\n \n         public OP(final OIDCProviderTO opTO) {\n             AjaxTextFieldPanel name = new AjaxTextFieldPanel(\n-                    \"name\", \"name\", new PropertyModel<String>(opTO, \"name\"), false);\n+                    \"name\", \"name\", new PropertyModel<>(opTO, \"name\"), false);\n             name.addRequiredLabel();\n             name.setEnabled(true);\n             add(name);\n \n             AjaxTextFieldPanel clientID = new AjaxTextFieldPanel(\n-                    \"clientID\", \"clientID\", new PropertyModel<String>(opTO, \"clientID\"), false);\n+                    \"clientID\", \"clientID\", new PropertyModel<>(opTO, \"clientID\"), false);\n             clientID.addRequiredLabel();\n             clientID.setEnabled(true);\n             add(clientID);\n \n             AjaxTextFieldPanel clientSecret = new AjaxTextFieldPanel(\n-                    \"clientSecret\", \"clientSecret\", new PropertyModel<String>(opTO, \"clientSecret\"), false);\n+                    \"clientSecret\", \"clientSecret\", new PropertyModel<>(opTO, \"clientSecret\"), false);\n             clientSecret.addRequiredLabel();\n             clientSecret.setEnabled(true);\n             add(clientSecret);\n \n             AjaxCheckBoxPanel createUnmatching = new AjaxCheckBoxPanel(\n-                    \"createUnmatching\", \"createUnmatching\", new PropertyModel<Boolean>(opTO, \"createUnmatching\"),\n+                    \"createUnmatching\", \"createUnmatching\", new PropertyModel<>(opTO, \"createUnmatching\"),\n                     false);\n             add(createUnmatching);\n \n             AjaxCheckBoxPanel selfRegUnmatching = new AjaxCheckBoxPanel(\n-                    \"selfRegUnmatching\", \"selfRegUnmatching\", new PropertyModel<Boolean>(opTO, \"selfRegUnmatching\"),\n+                    \"selfRegUnmatching\", \"selfRegUnmatching\", new PropertyModel<>(opTO, \"selfRegUnmatching\"),\n                     false);\n             add(selfRegUnmatching);\n \n             AjaxCheckBoxPanel updateMatching = new AjaxCheckBoxPanel(\n-                    \"updateMatching\", \"updateMatching\", new PropertyModel<Boolean>(opTO, \"updateMatching\"), false);\n+                    \"updateMatching\", \"updateMatching\", new PropertyModel<>(opTO, \"updateMatching\"), false);\n             add(updateMatching);\n \n-            AjaxPalettePanel<String> actionsClassNames = new AjaxPalettePanel.Builder<String>().\n+            AjaxPalettePanel<String> actions = new AjaxPalettePanel.Builder<String>().\n+                    setName(new StringResourceModel(\"actions\", directoryPanel).getString()).\n                     setAllowMoveAll(true).setAllowOrder(true).\n-                    setName(new StringResourceModel(\"actionsClassNames\", directoryPanel).getString()).\n-                    build(\"actionsClassNames\",\n-                            new PropertyModel<List<String>>(opTO, \"actionsClassNames\"),\n-                            new ListModel<>(actionsClasses.getObject()));\n-            actionsClassNames.setOutputMarkupId(true);\n-            add(actionsClassNames);\n+                    build(\"actions\",\n+                            new PropertyModel<>(opTO, \"actions\"),\n+                            new ListModel<>(opActions.getObject()));\n+            actions.setOutputMarkupId(true);\n+            add(actions);\n         }\n     }\n \n@@ -196,40 +202,40 @@ public OPContinue(final OIDCProviderTO opTO) {\n \n             UrlValidator urlValidator = new UrlValidator();\n             final AjaxTextFieldPanel issuer = new AjaxTextFieldPanel(\n-                    \"issuer\", \"issuer\", new PropertyModel<String>(opTO, \"issuer\"));\n+                    \"issuer\", \"issuer\", new PropertyModel<>(opTO, \"issuer\"));\n             issuer.addValidator(urlValidator);\n             issuer.addRequiredLabel();\n             content.add(issuer);\n \n             final AjaxCheckBoxPanel hasDiscovery = new AjaxCheckBoxPanel(\n-                    \"hasDiscovery\", \"hasDiscovery\", new PropertyModel<Boolean>(opTO, \"hasDiscovery\"));\n+                    \"hasDiscovery\", \"hasDiscovery\", new PropertyModel<>(opTO, \"hasDiscovery\"));\n             content.add(hasDiscovery);\n \n             final AjaxTextFieldPanel authorizationEndpoint = new AjaxTextFieldPanel(\"authorizationEndpoint\",\n-                    \"authorizationEndpoint\", new PropertyModel<String>(opTO, \"authorizationEndpoint\"));\n+                    \"authorizationEndpoint\", new PropertyModel<>(opTO, \"authorizationEndpoint\"));\n             authorizationEndpoint.addRequiredLabel();\n             authorizationEndpoint.addValidator(urlValidator);\n             content.add(authorizationEndpoint);\n \n             final AjaxTextFieldPanel userinfoEndpoint = new AjaxTextFieldPanel(\"userinfoEndpoint\",\n-                    \"userinfoEndpoint\", new PropertyModel<String>(opTO, \"userinfoEndpoint\"));\n+                    \"userinfoEndpoint\", new PropertyModel<>(opTO, \"userinfoEndpoint\"));\n             userinfoEndpoint.addValidator(urlValidator);\n             content.add(userinfoEndpoint);\n \n             final AjaxTextFieldPanel tokenEndpoint = new AjaxTextFieldPanel(\"tokenEndpoint\",\n-                    \"tokenEndpoint\", new PropertyModel<String>(opTO, \"tokenEndpoint\"));\n+                    \"tokenEndpoint\", new PropertyModel<>(opTO, \"tokenEndpoint\"));\n             tokenEndpoint.addRequiredLabel();\n             tokenEndpoint.addValidator(urlValidator);\n             content.add(tokenEndpoint);\n \n             final AjaxTextFieldPanel jwksUri = new AjaxTextFieldPanel(\"jwksUri\",\n-                    \"jwksUri\", new PropertyModel<String>(opTO, \"jwksUri\"));\n+                    \"jwksUri\", new PropertyModel<>(opTO, \"jwksUri\"));\n             jwksUri.addRequiredLabel();\n             jwksUri.addValidator(urlValidator);\n             content.add(jwksUri);\n \n             final AjaxTextFieldPanel endSessionEndpoint = new AjaxTextFieldPanel(\"endSessionEndpoint\",\n-                    \"endSessionEndpoint\", new PropertyModel<String>(opTO, \"endSessionEndpoint\"));\n+                    \"endSessionEndpoint\", new PropertyModel<>(opTO, \"endSessionEndpoint\"));\n             endSessionEndpoint.addValidator(urlValidator);\n             content.add(endSessionEndpoint);\n \n@@ -254,48 +260,46 @@ protected void onUpdate(final AjaxRequestTarget target) {\n                     target.add(visibleParam);\n                 }\n             });\n-\n         }\n \n         public OPContinue(final OIDCProviderTO opTO, final boolean readOnly) {\n-\n-            final WebMarkupContainer content = new WebMarkupContainer(\"content\");\n+            WebMarkupContainer content = new WebMarkupContainer(\"content\");\n             this.setOutputMarkupId(true);\n             content.setOutputMarkupId(true);\n             add(content);\n \n             final AjaxTextFieldPanel issuer = new AjaxTextFieldPanel(\n-                    \"issuer\", \"issuer\", new PropertyModel<String>(opTO, \"issuer\"));\n+                    \"issuer\", \"issuer\", new PropertyModel<>(opTO, \"issuer\"));\n             issuer.setReadOnly(readOnly);\n             content.add(issuer);\n \n             final AjaxCheckBoxPanel hasDiscovery = new AjaxCheckBoxPanel(\n-                    \"hasDiscovery\", \"hasDiscovery\", new PropertyModel<Boolean>(opTO, \"hasDiscovery\"));\n+                    \"hasDiscovery\", \"hasDiscovery\", new PropertyModel<>(opTO, \"hasDiscovery\"));\n             hasDiscovery.setReadOnly(readOnly);\n             content.add(hasDiscovery);\n \n             final AjaxTextFieldPanel authorizationEndpoint = new AjaxTextFieldPanel(\"authorizationEndpoint\",\n-                    \"authorizationEndpoint\", new PropertyModel<String>(opTO, \"authorizationEndpoint\"));\n+                    \"authorizationEndpoint\", new PropertyModel<>(opTO, \"authorizationEndpoint\"));\n             authorizationEndpoint.setReadOnly(readOnly);\n             content.add(authorizationEndpoint);\n \n             final AjaxTextFieldPanel userinfoEndpoint = new AjaxTextFieldPanel(\"userinfoEndpoint\",\n-                    \"userinfoEndpoint\", new PropertyModel<String>(opTO, \"userinfoEndpoint\"));\n+                    \"userinfoEndpoint\", new PropertyModel<>(opTO, \"userinfoEndpoint\"));\n             userinfoEndpoint.setReadOnly(readOnly);\n             content.add(userinfoEndpoint);\n \n             final AjaxTextFieldPanel tokenEndpoint = new AjaxTextFieldPanel(\"tokenEndpoint\",\n-                    \"tokenEndpoint\", new PropertyModel<String>(opTO, \"tokenEndpoint\"));\n+                    \"tokenEndpoint\", new PropertyModel<>(opTO, \"tokenEndpoint\"));\n             tokenEndpoint.setReadOnly(readOnly);\n             content.add(tokenEndpoint);\n \n             final AjaxTextFieldPanel jwksUri = new AjaxTextFieldPanel(\"jwksUri\",\n-                    \"jwksUri\", new PropertyModel<String>(opTO, \"jwksUri\"));\n+                    \"jwksUri\", new PropertyModel<>(opTO, \"jwksUri\"));\n             jwksUri.setReadOnly(readOnly);\n             content.add(jwksUri);\n \n             final AjaxTextFieldPanel endSessionEndpoint = new AjaxTextFieldPanel(\"endSessionEndpoint\",\n-                    \"endSessionEndpoint\", new PropertyModel<String>(opTO, \"endSessionEndpoint\"));\n+                    \"endSessionEndpoint\", new PropertyModel<>(opTO, \"endSessionEndpoint\"));\n             endSessionEndpoint.setReadOnly(readOnly);\n             content.add(endSessionEndpoint);\n \n@@ -330,5 +334,4 @@ private static final class Mapping extends WizardStep {\n             setSummaryModel(Model.of(StringUtils.EMPTY));\n         }\n     }\n-\n }"},{"sha":"0c6e94697d5f60b9577ce23242419dc08952616b","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel.properties?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -24,7 +24,7 @@ any.new=New Provider\n template.title=user template\n createUnmatching=Create unmatching users\n updateMatching=Update matching users\n-actionsClassNames=Actions\n+actions=Actions\n \n \n "},{"sha":"0c6e94697d5f60b9577ce23242419dc08952616b","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_it.properties?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -24,7 +24,7 @@ any.new=New Provider\n template.title=user template\n createUnmatching=Create unmatching users\n updateMatching=Update matching users\n-actionsClassNames=Actions\n+actions=Actions\n \n \n "},{"sha":"0c6e94697d5f60b9577ce23242419dc08952616b","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_pt_BR.properties?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -24,7 +24,7 @@ any.new=New Provider\n template.title=user template\n createUnmatching=Create unmatching users\n updateMatching=Update matching users\n-actionsClassNames=Actions\n+actions=Actions\n \n \n "},{"sha":"0c6e94697d5f60b9577ce23242419dc08952616b","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/panels/OIDCProvidersDirectoryPanel_ru.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FOIDCProvidersDirectoryPanel_ru.properties?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -24,7 +24,7 @@ any.new=New Provider\n template.title=user template\n createUnmatching=Create unmatching users\n updateMatching=Update matching users\n-actionsClassNames=Actions\n+actions=Actions\n \n \n "},{"sha":"caea371991d01d1ef77a33fc23c1600e941fed65","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.html?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -14,7 +14,7 @@\n \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n-under the License.  actionsClassNames\n+under the License.\n -->\n <html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n   <wicket:panel>\n@@ -24,6 +24,6 @@\n     <div class=\"form-group\"><span wicket:id=\"createUnmatching\">[createUnmatching]</span></div>\n     <div class=\"form-group\"><span wicket:id=\"selfRegUnmatching\">[selfRegUnmatching]</span></div>\n     <div class=\"form-group\"><span wicket:id=\"updateMatching\">[updateMatching]</span></div>\n-    <div class=\"form-group\"><span wicket:id=\"actionsClassNames\">[actionsClassNames]</span></div>\n+    <div class=\"form-group\"><span wicket:id=\"actions\">[actions]</span></div>\n   </wicket:panel>\n </html>"},{"sha":"9b3313eb4e9ce493a60899bea0b03fd672fe16c2","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP.properties?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -20,6 +20,6 @@ clientSecret=Client Secret\n createUnmatching=Create unmatching users\n selfRegUnmatching=OIDC-initiated self-registration\n updateMatching=Update matching users\n-actionsClassNames=Actions\n+actions=Actions\n \n "},{"sha":"9b3313eb4e9ce493a60899bea0b03fd672fe16c2","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP_it.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_it.properties?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -20,6 +20,6 @@ clientSecret=Client Secret\n createUnmatching=Create unmatching users\n selfRegUnmatching=OIDC-initiated self-registration\n updateMatching=Update matching users\n-actionsClassNames=Actions\n+actions=Actions\n \n "},{"sha":"9b3313eb4e9ce493a60899bea0b03fd672fe16c2","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP_pt_BR.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_pt_BR.properties?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -20,6 +20,6 @@ clientSecret=Client Secret\n createUnmatching=Create unmatching users\n selfRegUnmatching=OIDC-initiated self-registration\n updateMatching=Update matching users\n-actionsClassNames=Actions\n+actions=Actions\n \n "},{"sha":"9b3313eb4e9ce493a60899bea0b03fd672fe16c2","filename":"ext/oidcclient/client-console/src/main/resources/org/apache/syncope/client/console/wizards/OIDCProviderWizardBuilder$OP_ru.properties","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fclient-console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FOIDCProviderWizardBuilder%24OP_ru.properties?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -20,6 +20,6 @@ clientSecret=Client Secret\n createUnmatching=Create unmatching users\n selfRegUnmatching=OIDC-initiated self-registration\n updateMatching=Update matching users\n-actionsClassNames=Actions\n+actions=Actions\n \n "},{"sha":"135e2b21b23854dc776991490cda45efa36a7ec9","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/to/OIDCProviderTO.java","status":"modified","additions":6,"deletions":9,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FOIDCProviderTO.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -20,9 +20,7 @@\n \n import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import javax.ws.rs.PathParam;\n import javax.xml.bind.annotation.XmlElement;\n import javax.xml.bind.annotation.XmlElementWrapper;\n@@ -67,7 +65,7 @@ public class OIDCProviderTO implements EntityTO, ItemContainerTO {\n \n     private final List<ItemTO> items = new ArrayList<>();\n \n-    private final Set<String> actionsClassNames = new HashSet<>();\n+    private final List<String> actions = new ArrayList<>();\n \n     @Override\n     public String getKey() {\n@@ -228,11 +226,10 @@ public boolean remove(final ItemTO item) {\n         return this.items.remove(item);\n     }\n \n-    @XmlElementWrapper(name = \"actionsClassNames\")\n-    @XmlElement(name = \"actionsClassName\")\n-    @JsonProperty(\"actionsClassNames\")\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    @XmlElementWrapper(name = \"actions\")\n+    @XmlElement(name = \"action\")\n+    @JsonProperty(\"actions\")\n+    public List<String> getActions() {\n+        return actions;\n     }\n-\n }"},{"sha":"ca94cec8f3839c397a17984145c62245990f42ff","filename":"ext/oidcclient/common-lib/src/main/java/org/apache/syncope/common/lib/types/OIDCClientImplementationType.java","status":"renamed","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCClientImplementationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCClientImplementationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fcommon-lib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FOIDCClientImplementationType.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -18,20 +18,21 @@\n  */\n package org.apache.syncope.common.lib.types;\n \n-import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n+import java.util.Map;\n+import org.apache.commons.lang3.tuple.Pair;\n \n-abstract class ValueHolder<T> {\n+public final class OIDCClientImplementationType {\n \n-    protected final Set<T> values = Collections.synchronizedSet(new HashSet<>());\n+    public static final String OP_ACTION = \"OP_ACTION\";\n \n-    public void addAll(final Collection<T> values) {\n-        this.values.addAll(values);\n+    private static final Map<String, String> VALUES = Map.ofEntries(\n+            Pair.of(OP_ACTION, \"org.apache.syncope.core.provisioning.api.OIDCProviderActions\"));\n+\n+    public static Map<String, String> values() {\n+        return VALUES;\n     }\n \n-    public Set<T> getValues() {\n-        return Collections.unmodifiableSet(values);\n+    private OIDCClientImplementationType() {\n+        // private constructor for static utility class\n     }\n }","previous_filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/types/ValueHolder.java"},{"sha":"496618e48c421d326fed01fccf8fdc23270ce39f","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/OIDCProviderLogic.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FOIDCProviderLogic.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -22,7 +22,6 @@\n import java.lang.reflect.Method;\n import java.util.Arrays;\n import java.util.List;\n-import java.util.Set;\n import java.util.stream.Collectors;\n import javax.ws.rs.ClientErrorException;\n import javax.ws.rs.core.MediaType;\n@@ -33,7 +32,6 @@\n import org.apache.syncope.common.lib.to.OIDCProviderTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n-import org.apache.syncope.core.logic.init.OIDCClientClassPathScanImplementationLookup;\n import org.apache.syncope.core.logic.model.OIDCProviderDiscoveryDocument;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.OIDCProviderDAO;\n@@ -53,14 +51,6 @@ public class OIDCProviderLogic extends AbstractTransactionalLogic<OIDCProviderTO\n     @Autowired\n     private OIDCProviderDataBinder binder;\n \n-    @Autowired\n-    private OIDCClientClassPathScanImplementationLookup implLookup;\n-\n-    @PreAuthorize(\"isAuthenticated()\")\n-    public Set<String> getActionsClasses() {\n-        return implLookup.getActionsClasses();\n-    }\n-\n     private OIDCProviderDiscoveryDocument getDiscoveryDocument(final String issuer) {\n         String discoveryDocumentURL = issuer + \"/.well-known/openid-configuration\";\n         WebClient client = WebClient.create(discoveryDocumentURL, Arrays.asList(new JacksonJsonProvider()))."},{"sha":"169b342f8074faf2483961ce23552eeffdec9e5b","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/init/OIDCClientClassPathScanImplementationLookup.java","status":"removed","additions":0,"deletions":75,"changes":75,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/494be3d685c30431ba250fc420eccb7f60cd0aaa/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientClassPathScanImplementationLookup.java?ref=494be3d685c30431ba250fc420eccb7f60cd0aaa","patch":"@@ -1,75 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.logic.init;\n-\n-import java.lang.reflect.Modifier;\n-import java.util.Collections;\n-import java.util.HashSet;\n-import java.util.Set;\n-import org.apache.syncope.core.persistence.api.ImplementationLookup;\n-import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n-import org.apache.syncope.core.provisioning.api.OIDCProviderActions;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.context.annotation.ClassPathScanningCandidateComponentProvider;\n-import org.springframework.core.type.filter.AssignableTypeFilter;\n-import org.springframework.stereotype.Component;\n-import org.springframework.util.ClassUtils;\n-\n-@Component\n-public class OIDCClientClassPathScanImplementationLookup implements SyncopeCoreLoader {\n-\n-    private static final Logger LOG = LoggerFactory.getLogger(ImplementationLookup.class);\n-\n-    private static final String DEFAULT_BASE_PACKAGE = \"org.apache.syncope.core\";\n-\n-    private Set<String> actionsClasses;\n-\n-    @Override\n-    public int getOrder() {\n-        return 999;\n-    }\n-\n-    @Override\n-    public void load() {\n-        actionsClasses = new HashSet<>();\n-\n-        ClassPathScanningCandidateComponentProvider scanner = new ClassPathScanningCandidateComponentProvider(false);\n-        scanner.addIncludeFilter(new AssignableTypeFilter(OIDCProviderActions.class));\n-\n-        scanner.findCandidateComponents(DEFAULT_BASE_PACKAGE).forEach(bd -> {\n-            try {\n-                Class<?> clazz = ClassUtils.resolveClassName(bd.getBeanClassName(), ClassUtils.getDefaultClassLoader());\n-                boolean isAbstractClazz = Modifier.isAbstract(clazz.getModifiers());\n-\n-                if (OIDCProviderActions.class.isAssignableFrom(clazz) && !isAbstractClazz) {\n-                    actionsClasses.add(clazz.getName());\n-                }\n-            } catch (Throwable t) {\n-                LOG.warn(\"Could not inspect class {}\", bd.getBeanClassName(), t);\n-            }\n-        });\n-\n-        actionsClasses = Collections.unmodifiableSet(actionsClasses);\n-    }\n-\n-    public Set<String> getActionsClasses() {\n-        return actionsClasses;\n-    }\n-}"},{"sha":"11270a01f76cc490efd700f6da18b4195eed14a8","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/init/OIDCClientLoader.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FOIDCClientLoader.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -19,7 +19,9 @@\n package org.apache.syncope.core.logic.init;\n \n import org.apache.syncope.common.lib.types.EntitlementsHolder;\n+import org.apache.syncope.common.lib.types.ImplementationTypesHolder;\n import org.apache.syncope.common.lib.types.OIDCClientEntitlement;\n+import org.apache.syncope.common.lib.types.OIDCClientImplementationType;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.springframework.stereotype.Component;\n \n@@ -34,5 +36,6 @@ public int getOrder() {\n     @Override\n     public void load() {\n         EntitlementsHolder.getInstance().addAll(OIDCClientEntitlement.values());\n+        ImplementationTypesHolder.getInstance().putAll(OIDCClientImplementationType.values());\n     }\n }"},{"sha":"cdde2405bc0b812468110dc6efdbf524bd099ccf","filename":"ext/oidcclient/logic/src/main/java/org/apache/syncope/core/logic/oidc/OIDCUserManager.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Foidc%2FOIDCUserManager.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -55,11 +55,10 @@\n import org.apache.syncope.core.provisioning.java.IntAttrNameParser;\n import org.apache.syncope.core.provisioning.java.utils.MappingUtils;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.spring.ImplementationManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -164,16 +163,11 @@ public List<String> findMatchingUser(final String keyValue, final OIDCProviderIt\n \n     private List<OIDCProviderActions> getActions(final OIDCProvider op) {\n         List<OIDCProviderActions> actions = new ArrayList<>();\n-\n-        op.getActionsClassNames().forEach(className -> {\n+        op.getActions().forEach(impl -> {\n             try {\n-                Class<?> actionsClass = Class.forName(className);\n-                OIDCProviderActions opActions = (OIDCProviderActions) ApplicationContextProvider.getBeanFactory().\n-                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n-\n-                actions.add(opActions);\n+                actions.add(ImplementationManager.build(impl));\n             } catch (Exception e) {\n-                LOG.warn(\"Class '{}' not found\", className, e);\n+                LOG.warn(\"While building {}\", impl, e);\n             }\n         });\n "},{"sha":"b6daf54f7c2545a920cf08582220a13c884dcf60","filename":"ext/oidcclient/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/OIDCProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FOIDCProvider.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n \n public interface OIDCProvider extends Entity {\n \n@@ -88,6 +87,7 @@ public interface OIDCProvider extends Entity {\n \n     boolean add(OIDCProviderItem item);\n \n-    Set<String> getActionsClassNames();\n+    boolean add(Implementation action);\n \n+    List<? extends Implementation> getActions();\n }"},{"sha":"ae748b411810c10b37b988e1b3f8a0d79a81e5cf","filename":"ext/oidcclient/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAOIDCProvider.java","status":"modified","additions":18,"deletions":11,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAOIDCProvider.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -19,22 +19,22 @@\n package org.apache.syncope.core.persistence.jpa.entity;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n-import java.util.Set;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n-import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n-import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n import javax.persistence.OneToMany;\n import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.common.lib.types.OIDCClientImplementationType;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n import org.apache.syncope.core.persistence.api.entity.OIDCUserTemplate;\n@@ -95,12 +95,13 @@ public class JPAOIDCProvider extends AbstractGeneratedKeyEntity implements OIDCP\n     @NotNull\n     private Boolean updateMatching = false;\n \n-    @ElementCollection(fetch = FetchType.EAGER)\n-    @Column(name = \"actionClassName\")\n-    @CollectionTable(name = TABLE + \"_actionsClassNames\",\n+    @ManyToMany(fetch = FetchType.EAGER)\n+    @JoinTable(name = \"OIDCProviderAction\",\n             joinColumns =\n-            @JoinColumn(name = \"oidcOP_id\", referencedColumnName = \"id\"))\n-    private Set<String> actionsClassNames = new HashSet<>();\n+            @JoinColumn(name = \"op_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"implementation_id\"))\n+    private List<JPAImplementation> actions = new ArrayList<>();\n \n     @Override\n     public String getName() {\n@@ -266,8 +267,14 @@ public void setConnObjectKeyItem(final OIDCProviderItem item) {\n     }\n \n     @Override\n-    public Set<String> getActionsClassNames() {\n-        return actionsClassNames;\n+    public boolean add(final Implementation action) {\n+        checkType(action, JPAImplementation.class);\n+        checkImplementationType(action, OIDCClientImplementationType.OP_ACTION);\n+        return actions.contains((JPAImplementation) action) || actions.add((JPAImplementation) action);\n     }\n \n+    @Override\n+    public List<? extends Implementation> getActions() {\n+        return actions;\n+    }\n }"},{"sha":"6e59535f3d93ca6c9d5db31b3d0a55fd830e1395","filename":"ext/oidcclient/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/OIDCProviderDataBinderImpl.java","status":"modified","additions":17,"deletions":5,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FOIDCProviderDataBinderImpl.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -31,8 +31,10 @@\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.OIDCProviderDAO;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.OIDCEntityFactory;\n import org.apache.syncope.core.persistence.api.entity.OIDCProvider;\n import org.apache.syncope.core.persistence.api.entity.OIDCProviderItem;\n@@ -51,14 +53,15 @@ public class OIDCProviderDataBinderImpl implements OIDCProviderDataBinder {\n \n     private static final Logger LOG = LoggerFactory.getLogger(OIDCProviderDataBinder.class);\n \n-    private static final String[] ITEM_IGNORE_PROPERTIES = { \"key\", \"purpose\" };\n-\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n     @Autowired\n     private OIDCProviderDAO oidcOPDAO;\n \n+    @Autowired\n+    private ImplementationDAO implementationDAO;\n+\n     @Autowired\n     private OIDCEntityFactory entityFactory;\n \n@@ -214,8 +217,16 @@ public OIDCProvider update(final OIDCProvider op, final OIDCProviderTO opTO) {\n         });\n         populateItems(opTO, op, allowedSchemas);\n \n-        op.getActionsClassNames().clear();\n-        op.getActionsClassNames().addAll(opTO.getActionsClassNames());\n+        opTO.getActions().forEach(action -> {\n+            Implementation implementation = implementationDAO.find(action);\n+            if (implementation == null) {\n+                LOG.debug(\"Invalid \" + Implementation.class.getSimpleName() + \" {}, ignoring...\", action);\n+            } else {\n+                op.add(implementation);\n+            }\n+        });\n+        // remove all implementations not contained in the TO\n+        op.getActions().removeIf(impl -> !opTO.getActions().contains(impl.getKey()));\n \n         return oidcOPDAO.save(op);\n     }\n@@ -266,7 +277,8 @@ public OIDCProviderTO getOIDCProviderTO(final OIDCProvider op) {\n \n         populateItems(op, opTO);\n \n-        opTO.getActionsClassNames().addAll(op.getActionsClassNames());\n+        opTO.getActions().addAll(\n+                op.getActions().stream().map(Entity::getKey).collect(Collectors.toList()));\n \n         return opTO;\n     }"},{"sha":"de816d08fd5ee47bc47d7c5f5186606852fdfa71","filename":"ext/oidcclient/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/OIDCProviderService.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FOIDCProviderService.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -37,7 +37,6 @@\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.OIDCProviderTO;\n import java.util.List;\n-import java.util.Set;\n import javax.ws.rs.DELETE;\n import javax.ws.rs.PUT;\n import javax.ws.rs.PathParam;\n@@ -54,16 +53,6 @@\n @Path(\"oidcclient/providers\")\n public interface OIDCProviderService extends JAXRSService {\n \n-    /**\n-     * Returns the list of available OIDCProviderActions implementations.\n-     *\n-     * @return the list of available OIDCProviderActions implementations\n-     */\n-    @GET\n-    @Path(\"actionsClasses\")\n-    @Produces({ MediaType.APPLICATION_JSON })\n-    Set<String> getActionsClasses();\n-\n     /**\n      * Returns a list of all defined OIDC Providers.\n      *"},{"sha":"7fc586e0b1cdc988a4e5dd5f2821db40dde8dade","filename":"ext/oidcclient/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/OIDCProviderServiceImpl.java","status":"modified","additions":0,"deletions":6,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCProviderServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCProviderServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Foidcclient%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FOIDCProviderServiceImpl.java?ref=113fb0f1eb42aa2e1e0f3ea56fa666bb2d1956e5","patch":"@@ -20,7 +20,6 @@\n \n import java.net.URI;\n import java.util.List;\n-import java.util.Set;\n import javax.ws.rs.core.Response;\n import org.apache.syncope.common.lib.to.OIDCProviderTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -35,11 +34,6 @@ public class OIDCProviderServiceImpl extends AbstractServiceImpl implements OIDC\n     @Autowired\n     private OIDCProviderLogic logic;\n \n-    @Override\n-    public Set<String> getActionsClasses() {\n-        return logic.getActionsClasses();\n-    }\n-\n     @Override\n     public Response create(final OIDCProviderTO oidcProviderTO) {\n         String created = logic.create(oidcProviderTO);"}]}