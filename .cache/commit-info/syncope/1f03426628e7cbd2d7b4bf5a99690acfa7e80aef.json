{"sha":"1f03426628e7cbd2d7b4bf5a99690acfa7e80aef","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFmMDM0MjY2MjhlN2NiZDJkN2I0YmY1YTk5NjkwYWNmYTdlODBhZWY=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-07T13:40:58Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-12-07T13:40:58Z"},"message":"Fixes issue 242\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247244 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"0b6dd0d54e0ff0b4fefbb3e4705ccff2cdab7dd2","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/0b6dd0d54e0ff0b4fefbb3e4705ccff2cdab7dd2"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1f03426628e7cbd2d7b4bf5a99690acfa7e80aef","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1f03426628e7cbd2d7b4bf5a99690acfa7e80aef","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1f03426628e7cbd2d7b4bf5a99690acfa7e80aef","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1f03426628e7cbd2d7b4bf5a99690acfa7e80aef/comments","author":null,"committer":null,"parents":[{"sha":"47619e30b32a872c1080d3ad469f73905219ff87","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/47619e30b32a872c1080d3ad469f73905219ff87","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/47619e30b32a872c1080d3ad469f73905219ff87"}],"stats":{"total":31,"additions":22,"deletions":9},"files":[{"sha":"2d5f7e78d2a61ee62c9ff99dce9a766a87e9ca3f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f03426628e7cbd2d7b4bf5a99690acfa7e80aef/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f03426628e7cbd2d7b4bf5a99690acfa7e80aef/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=1f03426628e7cbd2d7b4bf5a99690acfa7e80aef","patch":"@@ -477,7 +477,7 @@ private String getQuery(final AttributeCond cond,\n                     query.append(\" LIKE '\").append(cond.getExpression()).\n                             append(\"'\");\n                 } else {\n-                    query.append(\"' AND 1=1\");\n+                    query.append(\"' AND 1=2\");\n                     LOG.error(\"LIKE is only compatible with string schemas\");\n                 }\n                 break;\n@@ -549,11 +549,10 @@ private String getQuery(final SyncopeUserCond cond,\n         final String schema = cond.getSchema();\n \n         Field field = null;\n+        // loop over class and all superclasses searching for field\n+        for (Class<?> i = SyncopeUser.class;\n+                field == null && i != Object.class;) {\n \n-        Class<?> i = SyncopeUser.class;\n-\n-        // loop on class and all superclasses searching for field\n-        while (field == null && i != Object.class) {\n             try {\n                 field = i.getDeclaredField(schema);\n             } catch (Exception ignore) {\n@@ -564,7 +563,6 @@ private String getQuery(final SyncopeUserCond cond,\n                 i = i.getSuperclass();\n             }\n         }\n-\n         if (field == null) {\n             LOG.warn(\"Ignoring invalid schema '{}'\", cond.getSchema());\n             return EMPTY_ATTR_QUERY;\n@@ -594,7 +592,7 @@ private String getQuery(final SyncopeUserCond cond,\n                     query.append(\" LIKE '\").append(cond.getExpression()).\n                             append(\"'\");\n                 } else {\n-                    query.append(\"' 1=1\");\n+                    query.append(\" 1=2\");\n                     LOG.error(\"LIKE is only compatible with string schemas\");\n                 }\n                 break;"},{"sha":"7bb839d6ce3b8baebad2349d8faa1a2fefce00b7","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1f03426628e7cbd2d7b4bf5a99690acfa7e80aef/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1f03426628e7cbd2d7b4bf5a99690acfa7e80aef/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=1f03426628e7cbd2d7b4bf5a99690acfa7e80aef","patch":"@@ -338,15 +338,30 @@ public final void issue202() {\n         final NodeCond searchCondition = NodeCond.getAndCond(\n                 NodeCond.getNotLeafCond(ws2),\n                 NodeCond.getNotLeafCond(ws1));\n-\n         assertTrue(searchCondition.checkValidity());\n \n         final List<SyncopeUser> users = searchDAO.search(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition);\n-\n         assertNotNull(users);\n         assertEquals(1, users.size());\n         assertEquals(4L, users.iterator().next().getId().longValue());\n     }\n+\n+    @Test\n+    public final void issue242() {\n+        final SyncopeUserCond cond =\n+                new SyncopeUserCond(AttributeCond.Type.LIKE);\n+        cond.setSchema(\"id\");\n+        cond.setExpression(\"test%\");\n+\n+        final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n+        assertTrue(searchCondition.checkValidity());\n+\n+        final List<SyncopeUser> users = searchDAO.search(\n+                EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition);\n+        assertNotNull(users);\n+        assertTrue(users.isEmpty());\n+    }\n }"}]}