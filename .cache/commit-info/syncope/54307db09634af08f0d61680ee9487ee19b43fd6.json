{"sha":"54307db09634af08f0d61680ee9487ee19b43fd6","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjU0MzA3ZGIwOTYzNGFmMDhmMGQ2MTY4MGVlOTQ4N2VlMTliNDNmZDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-03-15T14:31:16Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-03-15T14:31:16Z"},"message":"Fixing SAML2SP4UI after Pac4J upgrade","tree":{"sha":"3c7bd3699826a338016ee704892101287c1d6e56","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/3c7bd3699826a338016ee704892101287c1d6e56"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/54307db09634af08f0d61680ee9487ee19b43fd6","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/54307db09634af08f0d61680ee9487ee19b43fd6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/54307db09634af08f0d61680ee9487ee19b43fd6","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/54307db09634af08f0d61680ee9487ee19b43fd6/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8a1ffb20e798ebab4db216fb4d57ef1593ada214","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8a1ffb20e798ebab4db216fb4d57ef1593ada214","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8a1ffb20e798ebab4db216fb4d57ef1593ada214"}],"stats":{"total":84,"additions":52,"deletions":32},"files":[{"sha":"c523b8545e128d4437994f54780e039ccc18ee69","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/SAML2SP4UILogic.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SP4UILogic.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -152,6 +152,7 @@ public void getMetadata(final String spEntityID, final String urlContext, final\n             SAML2Configuration cfg = loader.newSAML2Configuration();\n             cfg.setServiceProviderEntityId(spEntityID);\n             cfg.setCallbackUrl(getCallbackUrl(spEntityID, urlContext));\n+            SAML2ClientCache.getSPMetadataPath(spEntityID).ifPresent(cfg::setServiceProviderMetadataResourceFilepath);\n \n             EntityDescriptor entityDescriptor =\n                     (EntityDescriptor) new SAML2ServiceProviderMetadataResolver(cfg).getEntityDescriptorElement();\n@@ -253,9 +254,11 @@ public SAML2Request createLoginRequest(\n             if (requestedAuthnContextProvider != null) {\n                 RequestedAuthnContext requestedAuthnContext = requestedAuthnContextProvider.get();\n                 saml2Client.setRedirectionActionBuilder(new SAML2RedirectionActionBuilder(saml2Client) {\n+\n                     @Override\n-                    public Optional<RedirectionAction> getRedirectionAction(final WebContext wc,\n-                                                                            final SessionStore sessionStore) {\n+                    public Optional<RedirectionAction> getRedirectionAction(\n+                            final WebContext wc, final SessionStore sessionStore) {\n+\n                         this.saml2ObjectBuilder = new SAML2AuthnRequestBuilder() {\n \n                             @Override\n@@ -303,7 +306,7 @@ public SAML2LoginResponse validateLoginResponse(final SAML2Response saml2Respons\n                     saml2Response);\n \n             credentials = (SAML2Credentials) saml2Client.getCredentialsExtractor().\n-                extract(ctx, NoOpSessionStore.INSTANCE).\n+                    extract(ctx, NoOpSessionStore.INSTANCE).\n                     orElseThrow(() -> new IllegalStateException(\"No AuthnResponse found\"));\n \n             saml2Client.getAuthenticator().validate(credentials, ctx, NoOpSessionStore.INSTANCE);\n@@ -492,7 +495,7 @@ public void validateLogoutResponse(final SAML2Response saml2Response) {\n         LogoutResponse logoutResponse;\n         try {\n             SAML2MessageContext saml2Ctx = saml2Client.getContextProvider().\n-                buildContext(saml2Client, ctx, NoOpSessionStore.INSTANCE);\n+                    buildContext(saml2Client, ctx, NoOpSessionStore.INSTANCE);\n             saml2Client.getLogoutProfileHandler().receive(saml2Ctx);\n \n             logoutResponse = (LogoutResponse) saml2Ctx.getMessageContext().getMessage();"},{"sha":"f7ee513c17947bf4026ba5ce1dfc598892e9c628","filename":"ext/saml2sp4ui/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ClientCache.java","status":"modified","additions":45,"deletions":28,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/54307db09634af08f0d61680ee9487ee19b43fd6/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/54307db09634af08f0d61680ee9487ee19b43fd6/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp4ui%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ClientCache.java?ref=54307db09634af08f0d61680ee9487ee19b43fd6","patch":"@@ -20,6 +20,8 @@\n \n import java.io.IOException;\n import java.io.InputStream;\n+import java.nio.file.Files;\n+import java.nio.file.Path;\n import java.util.ArrayList;\n import java.util.Base64;\n import java.util.Collections;\n@@ -36,54 +38,66 @@\n import org.pac4j.saml.client.SAML2Client;\n import org.pac4j.saml.config.SAML2Configuration;\n import org.springframework.core.io.ByteArrayResource;\n-import org.springframework.core.io.Resource;\n import org.springframework.stereotype.Component;\n import org.apache.syncope.core.persistence.api.entity.SAML2SP4UIIdP;\n+import org.pac4j.saml.metadata.SAML2IdentityProviderMetadataResolver;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n \n /**\n  * Basic in-memory cache for available {@link SAML2Client} instances.\n  */\n @Component\n public class SAML2ClientCache {\n \n-    private final List<SAML2Client> cache = Collections.synchronizedList(new ArrayList<>());\n+    protected static final Logger LOG = LoggerFactory.getLogger(SAML2ClientCache.class);\n \n-    public Optional<SAML2Client> get(final String idpEntityID, final String spEntityID) {\n-        return cache.stream().filter(c -> idpEntityID.equals(c.getIdentityProviderResolvedEntityId())\n-                && spEntityID.equals(c.getConfiguration().getServiceProviderEntityId())).findFirst();\n+    private static Path METADATA_PATH;\n+\n+    static {\n+        try {\n+            METADATA_PATH = Files.createTempDirectory(\"saml2sp4ui-\").toAbsolutePath();\n+        } catch (IOException e) {\n+            LOG.error(\"Could not create a temp directory to store metadata files\", e);\n+        }\n     }\n \n-    private static SAML2Client newSAML2Client(final Resource metadata, final SAML2Configuration cfg) {\n-        cfg.setIdentityProviderMetadataResource(metadata);\n+    public static Optional<String> getSPMetadataPath(final String spEntityID) {\n+        return Optional.ofNullable(METADATA_PATH).\n+                map(path -> Optional.of(path.resolve(spEntityID).toAbsolutePath().toString())).\n+                orElse(Optional.empty());\n+    }\n \n-        SAML2Client saml2Client = new SAML2Client(cfg);\n-        saml2Client.setCallbackUrlResolver(new NoParameterCallbackUrlResolver());\n+    private final List<SAML2Client> cache = Collections.synchronizedList(new ArrayList<>());\n \n-        return saml2Client;\n+    public Optional<SAML2Client> get(final String idpEntityID, final String spEntityID) {\n+        return cache.stream().filter(c -> idpEntityID.equals(c.getIdentityProviderResolvedEntityId())\n+                && spEntityID.equals(c.getConfiguration().getServiceProviderEntityId())).findFirst();\n     }\n \n     public static SAML2SP4UIIdPTO importMetadata(\n             final InputStream metadata, final SAML2Configuration cfg) throws IOException {\n \n-        SAML2Client saml2Client = newSAML2Client(new ByteArrayResource(IOUtils.readBytesFromStream(metadata)), cfg);\n-        String entityId = saml2Client.getConfiguration().getIdentityProviderMetadataResolver().getEntityId();\n+        cfg.setIdentityProviderMetadataResource(new ByteArrayResource(IOUtils.readBytesFromStream(metadata)));\n+        SAML2IdentityProviderMetadataResolver metadataResolver = new SAML2IdentityProviderMetadataResolver(cfg);\n+        metadataResolver.init();\n+\n+        String entityId = metadataResolver.getEntityId();\n \n         SAML2SP4UIIdPTO idpTO = new SAML2SP4UIIdPTO();\n         idpTO.setEntityID(entityId);\n         idpTO.setName(entityId);\n \n-        EntityDescriptor entityDescriptor = (EntityDescriptor) saml2Client.getConfiguration().\n-                getIdentityProviderMetadataResolver().getEntityDescriptorElement();\n-        entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleSignOnServices().\n-                forEach(sso -> {\n-                    if (idpTO.getBindingType() == null) {\n-                        if (SAML2BindingType.POST.getUri().equals(sso.getBinding())) {\n-                            idpTO.setBindingType(SAML2BindingType.POST);\n-                        } else if (SAML2BindingType.REDIRECT.getUri().equals(sso.getBinding())) {\n-                            idpTO.setBindingType(SAML2BindingType.REDIRECT);\n-                        }\n-                    }\n-                });\n+        EntityDescriptor entityDescriptor = (EntityDescriptor) metadataResolver.getEntityDescriptorElement();\n+        entityDescriptor.getIDPSSODescriptor(SAMLConstants.SAML20P_NS).getSingleSignOnServices().forEach(sso -> {\n+            if (idpTO.getBindingType() == null) {\n+                if (SAML2BindingType.POST.getUri().equals(sso.getBinding())) {\n+                    idpTO.setBindingType(SAML2BindingType.POST);\n+                } else if (SAML2BindingType.REDIRECT.getUri().equals(sso.getBinding())) {\n+                    idpTO.setBindingType(SAML2BindingType.REDIRECT);\n+                }\n+            }\n+        });\n         if (idpTO.getBindingType() == null) {\n             throw new IllegalArgumentException(\"Neither POST nor REDIRECT artifacts supported by \" + entityId);\n         }\n@@ -99,8 +113,7 @@ public static SAML2SP4UIIdPTO importMetadata(\n                 findFirst().\n                 ifPresent(slo -> idpTO.setLogoutSupported(true));\n \n-        idpTO.setMetadata(Base64.getEncoder().encodeToString(\n-                saml2Client.getConfiguration().getIdentityProviderMetadataResolver().getMetadata().getBytes()));\n+        idpTO.setMetadata(Base64.getEncoder().encodeToString(metadataResolver.getMetadata().getBytes()));\n \n         ItemTO connObjectKeyItem = new ItemTO();\n         connObjectKeyItem.setIntAttrName(\"username\");\n@@ -113,8 +126,12 @@ public static SAML2SP4UIIdPTO importMetadata(\n     public SAML2Client add(\n             final SAML2SP4UIIdP idp, final SAML2Configuration cfg, final String spEntityID, final String callbackUrl) {\n \n-        SAML2Client saml2Client = newSAML2Client(new ByteArrayResource(idp.getMetadata()), cfg);\n-        saml2Client.getConfiguration().setServiceProviderEntityId(spEntityID);\n+        cfg.setIdentityProviderMetadataResource((new ByteArrayResource(idp.getMetadata())));\n+        cfg.setServiceProviderEntityId(spEntityID);\n+        getSPMetadataPath(spEntityID).ifPresent(cfg::setServiceProviderMetadataResourceFilepath);\n+\n+        SAML2Client saml2Client = new SAML2Client(cfg);\n+        saml2Client.setCallbackUrlResolver(new NoParameterCallbackUrlResolver());\n         saml2Client.setCallbackUrl(callbackUrl);\n         saml2Client.init();\n "}]}