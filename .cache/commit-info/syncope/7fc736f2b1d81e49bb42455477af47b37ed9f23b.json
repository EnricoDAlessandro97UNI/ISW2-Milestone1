{"sha":"7fc736f2b1d81e49bb42455477af47b37ed9f23b","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdmYzczNmYyYjFkODFlNDliYjQyNDU1NDc3YWY0N2IzN2VkOWYyM2I=","commit":{"author":{"name":"Misagh Moayyed","email":"misagh.moayyed@gmail.com","date":"2021-04-02T11:24:46Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2021-04-02T11:24:46Z"},"message":"SYNCOPE-1625 - Support delegation/impersonation for WA (#251)","tree":{"sha":"fda577ea420c0cfbf0c8933f7249c8d81336e4bf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/fda577ea420c0cfbf0c8933f7249c8d81336e4bf"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7fc736f2b1d81e49bb42455477af47b37ed9f23b","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJgZv7+CRBK7hj4Ov3rIwAAdHIIAH9KQgEu1QbNyUxQYE5tqkhA\nzfgD1gOBFrw6QtoYGzt8f5RThlS/VNl7M2ZdVtGlKKkASclW3TGlHa+y9yV130rN\nrlx0R38rImryRzQ9ol1b2tVIY8vaGyZsyuDNV6E+1405bpE0QGFDZFbzF97+L3ye\nulDOiStJLUUbe/s1Q1NdRrsLzCOiFPy0Vomlg79IDloIhJs9xD95NIKWFkbemVT0\nuM6Y2AmTcgLizuiEm/3noKs4nMSnSnHet52AfDOTR0DKDyit7YErT3gg8hA4sju/\njS1LfBI2mGUL/xVO0DGghaAs1NdZyq7y6SzigVLXIo8Z/tZZ8ZoLnuoTnNlzSIg=\n=8MqN\n-----END PGP SIGNATURE-----\n","payload":"tree fda577ea420c0cfbf0c8933f7249c8d81336e4bf\nparent 51fe17539dca6a40bed172bc1e26a60b6f6d0d4a\nauthor Misagh Moayyed <misagh.moayyed@gmail.com> 1617362686 +0430\ncommitter GitHub <noreply@github.com> 1617362686 +0430\n\nSYNCOPE-1625 - Support delegation/impersonation for WA (#251)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7fc736f2b1d81e49bb42455477af47b37ed9f23b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7fc736f2b1d81e49bb42455477af47b37ed9f23b","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7fc736f2b1d81e49bb42455477af47b37ed9f23b/comments","author":{"login":"mmoayyed","id":1205228,"node_id":"MDQ6VXNlcjEyMDUyMjg=","avatar_url":"https://avatars.githubusercontent.com/u/1205228?v=4","gravatar_id":"","url":"https://api.github.com/users/mmoayyed","html_url":"https://github.com/mmoayyed","followers_url":"https://api.github.com/users/mmoayyed/followers","following_url":"https://api.github.com/users/mmoayyed/following{/other_user}","gists_url":"https://api.github.com/users/mmoayyed/gists{/gist_id}","starred_url":"https://api.github.com/users/mmoayyed/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mmoayyed/subscriptions","organizations_url":"https://api.github.com/users/mmoayyed/orgs","repos_url":"https://api.github.com/users/mmoayyed/repos","events_url":"https://api.github.com/users/mmoayyed/events{/privacy}","received_events_url":"https://api.github.com/users/mmoayyed/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/51fe17539dca6a40bed172bc1e26a60b6f6d0d4a"}],"stats":{"total":780,"additions":752,"deletions":28},"files":[{"sha":"1a8a7e0d9ad3cbb58aa81c4f72890efc2e1913e2","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/AMEntitlement.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FAMEntitlement.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -128,6 +128,14 @@ public final class AMEntitlement {\n \n     public static final String WEBAUTHN_LIST_DEVICE = \"WEBAUTHN_LIST_DEVICE\";\n \n+    public static final String IMPERSONATION_CREATE_ACCOUNT = \"IMPERSONATION_CREATE_ACCOUNT\";\n+\n+    public static final String IMPERSONATION_UPDATE_ACCOUNT = \"IMPERSONATION_UPDATE_ACCOUNT\";\n+\n+    public static final String IMPERSONATION_DELETE_ACCOUNT = \"IMPERSONATION_DELETE_ACCOUNT\";\n+\n+    public static final String IMPERSONATION_READ_ACCOUNT = \"IMPERSONATION_READ_ACCOUNT\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"153efebf233bcea9e42c7b18b528f89207e212b3","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/wa/ImpersonationAccount.java","status":"added","additions":104,"deletions":0,"changes":104,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FImpersonationAccount.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FImpersonationAccount.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fwa%2FImpersonationAccount.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -0,0 +1,104 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.wa;\n+\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.commons.lang3.builder.ToStringBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+\n+public class ImpersonationAccount implements BaseBean {\n+\n+    private static final long serialVersionUID = 2285073386484048953L;\n+\n+    private String owner;\n+\n+    private String key;\n+\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+            .appendSuper(super.hashCode())\n+            .append(key)\n+            .append(owner)\n+            .toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        ImpersonationAccount rhs = (ImpersonationAccount) obj;\n+        return new EqualsBuilder()\n+            .appendSuper(super.equals(obj))\n+            .append(this.key, rhs.key)\n+            .append(this.owner, rhs.owner)\n+            .isEquals();\n+    }\n+\n+    @Override\n+    public String toString() {\n+        return new ToStringBuilder(this)\n+            .append(\"key\", key)\n+            .append(\"owner\", owner)\n+            .toString();\n+    }\n+\n+    public static class Builder {\n+\n+        private final ImpersonationAccount instance = new ImpersonationAccount();\n+\n+        public ImpersonationAccount.Builder key(final String key) {\n+            instance.setKey(key);\n+            return this;\n+        }\n+\n+        public ImpersonationAccount.Builder owner(final String owner) {\n+            instance.setOwner(owner);\n+            return this;\n+        }\n+\n+        public ImpersonationAccount build() {\n+            return instance;\n+        }\n+    }\n+}"},{"sha":"af565f9e1b00a58b882a494a511acf790e4a1fdf","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AuthProfileService.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAuthProfileService.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -31,7 +31,7 @@\n import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n import io.swagger.v3.oas.annotations.tags.Tag;\n import org.apache.syncope.common.lib.to.AuthProfileTO;\n-import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.RESTHeaders;                                                           \n \n /**\n  * REST operations for Auth profiles."},{"sha":"8ecac7cb8720c27db0522ccdba1f71b859314261","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/wa/ImpersonationService.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FImpersonationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FImpersonationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2Fwa%2FImpersonationService.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.common.rest.api.service.wa;\n+\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.JAXRSService;\n+\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+\n+import java.util.List;\n+\n+@Tag(name = \"WA\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\")})\n+@Path(\"wa/impersonation\")\n+public interface ImpersonationService extends JAXRSService {\n+    @GET\n+    @Path(\"accounts/{owner}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    List<ImpersonationAccount> findByOwner(@NotNull @PathParam(\"owner\") String owner);\n+\n+    @GET\n+    @Path(\"authz/{owner}\")\n+    @Consumes({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    @Produces({MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML})\n+    ImpersonationAccount find(@NotNull @PathParam(\"owner\") String owner,\n+                              @NotNull @QueryParam(\"id\") String id);\n+\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(@NotNull ImpersonationAccount account);\n+\n+    @DELETE\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response delete(@NotNull ImpersonationAccount account);\n+\n+    @ApiResponses(\n+        @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull ImpersonationAccount account);\n+\n+}"},{"sha":"77839a2e954a81afb69d837660871998dfb6a1f0","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/wa/ImpersonationLogic.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fwa%2FImpersonationLogic.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.logic.wa;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n+import org.apache.syncope.core.logic.AbstractAuthProfileLogic;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+@Component\n+public class ImpersonationLogic extends AbstractAuthProfileLogic {\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_READ_ACCOUNT + \"')\"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public List<ImpersonationAccount> findByOwner(final String owner) {\n+        return authProfileDAO.findByOwner(owner).map(AuthProfile::getImpersonationAccounts).orElse(List.of());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_READ_ACCOUNT + \"')\"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public ImpersonationAccount find(final String owner, final String id) {\n+        return authProfileDAO.findByOwner(owner)\n+            .map(AuthProfile::getImpersonationAccounts)\n+            .stream()\n+            .flatMap(List::stream)\n+            .filter(acct -> acct.getKey().equalsIgnoreCase(id))\n+            .findFirst()\n+            .orElseThrow(() -> {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n+                sce.getElements().add(owner + \" is not authorized to impersonate \" + id);\n+                throw sce;\n+            });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_CREATE_ACCOUNT + \"')\"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public String create(final ImpersonationAccount account) {\n+        AuthProfile profile = authProfileDAO.findByOwner(account.getOwner()).orElseGet(() -> {\n+            AuthProfile authProfile = entityFactory.newEntity(AuthProfile.class);\n+            authProfile.setOwner(account.getOwner());\n+            return authProfile;\n+        });\n+\n+        if (profile.getImpersonationAccounts()\n+            .stream()\n+            .noneMatch(acct -> acct.getKey().equalsIgnoreCase(account.getKey()))) {\n+            final List<ImpersonationAccount> accounts = new ArrayList<>(profile.getImpersonationAccounts());\n+            accounts.add(account);\n+            profile.setImpersonationAccounts(accounts);\n+        }\n+        return authProfileDAO.save(profile).getKey();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_UPDATE_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void update(final ImpersonationAccount account) {\n+        authProfileDAO.findByOwner(account.getOwner()).ifPresent(profile -> {\n+            List<ImpersonationAccount> accounts = profile.getImpersonationAccounts();\n+            if (accounts.removeIf(acct -> acct.getKey().equals(account.getKey()))) {\n+                accounts.add(account);\n+                profile.setImpersonationAccounts(accounts);\n+                authProfileDAO.save(profile);\n+            }\n+        });\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.IMPERSONATION_DELETE_ACCOUNT + \"') \"\n+        + \"or hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')\")\n+    public void delete(final ImpersonationAccount account) {\n+        authProfileDAO.findByOwner(account.getOwner()).ifPresent(profile -> {\n+            List<ImpersonationAccount> accounts = profile.getImpersonationAccounts();\n+            if (accounts.removeIf(acct -> acct.getKey().equalsIgnoreCase(account.getKey()))) {\n+                profile.setImpersonationAccounts(accounts);\n+                authProfileDAO.save(profile);\n+            }\n+        });\n+    }\n+}"},{"sha":"17b7e882acd41d57af4ee1ac23365f2e7391c6c2","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/wa/ImpersonationServiceImpl.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2Fwa%2FImpersonationServiceImpl.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.core.rest.cxf.service.wa;\n+\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n+import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n+import org.apache.syncope.core.logic.wa.ImpersonationLogic;\n+import org.apache.syncope.core.rest.cxf.service.AbstractServiceImpl;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+import java.util.List;\n+\n+@Service\n+public class ImpersonationServiceImpl extends AbstractServiceImpl implements ImpersonationService {\n+\n+    @Autowired\n+    private ImpersonationLogic logic;\n+\n+    @Override\n+    public List<ImpersonationAccount> findByOwner(final String owner) {\n+        return logic.findByOwner(owner);\n+    }\n+\n+    @Override\n+    public ImpersonationAccount find(final String owner,\n+                         final String id) {\n+        return logic.find(owner, id);\n+    }\n+\n+    @Override\n+    public Response create(final ImpersonationAccount account) {\n+        logic.create(account);\n+        URI location = uriInfo.getAbsolutePathBuilder().build();\n+        return Response.created(location).build();\n+    }\n+\n+    @Override\n+    public Response delete(final ImpersonationAccount account) {\n+        logic.delete(account);\n+        return Response.noContent().build();\n+    }\n+\n+    @Override\n+    public void update(final ImpersonationAccount account) {\n+        logic.update(account);\n+    }\n+}"},{"sha":"7b97e0e35ced6ff8a303d9b736ed14dcb4cf39ff","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/AuthProfile.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FAuthProfile.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n@@ -46,4 +47,8 @@ public interface AuthProfile extends Entity {\n     WebAuthnAccount getWebAuthnAccount();\n \n     void setWebAuthnAccount(WebAuthnAccount accounts);\n+\n+    List<ImpersonationAccount> getImpersonationAccounts();\n+\n+    void setImpersonationAccounts(List<ImpersonationAccount> accounts);\n }"},{"sha":"2ff0c58d7292b42e7f5d9c207c40db3c6f69fce4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAAuthProfile.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAAuthProfile.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -28,6 +28,7 @@\n import javax.persistence.UniqueConstraint;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n import org.apache.syncope.core.persistence.api.entity.auth.AuthProfile;\n@@ -49,6 +50,9 @@ public class JPAAuthProfile extends AbstractGeneratedKeyEntity implements AuthPr\n     @Lob\n     private String googleMfaAuthAccounts;\n \n+    @Lob\n+    private String impersonatedAccounts;\n+\n     @Lob\n     private String googleMfaAuthTokens;\n \n@@ -107,6 +111,19 @@ public void setU2FRegisteredDevices(final List<U2FDevice> records) {\n         this.u2fRegisteredDevices = POJOHelper.serialize(records);\n     }\n \n+    @Override\n+    public List<ImpersonationAccount> getImpersonationAccounts() {\n+        return impersonatedAccounts == null\n+            ? new ArrayList<>(0)\n+            : POJOHelper.deserialize(impersonatedAccounts, new TypeReference<List<ImpersonationAccount>>() {\n+        });\n+    }\n+\n+    @Override\n+    public void setImpersonationAccounts(final List<ImpersonationAccount> accounts) {\n+        this.impersonatedAccounts = POJOHelper.serialize(accounts);\n+    }\n+\n     @Override\n     public WebAuthnAccount getWebAuthnAccount() {\n         return webAuthnAccount == null"},{"sha":"df2c1dd78671000aa1b927c5e796d020c23003c2","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AuthProfileTest.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAuthProfileTest.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -25,8 +25,12 @@\n import java.util.Date;\n import java.util.List;\n import java.util.Optional;\n+import java.util.stream.Collectors;\n+import java.util.stream.IntStream;\n+\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthAccount;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.lib.wa.U2FDevice;\n import org.apache.syncope.common.lib.wa.WebAuthnAccount;\n import org.apache.syncope.common.lib.wa.WebAuthnDeviceCredential;\n@@ -156,6 +160,31 @@ public void googleMfaAccount() {\n         assertEquals(secret, authProfile.getGoogleMfaAuthAccounts().get(0).getSecretKey());\n     }\n \n+    @Test\n+    public void impersonationAccounts() {\n+        String id = SecureRandomUtils.generateRandomUUID().toString();\n+\n+        createAuthProfileWithAccount(id);\n+\n+        Optional<AuthProfile> result = authProfileDAO.findByOwner(id);\n+        assertTrue(result.isPresent());\n+\n+        AuthProfile authProfile = result.get();\n+        result = Optional.ofNullable(authProfileDAO.find(authProfile.getKey()));\n+        assertTrue(result.isPresent());\n+\n+        List<ImpersonationAccount> accounts = IntStream.range(1, 10).\n+            mapToObj(i -> new ImpersonationAccount.Builder()\n+                .owner(\"impersonator\")\n+                .key(\"impersonatee\" + i)\n+                .build()).\n+            collect(Collectors.toList());\n+\n+        authProfile.setImpersonationAccounts(accounts);\n+        authProfile = authProfileDAO.save(authProfile);\n+        assertEquals(accounts.size(), authProfile.getImpersonationAccounts().size());\n+    }\n+\n     private AuthProfile createAuthProfileWithToken(final String owner, final Integer otp) {\n         AuthProfile profile = entityFactory.newEntity(AuthProfile.class);\n         profile.setOwner(owner);"},{"sha":"250a978869a171e4129b37e63cbfa91d9b4e6e2c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -144,6 +144,7 @@\n import org.apache.syncope.common.rest.api.service.SAML2SPMetadataService;\n import org.apache.syncope.common.rest.api.service.SRARouteService;\n import org.apache.syncope.common.rest.api.service.UserWorkflowTaskService;\n+import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n import org.apache.syncope.common.rest.api.service.wa.U2FRegistrationService;\n import org.apache.syncope.common.rest.api.service.wa.WAConfigService;\n import org.apache.syncope.common.rest.api.service.wa.WebAuthnRegistrationService;\n@@ -347,6 +348,8 @@ public abstract class AbstractITCase {\n \n     protected static WebAuthnRegistrationService webAuthnRegistrationService;\n \n+    protected static ImpersonationService impersonationService;\n+    \n     @BeforeAll\n     public static void securitySetup() {\n         try (InputStream propStream = AbstractITCase.class.getResourceAsStream(\"/security.properties\")) {\n@@ -428,6 +431,7 @@ public static void restSetup() {\n         u2FRegistrationService = adminClient.getService(U2FRegistrationService.class);\n         waConfigService = adminClient.getService(WAConfigService.class);\n         webAuthnRegistrationService = adminClient.getService(WebAuthnRegistrationService.class);\n+        impersonationService = adminClient.getService(ImpersonationService.class);\n     }\n \n     @Autowired"},{"sha":"71e1706cc148a97db68afbf91e6feed5f657a00c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/wa/ImpersonationITCase.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FImpersonationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FImpersonationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Fwa%2FImpersonationITCase.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.fit.core.wa;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+import javax.ws.rs.core.Response;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+public class ImpersonationITCase extends AbstractITCase {\n+    @Test\n+    public void createAndFind() {\n+        ImpersonationAccount account = new ImpersonationAccount.Builder()\n+            .owner(getUUIDString())\n+            .key(getUUIDString())\n+            .build();\n+\n+        Response response = impersonationService.create(account);\n+        assertNotNull(response);\n+\n+        assertFalse(impersonationService.findByOwner(account.getOwner()).isEmpty());\n+        account = impersonationService.find(account.getOwner(), account.getKey());\n+        assertNotNull(account);\n+\n+        impersonationService.update(account);\n+        account = impersonationService.find(account.getOwner(), account.getKey());\n+        assertNotNull(account);\n+\n+        response = impersonationService.delete(account);\n+        assertNotNull(response);\n+        \n+        try {\n+            impersonationService.find(account.getOwner(), account.getKey());\n+            fail(\"Should not happen\");\n+        } catch (final SyncopeClientException e) {\n+           assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n+        }\n+    }\n+}"},{"sha":"f708aa0fdb680f325df87254b5c8d6aae84f3731","filename":"pom.xml","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -1728,7 +1728,16 @@ under the License.\n         <artifactId>cas-server-webapp-config</artifactId>\n         <version>${cas.version}</version>\n       </dependency>\n-\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-surrogate-webflow</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n+      <dependency>\n+        <groupId>org.apereo.cas</groupId>\n+        <artifactId>cas-server-support-surrogate-api</artifactId>\n+        <version>${cas.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.jasig.cas.client</groupId>\n         <artifactId>cas-client-core</artifactId>"},{"sha":"65fd2a97237215333a70ab0b48db485a597b3adc","filename":"wa/starter/pom.xml","status":"modified","additions":8,"deletions":1,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fpom.xml?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -270,7 +270,14 @@ under the License.\n       <groupId>org.apereo.cas</groupId>\n       <artifactId>cas-server-support-swagger</artifactId>\n     </dependency>\n-    \n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-surrogate-webflow</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apereo.cas</groupId>\n+      <artifactId>cas-server-support-surrogate-api</artifactId>\n+    </dependency>\n     <dependency>\n       <groupId>org.springframework.boot</groupId>\n       <artifactId>spring-boot-starter-web</artifactId>"},{"sha":"41a333de315b323a4ff8fe24f8238f4bf266b9ee","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/config/SyncopeWAConfiguration.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fconfig%2FSyncopeWAConfiguration.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -53,9 +53,11 @@\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataGenerator;\n import org.apache.syncope.wa.starter.saml.idp.metadata.RestfulSamlIdPMetadataLocator;\n import org.apache.syncope.wa.starter.services.SyncopeWAServiceRegistry;\n+import org.apache.syncope.wa.starter.surrogate.SyncopeWASurrogateAuthenticationService;\n import org.apache.syncope.wa.starter.u2f.SyncopeWAU2FDeviceRepository;\n import org.apereo.cas.adaptors.u2f.storage.U2FDeviceRepository;\n import org.apereo.cas.audit.AuditTrailExecutionPlanConfigurer;\n+import org.apereo.cas.authentication.surrogate.SurrogateAuthenticationService;\n import org.apereo.cas.configuration.CasConfigurationProperties;\n import org.apereo.cas.configuration.model.support.mfa.u2f.U2FMultifactorAuthenticationProperties;\n import org.apereo.cas.oidc.jwks.OidcJsonWebKeystoreGeneratorService;\n@@ -303,6 +305,12 @@ public U2FDeviceRepository u2fDeviceRepository(final WARestClient restClient) {\n         return new SyncopeWAU2FDeviceRepository(requestStorage, restClient, expirationDate);\n     }\n \n+    @Bean\n+    @Autowired\n+    public SurrogateAuthenticationService surrogateAuthenticationService(final WARestClient restClient) {\n+        return new SyncopeWASurrogateAuthenticationService(restClient);\n+    }\n+    \n     @Bean\n     public KeymasterStart keymasterStart() {\n         return new KeymasterStart(NetworkService.Type.WA);"},{"sha":"d45da0a5b59762bbb22ec66bd8561003eb2dfdc8","filename":"wa/starter/src/main/java/org/apache/syncope/wa/starter/surrogate/SyncopeWASurrogateAuthenticationService.java","status":"added","additions":71,"deletions":0,"changes":71,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationService.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -0,0 +1,71 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.surrogate;\n+\n+import org.apereo.cas.authentication.principal.Principal;\n+import org.apereo.cas.authentication.principal.Service;\n+import org.apereo.cas.authentication.surrogate.SurrogateAuthenticationService;\n+\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n+import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+import java.util.Collection;\n+import java.util.Optional;\n+import java.util.stream.Collectors;\n+\n+public class SyncopeWASurrogateAuthenticationService implements SurrogateAuthenticationService {\n+    private static final Logger LOG = LoggerFactory.getLogger(SyncopeWASurrogateAuthenticationService.class);\n+\n+    private final WARestClient waRestClient;\n+\n+    public SyncopeWASurrogateAuthenticationService(final WARestClient waRestClient) {\n+        this.waRestClient = waRestClient;\n+    }\n+\n+    @Override\n+    public boolean canAuthenticateAs(final String surrogate, final Principal principal,\n+                                     final Optional<Service> service) {\n+        try {\n+            LOG.debug(\"Checking impersonation attempt by {} for {}\", principal, surrogate);\n+            return getImpersonationService().find(principal.getId(), surrogate) != null;\n+        } catch (final Exception e) {\n+            LOG.info(\"Could not authorize account {} for owner {}\", surrogate, principal.getId());\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public Collection<String> getEligibleAccountsForSurrogateToProxy(final String username) {\n+        return getImpersonationService().findByOwner(username).\n+            stream().\n+            map(ImpersonationAccount::getKey).\n+            collect(Collectors.toList());\n+    }\n+\n+    private ImpersonationService getImpersonationService() {\n+        if (!WARestClient.isReady()) {\n+            throw new RuntimeException(\"Syncope core is not yet ready\");\n+        }\n+        return waRestClient.getSyncopeClient().getService(ImpersonationService.class);\n+    }\n+}"},{"sha":"79284d7813520d32ec5c02a7af73a2d2e3bd4e76","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/AbstractTest.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FAbstractTest.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -25,7 +25,6 @@\n import org.springframework.boot.test.context.SpringBootTest;\n import org.springframework.boot.test.context.TestConfiguration;\n import org.springframework.boot.web.server.LocalServerPort;\n-import org.springframework.boot.web.servlet.server.Session;\n import org.springframework.context.annotation.Bean;\n import org.springframework.context.annotation.ComponentScan;\n import org.springframework.test.context.ContextConfiguration;"},{"sha":"c77e4c49c89f465518a2a7e4f858e960e5e6523d","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/SyncopeCoreTestingServer.java","status":"modified","additions":96,"deletions":24,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2FSyncopeCoreTestingServer.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -19,29 +19,39 @@\n package org.apache.syncope.wa.starter;\n \n import com.fasterxml.jackson.jaxrs.json.JacksonJsonProvider;\n-import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.HashMap;\n-import java.util.List;\n-import java.util.Map;\n-import java.util.Objects;\n-import java.util.UUID;\n-import java.util.stream.Collectors;\n-import javax.ws.rs.NotFoundException;\n import org.apache.cxf.jaxrs.JAXRSServerFactoryBean;\n import org.apache.cxf.jaxrs.lifecycle.SingletonResourceProvider;\n import org.apache.syncope.common.keymaster.client.api.ServiceOps;\n import org.apache.syncope.common.keymaster.client.api.model.NetworkService;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.wa.GoogleMfaAuthToken;\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n import org.apache.syncope.common.lib.wa.WAClientApp;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.wa.GoogleMfaAuthTokenService;\n+import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n import org.apache.syncope.common.rest.api.service.wa.WAClientAppService;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationListener;\n import org.springframework.context.event.ContextRefreshedEvent;\n \n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.Response;\n+\n+import java.net.URI;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Objects;\n+import java.util.UUID;\n+import java.util.stream.Collectors;\n+\n public class SyncopeCoreTestingServer implements ApplicationListener<ContextRefreshedEvent> {\n \n     public static final List<WAClientApp> APPS = new ArrayList<>();\n@@ -58,13 +68,16 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n                 // 1. start (mocked) Core as embedded CXF\n                 JAXRSServerFactoryBean sf = new JAXRSServerFactoryBean();\n                 sf.setAddress(ADDRESS);\n-                sf.setResourceClasses(WAClientAppService.class, GoogleMfaAuthTokenService.class);\n+                sf.setResourceClasses(WAClientAppService.class, GoogleMfaAuthTokenService.class, ImpersonationService.class);\n+                sf.setResourceProvider(\n+                    WAClientAppService.class,\n+                    new SingletonResourceProvider(new StubWAClientAppService(), true));\n                 sf.setResourceProvider(\n-                        WAClientAppService.class,\n-                        new SingletonResourceProvider(new StubWAClientAppService(), true));\n+                    GoogleMfaAuthTokenService.class,\n+                    new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n                 sf.setResourceProvider(\n-                        GoogleMfaAuthTokenService.class,\n-                        new SingletonResourceProvider(new StubGoogleMfaAuthTokenService(), true));\n+                    ImpersonationService.class,\n+                    new SingletonResourceProvider(new StubImpersonationService(), true));\n                 sf.setProviders(List.of(new JacksonJsonProvider()));\n                 sf.create();\n \n@@ -77,6 +90,65 @@ public void onApplicationEvent(final ContextRefreshedEvent event) {\n         }\n     }\n \n+    public static class StubImpersonationService implements ImpersonationService {\n+        private final Map<String, List<ImpersonationAccount>> accounts = new HashMap<>();\n+\n+        @Override\n+        public List<ImpersonationAccount> findByOwner(final String owner) {\n+            return accounts.containsKey(owner) ? accounts.get(owner) : List.of();\n+        }\n+\n+        @Override\n+        public ImpersonationAccount find(final String owner, final String id) {\n+            SyncopeClientException exception = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n+            if (accounts.containsKey(owner)) {\n+                return accounts.get(owner).\n+                    stream().\n+                    filter(acct -> acct.getKey().equalsIgnoreCase(id)).\n+                    findFirst().\n+                    orElseThrow(() -> exception);\n+            }\n+            throw exception;\n+        }\n+\n+        @Override\n+        public Response create(final ImpersonationAccount account) {\n+            try {\n+                if (accounts.containsKey(account.getOwner())\n+                    && accounts.get(account.getOwner()).\n+                    stream().\n+                    noneMatch(acct -> acct.getKey().equalsIgnoreCase(account.getOwner()))) {\n+                    accounts.get(account.getOwner()).add(account);\n+                } else {\n+                    List<ImpersonationAccount> list = new ArrayList<>();\n+                    list.add(account);\n+                    accounts.put(account.getOwner(), list);\n+                }\n+                return Response.created(new URI(\"wa/impersonation\")).\n+                    header(RESTHeaders.RESOURCE_KEY, account.getKey()).\n+                    build();\n+            } catch (final Exception e) {\n+                throw new IllegalStateException(e);\n+            }\n+        }\n+\n+        @Override\n+        public Response delete(final ImpersonationAccount account) {\n+            if (accounts.containsKey(account.getOwner())) {\n+                accounts.get(account.getOwner()).removeIf(acct -> acct.getKey().equalsIgnoreCase(account.getKey()));\n+            }\n+            return Response.noContent().build();\n+        }\n+\n+        @Override\n+        public void update(final ImpersonationAccount account) {\n+            List<ImpersonationAccount> impersonatedAccounts = accounts.get(account.getOwner());\n+            if (impersonatedAccounts.removeIf(acct -> acct.getKey().equals(account.getKey()))) {\n+                impersonatedAccounts.add(account);\n+            }\n+        }\n+    }\n+\n     public static class StubGoogleMfaAuthTokenService implements GoogleMfaAuthTokenService {\n \n         private final Map<String, GoogleMfaAuthToken> tokens = new HashMap<>();\n@@ -93,7 +165,7 @@ public void delete(final Date expirationDate) {\n         @Override\n         public void delete(final String owner, final int otp) {\n             tokens.entrySet().\n-                    removeIf(e -> e.getValue().getOtp() == otp && e.getKey().equalsIgnoreCase(owner));\n+                removeIf(e -> e.getValue().getOtp() == otp && e.getKey().equalsIgnoreCase(owner));\n         }\n \n         @Override\n@@ -115,17 +187,17 @@ public void store(final String owner, final GoogleMfaAuthToken tokenTO) {\n         @Override\n         public GoogleMfaAuthToken readFor(final String owner, final int otp) {\n             return tokens.entrySet().stream()\n-                    .filter(to -> to.getValue().getOtp() == otp && to.getKey().equalsIgnoreCase(owner))\n-                    .findFirst().get().getValue();\n+                .filter(to -> to.getValue().getOtp() == otp && to.getKey().equalsIgnoreCase(owner))\n+                .findFirst().get().getValue();\n         }\n \n         @Override\n         public PagedResult<GoogleMfaAuthToken> readFor(final String user) {\n             PagedResult<GoogleMfaAuthToken> result = new PagedResult<>();\n             result.getResult().addAll(tokens.entrySet().stream().\n-                    filter(to -> to.getKey().equalsIgnoreCase(user)).\n-                    map(Map.Entry::getValue).\n-                    collect(Collectors.toList()));\n+                filter(to -> to.getKey().equalsIgnoreCase(user)).\n+                map(Map.Entry::getValue).\n+                collect(Collectors.toList()));\n             result.setSize(result.getResult().size());\n             result.setTotalCount(result.getSize());\n             return result;\n@@ -134,8 +206,8 @@ public PagedResult<GoogleMfaAuthToken> readFor(final String user) {\n         @Override\n         public GoogleMfaAuthToken read(final String key) {\n             return tokens.entrySet().stream()\n-                    .filter(to -> to.getKey().equalsIgnoreCase(key))\n-                    .findFirst().get().getValue();\n+                .filter(to -> to.getKey().equalsIgnoreCase(key))\n+                .findFirst().get().getValue();\n         }\n \n         @Override\n@@ -158,13 +230,13 @@ public List<WAClientApp> list() {\n         @Override\n         public WAClientApp read(final Long clientAppId, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(clientAppId, app.getClientAppTO().getClientAppId())).\n-                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n+                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with clientId \" + clientAppId));\n         }\n \n         @Override\n         public WAClientApp read(final String name, final ClientAppType type) {\n             return APPS.stream().filter(app -> Objects.equals(name, app.getClientAppTO().getName())).\n-                    findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n+                findFirst().orElseThrow(() -> new NotFoundException(\"ClientApp with name \" + name));\n         }\n     }\n }"},{"sha":"1a55b026925ec480684176b07f9da4f790141f40","filename":"wa/starter/src/test/java/org/apache/syncope/wa/starter/surrogate/SyncopeWASurrogateAuthenticationServiceTest.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationServiceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fc736f2b1d81e49bb42455477af47b37ed9f23b/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationServiceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/wa%2Fstarter%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fwa%2Fstarter%2Fsurrogate%2FSyncopeWASurrogateAuthenticationServiceTest.java?ref=7fc736f2b1d81e49bb42455477af47b37ed9f23b","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+\n+package org.apache.syncope.wa.starter.surrogate;\n+\n+import org.apereo.cas.authentication.principal.Principal;\n+import org.apereo.cas.authentication.principal.PrincipalFactoryUtils;\n+import org.apereo.cas.authentication.surrogate.SurrogateAuthenticationService;\n+\n+import org.apache.syncope.common.lib.wa.ImpersonationAccount;\n+import org.apache.syncope.common.rest.api.service.wa.ImpersonationService;\n+import org.apache.syncope.wa.bootstrap.WARestClient;\n+import org.apache.syncope.wa.starter.AbstractTest;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+import javax.ws.rs.core.Response;\n+\n+import java.util.Optional;\n+\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+\n+public class SyncopeWASurrogateAuthenticationServiceTest extends AbstractTest {\n+    @Autowired\n+    private WARestClient wARestClient;\n+\n+    @Autowired\n+    private SurrogateAuthenticationService surrogateService;\n+\n+    @Test\n+    public void verifyImpersonation() {\n+        ImpersonationAccount account = new ImpersonationAccount.Builder().\n+            owner(\"syncope-principal\").\n+            key(\"impersonatee\").\n+            build();\n+\n+        ImpersonationService impersonationService = wARestClient.\n+            getSyncopeClient().\n+            getService(ImpersonationService.class);\n+\n+        Response response = impersonationService.create(account);\n+        assertNotNull(response);\n+\n+        assertFalse(surrogateService.getEligibleAccountsForSurrogateToProxy(account.getOwner()).isEmpty());\n+\n+        Principal principal = PrincipalFactoryUtils.newPrincipalFactory().createPrincipal(account.getOwner());\n+        assertFalse(surrogateService.canAuthenticateAs(\"unknown\", principal, Optional.empty()));\n+        assertTrue(surrogateService.canAuthenticateAs(account.getKey(), principal, Optional.empty()));\n+\n+    }\n+}"}]}