{"sha":"1611dc592acc3f083765a2d84c9109162e5c2c98","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE2MTFkYzU5MmFjYzNmMDgzNzY1YTJkODRjOTEwOTE2MmU1YzJjOTg=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-10T14:32:11Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-02-10T14:32:11Z"},"message":"Update issue 283\nClasses for report handling in place: entities, DAOs, controller, job and tests, of course.\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247398 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"97ecf39cd87697e2ad6894e7ea6bca5ccc0ad646","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/97ecf39cd87697e2ad6894e7ea6bca5ccc0ad646"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1611dc592acc3f083765a2d84c9109162e5c2c98","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1611dc592acc3f083765a2d84c9109162e5c2c98","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1611dc592acc3f083765a2d84c9109162e5c2c98","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1611dc592acc3f083765a2d84c9109162e5c2c98/comments","author":null,"committer":null,"parents":[{"sha":"1f0c9757738157fc26d3b5e16ec868c8d513f233","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1f0c9757738157fc26d3b5e16ec868c8d513f233","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1f0c9757738157fc26d3b5e16ec868c8d513f233"}],"stats":{"total":2658,"additions":2357,"deletions":301},"files":[{"sha":"c781431994daba18eda50bc24461eddf826c1146","filename":"client/src/main/java/org/syncope/client/report/AbstractReportlet.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FAbstractReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FAbstractReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FAbstractReportlet.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,41 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.report;\n+\n+import org.syncope.client.AbstractBaseBean;\n+\n+public abstract class AbstractReportlet extends AbstractBaseBean\n+        implements Reportlet {\n+\n+    private static final long serialVersionUID = 2261593176065528113L;\n+\n+    private String name;\n+\n+    public AbstractReportlet() {\n+        this.name = this.getClass().getSimpleName();\n+    }\n+\n+    public AbstractReportlet(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+}"},{"sha":"3943348afe7926904a6a04a9b51cc5193533955d","filename":"client/src/main/java/org/syncope/client/report/Reportlet.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FReportlet.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.report;\n+\n+import org.codehaus.jackson.annotate.JsonTypeInfo;\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+/**\n+ * Interface for all elements that can be embedded in a report.\n+ *\n+ * @see org.syncope.core.persistence.beans.Report\n+ */\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS,\n+include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n+public interface Reportlet {\n+\n+    /**\n+     * Give name of this reportlet instance.\n+     *\n+     * @return name of this reportlet instance\n+     */\n+    String getName();\n+\n+    /**\n+     * Actual data extraction for reporting.\n+     *\n+     * @param handler SAX content handler for streaming result\n+     * @throws SAXException if anything goes wrong\n+     */\n+    void extract(ContentHandler handler)\n+            throws SAXException;\n+}"},{"sha":"1c467f55a7836c76bbd9352b15034c18d4745799","filename":"client/src/main/java/org/syncope/client/report/UserReportlet.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FUserReportlet.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FUserReportlet.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FUserReportlet.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.report;\n+\n+import org.xml.sax.ContentHandler;\n+import org.xml.sax.SAXException;\n+\n+public class UserReportlet extends AbstractReportlet {\n+\n+    private static final long serialVersionUID = 6602717600064602764L;\n+\n+    public UserReportlet() {\n+        super();\n+    }\n+\n+    public UserReportlet(final String name) {\n+        super(name);\n+    }\n+\n+    @Override\n+    public void extract(final ContentHandler handler)\n+            throws SAXException {\n+    }\n+}"},{"sha":"21ae40269ff5f30d3b917e687643e60b5af31c42","filename":"client/src/main/java/org/syncope/client/report/XMLReport.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FXMLReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FXMLReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Freport%2FXMLReport.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.report;\n+\n+public class XMLReport {\n+\n+    public static String TYPE_TEXT = \"CDATA\";\n+\n+    public enum Elements {\n+\n+        report\n+\n+    }\n+\n+    public enum Attrs {\n+\n+        name\n+\n+    }\n+}"},{"sha":"0299783e0e9fc922892c833695ada9e93b3bb702","filename":"client/src/main/java/org/syncope/client/to/AbstractExecTO.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAbstractExecTO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.Date;\n+import org.syncope.client.AbstractBaseBean;\n+\n+public class AbstractExecTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4621191979198357081L;\n+\n+    protected long id;\n+\n+    protected String status;\n+\n+    protected String message;\n+\n+    protected Date startDate;\n+\n+    protected Date endDate;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(Date startDate) {\n+        if (startDate != null) {\n+            this.startDate = new Date(startDate.getTime());\n+        }\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(Date endDate) {\n+        if (endDate != null) {\n+            this.endDate = new Date(endDate.getTime());\n+        }\n+    }\n+}"},{"sha":"700b5b7aa9cb5f01847637eb6ea25db1b313b38b","filename":"client/src/main/java/org/syncope/client/to/ReportExecTO.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FReportExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FReportExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FReportExecTO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import org.syncope.types.ReportExecStatus;\n+\n+public class ReportExecTO extends AbstractExecTO {\n+\n+    private static final long serialVersionUID = -1025555939724089215L;\n+\n+    private long report;\n+\n+    public long getReport() {\n+        return report;\n+    }\n+\n+    public void setReport(long report) {\n+        this.report = report;\n+    }\n+\n+    public void setStatus(ReportExecStatus status) {\n+        super.setStatus(status.name());\n+    }\n+}"},{"sha":"b4654c1fe964409223652cada23ffe40f82757cf","filename":"client/src/main/java/org/syncope/client/to/ReportTO.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FReportTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FReportTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FReportTO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.client.report.Reportlet;\n+\n+public class ReportTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 5274568072084814410L;\n+\n+    private long id;\n+\n+    private String name;\n+\n+    private List<Reportlet> reportlets;\n+\n+    private String cronExpression;\n+\n+    private List<ReportExecTO> executions;\n+\n+    public ReportTO() {\n+        super();\n+\n+        reportlets = new ArrayList<Reportlet>();\n+        executions = new ArrayList<ReportExecTO>();\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public boolean addReportlet(Reportlet reportlet) {\n+        return this.reportlets.add(reportlet);\n+    }\n+\n+    public boolean removeReportlet(Reportlet reportlet) {\n+        return this.reportlets.remove(reportlet);\n+    }\n+\n+    public List<Reportlet> getReportlets() {\n+        return reportlets;\n+    }\n+\n+    public void setReportlets(List<Reportlet> reportlets) {\n+        this.reportlets = reportlets;\n+    }\n+\n+    public String getCronExpression() {\n+        return cronExpression;\n+    }\n+\n+    public void setCronExpression(String cronExpression) {\n+        this.cronExpression = cronExpression;\n+    }\n+\n+    public boolean addExec(ReportExecTO execution) {\n+        return executions.add(execution);\n+    }\n+\n+    public boolean removeExec(ReportExecTO execution) {\n+        return executions.remove(execution);\n+    }\n+\n+    public List<ReportExecTO> getExecutions() {\n+        return executions;\n+    }\n+\n+    public void setExecutions(List<ReportExecTO> executions) {\n+        this.executions = executions;\n+    }\n+}"},{"sha":"fdd7f765e873686951716527d280d8603e5e6e74","filename":"client/src/main/java/org/syncope/client/to/TaskExecTO.java","status":"modified","additions":1,"deletions":58,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FTaskExecTO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -14,69 +14,12 @@\n  */\n package org.syncope.client.to;\n \n-import java.util.Date;\n-import org.syncope.client.AbstractBaseBean;\n-\n-public class TaskExecTO extends AbstractBaseBean {\n+public class TaskExecTO extends AbstractExecTO {\n \n     private static final long serialVersionUID = -5401795154606268973L;\n \n-    private long id;\n-\n-    private Date startDate;\n-\n-    private Date endDate;\n-\n-    private String status;\n-\n-    private String message;\n-\n     private long task;\n \n-    public Date getEndDate() {\n-        return endDate == null ? null : new Date(endDate.getTime());\n-    }\n-\n-    public void setEndDate(Date endDate) {\n-        if (endDate != null) {\n-            this.endDate = new Date(endDate.getTime());\n-        }\n-    }\n-\n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    public void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public Date getStartDate() {\n-        return startDate == null ? null : new Date(startDate.getTime());\n-    }\n-\n-    public void setStartDate(Date startDate) {\n-        if (startDate != null) {\n-            this.startDate = new Date(startDate.getTime());\n-        }\n-    }\n-\n-    public String getStatus() {\n-        return status;\n-    }\n-\n-    public void setStatus(String status) {\n-        this.status = status;\n-    }\n-\n     public long getTask() {\n         return task;\n     }"},{"sha":"43f005fe2ec62ffee6c423fed4547e9ac9a4c2a1","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -67,6 +67,8 @@ public enum EntityViolationType {\n     \"org.syncope.core.validation.policy.invalid\"),\n     InvalidNotification(\n     \"org.syncope.core.validation.notification.invalid\"),\n+    InvalidReport(\n+    \"org.syncope.core.validation.report.invalid\"),\n     InvalidSchemaMapping(\n     \"org.syncope.core.validation.mapping.invalid\");\n "},{"sha":"32c25a5c731b1b4c10e6251bb115f52e6acf0d67","filename":"client/src/main/java/org/syncope/types/ReportExecExportFormat.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FReportExecExportFormat.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FReportExecExportFormat.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FReportExecExportFormat.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,28 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum ReportExecExportFormat {\n+\n+    XML,\n+    HTML,\n+    PDF,\n+    XLS,\n+    RTF,\n+    DOC,\n+    ODT,\n+    ODS\n+\n+}"},{"sha":"e6a1c24cab59756c94fd485fb917132dd1bdfd59","filename":"client/src/main/java/org/syncope/types/ReportExecStatus.java","status":"added","additions":24,"deletions":0,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FReportExecStatus.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FReportExecStatus.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FReportExecStatus.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,24 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public enum ReportExecStatus {\n+\n+    STARTED,\n+    RUNNING,\n+    SUCCESS,\n+    FAILURE;\n+\n+}"},{"sha":"38f36b249d792f873dd64be72496929be63f710f","filename":"client/src/test/java/org/syncope/client/test/JSONTest.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fclient%2Ftest%2FJSONTest.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -23,9 +23,11 @@\n import java.util.List;\n import org.codehaus.jackson.map.ObjectMapper;\n import org.junit.Test;\n+import org.syncope.client.report.UserReportlet;\n import org.syncope.client.search.AttributeCond;\n import org.syncope.client.search.MembershipCond;\n import org.syncope.client.search.NodeCond;\n+import org.syncope.client.to.ReportTO;\n import org.syncope.client.to.SchemaTO;\n import org.syncope.client.to.WorkflowFormPropertyTO;\n \n@@ -99,4 +101,23 @@ public void testMap()\n                 writer.toString(), WorkflowFormPropertyTO.class);\n         assertEquals(prop, unserializedProp);\n     }\n+\n+    @Test\n+    public void testReportletImplementations()\n+            throws IOException {\n+\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForCreate\");\n+        report.addReportlet(new UserReportlet());\n+        report.addReportlet(new UserReportlet(\"second\"));\n+\n+        ObjectMapper mapper = new ObjectMapper();\n+\n+        StringWriter writer = new StringWriter();\n+        mapper.writeValue(writer, report);\n+\n+        ReportTO actual = mapper.readValue(\n+                writer.toString(), ReportTO.class);\n+        assertEquals(report, actual);\n+    }\n }"},{"sha":"b5303512771598e292129ce391181edd0abfefef","filename":"core/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -184,6 +184,11 @@\n             <artifactId>quartz-oracle</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>org.apache.cocoon.sax</groupId>\n+            <artifactId>cocoon-sax</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>org.apache.openjpa</groupId>\n             <artifactId>openjpa-all</artifactId>"},{"sha":"be46843a57ac90401789d4c66bd2b5d27e2aefbb","filename":"core/src/main/java/org/syncope/core/init/JobInstanceLoader.java","status":"modified","additions":99,"deletions":39,"changes":138,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Finit%2FJobInstanceLoader.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -31,12 +31,16 @@\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.Report;\n import org.syncope.core.persistence.beans.SchedTask;\n import org.syncope.core.persistence.beans.SyncTask;\n+import org.syncope.core.persistence.beans.Task;\n+import org.syncope.core.persistence.dao.ReportDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n-import org.syncope.core.scheduling.AbstractJob;\n+import org.syncope.core.scheduling.AbstractTaskJob;\n import org.syncope.core.scheduling.DefaultSyncJobActions;\n import org.syncope.core.scheduling.NotificationJob;\n+import org.syncope.core.scheduling.ReportJob;\n import org.syncope.core.scheduling.SyncJob;\n import org.syncope.core.scheduling.SyncJobActions;\n \n@@ -52,46 +56,89 @@ public class JobInstanceLoader extends AbstractLoader {\n     @Autowired\n     private TaskDAO taskDAO;\n \n-    public static Long getTaskIdFromJobName(final String name) {\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    private static Long getIdFromJobName(final String name,\n+            final String pattern, final int prefixLength) {\n+\n         Long result = null;\n \n-        Matcher jobMatcher = Pattern.compile(\"job[0-9]+\").matcher(name);\n+        Matcher jobMatcher = Pattern.compile(pattern).matcher(name);\n         if (jobMatcher.matches()) {\n             try {\n-                result = Long.valueOf(name.substring(3));\n+                result = Long.valueOf(name.substring(prefixLength));\n             } catch (NumberFormatException e) {\n-                LOG.error(\"Unparsable task id: {}\", name.substring(3), e);\n+                LOG.error(\"Unparsable id: {}\", name.substring(prefixLength), e);\n             }\n         }\n \n         return result;\n     }\n \n-    public static String getJobName(final Long taskId) {\n-        return \"job\" + taskId;\n+    public static Long getTaskIdFromJobName(final String name) {\n+        return getIdFromJobName(\"taskJob[0-9]+\", name, 7);\n     }\n \n-    public static String getTriggerName(final Long taskId) {\n-        return \"Trigger_\" + getJobName(taskId);\n+    public static Long getReportIdFromJobName(final String name) {\n+        return getIdFromJobName(\"reportJob[0-9]+\", name, 9);\n     }\n \n-    public void registerJob(final Long taskId, final String jobClassName,\n-            final String cronExpression)\n+    public static String getJobName(final Task task) {\n+        return task == null\n+                ? \"taskNotificationJob\"\n+                : \"taskJob\" + task.getId();\n+    }\n+\n+    public static String getJobName(final Report report) {\n+        return \"reportJob\" + report.getId();\n+    }\n+\n+    public static String getTriggerName(final String jobName) {\n+        return \"Trigger_\" + jobName;\n+    }\n+\n+    private void registerJob(final String jobName,\n+            final Job jobInstance, final String cronExpression)\n             throws Exception {\n \n         // 0. unregister job\n-        unregisterJob(taskId);\n+        unregisterJob(jobName);\n \n         // 1. Job bean\n+        getBeanFactory().registerSingleton(jobName, jobInstance);\n+\n+        // 2. JobDetail bean\n+        JobDetail jobDetail = new JobDetailBean();\n+        jobDetail.setName(jobName);\n+        jobDetail.setGroup(Scheduler.DEFAULT_GROUP);\n+        jobDetail.setJobClass(jobInstance.getClass());\n+\n+        // 3. Trigger\n+        if (cronExpression == null) {\n+            scheduler.getScheduler().addJob(jobDetail, true);\n+        } else {\n+            CronTriggerBean cronTrigger = new CronTriggerBean();\n+            cronTrigger.setName(getTriggerName(jobName));\n+            cronTrigger.setCronExpression(cronExpression);\n+\n+            scheduler.getScheduler().scheduleJob(jobDetail, cronTrigger);\n+        }\n+    }\n+\n+    public void registerJob(final Task task, final String jobClassName,\n+            final String cronExpression)\n+            throws Exception {\n+\n         Class jobClass = Class.forName(jobClassName);\n         Job jobInstance = (Job) getBeanFactory().autowire(jobClass,\n                 AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-        if (jobInstance instanceof AbstractJob) {\n-            ((AbstractJob) jobInstance).setTaskId(taskId);\n+        if (jobInstance instanceof AbstractTaskJob) {\n+            ((AbstractTaskJob) jobInstance).setTaskId(task.getId());\n         }\n         if (jobInstance instanceof SyncJob) {\n             String jobActionsClassName =\n-                    ((SyncTask) taskDAO.find(taskId)).getJobActionsClassName();\n+                    ((SyncTask) task).getJobActionsClassName();\n             Class syncJobActionsClass = DefaultSyncJobActions.class;\n             if (StringUtils.isNotBlank(jobActionsClassName)) {\n                 try {\n@@ -109,41 +156,44 @@ public void registerJob(final Long taskId, final String jobClassName,\n \n             ((SyncJob) jobInstance).setActions(syncJobActions);\n         }\n-        getBeanFactory().registerSingleton(getJobName(taskId), jobInstance);\n \n-        // 2. JobDetail bean\n-        JobDetail jobDetail = new JobDetailBean();\n-        jobDetail.setName(getJobName(taskId));\n-        jobDetail.setGroup(Scheduler.DEFAULT_GROUP);\n-        jobDetail.setJobClass(jobClass);\n+        registerJob(getJobName(task), jobInstance, cronExpression);\n+    }\n \n-        // 3. Trigger\n-        if (cronExpression == null) {\n-            scheduler.getScheduler().addJob(jobDetail, true);\n-        } else {\n-            CronTriggerBean cronTrigger = new CronTriggerBean();\n-            cronTrigger.setName(getTriggerName(taskId));\n-            cronTrigger.setCronExpression(cronExpression);\n+    public void registerJob(final Report report)\n+            throws Exception {\n \n-            scheduler.getScheduler().scheduleJob(jobDetail, cronTrigger);\n-        }\n+        Job jobInstance = (Job) getBeanFactory().autowire(ReportJob.class,\n+                AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+        ((ReportJob) jobInstance).setReportId(report.getId());\n+\n+        registerJob(getJobName(report), jobInstance,\n+                report.getCronExpression());\n     }\n \n-    public void unregisterJob(final Long taskId) {\n+    private void unregisterJob(final String jobName) {\n         try {\n             scheduler.getScheduler().unscheduleJob(\n-                    getJobName(taskId), Scheduler.DEFAULT_GROUP);\n+                    jobName, Scheduler.DEFAULT_GROUP);\n             scheduler.getScheduler().deleteJob(\n-                    getJobName(taskId), Scheduler.DEFAULT_GROUP);\n+                    jobName, Scheduler.DEFAULT_GROUP);\n         } catch (SchedulerException e) {\n-            LOG.error(\"Could not remove job \" + getJobName(taskId), e);\n+            LOG.error(\"Could not remove job \" + jobName, e);\n         }\n \n-        if (getBeanFactory().containsSingleton(getJobName(taskId))) {\n-            getBeanFactory().destroySingleton(getJobName(taskId));\n+        if (getBeanFactory().containsSingleton(jobName)) {\n+            getBeanFactory().destroySingleton(jobName);\n         }\n     }\n \n+    public void unregisterJob(final Task task) {\n+        unregisterJob(getJobName(task));\n+    }\n+\n+    public void unregisterJob(final Report report) {\n+        unregisterJob(getJobName(report));\n+    }\n+\n     @Override\n     @Transactional(readOnly = true)\n     public void load() {\n@@ -152,20 +202,30 @@ public void load() {\n         tasks.addAll(taskDAO.findAll(SyncTask.class));\n         for (SchedTask task : tasks) {\n             try {\n-                registerJob(task.getId(), task.getJobClassName(),\n+                registerJob(task, task.getJobClassName(),\n                         task.getCronExpression());\n             } catch (Exception e) {\n                 LOG.error(\"While loading job instance for task \"\n                         + task.getId(), e);\n             }\n         }\n \n-        // 2.NotificationJob\n+        // 2. NotificationJob\n         try {\n-            registerJob(-1L, NotificationJob.class.getName(),\n+            registerJob(null, NotificationJob.class.getName(),\n                     \"0 0/2 * * * ?\");\n         } catch (Exception e) {\n             LOG.error(\"While loading NotificationJob instance\", e);\n         }\n+\n+        // 3. ReportJobs\n+        for (Report report : reportDAO.findAll()) {\n+            try {\n+                registerJob(report);\n+            } catch (Exception e) {\n+                LOG.error(\"While loading job instance for report \"\n+                        + report.getName(), e);\n+            }\n+        }\n     }\n }"},{"sha":"aef7e1d7169abc9e4b8e85044747546d037f882c","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractExec.java","status":"added","additions":84,"deletions":0,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractExec.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,84 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.Date;\n+import javax.persistence.Column;\n+import javax.persistence.Lob;\n+import javax.persistence.MappedSuperclass;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+\n+@MappedSuperclass\n+public abstract class AbstractExec extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -812344822970166317L;\n+\n+    @Column(nullable = false)\n+    protected String status;\n+\n+    /**\n+     * Any information to be accompained to this execution's result.\n+     */\n+    @Lob\n+    protected String message;\n+\n+    /**\n+     * Start instant of this execution.\n+     */\n+    @Temporal(TemporalType.TIMESTAMP)\n+    protected Date startDate;\n+\n+    /**\n+     * End instant of this execution.\n+     */\n+    @Temporal(TemporalType.TIMESTAMP)\n+    protected Date endDate;\n+\n+    public String getStatus() {\n+        return status;\n+    }\n+\n+    public void setStatus(String status) {\n+        this.status = status;\n+    }\n+\n+    public String getMessage() {\n+        return message;\n+    }\n+\n+    public void setMessage(String message) {\n+        this.message = message;\n+    }\n+\n+    public Date getEndDate() {\n+        return endDate == null\n+                ? null : new Date(endDate.getTime());\n+    }\n+\n+    public void setEndDate(final Date endDate) {\n+        this.endDate = endDate == null\n+                ? null : new Date(endDate.getTime());\n+    }\n+\n+    public Date getStartDate() {\n+        return startDate == null\n+                ? null : new Date(startDate.getTime());\n+    }\n+\n+    public void setStartDate(final Date startDate) {\n+        this.startDate = startDate == null\n+                ? null : new Date(startDate.getTime());\n+    }\n+}"},{"sha":"fdbf15c6a8da6f2c6cec6ee96c6bf1994777a0ed","filename":"core/src/main/java/org/syncope/core/persistence/beans/Report.java","status":"added","additions":137,"deletions":0,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReport.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,137 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.CascadeType;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.OneToMany;\n+import org.syncope.client.report.Reportlet;\n+import org.syncope.core.persistence.validation.entity.ReportCheck;\n+import org.syncope.core.util.XMLSerializer;\n+\n+@Entity\n+@ReportCheck\n+public class Report extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -587652654964285834L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"reportlets\")\n+    private List<String> reportlets;\n+\n+    private String cronExpression;\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true,\n+    mappedBy = \"report\")\n+    private List<ReportExec> executions;\n+\n+    public Report() {\n+        super();\n+\n+        reportlets = new ArrayList<String>();\n+        executions = new ArrayList<ReportExec>();\n+    }\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public boolean addExec(ReportExec exec) {\n+        return exec != null && !executions.contains(exec)\n+                && executions.add(exec);\n+    }\n+\n+    public boolean removeExec(ReportExec exec) {\n+        return exec != null && executions.remove(exec);\n+    }\n+\n+    public List<ReportExec> getExecs() {\n+        return executions;\n+    }\n+\n+    public void setExecs(List<ReportExec> executions) {\n+        this.executions.clear();\n+        if (executions != null && !executions.isEmpty()) {\n+            this.executions.addAll(executions);\n+        }\n+    }\n+\n+    public boolean addReportlet(Reportlet reportlet) {\n+        if (reportlet == null) {\n+            return false;\n+        }\n+\n+        String xmlReportlet = XMLSerializer.serialize(reportlet);\n+        return !reportlets.contains(xmlReportlet)\n+                && reportlets.add(xmlReportlet);\n+    }\n+\n+    public boolean removeReportlet(Reportlet reportlet) {\n+        if (reportlet == null) {\n+            return false;\n+        }\n+\n+        String xmlReportlet = XMLSerializer.serialize(reportlet);\n+        return reportlets.remove(xmlReportlet);\n+    }\n+\n+    public List<Reportlet> getReportlets() {\n+        List<Reportlet> result = new ArrayList<Reportlet>(reportlets.size());\n+        for (String xmlReportlet : reportlets) {\n+            result.add(XMLSerializer.<Reportlet>deserialize(xmlReportlet));\n+        }\n+\n+        return result;\n+    }\n+\n+    public void setReportlets(List<Reportlet> reportlets) {\n+        this.reportlets.clear();\n+        if (reportlets != null && !reportlets.isEmpty()) {\n+            for (Reportlet reportlet : reportlets) {\n+                addReportlet(reportlet);\n+            }\n+        }\n+    }\n+\n+    public String getCronExpression() {\n+        return cronExpression;\n+    }\n+\n+    public void setCronExpression(String cronExpression) {\n+        this.cronExpression = cronExpression;\n+    }\n+}"},{"sha":"b86eb315aa33b7ad04ce06974fdae0298d9b00df","filename":"core/src/main/java/org/syncope/core/persistence/beans/ReportExec.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FReportExec.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.beans;\n+\n+import javax.persistence.Basic;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.GeneratedValue;\n+import javax.persistence.GenerationType;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import org.syncope.types.ReportExecStatus;\n+\n+@Entity\n+public class ReportExec extends AbstractExec {\n+\n+    private static final long serialVersionUID = -6178274296037547769L;\n+\n+    @Id\n+    @GeneratedValue(strategy = GenerationType.IDENTITY)\n+    private Long id;\n+\n+    /**\n+     * The referred report.\n+     */\n+    @ManyToOne(optional = false)\n+    private Report report;\n+\n+    /**\n+     * Report execution result, stored as an XML stream.\n+     */\n+    @Basic(fetch = FetchType.LAZY)\n+    private byte[] execResult;\n+\n+    public Long getId() {\n+        return id;\n+    }\n+\n+    public Report getReport() {\n+        return report;\n+    }\n+\n+    public void setReport(Report report) {\n+        this.report = report;\n+    }\n+\n+    public byte[] getExecResult() {\n+        return execResult;\n+    }\n+\n+    public void setExecResult(byte[] execResult) {\n+        this.execResult = execResult;\n+    }\n+\n+    public void setStatus(ReportExecStatus status) {\n+        super.setStatus(status.name());\n+    }\n+}"},{"sha":"e3bb24fe2d4de15d8a50a5ca1004500dfc0255c3","filename":"core/src/main/java/org/syncope/core/persistence/beans/TaskExec.java","status":"modified","additions":2,"deletions":61,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTaskExec.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -14,22 +14,17 @@\n  */\n package org.syncope.core.persistence.beans;\n \n-import java.util.Date;\n-import javax.persistence.Column;\n import javax.persistence.Entity;\n import javax.persistence.Id;\n-import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n-import javax.persistence.Temporal;\n-import javax.persistence.TemporalType;\n \n /**\n  * An execution (with result) of a Task.\n  *\n  * @see PropagationTask\n  */\n @Entity\n-public class TaskExec extends AbstractBaseBean {\n+public class TaskExec extends AbstractExec {\n \n     private static final long serialVersionUID = 1909033231464074554L;\n \n@@ -39,62 +34,16 @@ public class TaskExec extends AbstractBaseBean {\n     @Id\n     private Long id;\n \n-    /**\n-     * Start instant of this execution.\n-     */\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date startDate;\n-\n-    /**\n-     * End instant of this execution.\n-     */\n-    @Temporal(TemporalType.TIMESTAMP)\n-    private Date endDate;\n-\n-    /**\n-     * Any information to be accompained to this execution's result.\n-     */\n-    @Lob\n-    private String message;\n-\n     /**\n      * The referred task.\n      */\n     @ManyToOne(optional = false)\n     private Task task;\n \n-    @Column(nullable = false)\n-    private String status;\n-\n     public Long getId() {\n         return id;\n     }\n \n-    public Date getEndDate() {\n-        return endDate == null ? null : new Date(endDate.getTime());\n-    }\n-\n-    public void setEndDate(final Date endDate) {\n-        this.endDate = endDate == null ? null : new Date(endDate.getTime());\n-    }\n-\n-    public String getMessage() {\n-        return message;\n-    }\n-\n-    public void setMessage(String message) {\n-        this.message = message;\n-    }\n-\n-    public Date getStartDate() {\n-        return startDate == null ? null : new Date(startDate.getTime());\n-    }\n-\n-    public void setStartDate(final Date startDate) {\n-        this.startDate = startDate == null\n-                ? null : new Date(startDate.getTime());\n-    }\n-\n     public Task getTask() {\n         return task;\n     }\n@@ -103,18 +52,10 @@ public void setTask(Task task) {\n         this.task = task;\n     }\n \n-    public String getStatus() {\n-        return status;\n-    }\n-\n-    public void setStatus(String status) {\n-        this.status = status;\n-    }\n-\n     @Override\n     public String toString() {\n         return getClass().getSimpleName() + \"{\"\n-                + \"id=\" + getId() + \", \"\n+                + \"id=\" + id + \", \"\n                 + \"startDate=\" + startDate + \", \"\n                 + \"endDate=\" + endDate + \", \"\n                 + \"task=\" + task + \", \""},{"sha":"91a000295573d3385b779d87eaeb79a9400aec01","filename":"core/src/main/java/org/syncope/core/persistence/dao/DAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDAO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -18,7 +18,7 @@\n \n public interface DAO {\n \n-     <T extends AbstractBaseBean> T refresh(T entity);\n+     <T extends AbstractBaseBean> void refresh(T entity);\n \n     void detach(Object object);\n "},{"sha":"0cd75c890c30b5ef1d4da94f41fd94a116f058d6","filename":"core/src/main/java/org/syncope/core/persistence/dao/ReportDAO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportDAO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.Report;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+public interface ReportDAO extends DAO {\n+\n+    Report find(Long id);\n+\n+    List<Report> findAll();\n+\n+    List<Report> findAll(int page, int itemsPerPage);\n+\n+    int count();\n+\n+    Report save(Report report)\n+            throws InvalidEntityException;\n+\n+    void delete(Long id);\n+\n+    void delete(Report report);\n+}"},{"sha":"d47d35f852e022c469c61817e064fdca4b0ec8ea","filename":"core/src/main/java/org/syncope/core/persistence/dao/ReportExecDAO.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportExecDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportExecDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportExecDAO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,33 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import java.util.List;\n+import org.syncope.core.persistence.beans.ReportExec;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+public interface ReportExecDAO extends DAO {\n+\n+    ReportExec find(Long id);\n+\n+    List<ReportExec> findAll();\n+\n+    ReportExec save(ReportExec execution)\n+            throws InvalidEntityException;\n+\n+    void delete(Long id);\n+\n+    void delete(ReportExec execution);\n+}"},{"sha":"0fabcfa6bb1673fcaeb716f4e16d6439e6a3fa6c","filename":"core/src/main/java/org/syncope/core/persistence/dao/TaskDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FTaskDAO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -15,9 +15,9 @@\n package org.syncope.core.persistence.dao;\n \n import java.util.List;\n-import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.Task;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n \n@@ -39,7 +39,7 @@ <T extends Task> List<T> findAll(int page, int itemsPerPage,\n \n     List<PropagationTask> findAll(SyncopeUser user);\n \n-     <T extends Task> Integer count(Class<T> reference);\n+     <T extends Task> int count(Class<T> reference);\n \n      <T extends Task> T save(T task)\n             throws InvalidEntityException;"},{"sha":"ca095b9d73b1f014cb8a12f24a76cf735728b4d2","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserDAO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -44,7 +44,7 @@ SyncopeUser findByAttrUniqueValue(String schemaName,\n \n     List<SyncopeUser> findAll(Set<Long> adminRoles, int page, int itemsPerPage);\n \n-    Integer count(Set<Long> adminRoles);\n+    int count(Set<Long> adminRoles);\n \n     SyncopeUser save(SyncopeUser user)\n             throws InvalidEntityException;"},{"sha":"16087317aa1b22805cd6944255ca185bb60c6fde","filename":"core/src/main/java/org/syncope/core/persistence/dao/UserSearchDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchDAO.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -26,7 +26,7 @@ public interface UserSearchDAO extends DAO {\n      * @param searchCondition the search condition\n      * @return size of search result\n      */\n-    Integer count(Set<Long> adminRoles, NodeCond searchCondition);\n+    int count(Set<Long> adminRoles, NodeCond searchCondition);\n \n     /**\n      * @param searchCondition the search condition"},{"sha":"e7fbccd8cda09177817c824c6cbcace2d32350ea","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -72,9 +72,8 @@ protected void setCacheStoreMode(final CacheStoreMode storeMode) {\n     }\n \n     @Override\n-    public <T extends AbstractBaseBean> T refresh(final T entity) {\n+    public <T extends AbstractBaseBean> void refresh(final T entity) {\n         entityManager.refresh(entity);\n-        return entity;\n     }\n \n     @Override"},{"sha":"d2aa91cf0bfb7c0fbd4c5b7166cb6fbaac140a0d","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AttrDAOImpl.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAttrDAOImpl.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -32,7 +32,6 @@ public <T extends AbstractAttr> T find(final Long id,\n \n     @Override\n     public <T extends AbstractAttr> List<T> findAll(final Class<T> reference) {\n-\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n         return query.getResultList();"},{"sha":"244f8d96366223b3a8ba0b860545e991f1f82fa7","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ReportDAOImpl.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportDAOImpl.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.syncope.core.persistence.beans.Report;\n+import org.syncope.core.persistence.dao.ReportDAO;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+@Repository\n+public class ReportDAOImpl extends AbstractDAOImpl implements ReportDAO {\n+\n+    @Override\n+    public Report find(final Long id) {\n+        return entityManager.find(Report.class, id);\n+    }\n+\n+    @Override\n+    public List<Report> findAll() {\n+        return findAll(-1, -1);\n+    }\n+\n+    @Override\n+    public List<Report> findAll(final int page, final int itemsPerPage) {\n+        final Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + Report.class.getSimpleName() + \" e\");\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0 ? 0 : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public int count() {\n+        Query countQuery = entityManager.createNativeQuery(\n+                \"SELECT COUNT(id) FROM \" + Report.class.getSimpleName());\n+\n+        return ((Number) countQuery.getSingleResult()).intValue();\n+    }\n+\n+    @Override\n+    public Report save(final Report report)\n+            throws InvalidEntityException {\n+\n+        return entityManager.merge(report);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        Report report = find(id);\n+        if (report == null) {\n+            return;\n+        }\n+\n+        delete(report);\n+    }\n+\n+    @Override\n+    public void delete(final Report report) {\n+        entityManager.remove(report);\n+    }\n+}"},{"sha":"5ed18d12e3b5276dcf2e1be5fb9fcf950d7319ec","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ReportExecDAOImpl.java","status":"added","additions":74,"deletions":0,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FReportExecDAOImpl.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,74 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.dao.impl;\n+\n+import java.util.List;\n+import javax.persistence.Query;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.persistence.beans.ReportExec;\n+import org.syncope.core.persistence.dao.ReportExecDAO;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+\n+@Repository\n+public class ReportExecDAOImpl extends AbstractDAOImpl\n+        implements ReportExecDAO {\n+\n+    @Override\n+    public ReportExec find(final Long id) {\n+        return entityManager.find(ReportExec.class, id);\n+    }\n+\n+    @Override\n+    public List<ReportExec> findAll() {\n+        Query query = entityManager.createQuery(\n+                \"SELECT e FROM \" + ReportExec.class.getSimpleName() + \" e\");\n+        return query.getResultList();\n+    }\n+\n+    /**\n+     * This method is annotated as transactional because called from ReportJob.\n+     *\n+     * @see org.syncope.core.scheduling.ReportJob\n+     * @param execution to be merged\n+     * @return merged execution\n+     * @throws InvalidEntityException if any validation error occurs\n+     */\n+    @Override\n+    @Transactional(rollbackFor = Throwable.class)\n+    public ReportExec save(final ReportExec execution)\n+            throws InvalidEntityException {\n+\n+        return entityManager.merge(execution);\n+    }\n+\n+    @Override\n+    public void delete(final Long id) {\n+        ReportExec execution = find(id);\n+        if (execution == null) {\n+            return;\n+        }\n+\n+        delete(execution);\n+    }\n+\n+    @Override\n+    public void delete(final ReportExec execution) {\n+        if (execution.getReport() != null) {\n+            execution.getReport().removeExec(execution);\n+        }\n+\n+        entityManager.remove(execution);\n+    }\n+}"},{"sha":"32886ff89a3d8f0e4f5f89ad0a1b145359629c80","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/TaskDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FTaskDAOImpl.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -123,7 +123,7 @@ public List<PropagationTask> findAll(final ExternalResource resource,\n     }\n \n     @Override\n-    public <T extends Task> Integer count(final Class<T> reference) {\n+    public <T extends Task> int count(final Class<T> reference) {\n         Query countQuery = entityManager.createNativeQuery(\n                 \"SELECT COUNT(id) FROM Task WHERE DTYPE=?1\");\n         countQuery.setParameter(1, reference.getSimpleName());"},{"sha":"5afccf0f6646d09ce67869a25c9b26e5ad6fb5e4","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -336,7 +336,7 @@ public final List<SyncopeUser> findAll(final Set<Long> adminRoles,\n     }\n \n     @Override\n-    public final Integer count(final Set<Long> adminRoles) {\n+    public final int count(final Set<Long> adminRoles) {\n         StringBuilder queryString = getFindAllQuery(adminRoles);\n         queryString.insert(0, \"SELECT COUNT(id) FROM (\");\n         queryString.append(\") count_user_id\");"},{"sha":"d3e7c509db26226f7ed4f8996c5f2b2adc7bb886","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserSearchDAOImpl.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserSearchDAOImpl.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -95,7 +95,7 @@ private String getAdminRolesFilter(final Set<Long> adminRoles) {\n     }\n \n     @Override\n-    public Integer count(final Set<Long> adminRoles,\n+    public int count(final Set<Long> adminRoles,\n             final NodeCond searchCondition) {\n \n         List<Object> parameters = Collections.synchronizedList(\n@@ -120,7 +120,7 @@ public Integer count(final Set<Long> adminRoles,\n         LOG.debug(\"Native count query\\n{}\\nwith parameters\\n{}\",\n                 queryString.toString(), parameters);\n \n-        Integer result = ((Number) countQuery.getSingleResult()).intValue();\n+        int result = ((Number) countQuery.getSingleResult()).intValue();\n         LOG.debug(\"Native count query result: {}\", result);\n \n         return result;"},{"sha":"9c2c3b0c23b486587dffbec7bcc88557dd98af5b","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/ReportCheck.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportCheck.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,37 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.lang.annotation.Documented;\n+import java.lang.annotation.ElementType;\n+import java.lang.annotation.Retention;\n+import java.lang.annotation.RetentionPolicy;\n+import java.lang.annotation.Target;\n+import javax.validation.Constraint;\n+import javax.validation.Payload;\n+\n+@Target({\n+    ElementType.TYPE\n+})\n+@Retention(RetentionPolicy.RUNTIME)\n+@Constraint(validatedBy = ReportValidator.class)\n+@Documented\n+public @interface ReportCheck {\n+\n+    String message() default \"{org.syncope.core.validation.report}\";\n+\n+    Class<?>[] groups() default {};\n+\n+    Class<? extends Payload>[] payload() default {};\n+}"},{"sha":"f1a416287d1e9035700bb690fe5354fde34f9fac","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/ReportValidator.java","status":"added","additions":55,"deletions":0,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FReportValidator.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,55 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.validation.entity;\n+\n+import java.text.ParseException;\n+import javax.validation.ConstraintValidator;\n+import javax.validation.ConstraintValidatorContext;\n+import org.quartz.CronExpression;\n+import org.syncope.core.persistence.beans.Report;\n+import org.syncope.types.EntityViolationType;\n+\n+public class ReportValidator extends AbstractValidator\n+        implements ConstraintValidator<ReportCheck, Report> {\n+\n+    @Override\n+    public void initialize(final ReportCheck constraintAnnotation) {\n+    }\n+\n+    @Override\n+    public boolean isValid(final Report object,\n+            final ConstraintValidatorContext context) {\n+\n+        boolean isValid = true;\n+\n+        if (object.getCronExpression() != null) {\n+            try {\n+                new CronExpression(object.getCronExpression());\n+            } catch (ParseException e) {\n+                LOG.error(\"Invalid cron expression '\"\n+                        + object.getCronExpression() + \"'\", e);\n+                isValid = false;\n+\n+                context.disableDefaultConstraintViolation();\n+                context.buildConstraintViolationWithTemplate(\n+                        EntityViolationType.InvalidReport.name()).\n+                        addNode(object + \".cronExpression==\"\n+                        + object.getCronExpression()).addConstraintViolation();\n+            }\n+        }\n+\n+        return isValid;\n+    }\n+}"},{"sha":"0f723b545daf017712f03eea69c4d79e7d1fc75e","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SchedTaskValidator.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchedTaskValidator.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -19,7 +19,7 @@\n import javax.validation.ConstraintValidatorContext;\n import org.quartz.CronExpression;\n import org.syncope.core.persistence.beans.SchedTask;\n-import org.syncope.core.scheduling.AbstractJob;\n+import org.syncope.core.scheduling.AbstractTaskJob;\n import org.syncope.types.EntityViolationType;\n \n public class SchedTaskValidator extends AbstractValidator\n@@ -38,7 +38,7 @@ public boolean isValid(final SchedTask object,\n         Class jobClass = null;\n         try {\n             jobClass = Class.forName(object.getJobClassName());\n-            isValid = AbstractJob.class.isAssignableFrom(jobClass);\n+            isValid = AbstractTaskJob.class.isAssignableFrom(jobClass);\n         } catch (Throwable t) {\n             LOG.error(\"Invalid Job class specified\", t);\n             isValid = false;"},{"sha":"c73a50aa660b8dc318c863fa5dffead1ad287fff","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -28,6 +28,7 @@\n import org.springframework.core.io.support.ResourcePatternResolver;\n import org.springframework.core.type.ClassMetadata;\n import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.http.MediaType;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.transaction.annotation.Transactional;\n@@ -226,17 +227,16 @@ public ModelAndView getMailTemplates() {\n     value = \"/dbexport\")\n     @Transactional(readOnly = true)\n     public void dbExport(final HttpServletResponse response) {\n+        response.setContentType(MediaType.TEXT_XML_VALUE);\n+        response.setHeader(\"Content-Disposition\",\n+                \"attachment; filename=content.xml\");\n+\n         try {\n             importExport.export(response.getOutputStream());\n-            response.flushBuffer();\n \n             LOG.debug(\"Default content successfully exported\");\n         } catch (Throwable t) {\n             LOG.error(\"While exporting content\", t);\n         }\n-\n-        response.setContentType(\"application/xml;charset=UTF-8\");\n-        response.setHeader(\"Content-Disposition\",\n-                \"attachment; filename=content.xml\");\n     }\n }"},{"sha":"911ca79aec7cc0465c71fc667198a73f42b4b7ce","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnInstanceController.java","status":"modified","additions":67,"deletions":70,"changes":137,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnInstanceController.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -20,7 +20,6 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.apache.commons.lang.StringUtils;\n-import org.apache.openjpa.lib.log.Log;\n import org.identityconnectors.common.l10n.CurrentLocale;\n import org.identityconnectors.framework.api.ConfigurationProperties;\n import org.identityconnectors.framework.api.ConfigurationProperty;\n@@ -56,215 +55,215 @@\n @Controller\n @RequestMapping(\"/connector\")\n public class ConnInstanceController extends AbstractController {\n-    \n+\n     @Autowired\n     private ConnInstanceDAO connInstanceDAO;\n-    \n+\n     @Autowired\n     private ConnInstanceDataBinder binder;\n-    \n+\n     @Autowired\n     private ConnBundleManager bundleManager;\n-    \n+\n     @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public ConnInstanceTO create(final HttpServletResponse response,\n             @RequestBody final ConnInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n-        \n+\n         LOG.debug(\"ConnInstance create called with configuration {}\",\n                 connectorTO);\n-        \n+\n         ConnInstance connInstance = binder.getConnInstance(connectorTO);\n-        \n+\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n         } catch (Throwable t) {\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(\n                     HttpStatus.BAD_REQUEST);\n-            \n+\n             SyncopeClientException invalidConnInstance =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidConnInstance);\n             invalidConnInstance.addElement(t.getMessage());\n-            \n+\n             scce.addException(invalidConnInstance);\n             throw scce;\n         }\n-        \n+\n         response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getConnInstanceTO(connInstance);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public ConnInstanceTO update(\n             @RequestBody final ConnInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException {\n-        \n+\n         LOG.debug(\"Connector update called with configuration {}\", connectorTO);\n-        \n+\n         ConnInstance connInstance = binder.updateConnInstance(\n                 connectorTO.getId(), connectorTO);\n-        \n+\n         try {\n             connInstance = connInstanceDAO.save(connInstance);\n         } catch (RuntimeException e) {\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(\n                     HttpStatus.BAD_REQUEST);\n-            \n+\n             SyncopeClientException invalidConnInstance =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.InvalidConnInstance);\n             invalidConnInstance.addElement(e.getMessage());\n-            \n+\n             scce.addException(invalidConnInstance);\n             throw scce;\n         }\n-        \n+\n         return binder.getConnInstanceTO(connInstance);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{connectorId}\")\n     public void delete(@PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n-        \n+\n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n         if (connInstance == null) {\n             LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n-            \n+\n             throw new NotFoundException(String.valueOf(connectorId));\n         }\n-        \n+\n         if (!connInstance.getResources().isEmpty()) {\n             SyncopeClientCompositeErrorException scce =\n                     new SyncopeClientCompositeErrorException(\n                     HttpStatus.BAD_REQUEST);\n-            \n+\n             SyncopeClientException invalidConnInstance =\n                     new SyncopeClientException(\n                     SyncopeClientExceptionType.ResourceExist);\n             for (ExternalResource resource : connInstance.getResources()) {\n                 invalidConnInstance.addElement(resource.getName());\n             }\n-            \n+\n             scce.addException(invalidConnInstance);\n             throw scce;\n         }\n-        \n+\n         connInstanceDAO.delete(connectorId);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     @Transactional(readOnly = true)\n     public List<ConnInstanceTO> list(\n             @RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException {\n-        \n+\n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n             CurrentLocale.set(new Locale(lang));\n         }\n-        \n+\n         List<ConnInstance> connInstances = connInstanceDAO.findAll();\n-        \n+\n         List<ConnInstanceTO> connInstanceTOs =\n                 new ArrayList<ConnInstanceTO>();\n         for (ConnInstance connector : connInstances) {\n             connInstanceTOs.add(binder.getConnInstanceTO(connector));\n         }\n-        \n+\n         return connInstanceTOs;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{connectorId}\")\n     @Transactional(readOnly = true)\n     public ConnInstanceTO read(\n             @PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n-        \n+\n         ConnInstance connInstance = connInstanceDAO.find(connectorId);\n-        \n+\n         if (connInstance == null) {\n             LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n-            \n+\n             throw new NotFoundException(String.valueOf(connectorId));\n         }\n-        \n+\n         return binder.getConnInstanceTO(connInstance);\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/bundle/list\")\n     @Transactional(readOnly = true)\n     public List<ConnBundleTO> getBundles(\n             @RequestParam(value = \"lang\", required = false) final String lang)\n             throws NotFoundException, MissingConfKeyException {\n-        \n+\n         if (StringUtils.isBlank(lang)) {\n             CurrentLocale.set(Locale.ENGLISH);\n         } else {\n             CurrentLocale.set(new Locale(lang));\n         }\n-        \n+\n         ConnectorInfoManager manager =\n                 bundleManager.getConnectorManager();\n-        \n+\n         List<ConnectorInfo> bundles = manager.getConnectorInfos();\n-        \n+\n         if (LOG.isDebugEnabled() && bundles != null) {\n             LOG.debug(\"#Bundles: {}\", bundles.size());\n-            \n+\n             for (ConnectorInfo bundle : bundles) {\n                 LOG.debug(\"Bundle: {}\", bundle.getConnectorDisplayName());\n             }\n         }\n-        \n+\n         ConnBundleTO connectorBundleTO;\n         ConnectorKey key;\n         ConfigurationProperties properties;\n-        \n+\n         List<ConnBundleTO> connectorBundleTOs = new ArrayList<ConnBundleTO>();\n         if (bundles != null) {\n             for (ConnectorInfo bundle : bundles) {\n                 connectorBundleTO = new ConnBundleTO();\n                 connectorBundleTO.setDisplayName(\n                         bundle.getConnectorDisplayName());\n-                \n+\n                 key = bundle.getConnectorKey();\n-                \n+\n                 LOG.debug(\"\\nBundle name: {}\"\n                         + \"\\nBundle version: {}\"\n                         + \"\\nBundle class: {}\",\n                         new Object[]{\n                             key.getBundleName(),\n                             key.getBundleVersion(),\n                             key.getConnectorName()});\n-                \n+\n                 connectorBundleTO.setBundleName(key.getBundleName());\n                 connectorBundleTO.setConnectorName(key.getConnectorName());\n                 connectorBundleTO.setVersion(key.getBundleVersion());\n-                \n+\n                 properties = bundleManager.getConfigurationProperties(bundle);\n-                \n+\n                 ConnConfPropSchema connConfPropSchema;\n                 ConfigurationProperty configurationProperty;\n-                \n+\n                 for (String propName : properties.getPropertyNames()) {\n                     connConfPropSchema = new ConnConfPropSchema();\n-                    \n+\n                     configurationProperty = properties.getProperty(propName);\n \n                     // set name\n@@ -286,57 +285,55 @@ public List<ConnBundleTO> getBundles(\n                     // set type\n                     connConfPropSchema.setType(\n                             configurationProperty.getType().getName());\n-                    \n+\n                     connectorBundleTO.addProperty(connConfPropSchema);\n                 }\n-                \n+\n                 LOG.debug(\"Bundle properties: {}\",\n                         connectorBundleTO.getProperties());\n-                \n+\n                 connectorBundleTOs.add(connectorBundleTO);\n             }\n         }\n-        \n+\n         return connectorBundleTOs;\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{connectorId}/configurationProperty/list\")\n     @Transactional(readOnly = true)\n     public List<ConnConfProperty> getConfigurationProperties(\n             @PathVariable(\"connectorId\") final Long connectorId)\n             throws NotFoundException {\n-        \n+\n         final ConnInstance connector = connInstanceDAO.find(connectorId);\n         if (connector == null) {\n             throw new NotFoundException(String.format(\n                     \"Connector instance with id %d not found\", connectorId));\n         }\n         return new ArrayList<ConnConfProperty>(connector.getConfiguration());\n     }\n-    \n+\n     @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/check\")\n     @Transactional(readOnly = true)\n     public ModelAndView check(final HttpServletResponse response,\n-            @RequestBody final ConnInstanceTO connectorTO)\n-            throws SyncopeClientCompositeErrorException, NotFoundException {\n-        \n-        Boolean status = false;\n-        ConnectorFacadeProxy connector =\n-                new ConnectorFacadeProxy(\n-                binder.getConnInstance(connectorTO), bundleManager);\n-        \n+            @RequestBody final ConnInstanceTO connInstanceTO)\n+            throws NotFoundException {\n+\n+        Boolean status = Boolean.FALSE;\n+        ConnectorFacadeProxy connector = new ConnectorFacadeProxy(\n+                binder.getConnInstance(connInstanceTO), bundleManager);\n+\n         try {\n             connector.test();\n-            status = true;\n-        } catch (Exception ex) {\n-            LOG.error(\"Test connection failure {}\", ex);\n-            return new ModelAndView().addObject(false);\n+            status = Boolean.TRUE;\n+        } catch (Exception e) {\n+            LOG.error(\"Test connection failure {} {}\", connInstanceTO, e);\n         }\n-        \n+\n         return new ModelAndView().addObject(status);\n     }\n }"},{"sha":"37000ebc305f6d406dd1b58b5fadaa65bea94694","filename":"core/src/main/java/org/syncope/core/rest/controller/ReportController.java","status":"added","additions":394,"deletions":0,"changes":394,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FReportController.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,394 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.io.ByteArrayInputStream;\n+import java.io.IOException;\n+import java.lang.reflect.Modifier;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import java.util.zip.ZipInputStream;\n+import javassist.NotFoundException;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.cocoon.sax.builder.SAXPipelineBuilder;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.quartz.JobDataMap;\n+import org.quartz.Scheduler;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.core.io.Resource;\n+import org.springframework.core.io.support.ResourcePatternResolver;\n+import org.springframework.core.type.ClassMetadata;\n+import org.springframework.core.type.classreading.CachingMetadataReaderFactory;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.MediaType;\n+import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.springframework.web.bind.annotation.RequestParam;\n+import org.springframework.web.servlet.ModelAndView;\n+import org.syncope.client.report.AbstractReportlet;\n+import org.syncope.client.report.Reportlet;\n+import org.syncope.client.to.ReportExecTO;\n+import org.syncope.client.to.ReportTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.init.JobInstanceLoader;\n+import org.syncope.core.persistence.beans.Report;\n+import org.syncope.core.persistence.beans.ReportExec;\n+import org.syncope.core.persistence.dao.ReportDAO;\n+import org.syncope.core.persistence.dao.ReportExecDAO;\n+import org.syncope.core.rest.data.ReportDataBinder;\n+import org.syncope.types.ReportExecExportFormat;\n+import org.syncope.types.ReportExecStatus;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+@Controller\n+@RequestMapping(\"/report\")\n+public class ReportController extends AbstractController {\n+\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    @Autowired\n+    private ReportExecDAO reportExecDAO;\n+\n+    @Autowired\n+    private JobInstanceLoader jobInstanceLoader;\n+\n+    @Autowired\n+    private SchedulerFactoryBean scheduler;\n+\n+    @Autowired\n+    private ReportDataBinder binder;\n+\n+    @Autowired\n+    private ResourcePatternResolver resResolver;\n+\n+    @PreAuthorize(\"hasRole('REPORT_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create\")\n+    public ReportTO create(final HttpServletResponse response,\n+            @RequestBody final ReportTO reportTO) {\n+\n+        LOG.debug(\"Creating report \" + reportTO);\n+\n+        Report report = new Report();\n+        binder.getReport(report, reportTO);\n+        report = reportDAO.save(report);\n+\n+        try {\n+            jobInstanceLoader.registerJob(report);\n+        } catch (Exception e) {\n+            LOG.error(\"While registering quartz job for report \"\n+                    + report.getId(), e);\n+\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.Scheduling);\n+            sce.addElement(e.getMessage());\n+            scce.addException(sce);\n+            throw scce;\n+        }\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return binder.getReportTO(report);\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/update\")\n+    public ReportTO update(@RequestBody final ReportTO reportTO)\n+            throws NotFoundException {\n+\n+        LOG.debug(\"Report update called with parameter {}\", reportTO);\n+\n+        Report report = reportDAO.find(reportTO.getId());\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportTO.getId());\n+        }\n+\n+        binder.getReport(report, reportTO);\n+        report = reportDAO.save(report);\n+\n+        try {\n+            jobInstanceLoader.registerJob(report);\n+        } catch (Exception e) {\n+            LOG.error(\"While registering quartz job for report \"\n+                    + report.getId(), e);\n+\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.Scheduling);\n+            sce.addElement(e.getMessage());\n+            scce.addException(sce);\n+            throw scce;\n+        }\n+\n+        return binder.getReportTO(report);\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/count\")\n+    public ModelAndView count() {\n+        return new ModelAndView().addObject(reportDAO.count());\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    public List<ReportTO> list() {\n+        List<Report> reports = reportDAO.findAll();\n+        List<ReportTO> result = new ArrayList<ReportTO>(reports.size());\n+        for (Report report : reports) {\n+            result.add(binder.getReportTO(report));\n+        }\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list/{page}/{size}\")\n+    public List<ReportTO> list(@PathVariable(\"page\") final int page,\n+            @PathVariable(\"size\") final int size) {\n+\n+        List<Report> reports = reportDAO.findAll(page, size);\n+        List<ReportTO> result = new ArrayList<ReportTO>(reports.size());\n+        for (Report report : reports) {\n+            result.add(binder.getReportTO(report));\n+        }\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/execution/list\")\n+    public List<ReportExecTO> listExecutions() {\n+        List<ReportExec> executions = reportExecDAO.findAll();\n+        List<ReportExecTO> executionTOs =\n+                new ArrayList<ReportExecTO>(executions.size());\n+        for (ReportExec execution : executions) {\n+            executionTOs.add(binder.getReportExecTO(execution));\n+        }\n+\n+        return executionTOs;\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/reportletClasses\")\n+    public ModelAndView getReportletClasses() {\n+        CachingMetadataReaderFactory cachingMetadataReaderFactory =\n+                new CachingMetadataReaderFactory();\n+\n+        Set<String> reportletClasses = new HashSet<String>();\n+        try {\n+            for (Resource resource : resResolver.getResources(\n+                    \"classpath*:**/*.class\")) {\n+\n+                ClassMetadata metadata =\n+                        cachingMetadataReaderFactory.getMetadataReader(\n+                        resource).getClassMetadata();\n+                if (ArrayUtils.contains(metadata.getInterfaceNames(),\n+                        Reportlet.class.getName())\n+                        || AbstractReportlet.class.getName().equals(\n+                        metadata.getSuperClassName())) {\n+\n+                    try {\n+                        Class jobClass = Class.forName(metadata.getClassName());\n+                        if (!Modifier.isAbstract(jobClass.getModifiers())) {\n+\n+                            reportletClasses.add(jobClass.getName());\n+                        }\n+                    } catch (ClassNotFoundException e) {\n+                        LOG.error(\"Could not load class {}\",\n+                                metadata.getClassName(), e);\n+                    }\n+                }\n+            }\n+        } catch (IOException e) {\n+            LOG.error(\"While searching for class implementing {}\",\n+                    Reportlet.class.getName(), e);\n+        }\n+\n+        ModelAndView result = new ModelAndView();\n+        result.addObject(reportletClasses);\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{reportId}\")\n+    public ReportTO read(@PathVariable(\"reportId\") final Long reportId)\n+            throws NotFoundException {\n+\n+        Report report = reportDAO.find(reportId);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportId);\n+        }\n+\n+        return binder.getReportTO(report);\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/execution/read/{executionId}\")\n+    @Transactional(readOnly = true)\n+    public ReportExecTO readExecution(\n+            @PathVariable(\"executionId\") final Long executionId)\n+            throws NotFoundException {\n+\n+        ReportExec execution = reportExecDAO.find(executionId);\n+        if (execution == null) {\n+            throw new NotFoundException(\"Report execution \" + executionId);\n+        }\n+\n+        return binder.getReportExecTO(execution);\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_READ')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/execution/export/{executionId}\")\n+    @Transactional(readOnly = true)\n+    public void exportExecutionResult(\n+            final HttpServletResponse response,\n+            @PathVariable(\"executionId\") final Long executionId,\n+            @RequestParam(value = \"fmt\",\n+            required = false) final ReportExecExportFormat fmt)\n+            throws NotFoundException {\n+\n+        ReportExec reportExec = reportExecDAO.find(executionId);\n+        if (reportExec == null) {\n+            throw new NotFoundException(\"Report execution \" + executionId);\n+        }\n+\n+        ReportExecExportFormat format =\n+                fmt == null ? ReportExecExportFormat.XML : fmt;\n+\n+        response.setContentType(MediaType.APPLICATION_OCTET_STREAM_VALUE);\n+        response.addHeader(\"Content-Disposition\",\n+                \"attachment; filename=\" + reportExec.getReport().getName()\n+                + \".\" + format.name().toLowerCase());\n+\n+        // streaming SAX handler from a compressed byte array stream\n+        ByteArrayInputStream bais =\n+                new ByteArrayInputStream(reportExec.getExecResult());\n+        ZipInputStream zis = new ZipInputStream(bais);\n+        try {\n+            // a single ZipEntry in the ZipInputStream (see ReportJob)\n+            zis.getNextEntry();\n+\n+            SAXPipelineBuilder.newNonCachingPipeline().\n+                    setInputStreamGenerator(zis).\n+                    addSerializer().withEmptyConfiguration().\n+                    setup(response.getOutputStream()).\n+                    execute();\n+\n+            LOG.debug(\"Default content successfully exported\");\n+        } catch (Throwable t) {\n+            LOG.error(\"While exporting content\", t);\n+        } finally {\n+            try {\n+                zis.close();\n+                bais.close();\n+            } catch (IOException e) {\n+                LOG.error(\"While closing stream for execution result\", e);\n+            }\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_EXECUTE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/execute/{reportId}\")\n+    public ReportExecTO execute(@PathVariable(\"reportId\") final Long reportId)\n+            throws NotFoundException {\n+\n+        Report report = reportDAO.find(reportId);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportId);\n+        }\n+\n+        try {\n+            jobInstanceLoader.registerJob(report);\n+\n+            JobDataMap map = new JobDataMap();\n+            scheduler.getScheduler().triggerJob(\n+                    JobInstanceLoader.getJobName(report),\n+                    Scheduler.DEFAULT_GROUP, map);\n+        } catch (Exception e) {\n+            LOG.error(\"While executing report {}\", report, e);\n+\n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.Scheduling);\n+            sce.addElement(e.getMessage());\n+            scce.addException(sce);\n+            throw scce;\n+        }\n+\n+        ReportExecTO result = new ReportExecTO();\n+        result.setReport(reportId);\n+        result.setStartDate(new Date());\n+        result.setStatus(ReportExecStatus.STARTED);\n+        result.setMessage(\"Job fired; waiting for results...\");\n+\n+        return result;\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{reportId}\")\n+    public void delete(@PathVariable(\"reportId\") Long reportId)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        Report report = reportDAO.find(reportId);\n+        if (report == null) {\n+            throw new NotFoundException(\"Report \" + reportId);\n+        }\n+\n+        jobInstanceLoader.unregisterJob(report);\n+\n+        reportDAO.delete(report);\n+    }\n+\n+    @PreAuthorize(\"hasRole('REPORT_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/execution/delete/{executionId}\")\n+    public void deleteExecution(@PathVariable(\"executionId\") Long executionId)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        ReportExec execution = reportExecDAO.find(executionId);\n+        if (execution == null) {\n+            throw new NotFoundException(\"Report execution \" + executionId);\n+        }\n+\n+        reportExecDAO.delete(execution);\n+    }\n+}"},{"sha":"53633c3018bf1c0da098ca79b4dbe7e13a185c2f","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -60,8 +60,9 @@\n import org.syncope.core.persistence.dao.TaskExecDAO;\n import org.syncope.core.propagation.PropagationManager;\n import org.syncope.core.rest.data.TaskDataBinder;\n-import org.syncope.core.scheduling.AbstractJob;\n+import org.syncope.core.scheduling.AbstractTaskJob;\n import org.syncope.core.scheduling.NotificationJob;\n+import org.syncope.core.scheduling.ReportJob;\n import org.syncope.core.scheduling.SyncJob;\n import org.syncope.core.scheduling.SyncJobActions;\n import org.syncope.core.util.TaskUtil;\n@@ -117,22 +118,21 @@ public TaskTO createSchedTask(\n \n         LOG.debug(\"Creating task \" + taskTO);\n \n-        SyncopeClientCompositeErrorException scce =\n-                new SyncopeClientCompositeErrorException(\n-                HttpStatus.BAD_REQUEST);\n-\n         TaskUtil taskUtil = getTaskUtil(taskTO);\n \n         SchedTask task = binder.createSchedTask(taskTO, taskUtil);\n         task = taskDAO.save(task);\n \n         try {\n-            jobInstanceLoader.registerJob(task.getId(), task.getJobClassName(),\n+            jobInstanceLoader.registerJob(task, task.getJobClassName(),\n                     task.getCronExpression());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \"\n                     + task.getId(), e);\n \n+            SyncopeClientCompositeErrorException scce =\n+                    new SyncopeClientCompositeErrorException(\n+                    HttpStatus.BAD_REQUEST);\n             SyncopeClientException sce = new SyncopeClientException(\n                     SyncopeClientExceptionType.Scheduling);\n             sce.addElement(e.getMessage());\n@@ -177,7 +177,7 @@ public TaskTO updateSched(@RequestBody final SchedTaskTO taskTO)\n         task = taskDAO.save(task);\n \n         try {\n-            jobInstanceLoader.registerJob(task.getId(), task.getJobClassName(),\n+            jobInstanceLoader.registerJob(task, task.getJobClassName(),\n                     task.getCronExpression());\n         } catch (Exception e) {\n             LOG.error(\"While registering quartz job for task \"\n@@ -235,7 +235,7 @@ public List<TaskTO> list(\n         return taskTOs;\n     }\n \n-    @PreAuthorize(\"hasRole('TASK_READ')\")\n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{kind}/execution/list\")\n     public List<TaskExecTO> listExecutions(\n@@ -246,7 +246,7 @@ public List<TaskExecTO> listExecutions(\n         List<TaskExecTO> executionTOs =\n                 new ArrayList<TaskExecTO>(executions.size());\n         for (TaskExec execution : executions) {\n-            executionTOs.add(binder.getTaskExecutionTO(execution));\n+            executionTOs.add(binder.getTaskExecTO(execution));\n         }\n \n         return executionTOs;\n@@ -269,7 +269,7 @@ public ModelAndView getJobClasses() {\n                         resource).getClassMetadata();\n                 if (ArrayUtils.contains(metadata.getInterfaceNames(),\n                         Job.class.getName())\n-                        || AbstractJob.class.getName().equals(\n+                        || AbstractTaskJob.class.getName().equals(\n                         metadata.getSuperClassName())\n                         || ArrayUtils.contains(metadata.getInterfaceNames(),\n                         StatefulJob.class.getName())) {\n@@ -279,6 +279,7 @@ public ModelAndView getJobClasses() {\n                         if (!Modifier.isAbstract(jobClass.getModifiers())\n                                 && !metadata.hasEnclosingClass()\n                                 && !jobClass.equals(SyncJob.class)\n+                                && !jobClass.equals(ReportJob.class)\n                                 && !jobClass.equals(NotificationJob.class)) {\n \n                             jobClasses.add(jobClass.getName());\n@@ -364,7 +365,7 @@ public TaskExecTO readExecution(\n             throw new NotFoundException(\"Task execution \" + executionId);\n         }\n \n-        return binder.getTaskExecutionTO(execution);\n+        return binder.getTaskExecTO(execution);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n@@ -385,26 +386,26 @@ public TaskExecTO execute(@PathVariable(\"taskId\") final Long taskId,\n             case PROPAGATION:\n                 final TaskExec propExec = propagationManager.execute(\n                         (PropagationTask) task);\n-                result = binder.getTaskExecutionTO(propExec);\n+                result = binder.getTaskExecTO(propExec);\n                 break;\n \n             case NOTIFICATION:\n                 final TaskExec notExec = notificationManager.execute(\n                         (NotificationTask) task);\n-                result = binder.getTaskExecutionTO(notExec);\n+                result = binder.getTaskExecTO(notExec);\n                 break;\n \n             case SCHED:\n             case SYNC:\n                 try {\n-                    jobInstanceLoader.registerJob(task.getId(),\n+                    jobInstanceLoader.registerJob(task,\n                             ((SchedTask) task).getJobClassName(),\n                             ((SchedTask) task).getCronExpression());\n \n                     JobDataMap map = new JobDataMap();\n-                    map.put(AbstractJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n+                    map.put(AbstractTaskJob.DRY_RUN_JOBDETAIL_KEY, dryRun);\n                     scheduler.getScheduler().triggerJob(\n-                            JobInstanceLoader.getJobName(task.getId()),\n+                            JobInstanceLoader.getJobName(task),\n                             Scheduler.DEFAULT_GROUP, map);\n                 } catch (Exception e) {\n                     LOG.error(\"While executing task {}\", task, e);\n@@ -490,7 +491,7 @@ public TaskExecTO report(\n         exec.setMessage(message);\n         exec = taskExecDAO.save(exec);\n \n-        return binder.getTaskExecutionTO(exec);\n+        return binder.getTaskExecTO(exec);\n     }\n \n     @PreAuthorize(\"hasRole('TASK_DELETE')\")\n@@ -507,7 +508,7 @@ public void delete(@PathVariable(\"taskId\") Long taskId)\n         if (TaskUtil.SCHED == getTaskUtil(task)\n                 || TaskUtil.SYNC == getTaskUtil(task)) {\n \n-            jobInstanceLoader.unregisterJob(taskId);\n+            jobInstanceLoader.unregisterJob(task);\n         }\n \n         taskDAO.delete(task);"},{"sha":"c9ade0ac85c6e1d83c7f323e7febfc6ac42b5edc","filename":"core/src/main/java/org/syncope/core/rest/data/ReportDataBinder.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FReportDataBinder.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.report.Reportlet;\n+import org.syncope.client.to.ReportExecTO;\n+import org.syncope.client.to.ReportTO;\n+import org.syncope.core.persistence.beans.Report;\n+import org.syncope.core.persistence.beans.ReportExec;\n+\n+@Component\n+public class ReportDataBinder {\n+\n+    private static final String[] IGNORE_REPORT_PROPERTIES = {\n+        \"id\", \"reportlets\", \"executions\"};\n+\n+    private static final String[] IGNORE_REPORT_EXECUTION_PROPERTIES = {\n+        \"id\", \"report\", \"execResult\"};\n+\n+    public void getReport(final Report report, final ReportTO reportTO) {\n+        BeanUtils.copyProperties(reportTO, report,\n+                IGNORE_REPORT_PROPERTIES);\n+        report.getReportlets().clear();\n+        for (Reportlet reportlet : reportTO.getReportlets()) {\n+            report.addReportlet(reportlet);\n+        }\n+    }\n+\n+    public ReportTO getReportTO(final Report report) {\n+        ReportTO reportTO = new ReportTO();\n+        reportTO.setId(report.getId());\n+        BeanUtils.copyProperties(report, reportTO,\n+                IGNORE_REPORT_PROPERTIES);\n+\n+        reportTO.setReportlets(report.getReportlets());\n+\n+        for (ReportExec reportExec : report.getExecs()) {\n+            reportTO.addExec(getReportExecTO(reportExec));\n+        }\n+\n+        return reportTO;\n+    }\n+\n+    public ReportExecTO getReportExecTO(final ReportExec execution) {\n+        ReportExecTO executionTO = new ReportExecTO();\n+        executionTO.setId(execution.getId());\n+        BeanUtils.copyProperties(execution, executionTO,\n+                IGNORE_REPORT_EXECUTION_PROPERTIES);\n+        if (execution.getId() != null) {\n+            executionTO.setId(execution.getId());\n+        }\n+        executionTO.setReport(execution.getReport().getId());\n+\n+        return executionTO;\n+    }\n+}"},{"sha":"de823f07528cee8ec74e2479cc6f1f6827dee4cb","filename":"core/src/main/java/org/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":10,"deletions":9,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -183,7 +183,7 @@ public void updateSchedTask(final SchedTask task, final SchedTaskTO taskTO,\n         }\n     }\n \n-    public TaskExecTO getTaskExecutionTO(final TaskExec execution) {\n+    public TaskExecTO getTaskExecTO(final TaskExec execution) {\n         TaskExecTO executionTO = new TaskExecTO();\n         BeanUtils.copyProperties(execution, executionTO,\n                 IGNORE_TASK_EXECUTION_PROPERTIES);\n@@ -195,15 +195,16 @@ public TaskExecTO getTaskExecutionTO(final TaskExec execution) {\n         return executionTO;\n     }\n \n-    private void setExecTime(final SchedTaskTO taskTO) {\n+    private void setExecTime(final SchedTaskTO taskTO, final Task task) {\n+        String triggerName = JobInstanceLoader.getTriggerName(\n+                JobInstanceLoader.getJobName(task));\n+\n         Trigger trigger;\n         try {\n-            trigger = scheduler.getScheduler().getTrigger(\n-                    JobInstanceLoader.getTriggerName(taskTO.getId()),\n+            trigger = scheduler.getScheduler().getTrigger(triggerName,\n                     Scheduler.DEFAULT_GROUP);\n         } catch (SchedulerException e) {\n-            LOG.warn(\"While trying to get to \" + JobInstanceLoader.\n-                    getTriggerName(taskTO.getId()), e);\n+            LOG.warn(\"While trying to get to \" + triggerName, e);\n             trigger = null;\n         }\n \n@@ -223,7 +224,7 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n \n         List<TaskExec> executions = task.getExecs();\n         for (TaskExec execution : executions) {\n-            taskTO.addExecution(getTaskExecutionTO(execution));\n+            taskTO.addExecution(getTaskExecTO(execution));\n         }\n \n         switch (taskUtil) {\n@@ -237,11 +238,11 @@ public TaskTO getTaskTO(final Task task, final TaskUtil taskUtil) {\n                 break;\n \n             case SCHED:\n-                setExecTime((SchedTaskTO) taskTO);\n+                setExecTime((SchedTaskTO) taskTO, task);\n                 break;\n \n             case SYNC:\n-                setExecTime((SchedTaskTO) taskTO);\n+                setExecTime((SchedTaskTO) taskTO, task);\n \n                 ((SyncTaskTO) taskTO).setResource(\n                         ((SyncTask) task).getResource().getName());"},{"sha":"6ceeec4663fe94cba188c036b4cac1436d76a396","filename":"core/src/main/java/org/syncope/core/rest/data/UnwrappedObjectMapper.java","status":"renamed","additions":13,"deletions":13,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUnwrappedObjectMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUnwrappedObjectMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUnwrappedObjectMapper.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -12,7 +12,7 @@\n  *  limitations under the License.\n  *  under the License.\n  */\n-package org.syncope.core.rest.jackson;\n+package org.syncope.core.rest.data;\n \n import java.io.File;\n import java.io.IOException;\n@@ -26,19 +26,19 @@\n import org.codehaus.jackson.map.SerializationConfig;\n \n /**\n- * TODO: there should be a simpler way to achieve this!\n+ * Jackson ObjectMapper that unwraps singleton map values and enable default\n+ * typing for handling abstract types serialization.\n  */\n public class UnwrappedObjectMapper extends ObjectMapper {\n \n     /**\n      * Unwraps the given value if it implements the Map interface and contains\n      * only a single entry. Otherwise the value is returned unmodified.\n      *\n-     * @param value\n-     *          the potential Map to unwrap\n+     * @param value the potential Map to unwrap\n      * @return the unwrapped map or the original value\n      */\n-    private Object unwrapMap(Object value) {\n+    private Object unwrapMap(final Object value) {\n         if (value instanceof Map) {\n             Map<?, ?> map = (Map<?, ?>) value;\n             if (map.size() == 1) {\n@@ -50,50 +50,50 @@ private Object unwrapMap(Object value) {\n     }\n \n     @Override\n-    public void writeValue(JsonGenerator jgen, Object value)\n+    public void writeValue(final JsonGenerator jgen, final Object value)\n             throws IOException, JsonGenerationException, JsonMappingException {\n \n         super.writeValue(jgen, unwrapMap(value));\n     }\n \n     @Override\n-    public void writeValue(JsonGenerator jgen, Object value,\n-            SerializationConfig config)\n+    public void writeValue(final JsonGenerator jgen, final Object value,\n+            final SerializationConfig config)\n             throws IOException, JsonGenerationException, JsonMappingException {\n \n         super.writeValue(jgen, unwrapMap(value), config);\n     }\n \n     @Override\n-    public void writeValue(File resultFile, Object value)\n+    public void writeValue(final File resultFile, final Object value)\n             throws IOException, JsonGenerationException, JsonMappingException {\n \n         super.writeValue(resultFile, unwrapMap(value));\n     }\n \n     @Override\n-    public void writeValue(OutputStream out, Object value)\n+    public void writeValue(final OutputStream out, final Object value)\n             throws IOException, JsonGenerationException, JsonMappingException {\n \n         super.writeValue(out, unwrapMap(value));\n     }\n \n     @Override\n-    public void writeValue(Writer w, Object value)\n+    public void writeValue(final Writer w, final Object value)\n             throws IOException, JsonGenerationException, JsonMappingException {\n \n         super.writeValue(w, unwrapMap(value));\n     }\n \n     @Override\n-    public byte[] writeValueAsBytes(Object value)\n+    public byte[] writeValueAsBytes(final Object value)\n             throws IOException, JsonGenerationException, JsonMappingException {\n \n         return super.writeValueAsBytes(unwrapMap(value));\n     }\n \n     @Override\n-    public String writeValueAsString(Object value)\n+    public String writeValueAsString(final Object value)\n             throws IOException, JsonGenerationException, JsonMappingException {\n \n         return super.writeValueAsString(unwrapMap(value));","previous_filename":"core/src/main/java/org/syncope/core/rest/jackson/UnwrappedObjectMapper.java"},{"sha":"88962bbb004e4325ed62a0c11fa3b884b7bdda2c","filename":"core/src/main/java/org/syncope/core/scheduling/AbstractTaskJob.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractTaskJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractTaskJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FAbstractTaskJob.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -32,7 +32,7 @@\n  * job execution and provides some background settings (like as the\n  * corresponding Task, for example).\n  */\n-public abstract class AbstractJob implements StatefulJob {\n+public abstract class AbstractTaskJob implements StatefulJob {\n \n     public static final String DRY_RUN_JOBDETAIL_KEY = \"dryRun\";\n \n@@ -50,7 +50,7 @@ public enum Status {\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(\n-            AbstractJob.class);\n+            AbstractTaskJob.class);\n \n     /**\n      * Task DAO.","previous_filename":"core/src/main/java/org/syncope/core/scheduling/AbstractJob.java"},{"sha":"a453b1106f980511ae3e03170b3443fd1dc1ae7d","filename":"core/src/main/java/org/syncope/core/scheduling/ReportJob.java","status":"added","additions":205,"deletions":0,"changes":205,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FReportJob.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,205 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.scheduling;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.PrintWriter;\n+import java.io.StringWriter;\n+import java.lang.reflect.Field;\n+import java.util.ArrayList;\n+import java.util.Date;\n+import java.util.List;\n+import java.util.zip.Deflater;\n+import java.util.zip.ZipEntry;\n+import java.util.zip.ZipOutputStream;\n+import javax.xml.transform.OutputKeys;\n+import javax.xml.transform.Transformer;\n+import javax.xml.transform.sax.SAXTransformerFactory;\n+import javax.xml.transform.sax.TransformerHandler;\n+import javax.xml.transform.stream.StreamResult;\n+import org.quartz.JobExecutionContext;\n+import org.quartz.JobExecutionException;\n+import org.quartz.StatefulJob;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.BeanUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n+import org.syncope.client.report.Reportlet;\n+import org.syncope.client.report.XMLReport;\n+import org.syncope.client.report.XMLReport.Attrs;\n+import org.syncope.client.report.XMLReport.Elements;\n+import org.syncope.core.persistence.beans.Report;\n+import org.syncope.core.persistence.beans.ReportExec;\n+import org.syncope.core.persistence.dao.ReportDAO;\n+import org.syncope.core.persistence.dao.ReportExecDAO;\n+import org.syncope.core.util.ApplicationContextManager;\n+import org.syncope.types.ReportExecStatus;\n+import org.xml.sax.SAXException;\n+import org.xml.sax.helpers.AttributesImpl;\n+\n+/**\n+ * Quartz job for executing a given report.\n+ */\n+public class ReportJob implements StatefulJob {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            ReportJob.class);\n+\n+    /**\n+     * Report DAO.\n+     */\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    /**\n+     * Report execution DAO.\n+     */\n+    @Autowired\n+    private ReportExecDAO reportExecDAO;\n+\n+    /**\n+     * Id, set by the caller, for identifying the report to be executed.\n+     */\n+    private Long reportId;\n+\n+    /**\n+     * Report id setter.\n+     *\n+     * @param reportId to be set\n+     */\n+    public void setReportId(final Long reportId) {\n+        this.reportId = reportId;\n+    }\n+\n+    @Override\n+    public void execute(final JobExecutionContext context)\n+            throws JobExecutionException {\n+\n+        Report report = reportDAO.find(reportId);\n+        if (report == null) {\n+            throw new JobExecutionException(\n+                    \"Report \" + reportId + \" not found\");\n+        }\n+\n+        // 1. create execution\n+        ReportExec execution = new ReportExec();\n+        execution.setStatus(ReportExecStatus.STARTED);\n+        execution.setStartDate(new Date());\n+        execution.setReport(report);\n+        execution = reportExecDAO.save(execution);\n+\n+        // 2. define a SAX handler for generating result as XML\n+        TransformerHandler handler;\n+\n+        ByteArrayOutputStream baos = new ByteArrayOutputStream();\n+        ZipOutputStream zos = new ZipOutputStream(baos);\n+        zos.setLevel(Deflater.BEST_COMPRESSION);\n+        try {\n+            SAXTransformerFactory transformerFactory =\n+                    (SAXTransformerFactory) SAXTransformerFactory.newInstance();\n+            handler = transformerFactory.newTransformerHandler();\n+            Transformer serializer = handler.getTransformer();\n+            serializer.setOutputProperty(OutputKeys.ENCODING, \"UTF-8\");\n+            serializer.setOutputProperty(OutputKeys.INDENT, \"yes\");\n+\n+            // a single ZipEntry in the ZipOutputStream\n+            zos.putNextEntry(new ZipEntry(report.getName()));\n+\n+            // streaming SAX handler in a compressed byte array stream\n+            handler.setResult(new StreamResult(zos));\n+        } catch (Exception e) {\n+            throw new JobExecutionException(\n+                    \"While configuring for SAX generation\", e, true);\n+        }\n+\n+        execution.setStatus(ReportExecStatus.RUNNING);\n+        execution = reportExecDAO.save(execution);\n+\n+        ConfigurableListableBeanFactory beanFactory =\n+                ApplicationContextManager.getApplicationContext().\n+                getBeanFactory();\n+\n+        // 3. actual report execution\n+        String reportExecutionMessage = null;\n+        try {\n+            // report header\n+            handler.startDocument();\n+            AttributesImpl atts = new AttributesImpl();\n+            atts.addAttribute(\"\", \"\", Attrs.name.name(),\n+                    XMLReport.TYPE_TEXT, report.getName());\n+            handler.startElement(\"\", \"\", Elements.report.name(), atts);\n+\n+            // iterate over reportlet instances defined for this report\n+            for (Reportlet reportlet : report.getReportlets()) {\n+                // for each reportlet instance, get an autowired instance\n+                // and copy non autowired field values\n+                List<String> ignoreProperties = new ArrayList<String>();\n+                for (Field field : reportlet.getClass().getFields()) {\n+                    if (field.isAnnotationPresent(Autowired.class)) {\n+                        ignoreProperties.add(field.getName());\n+                    }\n+                }\n+\n+                Reportlet autowired = (Reportlet) beanFactory.autowire(\n+                        reportlet.getClass(),\n+                        AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n+                BeanUtils.copyProperties(reportlet, autowired,\n+                        ignoreProperties.toArray(new String[ignoreProperties.\n+                        size()]));\n+\n+                // invoke reportlet\n+                try {\n+                    autowired.extract(handler);\n+                } catch (SAXException e) {\n+                    LOG.error(\"While extracting from reportlet {}\",\n+                            reportlet.getName(), e);\n+                }\n+            }\n+\n+            // report footer\n+            handler.endElement(\"\", \"\", Elements.report.name());\n+            handler.endDocument();\n+\n+            execution.setStatus(ReportExecStatus.SUCCESS);\n+        } catch (SAXException e) {\n+            execution.setStatus(ReportExecStatus.FAILURE);\n+\n+            StringWriter exceptionWriter = new StringWriter();\n+            exceptionWriter.write(e.getMessage() + \"\\n\\n\");\n+            e.printStackTrace(new PrintWriter(exceptionWriter));\n+            reportExecutionMessage = exceptionWriter.toString();\n+\n+            throw new JobExecutionException(e, true);\n+        } finally {\n+            try {\n+                zos.closeEntry();\n+                zos.close();\n+                baos.close();\n+            } catch (IOException e) {\n+                LOG.error(\"While closing StreamResult's backend\", e);\n+            }\n+\n+            execution.setExecResult(baos.toByteArray());\n+            execution.setMessage(reportExecutionMessage);\n+            execution.setEndDate(new Date());\n+            reportExecDAO.save(execution);\n+        }\n+    }\n+}"},{"sha":"6dc9089eb351bdaad728b0a9ab1baab7cbd96f92","filename":"core/src/main/java/org/syncope/core/scheduling/SampleJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSampleJob.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -22,7 +22,7 @@\n  *\n  * @see SchedTask\n  */\n-public class SampleJob extends AbstractJob {\n+public class SampleJob extends AbstractTaskJob {\n \n     @Override\n     protected String doExecute(final boolean dryRun)"},{"sha":"84bb76b60f2df962fec7dae9d80568a237b1d20c","filename":"core/src/main/java/org/syncope/core/scheduling/SpringBeanJobFactory.java","status":"modified","additions":14,"deletions":1,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSpringBeanJobFactory.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -21,7 +21,9 @@\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ConfigurableApplicationContext;\n import org.syncope.core.init.JobInstanceLoader;\n+import org.syncope.core.persistence.beans.Report;\n import org.syncope.core.persistence.beans.SchedTask;\n+import org.syncope.core.persistence.dao.ReportDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n \n public class SpringBeanJobFactory\n@@ -70,9 +72,20 @@ protected Object createJobInstance(final TriggerFiredBundle bundle)\n \n                 JobInstanceLoader jobInstanceLoader =\n                         ctx.getBean(JobInstanceLoader.class);\n-                jobInstanceLoader.registerJob(taskId,\n+                jobInstanceLoader.registerJob(task,\n                         task.getJobClassName(), task.getCronExpression());\n             }\n+\n+            Long reportId = JobInstanceLoader.getReportIdFromJobName(\n+                    bundle.getJobDetail().getName());\n+            if (reportId != null) {\n+                ReportDAO reportDAO = ctx.getBean(ReportDAO.class);\n+                Report report = reportDAO.find(reportId);\n+\n+                JobInstanceLoader jobInstanceLoader =\n+                        ctx.getBean(JobInstanceLoader.class);\n+                jobInstanceLoader.registerJob(report);\n+            }\n         }\n \n         final Object job = ctx.getBean(bundle.getJobDetail().getName());"},{"sha":"1b57f0edbe577f2d41d88318f2d89021b39c2205","filename":"core/src/main/java/org/syncope/core/scheduling/SyncJob.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncJob.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -82,7 +82,7 @@\n  * @see org.syncope.core.scheduling.Job\n  * @see SyncTask\n  */\n-public class SyncJob extends AbstractJob {\n+public class SyncJob extends AbstractTaskJob {\n \n     /**\n      * ConnInstance loader."},{"sha":"0b0a19378d97c05fd5757bf90049b5716649947b","filename":"core/src/main/java/org/syncope/core/scheduling/SyncResult.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fscheduling%2FSyncResult.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -19,7 +19,7 @@\n import org.apache.commons.lang.StringUtils;\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang.builder.ToStringStyle;\n-import org.syncope.core.scheduling.AbstractJob.Status;\n+import org.syncope.core.scheduling.AbstractTaskJob.Status;\n import org.syncope.types.TraceLevel;\n \n public class SyncResult {"},{"sha":"217456f660b68a54d096b3685776c816c25fcf30","filename":"core/src/main/resources/content.xml","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -63,7 +63,6 @@\n     <Entitlement name=\"RESOURCE_UPDATE\"/>\n     <Entitlement name=\"RESOURCE_DELETE\"/>\n     <Entitlement name=\"RESOURCE_GETOBJECT\"/>\n-    <Entitlement name=\"REPORT_LIST\"/>\n     <Entitlement name=\"CONNECTOR_LIST\"/>\n     <Entitlement name=\"CONNECTOR_CREATE\"/>\n     <Entitlement name=\"CONNECTOR_READ\"/>\n@@ -102,5 +101,11 @@\n     <Entitlement name=\"USER_REQUEST_LIST\"/>\n     <Entitlement name=\"USER_REQUEST_READ\"/>\n     <Entitlement name=\"USER_REQUEST_DELETE\"/>\n+    <Entitlement name=\"REPORT_LIST\"/>\n+    <Entitlement name=\"REPORT_READ\"/>\n+    <Entitlement name=\"REPORT_CREATE\"/>\n+    <Entitlement name=\"REPORT_UPDATE\"/>\n+    <Entitlement name=\"REPORT_DELETE\"/>\n+    <Entitlement name=\"REPORT_EXECUTE\"/>\n     \n </dataset>"},{"sha":"6043399d763584605bfedee0cff749edaef0ec57","filename":"core/src/main/resources/restContext.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FrestContext.xml?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -30,7 +30,7 @@\n     </bean>\n     \n     <!-- JSON (via Jackson) -->\n-    <bean id=\"jacksonObjectMapper\" class=\"org.syncope.core.rest.jackson.UnwrappedObjectMapper\"/>\n+    <bean id=\"jacksonObjectMapper\" class=\"org.syncope.core.rest.data.UnwrappedObjectMapper\"/>\n     <bean id=\"mappingJacksonHttpMessageConverter\"\n           class=\"org.springframework.http.converter.json.MappingJacksonHttpMessageConverter\">\n         <property name=\"objectMapper\" ref=\"jacksonObjectMapper\"/>"},{"sha":"92bdc86be4199cf393a4d089908b8eae7d774d4b","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -38,7 +38,7 @@ public void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n         // 59 real entitlements + 9 role entitlements\n         assertEquals(\"did not get expected number of entitlements \",\n-                69, list.size());\n+                74, list.size());\n     }\n \n     @Test"},{"sha":"1946f6c37c2fbe5ae420cb4ad041dc0c7a780ce5","filename":"core/src/test/java/org/syncope/core/persistence/dao/ReportTest.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FReportTest.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,76 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.dao;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.client.report.UserReportlet;\n+import org.syncope.core.AbstractTest;\n+import org.syncope.core.persistence.beans.Report;\n+\n+@Transactional\n+public class ReportTest extends AbstractTest {\n+\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    @Test\n+    public void find() {\n+        Report report = reportDAO.find(1L);\n+        assertNotNull(report);\n+\n+        report = reportDAO.find(10L);\n+        assertNull(report);\n+    }\n+\n+    @Test\n+    public void findAll() {\n+        List<Report> reports = reportDAO.findAll();\n+        assertNotNull(reports);\n+        assertEquals(1, reports.size());\n+    }\n+\n+    @Test\n+    public void save() {\n+        int beforeCount = reportDAO.count();\n+\n+        Report report = new Report();\n+        report.setName(\"new report\");\n+        report.addReportlet(new UserReportlet());\n+        report.addReportlet(new UserReportlet(\"second\"));\n+\n+        report = reportDAO.save(report);\n+        assertNotNull(report);\n+        assertNotNull(report.getId());\n+\n+        int afterCount = reportDAO.count();\n+        assertEquals(afterCount, beforeCount + 1);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        Report report = reportDAO.find(1L);\n+        assertNotNull(report);\n+\n+        reportDAO.delete(1L);\n+\n+        report = reportDAO.find(1L);\n+        assertNull(report);\n+    }\n+}"},{"sha":"10b531978553a0a22d60d84ad4f8eb2d8f5e7476","filename":"core/src/test/java/org/syncope/core/persistence/relationships/ReportTest.java","status":"added","additions":113,"deletions":0,"changes":113,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FReportTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FReportTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FReportTest.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,113 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.relationships;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Date;\n+import javax.persistence.EntityExistsException;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.syncope.core.AbstractTest;\n+import org.syncope.core.persistence.beans.Report;\n+import org.syncope.core.persistence.beans.ReportExec;\n+import org.syncope.core.persistence.dao.ReportDAO;\n+import org.syncope.core.persistence.dao.ReportExecDAO;\n+import org.syncope.types.ReportExecStatus;\n+\n+@Transactional\n+public class ReportTest extends AbstractTest {\n+\n+    @Autowired\n+    private ReportDAO reportDAO;\n+\n+    @Autowired\n+    private ReportExecDAO reportExecDAO;\n+\n+    @Test\n+    public void find() {\n+        Report report = reportDAO.find(1L);\n+        assertNotNull(report);\n+\n+        assertNotNull(report.getExecs());\n+        assertFalse(report.getExecs().isEmpty());\n+        assertEquals(1, report.getExecs().size());\n+    }\n+\n+    @Test(expected = EntityExistsException.class)\n+    public void saveWithExistingName() {\n+        Report report = reportDAO.find(1L);\n+        assertNotNull(report);\n+\n+        String name = report.getName();\n+\n+        report = new Report();\n+        report.setName(name);\n+\n+        reportDAO.save(report);\n+        reportDAO.flush();\n+    }\n+\n+    @Test\n+    public void save() {\n+        Report report = reportDAO.find(1L);\n+        assertNotNull(report);\n+        assertEquals(1, report.getExecs().size());\n+\n+        ReportExec reportExec = new ReportExec();\n+        reportExec.setReport(report);\n+        reportExec.setStartDate(new Date());\n+        reportExec.setEndDate(new Date());\n+        reportExec.setStatus(ReportExecStatus.SUCCESS);\n+\n+        report.addExec(reportExec);\n+\n+        reportExec = reportExecDAO.save(reportExec);\n+        assertNotNull(reportExec);\n+        assertNotNull(reportExec.getId());\n+\n+        reportExecDAO.flush();\n+\n+        report = reportDAO.find(1L);\n+        assertNotNull(report);\n+        assertEquals(2, report.getExecs().size());\n+    }\n+\n+    @Test\n+    public void deleteReport() {\n+        reportDAO.delete(1L);\n+\n+        reportDAO.flush();\n+\n+        assertNull(reportDAO.find(1L));\n+        assertNull(reportExecDAO.find(1L));\n+    }\n+\n+    @Test\n+    public void deleteReportExecution() {\n+        ReportExec execution = reportExecDAO.find(1L);\n+        int executionNumber = execution.getReport().getExecs().size();\n+\n+        reportExecDAO.delete(1L);\n+\n+        reportExecDAO.flush();\n+\n+        assertNull(reportExecDAO.find(1L));\n+\n+        Report report = reportDAO.find(1L);\n+        assertEquals(report.getExecs().size(), executionNumber - 1);\n+    }\n+}"},{"sha":"bfc0c9508eb2792f325d431da60c3c75bddd27b9","filename":"core/src/test/java/org/syncope/core/rest/ReportTestITCase.java","status":"added","additions":180,"deletions":0,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -0,0 +1,180 @@\n+/*\n+ * Licensed under the Apache License, Version 2.0 (the \"License\");\n+ * you may not use this file except in compliance with the License.\n+ * You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.core.rest;\n+\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.http.HttpResponse;\n+import org.apache.http.client.methods.HttpGet;\n+import org.apache.http.util.EntityUtils;\n+import static org.junit.Assert.*;\n+\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n+import org.syncope.client.report.UserReportlet;\n+import org.syncope.client.to.ReportExecTO;\n+import org.syncope.client.to.ReportTO;\n+import org.syncope.client.to.UserTO;\n+\n+public class ReportTestITCase extends AbstractTest {\n+\n+    @Test\n+    public void count() {\n+        Integer count = restTemplate.getForObject(\n+                BASE_URL + \"report/count.json\", Integer.class);\n+        assertNotNull(count);\n+        assertTrue(count > 0);\n+    }\n+\n+    @Test\n+    public void list() {\n+        List<ReportTO> reports = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"report/list\", ReportTO[].class));\n+        assertNotNull(reports);\n+        assertFalse(reports.isEmpty());\n+        for (ReportTO report : reports) {\n+            assertNotNull(report);\n+        }\n+    }\n+\n+    @Test\n+    public void listExecutions() {\n+        List<ReportExecTO> executions = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"report/execution/list\",\n+                ReportExecTO[].class));\n+        assertNotNull(executions);\n+        assertFalse(executions.isEmpty());\n+        for (ReportExecTO execution : executions) {\n+            assertNotNull(execution);\n+        }\n+    }\n+\n+    @Test\n+    public void read() {\n+        ReportTO reportTO = restTemplate.getForObject(\n+                BASE_URL + \"report/read/{taskId}\", ReportTO.class, 1);\n+\n+        assertNotNull(reportTO);\n+        assertNotNull(reportTO.getExecutions());\n+        assertFalse(reportTO.getExecutions().isEmpty());\n+    }\n+\n+    @Test\n+    public void readExecution() {\n+        ReportExecTO reportExecTO = restTemplate.getForObject(\n+                BASE_URL + \"report/execution/read/{taskId}\",\n+                ReportExecTO.class, 1);\n+        assertNotNull(reportExecTO);\n+    }\n+\n+    @Test\n+    public void create() {\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForCreate\");\n+        report.addReportlet(new UserReportlet());\n+        report.addReportlet(new UserReportlet(\"second\"));\n+\n+        report = restTemplate.postForObject(\n+                BASE_URL + \"report/create\", report, ReportTO.class);\n+        assertNotNull(report);\n+\n+        ReportTO actual = restTemplate.getForObject(\n+                BASE_URL + \"report/read/{reportId}\", ReportTO.class,\n+                report.getId());\n+        assertNotNull(actual);\n+        assertEquals(actual, report);\n+    }\n+\n+    @Test\n+    public void update() {\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForUpdate\");\n+        report.addReportlet(new UserReportlet());\n+        report.addReportlet(new UserReportlet(\"second\"));\n+\n+        report = restTemplate.postForObject(\n+                BASE_URL + \"report/create\", report, ReportTO.class);\n+        assertNotNull(report);\n+        assertEquals(2, report.getReportlets().size());\n+\n+        report.addReportlet(new UserReportlet(\"last\"));\n+\n+        ReportTO updated = restTemplate.postForObject(\n+                BASE_URL + \"report/update\", report, ReportTO.class);\n+        assertNotNull(updated);\n+        assertEquals(3, updated.getReportlets().size());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        ReportTO report = new ReportTO();\n+        report.setName(\"testReportForDelete\");\n+        report.addReportlet(new UserReportlet());\n+        report.addReportlet(new UserReportlet(\"second\"));\n+\n+        report = restTemplate.postForObject(\n+                BASE_URL + \"report/create\", report, ReportTO.class);\n+        assertNotNull(report);\n+\n+        restTemplate.delete(\n+                BASE_URL + \"report/delete/{reportId}\", report.getId());\n+\n+        try {\n+            restTemplate.getForObject(BASE_URL + \"report/read/{reportId}\",\n+                    UserTO.class, report.getId());\n+            fail();\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n+        }\n+    }\n+\n+    @Test\n+    public void executeAndExport()\n+            throws IOException {\n+\n+        ReportTO reportTO = restTemplate.getForObject(\n+                BASE_URL + \"report/read/{taskId}\", ReportTO.class, 1);\n+        assertNotNull(reportTO);\n+        final int execs = reportTO.getExecutions().size();\n+\n+        ReportExecTO execution = restTemplate.postForObject(\n+                BASE_URL + \"report/execute/{reportId}\",\n+                null, ReportExecTO.class, reportTO.getId());\n+        assertNotNull(execution);\n+\n+        int newExecs = execs;\n+        while (newExecs == execs) {\n+            reportTO = restTemplate.getForObject(\n+                    BASE_URL + \"report/read/{taskId}\", ReportTO.class, 1);\n+            newExecs = reportTO.getExecutions().size();\n+        }\n+        assertEquals(newExecs, execs + 1);\n+        \n+        long newExec = reportTO.getExecutions().get(newExecs - 1).getId();\n+\n+        HttpGet getMethod = new HttpGet(\n+                BASE_URL + \"report/execution/export/\" + newExec);\n+        HttpResponse response =\n+                ((PreemptiveAuthHttpRequestFactory) restTemplate.\n+                getRequestFactory()).getHttpClient().execute(getMethod);\n+        assertEquals(200, response.getStatusLine().getStatusCode());\n+\n+        String export = EntityUtils.toString(response.getEntity()).trim();\n+        assertNotNull(export);\n+        assertFalse(export.isEmpty());\n+    }\n+}"},{"sha":"9942f0cb7ab3b35f75ad95f6802b7e446655f92b","filename":"core/src/test/resources/content.xml","status":"modified","additions":12,"deletions":4,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -386,7 +386,6 @@\n                    resource_name=\"resource-testdb\"\n                    intMappingType=\"Username\" mandatoryCondition=\"true\"\n                    accountid=\"1\" password=\"0\"/>\n-                   \n     <SchemaMapping id=\"117\" extAttrName=\"PASSWORD\"\n                    resource_name=\"resource-testdb\"\n                    intMappingType=\"Password\" mandatoryCondition=\"true\"\n@@ -468,8 +467,8 @@\n           resource_name=\"ws-target-resource-nopropagation\" syncopeUser_id=\"1\"\n           xmlAttributes=\"%3Cset%3E%0A++%3Corg.identityconnectors.framework.common.objects.Name%3E%0A++++%3Cname%3E__NAME__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3EuserId%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Name%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3E__PASSWORD__%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Corg.identityconnectors.common.security.GuardedString%3E%0A++++++++++%3C__readOnly%3Efalse%3C%2F__readOnly%3E%0A++++++++++%3C__disposed%3Efalse%3C%2F__disposed%3E%0A++++++++++%3C__encryptedBytes%3EQTOgwEhIHqtAI%2FYlgDhYc37esEF8VLDMU2IY1ciltrg%3D%3C%2F__encryptedBytes%3E%0A++++++++++%3C__base64SHA1Hash%3EW5%2FrwtdCnI8gAnIUhKcahMEnMMc%3D%3C%2F__base64SHA1Hash%3E%0A++++++++%3C%2Forg.identityconnectors.common.security.GuardedString%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Etype%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Etype%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A++%3Corg.identityconnectors.framework.common.objects.Attribute%3E%0A++++%3Cname%3Efullname%3C%2Fname%3E%0A++++%3Cvalue+class%3D%22java.util.Collections%24UnmodifiableRandomAccessList%22+resolves-to%3D%22java.util.Collections%24UnmodifiableList%22%3E%0A++++++%3Cc+class%3D%22list%22%3E%0A++++++++%3Cstring%3Efullname%3C%2Fstring%3E%0A++++++%3C%2Fc%3E%0A++++++%3Clist+reference%3D%22..%2Fc%22%2F%3E%0A++++%3C%2Fvalue%3E%0A++%3C%2Forg.identityconnectors.framework.common.objects.Attribute%3E%0A%3C%2Fset%3E%0A\"/>\n     <Task DTYPE=\"SyncTask\" id=\"7\" resource_name=\"resource-testdb\"\n-                performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n-                jobClassName=\"org.syncope.core.scheduling.SyncJob\"/>\n+          performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n+          jobClassName=\"org.syncope.core.scheduling.SyncJob\"/>\n                 \n     <RDerSchema name=\"displayProperty\" expression=\"icon + ': ' + show\"/>\n \n@@ -498,7 +497,6 @@\n     <Entitlement name=\"RESOURCE_UPDATE\"/>\n     <Entitlement name=\"RESOURCE_DELETE\"/>\n     <Entitlement name=\"RESOURCE_GETOBJECT\"/>\n-    <Entitlement name=\"REPORT_LIST\"/>\n     <Entitlement name=\"CONNECTOR_LIST\"/>\n     <Entitlement name=\"CONNECTOR_CREATE\"/>\n     <Entitlement name=\"CONNECTOR_READ\"/>\n@@ -537,6 +535,12 @@\n     <Entitlement name=\"USER_REQUEST_LIST\"/>\n     <Entitlement name=\"USER_REQUEST_READ\"/>\n     <Entitlement name=\"USER_REQUEST_DELETE\"/>\n+    <Entitlement name=\"REPORT_LIST\"/>\n+    <Entitlement name=\"REPORT_READ\"/>\n+    <Entitlement name=\"REPORT_CREATE\"/>\n+    <Entitlement name=\"REPORT_UPDATE\"/>\n+    <Entitlement name=\"REPORT_DELETE\"/>\n+    <Entitlement name=\"REPORT_EXECUTE\"/>\n     <Entitlement name=\"ROLE_1\"/>\n     <Entitlement name=\"ROLE_2\"/>\n     <Entitlement name=\"ROLE_3\"/>\n@@ -574,4 +578,8 @@\n     <Notification_events Notification_id=\"100\" events=\"unexisting2\"/>\n     <Notification_events Notification_id=\"101\" events=\"unexisting1\"/>\n     <Notification_events Notification_id=\"101\" events=\"unexisting2\"/>\n+    \n+    <Report id=\"1\" name=\"test\"/>\n+    <Report_reportlets Report_id=\"1\" reportlets=\"%3Corg.syncope.client.report.UserReportlet%3E%0A++%3Cname%3EtestReportlet%3C%2Fname%3E%0A%3C%2Forg.syncope.client.report.UserReportlet%3E\"/>\n+    <ReportExec Report_id=\"1\" id=\"1\" status=\"SUCCESS\" startDate=\"2012-02-26 15:40:04\" endDate=\"2012-02-26 15:41:04\"/>\n </dataset>"},{"sha":"b59c10e59bcc51c5d8d0ef0d95d3e68fb8adc08f","filename":"parent/pom.xml","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1611dc592acc3f083765a2d84c9109162e5c2c98/parent%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1611dc592acc3f083765a2d84c9109162e5c2c98/parent%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/parent%2Fpom.xml?ref=1611dc592acc3f083765a2d84c9109162e5c2c98","patch":"@@ -138,7 +138,7 @@\n         <commons-jexl.version>2.1.1</commons-jexl.version>\n         <commons-lang.version>2.6</commons-lang.version>\n         \n-        <httpcomponents.version>4.1.2</httpcomponents.version>\n+        <httpcomponents.version>4.1.3</httpcomponents.version>\n \n         <javamail-specs.version>1.6</javamail-specs.version>\n         <javamail-provider.version>1.8.2</javamail-provider.version>\n@@ -153,6 +153,8 @@\n         <quartz.version>1.8.6</quartz.version>\n \n         <openjpa.version>2.2.0-SNAPSHOT</openjpa.version>\n+        \n+        <cocoon.version>3.0.0-alpha-3</cocoon.version>\n \n         <wicket.version>1.5.4</wicket.version>\n \n@@ -415,6 +417,12 @@\n                 <version>${quartz.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>org.apache.cocoon.sax</groupId>\n+                <artifactId>cocoon-sax</artifactId>\n+                <version>${cocoon.version}</version>\n+            </dependency>\n+\n             <!-- Wicket -->\n             <dependency>\n                 <groupId>org.apache.wicket</groupId>"}]}