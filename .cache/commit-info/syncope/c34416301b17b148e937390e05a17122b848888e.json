{"sha":"c34416301b17b148e937390e05a17122b848888e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmMzNDQxNjMwMWIxN2IxNDhlOTM3MzkwZTA1YTE3MTIyYjg0ODg4OGU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-21T11:32:38Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2016-04-21T11:32:38Z"},"message":"[SYNCOPE-834] Consolidating in a single WebSocketBehavior","tree":{"sha":"72cc213020f21173fb1d5039e7dbcaebd46fa46a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/72cc213020f21173fb1d5039e7dbcaebd46fa46a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c34416301b17b148e937390e05a17122b848888e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c34416301b17b148e937390e05a17122b848888e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c34416301b17b148e937390e05a17122b848888e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c34416301b17b148e937390e05a17122b848888e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"c4be818f00cadc6ffe7eb92197e2c5f81301d9ad","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c4be818f00cadc6ffe7eb92197e2c5f81301d9ad","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c4be818f00cadc6ffe7eb92197e2c5f81301d9ad"}],"stats":{"total":295,"additions":149,"deletions":146},"files":[{"sha":"95ff320e23bc74863128b9fd701dd425e26bbcdc","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":22,"deletions":2,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=c34416301b17b148e937390e05a17122b848888e","patch":"@@ -54,27 +54,36 @@\n import org.apache.wicket.request.Request;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.scheduling.concurrent.ThreadPoolExecutorFactoryBean;\n \n public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     private static final long serialVersionUID = 747562246415852166L;\n \n     private static final Logger LOG = LoggerFactory.getLogger(SyncopeConsoleSession.class);\n \n+    private static final ThreadPoolExecutorFactoryBean THREAD_POOL_FACTORY;\n+\n     public static final String AUTHENTICATED = \"AUTHENTICATED\";\n \n     public static final String MENU_COLLAPSE = \"MENU_COLLAPSE\";\n \n+    static {\n+        THREAD_POOL_FACTORY = new ThreadPoolExecutorFactoryBean();\n+        THREAD_POOL_FACTORY.setThreadNamePrefix(SyncopeConsoleSession.class.getSimpleName());\n+        THREAD_POOL_FACTORY.setDaemon(true);\n+    }\n+\n     private final PlatformInfo platformInfo;\n \n     private final List<String> domains;\n \n     private String domain;\n \n-    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(5);\n-\n     private final Map<Class<?>, Object> services = Collections.synchronizedMap(new HashMap<Class<?>, Object>());\n \n+    private final ScheduledExecutorService executorService = Executors.newScheduledThreadPool(5, THREAD_POOL_FACTORY);\n+\n     private SyncopeClient client;\n \n     private String username;\n@@ -89,6 +98,8 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     private NotificationPanel notificationPanel;\n \n+    private boolean checkReconciliationJob = false;\n+\n     public static SyncopeConsoleSession get() {\n         return (SyncopeConsoleSession) Session.get();\n     }\n@@ -248,4 +259,13 @@ public NotificationPanel getNotificationPanel() {\n         }\n         return notificationPanel;\n     }\n+\n+    public boolean isCheckReconciliationJob() {\n+        return checkReconciliationJob;\n+    }\n+\n+    public void setCheckReconciliationJob(final boolean checkReconciliationJob) {\n+        this.checkReconciliationJob = checkReconciliationJob;\n+    }\n+\n }"},{"sha":"d504ceff73c7794ce6ec3b3f413050a5e4b8ccfc","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/BasePage.java","status":"modified","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FBasePage.java?ref=c34416301b17b148e937390e05a17122b848888e","patch":"@@ -20,6 +20,7 @@\n \n import java.io.Serializable;\n import java.util.List;\n+import java.util.concurrent.TimeUnit;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleApplication;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n@@ -31,6 +32,8 @@\n import org.apache.syncope.client.console.wicket.markup.head.MetaHeaderItem;\n import org.apache.syncope.client.console.wicket.markup.html.bootstrap.dialog.BaseModal;\n import org.apache.syncope.client.console.widgets.ApprovalsWidget;\n+import org.apache.syncope.client.console.widgets.JobWidget;\n+import org.apache.syncope.client.console.widgets.ReconciliationWidget;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n@@ -52,6 +55,8 @@\n import org.apache.wicket.markup.html.link.BookmarkablePageLink;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n+import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n import org.apache.wicket.request.mapper.parameter.PageParameters;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -83,6 +88,28 @@ public BasePage() {\n     public BasePage(final PageParameters parameters) {\n         super(parameters);\n \n+        // Native WebSocket\n+        add(new WebSocketBehavior() {\n+\n+            private static final long serialVersionUID = 3109256773218160485L;\n+\n+            @Override\n+            protected void onConnect(final ConnectedMessage message) {\n+                super.onConnect(message);\n+\n+                SyncopeConsoleSession.get().scheduleAtFixedRate(\n+                        new ApprovalsWidget.ApprovalInfoUpdater(message), 0, 30, TimeUnit.SECONDS);\n+\n+                if (BasePage.this instanceof Dashboard) {\n+                    SyncopeConsoleSession.get().scheduleAtFixedRate(\n+                            new JobWidget.JobInfoUpdater(message), 0, 10, TimeUnit.SECONDS);\n+                    SyncopeConsoleSession.get().scheduleAtFixedRate(\n+                            new ReconciliationWidget.ReconciliationJobInfoUpdater(message), 0, 10, TimeUnit.SECONDS);\n+                }\n+            }\n+\n+        });\n+\n         body = new WebMarkupContainer(\"body\");\n         Serializable leftMenuCollapse = SyncopeConsoleSession.get().getAttribute(SyncopeConsoleSession.MENU_COLLAPSE);\n         if ((leftMenuCollapse instanceof Boolean) && ((Boolean) leftMenuCollapse)) {"},{"sha":"3e704c3ba0f6abf02d72e64260011950f990f694","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ApprovalsWidget.java","status":"modified","additions":44,"deletions":51,"changes":95,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FApprovalsWidget.java?ref=c34416301b17b148e937390e05a17122b848888e","patch":"@@ -22,14 +22,13 @@\n import java.util.Collections;\n import java.util.Comparator;\n import java.util.List;\n-import java.util.concurrent.TimeUnit;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.BookmarkablePageLinkBuilder;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.pages.Approvals;\n-import org.apache.syncope.client.console.rest.UserWorkflowRestClient;\n import org.apache.syncope.common.lib.to.WorkflowFormTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.common.rest.api.service.UserWorkflowService;\n import org.apache.wicket.Application;\n import org.apache.wicket.PageReference;\n import org.apache.wicket.ThreadContext;\n@@ -48,7 +47,6 @@\n import org.apache.wicket.model.LoadableDetachableModel;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.protocol.ws.WebSocketSettings;\n-import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n import org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster;\n import org.apache.wicket.protocol.ws.api.event.WebSocketPushPayload;\n import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n@@ -63,7 +61,13 @@ public class ApprovalsWidget extends Panel {\n \n     private static final Logger LOG = LoggerFactory.getLogger(ApprovalsWidget.class);\n \n-    private static final int UPDATE_PERIOD = 30;\n+    private static List<WorkflowFormTO> getLastApprovals() {\n+        if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)) {\n+            return SyncopeConsoleSession.get().getService(UserWorkflowService.class).getForms();\n+        } else {\n+            return Collections.<WorkflowFormTO>emptyList();\n+        }\n+    }\n \n     private final Label linkApprovalsNumber;\n \n@@ -175,51 +179,35 @@ protected void onComponentTag(final ComponentTag tag) {\n         BookmarkablePageLink<Object> approvals = BookmarkablePageLinkBuilder.build(\"approvalsLink\", Approvals.class);\n         add(approvals);\n         MetaDataRoleAuthorizationStrategy.authorize(approvals, WebPage.ENABLE, StandardEntitlement.WORKFLOW_FORM_LIST);\n-\n-        add(new WebSocketBehavior() {\n-\n-            private static final long serialVersionUID = 7944352891541344021L;\n-\n-            @Override\n-            protected void onConnect(final ConnectedMessage message) {\n-                super.onConnect(message);\n-                SyncopeConsoleSession.get().scheduleAtFixedRate(\n-                        new ApprovalInfoUpdater(message), 0, UPDATE_PERIOD, TimeUnit.SECONDS);\n-            }\n-        });\n-    }\n-\n-    private List<WorkflowFormTO> getLastApprovals() {\n-        if (SyncopeConsoleSession.get().owns(StandardEntitlement.WORKFLOW_FORM_LIST)) {\n-            return new UserWorkflowRestClient().getForms();\n-        } else {\n-            return Collections.<WorkflowFormTO>emptyList();\n-        }\n     }\n \n     @Override\n     public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof WebSocketPushPayload) {\n             WebSocketPushPayload wsEvent = (WebSocketPushPayload) event.getPayload();\n-            if (wsEvent.getMessage() instanceof UpdateMessage) {\n+            if (wsEvent.getMessage() instanceof ApprovalsWidgetMessage) {\n+                List<WorkflowFormTO> updatedApprovals =\n+                        ((ApprovalsWidgetMessage) wsEvent.getMessage()).getUpdatedApprovals();\n+                if (!lastApprovals.equals(updatedApprovals)) {\n+                    lastApprovals.clear();\n+                    lastApprovals.addAll(updatedApprovals);\n \n-                ApprovalsWidget.this.linkApprovalsNumber.\n-                        setDefaultModelObject(ApprovalsWidget.this.lastApprovals.size());\n-                wsEvent.getHandler().add(ApprovalsWidget.this.linkApprovalsNumber);\n+                    ApprovalsWidget.this.linkApprovalsNumber.\n+                            setDefaultModelObject(ApprovalsWidget.this.lastApprovals.size());\n+                    wsEvent.getHandler().add(ApprovalsWidget.this.linkApprovalsNumber);\n \n-                ApprovalsWidget.this.headerApprovalsNumber.\n-                        setDefaultModelObject(ApprovalsWidget.this.lastApprovals.size());\n-                wsEvent.getHandler().add(ApprovalsWidget.this.headerApprovalsNumber);\n+                    ApprovalsWidget.this.headerApprovalsNumber.\n+                            setDefaultModelObject(ApprovalsWidget.this.lastApprovals.size());\n+                    wsEvent.getHandler().add(ApprovalsWidget.this.headerApprovalsNumber);\n \n-                ApprovalsWidget.this.lastFive.removeAll();\n-                wsEvent.getHandler().add(ApprovalsWidget.this.lastApprovalsList);\n+                    ApprovalsWidget.this.lastFive.removeAll();\n+                    wsEvent.getHandler().add(ApprovalsWidget.this.lastApprovalsList);\n+                }\n             }\n-        } else {\n-            super.onEvent(event);\n         }\n     }\n \n-    protected final class ApprovalInfoUpdater implements Runnable {\n+    public static final class ApprovalInfoUpdater implements Runnable {\n \n         private final Application application;\n \n@@ -239,20 +227,15 @@ public void run() {\n                 ThreadContext.setApplication(application);\n                 ThreadContext.setSession(session);\n \n-                final List<WorkflowFormTO> actual = getLastApprovals();\n-                Collections.sort(actual, new WorkflowFormComparator());\n-\n-                if (!actual.equals(lastApprovals)) {\n-                    LOG.debug(\"Update approvals\");\n-\n-                    lastApprovals.clear();\n-                    lastApprovals.addAll(actual);\n+                List<WorkflowFormTO> updatedApprovals = getLastApprovals();\n+                Collections.sort(updatedApprovals, new WorkflowFormComparator());\n \n-                    WebSocketSettings settings = WebSocketSettings.Holder.get(application);\n-                    WebSocketPushBroadcaster broadcaster =\n-                            new WebSocketPushBroadcaster(settings.getConnectionRegistry());\n-                    broadcaster.broadcast(new ConnectedMessage(application, session.getId(), key), new UpdateMessage());\n-                }\n+                WebSocketSettings settings = WebSocketSettings.Holder.get(application);\n+                WebSocketPushBroadcaster broadcaster =\n+                        new WebSocketPushBroadcaster(settings.getConnectionRegistry());\n+                broadcaster.broadcast(\n+                        new ConnectedMessage(application, session.getId(), key),\n+                        new ApprovalsWidgetMessage(updatedApprovals));\n             } catch (Throwable t) {\n                 LOG.error(\"Unexpected error while checking for updated approval info\", t);\n             } finally {\n@@ -261,13 +244,23 @@ public void run() {\n         }\n     }\n \n-    private static class UpdateMessage implements IWebSocketPushMessage, Serializable {\n+    private static class ApprovalsWidgetMessage implements IWebSocketPushMessage, Serializable {\n \n         private static final long serialVersionUID = -824793424112532838L;\n \n+        private final List<WorkflowFormTO> updatedApprovals;\n+\n+        ApprovalsWidgetMessage(final List<WorkflowFormTO> updatedApprovals) {\n+            this.updatedApprovals = updatedApprovals;\n+        }\n+\n+        public List<WorkflowFormTO> getUpdatedApprovals() {\n+            return updatedApprovals;\n+        }\n+\n     }\n \n-    private class WorkflowFormComparator implements Comparator<WorkflowFormTO> {\n+    private static class WorkflowFormComparator implements Comparator<WorkflowFormTO> {\n \n         @Override\n         public int compare(final WorkflowFormTO o1, final WorkflowFormTO o2) {"},{"sha":"c91d7dea68557a3dd4d4f42d8b696ddd7fac3303","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/JobWidget.java","status":"modified","additions":24,"deletions":38,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FJobWidget.java?ref=c34416301b17b148e937390e05a17122b848888e","patch":"@@ -25,7 +25,6 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.concurrent.TimeUnit;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.DirectoryDataProvider;\n@@ -62,7 +61,6 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.protocol.ws.WebSocketSettings;\n-import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n import org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster;\n import org.apache.wicket.protocol.ws.api.event.WebSocketPushPayload;\n import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n@@ -115,17 +113,6 @@ public JobWidget(final String id, final PageReference pageRef) {\n         recent = getRecent(SyncopeConsoleSession.get());\n \n         add(new AjaxBootstrapTabbedPanel<>(\"tabbedPanel\", buildTabList(pageRef)));\n-\n-        add(new WebSocketBehavior() {\n-\n-            private static final long serialVersionUID = 7944352891541344021L;\n-\n-            @Override\n-            protected void onConnect(final ConnectedMessage message) {\n-                super.onConnect(message);\n-                SyncopeConsoleSession.get().scheduleAtFixedRate(new JobInfoUpdater(message), 0, 10, TimeUnit.SECONDS);\n-            }\n-        });\n     }\n \n     private List<ITab> buildTabList(final PageReference pageRef) {\n@@ -163,19 +150,24 @@ public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof WebSocketPushPayload) {\n             WebSocketPushPayload wsEvent = (WebSocketPushPayload) event.getPayload();\n             if (wsEvent.getMessage() instanceof JobWidgetMessage) {\n-                available.clear();\n-                available.addAll(((JobWidgetMessage) wsEvent.getMessage()).getUpdatedAvailable());\n-\n-                recent.clear();\n-                recent.addAll(((JobWidgetMessage) wsEvent.getMessage()).getUpdatedRecent());\n-\n-                if (availableJobsPanel != null) {\n-                    availableJobsPanel.modelChanged();\n-                    wsEvent.getHandler().add(availableJobsPanel);\n+                List<JobTO> updatedAvailable = ((JobWidgetMessage) wsEvent.getMessage()).getUpdatedAvailable();\n+                if (!updatedAvailable.equals(available)) {\n+                    available.clear();\n+                    available.addAll(updatedAvailable);\n+                    if (availableJobsPanel != null) {\n+                        availableJobsPanel.modelChanged();\n+                        wsEvent.getHandler().add(availableJobsPanel);\n+                    }\n                 }\n-                if (recentExecPanel != null) {\n-                    recentExecPanel.modelChanged();\n-                    wsEvent.getHandler().add(recentExecPanel);\n+\n+                List<ExecTO> updatedRecent = ((JobWidgetMessage) wsEvent.getMessage()).getUpdatedRecent();\n+                if (!updatedRecent.equals(recent)) {\n+                    recent.clear();\n+                    recent.addAll(updatedRecent);\n+                    if (recentExecPanel != null) {\n+                        recentExecPanel.modelChanged();\n+                        wsEvent.getHandler().add(recentExecPanel);\n+                    }\n                 }\n             }\n         } else if (event.getPayload() instanceof JobActionPanel.JobActionPayload) {\n@@ -374,7 +366,7 @@ public IModel<ExecTO> model(final ExecTO object) {\n         }\n     }\n \n-    protected final class JobInfoUpdater implements Runnable {\n+    public static final class JobInfoUpdater implements Runnable {\n \n         private final Application application;\n \n@@ -394,18 +386,12 @@ public void run() {\n                 ThreadContext.setApplication(application);\n                 ThreadContext.setSession(session);\n \n-                List<JobTO> updatedAvailable = getAvailable(session);\n-                List<ExecTO> updatedRecent = getRecent(session);\n-                if (!updatedAvailable.equals(available) || !updatedRecent.equals(recent)) {\n-                    LOG.debug(\"Updated Job info found\");\n-\n-                    WebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n-                    WebSocketPushBroadcaster broadcaster =\n-                            new WebSocketPushBroadcaster(webSocketSettings.getConnectionRegistry());\n-                    broadcaster.broadcast(\n-                            new ConnectedMessage(application, session.getId(), key),\n-                            new JobWidgetMessage(updatedAvailable, updatedRecent));\n-                }\n+                WebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n+                WebSocketPushBroadcaster broadcaster =\n+                        new WebSocketPushBroadcaster(webSocketSettings.getConnectionRegistry());\n+                broadcaster.broadcast(\n+                        new ConnectedMessage(application, session.getId(), key),\n+                        new JobWidgetMessage(getAvailable(session), getRecent(session)));\n             } catch (Throwable t) {\n                 LOG.error(\"Unexpected error while checking for updated Job info\", t);\n             } finally {"},{"sha":"fc2f2700f227d81d9c30c4ca78dceff0af0bfbb7","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":32,"deletions":55,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c34416301b17b148e937390e05a17122b848888e/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=c34416301b17b148e937390e05a17122b848888e","patch":"@@ -30,7 +30,6 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n-import java.util.concurrent.TimeUnit;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n@@ -59,6 +58,7 @@\n import org.apache.syncope.common.lib.to.ExecTO;\n import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n import org.apache.syncope.common.rest.api.service.ReportService;\n import org.apache.wicket.Application;\n@@ -84,7 +84,6 @@\n import org.apache.wicket.model.Model;\n import org.apache.wicket.model.ResourceModel;\n import org.apache.wicket.protocol.ws.WebSocketSettings;\n-import org.apache.wicket.protocol.ws.api.WebSocketBehavior;\n import org.apache.wicket.protocol.ws.api.WebSocketPushBroadcaster;\n import org.apache.wicket.protocol.ws.api.event.WebSocketPushPayload;\n import org.apache.wicket.protocol.ws.api.message.ConnectedMessage;\n@@ -111,8 +110,6 @@ public class ReconciliationWidget extends BaseWidget {\n \n     private final WebMarkupContainer overlay;\n \n-    private boolean checkReconciliationJob = false;\n-\n     public ReconciliationWidget(final String id, final PageReference pageRef) {\n         super(id);\n         this.pageRef = pageRef;\n@@ -140,21 +137,6 @@ public ReconciliationWidget(final String id, final PageReference pageRef) {\n         reportResult.setOutputMarkupId(true);\n         add(reportResult);\n \n-        if (reconciliationReport != null) {\n-            add(new WebSocketBehavior() {\n-\n-                private static final long serialVersionUID = 3507933905864454312L;\n-\n-                @Override\n-                protected void onConnect(final ConnectedMessage message) {\n-                    super.onConnect(message);\n-\n-                    SyncopeConsoleSession.get().scheduleAtFixedRate(\n-                            new ReconciliationJobInfoUpdater(message), 0, 10, TimeUnit.SECONDS);\n-                }\n-            });\n-        }\n-\n         add(new IndicatorAjaxLink<Void>(\"refresh\") {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n@@ -167,9 +149,7 @@ public void onClick(final AjaxRequestTarget target) {\n                     overlay.setVisible(true);\n                     target.add(ReconciliationWidget.this);\n \n-                    synchronized (this) {\n-                        checkReconciliationJob = true;\n-                    }\n+                    SyncopeConsoleSession.get().setCheckReconciliationJob(true);\n \n                     info(getString(Constants.OPERATION_SUCCEEDED));\n                 } catch (Exception e) {\n@@ -205,7 +185,7 @@ public Panel getPanel(final String panelId) {\n                 return new ProgressesPanel(panelId, report.getRun(), progressBeans);\n             }\n         });\n-        tabs.add(new AbstractTab(new ResourceModel(\"users\")) {\n+        tabs.add(new AbstractTab(Model.of(AnyTypeKind.USER.name())) {\n \n             private static final long serialVersionUID = -6815067322125799251L;\n \n@@ -214,7 +194,7 @@ public Panel getPanel(final String panelId) {\n                 return new AnysReconciliationPanel(panelId, report.getUsers(), pageRef);\n             }\n         });\n-        tabs.add(new AbstractTab(new ResourceModel(\"groups\")) {\n+        tabs.add(new AbstractTab(Model.of(AnyTypeKind.GROUP.name())) {\n \n             private static final long serialVersionUID = -6815067322125799251L;\n \n@@ -306,9 +286,7 @@ public void onEvent(final IEvent<?> event) {\n \n                 wsEvent.getHandler().add(ReconciliationWidget.this);\n \n-                synchronized (this) {\n-                    checkReconciliationJob = false;\n-                }\n+                SyncopeConsoleSession.get().setCheckReconciliationJob(false);\n             }\n         }\n     }\n@@ -485,7 +463,7 @@ public IModel<Any> model(final Any object) {\n         }\n     }\n \n-    protected final class ReconciliationJobInfoUpdater implements Runnable {\n+    public static final class ReconciliationJobInfoUpdater implements Runnable {\n \n         private final String applicationName;\n \n@@ -501,37 +479,36 @@ public ReconciliationJobInfoUpdater(final ConnectedMessage message) {\n \n         @Override\n         public void run() {\n-            synchronized (ReconciliationWidget.this) {\n-                if (ReconciliationWidget.this.checkReconciliationJob) {\n-                    try {\n-                        Application application = Application.get(applicationName);\n-                        ThreadContext.setApplication(application);\n-                        ThreadContext.setSession(session);\n+            if (session.isCheckReconciliationJob()) {\n+                try {\n+                    final Application application = Application.get(applicationName);\n+                    ThreadContext.setApplication(application);\n+                    ThreadContext.setSession(session);\n \n-                        JobTO reportJobTO = IterableUtils.find(session.getService(ReportService.class).listJobs(),\n-                                new Predicate<JobTO>() {\n+                    JobTO reportJobTO = IterableUtils.find(session.getService(ReportService.class).listJobs(),\n+                            new Predicate<JobTO>() {\n \n-                            @Override\n-                            public boolean evaluate(final JobTO jobTO) {\n-                                return SyncopeConsoleApplication.get().\n-                                        getReconciliationReportKey().equals(jobTO.getRefKey());\n-                            }\n-                        });\n-                        if (reportJobTO != null && !reportJobTO.isRunning()) {\n-                            LOG.debug(\"Report {} is not running\", reconciliationReportKey);\n-\n-                            WebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n-                            WebSocketPushBroadcaster broadcaster =\n-                                    new WebSocketPushBroadcaster(webSocketSettings.getConnectionRegistry());\n-                            broadcaster.broadcast(\n-                                    new ConnectedMessage(application, session.getId(), key),\n-                                    new ReconciliationJobNotRunningMessage());\n+                        @Override\n+                        public boolean evaluate(final JobTO jobTO) {\n+                            return SyncopeConsoleApplication.class.cast(application).\n+                                    getReconciliationReportKey().equals(jobTO.getRefKey());\n                         }\n-                    } catch (Throwable t) {\n-                        LOG.error(\"Unexpected error while checking for updated reconciliation job info\", t);\n-                    } finally {\n-                        ThreadContext.detach();\n+                    });\n+                    if (reportJobTO != null && !reportJobTO.isRunning()) {\n+                        LOG.debug(\"Report {} is not running\",\n+                                SyncopeConsoleApplication.class.cast(application).getReconciliationReportKey());\n+\n+                        WebSocketSettings webSocketSettings = WebSocketSettings.Holder.get(application);\n+                        WebSocketPushBroadcaster broadcaster =\n+                                new WebSocketPushBroadcaster(webSocketSettings.getConnectionRegistry());\n+                        broadcaster.broadcast(\n+                                new ConnectedMessage(application, session.getId(), key),\n+                                new ReconciliationJobNotRunningMessage());\n                     }\n+                } catch (Throwable t) {\n+                    LOG.error(\"Unexpected error while checking for updated reconciliation job info\", t);\n+                } finally {\n+                    ThreadContext.detach();\n                 }\n             }\n         }"}]}