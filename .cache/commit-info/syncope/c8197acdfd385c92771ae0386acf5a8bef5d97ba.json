{"sha":"c8197acdfd385c92771ae0386acf5a8bef5d97ba","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM4MTk3YWNkZmQzODVjOTI3NzFhZTAzODZhY2Y1YThiZWY1ZDk3YmE=","commit":{"author":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2012-03-22T16:24:17Z"},"committer":{"name":"Marco Di Sabatino Di Diodoro","email":"mdisabatino@apache.org","date":"2012-03-22T16:24:17Z"},"message":"SYNCOPE-46 Add test for issue\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1303874 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"09703aaf668eafccfedca92ba8e087946a01d61c","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/09703aaf668eafccfedca92ba8e087946a01d61c"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c8197acdfd385c92771ae0386acf5a8bef5d97ba","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c8197acdfd385c92771ae0386acf5a8bef5d97ba","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c8197acdfd385c92771ae0386acf5a8bef5d97ba","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c8197acdfd385c92771ae0386acf5a8bef5d97ba/comments","author":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"committer":{"login":"mdisabatino","id":1792527,"node_id":"MDQ6VXNlcjE3OTI1Mjc=","avatar_url":"https://avatars.githubusercontent.com/u/1792527?v=4","gravatar_id":"","url":"https://api.github.com/users/mdisabatino","html_url":"https://github.com/mdisabatino","followers_url":"https://api.github.com/users/mdisabatino/followers","following_url":"https://api.github.com/users/mdisabatino/following{/other_user}","gists_url":"https://api.github.com/users/mdisabatino/gists{/gist_id}","starred_url":"https://api.github.com/users/mdisabatino/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/mdisabatino/subscriptions","organizations_url":"https://api.github.com/users/mdisabatino/orgs","repos_url":"https://api.github.com/users/mdisabatino/repos","events_url":"https://api.github.com/users/mdisabatino/events{/privacy}","received_events_url":"https://api.github.com/users/mdisabatino/received_events","type":"User","site_admin":false},"parents":[{"sha":"8b38ff49391f0330fe8a1539fb3b58cd6dcca4b7","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b38ff49391f0330fe8a1539fb3b58cd6dcca4b7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b38ff49391f0330fe8a1539fb3b58cd6dcca4b7"}],"stats":{"total":46,"additions":26,"deletions":20},"files":[{"sha":"6e1c62ee287ac41b07af3edb4fbefff751bb2690","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserSearchTest.java","status":"modified","additions":26,"deletions":20,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c8197acdfd385c92771ae0386acf5a8bef5d97ba/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c8197acdfd385c92771ae0386acf5a8bef5d97ba/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserSearchTest.java?ref=c8197acdfd385c92771ae0386acf5a8bef5d97ba","patch":"@@ -38,8 +38,8 @@\n import org.syncope.core.util.EntitlementUtil;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = { \"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n-        \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\" })\n+@ContextConfiguration(locations = {\"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n+    \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\"})\n @Transactional\n public class UserSearchTest {\n \n@@ -80,8 +80,7 @@ public void searchWithLikeCondition() {\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond\n-                .getLeafCond(membershipCond));\n+        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(membershipCond));\n \n         assertTrue(subCond.checkValidity());\n \n@@ -143,8 +142,7 @@ public void searchByPageAndSize() {\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n-        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond\n-                .getLeafCond(membershipCond));\n+        NodeCond subCond = NodeCond.getAndCond(NodeCond.getLeafCond(fullnameLeafCond), NodeCond.getLeafCond(membershipCond));\n \n         assertTrue(subCond.checkValidity());\n \n@@ -166,16 +164,14 @@ public void searchByMembership() {\n         MembershipCond membershipCond = new MembershipCond();\n         membershipCond.setRoleId(1L);\n \n-        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond\n-                .getLeafCond(membershipCond));\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(membershipCond));\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n         membershipCond = new MembershipCond();\n         membershipCond.setRoleId(5L);\n \n-        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond\n-                .getNotLeafCond(membershipCond));\n+        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getNotLeafCond(membershipCond));\n         assertNotNull(users);\n         assertEquals(4, users.size());\n     }\n@@ -185,16 +181,14 @@ public void searchByIsNull() {\n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.ISNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond\n-                .getLeafCond(coolLeafCond));\n+        List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(coolLeafCond));\n         assertNotNull(users);\n         assertEquals(3, users.size());\n \n         coolLeafCond = new AttributeCond(AttributeCond.Type.ISNOTNULL);\n         coolLeafCond.setSchema(\"cool\");\n \n-        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond\n-                .getLeafCond(coolLeafCond));\n+        users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()), NodeCond.getLeafCond(coolLeafCond));\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }\n@@ -228,8 +222,7 @@ public void searchByUsernameAndId() {\n         idRightCond.setSchema(\"id\");\n         idRightCond.setExpression(\"2\");\n \n-        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond\n-                .getLeafCond(idRightCond));\n+        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond.getLeafCond(idRightCond));\n \n         final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition);\n@@ -250,8 +243,7 @@ public void searchByUsernameAndFullname() {\n         idRightCond.setSchema(\"fullname\");\n         idRightCond.setExpression(\"fabio.mart%\");\n \n-        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond\n-                .getLeafCond(idRightCond));\n+        final NodeCond searchCondition = NodeCond.getOrCond(NodeCond.getLeafCond(usernameLeafCond), NodeCond.getLeafCond(idRightCond));\n \n         final List<SyncopeUser> matchingUsers = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n                 searchCondition);\n@@ -298,8 +290,7 @@ public void issue202() {\n         final ResourceCond ws1 = new ResourceCond();\n         ws1.setResourceName(\"ws-target-resource-list-mappings-1\");\n \n-        final NodeCond searchCondition = NodeCond\n-                .getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getNotLeafCond(ws1));\n+        final NodeCond searchCondition = NodeCond.getAndCond(NodeCond.getNotLeafCond(ws2), NodeCond.getNotLeafCond(ws1));\n         assertTrue(searchCondition.checkValidity());\n \n         final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n@@ -323,4 +314,19 @@ public void issue242() {\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n+\n+    @Test\n+    public void issueSYNCOPE46() {\n+        final SyncopeUserCond cond = new SyncopeUserCond(AttributeCond.Type.LIKE);\n+        cond.setSchema(\"username\");\n+        cond.setExpression(\"%user%\");\n+\n+        final NodeCond searchCondition = NodeCond.getLeafCond(cond);\n+        assertTrue(searchCondition.checkValidity());\n+\n+        final List<SyncopeUser> users = searchDAO.search(EntitlementUtil.getRoleIds(entitlementDAO.findAll()),\n+                searchCondition);\n+        assertNotNull(users);\n+        assertEquals(4, users.size());\n+    }\n }"}]}