{"sha":"e06159e1a6323a63d337741826860fc3a7a85f0c","node_id":"C_kwDOJfYA1toAKGUwNjE1OWUxYTYzMjNhNjNkMzM3NzQxODI2ODYwZmMzYTdhODVmMGM","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-09-28T10:21:46Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-09-28T10:30:07Z"},"message":"[SYNCOPE-1644] Now relying on SpringBeanJobFactory which creates the bean and immediately executes it","tree":{"sha":"71158a3377f0cf289c105c42eb8b79831bce49fd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/71158a3377f0cf289c105c42eb8b79831bce49fd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e06159e1a6323a63d337741826860fc3a7a85f0c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e06159e1a6323a63d337741826860fc3a7a85f0c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e06159e1a6323a63d337741826860fc3a7a85f0c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e06159e1a6323a63d337741826860fc3a7a85f0c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f40236adf4c68abd10776a0a9890028901c8f8a1","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f40236adf4c68abd10776a0a9890028901c8f8a1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f40236adf4c68abd10776a0a9890028901c8f8a1"}],"stats":{"total":216,"additions":68,"deletions":148},"files":[{"sha":"14021422c246c35e218cbe9ec71db641b9ee31f4","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/job/JobManager.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e06159e1a6323a63d337741826860fc3a7a85f0c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e06159e1a6323a63d337741826860fc3a7a85f0c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fjob%2FJobManager.java?ref=e06159e1a6323a63d337741826860fc3a7a85f0c","patch":"@@ -30,6 +30,10 @@\n @SuppressWarnings(\"squid:S1214\")\n public interface JobManager {\n \n+    String TASK_KEY = \"task\";\n+\n+    String REPORT_KEY = \"report\";\n+\n     String DOMAIN_KEY = \"domain\";\n     String EXECUTOR_KEY = \"executor\";\n "},{"sha":"96ab0957590a4a3a112beed3bb82b67488c39732","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e06159e1a6323a63d337741826860fc3a7a85f0c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e06159e1a6323a63d337741826860fc3a7a85f0c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=e06159e1a6323a63d337741826860fc3a7a85f0c","patch":"@@ -155,10 +155,10 @@\n import org.apache.syncope.core.provisioning.java.data.UserDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.WAConfigDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.wa.WAClientAppDataBinderImpl;\n-import org.apache.syncope.core.provisioning.java.job.AutowiringSpringBeanJobFactory;\n import org.apache.syncope.core.provisioning.java.job.DefaultJobManager;\n import org.apache.syncope.core.provisioning.java.job.SchedulerDBInit;\n import org.apache.syncope.core.provisioning.java.job.SchedulerShutdown;\n+import org.apache.syncope.core.provisioning.java.job.SyncopeSpringBeanJobFactory;\n import org.apache.syncope.core.provisioning.java.job.SystemLoadReporterJob;\n import org.apache.syncope.core.provisioning.java.job.notification.DefaultNotificationJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.notification.NotificationJob;\n@@ -311,7 +311,7 @@ public SchedulerFactoryBean scheduler() {\n         scheduler.setOverwriteExistingJobs(true);\n         scheduler.setDataSource(masterDataSource);\n         scheduler.setTransactionManager(masterTransactionManager);\n-        scheduler.setJobFactory(new AutowiringSpringBeanJobFactory());\n+        scheduler.setJobFactory(new SyncopeSpringBeanJobFactory());\n \n         Properties quartzProperties = new Properties();\n         quartzProperties.setProperty("},{"sha":"109c9c2759779aec3baa7aad6841da4766c75cad","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/AutowiringSpringBeanJobFactory.java","status":"removed","additions":0,"deletions":85,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f40236adf4c68abd10776a0a9890028901c8f8a1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAutowiringSpringBeanJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f40236adf4c68abd10776a0a9890028901c8f8a1/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAutowiringSpringBeanJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FAutowiringSpringBeanJobFactory.java?ref=f40236adf4c68abd10776a0a9890028901c8f8a1","patch":"@@ -1,85 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.provisioning.java.job;\n-\n-import org.quartz.SchedulerContext;\n-import org.quartz.spi.TriggerFiredBundle;\n-import org.springframework.beans.BeanWrapper;\n-import org.springframework.beans.MutablePropertyValues;\n-import org.springframework.beans.PropertyAccessorFactory;\n-import org.springframework.beans.factory.config.AutowireCapableBeanFactory;\n-import org.springframework.context.ApplicationContext;\n-import org.springframework.context.ApplicationContextAware;\n-import org.springframework.scheduling.quartz.SpringBeanJobFactory;\n-\n-/**\n- * An implementation of SpringBeanJobFactory that retrieves the bean from the Spring context so that autowiring and\n- * transactions work.\n- */\n-public class AutowiringSpringBeanJobFactory extends SpringBeanJobFactory implements ApplicationContextAware {\n-\n-    private transient AutowireCapableBeanFactory beanFactory;\n-\n-    private String[] ignoredUnknownProperties;\n-\n-    private SchedulerContext schedulerContext;\n-\n-    @Override\n-    public void setApplicationContext(final ApplicationContext context) {\n-        beanFactory = context.getAutowireCapableBeanFactory();\n-    }\n-\n-    @Override\n-    public void setIgnoredUnknownProperties(final String... ignoredUnknownProperties) {\n-        String[] defensiveCopy = ignoredUnknownProperties.clone();\n-        super.setIgnoredUnknownProperties(defensiveCopy);\n-        this.ignoredUnknownProperties = defensiveCopy;\n-    }\n-\n-    @Override\n-    public void setSchedulerContext(final SchedulerContext schedulerContext) {\n-        super.setSchedulerContext(schedulerContext);\n-        this.schedulerContext = schedulerContext;\n-    }\n-\n-    @Override\n-    protected Object createJobInstance(final TriggerFiredBundle bundle) throws Exception {\n-        Object job = beanFactory.getBean(bundle.getJobDetail().getKey().getName());\n-        if (isEligibleForPropertyPopulation(job)) {\n-            BeanWrapper bw = PropertyAccessorFactory.forBeanPropertyAccess(job);\n-            MutablePropertyValues pvs = new MutablePropertyValues();\n-            if (this.schedulerContext != null) {\n-                pvs.addPropertyValues(this.schedulerContext);\n-            }\n-            pvs.addPropertyValues(bundle.getJobDetail().getJobDataMap());\n-            pvs.addPropertyValues(bundle.getTrigger().getJobDataMap());\n-            if (this.ignoredUnknownProperties != null) {\n-                for (String propName : this.ignoredUnknownProperties) {\n-                    if (pvs.contains(propName) && !bw.isWritableProperty(propName)) {\n-                        pvs.removePropertyValue(propName);\n-                    }\n-                }\n-                bw.setPropertyValues(pvs);\n-            } else {\n-                bw.setPropertyValues(pvs, true);\n-            }\n-        }\n-        return job;\n-    }\n-}"},{"sha":"63c48a5709c40a2355bbe6bcc86cf46bb61b5713","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/DefaultJobManager.java","status":"modified","additions":17,"deletions":61,"changes":78,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e06159e1a6323a63d337741826860fc3a7a85f0c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e06159e1a6323a63d337741826860fc3a7a85f0c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FDefaultJobManager.java?ref=e06159e1a6323a63d337741826860fc3a7a85f0c","patch":"@@ -37,7 +37,6 @@\n import org.apache.syncope.common.lib.types.IdRepoImplementationType;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.core.persistence.api.DomainHolder;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.ReportDAO;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n import org.apache.syncope.core.persistence.api.entity.Report;\n@@ -46,7 +45,6 @@\n import org.apache.syncope.core.persistence.api.entity.task.Task;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.SyncopeCoreLoader;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n@@ -61,8 +59,6 @@\n import org.quartz.TriggerKey;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.BeanCreationException;\n-import org.springframework.beans.factory.support.AbstractBeanDefinition;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n import org.springframework.transaction.annotation.Transactional;\n import org.apache.syncope.core.provisioning.api.job.JobManager;\n@@ -76,6 +72,7 @@\n import org.apache.syncope.core.provisioning.java.pushpull.PullJobDelegate;\n import org.apache.syncope.core.provisioning.java.pushpull.PushJobDelegate;\n import org.apache.syncope.core.spring.security.SecurityProperties;\n+import org.quartz.Trigger;\n \n public class DefaultJobManager implements JobManager, SyncopeCoreLoader {\n \n@@ -157,7 +154,7 @@ public boolean isRunning(final JobKey jobKey) throws SchedulerException {\n     }\n \n     protected void registerJob(\n-            final String jobName, final Job jobInstance,\n+            final String jobName, final Class<? extends Job> jobClass,\n             final String cronExpression, final Date startAt,\n             final Map<String, Object> jobMap)\n             throws SchedulerException {\n@@ -170,74 +167,40 @@ protected void registerJob(\n         // 0. unregister job\n         unregisterJob(jobName);\n \n-        // 1. Job bean\n-        ApplicationContextProvider.getBeanFactory().registerSingleton(jobName, jobInstance);\n-\n-        // 2. JobDetail bean\n-        JobBuilder jobDetailBuilder = JobBuilder.newJob(jobInstance.getClass()).\n+        // 1. JobDetail\n+        JobBuilder jobDetailBuilder = JobBuilder.newJob(jobClass).\n                 withIdentity(jobName).\n                 usingJobData(new JobDataMap(jobMap));\n \n-        // 3. Trigger\n+        // 2. Trigger\n         if (cronExpression == null && startAt == null) {\n             // Jobs added with no trigger must be durable\n             scheduler.getScheduler().addJob(jobDetailBuilder.storeDurably().build(), true);\n         } else {\n-            TriggerBuilder<?> triggerBuilder;\n+            TriggerBuilder<Trigger> triggerBuilder = TriggerBuilder.newTrigger().\n+                    withIdentity(JobNamer.getTriggerName(jobName));\n \n             if (cronExpression == null) {\n-                triggerBuilder = TriggerBuilder.newTrigger().\n-                        withIdentity(JobNamer.getTriggerName(jobName)).\n-                        startAt(startAt);\n+                triggerBuilder.startAt(startAt);\n             } else {\n-                triggerBuilder = TriggerBuilder.newTrigger().\n-                        withIdentity(JobNamer.getTriggerName(jobName)).\n-                        withSchedule(CronScheduleBuilder.cronSchedule(cronExpression));\n+                triggerBuilder.withSchedule(CronScheduleBuilder.cronSchedule(cronExpression));\n \n                 if (startAt == null) {\n-                    triggerBuilder = triggerBuilder.startNow();\n+                    triggerBuilder.startNow();\n                 } else {\n-                    triggerBuilder = triggerBuilder.startAt(startAt);\n+                    triggerBuilder.startAt(startAt);\n                 }\n             }\n \n             scheduler.getScheduler().scheduleJob(jobDetailBuilder.build(), triggerBuilder.build());\n         }\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    protected static <T> T createSpringBean(final Class<T> jobClass) {\n-        T jobInstance = null;\n-        for (int i = 0; i < 5 && jobInstance == null; i++) {\n-            LOG.debug(\"{} attempt to create Spring bean for {}\", i, jobClass);\n-            try {\n-                jobInstance = (T) ApplicationContextProvider.getBeanFactory().\n-                        createBean(jobClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, false);\n-                LOG.debug(\"{} attempt to create Spring bean for {} succeeded\", i, jobClass);\n-            } catch (BeanCreationException e) {\n-                LOG.error(\"Could not create Spring bean for {}\", jobClass, e);\n-                try {\n-                    Thread.sleep(1000);\n-                } catch (final InterruptedException ex) {\n-                    // ignore\n-                }\n-            }\n-        }\n-        if (jobInstance == null) {\n-            throw new NotFoundException(\"Spring bean for \" + jobClass);\n-        }\n-\n-        return jobInstance;\n-    }\n-\n     @Override\n     public Map<String, Object> register(final SchedTask task, final Date startAt, final long interruptMaxRetries,\n             final String executor)\n             throws SchedulerException {\n \n-        TaskJob job = createSpringBean(TaskJob.class);\n-        job.setTaskKey(task.getKey());\n-\n         Implementation jobDelegate = task.getJobDelegate() == null\n                 ? task instanceof PullTask\n                         ? implementationDAO.findByType(IdRepoImplementationType.TASKJOB_DELEGATE).stream().\n@@ -255,11 +218,12 @@ public Map<String, Object> register(final SchedTask task, final Date startAt, fi\n         }\n \n         Map<String, Object> jobMap = createJobMapForExecutionContext(executor);\n+        jobMap.put(JobManager.TASK_KEY, task.getKey());\n         jobMap.put(TaskJob.DELEGATE_IMPLEMENTATION, jobDelegate.getKey());\n \n         registerJob(\n                 JobNamer.getJobKey(task).getName(),\n-                job,\n+                TaskJob.class,\n                 task.getCronExpression(),\n                 startAt,\n                 jobMap);\n@@ -270,12 +234,10 @@ public Map<String, Object> register(final SchedTask task, final Date startAt, fi\n     public void register(final Report report, final Date startAt, final long interruptMaxRetries,\n             final String executor) throws SchedulerException {\n \n-        ReportJob job = createSpringBean(ReportJob.class);\n-        job.setReportKey(report.getKey());\n-\n         Map<String, Object> jobMap = createJobMapForExecutionContext(executor);\n+        jobMap.put(JobManager.REPORT_KEY, report.getKey());\n \n-        registerJob(JobNamer.getJobKey(report).getName(), job, report.getCronExpression(), startAt, jobMap);\n+        registerJob(JobNamer.getJobKey(report).getName(), ReportJob.class, report.getCronExpression(), startAt, jobMap);\n     }\n \n     protected static Map<String, Object> createJobMapForExecutionContext(final String executor) {\n@@ -292,10 +254,6 @@ protected void unregisterJob(final String jobName) {\n         } catch (SchedulerException e) {\n             LOG.error(\"Could not remove job \" + jobName, e);\n         }\n-\n-        if (ApplicationContextProvider.getBeanFactory().containsSingleton(jobName)) {\n-            ApplicationContextProvider.getBeanFactory().destroySingleton(jobName);\n-        }\n     }\n \n     @Override\n@@ -396,11 +354,10 @@ public void load(final String domain, final DataSource datasource) {\n                         NotificationJob.class.getSimpleName(), conf.getLeft());\n \n                 try {\n-                    NotificationJob job = createSpringBean(NotificationJob.class);\n                     Map<String, Object> jobData = createJobMapForExecutionContext(securityProperties.getAdminUser());\n                     registerJob(\n                             NOTIFICATION_JOB.getName(),\n-                            job,\n+                            NotificationJob.class,\n                             conf.getLeft(),\n                             null,\n                             jobData);\n@@ -412,11 +369,10 @@ public void load(final String domain, final DataSource datasource) {\n             // 4. SystemLoadReporterJob (fixed schedule, every minute)\n             LOG.debug(\"Registering {}\", SystemLoadReporterJob.class);\n             try {\n-                SystemLoadReporterJob job = createSpringBean(SystemLoadReporterJob.class);\n                 Map<String, Object> jobData = createJobMapForExecutionContext(securityProperties.getAdminUser());\n                 registerJob(\n                         StringUtils.uncapitalize(SystemLoadReporterJob.class.getSimpleName()),\n-                        job,\n+                        SystemLoadReporterJob.class,\n                         \"0 * * * * ?\",\n                         null,\n                         jobData);"},{"sha":"c690f390e84eaf1f080c75b8e79ce517c77a8c4b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/SyncopeSpringBeanJobFactory.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e06159e1a6323a63d337741826860fc3a7a85f0c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSyncopeSpringBeanJobFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e06159e1a6323a63d337741826860fc3a7a85f0c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSyncopeSpringBeanJobFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FSyncopeSpringBeanJobFactory.java?ref=e06159e1a6323a63d337741826860fc3a7a85f0c","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import java.util.Optional;\n+import org.apache.syncope.core.provisioning.api.job.JobManager;\n+import org.apache.syncope.core.provisioning.java.job.report.ReportJob;\n+import org.quartz.spi.TriggerFiredBundle;\n+import org.springframework.scheduling.quartz.SpringBeanJobFactory;\n+\n+public class SyncopeSpringBeanJobFactory extends SpringBeanJobFactory {\n+\n+    @Override\n+    protected Object createJobInstance(final TriggerFiredBundle bundle) throws Exception {\n+        Object job = super.createJobInstance(bundle);\n+\n+        if (bundle.getJobDetail().getJobDataMap() != null) {\n+            if (job instanceof ReportJob) {\n+                Optional.ofNullable(bundle.getJobDetail().getJobDataMap().getString(JobManager.REPORT_KEY)).\n+                        ifPresent(((ReportJob) job)::setReportKey);\n+            } else if (job instanceof TaskJob) {\n+                Optional.ofNullable(bundle.getJobDetail().getJobDataMap().getString(JobManager.TASK_KEY)).\n+                        ifPresent(((TaskJob) job)::setTaskKey);\n+            }\n+        }\n+\n+        return job;\n+    }\n+}"}]}