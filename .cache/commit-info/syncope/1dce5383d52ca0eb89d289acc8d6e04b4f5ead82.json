{"sha":"1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFkY2U1MzgzZDUyY2EwZWI4OWQyODlhY2M4ZDZlMDRiNGY1ZWFkODI=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-09-09T10:08:55Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2015-09-09T10:08:55Z"},"message":"[SYNCOPE-156] merge from master","tree":{"sha":"301fb8f04fcc850da723c38b5b005eb46fbfddd8","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/301fb8f04fcc850da723c38b5b005eb46fbfddd8"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"0419594e89a7416470bd8950b1cc8cd75d023833","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/0419594e89a7416470bd8950b1cc8cd75d023833","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/0419594e89a7416470bd8950b1cc8cd75d023833"},{"sha":"00988759750f53f6737ef7d50e7faf63192257fa","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/00988759750f53f6737ef7d50e7faf63192257fa","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/00988759750f53f6737ef7d50e7faf63192257fa"}],"stats":{"total":4088,"additions":2713,"deletions":1375},"files":[{"sha":"a23cd5bca6d5494c7a769c071ef6937568d879e1","filename":".gitignore","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/.gitignore","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/.gitignore","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/.gitignore?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -6,7 +6,6 @@\n .settings\n eclipse-classes\n target\n-\n maven-eclipse.xml\n .externalToolBuilders\n archetype/src/main/resources/archetype-resources/pom.xml"},{"sha":"0559bf0b3dc92489ac0901a3caea960c447ffcf8","filename":"archetype/src/main/resources/archetype-resources/pom.xml","status":"removed","additions":0,"deletions":134,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0419594e89a7416470bd8950b1cc8cd75d023833/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0419594e89a7416470bd8950b1cc8cd75d023833/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fpom.xml?ref=0419594e89a7416470bd8950b1cc8cd75d023833","patch":"@@ -1,134 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?><!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n---><project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n-\n-  <modelVersion>4.0.0</modelVersion>\n-\n-  <parent>\n-    <groupId>org.apache.syncope</groupId>\n-    <artifactId>syncope</artifactId>\n-    <version xmlns=\"\">2.0.0-SNAPSHOT</version>\n-  </parent>\n-\n-  <properties>\n-    <syncope.version xmlns=\"\">2.0.0-SNAPSHOT</syncope.version>\n-    <secretKey>${secretKey}</secretKey>\n-    <anonymousKey>${anonymousKey}</anonymousKey>\n-  </properties>\n-\n-  <name>Apache Syncope sample project</name>\n-  <groupId>${groupId}</groupId>\n-  <artifactId>${artifactId}</artifactId>\n-  <version>${version}</version>\n-  <packaging>pom</packaging>\n-\n-  <dependencyManagement>\n-    <dependencies>\n-      <dependency>  \n-        <groupId>org.apache.syncope.common</groupId>\n-        <artifactId>syncope-common-lib</artifactId>\n-        <version>${syncope.version}</version>\n-      </dependency>\n-      \n-      <dependency>\n-        <groupId>org.apache.syncope.core</groupId>\n-        <artifactId>syncope-core-rest-cxf</artifactId>\n-        <version>${syncope.version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>org.apache.syncope.core</groupId>\n-        <artifactId>syncope-core-workflow-java</artifactId>\n-        <version>${syncope.version}</version>\n-      </dependency>\n-      <dependency>\n-        <groupId>org.apache.syncope.core</groupId>\n-        <artifactId>syncope-core-persistence-jpa</artifactId>\n-        <version>${syncope.version}</version>\n-      </dependency>\n-    \n-      <dependency>\n-        <groupId>org.apache.syncope.core</groupId>\n-        <artifactId>syncope-core-workflow-activiti</artifactId>\n-        <version>${syncope.version}</version>\n-      </dependency>\n-        \n-      <dependency>\n-        <groupId>org.apache.syncope.client</groupId>\n-        <artifactId>syncope-client-console</artifactId>\n-        <version>${syncope.version}</version>\n-      </dependency>\n-    </dependencies>\n-  </dependencyManagement>\n-    \n-  <build>\n-    \n-    <!-- Disable checks for generated projects -->\n-    <plugins>\n-      <plugin>\n-        <groupId>org.codehaus.mojo</groupId>\n-        <artifactId>ianal-maven-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <executions>\n-          <execution>            \n-            <goals>\n-              <goal>verify-legal-files</goal>\n-            </goals>\n-            <phase>none</phase>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.rat</groupId>\n-        <artifactId>apache-rat-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <executions>\n-          <execution>\n-            <goals>\n-              <goal>check</goal>\n-            </goals>\n-            <phase>none</phase>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <configuration>\n-          <configLocation>sun_checks.xml</configLocation>\n-          <targetJdk>${targetJdk}</targetJdk>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <goals>\n-              <goal>check</goal>\n-            </goals>\n-            <phase>none</phase>\n-          </execution>\n-        </executions>\n-      </plugin>\n-    </plugins>\n-  </build>\n-    \n-  <modules>\n-    <module>common</module>\n-    <module>core</module>\n-    <module>console</module>\n-  </modules>\n-\n-</project>"},{"sha":"e7a648721c4141c0bd02df1443c84e297d11ca01","filename":"archetype/src/main/resources/meta-pom.xml","status":"modified","additions":4,"deletions":33,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Fmeta-pom.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -33,6 +33,9 @@ under the License.\n     <syncope.version></syncope.version>\n     <secretKey>${secretKey}</secretKey>\n     <anonymousKey>${anonymousKey}</anonymousKey>\n+    \n+    <rat.skip>true</rat.skip>\n+    <checkstyle.skip>true</checkstyle.skip>\n   </properties>\n \n   <name>Apache Syncope sample project</name>\n@@ -79,9 +82,7 @@ under the License.\n     </dependencies>\n   </dependencyManagement>\n     \n-  <build>\n-    \n-    <!-- Disable checks for generated projects -->\n+  <build>    \n     <plugins>\n       <plugin>\n         <groupId>org.codehaus.mojo</groupId>\n@@ -96,36 +97,6 @@ under the License.\n           </execution>\n         </executions>\n       </plugin>\n-      <plugin>\n-        <groupId>org.apache.rat</groupId>\n-        <artifactId>apache-rat-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <executions>\n-          <execution>\n-            <goals>\n-              <goal>check</goal>\n-            </goals>\n-            <phase>none</phase>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-checkstyle-plugin</artifactId>\n-        <inherited>true</inherited>\n-        <configuration>\n-          <configLocation>sun_checks.xml</configLocation>\n-          <targetJdk>${targetJdk}</targetJdk>\n-        </configuration>\n-        <executions>\n-          <execution>\n-            <goals>\n-              <goal>check</goal>\n-            </goals>\n-            <phase>none</phase>\n-          </execution>\n-        </executions>\n-      </plugin>\n     </plugins>\n   </build>\n     "},{"sha":"5c0358793ec4884c0df4c6a89a6ebfc699ac2c8b","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -28,15 +28,18 @@\n import java.util.Locale;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.pages.BasePage;\n+import org.apache.syncope.client.console.pages.MustChangePassword;\n import org.apache.syncope.client.console.pages.Dashboard;\n import org.apache.syncope.client.console.pages.Login;\n import org.apache.syncope.client.console.resources.FilesystemResource;\n import org.apache.syncope.client.console.resources.WorkflowDefGETResource;\n import org.apache.syncope.client.console.resources.WorkflowDefPUTResource;\n import org.apache.syncope.client.console.themes.AdminLTE;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.wicket.Page;\n import org.apache.wicket.authroles.authentication.AbstractAuthenticatedWebSession;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebApplication;\n+import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n import org.apache.wicket.authroles.authorization.strategies.role.metadata.MetaDataRoleAuthorizationStrategy;\n import org.apache.wicket.markup.html.WebPage;\n import org.apache.wicket.protocol.http.WebApplication;\n@@ -142,7 +145,10 @@ protected Class<? extends WebPage> getSignInPageClass() {\n \n     @Override\n     public Class<? extends Page> getHomePage() {\n-        return Dashboard.class;\n+        return AuthenticatedWebSession.get().isSignedIn()\n+                && SyncopeConsoleSession.get().owns(Entitlement.MUST_CHANGE_PASSWORD)\n+                        ? MustChangePassword.class\n+                        : Dashboard.class;\n     }\n \n }"},{"sha":"23fb25f55d13ad302a7739db3a44e80912f018cd","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/Login.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -112,6 +112,7 @@ protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         };\n         submitButton.setDefaultFormProcessing(false);\n         form.add(submitButton);\n+        form.setDefaultButton(submitButton);\n \n         add(form);\n     }"},{"sha":"53965610f98ea33f01d6e4956f1bd51c3039e0e3","filename":"client/console/src/main/java/org/apache/syncope/client/console/pages/MustChangePassword.java","status":"added","additions":120,"deletions":0,"changes":120,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,120 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.pages;\n+\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.Constants;\n+import org.apache.syncope.client.console.panels.NotificationPanel;\n+import org.apache.syncope.client.console.rest.UserSelfRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.AjaxPasswordFieldPanel;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n+import org.apache.wicket.markup.html.WebPage;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.PasswordTextField;\n+import org.apache.wicket.markup.html.form.StatelessForm;\n+import org.apache.wicket.markup.html.form.TextField;\n+import org.apache.wicket.markup.html.form.validation.EqualPasswordInputValidator;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.request.mapper.parameter.PageParameters;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class MustChangePassword extends WebPage {\n+\n+    private static final long serialVersionUID = 5889157642852559004L;\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(MustChangePassword.class);\n+\n+    @SpringBean\n+    private UserSelfRestClient userSelfRestClient;\n+\n+    private final NotificationPanel feedbackPanel;\n+\n+    private final StatelessForm<Void> form;\n+\n+    private final TextField<String> usernameField;\n+\n+    private final AjaxPasswordFieldPanel passwordField;\n+\n+    private final AjaxPasswordFieldPanel confirmPasswordField;\n+\n+    public MustChangePassword(final PageParameters parameters) {\n+        super(parameters);\n+\n+        feedbackPanel = new NotificationPanel(Constants.FEEDBACK);\n+        add(feedbackPanel);\n+\n+        form = new StatelessForm<>(\"changePassword\");\n+        form.setOutputMarkupId(true);\n+\n+        usernameField = new TextField<>(\"username\", new Model<>(SyncopeConsoleSession.get().getSelfTO().getUsername()));\n+        usernameField.setMarkupId(\"username\");\n+        usernameField.setEnabled(false);\n+        form.add(usernameField);\n+\n+        passwordField = new AjaxPasswordFieldPanel(\"password\", \"password\", new Model<String>());\n+        passwordField.setRequired(true);\n+        passwordField.setMarkupId(\"password\");\n+        passwordField.setPlaceholder(\"password\");\n+        ((PasswordTextField) passwordField.getField()).setResetPassword(true);\n+        form.add(passwordField);\n+\n+        confirmPasswordField = new AjaxPasswordFieldPanel(\"confirmPassword\", \"confirmPassword\", new Model<String>());\n+        confirmPasswordField.setRequired(true);\n+        confirmPasswordField.setMarkupId(\"confirmPassword\");\n+        confirmPasswordField.setPlaceholder(\"confirmPassword\");\n+        ((PasswordTextField) confirmPasswordField.getField()).setResetPassword(true);\n+        form.add(confirmPasswordField);\n+\n+        form.add(new EqualPasswordInputValidator(passwordField.getField(), confirmPasswordField.getField()));\n+\n+        AjaxButton submitButton = new AjaxButton(\"submit\", new Model<>(getString(\"submit\"))) {\n+\n+            private static final long serialVersionUID = 429178684321093953L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n+                try {\n+                    userSelfRestClient.changePassword(passwordField.getModelObject());\n+\n+                    SyncopeConsoleSession.get().invalidate();\n+\n+                    setResponsePage(getApplication().getHomePage());\n+                } catch (Exception e) {\n+                    LOG.error(\"While changing password for {}\",\n+                            SyncopeConsoleSession.get().getSelfTO().getUsername(), e);\n+                    error(getString(Constants.ERROR) + \": \" + e.getMessage());\n+                    feedbackPanel.refresh(target);\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n+                feedbackPanel.refresh(target);\n+            }\n+\n+        };\n+        form.add(submitButton);\n+        form.setDefaultButton(submitButton);\n+\n+        add(form);\n+    }\n+}"},{"sha":"4f5e8eba051f9f27c8db2ec11e561b3d81663a67","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ConnectorModal.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnectorModal.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.wicket.Component.ENABLE;\n-\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -317,8 +315,8 @@ public void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n         connectorPropForm.add(check);\n \n         // form - third tab (capabilities)\n-        final IModel<List<ConnectorCapability>> capabilities\n-                = new LoadableDetachableModel<List<ConnectorCapability>>() {\n+        final IModel<List<ConnectorCapability>> capabilities =\n+                 new LoadableDetachableModel<List<ConnectorCapability>>() {\n \n                     private static final long serialVersionUID = 5275935387613157437L;\n \n@@ -327,8 +325,8 @@ protected List<ConnectorCapability> load() {\n                         return Arrays.asList(ConnectorCapability.values());\n                     }\n                 };\n-        CheckBoxMultipleChoiceFieldPanel<ConnectorCapability> capabilitiesPalette\n-                = new CheckBoxMultipleChoiceFieldPanel<>(\n+        CheckBoxMultipleChoiceFieldPanel<ConnectorCapability> capabilitiesPalette =\n+                 new CheckBoxMultipleChoiceFieldPanel<>(\n                         \"capabilitiesPalette\",\n                         new PropertyModel<List<ConnectorCapability>>(this, \"selectedCapabilities\"), capabilities);\n "},{"sha":"b8150aa22bb888e5fa8865ed2f2daf291946228e","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupModalPanel.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupModalPanel.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -48,12 +48,12 @@ public class GroupModalPanel extends AbstractModalPanel {\n \n     protected GroupTO originalGroupTO;\n \n-    public GroupModalPanel(final String id, final Modal window, final GroupTO groupTO) {\n+    public GroupModalPanel(final String id, final Modal<?> window, final GroupTO groupTO) {\n         this(id, window, groupTO, Mode.ADMIN);\n     }\n \n     @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n-    public GroupModalPanel(final String id, final Modal window, final GroupTO groupTO, final Mode mode) {\n+    public GroupModalPanel(final String id, final Modal<?> window, final GroupTO groupTO, final Mode mode) {\n \n         super(id);\n \n@@ -83,7 +83,6 @@ public GroupModalPanel(final String id, final Modal window, final GroupTO groupT\n             protected void onSubmit(final AjaxRequestTarget target, final Form<?> form) {\n                 try {\n                     submitAction(target, form);\n-                    \n                 } catch (Exception e) {\n                     LOG.error(\"Failure managing groupTO {}\", groupTO, e);\n                     error(getString(Constants.ERROR) + \": \" + e.getMessage());"},{"sha":"cfa05a1efb21497b59668aaa732b4a769262d88c","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/GroupSearchResultPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupSearchResultPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupSearchResultPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FGroupSearchResultPanel.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -126,7 +126,7 @@ protected List<IColumn<AnyTO, String>> getColumns() {\n             private static final long serialVersionUID = -3503023501954863131L;\n \n             @Override\n-            public ActionLinksPanel getActions(final String componentId, final IModel<AnyTO> model) {\n+            public ActionLinksPanel<AnyTO> getActions(final String componentId, final IModel<AnyTO> model) {\n \n                 final ActionLinksPanel.Builder<AnyTO> panel = ActionLinksPanel.builder(page.getPageReference());\n "},{"sha":"b9abec3af3a1421d853be0fc300930acdac4c78b","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmDetails.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmDetails.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -20,12 +20,13 @@\n \n import org.apache.syncope.client.console.wicket.markup.html.form.AjaxTextFieldPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.FieldPanel;\n+import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.PropertyModel;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n \n-public class RealmDetails<RealmTO> extends Panel {\n+public class RealmDetails extends Panel {\n \n     private static final long serialVersionUID = -1100228004207271270L;\n "},{"sha":"29506f40eb337d727fcfbff555bd0c3a31bd8b76","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/RealmModalPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmModalPanel.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -68,7 +68,7 @@ public RealmModalPanel(\n         final Form<RealmTO> form = new Form<>(\"realmForm\");\n         form.setModel(new CompoundPropertyModel<>(realmTO));\n \n-        final RealmDetails<RealmTO> realmDetail = new RealmDetails<>(\"details\", realmTO);\n+        final RealmDetails realmDetail = new RealmDetails(\"details\", realmTO);\n         if (SyncopeConsoleSession.get().owns(entitlement)) {\n             MetaDataRoleAuthorizationStrategy.authorize(realmDetail, ENABLE, entitlement);\n         }\n@@ -79,8 +79,8 @@ public RealmModalPanel(\n         add(form);\n     }\n \n-    protected PrimaryModalButton getOnSubmit(final Form form) {\n-        return new PrimaryModalButton(modal.getModalInputId(), \"submit\", form) {\n+    protected final PrimaryModalButton getOnSubmit(final Form form) {\n+        return new PrimaryModalButton(BaseModal.getModalInputId(), \"submit\", form) {\n \n             private static final long serialVersionUID = -958724007591692537L;\n "},{"sha":"54b22b8230c6c0ebf862f81503b3fc5262629ed6","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/ResourceModal.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FResourceModal.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.console.panels;\n \n-import static org.apache.wicket.Component.ENABLE;\n-\n import java.util.ArrayList;\n import java.util.Collection;\n import org.apache.commons.collections4.CollectionUtils;"},{"sha":"dc71a5423566710e8a217bbdb63d9ce39b708a9d","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/UserSelfRestClient.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FUserSelfRestClient.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -40,7 +40,7 @@ public boolean isSelfRegistrationAllowed() {\n \n         return result == null\n                 ? false\n-                : result.booleanValue();\n+                : result;\n     }\n \n     public UserTO read() {\n@@ -69,7 +69,7 @@ public boolean isPasswordResetAllowed() {\n \n         return result == null\n                 ? false\n-                : result.booleanValue();\n+                : result;\n     }\n \n     public boolean isPwdResetRequiringSecurityQuestions() {\n@@ -82,7 +82,11 @@ public boolean isPwdResetRequiringSecurityQuestions() {\n \n         return result == null\n                 ? false\n-                : result.booleanValue();\n+                : result;\n+    }\n+\n+    public void changePassword(final String password) {\n+        getService(UserSelfService.class).changePassword(password);\n     }\n \n     public void requestPasswordReset(final String username, final String securityAnswer) {"},{"sha":"1b847f983812a84463034f757cb00adc11cdf60b","filename":"client/console/src/main/java/org/apache/syncope/client/console/topology/WebSocketBehavior.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FWebSocketBehavior.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,11 +18,6 @@\n  */\n package org.apache.syncope.client.console.topology;\n \n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.FAILURE;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.REACHABLE;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.UNKNOWN;\n-import static org.apache.syncope.client.console.topology.TopologyNode.Status.UNREACHABLE;\n-\n import com.fasterxml.jackson.databind.JsonNode;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n@@ -46,15 +41,15 @@\n \n public class WebSocketBehavior extends org.apache.wicket.protocol.ws.api.WebSocketBehavior {\n \n-    private static final long serialVersionUID = 1L;\n-\n     protected static final Logger LOG = LoggerFactory.getLogger(WebSocketBehavior.class);\n \n-    private final Map<String, String> resources = new HashMap<String, String>();\n+    private static final long serialVersionUID = -1653665542635275551L;\n+\n+    private final Map<String, String> resources = new HashMap<>();\n \n     private final Set<String> runningResCheck = new HashSet<>();\n \n-    private final Map<Long, String> connectors = new HashMap<Long, String>();\n+    private final Map<Long, String> connectors = new HashMap<>();\n \n     private final Set<Long> runningConnCheck = new HashSet<>();\n \n@@ -77,7 +72,8 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                     if (connectors.containsKey(ckey)) {\n                         handler.push(connectors.get(ckey));\n                     } else {\n-                        handler.push(String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", UNKNOWN, ckey));\n+                        handler.push(String.format(\n+                                \"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.UNKNOWN, ckey));\n                     }\n \n                     synchronized (runningConnCheck) {\n@@ -97,7 +93,8 @@ protected void onMessage(final WebSocketRequestHandler handler, final TextMessag\n                     if (resources.containsKey(rkey)) {\n                         handler.push(resources.get(rkey));\n                     } else {\n-                        handler.push(String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", UNKNOWN, rkey));\n+                        handler.push(String.format(\n+                                \"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.UNKNOWN, rkey));\n                     }\n \n                     synchronized (runningResCheck) {\n@@ -151,10 +148,11 @@ public void run() {\n                 try {\n                     final ConnInstanceTO connector = connectorRestClient.read(key);\n                     res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                            connectorRestClient.check(connector) ? REACHABLE : UNREACHABLE, key);\n+                            connectorRestClient.check(connector)\n+                                    ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n                 } catch (Exception e) {\n                     LOG.warn(\"Error checking connection for {}\", key, e);\n-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", FAILURE, key);\n+                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);\n                 }\n \n                 synchronized (runningConnCheck) {\n@@ -191,10 +189,11 @@ public void run() {\n                 try {\n                     final ResourceTO resource = resourceRestClient.read(key);\n                     res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\",\n-                            connectorRestClient.check(resource) ? REACHABLE : UNREACHABLE, key);\n+                            connectorRestClient.check(resource)\n+                                    ? TopologyNode.Status.REACHABLE : TopologyNode.Status.UNREACHABLE, key);\n                 } catch (Exception e) {\n                     LOG.warn(\"Error checking connection for {}\", key, e);\n-                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", FAILURE, key);\n+                    res = String.format(\"{ \\\"status\\\": \\\"%s\\\", \\\"target\\\": \\\"%s\\\"}\", TopologyNode.Status.FAILURE, key);\n                 }\n \n                 synchronized (runningResCheck) {"},{"sha":"3a48d381f42be1c0595bc907051ca79f9303bb06","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/FieldPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -128,7 +128,7 @@ public FieldPanel<T> setModelObject(final T object) {\n     }\n \n     public T getModelObject() {\n-        return (T) field.getModelObject();\n+        return field.getModelObject();\n     }\n \n     public FieldPanel<T> setNewModel(final IModel<T> model) {"},{"sha":"ce13f8f668f5b4cd422fde52851e5be76399ed5a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/Login.html","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FLogin.html?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -26,12 +26,13 @@\n     <title>Apache Syncope - Login</title>\n \n     <link rel=\"shortcut icon\" href=\"img/favicon.png\" type=\"image/png\"/>\n-    <link href=\"webjars/bootstrap-select/${bootstrap-select.version}/dist/css/bootstrap-select.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+\n+    <link href=\"webjars/bootstrap-select/${bootstrap-select.version}/css/bootstrap-select.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n     <link href=\"webjars/font-awesome/${font-awesome.version}/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n     <link href=\"webjars/ionicons/${ionicons.version}/css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n     <link href=\"css/login.css\" rel=\"stylesheet\" type=\"text/css\" />\n     <link href=\"css/syncopeConsole.css\" rel=\"stylesheet\" type=\"text/css\" />\n-    <script type=\"text/javascript\" src=\"webjars/bootstrap-select/${bootstrap-select.version}/dist/js/bootstrap-select.min.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/bootstrap-select/${bootstrap-select.version}/js/bootstrap-select.min.js\"></script>\n   </head>\n   <body class=\"skin-green\">\n     <div class=\"container\">"},{"sha":"675c4df8b234f6ddc9d12c0b3da6d24eef9ff874","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.html","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.html?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,62 @@\n+<!DOCTYPE html>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <head>\n+    <meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"/>\n+    <meta charset=\"UTF-8\"/>\n+    <meta content='width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no' name='viewport'/>\n+\n+    <title>Apache Syncope - Change password</title>\n+\n+    <link rel=\"shortcut icon\" href=\"img/favicon.png\" type=\"image/png\"/>\n+\n+    <link href=\"webjars/bootstrap/${bootstrap.version}/css/bootstrap.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"webjars/bootstrap-select/${bootstrap-select.version}/css/bootstrap-select.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"webjars/font-awesome/${font-awesome.version}/css/font-awesome.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"webjars/ionicons/${ionicons.version}/css/ionicons.min.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"css/AdminLTE.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"css/login.css\" rel=\"stylesheet\" type=\"text/css\" />\n+    <link href=\"css/syncopeConsole.css\" rel=\"stylesheet\" type=\"text/css\" />\n+\n+    <script type=\"text/javascript\" src=\"webjars/bootstrap/${bootstrap.version}/js/bootstrap.min.js\"></script>\n+    <script type=\"text/javascript\" src=\"webjars/bootstrap-select/${bootstrap-select.version}/js/bootstrap-select.min.js\"></script>\n+  </head>\n+  <body class=\"skin-green\">\n+    <div class=\"container\">\n+      <div class=\"card card-container\">\n+        <img class=\"login-logo\" src=\"img/logo-green.png\" />\n+\n+        <div wicket:id=\"feedback\" role=\"alert\"/>\n+\n+        <div class=\"alert alert-success\"><wicket:message key=\"passwordNeedsToBeUpdated\"/></div>\n+\n+        <form class=\"form-signin\" wicket:id=\"changePassword\">\n+          <input type=\"text\" wicket:id=\"username\" id=\"username\" class=\"form-control\" \n+                 wicket:message=\"placeholder:username\" required=\"required\" autofocus=\"autofocus\" />\n+          <span wicket:id=\"password\" id=\"password\"/>\n+          <span wicket:id=\"confirmPassword\" id=\"confirmPassword\"/>\n+          <button wicket:id=\"submit\" type=\"submit\" \n+                  class=\"btn btn-lg btn-primary btn-block btn-signin\"><wicket:message key=\"submit\"/></button>\n+        </form>\n+      </div>\n+    </div>\n+\n+  </body>\n+</html>\n\\ No newline at end of file"},{"sha":"26662c066b7610f299d7cc73821938b3a6a3457a","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+username=Username\n+password=Password\n+submit=Change\n+confirmPassword=Password (confirm)\n+passwordNeedsToBeUpdated=Password needs to be updated"},{"sha":"45abc3d9e521a0d23dde501045f9f546ea59a97e","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword_it.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_it.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+username=Username\n+password=Password\n+submit=Cambia\n+confirmPassword=Password (conferma)\n+passwordNeedsToBeUpdated=La password deve essere aggiornata"},{"sha":"87d5ad0e5d2963206b983fab552c971bfac5e9fa","filename":"client/console/src/main/resources/org/apache/syncope/client/console/pages/MustChangePassword_pt_BR.properties","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpages%2FMustChangePassword_pt_BR.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,21 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+username=Usu\\u00e1rio\n+password=Senha\n+submit=Alterar\n+confirmPassword=Senha (confirmar)\n+passwordNeedsToBeUpdated=Senha precisa ser atualizado"},{"sha":"eab74acbd61cbe4da67bbb2974c173f131919dbc","filename":"client/console/src/main/resources/org/apache/syncope/client/console/wicket/markup/html/form/AjaxPasswordFieldPanel.html","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPasswordFieldPanel.html?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -16,7 +16,8 @@\n specific language governing permissions and limitations\n under the License.\n -->\n-<wicket:extend>\n-    <input type=\"password\" class=\"ui-widget-content ui-corner-all long_dynamicsize\"\n-           wicket:id=\"passwordField\" />\n-</wicket:extend>\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <input type=\"password\" class=\"form-control\" wicket:id=\"passwordField\" />\n+  </wicket:extend>\n+</html>\n\\ No newline at end of file"},{"sha":"7a8824502757fae60d36cc69ae3c2830a5c7635a","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"modified","additions":67,"deletions":34,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -19,10 +19,12 @@\n package org.apache.syncope.client.lib;\n \n import java.security.AccessControlException;\n+import java.util.Collections;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.core.GenericType;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.ext.ExceptionMapper;\n import javax.ws.rs.ext.Provider;\n@@ -31,6 +33,7 @@\n import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.ErrorTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.slf4j.Logger;\n@@ -55,14 +58,17 @@ public Exception fromResponse(final Response response) {\n         SyncopeClientCompositeException scce = checkSyncopeClientCompositeException(response);\n         if (scce != null) {\n             // 1. Check for client (possibly composite) exception in HTTP header\n-            if (scce.getExceptions().size() == 1) {\n-                ex = scce.getExceptions().iterator().next();\n-            } else {\n-                ex = scce;\n-            }\n-        } else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()) {\n-            // 2. Map SC_UNAUTHORIZED\n-            ex = new AccessControlException(\"Remote unauthorized exception\");\n+            ex = scce.getExceptions().size() == 1\n+                    ? scce.getExceptions().iterator().next()\n+                    : scce;\n+        } else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()\n+                || statusCode == Response.Status.FORBIDDEN.getStatusCode()) {\n+\n+            // 2. Map SC_UNAUTHORIZED and SC_FORBIDDEN\n+            String message = response.getHeaderString(RESTHeaders.ERROR_INFO);\n+            ex = new AccessControlException(StringUtils.isBlank(message)\n+                    ? \"Remote authorization exception\"\n+                    : message);\n         } else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n             // 3. Map SC_BAD_REQUEST\n             ex = new BadRequestException();\n@@ -76,42 +82,69 @@ public Exception fromResponse(final Response response) {\n     }\n \n     private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n-        List<String> exTypesInHeaders = response.getStringHeaders().get(RESTHeaders.ERROR_CODE);\n-        if (exTypesInHeaders == null) {\n-            LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n-            return null;\n-        }\n-        List<String> exInfos = response.getStringHeaders().get(RESTHeaders.ERROR_INFO);\n-\n-        final SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n+        SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n \n-        Set<String> handledExceptions = new HashSet<>();\n-        for (String exTypeAsString : exTypesInHeaders) {\n-            ClientExceptionType exceptionType = null;\n+        // Attempts to read ErrorTO or List<ErrorTO> as entity...\n+        List<ErrorTO> errors = null;\n+        try {\n+            ErrorTO error = response.readEntity(ErrorTO.class);\n+            if (error != null) {\n+                errors = Collections.singletonList(error);\n+            }\n+        } catch (Exception e) {\n+            LOG.debug(\"Could not read {}, attempting to read composite...\", ErrorTO.class.getName(), e);\n+        }\n+        if (errors == null) {\n             try {\n-                exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n-            } catch (IllegalArgumentException e) {\n-                LOG.error(\"Unexpected value of \" + RESTHeaders.ERROR_CODE + \": \" + exTypeAsString, e);\n+                errors = response.readEntity(new GenericType<List<ErrorTO>>() {\n+                });\n+            } catch (Exception e) {\n+                LOG.debug(\"Could not read {} list, attempting to read headers...\", ErrorTO.class.getName(), e);\n+            }\n+        }\n+\n+        // ...if not possible, attempts to parse response headers\n+        if (errors == null) {\n+            List<String> exTypesInHeaders = response.getStringHeaders().get(RESTHeaders.ERROR_CODE);\n+            if (exTypesInHeaders == null) {\n+                LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n+                return null;\n             }\n-            if (exceptionType != null) {\n-                handledExceptions.add(exTypeAsString);\n+            List<String> exInfos = response.getStringHeaders().get(RESTHeaders.ERROR_INFO);\n \n-                final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n+            Set<String> handledExceptions = new HashSet<>();\n+            for (String exTypeAsString : exTypesInHeaders) {\n+                ClientExceptionType exceptionType = null;\n+                try {\n+                    exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n+                } catch (IllegalArgumentException e) {\n+                    LOG.error(\"Unexpected value of \" + RESTHeaders.ERROR_CODE + \": \" + exTypeAsString, e);\n+                }\n+                if (exceptionType != null) {\n+                    handledExceptions.add(exTypeAsString);\n \n-                if (exInfos != null && !exInfos.isEmpty()) {\n-                    for (String element : exInfos) {\n-                        if (element.startsWith(exceptionType.getHeaderValue())) {\n-                            clientException.getElements().add(StringUtils.substringAfter(element, \":\"));\n+                    SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n+                    if (exInfos != null && !exInfos.isEmpty()) {\n+                        for (String element : exInfos) {\n+                            if (element.startsWith(exceptionType.name())) {\n+                                clientException.getElements().add(StringUtils.substringAfter(element, \":\"));\n+                            }\n                         }\n                     }\n+                    compException.addException(clientException);\n                 }\n-                compException.addException(clientException);\n             }\n-        }\n \n-        exTypesInHeaders.removeAll(handledExceptions);\n-        if (!exTypesInHeaders.isEmpty()) {\n-            LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\n+            exTypesInHeaders.removeAll(handledExceptions);\n+            if (!exTypesInHeaders.isEmpty()) {\n+                LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\n+            }\n+        } else {\n+            for (ErrorTO error : errors) {\n+                SyncopeClientException clientException = SyncopeClientException.build(error.getType());\n+                clientException.getElements().addAll(error.getElements());\n+                compException.addException(clientException);\n+            }\n         }\n \n         if (compException.hasExceptions()) {"},{"sha":"b29ff9e1205bdd88aad91b722a9f2b5f07bf0512","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -305,6 +305,8 @@ public static UserMod diff(final UserTO updated, final UserTO original, final bo\n             result.setSecurityAnswer(updated.getSecurityAnswer());\n         }\n \n+        result.setMustChangePassword(updated.isMustChangePassword());\n+\n         // 4. roles\n         result.getRolesToRemove().addAll(CollectionUtils.subtract(original.getRoles(), updated.getRoles()));\n         result.getRolesToAdd().addAll(CollectionUtils.subtract(updated.getRoles(), original.getRoles()));"},{"sha":"95059fe0ab861d05142cddb60cc2c5efa48a139a","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/UserMod.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FUserMod.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -57,6 +57,8 @@ public class UserMod extends AnyMod {\n \n     private String securityAnswer;\n \n+    private boolean mustChangePassword;\n+\n     public String getUsername() {\n         return username;\n     }\n@@ -139,6 +141,14 @@ public void setSecurityAnswer(final String securityAnswer) {\n         this.securityAnswer = securityAnswer;\n     }\n \n+    public boolean isMustChangePassword() {\n+        return mustChangePassword;\n+    }\n+\n+    public void setMustChangePassword(final boolean mustChangePassword) {\n+        this.mustChangePassword = mustChangePassword;\n+    }\n+\n     @JsonIgnore\n     @Override\n     public boolean isEmpty() {\n@@ -147,6 +157,7 @@ public boolean isEmpty() {\n                 && username == null\n                 && pwdPropRequest == null\n                 && securityQuestion == null\n-                && securityAnswer == null;\n+                && securityAnswer == null\n+                && !mustChangePassword;\n     }\n }"},{"sha":"0c037984a6789b3f125f6df9447a003c68444580","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,10 +18,20 @@\n  */\n package org.apache.syncope.common.lib.to;\n \n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.HashMap;\n+import java.util.HashSet;\n+import java.util.Map;\n+import java.util.Set;\n import javax.ws.rs.PathParam;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n import javax.xml.bind.annotation.XmlRootElement;\n import javax.xml.bind.annotation.XmlType;\n+import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.syncope.common.lib.AbstractBaseBean;\n+import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"realm\")\n @XmlType\n@@ -41,6 +51,12 @@ public class RealmTO extends AbstractBaseBean {\n \n     private Long passwordPolicy;\n \n+    private final Set<String> actionsClassNames = new HashSet<>();\n+\n+    @XmlJavaTypeAdapter(XmlGenericMapAdapter.class)\n+    @JsonIgnore\n+    private final Map<String, AnyTO> templates = new HashMap<>();\n+\n     public long getKey() {\n         return key;\n     }\n@@ -90,4 +106,16 @@ public void setPasswordPolicy(final Long passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n+    @XmlElementWrapper(name = \"actionsClassNames\")\n+    @XmlElement(name = \"actionsClassName\")\n+    @JsonProperty(\"actionsClassNames\")\n+    public Set<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+    @JsonProperty\n+    public Map<String, AnyTO> getTemplates() {\n+        return templates;\n+    }\n+\n }"},{"sha":"638f32f17cb4b042744e65344a822050d3d2519b","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/SyncopeTO.java","status":"modified","additions":9,"deletions":10,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FSyncopeTO.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -43,8 +43,6 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private final List<String> connIdLocations = new ArrayList<>();\n \n-    private String anyTransformer;\n-\n     private String anyObjectWorkflowAdapter;\n \n     private String userWorkflowAdapter;\n@@ -69,6 +67,8 @@ public class SyncopeTO extends AbstractBaseBean {\n \n     private final List<String> taskJobs = new ArrayList<>();\n \n+    private final List<String> logicActions = new ArrayList<>();\n+\n     private final List<String> propagationActions = new ArrayList<>();\n \n     private final List<String> syncActions = new ArrayList<>();\n@@ -106,10 +106,6 @@ public List<String> getConnIdLocations() {\n         return connIdLocations;\n     }\n \n-    public String getAnyTransformer() {\n-        return anyTransformer;\n-    }\n-\n     public String getAnyObjectWorkflowAdapter() {\n         return anyObjectWorkflowAdapter;\n     }\n@@ -174,6 +170,13 @@ public List<String> getTaskJobs() {\n         return taskJobs;\n     }\n \n+    @XmlElementWrapper(name = \"logicActions\")\n+    @XmlElement(name = \"logicAction\")\n+    @JsonProperty(\"logicActions\")\n+    public List<String> getLogicActions() {\n+        return logicActions;\n+    }\n+\n     @XmlElementWrapper(name = \"propagationActions\")\n     @XmlElement(name = \"propagationAction\")\n     @JsonProperty(\"propagationActions\")\n@@ -239,10 +242,6 @@ public void setPwdResetRequiringSecurityQuestions(final boolean pwdResetRequirin\n         this.pwdResetRequiringSecurityQuestions = pwdResetRequiringSecurityQuestions;\n     }\n \n-    public void setAnyTransformer(final String anyTransformer) {\n-        this.anyTransformer = anyTransformer;\n-    }\n-\n     public void setAnyObjectWorkflowAdapter(final String anyObjectWorkflowAdapter) {\n         this.anyObjectWorkflowAdapter = anyObjectWorkflowAdapter;\n     }"},{"sha":"7018cd5ad6db0120d72b31ccd86e987b9feb2e20","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -63,6 +63,8 @@ public class UserTO extends AnyTO {\n \n     private String securityAnswer;\n \n+    private boolean mustChangePassword;\n+\n     private final List<RelationshipTO> relationships = new ArrayList<>();\n \n     private final List<MembershipTO> memberships = new ArrayList<>();\n@@ -169,6 +171,14 @@ public void setSecurityAnswer(final String securityAnswer) {\n         this.securityAnswer = securityAnswer;\n     }\n \n+    public boolean isMustChangePassword() {\n+        return mustChangePassword;\n+    }\n+\n+    public void setMustChangePassword(final boolean mustChangePassword) {\n+        this.mustChangePassword = mustChangePassword;\n+    }\n+\n     @XmlElementWrapper(name = \"relationships\")\n     @XmlElement(name = \"relationship\")\n     @JsonProperty(\"relationships\")"},{"sha":"0c1940380da9f0d576c1283f0cba975b47781f2c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/ClientExceptionType.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientExceptionType.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -66,7 +66,7 @@ public enum ClientExceptionType {\n     RESTValidation(Response.Status.BAD_REQUEST),\n     GroupOwnership(Response.Status.BAD_REQUEST),\n     Scheduling(Response.Status.BAD_REQUEST),\n-    Unauthorized(Response.Status.UNAUTHORIZED),\n+    DelegatedAdministration(Response.Status.FORBIDDEN),\n     UnallowedSchemas(Response.Status.BAD_REQUEST),\n     Unknown(Response.Status.BAD_REQUEST),\n     Workflow(Response.Status.BAD_REQUEST);\n@@ -80,7 +80,7 @@ private ClientExceptionType(final Response.Status responseStatus) {\n     public static ClientExceptionType fromHeaderValue(final String exceptionTypeHeaderValue) {\n         ClientExceptionType result = null;\n         for (ClientExceptionType type : values()) {\n-            if (exceptionTypeHeaderValue.equals(type.getHeaderValue())) {\n+            if (exceptionTypeHeaderValue.equals(type.name())) {\n                 result = type;\n             }\n         }\n@@ -92,12 +92,8 @@ public static ClientExceptionType fromHeaderValue(final String exceptionTypeHead\n         return result;\n     }\n \n-    public String getHeaderValue() {\n-        return name();\n-    }\n-\n     public String getInfoHeaderValue(final String value) {\n-        return getHeaderValue() + \":\" + value;\n+        return name() + \":\" + value;\n     }\n \n     public Response.Status getResponseStatus() {"},{"sha":"5a4ea81abf6356ba3e37ed9cbe7b443c4040a8f9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/Entitlement.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntitlement.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -28,6 +28,8 @@ public final class Entitlement {\n \n     public static final String ANONYMOUS = \"ANONYMOUS\";\n \n+    public static final String MUST_CHANGE_PASSWORD = \"MUST_CHANGE_PASSWORD\";\n+\n     public static final String DOMAIN_CREATE = \"DOMAIN_CREATE\";\n \n     public static final String DOMAIN_READ = \"DOMAIN_READ\";\n@@ -251,6 +253,8 @@ public final class Entitlement {\n                 values.add(field.getName());\n             }\n         }\n+        values.remove(ANONYMOUS);\n+        values.remove(MUST_CHANGE_PASSWORD);\n         ENTITLEMENTS = Collections.unmodifiableSet(values);\n     }\n "},{"sha":"83245254a56e7cefdfc95e7773c088aca0ecaca9","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/EntityViolationType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FEntityViolationType.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -41,7 +41,7 @@ public enum EntityViolationType {\n     InvalidSchemaEnum(\"org.apache.syncope.core.persistence.validation.schema.enum\"),\n     InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.persistence.validation.schema.multivalueUnique\"),\n     InvalidSchedTask(\"org.apache.syncope.core.persistence.validation.schedtask\"),\n-    InvalidSyncTask(\"org.apache.syncope.core.persistence.validation.synctask\"),\n+    InvalidProvisioningTask(\"org.apache.syncope.core.persistence.validation.synctask\"),\n     InvalidPlainSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.plainSchema\"),\n     InvalidDerSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.derSchema\"),\n     InvalidVirSchema(\"org.apache.syncope.core.persistence.validation.attrvalue.virSchema\"),"},{"sha":"258a1b6fc12208fb09117885fc68a6db518d6cc4","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/UserSelfService.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FUserSelfService.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -65,7 +65,7 @@ Response create(@NotNull UserTO userTO,\n     /**\n      * Self-updates user.\n      *\n-     * @param userMod modification to be applied to user matching the provided key\n+     * @param userMod modification to be applied to self\n      * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n      */\n     @POST\n@@ -83,6 +83,18 @@ Response create(@NotNull UserTO userTO,\n     @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n     Response delete();\n \n+    /**\n+     * Changes own password.\n+     *\n+     * @param password the password value to update\n+     *\n+     * @return <tt>Response</tt> object featuring the updated user - <tt>UserTO</tt> as <tt>Entity</tt>\n+     */\n+    @POST\n+    @Path(\"changePassword\")\n+    @Produces({ MediaType.APPLICATION_XML, MediaType.APPLICATION_JSON })\n+    Response changePassword(@NotNull @QueryParam(\"password\") String password);\n+\n     /**\n      * Provides answer for the security question configured for user matching the given username, if any.\n      * If provided anwser matches the one stored for that user, a password reset token is internally generated,"},{"sha":"cd40a6b24f81da437154cb8e600873c2874f9d3b","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":152,"deletions":2,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,23 +18,173 @@\n  */\n package org.apache.syncope.core.logic;\n \n+import java.util.ArrayList;\n import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.ImmutablePair;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.mod.AnyMod;\n import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.misc.RealmUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.TemplateUtils;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n+import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.support.AbstractBeanDefinition;\n \n public abstract class AbstractAnyLogic<TO extends AnyTO, MOD extends AnyMod>\n         extends AbstractResourceAssociator<TO> {\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n+    @Autowired\n+    private TemplateUtils templateUtils;\n+\n+    private List<LogicActions> getActions(final Realm realm) {\n+        List<LogicActions> actions = new ArrayList<>();\n+\n+        for (String className : realm.getActionsClassNames()) {\n+            try {\n+                Class<?> actionsClass = Class.forName(className);\n+                LogicActions logicActions = (LogicActions) ApplicationContextProvider.getBeanFactory().\n+                        createBean(actionsClass, AbstractBeanDefinition.AUTOWIRE_BY_TYPE, true);\n+\n+                actions.add(logicActions);\n+            } catch (Exception e) {\n+                LOG.warn(\"Class '{}' not found\", className, e);\n+            }\n+        }\n+\n+        return actions;\n+    }\n+\n+    protected Pair<TO, List<LogicActions>> beforeCreate(final TO input) {\n+        Realm realm = realmDAO.find(input.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            sce.getElements().add(input.getRealm());\n+            throw sce;\n+        }\n+\n+        AnyType anyType = input instanceof UserTO\n+                ? anyTypeDAO.findUser()\n+                : input instanceof GroupTO\n+                        ? anyTypeDAO.findGroup()\n+                        : anyTypeDAO.find(input.getType());\n+        if (anyType == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n+            sce.getElements().add(input.getType());\n+            throw sce;\n+        }\n+\n+        TO any = input;\n+\n+        templateUtils.apply(any, realm.getTemplate(anyType));\n+\n+        List<LogicActions> actions = getActions(realm);\n+        for (LogicActions action : actions) {\n+            any = action.beforeCreate(any);\n+        }\n+\n+        LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, any);\n+\n+        return ImmutablePair.of(any, actions);\n+    }\n+\n+    protected TO afterCreate(final TO input, final List<LogicActions> actions) {\n+        TO any = input;\n+\n+        for (LogicActions action : actions) {\n+            any = action.afterCreate(any);\n+        }\n+\n+        return any;\n+    }\n+\n+    protected Pair<MOD, List<LogicActions>> beforeUpdate(final MOD input, final String realmPath) {\n+        if (StringUtils.isBlank(input.getRealm())) {\n+            input.setRealm(realmPath);\n+        }\n+        Realm realm = realmDAO.find(input.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            sce.getElements().add(input.getRealm());\n+            throw sce;\n+        }\n+\n+        MOD mod = input;\n+\n+        List<LogicActions> actions = getActions(realm);\n+        for (LogicActions action : actions) {\n+            mod = action.beforeUpdate(mod);\n+        }\n+\n+        LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, mod);\n+\n+        return ImmutablePair.of(mod, actions);\n+    }\n+\n+    protected TO afterUpdate(final TO input, final List<LogicActions> actions) {\n+        TO any = input;\n+\n+        for (LogicActions action : actions) {\n+            any = action.afterUpdate(any);\n+        }\n+\n+        return any;\n+    }\n+\n+    protected Pair<TO, List<LogicActions>> beforeDelete(final TO input) {\n+        Realm realm = realmDAO.find(input.getRealm());\n+        if (realm == null) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n+            sce.getElements().add(input.getRealm());\n+            throw sce;\n+        }\n+\n+        TO any = input;\n+\n+        List<LogicActions> actions = getActions(realm);\n+        for (LogicActions action : actions) {\n+            any = action.beforeDelete(any);\n+        }\n+\n+        LOG.debug(\"Input: {}\\nOutput: {}\\n\", input, any);\n+\n+        return ImmutablePair.of(any, actions);\n+    }\n+\n+    protected TO afterDelete(final TO input, final List<LogicActions> actions) {\n+        TO any = input;\n+\n+        for (LogicActions action : actions) {\n+            any = action.afterDelete(any);\n+        }\n+\n+        return any;\n+    }\n+\n     private static class StartsWithPredicate implements Predicate<String> {\n \n         private final Collection<String> targets;\n@@ -78,7 +228,7 @@ public boolean evaluate(final String ownedRealm) {\n             }\n         })) {\n \n-            throw new UnauthorizedException(\n+            throw new DelegatedAdministrationException(\n                     this instanceof UserLogic\n                             ? AnyTypeKind.USER\n                             : this instanceof GroupLogic"},{"sha":"5e52b9ee7c1deae2610fc31f0a2eee9024467897","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":30,"deletions":38,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -31,6 +31,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.AnyObjectMod;\n@@ -49,7 +50,7 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -77,9 +78,6 @@ public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectMod>\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected AnyTransformer attrTransformer;\n-\n     @Resource(name = \"anonymousUser\")\n     protected String anonymousUser;\n \n@@ -160,79 +158,73 @@ public AnyObjectTO transform(final AnyObject input) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_CREATE + \"')\")\n     @Override\n     public AnyObjectTO create(final AnyObjectTO anyObjectTO) {\n-        if (anyObjectTO.getRealm() == null) {\n+        Pair<AnyObjectTO, List<LogicActions>> before = beforeCreate(anyObjectTO);\n+\n+        if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n-        // security checks\n+\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_CREATE),\n-                Collections.singleton(anyObjectTO.getRealm()));\n-        securityChecks(effectiveRealms, anyObjectTO.getRealm(), null);\n-\n-        // Any transformation (if configured)\n-        AnyObjectTO actual = attrTransformer.transform(anyObjectTO);\n-        LOG.debug(\"Transformed: {}\", actual);\n+                Collections.singleton(before.getLeft().getRealm()));\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n-        if (anyObjectTO.getType() == null) {\n+        if (before.getLeft().getType() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n         }\n \n-        /*\n-         * Actual operations: workflow, propagation\n-         */\n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(anyObjectTO);\n+        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft());\n         AnyObjectTO savedTO = binder.getAnyObjectTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n-        return savedTO;\n+\n+        return afterCreate(savedTO, before.getValue());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")\n     @Override\n     public AnyObjectTO update(final AnyObjectMod anyObjectMod) {\n-        // Any transformation (if configured)\n-        AnyObjectMod actual = attrTransformer.transform(anyObjectMod);\n-        LOG.debug(\"Transformed: {}\", actual);\n+        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(anyObjectMod.getKey());\n+        Pair<AnyObjectMod, List<LogicActions>> before = beforeUpdate(anyObjectMod, anyObjectTO.getRealm());\n \n-        // security checks\n-        AnyObjectTO toUpdate = binder.getAnyObjectTO(anyObjectMod.getKey());\n         Set<String> requestedRealms = new HashSet<>();\n-        requestedRealms.add(toUpdate.getRealm());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            requestedRealms.add(actual.getRealm());\n+        requestedRealms.add(before.getLeft().getRealm());\n+        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+            requestedRealms.add(before.getLeft().getRealm());\n         }\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_UPDATE),\n                 requestedRealms);\n-        securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            securityChecks(effectiveRealms, actual.getRealm(), toUpdate.getKey());\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n         }\n \n         Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(anyObjectMod);\n \n         AnyObjectTO updatedTO = binder.getAnyObjectTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return updatedTO;\n+\n+        return afterUpdate(updatedTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_DELETE + \"')\")\n     @Override\n     public AnyObjectTO delete(final Long key) {\n-        // security checks\n-        AnyObjectTO toDelete = binder.getAnyObjectTO(key);\n+        AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n+        Pair<AnyObjectTO, List<LogicActions>> before = beforeDelete(anyObject);\n+\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.ANY_OBJECT_DELETE),\n-                Collections.singleton(toDelete.getRealm()));\n-        securityChecks(effectiveRealms, toDelete.getRealm(), toDelete.getKey());\n+                Collections.singleton(before.getLeft().getRealm()));\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(key);\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n \n         AnyObjectTO anyObjectTO = new AnyObjectTO();\n-        anyObjectTO.setKey(key);\n-\n+        anyObjectTO.setKey(before.getLeft().getKey());\n         anyObjectTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return anyObjectTO;\n+        return afterDelete(anyObjectTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.ANY_OBJECT_UPDATE + \"')\")"},{"sha":"a8af2b9436236bd9705c3feba29f327df7d5ac7a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":32,"deletions":40,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -32,6 +32,7 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.mod.GroupMod;\n@@ -51,9 +52,9 @@\n import org.apache.syncope.core.provisioning.api.propagation.PropagationManager;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Component;\n@@ -84,9 +85,6 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupMod> {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected AnyTransformer attrTransformer;\n-\n     @Resource(name = \"anonymousUser\")\n     protected String anonymousUser;\n \n@@ -103,7 +101,7 @@ public boolean evaluate(final String ownedRealm) {\n             }\n         })) {\n \n-            throw new UnauthorizedException(AnyTypeKind.GROUP, key);\n+            throw new DelegatedAdministrationException(AnyTypeKind.GROUP, key);\n         }\n     }\n \n@@ -184,68 +182,63 @@ public GroupTO transform(final Group input) {\n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_CREATE + \"')\")\n     @Override\n     public GroupTO create(final GroupTO groupTO) {\n-        if (groupTO.getRealm() == null) {\n+        Pair<GroupTO, List<LogicActions>> before = beforeCreate(groupTO);\n+\n+        if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n-        // security checks\n+\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_CREATE),\n-                Collections.singleton(groupTO.getRealm()));\n-        securityChecks(effectiveRealms, groupTO.getRealm(), null);\n-\n-        // Any transformation (if configured)\n-        GroupTO actual = attrTransformer.transform(groupTO);\n-        LOG.debug(\"Transformed: {}\", actual);\n+                Collections.singleton(before.getLeft().getRealm()));\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n \n-        /*\n-         * Actual operations: workflow, propagation\n-         */\n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(groupTO);\n+        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft());\n         GroupTO savedTO = binder.getGroupTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n-        return savedTO;\n+\n+        return afterCreate(savedTO, before.getValue());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO update(final GroupMod groupMod) {\n-        // Any transformation (if configured)\n-        GroupMod actual = attrTransformer.transform(groupMod);\n-        LOG.debug(\"Transformed: {}\", actual);\n+        GroupTO groupTO = binder.getGroupTO(groupMod.getKey());\n+        Pair<GroupMod, List<LogicActions>> before = beforeUpdate(groupMod, groupTO.getRealm());\n \n-        // security checks\n-        GroupTO toUpdate = binder.getGroupTO(groupMod.getKey());\n         Set<String> requestedRealms = new HashSet<>();\n-        requestedRealms.add(toUpdate.getRealm());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            requestedRealms.add(actual.getRealm());\n+        requestedRealms.add(before.getLeft().getRealm());\n+        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+            requestedRealms.add(before.getLeft().getRealm());\n         }\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_UPDATE),\n                 requestedRealms);\n-        securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            securityChecks(effectiveRealms, actual.getRealm(), toUpdate.getKey());\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+        if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n         }\n \n         Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(groupMod);\n \n         GroupTO updatedTO = binder.getGroupTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return updatedTO;\n+\n+        return afterUpdate(updatedTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_DELETE + \"')\")\n     @Override\n     public GroupTO delete(final Long key) {\n-        // security checks\n-        GroupTO toDelete = binder.getGroupTO(key);\n+        GroupTO group = binder.getGroupTO(key);\n+        Pair<GroupTO, List<LogicActions>> before = beforeDelete(group);\n+\n         Set<String> effectiveRealms = getEffectiveRealms(\n                 AuthContextUtils.getAuthorizations().get(Entitlement.GROUP_DELETE),\n-                Collections.singleton(toDelete.getRealm()));\n-        securityChecks(effectiveRealms, toDelete.getRealm(), toDelete.getKey());\n+                Collections.singleton(before.getLeft().getRealm()));\n+        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n \n-        List<Group> ownedGroups = groupDAO.findOwnedByGroup(key);\n+        List<Group> ownedGroups = groupDAO.findOwnedByGroup(before.getLeft().getKey());\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n             sce.getElements().addAll(CollectionUtils.collect(ownedGroups, new Transformer<Group, String>() {\n@@ -258,14 +251,13 @@ public String transform(final Group group) {\n             throw sce;\n         }\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(key);\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n \n         GroupTO groupTO = new GroupTO();\n-        groupTO.setKey(key);\n-\n+        groupTO.setKey(before.getLeft().getKey());\n         groupTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return groupTO;\n+        return afterDelete(groupTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.GROUP_UPDATE + \"')\")"},{"sha":"7f9b7c918bebcefb939e86811f728eaf8752e1c5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -31,7 +31,6 @@\n import org.apache.syncope.core.persistence.api.ImplementationLookup.Type;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.provisioning.api.AnyObjectProvisioningManager;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n import org.apache.syncope.core.provisioning.api.ConnIdBundleManager;\n import org.apache.syncope.core.provisioning.api.GroupProvisioningManager;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n@@ -58,9 +57,6 @@ public class SyncopeLogic extends AbstractLogic<SyncopeTO> {\n     @Autowired\n     private ConnIdBundleManager bundleManager;\n \n-    @Autowired\n-    private AnyTransformer anyTransformer;\n-\n     @Autowired\n     private AnyObjectWorkflowAdapter awfAdapter;\n \n@@ -122,8 +118,6 @@ public SyncopeTO info() {\n             }\n         }\n \n-        syncopeTO.setAnyTransformer(anyTransformer.getClass().getName());\n-\n         syncopeTO.setAnyObjectWorkflowAdapter(AopUtils.getTargetClass(awfAdapter).getName());\n         syncopeTO.setUserWorkflowAdapter(AopUtils.getTargetClass(uwfAdapter).getName());\n         syncopeTO.setGroupWorkflowAdapter(AopUtils.getTargetClass(gwfAdapter).getName());\n@@ -138,6 +132,7 @@ public SyncopeTO info() {\n         syncopeTO.getAccountRules().addAll(implementationLookup.getClassNames(Type.ACCOUNT_RULE));\n         syncopeTO.getPasswordRules().addAll(implementationLookup.getClassNames(Type.PASSWORD_RULE));\n         syncopeTO.getTaskJobs().addAll(implementationLookup.getClassNames(Type.TASKJOBDELEGATE));\n+        syncopeTO.getLogicActions().addAll(implementationLookup.getClassNames(Type.LOGIC_ACTIONS));\n         syncopeTO.getPropagationActions().addAll(implementationLookup.getClassNames(Type.PROPAGATION_ACTIONS));\n         syncopeTO.getSyncActions().addAll(implementationLookup.getClassNames(Type.SYNC_ACTIONS));\n         syncopeTO.getPushActions().addAll(implementationLookup.getClassNames(Type.PUSH_ACTIONS));"},{"sha":"f508b4769c625a5cbad43e9c904a29fe8376981e","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":68,"deletions":66,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.lang.reflect.Method;\n-import java.security.AccessControlException;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n@@ -55,7 +54,7 @@\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.VirAttrHandler;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.access.prepost.PreAuthorize;\n@@ -90,9 +89,6 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserMod> {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n-    @Autowired\n-    protected AnyTransformer anyTransformer;\n-\n     @Autowired\n     protected UserProvisioningManager provisioningManager;\n \n@@ -182,7 +178,7 @@ public UserTO transform(final User input) {\n \n     @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n     public UserTO selfCreate(final UserTO userTO, final boolean storePassword) {\n-        return doCreate(userTO, storePassword);\n+        return doCreate(userTO, storePassword, true);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n@@ -193,72 +189,69 @@ public UserTO create(final UserTO userTO) {\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_CREATE + \"')\")\n     public UserTO create(final UserTO userTO, final boolean storePassword) {\n-        if (userTO.getRealm() == null) {\n+        return doCreate(userTO, storePassword, false);\n+    }\n+\n+    protected UserTO doCreate(final UserTO userTO, final boolean storePassword, final boolean self) {\n+        Pair<UserTO, List<LogicActions>> before = beforeCreate(userTO);\n+\n+        if (before.getLeft().getRealm() == null) {\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n-        // security checks\n-        Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_CREATE),\n-                Collections.singleton(userTO.getRealm()));\n-        securityChecks(effectiveRealms, userTO.getRealm(), null);\n \n-        return doCreate(userTO, storePassword);\n-    }\n-\n-    protected UserTO doCreate(final UserTO userTO, final boolean storePassword) {\n-        // Any transformation (if configured)\n-        UserTO actual = anyTransformer.transform(userTO);\n-        LOG.debug(\"Transformed: {}\", actual);\n+        if (!self) {\n+            Set<String> effectiveRealms = getEffectiveRealms(\n+                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_CREATE),\n+                    Collections.singleton(before.getLeft().getRealm()));\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n+        }\n \n-        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(actual, storePassword);\n+        Map.Entry<Long, List<PropagationStatus>> created = provisioningManager.create(before.getLeft(), storePassword);\n \n         UserTO savedTO = binder.getUserTO(created.getKey());\n         savedTO.getPropagationStatusTOs().addAll(created.getValue());\n-        return savedTO;\n+\n+        return afterCreate(savedTO, before.getValue());\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n     public UserTO selfUpdate(final UserMod userMod) {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n-\n-        if (userTO.getKey() != userMod.getKey()) {\n-            throw new AccessControlException(\"Not allowed for user with key \" + userMod.getKey());\n-        }\n-\n-        return doUpdate(userMod);\n+        userMod.setKey(userTO.getKey());\n+        return doUpdate(userMod, true);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO update(final UserMod userMod) {\n-        // Any transformation (if configured)\n-        UserMod actual = anyTransformer.transform(userMod);\n-        LOG.debug(\"Transformed: {}\", actual);\n+        return doUpdate(userMod, false);\n+    }\n \n-        // security checks\n-        UserTO toUpdate = binder.getUserTO(userMod.getKey());\n-        Set<String> requestedRealms = new HashSet<>();\n-        requestedRealms.add(toUpdate.getRealm());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            requestedRealms.add(actual.getRealm());\n-        }\n-        Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n-                requestedRealms);\n-        securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n-        if (StringUtils.isNotBlank(actual.getRealm())) {\n-            securityChecks(effectiveRealms, actual.getRealm(), toUpdate.getKey());\n-        }\n+    protected UserTO doUpdate(final UserMod userMod, final boolean self) {\n+        UserTO userTO = binder.getUserTO(userMod.getKey());\n+        Pair<UserMod, List<LogicActions>> before = beforeUpdate(userMod, userTO.getRealm());\n \n-        return doUpdate(actual);\n-    }\n+        if (!self) {\n+            Set<String> requestedRealms = new HashSet<>();\n+            requestedRealms.add(before.getLeft().getRealm());\n+            if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+                requestedRealms.add(before.getLeft().getRealm());\n+            }\n+            Set<String> effectiveRealms = getEffectiveRealms(\n+                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_UPDATE),\n+                    requestedRealms);\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+            if (StringUtils.isNotBlank(before.getLeft().getRealm())) {\n+                securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+            }\n+        }\n \n-    protected UserTO doUpdate(final UserMod userMod) {\n-        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(userMod);\n+        Map.Entry<Long, List<PropagationStatus>> updated = provisioningManager.update(before.getLeft());\n \n         UserTO updatedTO = binder.getUserTO(updated.getKey());\n         updatedTO.getPropagationStatusTOs().addAll(updated.getValue());\n-        return updatedTO;\n+\n+        return afterUpdate(updatedTO, before.getRight());\n     }\n \n     protected Map.Entry<Long, List<PropagationStatus>> setStatusOnWfAdapter(final StatusMod statusMod) {\n@@ -298,6 +291,13 @@ public UserTO status(final StatusMod statusMod) {\n         return savedTO;\n     }\n \n+    @PreAuthorize(\"hasRole('\" + Entitlement.MUST_CHANGE_PASSWORD + \"')\")\n+    public UserTO changePassword(final String password) {\n+        UserMod userMod = new UserMod();\n+        userMod.setPassword(password);\n+        return selfUpdate(userMod);\n+    }\n+\n     @PreAuthorize(\"isAnonymous() or hasRole('\" + Entitlement.ANONYMOUS + \"')\")\n     @Transactional\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n@@ -332,25 +332,27 @@ public void confirmPasswordReset(final String token, final String password) {\n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + Entitlement.ANONYMOUS + \"'))\")\n     public UserTO selfDelete() {\n         UserTO userTO = binder.getAuthenticatedUserTO();\n-\n-        return doDelete(userTO.getKey());\n+        return doDelete(userTO, true);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_DELETE + \"')\")\n     @Override\n     public UserTO delete(final Long key) {\n-        // security checks\n-        UserTO toDelete = binder.getUserTO(key);\n-        Set<String> effectiveRealms = getEffectiveRealms(\n-                AuthContextUtils.getAuthorizations().get(Entitlement.USER_DELETE),\n-                Collections.singleton(toDelete.getRealm()));\n-        securityChecks(effectiveRealms, toDelete.getRealm(), toDelete.getKey());\n-\n-        return doDelete(key);\n+        UserTO userTO = binder.getUserTO(key);\n+        return doDelete(userTO, false);\n     }\n \n-    protected UserTO doDelete(final Long key) {\n-        List<Group> ownedGroups = groupDAO.findOwnedByUser(key);\n+    protected UserTO doDelete(final UserTO userTO, final boolean self) {\n+        Pair<UserTO, List<LogicActions>> before = beforeDelete(userTO);\n+\n+        if (!self) {\n+            Set<String> effectiveRealms = getEffectiveRealms(\n+                    AuthContextUtils.getAuthorizations().get(Entitlement.USER_DELETE),\n+                    Collections.singleton(before.getLeft().getRealm()));\n+            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+        }\n+\n+        List<Group> ownedGroups = groupDAO.findOwnedByUser(before.getLeft().getKey());\n         if (!ownedGroups.isEmpty()) {\n             SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.GroupOwnership);\n             sce.getElements().addAll(CollectionUtils.collect(ownedGroups, new Transformer<Group, String>() {\n@@ -363,18 +365,18 @@ public String transform(final Group group) {\n             throw sce;\n         }\n \n-        List<PropagationStatus> statuses = provisioningManager.delete(key);\n+        List<PropagationStatus> statuses = provisioningManager.delete(before.getLeft().getKey());\n \n         UserTO deletedTO;\n-        if (userDAO.find(key) == null) {\n+        if (userDAO.find(before.getLeft().getKey()) == null) {\n             deletedTO = new UserTO();\n-            deletedTO.setKey(key);\n+            deletedTO.setKey(before.getLeft().getKey());\n         } else {\n-            deletedTO = binder.getUserTO(key);\n+            deletedTO = binder.getUserTO(before.getLeft().getKey());\n         }\n         deletedTO.getPropagationStatusTOs().addAll(statuses);\n \n-        return deletedTO;\n+        return afterDelete(deletedTO, before.getRight());\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")"},{"sha":"d68df96ccfff1f5d8d1c99634006c567887c88e5","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/ClassPathScanImplementationLookup.java","status":"modified","additions":11,"deletions":5,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FClassPathScanImplementationLookup.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.core.persistence.api.dao.AccountRuleConfClass;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.PasswordRuleConfClass;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n import org.apache.syncope.core.provisioning.api.job.SchedTaskJobDelegate;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationActions;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n@@ -90,12 +91,13 @@ public void load() {\n         scanner.addIncludeFilter(new AssignableTypeFilter(AccountRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PasswordRule.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SchedTaskJobDelegate.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(LogicActions.class));\n+        scanner.addIncludeFilter(new AssignableTypeFilter(PropagationActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(PushActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(SyncCorrelationRule.class));\n         // Remove once SYNCOPE-470 is done\n         //scanner.addIncludeFilter(new AssignableTypeFilter(PushCorrelationRule.class));\n-        scanner.addIncludeFilter(new AssignableTypeFilter(PropagationActions.class));\n         scanner.addIncludeFilter(new AssignableTypeFilter(Validator.class));\n \n         for (BeanDefinition bd : scanner.findCandidateComponents(StringUtils.EMPTY)) {\n@@ -136,6 +138,14 @@ public void load() {\n                     classNames.get(Type.TASKJOBDELEGATE).add(bd.getBeanClassName());\n                 }\n \n+                if (LogicActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.LOGIC_ACTIONS).add(bd.getBeanClassName());\n+                }\n+\n+                if (PropagationActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n+                    classNames.get(Type.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n+                }\n+\n                 if (SyncActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     classNames.get(Type.SYNC_ACTIONS).add(bd.getBeanClassName());\n                 }\n@@ -152,10 +162,6 @@ public void load() {\n                 /* if (PushCorrelationRule.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                  * classNames.get(Type.PUSH_CORRELATION_RULES).add(metadata.getClassName());\n                  * } */\n-                if (PropagationActions.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n-                    classNames.get(Type.PROPAGATION_ACTIONS).add(bd.getBeanClassName());\n-                }\n-\n                 if (Validator.class.isAssignableFrom(clazz) && !isAbsractClazz) {\n                     classNames.get(Type.VALIDATOR).add(bd.getBeanClassName());\n                 }"},{"sha":"c4c192869d849c69312ab9711bd2ae178abda9d4","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/init/LoggerLoader.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FLoggerLoader.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -37,7 +37,6 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.jdbc.datasource.DataSourceUtils;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n \n @Component\n public class LoggerLoader implements SyncopeLoader {\n@@ -53,7 +52,6 @@ public Integer getPriority() {\n         return 300;\n     }\n \n-    @Transactional\n     @Override\n     public void load() {\n         final LoggerContext ctx = (LoggerContext) LogManager.getContext(false);"},{"sha":"4af398a1f0f4e13239122397f30eb3530df92a61","filename":"core/logic/src/main/resources/logic.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2Flogic.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -14,5 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-anyTransformer=org.apache.syncope.core.provisioning.java.DefaultAnyTransformer\n logicInvocationHandler=org.apache.syncope.core.logic.LogicInvocationHandler"},{"sha":"5bec085185cff9e06a295fb51f8c4eced21e7a6a","filename":"core/logic/src/main/resources/logicContext.xml","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fresources%2FlogicContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Flogic%2Fsrc%2Fmain%2Fresources%2FlogicContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fresources%2FlogicContext.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -37,6 +37,5 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.core.logic\"/>\n \n   <bean class=\"${logicInvocationHandler}\"/>\n-  <bean class=\"${anyTransformer}\"/>\n \n </beans>"},{"sha":"02c6e62373c58f36ab7427a2724ad55fd6f160e3","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":4,"deletions":135,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -35,32 +35,26 @@\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n-import org.apache.syncope.common.lib.to.MembershipTO;\n-import org.apache.syncope.common.lib.to.RelationshipTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.misc.security.Encryptor;\n-import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.misc.security.PasswordGenerator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n import org.identityconnectors.common.Base64;\n import org.identityconnectors.common.security.GuardedByteArray;\n import org.identityconnectors.common.security.GuardedString;\n@@ -78,13 +72,13 @@ public class ConnObjectUtils {\n     private static final Logger LOG = LoggerFactory.getLogger(ConnObjectUtils.class);\n \n     @Autowired\n-    private RealmDAO realmDAO;\n+    private TemplateUtils templateUtils;\n \n     @Autowired\n-    private UserDAO userDAO;\n+    private RealmDAO realmDAO;\n \n     @Autowired\n-    private GroupDAO groupDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n     private ExternalResourceDAO resourceDAO;\n@@ -320,57 +314,7 @@ private <T extends AnyTO> T getAnyTOFromConnObject(final ConnectorObject obj,\n         }\n \n         // 2. add data from defined template (if any)\n-        AnyTemplate anyTypeTemplate = syncTask.getTemplate(provision.getAnyType());\n-        if (anyTypeTemplate != null) {\n-            AnyTO template = anyTypeTemplate.get();\n-            fillFromTemplate(anyTO, template);\n-\n-            if (template instanceof AnyObjectTO) {\n-                fillRelationshipsFromTemplate(((AnyObjectTO) anyTO).getRelationshipMap(),\n-                        ((AnyObjectTO) anyTO).getRelationships(), ((AnyObjectTO) template).getRelationships());\n-                fillMembershipsFromTemplate(((AnyObjectTO) anyTO).getMembershipMap(),\n-                        ((AnyObjectTO) anyTO).getMemberships(), ((AnyObjectTO) template).getMemberships());\n-            } else if (template instanceof UserTO) {\n-                if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n-                    String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO);\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((UserTO) anyTO).setUsername(evaluated);\n-                    }\n-                }\n-\n-                if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n-                    String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO);\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((UserTO) anyTO).setPassword(evaluated);\n-                    }\n-                }\n-\n-                fillRelationshipsFromTemplate(((UserTO) anyTO).getRelationshipMap(),\n-                        ((UserTO) anyTO).getRelationships(), ((UserTO) template).getRelationships());\n-                fillMembershipsFromTemplate(((UserTO) anyTO).getMembershipMap(),\n-                        ((UserTO) anyTO).getMemberships(), ((UserTO) template).getMemberships());\n-            } else if (template instanceof GroupTO) {\n-                if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n-                    String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO);\n-                    if (StringUtils.isNotBlank(evaluated)) {\n-                        ((GroupTO) anyTO).setName(evaluated);\n-                    }\n-                }\n-\n-                if (((GroupTO) template).getUserOwner() != null) {\n-                    final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n-                    if (userOwner != null) {\n-                        ((GroupTO) anyTO).setUserOwner(userOwner.getKey());\n-                    }\n-                }\n-                if (((GroupTO) template).getGroupOwner() != null) {\n-                    final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n-                    if (groupOwner != null) {\n-                        ((GroupTO) anyTO).setGroupOwner(groupOwner.getKey());\n-                    }\n-                }\n-            }\n-        }\n+        templateUtils.apply(anyTO, syncTask.getTemplate(provision.getAnyType()));\n \n         return anyTO;\n     }\n@@ -442,81 +386,6 @@ public ConnObjectTO getConnObjectTO(final ConnectorObject connObject) {\n         return connObjectTO;\n     }\n \n-    private AttrTO evaluateAttrFromTemplate(final AnyTO anyTO, final AttrTO template) {\n-        AttrTO result = new AttrTO();\n-        result.setSchema(template.getSchema());\n-\n-        if (template.getValues() != null && !template.getValues().isEmpty()) {\n-            for (String value : template.getValues()) {\n-                String evaluated = JexlUtils.evaluate(value, anyTO);\n-                if (StringUtils.isNotBlank(evaluated)) {\n-                    result.getValues().add(evaluated);\n-                }\n-            }\n-        }\n-\n-        return result;\n-    }\n-\n-    private void fillFromTemplate(final AnyTO anyTO, final AnyTO template) {\n-        if (template.getRealm() != null) {\n-            anyTO.setRealm(template.getRealm());\n-        }\n-\n-        Map<String, AttrTO> currentAttrMap = anyTO.getPlainAttrMap();\n-        for (AttrTO templatePlainAttr : template.getPlainAttrs()) {\n-            if (!templatePlainAttr.getValues().isEmpty()\n-                    && (!currentAttrMap.containsKey(templatePlainAttr.getSchema())\n-                    || currentAttrMap.get(templatePlainAttr.getSchema()).getValues().isEmpty())) {\n-\n-                anyTO.getPlainAttrs().add(evaluateAttrFromTemplate(anyTO, templatePlainAttr));\n-            }\n-        }\n-\n-        currentAttrMap = anyTO.getDerAttrMap();\n-        for (AttrTO templateDerAttr : template.getDerAttrs()) {\n-            if (!currentAttrMap.containsKey(templateDerAttr.getSchema())) {\n-                anyTO.getDerAttrs().add(templateDerAttr);\n-            }\n-        }\n-\n-        currentAttrMap = anyTO.getVirAttrMap();\n-        for (AttrTO templateVirAttr : template.getVirAttrs()) {\n-            if (!templateVirAttr.getValues().isEmpty()\n-                    && (!currentAttrMap.containsKey(templateVirAttr.getSchema())\n-                    || currentAttrMap.get(templateVirAttr.getSchema()).getValues().isEmpty())) {\n-\n-                anyTO.getVirAttrs().add(evaluateAttrFromTemplate(anyTO, templateVirAttr));\n-            }\n-        }\n-\n-        for (String resource : template.getResources()) {\n-            anyTO.getResources().add(resource);\n-        }\n-\n-        anyTO.getAuxClasses().addAll(template.getAuxClasses());\n-    }\n-\n-    private void fillRelationshipsFromTemplate(final Map<Long, RelationshipTO> anyRelMap,\n-            final List<RelationshipTO> anyRels, final List<RelationshipTO> templateRels) {\n-\n-        for (RelationshipTO memb : templateRels) {\n-            if (!anyRelMap.containsKey(memb.getRightKey())) {\n-                anyRels.add(memb);\n-            }\n-        }\n-    }\n-\n-    private void fillMembershipsFromTemplate(final Map<Long, MembershipTO> anyMembMap,\n-            final List<MembershipTO> anyMembs, final List<MembershipTO> templateMembs) {\n-\n-        for (MembershipTO memb : templateMembs) {\n-            if (!anyMembMap.containsKey(memb.getRightKey())) {\n-                anyMembs.add(memb);\n-            }\n-        }\n-    }\n-\n     /**\n      * Transform a\n      * <code>Collection</code> of {@link Attribute} instances into a {@link Map}. The key to each element in the map is"},{"sha":"3e7a8020671414ae19e4a50ef1f74d210bdb43a7","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -46,9 +46,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n-import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.VirAttr;\n-import org.apache.syncope.core.persistence.api.entity.VirSchema;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttrValue;\n@@ -61,6 +59,7 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n+import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n@@ -262,7 +261,7 @@ private static Pair<String, Attribute> prepareAttr(\n         List<PlainAttrValue> values = getIntValues(\n                 provision, mapItem, anys, vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n-        PlainSchema schema = null;\n+        Schema schema = null;\n         boolean readOnlyVirSchema = false;\n         AttrSchemaType schemaType;\n         Pair<String, Attribute> result;\n@@ -280,8 +279,8 @@ private static Pair<String, Attribute> prepareAttr(\n             case GroupVirtualSchema:\n             case AnyObjectVirtualSchema:\n                 VirSchemaDAO virSchemaDAO = beanFactory.getBean(VirSchemaDAO.class);\n-                VirSchema virSchema = virSchemaDAO.find(mapItem.getIntAttrName());\n-                readOnlyVirSchema = (virSchema != null && virSchema.isReadonly());\n+                schema = virSchemaDAO.find(mapItem.getIntAttrName());\n+                readOnlyVirSchema = (schema != null && schema.isReadonly());\n                 schemaType = AttrSchemaType.String;\n                 break;\n "},{"sha":"d990cdb725267a23a2e3502656b60f18695f1746","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/TemplateUtils.java","status":"added","additions":223,"deletions":0,"changes":223,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FTemplateUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FTemplateUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FTemplateUtils.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,223 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc;\n+\n+import java.util.List;\n+import java.util.Map;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.AnyTO;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n+import org.apache.syncope.common.lib.to.RelationshipTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class TemplateUtils {\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n+    private AttrTO evaluateAttr(final AnyTO anyTO, final AttrTO template) {\n+        AttrTO result = new AttrTO();\n+        result.setSchema(template.getSchema());\n+\n+        if (template.getValues() != null && !template.getValues().isEmpty()) {\n+            for (String value : template.getValues()) {\n+                String evaluated = JexlUtils.evaluate(value, anyTO);\n+                if (StringUtils.isNotBlank(evaluated)) {\n+                    result.getValues().add(evaluated);\n+                }\n+            }\n+        }\n+\n+        return result;\n+    }\n+\n+    private void fill(final AnyTO anyTO, final AnyTO template) {\n+        if (template.getRealm() != null) {\n+            anyTO.setRealm(template.getRealm());\n+        }\n+\n+        Map<String, AttrTO> currentAttrMap = anyTO.getPlainAttrMap();\n+        for (AttrTO templatePlainAttr : template.getPlainAttrs()) {\n+            if (!templatePlainAttr.getValues().isEmpty()\n+                    && (!currentAttrMap.containsKey(templatePlainAttr.getSchema())\n+                    || currentAttrMap.get(templatePlainAttr.getSchema()).getValues().isEmpty())) {\n+\n+                anyTO.getPlainAttrs().add(evaluateAttr(anyTO, templatePlainAttr));\n+            }\n+        }\n+\n+        currentAttrMap = anyTO.getDerAttrMap();\n+        for (AttrTO templateDerAttr : template.getDerAttrs()) {\n+            if (!currentAttrMap.containsKey(templateDerAttr.getSchema())) {\n+                anyTO.getDerAttrs().add(templateDerAttr);\n+            }\n+        }\n+\n+        currentAttrMap = anyTO.getVirAttrMap();\n+        for (AttrTO templateVirAttr : template.getVirAttrs()) {\n+            if (!templateVirAttr.getValues().isEmpty()\n+                    && (!currentAttrMap.containsKey(templateVirAttr.getSchema())\n+                    || currentAttrMap.get(templateVirAttr.getSchema()).getValues().isEmpty())) {\n+\n+                anyTO.getVirAttrs().add(evaluateAttr(anyTO, templateVirAttr));\n+            }\n+        }\n+\n+        for (String resource : template.getResources()) {\n+            anyTO.getResources().add(resource);\n+        }\n+\n+        anyTO.getAuxClasses().addAll(template.getAuxClasses());\n+    }\n+\n+    private void fillRelationships(final Map<Long, RelationshipTO> anyRelMap,\n+            final List<RelationshipTO> anyRels, final List<RelationshipTO> templateRels) {\n+\n+        for (RelationshipTO memb : templateRels) {\n+            if (!anyRelMap.containsKey(memb.getRightKey())) {\n+                anyRels.add(memb);\n+            }\n+        }\n+    }\n+\n+    private void fillMemberships(final Map<Long, MembershipTO> anyMembMap,\n+            final List<MembershipTO> anyMembs, final List<MembershipTO> templateMembs) {\n+\n+        for (MembershipTO memb : templateMembs) {\n+            if (!anyMembMap.containsKey(memb.getRightKey())) {\n+                anyMembs.add(memb);\n+            }\n+        }\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public <T extends AnyTO> void apply(final T anyTO, final AnyTemplate anyTemplate) {\n+        if (anyTemplate != null) {\n+            AnyTO template = anyTemplate.get();\n+            fill(anyTO, template);\n+\n+            if (template instanceof AnyObjectTO) {\n+                fillRelationships(((AnyObjectTO) anyTO).getRelationshipMap(),\n+                        ((AnyObjectTO) anyTO).getRelationships(), ((AnyObjectTO) template).getRelationships());\n+                fillMemberships(((AnyObjectTO) anyTO).getMembershipMap(),\n+                        ((AnyObjectTO) anyTO).getMemberships(), ((AnyObjectTO) template).getMemberships());\n+            } else if (template instanceof UserTO) {\n+                if (StringUtils.isNotBlank(((UserTO) template).getUsername())) {\n+                    String evaluated = JexlUtils.evaluate(((UserTO) template).getUsername(), anyTO);\n+                    if (StringUtils.isNotBlank(evaluated)) {\n+                        ((UserTO) anyTO).setUsername(evaluated);\n+                    }\n+                }\n+\n+                if (StringUtils.isNotBlank(((UserTO) template).getPassword())) {\n+                    String evaluated = JexlUtils.evaluate(((UserTO) template).getPassword(), anyTO);\n+                    if (StringUtils.isNotBlank(evaluated)) {\n+                        ((UserTO) anyTO).setPassword(evaluated);\n+                    }\n+                }\n+\n+                fillRelationships(((UserTO) anyTO).getRelationshipMap(),\n+                        ((UserTO) anyTO).getRelationships(), ((UserTO) template).getRelationships());\n+                fillMemberships(((UserTO) anyTO).getMembershipMap(),\n+                        ((UserTO) anyTO).getMemberships(), ((UserTO) template).getMemberships());\n+            } else if (template instanceof GroupTO) {\n+                if (StringUtils.isNotBlank(((GroupTO) template).getName())) {\n+                    String evaluated = JexlUtils.evaluate(((GroupTO) template).getName(), anyTO);\n+                    if (StringUtils.isNotBlank(evaluated)) {\n+                        ((GroupTO) anyTO).setName(evaluated);\n+                    }\n+                }\n+\n+                if (((GroupTO) template).getUserOwner() != null) {\n+                    final User userOwner = userDAO.find(((GroupTO) template).getUserOwner());\n+                    if (userOwner != null) {\n+                        ((GroupTO) anyTO).setUserOwner(userOwner.getKey());\n+                    }\n+                }\n+                if (((GroupTO) template).getGroupOwner() != null) {\n+                    final Group groupOwner = groupDAO.find(((GroupTO) template).getGroupOwner());\n+                    if (groupOwner != null) {\n+                        ((GroupTO) anyTO).setGroupOwner(groupOwner.getKey());\n+                    }\n+                }\n+            }\n+        }\n+    }\n+\n+    public void check(final Map<String, AnyTO> templates, final ClientExceptionType clientExceptionType) {\n+        SyncopeClientException sce = SyncopeClientException.build(clientExceptionType);\n+\n+        for (Map.Entry<String, AnyTO> entry : templates.entrySet()) {\n+            for (AttrTO attrTO : entry.getValue().getPlainAttrs()) {\n+                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+                }\n+            }\n+\n+            for (AttrTO attrTO : entry.getValue().getVirAttrs()) {\n+                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n+                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n+                }\n+            }\n+\n+            if (entry.getValue() instanceof UserTO) {\n+                UserTO template = (UserTO) entry.getValue();\n+                if (StringUtils.isNotBlank(template.getUsername())\n+                        && !JexlUtils.isExpressionValid(template.getUsername())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n+                }\n+                if (StringUtils.isNotBlank(template.getPassword())\n+                        && !JexlUtils.isExpressionValid(template.getPassword())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n+                }\n+            } else if (entry.getValue() instanceof GroupTO) {\n+                GroupTO template = (GroupTO) entry.getValue();\n+                if (StringUtils.isNotBlank(template.getName())\n+                        && !JexlUtils.isExpressionValid(template.getName())) {\n+\n+                    sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n+                }\n+            }\n+        }\n+\n+        if (!sce.isEmpty()) {\n+            throw sce;\n+        }\n+    }\n+}"},{"sha":"ff9e6462d55a1f048af5ab90629013e8b0d7d13a","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/AuthDataAccessor.java","status":"modified","additions":38,"deletions":38,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FAuthDataAccessor.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -28,8 +28,6 @@\n import javax.annotation.Resource;\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.IteratorUtils;\n-import org.apache.commons.collections4.PredicateUtils;\n import org.apache.commons.collections4.SetUtils;\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n@@ -232,53 +230,55 @@ public Set<SyncopeGrantedAuthority> load(final String username) {\n         if (anonymousUser.equals(username)) {\n             authorities.add(new SyncopeGrantedAuthority(Entitlement.ANONYMOUS));\n         } else if (adminUser.equals(username)) {\n-            CollectionUtils.collect(IteratorUtils.filteredIterator(Entitlement.values().iterator(),\n-                    PredicateUtils.notPredicate(PredicateUtils.equalPredicate(Entitlement.ANONYMOUS))),\n-                    new Transformer<String, SyncopeGrantedAuthority>() {\n+            CollectionUtils.collect(Entitlement.values(), new Transformer<String, SyncopeGrantedAuthority>() {\n \n-                        @Override\n-                        public SyncopeGrantedAuthority transform(final String entitlement) {\n-                            return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                        }\n-                    },\n-                    authorities);\n+                @Override\n+                public SyncopeGrantedAuthority transform(final String entitlement) {\n+                    return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+                }\n+            }, authorities);\n         } else {\n             User user = userDAO.find(username);\n             if (user == null) {\n                 throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n             }\n \n-            // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n-            // statically and dynamically\n-            for (final Role role : userDAO.findAllRoles(user)) {\n-                CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n+            if (user.isMustChangePassword()) {\n+                authorities.add(new SyncopeGrantedAuthority(Entitlement.MUST_CHANGE_PASSWORD));\n+            } else {\n+                // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n+                // statically and dynamically\n+                for (final Role role : userDAO.findAllRoles(user)) {\n+                    CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n \n-                    @Override\n-                    public void execute(final String entitlement) {\n-                        SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n-                        authorities.add(authority);\n+                        @Override\n+                        public void execute(final String entitlement) {\n+                            SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n+                            authorities.add(authority);\n+\n+                            List<String> realmFullPahs = new ArrayList<>();\n+                            CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+\n+                                @Override\n+                                public String transform(final Realm realm) {\n+                                    return realm.getFullPath();\n+                                }\n+                            }, realmFullPahs);\n+                            authority.addRealms(realmFullPahs);\n+                        }\n+                    });\n+                }\n \n-                        List<String> realmFullPahs = new ArrayList<>();\n-                        CollectionUtils.collect(role.getRealms(), new Transformer<Realm, String>() {\n+                // Give group entitlements for owned groups\n+                for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n+                    for (String entitlement : Arrays.asList(\n+                            Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n \n-                            @Override\n-                            public String transform(final Realm realm) {\n-                                return realm.getFullPath();\n-                            }\n-                        }, realmFullPahs);\n-                        authority.addRealms(realmFullPahs);\n+                        SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n+                        authority.addRealm(\n+                                RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+                        authorities.add(authority);\n                     }\n-                });\n-            }\n-\n-            // Give group entitlements for owned groups\n-            for (Group group : groupDAO.findOwnedByUser(user.getKey())) {\n-                for (String entitlement : Arrays.asList(\n-                        Entitlement.GROUP_READ, Entitlement.GROUP_UPDATE, Entitlement.GROUP_DELETE)) {\n-\n-                    SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(entitlement);\n-                    authority.addRealm(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n-                    authorities.add(authority);\n                 }\n             }\n         }"},{"sha":"13a449f21b77ba68aefc64aff103ab555bf9617b","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/DelegatedAdministrationException.java","status":"renamed","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDelegatedAdministrationException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDelegatedAdministrationException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FDelegatedAdministrationException.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -20,11 +20,11 @@\n \n import org.apache.syncope.common.lib.types.AnyTypeKind;\n \n-public class UnauthorizedException extends RuntimeException {\n+public class DelegatedAdministrationException extends RuntimeException {\n \n     private static final long serialVersionUID = 7540587364235915081L;\n \n-    public UnauthorizedException(final AnyTypeKind type, final Long key) {\n+    public DelegatedAdministrationException(final AnyTypeKind type, final Long key) {\n         super(\"Missing entitlement or realm administration for \"\n                 + (key == null\n                         ? \"new \" + type","previous_filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/UnauthorizedException.java"},{"sha":"3aafb47227edeef1bb034995254bd0dcc68948ad","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/MustChangePasswordFilter.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FMustChangePasswordFilter.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.io.IOException;\n+import javax.servlet.Filter;\n+import javax.servlet.FilterChain;\n+import javax.servlet.FilterConfig;\n+import javax.servlet.ServletException;\n+import javax.servlet.ServletRequest;\n+import javax.servlet.ServletResponse;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.web.servletapi.SecurityContextHolderAwareRequestWrapper;\n+\n+public class MustChangePasswordFilter implements Filter {\n+\n+    private static final String[] ALLOWED = new String[] {\n+        \"/users/self\", \"/users/self/changePassword\"\n+    };\n+\n+    @Override\n+    public void init(final FilterConfig filterConfig) throws ServletException {\n+        // not used\n+    }\n+\n+    @Override\n+    public void destroy() {\n+        // not used\n+    }\n+\n+    @Override\n+    public void doFilter(final ServletRequest request, final ServletResponse response, final FilterChain chain)\n+            throws IOException, ServletException {\n+\n+        if (request instanceof SecurityContextHolderAwareRequestWrapper) {\n+            boolean isMustChangePassword = CollectionUtils.exists(\n+                    SecurityContextHolder.getContext().getAuthentication().getAuthorities(),\n+                    new Predicate<GrantedAuthority>() {\n+\n+                        @Override\n+                        public boolean evaluate(final GrantedAuthority authority) {\n+                            return Entitlement.MUST_CHANGE_PASSWORD.equals(authority.getAuthority());\n+                        }\n+                    });\n+\n+            SecurityContextHolderAwareRequestWrapper wrapper =\n+                    SecurityContextHolderAwareRequestWrapper.class.cast(request);\n+            if (isMustChangePassword && \"GET\".equalsIgnoreCase(wrapper.getMethod())\n+                    && !ArrayUtils.contains(ALLOWED, wrapper.getPathInfo())) {\n+\n+                throw new AccessDeniedException(\"Please change your password first\");\n+            }\n+        }\n+\n+        chain.doFilter(request, response);\n+    }\n+\n+}"},{"sha":"8ab1d3146b3c1e1b5413fd94b3a357b1c3ac3638","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAccessDeniedHandler.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAccessDeniedHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAccessDeniedHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAccessDeniedHandler.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.security.web.access.AccessDeniedHandlerImpl;\n+\n+/**\n+ * Render Spring's {@link AccessDeniedException} as other Syncope errors.\n+ */\n+public class SyncopeAccessDeniedHandler extends AccessDeniedHandlerImpl {\n+\n+    @Override\n+    public void handle(final HttpServletRequest request, final HttpServletResponse response,\n+            final AccessDeniedException accessDeniedException) throws IOException, ServletException {\n+\n+        response.addHeader(RESTHeaders.ERROR_INFO, accessDeniedException.getMessage());\n+\n+        super.handle(request, response, accessDeniedException);\n+    }\n+\n+}"},{"sha":"6213264cc09750898fd24a16b3cb6045fcab71c7","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationEntryPoint.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationEntryPoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationEntryPoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationEntryPoint.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.security;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.authentication.www.BasicAuthenticationEntryPoint;\n+\n+/**\n+ * Render Spring's {@link AuthenticationException} as other Syncope errors.\n+ */\n+public class SyncopeAuthenticationEntryPoint extends BasicAuthenticationEntryPoint {\n+\n+    @Override\n+    public void commence(final HttpServletRequest request, final HttpServletResponse response,\n+            final AuthenticationException authException) throws IOException, ServletException {\n+\n+        response.addHeader(RESTHeaders.ERROR_INFO, authException.getMessage());\n+\n+        super.commence(request, response, authException);\n+    }\n+\n+}"},{"sha":"e67dcd69d6150bdd3d887926cc42fd8f6f1498f9","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/spring/ApplicationContextProvider.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FApplicationContextProvider.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,12 +18,10 @@\n  */\n package org.apache.syncope.core.misc.spring;\n \n-import org.springframework.beans.factory.config.BeanDefinition;\n import org.springframework.beans.factory.support.DefaultListableBeanFactory;\n import org.springframework.context.ApplicationContext;\n import org.springframework.context.ApplicationContextAware;\n import org.springframework.context.ConfigurableApplicationContext;\n-import org.springframework.transaction.interceptor.TransactionInterceptor;\n \n public class ApplicationContextProvider implements ApplicationContextAware {\n \n@@ -43,16 +41,8 @@ public static DefaultListableBeanFactory getBeanFactory() {\n                 : BEAN_FACTORY;\n     }\n \n-    private static void enableDomainTransactionInterceptor() {\n-        for (String name : getBeanFactory().getBeanNamesForType(TransactionInterceptor.class)) {\n-            BeanDefinition bd = getBeanFactory().getBeanDefinition(name);\n-            bd.setBeanClassName(DomainTransactionInterceptor.class.getName());\n-        }\n-    }\n-\n     public static void setBeanFactory(final DefaultListableBeanFactory beanFactory) {\n         BEAN_FACTORY = beanFactory;\n-        enableDomainTransactionInterceptor();\n     }\n \n     /**\n@@ -63,6 +53,5 @@ public static void setBeanFactory(final DefaultListableBeanFactory beanFactory)\n     @Override\n     public void setApplicationContext(final ApplicationContext ctx) {\n         CTX = (ConfigurableApplicationContext) ctx;\n-        enableDomainTransactionInterceptor();\n     }\n }"},{"sha":"d9d772b07ff70245a57d402543be6e9a6db517eb","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/spring/DomainTransactionInterceptorInjector.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptorInjector.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptorInjector.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fspring%2FDomainTransactionInterceptorInjector.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.misc.spring;\n+\n+import org.springframework.beans.BeansException;\n+import org.springframework.beans.factory.config.BeanDefinition;\n+import org.springframework.beans.factory.config.BeanFactoryPostProcessor;\n+import org.springframework.beans.factory.config.ConfigurableListableBeanFactory;\n+import org.springframework.transaction.interceptor.TransactionInterceptor;\n+\n+/**\n+ * Replaces Spring's {@link TransactionInterceptor} with {@link DomainTransactionInterceptor}.\n+ */\n+public class DomainTransactionInterceptorInjector implements BeanFactoryPostProcessor {\n+\n+    @Override\n+    public void postProcessBeanFactory(final ConfigurableListableBeanFactory beanFactory) throws BeansException {\n+        BeanDefinition bd = beanFactory.getBeanDefinition(TransactionInterceptor.class.getName() + \"#0\");\n+        bd.setBeanClassName(DomainTransactionInterceptor.class.getName());\n+    }\n+\n+}"},{"sha":"222d64aca86abcc5c498a7b322fd61a9d1360ce7","filename":"core/misc/src/main/resources/securityContext.xml","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -53,12 +53,27 @@ under the License.\n   <bean id=\"syncopeAuthenticationDetailsSource\"\n         class=\"org.apache.syncope.core.misc.security.SyncopeAuthenticationDetailsSource\"/>\n \n-  <security:http security-context-repository-ref=\"securityContextRepository\" realm=\"Apache Syncope authentication\" \n+  <bean id=\"mustChangePasswordFilter\" class=\"org.apache.syncope.core.misc.security.MustChangePasswordFilter\"/>\n+      \n+  <bean id=\"syncopeAuthenticationEntryPoint\" \n+        class=\"org.apache.syncope.core.misc.security.SyncopeAuthenticationEntryPoint\">\n+    <property name=\"realmName\" value=\"Apache Syncope authentication\"/>\n+  </bean>\n+\n+  <bean id=\"syncopeAccessDeniedHandler\" class=\"org.apache.syncope.core.misc.security.SyncopeAccessDeniedHandler\"/>\n+  \n+  <security:http security-context-repository-ref=\"securityContextRepository\"\n                  use-expressions=\"false\" disable-url-rewriting=\"false\">\n-    <security:http-basic authentication-details-source-ref=\"syncopeAuthenticationDetailsSource\"/>\n+\n+    <security:http-basic entry-point-ref=\"syncopeAuthenticationEntryPoint\"\n+                         authentication-details-source-ref=\"syncopeAuthenticationDetailsSource\"/>\n     <security:anonymous username=\"${anonymousUser}\"/>\n     <security:intercept-url pattern=\"/**\"/>\n     \n+    <security:custom-filter before=\"FILTER_SECURITY_INTERCEPTOR\" ref=\"mustChangePasswordFilter\"/>\n+    \n+    <security:access-denied-handler ref=\"syncopeAccessDeniedHandler\"/>\n+    \n     <security:headers disabled=\"true\"/>\n     <security:csrf disabled=\"true\"/>\n   </security:http>"},{"sha":"530b4061b83414ca3edd958e0a4f18584bc6cdaa","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/ImplementationLookup.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2FImplementationLookup.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -34,6 +34,7 @@ public enum Type {\n         ACCOUNT_RULE,\n         PASSWORD_RULE,\n         TASKJOBDELEGATE,\n+        LOGIC_ACTIONS,\n         PROPAGATION_ACTIONS,\n         SYNC_ACTIONS,\n         PUSH_ACTIONS,"},{"sha":"c00d3a4d903c96495d28ad3c8c53be2c764fdfd2","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyTemplate.java","status":"renamed","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplate.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -16,18 +16,12 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.api.entity.task;\n+package org.apache.syncope.core.persistence.api.entity;\n \n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n \n public interface AnyTemplate extends Entity<Long> {\n \n-    SyncTask getSyncTask();\n-\n-    void setSyncTask(SyncTask syncTask);\n-\n     AnyType getAnyType();\n \n     void setAnyType(AnyType anyType);","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/AnyTemplate.java"},{"sha":"9caa4ad02ce4169b1dcd40a24476d3cc0e659aeb","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AnyTemplateRealm.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplateRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplateRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAnyTemplateRealm.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface AnyTemplateRealm extends AnyTemplate {\n+\n+    Realm getRealm();\n+\n+    void setRealm(Realm realm);\n+}"},{"sha":"f973138084c5490fe80daf9131ba25b26e3e8d42","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Realm.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRealm.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.core.persistence.api.entity;\n \n+import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n \n@@ -28,7 +30,7 @@ public interface Realm extends Entity<Long> {\n     Realm getParent();\n \n     String getFullPath();\n-    \n+\n     AccountPolicy getAccountPolicy();\n \n     PasswordPolicy getPasswordPolicy();\n@@ -41,4 +43,13 @@ public interface Realm extends Entity<Long> {\n \n     void setPasswordPolicy(PasswordPolicy passwordPolicy);\n \n+    Set<String> getActionsClassNames();\n+\n+    boolean add(AnyTemplateRealm template);\n+\n+    boolean remove(AnyTemplateRealm template);\n+\n+    AnyTemplateRealm getTemplate(AnyType anyType);\n+\n+    List<? extends AnyTemplateRealm> getTemplates();\n }"},{"sha":"82d7e2ee3a3e9f1404b66e7bb3f1c724ff1f1342","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/AnyTemplateSyncTask.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplateSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplateSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FAnyTemplateSyncTask.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.task;\n+\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+\n+public interface AnyTemplateSyncTask extends AnyTemplate {\n+\n+    SyncTask getSyncTask();\n+\n+    void setSyncTask(SyncTask syncTask);\n+}"},{"sha":"bc0c2b2f51b37046557e5c924b2d49ff9eacf9e1","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/task/SyncTask.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Ftask%2FSyncTask.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -32,11 +32,11 @@ public interface SyncTask extends ProvisioningTask {\n \n     void setFullReconciliation(boolean condition);\n \n-    boolean add(AnyTemplate template);\n+    boolean add(AnyTemplateSyncTask template);\n \n-    boolean remove(AnyTemplate template);\n+    boolean remove(AnyTemplateSyncTask template);\n \n-    AnyTemplate getTemplate(AnyType anyType);\n+    AnyTemplateSyncTask getTemplate(AnyType anyType);\n \n-    List<? extends AnyTemplate> getTemplates();\n+    List<? extends AnyTemplateSyncTask> getTemplates();\n }"},{"sha":"f3da581b41cb77359a7369432fd68e0118c36ea7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -87,6 +87,10 @@ public interface User extends Any<UPlainAttr, UDerAttr, UVirAttr> {\n \n     void setSuspended(Boolean suspended);\n \n+    boolean isMustChangePassword();\n+\n+    void setMustChangePassword(boolean mustChangePassword);\n+\n     @Override\n     boolean add(UPlainAttr attr);\n "},{"sha":"f5d45b9d0f13b4c37608a9f7836bdf08cbeab15b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n@@ -75,7 +75,7 @@ public boolean evaluate(final String realm) {\n             }\n         });\n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-            throw new UnauthorizedException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n+            throw new DelegatedAdministrationException(AnyTypeKind.ANY_OBJECT, anyObject.getKey());\n         }\n     }\n "},{"sha":"c4837aec2e00e980b1cdfb9223396f344bc468b5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyTypeDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyTypeDAO.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -26,20 +26,24 @@\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPAAnyTypeDAO extends AbstractDAO<AnyType, String> implements AnyTypeDAO {\n \n+    @Transactional(readOnly = true)\n     @Override\n     public AnyType find(final String key) {\n         return entityManager().find(JPAAnyType.class, key);\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public AnyType findUser() {\n         return find(AnyTypeKind.USER.name());\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public AnyType findGroup() {\n         return find(AnyTypeKind.GROUP.name());"},{"sha":"652c1f7ff6035fe54c797f9ba50673435bfd62d6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -41,7 +41,7 @@\n import org.apache.syncope.core.misc.RealmUtils;\n import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -82,7 +82,7 @@ public boolean evaluate(final String realm) {\n             }\n         });\n         if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-            throw new UnauthorizedException(AnyTypeKind.GROUP, group.getKey());\n+            throw new DelegatedAdministrationException(AnyTypeKind.GROUP, group.getKey());\n         }\n     }\n "},{"sha":"2733388358c1bb49778bd54621f936c073fbaa50","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARealmDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARealmDAO.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -39,6 +39,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPARealmDAO extends AbstractDAO<Realm, Long> implements RealmDAO {\n@@ -68,6 +69,7 @@ public Realm find(final Long key) {\n         return entityManager().find(JPARealm.class, key);\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n     public Realm find(final String fullPath) {\n         if (SyncopeConstants.ROOT_REALM.equals(fullPath)) {"},{"sha":"b8f2c472a26bdfba0a820b30256daa34b2f31641","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -39,7 +39,7 @@\n import org.apache.syncope.core.misc.policy.AccountPolicyException;\n import org.apache.syncope.core.misc.policy.PasswordPolicyException;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n@@ -112,7 +112,7 @@ public boolean evaluate(final String realm) {\n                 }\n             });\n             if (authRealms == null || authRealms.isEmpty() || !authorized) {\n-                throw new UnauthorizedException(AnyTypeKind.USER, user.getKey());\n+                throw new DelegatedAdministrationException(AnyTypeKind.USER, user.getKey());\n             }\n         }\n     }"},{"sha":"e87a22e3f534796c669f7d27fa175b557e515ab6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -122,15 +122,15 @@ public SearchView membership() {\n \n     public SearchView dyngroupmembership() {\n         String kind = anyTypeKind == AnyTypeKind.USER ? \"u\" : \"a\";\n-        return new SearchView(\"sv\" + kind + \"dgm\", field().name + \"_\" + kind + \"dyngroupmembership\");\n+        return new SearchView(\"sv\" + kind + \"dgm\", field().name + \"_\" + kind + \"dyngmemb\");\n     }\n \n     public SearchView role() {\n         return new SearchView(\"svr\", field().name + \"_role\");\n     }\n \n     public SearchView dynrolemembership() {\n-        return new SearchView(\"svdr\", field().name + \"_dynrolemembership\");\n+        return new SearchView(\"svdr\", field().name + \"_dynrmemb\");\n     }\n \n     public SearchView nullAttr() {\n@@ -142,7 +142,7 @@ public SearchView resource() {\n     }\n \n     public SearchView groupResource() {\n-        return new SearchView(\"svrr\", field().name + \"_group_resource\");\n+        return new SearchView(\"svrr\", field().name + \"_group_res\");\n     }\n \n     public SearchView uniqueAttr() {"},{"sha":"cdb4b5e3d7c0df022747647ef38fe201e69ed227","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAnyTemplateRealm.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAnyTemplateRealm.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n+\n+@Entity\n+@Table(name = JPAAnyTemplateRealm.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"realm_id\", \"anyType_name\" }))\n+public class JPAAnyTemplateRealm extends AbstractAnyTemplate implements AnyTemplateRealm {\n+\n+    public static final String TABLE = \"AnyTemplateRealm\";\n+\n+    private static final long serialVersionUID = 1863029633568957907L;\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPARealm realm;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public Realm getRealm() {\n+        return realm;\n+    }\n+\n+    @Override\n+    public void setRealm(final Realm realm) {\n+        checkType(realm, JPARealm.class);\n+        this.realm = (JPARealm) realm;\n+    }\n+\n+}"},{"sha":"4c3b8168f8db0a3c67f53d7642666717a3d6ddc3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -26,6 +26,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAExternalResource;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.AnyAbout;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n@@ -69,7 +70,7 @@\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.task.AnyFilter;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.NotificationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n@@ -107,7 +108,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAMappingItem;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyFilter;\n-import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate;\n+import org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPANotificationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPropagationTask;\n import org.apache.syncope.core.persistence.jpa.entity.task.JPAPushTask;\n@@ -137,6 +138,8 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPADomain();\n         } else if (reference.equals(Realm.class)) {\n             result = (T) new JPARealm();\n+        } else if (reference.equals(AnyTemplateRealm.class)) {\n+            result = (T) new JPAAnyTemplateRealm();\n         } else if (reference.equals(AccountPolicy.class)) {\n             result = (T) new JPAAccountPolicy();\n         } else if (reference.equals(PasswordPolicy.class)) {\n@@ -239,8 +242,8 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPATaskExec();\n         } else if (reference.equals(AnyFilter.class)) {\n             result = (T) new JPAAnyFilter();\n-        } else if (reference.equals(AnyTemplate.class)) {\n-            result = (T) new JPAAnyTemplate();\n+        } else if (reference.equals(AnyTemplateSyncTask.class)) {\n+            result = (T) new JPAAnyTemplateSyncTask();\n         } else if (reference.equals(SecurityQuestion.class)) {\n             result = (T) new JPASecurityQuestion();\n         } else if (reference.equals(Logger.class)) {"},{"sha":"8186edee6db0a8e8741900aba332b38890171bcf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARealm.java","status":"modified","additions":57,"deletions":0,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARealm.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,18 +18,33 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n import javax.persistence.ManyToOne;\n+import javax.persistence.OneToMany;\n import javax.persistence.Table;\n import javax.persistence.UniqueConstraint;\n import javax.validation.constraints.Size;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -61,6 +76,16 @@ public class JPARealm extends AbstractEntity<Long> implements Realm {\n     @ManyToOne(fetch = FetchType.EAGER)\n     private JPAAccountPolicy accountPolicy;\n \n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"actionClassName\")\n+    @CollectionTable(name = \"Realm_actionsClassNames\",\n+            joinColumns =\n+            @JoinColumn(name = \"realm_id\", referencedColumnName = \"id\"))\n+    private Set<String> actionsClassNames = new HashSet<>();\n+\n+    @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"realm\")\n+    private List<JPAAnyTemplateRealm> templates = new ArrayList<>();\n+\n     @Override\n     public Long getKey() {\n         return id;\n@@ -116,4 +141,36 @@ public void setPasswordPolicy(final PasswordPolicy passwordPolicy) {\n         this.passwordPolicy = (JPAPasswordPolicy) passwordPolicy;\n     }\n \n+    @Override\n+    public Set<String> getActionsClassNames() {\n+        return actionsClassNames;\n+    }\n+\n+    @Override\n+    public boolean add(final AnyTemplateRealm template) {\n+        checkType(template, JPAAnyTemplateRealm.class);\n+        return this.templates.add((JPAAnyTemplateRealm) template);\n+    }\n+\n+    @Override\n+    public boolean remove(final AnyTemplateRealm template) {\n+        checkType(template, JPAAnyTemplateRealm.class);\n+        return this.templates.remove((JPAAnyTemplateRealm) template);\n+    }\n+\n+    @Override\n+    public AnyTemplateRealm getTemplate(final AnyType anyType) {\n+        return CollectionUtils.find(templates, new Predicate<AnyTemplate>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyTemplate template) {\n+                return anyType != null && anyType.equals(template.getAnyType());\n+            }\n+        });\n+    }\n+\n+    @Override\n+    public List<? extends AnyTemplateRealm> getTemplates() {\n+        return templates;\n+    }\n }"},{"sha":"28febeac0d4ae79ad1e83fee71ec5fbd9444b9df","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/resource/AbstractAnyTemplate.java","status":"renamed","additions":6,"deletions":36,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fresource%2FAbstractAnyTemplate.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -16,60 +16,30 @@\n  * specific language governing permissions and limitations\n  * under the License.\n  */\n-package org.apache.syncope.core.persistence.jpa.entity.task;\n+package org.apache.syncope.core.persistence.jpa.entity.resource;\n \n-import javax.persistence.Entity;\n-import javax.persistence.Id;\n import javax.persistence.Lob;\n import javax.persistence.ManyToOne;\n-import javax.persistence.Table;\n-import javax.persistence.UniqueConstraint;\n+import javax.persistence.MappedSuperclass;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.core.misc.serialization.POJOHelper;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n-import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractEntity;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyType;\n import org.apache.syncope.core.persistence.jpa.entity.JPAAnyUtilsFactory;\n \n-@Entity\n-@Table(name = JPAAnyTemplate.TABLE, uniqueConstraints =\n-        @UniqueConstraint(columnNames = { \"syncTask_id\", \"anyType_name\" }))\n-public class JPAAnyTemplate extends AbstractEntity<Long> implements AnyTemplate {\n+@MappedSuperclass\n+public abstract class AbstractAnyTemplate extends AbstractEntity<Long> implements AnyTemplate {\n \n-    private static final long serialVersionUID = 3517381731849788407L;\n-\n-    public static final String TABLE = \"AnyTemplate\";\n-\n-    @Id\n-    private Long id;\n-\n-    @ManyToOne\n-    private JPASyncTask syncTask;\n+    private static final long serialVersionUID = -5280310945358790780L;\n \n     @ManyToOne\n     private JPAAnyType anyType;\n \n     @Lob\n     private String template;\n \n-    @Override\n-    public Long getKey() {\n-        return id;\n-    }\n-\n-    @Override\n-    public SyncTask getSyncTask() {\n-        return syncTask;\n-    }\n-\n-    @Override\n-    public void setSyncTask(final SyncTask syncTask) {\n-        checkType(syncTask, JPASyncTask.class);\n-        this.syncTask = (JPASyncTask) syncTask;\n-    }\n-\n     @Override\n     public AnyType getAnyType() {\n         return anyType;","previous_filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAAnyTemplate.java"},{"sha":"3b2334235054ff35d99e697ace175c421fb02496","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPAAnyTemplateSyncTask.java","status":"added","additions":61,"deletions":0,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplateSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplateSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPAAnyTemplateSyncTask.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,61 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.task;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n+import org.apache.syncope.core.persistence.jpa.entity.resource.AbstractAnyTemplate;\n+\n+@Entity\n+@Table(name = JPAAnyTemplateSyncTask.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"syncTask_id\", \"anyType_name\" }))\n+public class JPAAnyTemplateSyncTask extends AbstractAnyTemplate implements AnyTemplateSyncTask {\n+\n+    private static final long serialVersionUID = 3517381731849788407L;\n+\n+    public static final String TABLE = \"AnyTemplateSyncTask\";\n+\n+    @Id\n+    private Long id;\n+\n+    @ManyToOne\n+    private JPASyncTask syncTask;\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    public SyncTask getSyncTask() {\n+        return syncTask;\n+    }\n+\n+    @Override\n+    public void setSyncTask(final SyncTask syncTask) {\n+        checkType(syncTask, JPASyncTask.class);\n+        this.syncTask = (JPASyncTask) syncTask;\n+    }\n+\n+}"},{"sha":"8cc8b05ccfbb40532dcc4bbc8331f13c6113498d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/task/JPASyncTask.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Ftask%2FJPASyncTask.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -41,7 +41,8 @@\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n \n @Entity\n@@ -61,7 +62,7 @@ public class JPASyncTask extends AbstractProvisioningTask implements SyncTask {\n     private Set<String> actionsClassNames = new HashSet<>();\n \n     @OneToMany(cascade = CascadeType.ALL, orphanRemoval = true, fetch = FetchType.EAGER, mappedBy = \"syncTask\")\n-    private List<JPAAnyTemplate> templates = new ArrayList<>();\n+    private List<JPAAnyTemplateSyncTask> templates = new ArrayList<>();\n \n     @Basic\n     @Min(0)\n@@ -102,19 +103,19 @@ public void setFullReconciliation(final boolean fullReconciliation) {\n     }\n \n     @Override\n-    public boolean add(final AnyTemplate template) {\n-        checkType(template, JPAAnyTemplate.class);\n-        return this.templates.add((JPAAnyTemplate) template);\n+    public boolean add(final AnyTemplateSyncTask template) {\n+        checkType(template, JPAAnyTemplateSyncTask.class);\n+        return this.templates.add((JPAAnyTemplateSyncTask) template);\n     }\n \n     @Override\n-    public boolean remove(final AnyTemplate template) {\n-        checkType(template, JPAAnyTemplate.class);\n-        return this.templates.remove((JPAAnyTemplate) template);\n+    public boolean remove(final AnyTemplateSyncTask template) {\n+        checkType(template, JPAAnyTemplateSyncTask.class);\n+        return this.templates.remove((JPAAnyTemplateSyncTask) template);\n     }\n \n     @Override\n-    public AnyTemplate getTemplate(final AnyType anyType) {\n+    public AnyTemplateSyncTask getTemplate(final AnyType anyType) {\n         return CollectionUtils.find(templates, new Predicate<AnyTemplate>() {\n \n             @Override\n@@ -125,7 +126,7 @@ public boolean evaluate(final AnyTemplate template) {\n     }\n \n     @Override\n-    public List<? extends AnyTemplate> getTemplates() {\n+    public List<? extends AnyTemplateSyncTask> getTemplates() {\n         return templates;\n     }\n "},{"sha":"96575d10a75cb4c4c9bf84fa0a43f15caa6cc3e7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPADynRoleMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPADynRoleMembership.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -46,7 +46,7 @@ public class JPADynRoleMembership extends AbstractUDynMembership implements DynR\n     private JPARole role;\n \n     @ManyToMany\n-    @JoinTable(joinColumns =\n+    @JoinTable(name = TABLE + \"_User\", joinColumns =\n             @JoinColumn(name = \"dynRoleMembership_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"user_id\"))"},{"sha":"a40bf91905122e36881d396641623823ea0977ef","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUDynGroupMembership.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUDynGroupMembership.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -46,7 +46,7 @@ public class JPAUDynGroupMembership extends AbstractUDynMembership implements UD\n     private JPAGroup group;\n \n     @ManyToMany\n-    @JoinTable(joinColumns =\n+    @JoinTable(name = TABLE + \"_User\", joinColumns =\n             @JoinColumn(name = \"uDynGroupMembership_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"user_id\"))"},{"sha":"e7a688c3ed480db7629dc7a82f8bdb4de565ca32","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":20,"deletions":14,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -94,7 +94,7 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n             @JoinColumn(name = \"user_id\"),\n             inverseJoinColumns =\n             @JoinColumn(name = \"role_id\"))\n-    private List<JPARole> roles;\n+    private List<JPARole> roles = new ArrayList<>();\n \n     @OneToMany(cascade = CascadeType.ALL, mappedBy = \"owner\")\n     @Valid\n@@ -127,13 +127,13 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n     @Column(name = \"passwordHistoryValue\")\n     @CollectionTable(name = \"SyncopeUser_passwordHistory\", joinColumns =\n             @JoinColumn(name = \"user_id\", referencedColumnName = \"id\"))\n-    private List<String> passwordHistory;\n+    private List<String> passwordHistory = new ArrayList<>();\n \n     /**\n      * Subsequent failed logins.\n      */\n     @Column(nullable = true)\n-    private Integer failedLogins;\n+    private Integer failedLogins = 0;\n \n     /**\n      * Username/Login.\n@@ -159,7 +159,12 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n     @Basic\n     @Min(0)\n     @Max(1)\n-    private Integer suspended;\n+    private Integer suspended = getBooleanAsInteger(Boolean.FALSE);\n+\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer mustChangePassword = getBooleanAsInteger(Boolean.FALSE);\n \n     /**\n      * Provisioning external resources.\n@@ -193,16 +198,6 @@ public class JPAUser extends AbstractAny<UPlainAttr, UDerAttr, UVirAttr> impleme\n     @Column(nullable = true)\n     private String securityAnswer;\n \n-    public JPAUser() {\n-        super();\n-\n-        roles = new ArrayList<>();\n-        memberships = new ArrayList<>();\n-        passwordHistory = new ArrayList<>();\n-        failedLogins = 0;\n-        suspended = getBooleanAsInteger(Boolean.FALSE);\n-    }\n-\n     @Override\n     public Long getKey() {\n         return id;\n@@ -265,6 +260,7 @@ public void setEncodedPassword(final String password, final CipherAlgorithm ciph\n \n         this.password = password;\n         this.cipherAlgorithm = cipherAlgoritm;\n+        setMustChangePassword(false);\n     }\n \n     @Override\n@@ -470,6 +466,16 @@ public Boolean isSuspended() {\n         return suspended == null ? null : isBooleanAsInteger(suspended);\n     }\n \n+    @Override\n+    public void setMustChangePassword(final boolean mustChangePassword) {\n+        this.mustChangePassword = getBooleanAsInteger(mustChangePassword);\n+    }\n+\n+    @Override\n+    public boolean isMustChangePassword() {\n+        return isBooleanAsInteger(mustChangePassword);\n+    }\n+\n     @Override\n     public boolean verifyPasswordHistory(final String password, final int size) {\n         boolean res = false;"},{"sha":"e397bce4f775cac99cdee98fd694e433e974593d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/ProvisioningTaskValidator.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FProvisioningTaskValidator.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -47,7 +47,7 @@ public boolean isValid(final ProvisioningTask task, final ConstraintValidatorCon\n \n                 context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidSyncTask, \"Resource cannot be null\")).\n+                        getTemplate(EntityViolationType.InvalidProvisioningTask, \"Resource cannot be null\")).\n                         addPropertyNode(\"resource\").addConstraintViolation();\n             }\n \n@@ -63,7 +63,8 @@ public boolean isValid(final ProvisioningTask task, final ConstraintValidatorCon\n                                         ? PushActions.class.isAssignableFrom(actionsClass)\n                                         : false;\n                     } catch (Exception e) {\n-                        LOG.error(\"Invalid SyncActions specified\", e);\n+                        LOG.error(\"Invalid {} / {} specified\",\n+                                PushActions.class.getName(), SyncActions.class.getName(), e);\n                         isValid = false;\n                     }\n \n@@ -72,7 +73,7 @@ public boolean isValid(final ProvisioningTask task, final ConstraintValidatorCon\n \n                         context.disableDefaultConstraintViolation();\n                         context.buildConstraintViolationWithTemplate(\n-                                getTemplate(EntityViolationType.InvalidSyncTask, \"Invalid class name\")).\n+                                getTemplate(EntityViolationType.InvalidProvisioningTask, \"Invalid class name\")).\n                                 addPropertyNode(\"actionsClassName\").addConstraintViolation();\n                     }\n                 }"},{"sha":"1f27cd8aed5062fd97fc5ac859a5339522185cf3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RealmValidator.java","status":"modified","additions":30,"deletions":6,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRealmValidator.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -23,19 +23,20 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n \n public class RealmValidator extends AbstractValidator<RealmCheck, Realm> {\n \n-    private static final Pattern NAME_PATTERN = Pattern.compile(\"^[A-Za-z0-9]+\");\n+    private static final Pattern REALM_NAME_PATTERN = Pattern.compile(\"^[A-Za-z0-9]+\");\n \n     @Override\n-    public boolean isValid(final Realm object, final ConstraintValidatorContext context) {\n+    public boolean isValid(final Realm realm, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n         boolean isValid = true;\n \n-        if (SyncopeConstants.ROOT_REALM.equals(object.getName())) {\n-            if (object.getParent() != null) {\n+        if (SyncopeConstants.ROOT_REALM.equals(realm.getName())) {\n+            if (realm.getParent() != null) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n@@ -44,7 +45,7 @@ public boolean isValid(final Realm object, final ConstraintValidatorContext cont\n                         addPropertyNode(\"parent\").addConstraintViolation();\n             }\n         } else {\n-            if (object.getParent() == null) {\n+            if (realm.getParent() == null) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n@@ -53,7 +54,7 @@ public boolean isValid(final Realm object, final ConstraintValidatorContext cont\n                         addPropertyNode(\"parent\").addConstraintViolation();\n             }\n \n-            if (!NAME_PATTERN.matcher(object.getName()).matches()) {\n+            if (!REALM_NAME_PATTERN.matcher(realm.getName()).matches()) {\n                 isValid = false;\n \n                 context.buildConstraintViolationWithTemplate(\n@@ -63,6 +64,29 @@ public boolean isValid(final Realm object, final ConstraintValidatorContext cont\n             }\n         }\n \n+        if (!realm.getActionsClassNames().isEmpty()) {\n+            for (String className : realm.getActionsClassNames()) {\n+                Class<?> actionsClass = null;\n+                boolean isAssignable = false;\n+                try {\n+                    actionsClass = Class.forName(className);\n+                    isAssignable = LogicActions.class.isAssignableFrom(actionsClass);\n+                } catch (Exception e) {\n+                    LOG.error(\"Invalid {} specified\", LogicActions.class.getName(), e);\n+                    isValid = false;\n+                }\n+\n+                if (actionsClass == null || !isAssignable) {\n+                    isValid = false;\n+\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidRealm, \"Invalid class name\")).\n+                            addPropertyNode(\"actionsClassName\").addConstraintViolation();\n+                }\n+            }\n+        }\n+\n         return isValid;\n     }\n }"},{"sha":"02c8c8b86c8e0157b46c65a8f4e7f55cc5f75c51","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -362,11 +362,20 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_AnyTemplate\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AnyTemplate\" pk-column-value=\"SEQ_AnyTemplate\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_AnyTemplateRealm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateRealm\" pk-column-value=\"SEQ_AnyTemplateRealm\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplateSyncTask\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AnyTemplateSyncTask\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateSyncTask\" pk-column-value=\"SEQ_AnyTemplateSyncTask\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"02c8c8b86c8e0157b46c65a8f4e7f55cc5f75c51","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -362,11 +362,20 @@ under the License.\n     </attributes>\n   </entity>\n \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_AnyTemplate\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AnyTemplate\" pk-column-value=\"SEQ_AnyTemplate\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_AnyTemplateRealm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateRealm\" pk-column-value=\"SEQ_AnyTemplateRealm\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplateSyncTask\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AnyTemplateSyncTask\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateSyncTask\" pk-column-value=\"SEQ_AnyTemplateSyncTask\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"b5c54b64d7390bce9503135b5c376a1085601503","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":12,"deletions":3,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -410,11 +410,20 @@ under the License.\n     </attributes>\n   </entity>\n   \n-  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplate\">\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPAAnyTemplateRealm\">\n     <attributes>\n       <id name=\"id\">\n-        <generated-value generator=\"SEQ_AnyTemplate\" strategy=\"TABLE\"/>\n-        <table-generator name=\"SEQ_AnyTemplate\" pk-column-value=\"SEQ_AnyTemplate\" initial-value=\"1000\"/>\n+        <generated-value generator=\"SEQ_AnyTemplateRealm\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateRealm\" pk-column-value=\"SEQ_AnyTemplateRealm\" initial-value=\"1000\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.task.JPAAnyTemplateSyncTask\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_AnyTemplateSyncTask\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_AnyTemplateSyncTask\" pk-column-value=\"SEQ_AnyTemplateSyncTask\" initial-value=\"1000\"/>\n       </id>\n     </attributes>\n   </entity>"},{"sha":"5d6b5abacc3fe50f88d15ddfcbf2ecb50395262e","filename":"core/persistence-jpa/src/main/resources/domains.xml","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -23,7 +23,9 @@ under the License.\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\">\n   \n   <import resource=\"classpath*:domains/*Domain.xml\"/>\n-    \n+  \n+  <bean class=\"org.apache.syncope.core.misc.spring.DomainTransactionInterceptorInjector\"/>\n+  \n   <bean id=\"commonEMFConf\" class=\"org.apache.syncope.core.persistence.jpa.spring.CommonEntityManagerFactoryConf\">\n     <property name=\"packagesToScan\" value=\"org.apache.syncope.core.persistence.jpa.entity\"/>\n     <property name=\"validationMode\" value=\"NONE\"/>"},{"sha":"f5ae8f76604f6ca0bf98bd669b5d523a1f7f59ac","filename":"core/persistence-jpa/src/main/resources/indexes.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Findexes.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -55,10 +55,10 @@ under the License.\n   <entry key=\"ARelationship_RightIndex\">CREATE INDEX ARelationship_RightIndex ON ARelationship(right_anyObject_id)</entry>\n   <entry key=\"ARelationship_AnyObjectIndex\">CREATE INDEX ARelationship_AnyObjectIndex ON ARelationship(left_anyObject_id)</entry>\n \n-  <entry key=\"UPlainAttrValue_attributeIdIndex\">CREATE INDEX UPlainAttrValue_attributeIdIndex on UPlainAttrValue(attribute_id)</entry>\n-  <entry key=\"GPlainAttrValue_attributeIdIndex\">CREATE INDEX GPlainAttrValue_attributeIdIndex on GPlainAttrValue(attribute_id)</entry>\n-  <entry key=\"APlainAttrValue_attributeIdIndex\">CREATE INDEX APlainAttrValue_attributeIdIndex on APlainAttrValue(attribute_id)</entry>\n-  <entry key=\"CPlainAttrValue_attributeIdIndex\">CREATE INDEX CPlainAttrValue_attributeIdIndex on CPlainAttrValue(attribute_id)</entry>\n+  <entry key=\"UPlainAttrValue_attrIndex\">CREATE INDEX UPlainAttrValue_attrIndex on UPlainAttrValue(attribute_id)</entry>\n+  <entry key=\"GPlainAttrValue_attrIndex\">CREATE INDEX GPlainAttrValue_attrIndex on GPlainAttrValue(attribute_id)</entry>\n+  <entry key=\"APlainAttrValue_attrIndex\">CREATE INDEX APlainAttrValue_attrIndex on APlainAttrValue(attribute_id)</entry>\n+  <entry key=\"CPlainAttrValue_attrIndex\">CREATE INDEX CPlainAttrValue_attrIndex on CPlainAttrValue(attribute_id)</entry>\n \n   <entry key=\"UPlainAttr_owner_id_index\">CREATE INDEX UPlainAttr_owner_id_index on UPlainAttr(owner_id)</entry>\n   <entry key=\"GPlainAttr_owner_id_index\">CREATE INDEX GPlainAttr_owner_id_index on GPlainAttr(owner_id)</entry>"},{"sha":"2e148340d2a0c2d794cd847f5a512977c67b13db","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":12,"deletions":12,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -80,11 +80,11 @@ under the License.\n     FROM UMembership m, SyncopeGroup g\n     WHERE m.group_id = g.id\n   </entry>\n-  <entry key=\"user_search_udyngroupmembership\">\n-    CREATE VIEW user_search_udyngroupmembership AS\n+  <entry key=\"user_search_udyngmemb\">\n+    CREATE VIEW user_search_udyngmemb AS\n \n     SELECT ds.user_id AS any_id, d.group_id AS group_id\n-    FROM UDynGroupMembership d, UDynGroupMembership_SyncopeUser ds\n+    FROM UDynGroupMembership d, UDynGroupMembership_User ds\n     WHERE d.id = ds.uDynGroupMembership_id\n   </entry>\n   <entry key=\"user_search_role\">\n@@ -93,11 +93,11 @@ under the License.\n     SELECT ss.user_id AS any_id, ss.role_id AS role_id\n     FROM SyncopeUser_SyncopeRole ss\n   </entry>\n-  <entry key=\"user_search_dynrolemembership\">\n-    CREATE VIEW user_search_dynrolemembership AS\n+  <entry key=\"user_search_dynrmemb\">\n+    CREATE VIEW user_search_dynrmemb AS\n \n     SELECT ds.user_id AS any_id, d.role_id AS role_id\n-    FROM DynRoleMembership d, DynRoleMembership_SyncopeUser ds\n+    FROM DynRoleMembership d, DynRoleMembership_User ds\n     WHERE d.id = ds.dynRoleMembership_id\n   </entry>\n   <entry key=\"user_search_resource\">\n@@ -106,8 +106,8 @@ under the License.\n     SELECT st.user_id AS any_id, st.resource_name AS resource_name\n     FROM SyncopeUser_ExternalResource st\n   </entry>\n-  <entry key=\"user_search_group_resource\">\n-    CREATE VIEW user_search_group_resource AS\n+  <entry key=\"user_search_group_res\">\n+    CREATE VIEW user_search_group_res AS\n \n     SELECT m.user_id AS any_id, st.resource_name AS resource_name\n     FROM UMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st\n@@ -173,8 +173,8 @@ under the License.\n     FROM AMembership m, SyncopeGroup g\n     WHERE m.group_id = g.id\n   </entry>\n-  <entry key=\"anyObject_search_adyngroupmembership\">\n-    CREATE VIEW anyObject_search_adyngroupmembership AS\n+  <entry key=\"anyObject_search_adyngmemb\">\n+    CREATE VIEW anyObject_search_adyngmemb AS\n \n     SELECT ds.anyObject_id AS any_id, d.group_id AS group_id\n     FROM ADynGroupMembership d, ADynGroupMembership_AnyObject ds\n@@ -186,8 +186,8 @@ under the License.\n     SELECT st.anyObject_id AS any_id, st.resource_name AS resource_name\n     FROM AnyObject_ExternalResource st\n   </entry>\n-  <entry key=\"anyObject_search_group_resource\">\n-    CREATE VIEW anyObject_search_group_resource AS\n+  <entry key=\"anyObject_search_group_res\">\n+    CREATE VIEW anyObject_search_group_res AS\n \n     SELECT m.anyObject_id AS any_id, st.resource_name AS resource_name\n     FROM AMembership m, SyncopeGroup r, SyncopeGroup_ExternalResource st"},{"sha":"e2b1c9e7dae588884cf4a015bf546473ea7002b3","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/TaskTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FTaskTest.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -45,7 +45,8 @@\n import org.apache.syncope.core.persistence.api.entity.task.PushTask;\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n@@ -208,7 +209,7 @@ public void saveSyncTask() {\n         ExternalResource resource = resourceDAO.find(\"ws-target-resource-1\");\n         assertNotNull(resource);\n \n-        AnyTemplate template = entityFactory.newEntity(AnyTemplate.class);\n+        AnyTemplateSyncTask template = entityFactory.newEntity(AnyTemplateSyncTask.class);\n         template.set(new UserTO());\n \n         SyncTask task = entityFactory.newEntity(SyncTask.class);"},{"sha":"a17002bc7274252b98782b5d908ab1e76f56833b","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":16,"deletions":16,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -997,10 +997,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"4\" name=\"CSV (update matching; assign unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"ASSIGN\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"41\" syncTask_id=\"4\" anyType_name=\"USER\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":8,\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n-  <AnyTemplate id=\"42\" syncTask_id=\"4\" anyType_name=\"GROUP\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+  <AnyTemplateSyncTask id=\"41\" syncTask_id=\"4\" anyType_name=\"USER\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[\"csv\"],\"derAttrs\":[{\"schema\":\"cn\",\"readonly\":false,\"values\":[\"\"]}],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[{\"leftType\":null,\"leftKey\":0,\"rightType\":\"GROUP\",\"rightKey\":8,\"groupName\":null}],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"email == &apos;test8@syncope.apache.org&apos;? &apos;TYPE_8&apos;: &apos;TYPE_OTHER&apos;\"]}]}'/>\n+  <AnyTemplateSyncTask id=\"42\" syncTask_id=\"4\" anyType_name=\"GROUP\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SchedTask\" type=\"SCHEDULED\" id=\"5\" name=\"SampleJob Task\" \n         jobDelegateClassName=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"PropagationTask\" type=\"PROPAGATION\" id=\"6\" propagationMode=\"TWO_PHASES\" propagationOperation=\"UPDATE\"\n@@ -1010,10 +1010,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"7\" name=\"TestDB Task\" resource_name=\"resource-testdb\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"1\" fullReconciliation=\"1\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"71\" syncTask_id=\"7\" anyType_name=\"USER\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n-  <AnyTemplate id=\"72\" syncTask_id=\"7\" anyType_name=\"GROUP\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+  <AnyTemplateSyncTask id=\"71\" syncTask_id=\"7\" anyType_name=\"USER\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"roles\":[],\"dynRoles\":[],\"plainAttrs\":[{\"schema\":\"type\",\"readonly\":false,\"values\":[\"&apos;type a&apos;\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;reconciled@syncope.apache.org&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;reconciled fullname&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;surname&apos;\"]}]}'/>\n+  <AnyTemplateSyncTask id=\"72\" syncTask_id=\"7\" anyType_name=\"GROUP\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"NotificationTask\" type=\"NOTIFICATION\" id=\"8\" sender=\"admin@prova.org\" subject=\"Notification for SYNCOPE-81\" \n         textBody=\"NOTIFICATION-81\" htmlBody=\"NOTIFICATION-81\" traceLevel=\"ALL\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"9\" name=\"TestDB2 Task\" resource_name=\"resource-testdb2\"\n@@ -1025,10 +1025,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"11\" name=\"LDAP Sync Task\" resource_name=\"resource-ldap\"\n         destinationRealm_id=\"1\" fullReconciliation=\"1\" performCreate=\"1\" performDelete=\"1\" performUpdate=\"1\" syncStatus=\"0\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"1\" syncTask_id=\"11\" anyType_name=\"USER\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":true,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[]}'/>\n-  <AnyTemplate id=\"2\" syncTask_id=\"11\" anyType_name=\"GROUP\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n+  <AnyTemplateSyncTask id=\"1\" syncTask_id=\"11\" anyType_name=\"USER\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[{\"schema\":\"virtualReadOnly\",\"readonly\":true,\"values\":[\"\"]}],\"resources\":[\"resource-ldap\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[]}'/>\n+  <AnyTemplateSyncTask id=\"2\" syncTask_id=\"11\" anyType_name=\"GROUP\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[{\"schema\":\"show\",\"readonly\":false,\"values\":[\"true\"]}]}'/>\n   <SyncTask_actionsClassNames SyncTask_id=\"11\" actionClassName=\"org.apache.syncope.core.provisioning.java.sync.LDAPMembershipSyncActions\"/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"12\" name=\"VirAttrCache test\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"0\" performUpdate=\"1\" performDelete=\"0\" syncStatus=\"0\" fullReconciliation=\"1\"\n@@ -1092,10 +1092,10 @@ under the License.\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"24\" name=\"CSV Task (update matching; provision unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"PROVISION\" matchingRule=\"UPDATE\"/>\n-  <AnyTemplate id=\"3\" syncTask_id=\"24\" anyType_name=\"USER\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}]}'/>\n-  <AnyTemplate id=\"4\" syncTask_id=\"24\" anyType_name=\"GROUP\"\n-               template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n+  <AnyTemplateSyncTask id=\"3\" syncTask_id=\"24\" anyType_name=\"USER\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.UserTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"USER\",\"realm\":null,\"status\":null,\"password\":null,\"token\":null,\"tokenExpireTime\":null,\"username\":null,\"lastLoginDate\":null,\"changePwdDate\":null,\"failedLogins\":null,\"securityQuestion\":null,\"securityAnswer\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[\"resource-testdb\"],\"propagationStatuses\":[],\"roles\":[],\"dynRoles\":[],\"relationships\":[],\"memberships\":[],\"dynGroups\":[],\"plainAttrs\":[{\"schema\":\"firstname\",\"readonly\":false,\"values\":[\"\"]},{\"schema\":\"userId\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"fullname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]},{\"schema\":\"surname\",\"readonly\":false,\"values\":[\"&apos;test&apos;\"]}]}'/>\n+  <AnyTemplateSyncTask id=\"4\" syncTask_id=\"24\" anyType_name=\"GROUP\"\n+                       template='{\"@class\":\"org.apache.syncope.common.lib.to.GroupTO\",\"creator\":null,\"creationDate\":null,\"lastModifier\":null,\"lastChangeDate\":null,\"key\":0,\"type\":\"GROUP\",\"realm\":null,\"status\":null,\"name\":null,\"userOwner\":null,\"groupOwner\":null,\"adynMembershipCond\":null,\"udynMembershipCond\":null,\"auxClasses\":[],\"derAttrs\":[],\"virAttrs\":[],\"resources\":[],\"propagationStatuses\":[],\"plainAttrs\":[]}'/>\n   <Task DTYPE=\"SyncTask\" type=\"SYNCHRONIZATION\" id=\"25\" name=\"CSV (unlink matching; ignore unmatching)\" resource_name=\"resource-csv\"\n         destinationRealm_id=\"1\" performCreate=\"1\" performUpdate=\"1\" performDelete=\"1\" syncStatus=\"1\" fullReconciliation=\"0\"\n         unmatchingRule=\"IGNORE\" matchingRule=\"UNLINK\"/>"},{"sha":"01464a74e71ea0b489b59777396a6a53f0532516","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/LogicActions.java","status":"renamed","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2FLogicActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -22,12 +22,19 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n \n /**\n- * Provides logic for transforming any object, received as input by RESTful methods, before any internal\n- * processing logic takes place.\n+ * Interface for actions to be performed during business logic execution.\n  */\n-public interface AnyTransformer {\n+public interface LogicActions {\n \n-    <T extends AnyTO> T transform(T input);\n+    <A extends AnyTO> A beforeCreate(A input);\n \n-    <T extends AnyMod> T transform(T input);\n+    <A extends AnyTO> A afterCreate(A input);\n+\n+    <M extends AnyMod> M beforeUpdate(M input);\n+\n+    <A extends AnyTO> A afterUpdate(A input);\n+\n+    <A extends AnyTO> A beforeDelete(A input);\n+\n+    <A extends AnyTO> A afterDelete(A input);\n }","previous_filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/AnyTransformer.java"},{"sha":"8f34331a1d97a1db80086378bd073407b1e7d970","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/PushActions.java","status":"modified","additions":31,"deletions":21,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FPushActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -22,7 +22,7 @@\n import org.quartz.JobExecutionException;\n \n /**\n- * Interface for actions to be performed during PushJob execution.\n+ * Interface for actions to be performed during push.\n  * <br/>\n  * All methods can throw {@link IgnoreProvisionException} to make the current any ignored by the push process.\n  */\n@@ -31,124 +31,134 @@ public interface PushActions extends ProvisioningActions {\n     /**\n      * Action to be executed before to assign (link & provision) a synchronized any object to the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeAssign(\n+    <A extends Any<?, ?, ?>> A beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to provision a synchronized any object to the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeProvision(\n+    <A extends Any<?, ?, ?>> A beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to update a synchronized any object on the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be updated.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeUpdate(\n+    <A extends Any<?, ?, ?>> A beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to link a synchronized any object to the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeLink(\n+    <A extends Any<?, ?, ?>> A beforeLink(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to unlink a synchronized any object from the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeUnlink(\n+    <A extends Any<?, ?, ?>> A beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to unassign a synchronized any object from the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeUnassign(\n+    <A extends Any<?, ?, ?>> A beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to unassign a synchronized any object from the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeDeprovision(\n+    <A extends Any<?, ?, ?>> A beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before delete a synchronized any object locally and from the resource.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any any object to be created.\n      * @return any.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> T beforeDelete(\n+    <A extends Any<?, ?, ?>> A beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed after any object push goes on error.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any synchronized any object.\n      * @param result operation result.\n      * @param error error being reported\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> void onError(\n+    <A extends Any<?, ?, ?>> void onError(\n             ProvisioningProfile<?, ?> profile,\n-            T any,\n+            A any,\n             ProvisioningResult result,\n             Exception error) throws JobExecutionException;\n \n     /**\n      * Action to be executed after each local any object push.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the push being executed.\n      * @param any synchronized any object.\n      * @param result operation result.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends Any<?, ?, ?>> void after(\n+    <A extends Any<?, ?, ?>> void after(\n             ProvisioningProfile<?, ?> profile,\n-            T any,\n+            A any,\n             ProvisioningResult result) throws JobExecutionException;\n }"},{"sha":"6638c427e0a1877b0a43ca2bb7751ce75f8c665b","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/sync/SyncActions.java","status":"modified","additions":32,"deletions":22,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fsync%2FSyncActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -24,7 +24,7 @@\n import org.quartz.JobExecutionException;\n \n /**\n- * Interface for actions to be performed during SyncJob execution.\n+ * Interface for actions to be performed during synchronization.\n  * <br/>\n  * All methods can throw {@link IgnoreProvisionException} to make the current any object ignored by the synchronization\n  * process.\n@@ -36,129 +36,138 @@ public interface SyncActions extends ProvisioningActions {\n      * User/group is created locally upon synchronization in case of the un-matching rule\n      * {@link org.apache.syncope.common.types.UnmatchingRule#PROVISION} (default un-matching rule) is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeProvision(\n+    <A extends AnyTO> SyncDelta beforeProvision(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before creating (and linking to the resource) a synchronized user / group locally.\n      * User/group is created locally and linked to the synchronized resource upon synchronization in case of the\n      * un-matching rule {@link org.apache.syncope.common.types.UnmatchingRule#ASSIGN} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeAssign(\n+    <A extends AnyTO> SyncDelta beforeAssign(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before unlinking resource from the synchronized user / group and de-provisioning.\n      * User/group is unlinked and de-provisioned from the synchronized resource upon synchronization in case of the\n      * matching rule {@link org.apache.syncope.common.types.MatchingRule#UNASSIGN} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeUnassign(\n+    <A extends AnyTO> SyncDelta beforeUnassign(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before de-provisioning action only.\n      * User/group is de-provisioned (without unlinking) from the synchronized resource upon synchronization in case of\n      * the matching rule {@link org.apache.syncope.common.types.MatchingRule#DEPROVISION} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeDeprovision(\n+    <A extends AnyTO> SyncDelta beforeDeprovision(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before unlinking resource from the synchronized user / group.\n      * User/group is unlinked (without de-provisioning) from the synchronized resource upon synchronization in case of\n      * the matching rule {@link org.apache.syncope.common.types.MatchingRule#UNLINK} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeUnlink(\n+    <A extends AnyTO> SyncDelta beforeUnlink(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before linking resource to the synchronized user / group.\n      * User/group is linked (without updating) to the synchronized resource upon synchronization in case of\n      * the matching rule {@link org.apache.syncope.common.types.MatchingRule#LINK} is applied.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeLink(\n+    <A extends AnyTO> SyncDelta beforeLink(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed before to update a synchronized user / group locally.\n      * User/group is updated upon synchronization in case of the matching rule\n      * {@link org.apache.syncope.common.types.MatchingRule#UPDATE} (default matching rule) is applied.\n      *\n+     * @param <M> concrete any object\n+     * @param <A> any object modifications\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object\n      * @param anyMod modification\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure.\n      */\n-    <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    <M extends AnyTO, A extends AnyMod> SyncDelta beforeUpdate(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any,\n-            K anyMod)\n+            M any,\n+            A anyMod)\n             throws JobExecutionException;\n \n     /**\n      * Action to be executed before to delete a synchronized user / group locally.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n      * @param delta retrieved synchronization information\n      * @param any any object to be deleted\n      * @return synchronization information used for logging and to be passed to the 'after' method.\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> SyncDelta beforeDelete(\n+    <A extends AnyTO> SyncDelta beforeDelete(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any) throws JobExecutionException;\n+            A any) throws JobExecutionException;\n \n     /**\n      * Action to be executed when user / group synchronization goes on error.\n@@ -179,16 +188,17 @@ void onError(\n     /**\n      * Action to be executed after each local user / group synchronization.\n      *\n+     * @param <A> concrete any object\n      * @param profile profile of the synchronization being executed.\n-     * @param delta retrieved synchronization information (may be modified by\n-     * 'beforeProvision/beforeUpdate/beforeDelete')\n+     * @param delta retrieved synchronization information (may be modified by beforeProvision / beforeUpdate /\n+     * beforeDelete)\n      * @param any any object\n      * @param result global synchronization results at the current synchronization step\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AnyTO> void after(\n+    <A extends AnyTO> void after(\n             ProvisioningProfile<?, ?> profile,\n             SyncDelta delta,\n-            T any,\n+            A any,\n             ProvisioningResult result) throws JobExecutionException;\n }"},{"sha":"a7ddf71fbcf9834e9c00e48d2180f7bf7fb47fc2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultLogicActions.java","status":"renamed","additions":24,"deletions":7,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultLogicActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -20,20 +20,37 @@\n \n import org.apache.syncope.common.lib.mod.AnyMod;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.api.LogicActions;\n \n-/**\n- * Default empty implementation returning received input as result.\n- */\n-public class DefaultAnyTransformer implements AnyTransformer {\n+public class DefaultLogicActions implements LogicActions {\n+\n+    @Override\n+    public <A extends AnyTO> A beforeCreate(final A input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public <A extends AnyTO> A afterCreate(final A input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public <M extends AnyMod> M beforeUpdate(final M input) {\n+        return input;\n+    }\n+\n+    @Override\n+    public <A extends AnyTO> A afterUpdate(final A input) {\n+        return input;\n+    }\n \n     @Override\n-    public <T extends AnyTO> T transform(final T input) {\n+    public <A extends AnyTO> A beforeDelete(final A input) {\n         return input;\n     }\n \n     @Override\n-    public <T extends AnyMod> T transform(final T input) {\n+    public <A extends AnyTO> A afterDelete(final A input) {\n         return input;\n     }\n ","previous_filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultAnyTransformer.java"},{"sha":"433b909fc14a52dd94e46837dfa906e6f12c949a","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -129,9 +129,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             AnyObject otherEnd = anyObjectDAO.find(relationshipTO.getRightKey());\n \n             if (otherEnd == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                }\n+                LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n             } else {\n                 ARelationship relationship = null;\n                 if (anyObject.getKey() != null) {\n@@ -152,9 +150,7 @@ public void create(final AnyObject anyObject, final AnyObjectTO anyObjectTO) {\n             Group group = groupDAO.find(membershipTO.getRightKey());\n \n             if (group == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n-                }\n+                LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n             } else {\n                 AMembership membership = null;\n                 if (anyObject.getKey() != null) {"},{"sha":"909b05d67282362f291e26161261ac58c579b4ab","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -81,7 +81,7 @@ public Group create(final Group group, final GroupTO groupTO) {\n             group.setName(groupTO.getName());\n         }\n \n-        // attributes, derived attributes, virtual attributes and resources\n+        // realm, attributes, derived attributes, virtual attributes and resources\n         fill(group, groupTO, anyUtilsFactory.getInstance(AnyTypeKind.GROUP), scce);\n \n         // owner"},{"sha":"af7f0a023937ac48623f7073d6cef77247a6a180","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RealmDataBinderImpl.java","status":"modified","additions":63,"deletions":0,"changes":63,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRealmDataBinderImpl.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,20 +18,37 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n+import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.RealmTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.misc.TemplateUtils;\n+import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplateRealm;\n+import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.policy.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.data.RealmDataBinder;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n \n @Component\n public class RealmDataBinderImpl implements RealmDataBinder {\n \n+    private static final Logger LOG = LoggerFactory.getLogger(RealmDataBinder.class);\n+\n+    @Autowired\n+    private AnyTypeDAO anyTypeDAO;\n+\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -41,6 +58,38 @@ public class RealmDataBinderImpl implements RealmDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    @Autowired\n+    private TemplateUtils templateUtils;\n+\n+    private void setTemplates(final RealmTO realmTO, final Realm realm) {\n+        // validate JEXL expressions from templates and proceed if fine\n+        templateUtils.check(realmTO.getTemplates(), ClientExceptionType.InvalidSyncTask);\n+        for (Map.Entry<String, AnyTO> entry : realmTO.getTemplates().entrySet()) {\n+            AnyType type = anyTypeDAO.find(entry.getKey());\n+            if (type == null) {\n+                LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n+            } else {\n+                AnyTemplateRealm anyTemplate = realm.getTemplate(type);\n+                if (anyTemplate == null) {\n+                    anyTemplate = entityFactory.newEntity(AnyTemplateRealm.class);\n+                    anyTemplate.setAnyType(type);\n+                    anyTemplate.setRealm(realm);\n+\n+                    realm.add(anyTemplate);\n+                }\n+                anyTemplate.set(entry.getValue());\n+            }\n+        }\n+        // remove all templates not contained in the TO\n+        CollectionUtils.filter(realm.getTemplates(), new Predicate<AnyTemplate>() {\n+\n+            @Override\n+            public boolean evaluate(final AnyTemplate anyTemplate) {\n+                return realmTO.getTemplates().containsKey(anyTemplate.getAnyType().getKey());\n+            }\n+        });\n+    }\n+\n     @Override\n     public Realm create(final String parentPath, final RealmTO realmTO) {\n         Realm realm = entityFactory.newEntity(Realm.class);\n@@ -55,6 +104,10 @@ public Realm create(final String parentPath, final RealmTO realmTO) {\n             realm.setAccountPolicy((AccountPolicy) policyDAO.find(realmTO.getAccountPolicy()));\n         }\n \n+        realm.getActionsClassNames().addAll(realmTO.getActionsClassNames());\n+\n+        setTemplates(realmTO, realm);\n+\n         return realm;\n     }\n \n@@ -69,6 +122,11 @@ public void update(final Realm realm, final RealmTO realmTO) {\n         if (realmTO.getAccountPolicy() != null) {\n             realm.setAccountPolicy((AccountPolicy) policyDAO.find(realmTO.getAccountPolicy()));\n         }\n+\n+        realm.getActionsClassNames().clear();\n+        realm.getActionsClassNames().addAll(realmTO.getActionsClassNames());\n+\n+        setTemplates(realmTO, realm);\n     }\n \n     @Override\n@@ -81,6 +139,11 @@ public RealmTO getRealmTO(final Realm realm) {\n         realmTO.setFullPath(realm.getFullPath());\n         realmTO.setAccountPolicy(realm.getAccountPolicy() == null ? null : realm.getAccountPolicy().getKey());\n         realmTO.setPasswordPolicy(realm.getPasswordPolicy() == null ? null : realm.getPasswordPolicy().getKey());\n+        realmTO.getActionsClassNames().addAll(realm.getActionsClassNames());\n+\n+        for (AnyTemplate template : realm.getTemplates()) {\n+            realmTO.getTemplates().put(template.getAnyType().getKey(), template.get());\n+        }\n \n         return realmTO;\n     }"},{"sha":"32a095b353110cb601eb6b08d6c37fc10ee3e614","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/TaskDataBinderImpl.java","status":"modified","additions":9,"deletions":52,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FTaskDataBinderImpl.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -23,22 +23,19 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.core.provisioning.api.data.TaskDataBinder;\n import org.apache.commons.lang3.StringUtils;\n-import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AbstractProvisioningTaskTO;\n import org.apache.syncope.common.lib.to.AbstractTaskTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.PushTaskTO;\n-import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.SchedTaskTO;\n import org.apache.syncope.common.lib.to.SyncTaskTO;\n import org.apache.syncope.common.lib.to.TaskExecTO;\n-import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.MatchingRule;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.UnmatchingRule;\n+import org.apache.syncope.core.misc.TemplateUtils;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskExecDAO;\n@@ -53,14 +50,14 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskUtils;\n import org.apache.syncope.core.provisioning.api.job.JobNamer;\n import org.apache.syncope.core.misc.spring.BeanUtils;\n-import org.apache.syncope.core.misc.jexl.JexlUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.task.AnyFilter;\n-import org.apache.syncope.core.persistence.api.entity.task.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.AnyTemplate;\n+import org.apache.syncope.core.persistence.api.entity.task.AnyTemplateSyncTask;\n import org.apache.syncope.core.provisioning.java.sync.PushJobDelegate;\n import org.apache.syncope.core.provisioning.java.sync.SyncJobDelegate;\n import org.quartz.Scheduler;\n@@ -99,50 +96,10 @@ public class TaskDataBinderImpl implements TaskDataBinder {\n     private EntityFactory entityFactory;\n \n     @Autowired\n-    private SchedulerFactoryBean scheduler;\n-\n-    private void checkTemplateJEXL(final SyncTaskTO syncTaskTO) {\n-        SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSyncTask);\n-\n-        for (Map.Entry<String, AnyTO> entry : syncTaskTO.getTemplates().entrySet()) {\n-            for (AttrTO attrTO : entry.getValue().getPlainAttrs()) {\n-                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n-                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n-                }\n-            }\n-\n-            for (AttrTO attrTO : entry.getValue().getVirAttrs()) {\n-                if (!attrTO.getValues().isEmpty() && !JexlUtils.isExpressionValid(attrTO.getValues().get(0))) {\n-                    sce.getElements().add(\"Invalid JEXL: \" + attrTO.getValues().get(0));\n-                }\n-            }\n-\n-            if (entry.getValue() instanceof UserTO) {\n-                UserTO template = (UserTO) entry.getValue();\n-                if (StringUtils.isNotBlank(template.getUsername())\n-                        && !JexlUtils.isExpressionValid(template.getUsername())) {\n-\n-                    sce.getElements().add(\"Invalid JEXL: \" + template.getUsername());\n-                }\n-                if (StringUtils.isNotBlank(template.getPassword())\n-                        && !JexlUtils.isExpressionValid(template.getPassword())) {\n+    private TemplateUtils templateUtils;\n \n-                    sce.getElements().add(\"Invalid JEXL: \" + template.getPassword());\n-                }\n-            } else if (entry.getValue() instanceof GroupTO) {\n-                GroupTO template = (GroupTO) entry.getValue();\n-                if (StringUtils.isNotBlank(template.getName())\n-                        && !JexlUtils.isExpressionValid(template.getName())) {\n-\n-                    sce.getElements().add(\"Invalid JEXL: \" + template.getName());\n-                }\n-            }\n-        }\n-\n-        if (!sce.isEmpty()) {\n-            throw sce;\n-        }\n-    }\n+    @Autowired\n+    private SchedulerFactoryBean scheduler;\n \n     private void fill(final ProvisioningTask task, final AbstractProvisioningTaskTO taskTO) {\n         if (task instanceof PushTask && taskTO instanceof PushTaskTO) {\n@@ -193,15 +150,15 @@ public boolean evaluate(final AnyFilter anyFilter) {\n                     ? UnmatchingRule.PROVISION : syncTaskTO.getUnmatchingRule());\n \n             // validate JEXL expressions from templates and proceed if fine\n-            checkTemplateJEXL(syncTaskTO);\n+            templateUtils.check(syncTaskTO.getTemplates(), ClientExceptionType.InvalidSyncTask);\n             for (Map.Entry<String, AnyTO> entry : syncTaskTO.getTemplates().entrySet()) {\n                 AnyType type = anyTypeDAO.find(entry.getKey());\n                 if (type == null) {\n                     LOG.debug(\"Invalid AnyType {} specified, ignoring...\", entry.getKey());\n                 } else {\n-                    AnyTemplate anyTemplate = syncTask.getTemplate(type);\n+                    AnyTemplateSyncTask anyTemplate = syncTask.getTemplate(type);\n                     if (anyTemplate == null) {\n-                        anyTemplate = entityFactory.newEntity(AnyTemplate.class);\n+                        anyTemplate = entityFactory.newEntity(AnyTemplateSyncTask.class);\n                         anyTemplate.setAnyType(type);\n                         anyTemplate.setSyncTask(syncTask);\n "},{"sha":"ca801f0727972271ec45622154036f982d9e66a2","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -128,7 +128,7 @@ public boolean verifyPassword(final User user, final String password) {\n \n     private void setPassword(final User user, final String password, final SyncopeClientCompositeException scce) {\n         try {\n-            final String algorithm = confDAO.find(\n+            String algorithm = confDAO.find(\n                     \"password.cipher.algorithm\", CipherAlgorithm.AES.name()).getValues().get(0).getStringValue();\n             CipherAlgorithm predefined = CipherAlgorithm.valueOf(algorithm);\n             user.setPassword(password, predefined);\n@@ -161,9 +161,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             AnyObject anyObject = anyObjectDAO.find(relationshipTO.getRightKey());\n \n             if (anyObject == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n-                }\n+                LOG.debug(\"Ignoring invalid anyObject \" + relationshipTO.getRightKey());\n             } else {\n                 URelationship relationship = null;\n                 if (user.getKey() != null) {\n@@ -184,9 +182,7 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             Group group = groupDAO.find(membershipTO.getRightKey());\n \n             if (group == null) {\n-                if (LOG.isDebugEnabled()) {\n-                    LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n-                }\n+                LOG.debug(\"Ignoring invalid group \" + membershipTO.getGroupName());\n             } else {\n                 UMembership membership = null;\n                 if (user.getKey() != null) {\n@@ -223,6 +219,8 @@ public void create(final User user, final UserTO userTO, final boolean storePass\n             }\n         }\n         user.setSecurityAnswer(userTO.getSecurityAnswer());\n+\n+        user.setMustChangePassword(userTO.isMustChangePassword());\n     }\n \n     private boolean isPasswordMapped(final ExternalResource resource) {\n@@ -293,6 +291,8 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n             }\n         }\n \n+        user.setMustChangePassword(userMod.isMustChangePassword());\n+\n         // roles\n         CollectionUtils.forAllDo(userMod.getRolesToRemove(), new Closure<Long>() {\n "},{"sha":"a97a3ca669251c326986a2613bc7e56be8208499","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractSyncResultHandler.java","status":"modified","additions":8,"deletions":26,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractSyncResultHandler.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -33,10 +33,9 @@\n import org.apache.syncope.core.persistence.api.entity.task.SyncTask;\n import org.apache.syncope.core.provisioning.api.propagation.PropagationException;\n import org.apache.syncope.core.provisioning.api.sync.SyncActions;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.SyncopeSyncResultHandler;\n@@ -53,9 +52,6 @@ public abstract class AbstractSyncResultHandler extends AbstractSyncopeResultHan\n     @Autowired\n     protected SyncUtils syncUtilities;\n \n-    @Autowired\n-    protected AnyTransformer anyTransformer;\n-\n     protected abstract String getName(AnyTO anyTO);\n \n     protected abstract AnyTO doCreate(AnyTO anyTO, SyncDelta delta, ProvisioningResult result);\n@@ -115,22 +111,17 @@ protected List<ProvisioningResult> assign(\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n-\n-        // Any transformation (if configured)\n-        AnyTO transformed = anyTransformer.transform(anyTO);\n-        LOG.debug(\"Transformed: {}\", transformed);\n-\n-        result.setName(getName(transformed));\n+        result.setName(getName(anyTO));\n \n         if (profile.isDryRun()) {\n             result.setKey(0L);\n         } else {\n             SyncDelta actionedDelta = delta;\n             for (SyncActions action : profile.getActions()) {\n-                actionedDelta = action.beforeAssign(this.getProfile(), actionedDelta, transformed);\n+                actionedDelta = action.beforeAssign(this.getProfile(), actionedDelta, anyTO);\n             }\n \n-            create(transformed, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n+            create(anyTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.ASSIGN), result);\n         }\n \n         return Collections.singletonList(result);\n@@ -147,26 +138,21 @@ protected List<ProvisioningResult> provision(\n \n         AnyTO anyTO = connObjectUtils.getAnyTO(delta.getObject(), profile.getTask(), provision, anyUtils);\n \n-        // Any transformation (if configured)\n-        AnyTO transformed = anyTransformer.transform(anyTO);\n-        LOG.debug(\"Transformed: {}\", transformed);\n-\n         ProvisioningResult result = new ProvisioningResult();\n         result.setOperation(ResourceOperation.CREATE);\n         result.setAnyType(provision.getAnyType().getKey());\n         result.setStatus(ProvisioningResult.Status.SUCCESS);\n-\n-        result.setName(getName(transformed));\n+        result.setName(getName(anyTO));\n \n         if (profile.isDryRun()) {\n             result.setKey(0L);\n         } else {\n             SyncDelta actionedDelta = delta;\n             for (SyncActions action : profile.getActions()) {\n-                actionedDelta = action.beforeProvision(this.getProfile(), actionedDelta, transformed);\n+                actionedDelta = action.beforeProvision(this.getProfile(), actionedDelta, anyTO);\n             }\n \n-            create(transformed, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n+            create(anyTO, actionedDelta, UnmatchingRule.toEventName(UnmatchingRule.PROVISION), result);\n         }\n \n         return Collections.<ProvisioningResult>singletonList(result);\n@@ -264,10 +250,6 @@ protected List<ProvisioningResult> update(final SyncDelta delta, final List<Long\n                                 provision,\n                                 getAnyUtils());\n \n-                        // Attribute value transformation (if configured)\n-                        AnyMod actual = anyTransformer.transform(anyMod);\n-                        LOG.debug(\"Transformed: {}\", actual);\n-\n                         for (SyncActions action : profile.getActions()) {\n                             workingDelta = action.beforeUpdate(this.getProfile(), workingDelta, before, anyMod);\n                         }\n@@ -572,7 +554,7 @@ protected List<ProvisioningResult> delete(\n                 delResults.add(result);\n             } catch (NotFoundException e) {\n                 LOG.error(\"Could not find {} {}\", provision.getAnyType().getKey(), id, e);\n-            } catch (UnauthorizedException e) {\n+            } catch (DelegatedAdministrationException e) {\n                 LOG.error(\"Not allowed to read {} {}\", provision.getAnyType().getKey(), id, e);\n             } catch (Exception e) {\n                 LOG.error(\"Could not delete {} {}\", provision.getAnyType().getKey(), id, e);"},{"sha":"ad08a92e1364808e9af0f7426917c7f62c21b078","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DBPasswordSyncActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDBPasswordSyncActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -59,10 +59,10 @@ public class DBPasswordSyncActions extends DefaultSyncActions {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO> SyncDelta beforeProvision(\n+    public <A extends AnyTO> SyncDelta beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any) throws JobExecutionException {\n+            final A any) throws JobExecutionException {\n \n         if (any instanceof UserTO) {\n             String password = ((UserTO) any).getPassword();\n@@ -74,11 +74,11 @@ public <T extends AnyTO> SyncDelta beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n-            final K anyMod) throws JobExecutionException {\n+            final A any,\n+            final M anyMod) throws JobExecutionException {\n \n         if (anyMod instanceof UserMod) {\n             String modPassword = ((UserMod) anyMod).getPassword();\n@@ -123,10 +123,10 @@ public boolean evaluate(final ConnConfProperty property) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO> void after(\n+    public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n+            final A any,\n             final ProvisioningResult result) throws JobExecutionException {\n \n         if (any instanceof UserTO && encodedPassword != null && cipher != null) {"},{"sha":"a99b3e5417fa9c9791df732d0a4a963c1aaa4956","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultPushActions.java","status":"modified","additions":10,"deletions":10,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultPushActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -34,58 +34,58 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeAssign(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeAssign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeProvision(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeProvision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeLink(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeLink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeUnassign(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeUnassign(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeDeprovision(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeDeprovision(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> T beforeUnlink(final ProvisioningProfile<?, ?> profile, final T any)\n+    public <A extends Any<?, ?, ?>> A beforeUnlink(final ProvisioningProfile<?, ?> profile, final A any)\n             throws JobExecutionException {\n \n         return any;\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> void onError(\n-            final ProvisioningProfile<?, ?> profile, final T any, final ProvisioningResult result,\n+    public <A extends Any<?, ?, ?>> void onError(\n+            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result,\n             final Exception error) throws JobExecutionException {\n \n         // do nothing\n     }\n \n     @Override\n-    public <T extends Any<?, ?, ?>> void after(\n-            final ProvisioningProfile<?, ?> profile, final T any, final ProvisioningResult result)\n+    public <A extends Any<?, ?, ?>> void after(\n+            final ProvisioningProfile<?, ?> profile, final A any, final ProvisioningResult result)\n             throws JobExecutionException {\n \n         // do nothing"},{"sha":"668584b43793c998afdc376b88ab6d05b547dc29","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/DefaultSyncActions.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FDefaultSyncActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -36,66 +36,66 @@ public void beforeAll(final ProvisioningProfile<?, ?> profile) throws JobExecuti\n     }\n \n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n-            final K anyMod) throws JobExecutionException {\n+            final A any,\n+            final M anyMod) throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeDelete(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeDelete(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeAssign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeAssign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeProvision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeProvision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeLink(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeLink(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeUnassign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeUnassign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeDeprovision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeDeprovision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeUnlink(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeUnlink(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         return delta;\n@@ -108,8 +108,8 @@ public void onError(\n     }\n \n     @Override\n-    public <T extends AnyTO> void after(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any,\n+    public <A extends AnyTO> void after(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any,\n             final ProvisioningResult result)\n             throws JobExecutionException {\n     }"},{"sha":"cf4fb172b4e8a0c8d4b50a2e24501d3aec172f63","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPMembershipSyncActions.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPMembershipSyncActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -129,9 +129,9 @@ public boolean evaluate(final ConnConfProperty property) {\n      * {@inheritDoc}\n      */\n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n-            final SyncDelta delta, final T any, final K anyMod) throws JobExecutionException {\n+            final SyncDelta delta, final A any, final M anyMod) throws JobExecutionException {\n \n         if (any instanceof GroupTO) {\n             // search for all users assigned to given group\n@@ -293,10 +293,10 @@ protected void synchronizeMemberships(\n      * {@inheritDoc}\n      */\n     @Override\n-    public <T extends AnyTO> void after(\n+    public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n+            final A any,\n             final ProvisioningResult result) throws JobExecutionException {\n \n         if (!(profile.getTask() instanceof SyncTask)) {"},{"sha":"b35e42fe86e9aa94fbabfa34974f5f717e8c9d26","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/LDAPPasswordSyncActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FLDAPPasswordSyncActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -53,10 +53,10 @@ public class LDAPPasswordSyncActions extends DefaultSyncActions {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO> SyncDelta beforeProvision(\n+    public <A extends AnyTO> SyncDelta beforeProvision(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any) throws JobExecutionException {\n+            final A any) throws JobExecutionException {\n \n         if (any instanceof UserTO) {\n             String password = ((UserTO) any).getPassword();\n@@ -68,11 +68,11 @@ public <T extends AnyTO> SyncDelta beforeProvision(\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n-            final K anyMod) throws JobExecutionException {\n+            final A any,\n+            final M anyMod) throws JobExecutionException {\n \n         if (anyMod instanceof UserMod) {\n             String modPassword = ((UserMod) anyMod).getPassword();\n@@ -101,10 +101,10 @@ private void parseEncodedPassword(final String password) {\n \n     @Transactional(readOnly = true)\n     @Override\n-    public <T extends AnyTO> void after(\n+    public <A extends AnyTO> void after(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n+            final A any,\n             final ProvisioningResult result) throws JobExecutionException {\n \n         if (any instanceof UserTO && encodedPassword != null && cipher != null) {"},{"sha":"3f19afc76263bccb208d4e46c8d7e3ed48095d92","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/SyncJobDelegate.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FSyncJobDelegate.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -107,7 +107,7 @@ protected String doExecuteProvisioning(\n \n                 actions.add(syncActions);\n             } catch (Exception e) {\n-                LOG.info(\"Class '{}' not found\", className, e);\n+                LOG.warn(\"Class '{}' not found\", className, e);\n             }\n         }\n "},{"sha":"f88077b3a867f753bbd258162bc79ee6c1a1c775","filename":"core/rest-cxf/pom.xml","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Frest-cxf%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Frest-cxf%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fpom.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -83,10 +83,6 @@ under the License.\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.apache.cxf</groupId>\n-      <artifactId>cxf-rt-rs-extension-providers</artifactId>\n-    </dependency>\n     <dependency>\n       <groupId>org.apache.cxf</groupId>\n       <artifactId>cxf-rt-rs-extension-search</artifactId>"},{"sha":"2de89895cc67aad8108d6961d4ffe84bc814160f","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/RestServiceExceptionMapper.java","status":"modified","additions":11,"deletions":12,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FRestServiceExceptionMapper.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -45,7 +45,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n-import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.misc.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n@@ -71,8 +71,6 @@\n @Provider\n public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n \n-    private static final String BASIC_REALM_UNAUTHORIZED = \"Basic realm=\\\"Apache Syncope authentication\\\"\";\n-\n     private static final Logger LOG = LoggerFactory.getLogger(RestServiceExceptionMapper.class);\n \n     private final ValidationExceptionMapper validationEM = new ValidationExceptionMapper();\n@@ -111,10 +109,11 @@ public Response toResponse(final Exception ex) {\n \n             builder = builder(response).entity(error);\n         } else if (ex instanceof AccessDeniedException) {\n-            builder = Response.status(Response.Status.UNAUTHORIZED).\n-                    header(HttpHeaders.WWW_AUTHENTICATE, BASIC_REALM_UNAUTHORIZED);\n-        } else if (ex instanceof UnauthorizedException) {\n-            builder = builder(ClientExceptionType.Unauthorized, ExceptionUtils.getRootCauseMessage(ex));\n+            builder = Response.status(Response.Status.FORBIDDEN).\n+                    header(RESTHeaders.ERROR_CODE, Response.Status.FORBIDDEN.getReasonPhrase()).\n+                    header(RESTHeaders.ERROR_INFO, ex.getMessage());\n+        } else if (ex instanceof DelegatedAdministrationException) {\n+            builder = builder(ClientExceptionType.DelegatedAdministration, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof UnallowedSchemaException) {\n             builder = builder(ClientExceptionType.UnallowedSchemas, ExceptionUtils.getRootCauseMessage(ex));\n         } else if (ex instanceof EntityExistsException || ex instanceof DuplicateException) {\n@@ -133,7 +132,7 @@ public Response toResponse(final Exception ex) {\n                 // process JAX-RS validation errors\n                 if (builder == null && ex instanceof ValidationException) {\n                     builder = builder(validationEM.toResponse((ValidationException) ex)).\n-                            header(RESTHeaders.ERROR_CODE, ClientExceptionType.RESTValidation.getHeaderValue()).\n+                            header(RESTHeaders.ERROR_CODE, ClientExceptionType.RESTValidation.name()).\n                             header(RESTHeaders.ERROR_INFO, ClientExceptionType.RESTValidation.getInfoHeaderValue(\n                                             ExceptionUtils.getRootCauseMessage(ex)));\n \n@@ -171,7 +170,7 @@ public Exception fromResponse(final Response response) {\n \n     private ResponseBuilder getSyncopeClientExceptionResponse(final SyncopeClientException ex) {\n         ResponseBuilder builder = Response.status(ex.getType().getResponseStatus());\n-        builder.header(RESTHeaders.ERROR_CODE, ex.getType().getHeaderValue());\n+        builder.header(RESTHeaders.ERROR_CODE, ex.getType().name());\n \n         ErrorTO error = new ErrorTO();\n         error.setStatus(ex.getType().getResponseStatus().getStatusCode());\n@@ -194,7 +193,7 @@ private ResponseBuilder getSyncopeClientCompositeExceptionResponse(final Syncope\n \n         List<ErrorTO> errors = new ArrayList<>();\n         for (SyncopeClientException sce : ex.getExceptions()) {\n-            builder.header(RESTHeaders.ERROR_CODE, sce.getType().getHeaderValue());\n+            builder.header(RESTHeaders.ERROR_CODE, sce.getType().name());\n \n             ErrorTO error = new ErrorTO();\n             error.setStatus(sce.getType().getResponseStatus().getStatusCode());\n@@ -237,7 +236,7 @@ private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n                     : ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n \n             ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\n-            builder.header(RESTHeaders.ERROR_CODE, exType.getHeaderValue());\n+            builder.header(RESTHeaders.ERROR_CODE, exType.name());\n \n             ErrorTO error = new ErrorTO();\n             error.setStatus(exType.getResponseStatus().getStatusCode());\n@@ -295,7 +294,7 @@ private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n \n     private ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n         ResponseBuilder builder = Response.status(hType.getResponseStatus()).\n-                header(RESTHeaders.ERROR_CODE, hType.getHeaderValue()).\n+                header(RESTHeaders.ERROR_CODE, hType.name()).\n                 header(RESTHeaders.ERROR_INFO, hType.getInfoHeaderValue(msg));\n \n         ErrorTO error = new ErrorTO();"},{"sha":"b1fbc3549f901e933644e412c742fdb90b208103","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserSelfServiceImpl.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserSelfServiceImpl.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -43,7 +43,7 @@ public class UserSelfServiceImpl extends AbstractServiceImpl implements UserSelf\n     @Override\n     public Response create(final UserTO userTO, final boolean storePassword) {\n         if (!syncopeLogic.isSelfRegAllowed()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n             sce.getElements().add(\"Self registration forbidden by configuration\");\n             throw sce;\n         }\n@@ -74,10 +74,16 @@ public Response delete() {\n         return modificationResponse(deleted);\n     }\n \n+    @Override\n+    public Response changePassword(final String password) {\n+        UserTO updated = logic.changePassword(password);\n+        return modificationResponse(updated);\n+    }\n+\n     @Override\n     public void requestPasswordReset(final String username, final String securityAnswer) {\n         if (!syncopeLogic.isPwdResetAllowed()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n             sce.getElements().add(\"Password reset forbidden by configuration\");\n             throw sce;\n         }\n@@ -88,7 +94,7 @@ public void requestPasswordReset(final String username, final String securityAns\n     @Override\n     public void confirmPasswordReset(final String token, final String password) {\n         if (!syncopeLogic.isPwdResetAllowed()) {\n-            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.Unauthorized);\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.DelegatedAdministration);\n             sce.getElements().add(\"Password reset forbidden by configuration\");\n             throw sce;\n         }"},{"sha":"4ee6c508f325652dfb2f690f035f5f53ffa69aaa","filename":"ext/camel/logic/src/main/java/org/apache/syncope/core/logic/init/CamelRouteLoader.java","status":"modified","additions":11,"deletions":28,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FCamelRouteLoader.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -19,23 +19,19 @@\n package org.apache.syncope.core.logic.init;\n \n import java.io.StringWriter;\n-import java.util.List;\n import java.util.Map;\n import javax.sql.DataSource;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader;\n import org.apache.syncope.core.persistence.api.DomainsHolder;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n-import org.apache.syncope.core.persistence.api.entity.CamelEntityFactory;\n import org.apache.syncope.core.persistence.api.entity.CamelRoute;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.core.io.Resource;\n-import org.springframework.dao.DataAccessException;\n import org.springframework.jdbc.core.JdbcTemplate;\n import org.springframework.stereotype.Component;\n-import org.springframework.transaction.annotation.Transactional;\n import org.w3c.dom.Element;\n import org.w3c.dom.Node;\n import org.w3c.dom.NodeList;\n@@ -63,17 +59,13 @@ public class CamelRouteLoader implements SyncopeLoader {\n     @Autowired\n     private DomainsHolder domainsHolder;\n \n-    @Autowired\n-    private CamelEntityFactory entityFactory;\n-\n     private boolean loaded = false;\n \n     @Override\n     public Integer getPriority() {\n         return 1000;\n     }\n \n-    @Transactional\n     @Override\n     public void load() {\n         synchronized (this) {\n@@ -91,13 +83,6 @@ public void load() {\n         }\n     }\n \n-    private boolean loadRoutesFor(final DataSource dataSource, final AnyTypeKind anyTypeKind) {\n-        final String sql = String.format(\"SELECT * FROM %s WHERE ANYTYPEKIND = ?\", CamelRoute.class.getSimpleName());\n-        final JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n-        final List<Map<String, Object>> rows = jdbcTemplate.queryForList(sql, new Object[] { anyTypeKind.name() });\n-        return rows.isEmpty();\n-    }\n-\n     private String nodeToString(final Node content, final DOMImplementationLS domImpl) {\n         StringWriter writer = new StringWriter();\n         try {\n@@ -115,11 +100,13 @@ private String nodeToString(final Node content, final DOMImplementationLS domImp\n     private void loadRoutes(\n             final String domain, final DataSource dataSource, final Resource resource, final AnyTypeKind anyTypeKind) {\n \n-        if (loadRoutesFor(dataSource, anyTypeKind)) {\n-            String query = String.format(\"INSERT INTO %s(NAME, ANYTYPEKIND, CONTENT) VALUES (?, ?, ?)\",\n-                    CamelRoute.class.getSimpleName());\n-            JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(dataSource);\n+        boolean shouldLoadRoutes = jdbcTemplate.queryForList(\n+                String.format(\"SELECT * FROM %s WHERE ANYTYPEKIND = ?\", CamelRoute.class.getSimpleName()),\n+                new Object[] { anyTypeKind.name() }).\n+                isEmpty();\n \n+        if (shouldLoadRoutes) {\n             try {\n                 DOMImplementationRegistry reg = DOMImplementationRegistry.newInstance();\n                 DOMImplementationLS domImpl = (DOMImplementationLS) reg.getDOMImplementation(\"LS\");\n@@ -134,18 +121,14 @@ private void loadRoutes(\n                     String routeContent = nodeToString(routeNodes.item(s), domImpl);\n                     String routeId = ((Element) routeElement).getAttribute(\"id\");\n \n-                    CamelRoute route = entityFactory.newCamelRoute();\n-                    route.setAnyTypeKind(anyTypeKind);\n-                    route.setKey(routeId);\n-                    route.setContent(routeContent);\n-\n-                    jdbcTemplate.update(query, new Object[] { routeId, anyTypeKind.name(), routeContent });\n+                    jdbcTemplate.update(\n+                            String.format(\"INSERT INTO %s(NAME, ANYTYPEKIND, CONTENT) VALUES (?, ?, ?)\",\n+                                    CamelRoute.class.getSimpleName()),\n+                            new Object[] { routeId, anyTypeKind.name(), routeContent });\n                     LOG.info(\"[{}] Route successfully loaded: {}\", domain, routeId);\n                 }\n-            } catch (DataAccessException e) {\n-                LOG.error(\"[{}] While trying to store queries\", domain, e);\n             } catch (Exception e) {\n-                LOG.error(\"[{}] Route load failed {}\", domain, e.getMessage());\n+                LOG.error(\"[{}] Route load failed\", domain, e);\n             }\n         }\n     }"},{"sha":"e806b7c785d3dde3edbc614561cedfb00853a9fe","filename":"fit/core-reference/pom.xml","status":"modified","additions":19,"deletions":9,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -362,7 +362,7 @@ under the License.\n         <dependency>\n           <groupId>org.postgresql</groupId>\n           <artifactId>postgresql</artifactId>\n-          <version>9.4-1200-jdbc41</version>\n+          <version>9.4-1201-jdbc41</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>\n@@ -374,6 +374,9 @@ under the License.\n           <resource>\n             <directory>src/main/resources</directory>\n             <filtering>true</filtering>\n+            <excludes>\n+              <exclude>provisioning.properties</exclude>\n+            </excludes>\n           </resource>\n           <resource>\n             <directory>src/main/resources/postgres</directory>\n@@ -395,7 +398,7 @@ under the License.\n         <dependency>\n           <groupId>mysql</groupId>\n           <artifactId>mysql-connector-java</artifactId>\n-          <version>5.1.34</version>\n+          <version>5.1.36</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>\n@@ -406,6 +409,9 @@ under the License.\n         <resources>\n           <resource>\n             <directory>src/main/resources</directory>\n+            <excludes>\n+              <exclude>provisioning.properties</exclude>\n+            </excludes>\n             <filtering>true</filtering>\n           </resource>\n           <resource>\n@@ -428,7 +434,7 @@ under the License.\n         <dependency>\n           <groupId>org.mariadb.jdbc</groupId>\n           <artifactId>mariadb-java-client</artifactId>\n-          <version>1.1.8</version>\n+          <version>1.1.9</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>\n@@ -440,6 +446,9 @@ under the License.\n           <resource>\n             <directory>src/main/resources</directory>\n             <filtering>true</filtering>\n+            <excludes>\n+              <exclude>provisioning.properties</exclude>\n+            </excludes>\n           </resource>\n           <resource>\n             <directory>src/main/resources/mariadb</directory>\n@@ -461,7 +470,7 @@ under the License.\n         <dependency>\n           <groupId>com.oracle</groupId>\n           <artifactId>ojdbc6</artifactId>\n-          <version>11.1.0</version>\n+          <version>11.2.0.4</version>\n           <scope>test</scope>\n         </dependency>\n       </dependencies>\n@@ -473,6 +482,9 @@ under the License.\n           <resource>\n             <directory>src/main/resources</directory>\n             <filtering>true</filtering>\n+            <excludes>\n+              <exclude>provisioning.properties</exclude>\n+            </excludes>\n           </resource>\n           <resource>\n             <directory>src/main/resources/oracle</directory>\n@@ -506,6 +518,9 @@ under the License.\n           <resource>\n             <directory>src/main/resources</directory>\n             <filtering>true</filtering>\n+            <excludes>\n+              <exclude>provisioning.properties</exclude>\n+            </excludes>\n           </resource>\n           <resource>\n             <directory>src/main/resources/sqlserver</directory>\n@@ -517,11 +532,6 @@ under the License.\n     \n     <profile>\n       <id>glassfish-it</id>\n-\n-      <properties>\n-        <!-- see SYNCOPE-688 -->\n-        <jaxrs.content.type>application/xml</jaxrs.content.type>\n-      </properties>\n       \n       <dependencies>\n         <dependency>"},{"sha":"1544969b3822cce6b17c93eaeb9146fbcafdf7a7","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueLogicActions.java","status":"renamed","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FDoubleValueLogicActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -24,17 +24,17 @@\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AttrTO;\n-import org.apache.syncope.core.provisioning.api.AnyTransformer;\n+import org.apache.syncope.core.provisioning.java.DefaultLogicActions;\n \n /**\n  * Class for integration tests: transform (by making it double) any attribute value for defined schema.\n  */\n-public class DoubleValueAnyTransformer implements AnyTransformer {\n+public class DoubleValueLogicActions extends DefaultLogicActions {\n \n     private static final String NAME = \"makeItDouble\";\n \n     @Override\n-    public <T extends AnyTO> T transform(final T input) {\n+    public <A extends AnyTO> A beforeCreate(final A input) {\n         for (AttrTO attr : input.getPlainAttrs()) {\n             if (NAME.equals(attr.getSchema())) {\n                 List<String> values = new ArrayList<>(attr.getValues().size());\n@@ -54,7 +54,7 @@ public <T extends AnyTO> T transform(final T input) {\n     }\n \n     @Override\n-    public <T extends AnyMod> T transform(final T input) {\n+    public <M extends AnyMod> M beforeUpdate(final M input) {\n         for (AttrMod attr : input.getPlainAttrsToUpdate()) {\n             if (NAME.equals(attr.getSchema())) {\n                 List<String> values = new ArrayList<>(attr.getValuesToBeAdded().size());","previous_filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/DoubleValueAnyTransformer.java"},{"sha":"9852612f3ed6c58908c59c334e1564441b0d4174","filename":"fit/core-reference/src/main/java/org/apache/syncope/fit/core/reference/TestSyncActions.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FTestSyncActions.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -38,8 +38,8 @@ public class TestSyncActions extends DefaultSyncActions {\n     private int counter = 0;\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeProvision(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeProvision(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         AttrTO attrTO = null;\n@@ -61,8 +61,8 @@ public <T extends AnyTO> SyncDelta beforeProvision(\n     }\n \n     @Override\n-    public <T extends AnyTO> SyncDelta beforeAssign(\n-            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final T any)\n+    public <A extends AnyTO> SyncDelta beforeAssign(\n+            final ProvisioningProfile<?, ?> profile, final SyncDelta delta, final A any)\n             throws JobExecutionException {\n \n         if (any instanceof UserTO && \"test2\".equals(UserTO.class.cast(any).getUsername())) {\n@@ -73,11 +73,11 @@ public <T extends AnyTO> SyncDelta beforeAssign(\n     }\n \n     @Override\n-    public <T extends AnyTO, K extends AnyMod> SyncDelta beforeUpdate(\n+    public <A extends AnyTO, M extends AnyMod> SyncDelta beforeUpdate(\n             final ProvisioningProfile<?, ?> profile,\n             final SyncDelta delta,\n-            final T any,\n-            final K anyMod) throws JobExecutionException {\n+            final A any,\n+            final M anyMod) throws JobExecutionException {\n \n         anyMod.getPlainAttrsToRemove().add(\"fullname\");\n "},{"sha":"e11e928bdbbfaa00ad35e1abaf56cef1a9cd2b84","filename":"fit/core-reference/src/main/resources/jboss/domains/MasterDomain.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FMasterDomain.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FMasterDomain.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FMasterDomain.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -116,7 +116,7 @@ under the License.\n     <property name=\"jpaPropertyMap\">\n       <map>\n         <entry key=\"openjpa.MetaDataFactory\" \n-               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly8x/deployments/syncope.war/WEB-INF/classes, Resources=${Master.orm)\"/>\n+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly9x/deployments/syncope.war/WEB-INF/classes, Resources=${Master.orm})\"/>\n       </map>\n     </property>\n   </bean>\n@@ -128,4 +128,4 @@ under the License.\n   \n   <tx:annotation-driven transaction-manager=\"MasterTransactionManager\"/>\n   \n-</beans>\n\\ No newline at end of file\n+</beans>"},{"sha":"205553f610d69f5ae1953d3d16ae50ebaf9cb93e","filename":"fit/core-reference/src/main/resources/jboss/domains/TwoDomain.xml","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FTwoDomain.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FTwoDomain.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fjboss%2Fdomains%2FTwoDomain.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,131 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:tx=\"http://www.springframework.org/schema/tx\"\n+       xmlns:util=\"http://www.springframework.org/schema/util\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+                           http://www.springframework.org/schema/beans/spring-beans.xsd                           \n+                           http://www.springframework.org/schema/tx\n+                           http://www.springframework.org/schema/tx/spring-tx.xsd\n+                           http://www.springframework.org/schema/util\n+                           http://www.springframework.org/schema/util/spring-util.xsd\">\n+  \n+  <bean id=\"TwoContentXML\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${content.directory}/domains/TwoContent.xml\"/>\n+    <property name=\"fallback\" value=\"classpath:domains/TwoContent.xml\"/>\n+  </bean>\n+  <bean id=\"TwoProperties\" class=\"org.apache.syncope.core.misc.spring.ResourceWithFallbackLoader\">\n+    <property name=\"primary\" value=\"file:${content.directory}/domains/Two.properties\"/>\n+    <property name=\"fallback\" value=\"classpath:domains/Two.properties\"/>\n+  </bean>\n+  <bean id=\"TwoDatabaseSchema\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${Two.schema}\"/>\n+  </bean>\n+\n+  <!-- Use JNDI datasource as default but, when not available, revert to\n+  local datasource, with different properties for execution and testing. \n+  In any case, get all JDBC connections with a determined isolation level. -->\n+  <bean id=\"TwoDataSource\" class=\"org.springframework.jndi.JndiObjectFactoryBean\">\n+    <property name=\"jndiName\" value=\"java:comp/env/jdbc/syncopeTwoDataSource\"/>\n+    <property name=\"defaultObject\" ref=\"localTwoDataSource\"/>\n+  </bean>\n+\n+  <bean id=\"localTwoDataSource\" class=\"org.apache.commons.dbcp2.BasicDataSource\" destroy-method=\"close\">\n+    <property name=\"driverClassName\" value=\"${Two.driverClassName}\"/>\n+    <property name=\"url\" value=\"${Two.url}\"/>\n+    <property name=\"username\" value=\"${Two.username}\"/>\n+    <property name=\"password\" value=\"${Two.password}\"/>\n+    <!-- connection pool configuration - transaction isolation, default READ_COMMITTED (see SYNCOPE-202) -->\n+    <property name=\"defaultTransactionIsolation\">\n+      <util:constant static-field=\"${Two.pool.defaultTransactionIsolation:java.sql.Connection.TRANSACTION_READ_COMMITTED}\"/>\n+    </property>\n+    <!-- connection pool configuration - default values taken from BasicDataSource default values -->\n+    <property name=\"initialSize\" value=\"${Two.pool.initialSize:0}\"/>\n+    <property name=\"maxTotal\" value=\"${Two.pool.maxActive:8}\"/>\n+    <property name=\"maxIdle\" value=\"${Two.pool.maxIdle:8}\"/>\n+    <property name=\"minIdle\" value=\"${Two.pool.minIdle:0}\"/>\n+    <property name=\"maxWaitMillis\" value=\"${Two.pool.maxWait:-1}\"/>\n+    <property name=\"validationQuery\" value=\"${Two.pool.validationQuery}\"/>\n+    <property name=\"validationQueryTimeout\" value=\"${Two.pool.validationQueryTimeout:-1}\"/>\n+    <property name=\"testOnBorrow\" value=\"${Two.pool.testOnBorrow:true}\"/>\n+    <property name=\"testOnReturn\" value=\"${Two.pool.testOnReturn:false}\"/>\n+    <property name=\"testWhileIdle\" value=\"${Two.pool.testWhileIdle:false}\"/>\n+    <property name=\"timeBetweenEvictionRunsMillis\" value=\"${Two.pool.timeBetweenEvictionRunsMillis:-1}\"/>\n+    <property name=\"numTestsPerEvictionRun\" value=\"${Two.pool.numTestsPerEvictionRun:3}\"/>\n+    <property name=\"minEvictableIdleTimeMillis\" value=\"${Two.pool.minEvictableIdleTimeMillis:1800000}\"/>\n+    <property name=\"removeAbandonedOnBorrow\" value=\"${Two.pool.removeAbandoned:false}\"/>\n+    <property name=\"removeAbandonedOnMaintenance\" value=\"${Two.pool.removeAbandoned:false}\"/>\n+    <property name=\"removeAbandonedTimeout\" value=\"${Two.pool.removeAbandonedTimeout:300}\"/>\n+    <property name=\"logAbandoned\" value=\"${Two.pool.logAbandoned:false}\"/>\n+  </bean>\n+  \n+  <bean class=\"org.springframework.jdbc.datasource.init.DataSourceInitializer\">\n+    <property name=\"dataSource\" ref=\"TwoDataSource\"/>\n+    <property name=\"enabled\" value=\"true\"/>\n+    <property name=\"databasePopulator\">\n+      <bean class=\"org.springframework.jdbc.datasource.init.ResourceDatabasePopulator\">\n+        <property name=\"continueOnError\" value=\"true\"/>\n+        <property name=\"ignoreFailedDrops\" value=\"true\"/>\n+        <property name=\"sqlScriptEncoding\" value=\"UTF-8\"/>\n+        <property name=\"scripts\">\n+          <array>\n+            <value type=\"org.springframework.core.io.Resource\">\n+              classpath:/audit/${Two.audit.sql}\n+            </value>\n+          </array>\n+        </property>\n+      </bean>\n+    </property>\n+  </bean>\n+  \n+  <bean id=\"TwoEntityManagerFactory\"\n+        class=\"org.apache.syncope.core.persistence.jpa.spring.DomainEntityManagerFactoryBean\">\n+    <property name=\"mappingResources\">\n+      <list>\n+        <value>${Two.orm}</value>\n+      </list>\n+    </property>\n+    <property name=\"persistenceUnitName\" value=\"Two\"/>\n+    <property name=\"dataSource\" ref=\"TwoDataSource\"/>\n+    <property name=\"jpaVendorAdapter\">\n+      <bean class=\"org.springframework.orm.jpa.vendor.OpenJpaVendorAdapter\">\n+        <property name=\"showSql\" value=\"false\"/>\n+        <property name=\"generateDdl\" value=\"true\"/>\n+        <property name=\"databasePlatform\" value=\"${Two.databasePlatform}\"/>\n+      </bean>\n+    </property>\n+    <property name=\"commonEntityManagerFactoryConf\" ref=\"commonEMFConf\"/>\n+    <property name=\"jpaPropertyMap\">\n+      <map>\n+        <entry key=\"openjpa.MetaDataFactory\" \n+               value=\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly9x/deployments/syncope.war/WEB-INF/classes, Resources=${Two.orm})\"/>\n+      </map>\n+    </property>\n+  </bean>\n+\n+  <bean id=\"TwoTransactionManager\" class=\"org.springframework.orm.jpa.JpaTransactionManager\">\n+    <property name=\"entityManagerFactory\" ref=\"TwoEntityManagerFactory\"/>\n+    <qualifier value=\"Two\"/>\n+  </bean>\n+  \n+  <tx:annotation-driven transaction-manager=\"TwoTransactionManager\"/>\n+  \n+</beans>"},{"sha":"4af398a1f0f4e13239122397f30eb3530df92a61","filename":"fit/core-reference/src/main/resources/logic.properties","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flogic.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -14,5 +14,4 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-anyTransformer=org.apache.syncope.fit.core.reference.DoubleValueAnyTransformer\n logicInvocationHandler=org.apache.syncope.core.logic.LogicInvocationHandler"},{"sha":"39e519a09fea6a0d810ac536839055a4fa09bc38","filename":"fit/core-reference/src/main/resources/mariadb/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fdomains%2FMaster.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=org.mariadb.jdbc.Driver\n+Master.url=jdbc:mariadb://localhost:3306/syncope?characterEncoding=UTF-8\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MariaDBDictionary\n+Master.orm=META-INF/spring-orm.xml\n+\n+# note: other connection pool settings can also be configured here, see DataSource definition\n+Master.pool.validationQuery=SELECT 1\n+\n+Master.audit.sql=audit.sql"},{"sha":"4a0c415fdd5cecd50fe128f9c4792a954b6d52dd","filename":"fit/core-reference/src/main/resources/mariadb/provisioning.properties","status":"renamed","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmariadb%2Fprovisioning.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -14,17 +14,11 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-content.directory=${conf.directory}\n-jpa.driverClassName=org.mariadb.jdbc.Driver\n-jpa.url=jdbc:mariadb://localhost:3306/syncope?characterEncoding=UTF-8\n-jpa.username=syncope\n-jpa.password=syncope\n-jpa.dialect=org.apache.openjpa.jdbc.sql.MariaDBDictionary\n-jpa.pool.validationQuery=SELECT 1\n-jpa.orm=META-INF/spring-orm.xml\n-#note: other connection pool settings can also be configured here, see persistenceContext.xml\n+userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n+groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n-quartz.scheduler.idleWaitTime=5000\n quartz.sql=tables_mariadb.sql\n-audit.sql=audit.sql\n-database.schema=\n+quartz.scheduler.idleWaitTime=5000\n\\ No newline at end of file","previous_filename":"fit/core-reference/src/main/resources/mariadb/persistence.properties"},{"sha":"93eba7624b747684d914374b37fbb11ebe73a70e","filename":"fit/core-reference/src/main/resources/mysql/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fdomains%2FMaster.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=com.mysql.jdbc.Driver\n+Master.url=jdbc:mysql://localhost:3306/syncope?characterEncoding=UTF-8\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary\n+Master.orm=META-INF/spring-orm.xml\n+\n+# note: other connection pool settings can also be configured here, see DataSource definition\n+Master.pool.validationQuery=SELECT 1\n+\n+Master.audit.sql=audit.sql"},{"sha":"ac8306aa29af721e44083ae5400e8c4dbc20a4c7","filename":"fit/core-reference/src/main/resources/mysql/provisioning.properties","status":"renamed","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmysql%2Fprovisioning.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -14,17 +14,11 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-content.directory=${conf.directory}\n-jpa.driverClassName=com.mysql.jdbc.Driver\n-jpa.url=jdbc:mysql://localhost:3306/syncope?characterEncoding=UTF-8\n-jpa.username=syncope\n-jpa.password=syncope\n-jpa.dialect=org.apache.openjpa.jdbc.sql.MySQLDictionary\n-jpa.pool.validationQuery=SELECT 1\n-jpa.orm=META-INF/spring-orm.xml\n-#note: other connection pool settings can also be configured here, see persistenceContext.xml\n+userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n+groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\n-quartz.scheduler.idleWaitTime=5000\n quartz.sql=tables_mysql.sql\n-audit.sql=audit.sql\n-database.schema=\n+quartz.scheduler.idleWaitTime=5000\n\\ No newline at end of file","previous_filename":"fit/core-reference/src/main/resources/mysql/persistence.properties"},{"sha":"3623c2d1101bcb3628915ec98f6e7b9031d68f11","filename":"fit/core-reference/src/main/resources/oracle/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fdomains%2FMaster.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=oracle.jdbc.OracleDriver\n+Master.url=jdbc:oracle:thin:@pioppo:1521:orcl\n+Master.schema=SYNCOPE\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.OracleDictionary\n+Master.orm=META-INF/spring-orm-oracle.xml\n+\n+# note: other connection pool settings can also be configured here, see DataSource definition\n+Master.pool.validationQuery=SELECT 1 FROM DUAL\n+\n+Master.audit.sql=audit_oracle.sql"},{"sha":"22071c0c9148350d45ea1f8f754272d830d7765f","filename":"fit/core-reference/src/main/resources/oracle/provisioning.properties","status":"renamed","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Foracle%2Fprovisioning.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -14,17 +14,11 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-content.directory=${conf.directory}\n-jpa.driverClassName=oracle.jdbc.OracleDriver\n-jpa.url=jdbc:oracle:thin:@pioppo:1521:orcl\n-jpa.username=syncope\n-jpa.password=syncope\n-jpa.dialect=org.apache.openjpa.jdbc.sql.OracleDictionary\n-jpa.pool.validationQuery=SELECT 1 FROM DUAL\n-jpa.orm=META-INF/spring-orm-oracle.xml\n-#note: other connection pool settings can also be configured here, see persistenceContext.xml\n+userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n+groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\n-quartz.scheduler.idleWaitTime=5000\n quartz.sql=tables_oracle.sql\n-audit.sql=audit_oracle.sql\n-database.schema=SYNCOPE\n+quartz.scheduler.idleWaitTime=5000\n\\ No newline at end of file","previous_filename":"fit/core-reference/src/main/resources/oracle/persistence.properties"},{"sha":"177e98835f361b6759d0be6dce8cdbd901fabfb8","filename":"fit/core-reference/src/main/resources/postgres/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fdomains%2FMaster.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=org.postgresql.Driver\n+Master.url=jdbc:postgresql://localhost:5432/syncope\n+Master.schema=\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary\n+Master.orm=META-INF/spring-orm.xml\n+\n+# note: other connection pool settings can also be configured here, see DataSource definition\n+Master.pool.validationQuery=SELECT 1\n+\n+Master.audit.sql=audit.sql"},{"sha":"66340bbdfb797fb2af11e3d688fa91660685f8ad","filename":"fit/core-reference/src/main/resources/postgres/provisioning.properties","status":"renamed","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fpostgres%2Fprovisioning.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -14,16 +14,11 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-content.directory=${conf.directory}\n-jpa.driverClassName=org.postgresql.Driver\n-jpa.url=jdbc:postgresql://localhost:5432/syncope\n-jpa.username=syncope\n-jpa.password=syncope\n-jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\n-jpa.pool.validationQuery=SELECT 1\n-jpa.orm=META-INF/spring-orm.xml\n-#note: other connection pool settings can also be configured here, see persistenceContext.xml\n+userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n+groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\n quartz.sql=tables_postgres.sql\n-audit.sql=audit.sql\n-database.schema=\n+quartz.scheduler.idleWaitTime=5000\n\\ No newline at end of file","previous_filename":"fit/core-reference/src/main/resources/postgres/persistence.properties"},{"sha":"3dcce44c9b3bb054e36fc8a32003fed61fca2035","filename":"fit/core-reference/src/main/resources/sqlserver/domains/Master.properties","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fdomains%2FMaster.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fdomains%2FMaster.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fdomains%2FMaster.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,28 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+Master.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\n+Master.url=jdbc:sqlserver://acacia:1433;database=syncope;selectMethod=cursor;sendStringParametersAsUnicode=false\n+Master.schema=dbo\n+Master.username=syncope\n+Master.password=syncope\n+Master.databasePlatform=org.apache.openjpa.jdbc.sql.SQLServerDictionary\n+Master.orm=META-INF/spring-orm-sqlserver.xml\n+\n+# note: other connection pool settings can also be configured here, see DataSource definition\n+Master.pool.validationQuery=SELECT 1\n+\n+Master.audit.sql=audit_sqlserver.sql"},{"sha":"5e0088e049940f18685970998787be0af8919e26","filename":"fit/core-reference/src/main/resources/sqlserver/provisioning.properties","status":"renamed","additions":6,"deletions":12,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fprovisioning.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fprovisioning.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fsqlserver%2Fprovisioning.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -14,17 +14,11 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n-content.directory=${conf.directory}\n-jpa.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\n-jpa.url=jdbc:sqlserver://acacia:1433;database=syncope;selectMethod=cursor;sendStringParametersAsUnicode=false\n-jpa.username=syncope\n-jpa.password=syncope\n-jpa.dialect=org.apache.openjpa.jdbc.sql.SQLServerDictionary\n-jpa.pool.validationQuery=SELECT 1\n-jpa.orm=META-INF/spring-orm-sqlserver.xml\n-#note: other connection pool settings can also be configured here, see persistenceContext.xml\n+userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\n+groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\n+anyObjectProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\n+virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\n+\n quartz.jobstore=org.quartz.impl.jdbcjobstore.MSSQLDelegate\n-quartz.scheduler.idleWaitTime=5000\n quartz.sql=tables_sqlServer.sql\n-audit.sql=audit_sqlserver.sql\n-database.schema=\n+quartz.scheduler.idleWaitTime=5000\n\\ No newline at end of file","previous_filename":"fit/core-reference/src/main/resources/sqlserver/persistence.properties"},{"sha":"79ec47a132e0e80a936b57d975b641e66e3d195b","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AuthenticationITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAuthenticationITCase.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -101,7 +101,7 @@ public void testReadEntitlements() {\n \n         // 3. as admin\n         self = adminClient.self();\n-        assertEquals(Entitlement.values().size() - 1, self.getKey().size());\n+        assertEquals(Entitlement.values().size(), self.getKey().size());\n         assertFalse(self.getKey().keySet().contains(Entitlement.ANONYMOUS));\n         assertEquals(ADMIN_UNAME, self.getValue().getUsername());\n \n@@ -184,7 +184,7 @@ public void testUserRead() {\n             fail();\n         } catch (SyncopeClientException e) {\n             assertNotNull(e);\n-            assertEquals(ClientExceptionType.Unauthorized, e.getType());\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n         }\n     }\n \n@@ -268,7 +268,7 @@ public void delegatedUserCRUD() {\n                 delegatedUserService.create(user);\n                 fail();\n             } catch (SyncopeClientException e) {\n-                assertEquals(ClientExceptionType.Unauthorized, e.getType());\n+                assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n \n             // 5. set realm to /even/two -> succeed\n@@ -291,7 +291,7 @@ public void delegatedUserCRUD() {\n                 delegatedUserService.update(userMod);\n                 fail();\n             } catch (SyncopeClientException e) {\n-                assertEquals(ClientExceptionType.Unauthorized, e.getType());\n+                assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n             }\n \n             // 6. revert realm change -> succeed"},{"sha":"6ad53c72152702222131f0bd692d29193a849086","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -181,7 +181,7 @@ public void selfRead() {\n             groupService2.read(3L);\n             fail();\n         } catch (SyncopeClientException e) {\n-            assertEquals(ClientExceptionType.Unauthorized, e.getType());\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n         }\n \n         List<GroupTO> groups = groupService2.own();"},{"sha":"ccb24ab36e732d23c1a0b3b5c50dec20f47d8172","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserITCase.java","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserITCase.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -491,12 +491,12 @@ public void delete() {\n \n         userTO = createUser(userTO);\n \n-        long id = userTO.getKey();\n+        long key = userTO.getKey();\n \n-        userTO = deleteUser(id);\n+        userTO = deleteUser(key);\n \n         assertNotNull(userTO);\n-        assertEquals(id, userTO.getKey());\n+        assertEquals(key, userTO.getKey());\n         assertTrue(userTO.getPlainAttrs().isEmpty());\n \n         // check for propagation result\n@@ -2070,7 +2070,13 @@ public void deprovisionUnlinked() {\n \n     @Test\n     public void issueSYNCOPE420() {\n+        RealmTO realm = realmService.list(\"/even/two\").iterator().next();\n+        assertNotNull(realm);\n+        realm.getActionsClassNames().add(DoubleValueLogicActions.class.getName());\n+        realmService.update(realm);\n+\n         UserTO userTO = getUniqueSampleTO(\"syncope420@syncope.apache.org\");\n+        userTO.setRealm(realm.getFullPath());\n         userTO.getPlainAttrs().add(attrTO(\"makeItDouble\", \"3\"));\n \n         userTO = createUser(userTO);"},{"sha":"d356afc298e3920b7108b40cd08b18676b6efb0a","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/UserSelfITCase.java","status":"modified","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FUserSelfITCase.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -47,6 +47,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ResourceService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.junit.Assume;\n@@ -351,4 +352,35 @@ public void passwordResetWithoutSecurityQuestion() {\n         configurationService.set(attrTO(\"passwordReset.securityQuestion\", \"true\"));\n     }\n \n+    @Test\n+    public void mustChangePassword() {\n+        // 0. access as vivaldi -> succeed\n+        SyncopeClient vivaldiClient = clientFactory.create(\"vivaldi\", \"password\");\n+        Pair<Map<String, Set<String>>, UserTO> self = vivaldiClient.self();\n+        assertFalse(self.getRight().isMustChangePassword());\n+\n+        // 1. update user vivaldi (3) requirig password update\n+        UserMod userMod = new UserMod();\n+        userMod.setKey(3L);\n+        userMod.setMustChangePassword(true);\n+        UserTO vivaldi = updateUser(userMod);\n+        assertTrue(vivaldi.isMustChangePassword());\n+\n+        // 2. attempt to access -> fail\n+        try {\n+            vivaldiClient.getService(ResourceService.class).list();\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+            assertEquals(\"Please change your password first\", e.getMessage());\n+        }\n+\n+        // 3. change password\n+        vivaldiClient.getService(UserSelfService.class).changePassword(\"password123\");\n+\n+        // 4. verify it worked\n+        self = clientFactory.create(\"vivaldi\", \"password123\").self();\n+        assertFalse(self.getRight().isMustChangePassword());\n+    }\n+\n }"},{"sha":"5ab153f83584c0974ac6c97f4759590643db7a32","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/VirAttrITCase.java","status":"modified","additions":98,"deletions":0,"changes":98,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FVirAttrITCase.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -26,6 +26,8 @@\n import java.util.Collections;\n import java.util.Locale;\n import java.util.Map;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.syncope.common.lib.mod.AttrMod;\n import org.apache.syncope.common.lib.mod.StatusMod;\n@@ -315,6 +317,8 @@ public void issueSYNCOPE397() {\n             // make std controls about user\n             assertNotNull(created);\n             assertTrue(RESOURCE_NAME_CSV.equals(created.getResources().iterator().next()));\n+            assertEquals(\"test@testone.org\", created.getVirAttrs().iterator().next().getValues().get(0));\n+            \n             // update user\n             UserTO toBeUpdated = userService.read(created.getKey());\n             UserMod userMod = new UserMod();\n@@ -613,4 +617,98 @@ public void issueSYNCOPE501() {\n         assertFalse(userTO.getVirAttrMap().get(\"virtualdata\").getValues().isEmpty());\n         assertEquals(\"syncope501_updated@apache.org\", userTO.getVirAttrMap().get(\"virtualdata\").getValues().get(0));\n     }\n+\n+    @Test\n+    public void issueSYNCOPE691() {\n+        final String res = RESOURCE_NAME_LDAP + \"691\";\n+\n+        ResourceTO ldap = resourceService.read(RESOURCE_NAME_LDAP);\n+        ldap.setKey(res);\n+\n+        try {\n+\n+            CollectionUtils.filterInverse(ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems(),\n+                    new Predicate<MappingItemTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MappingItemTO item) {\n+                            return \"mail\".equals(item.getExtAttrName());\n+                        }\n+                    });\n+\n+            final MappingItemTO mail = new MappingItemTO();\n+            // unset internal attribute mail and set virtual attribute virtualdata as mapped to external email\n+            mail.setIntMappingType(IntMappingType.UserVirtualSchema);\n+            mail.setIntAttrName(\"virtualdata\");\n+            mail.setPurpose(MappingPurpose.BOTH);\n+            mail.setExtAttrName(\"mail\");\n+\n+            ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems().add(mail);\n+\n+            resourceService.create(ldap);\n+\n+            ldap = resourceService.read(res);\n+            assertNotNull(ldap.getProvision(AnyTypeKind.USER.name()).getMapping());\n+\n+            assertTrue(CollectionUtils.exists(ldap.getProvision(AnyTypeKind.USER.name()).getMapping().getItems(),\n+                    new Predicate<MappingItemTO>() {\n+\n+                        @Override\n+                        public boolean evaluate(final MappingItemTO item) {\n+                            return \"mail\".equals(item.getExtAttrName()) && \"virtualdata\".equals(item.getIntAttrName());\n+                        }\n+                    }));\n+\n+            // create a new user\n+            UserTO userTO = UserITCase.getUniqueSampleTO(\"syncope691@syncope.apache.org\");\n+            userTO.getResources().clear();\n+            userTO.getMemberships().clear();\n+            userTO.getDerAttrs().clear();\n+            userTO.getVirAttrs().clear();\n+\n+            final AttrTO emailTO = new AttrTO();\n+            emailTO.setSchema(\"virtualdata\");\n+            emailTO.getValues().add(\"test@issue691.dom1.org\");\n+            emailTO.getValues().add(\"test@issue691.dom2.org\");\n+\n+            userTO.getVirAttrs().add(emailTO);\n+            // assign resource-ldap691 to user\n+            userTO.getResources().add(res);\n+            // save user\n+            UserTO created = createUser(userTO);\n+            // make std controls about user\n+            assertNotNull(created);\n+            assertTrue(res.equals(created.getResources().iterator().next()));\n+\n+            assertEquals(2, created.getVirAttrs().iterator().next().getValues().size(), 0);\n+            assertTrue(created.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom1.org\"));\n+            assertTrue(created.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom2.org\"));\n+\n+            // update user\n+            UserMod userMod = new UserMod();\n+            userMod.setKey(created.getKey());\n+            //modify virtual attribute\n+            userMod.getVirAttrsToRemove().add(\"virtualdata\");\n+\n+            final AttrMod emailMod = new AttrMod();\n+            emailMod.setSchema(\"virtualdata\");\n+            emailMod.getValuesToBeAdded().add(\"test@issue691.dom3.org\");\n+            emailMod.getValuesToBeAdded().add(\"test@issue691.dom4.org\");\n+\n+            userMod.getVirAttrsToUpdate().add(emailMod);\n+\n+            final UserTO updated = updateUser(userMod);\n+            assertNotNull(updated);\n+            assertEquals(2, updated.getVirAttrs().iterator().next().getValues().size(), 0);\n+            assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom3.org\"));\n+            assertTrue(updated.getVirAttrs().iterator().next().getValues().contains(\"test@issue691.dom4.org\"));\n+        } finally {\n+            try {\n+                resourceService.delete(res);\n+            } catch (Exception ignore) {\n+                // ignore\n+            }\n+        }\n+    }\n+\n }"},{"sha":"4aed30452c5714de980b1ad2495e6a9d30a32ac1","filename":"installer/pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fpom.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -183,9 +183,9 @@ under the License.\n         <filtering>true</filtering>\n       </resource>\n       <resource>\n-        <directory>${basedir}/../fit/core-reference/src/main/resources/jboss</directory>\n+        <directory>${basedir}/../fit/core-reference/src/main/resources/jboss/domains</directory>\n         <includes>\n-          <include>**/persistenceContextEMFactory.xml</include>\n+          <include>**/MasterDomain.xml</include>\n         </includes>\n       </resource>\n       <resource>"},{"sha":"beaac41a91e564cea7b9329467a56ec5e91f4c33","filename":"installer/src/main/java/org/apache/syncope/installer/files/MasterDomainXml.java","status":"renamed","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterDomainXml.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterDomainXml.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterDomainXml.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,17 +18,18 @@\n  */\n package org.apache.syncope.installer.files;\n \n-public final class PersistenceContextEMFactoryXml {\n+public final class MasterDomainXml {\n \n-    public static final String PLACEHOLDER = \"<entry key=\\\"openjpa.MetaDataFactory\\\"\\n\"\n-            + \"               value=\\\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly8x/\"\n-            + \"deployments/${project.build.finalName}.war/WEB-INF/classes/, Resources=META-INF/orm.xml)\\\"/>\";\n+    public static final String PLACEHOLDER = \"\"\n+            + \"<entry key=\\\"openjpa.MetaDataFactory\\\" \\n               \"\n+            + \"value=\\\"jpa(URLs=vfs:${project.build.directory}/cargo/configurations/wildfly9x/deployments/syncope.war\"\n+            + \"/WEB-INF/classes, Resources=${Master.orm})\\\"/>\\n\";\n \n     public static final String JBOSS =\n             \"<entry key=\\\"openjpa.MetaDataFactory\\\" value=\\\"jpa(URLs=vfs:/content/${project.build.finalName}.war/\"\n-            + \"WEB-INF/classes/, Resources=META-INF/orm.xml)\\\"/>\";\n+            + \"WEB-INF/classes/, Resources=${Master.orm})\\\"/>\";\n \n-    private PersistenceContextEMFactoryXml() {\n+    private MasterDomainXml() {\n         // private constructor for static utility class\n     }\n }","previous_filename":"installer/src/main/java/org/apache/syncope/installer/files/PersistenceContextEMFactoryXml.java"},{"sha":"b1fb22367d10e5d77fcf9341c353cd68c9db470d","filename":"installer/src/main/java/org/apache/syncope/installer/files/MasterProperties.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FMasterProperties.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.installer.files;\n+\n+public final class MasterProperties {\n+\n+    public static final String HEADER = \"# Licensed to the Apache Software Foundation (ASF) under one\\n\"\n+            + \"# or more contributor license agreements.  See the NOTICE file\\n\"\n+            + \"# distributed with this work for additional information\\n\"\n+            + \"# regarding copyright ownership.  The ASF licenses this file\\n\"\n+            + \"# to you under the Apache License, Version 2.0 (the\\n\"\n+            + \"# \\\"License\\\"); you may not use this file except in compliance\\n\"\n+            + \"# with the License.  You may obtain a copy of the License at\\n\" + \"#\\n\"\n+            + \"#   http://www.apache.org/licenses/LICENSE-2.0\\n\" + \"#\\n\"\n+            + \"# Unless required by applicable law or agreed to in writing,\\n\"\n+            + \"# software distributed under the License is distributed on an\\n\"\n+            + \"# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n\"\n+            + \"# KIND, either express or implied.  See the License for the\\n\"\n+            + \"# specific language governing permissions and limitations\\n\"\n+            + \"# under the License.\\n\";\n+\n+    public static final String POSTGRES = \"\"\n+            + \"Master.driverClassName=org.postgresql.Driver\\n\"\n+            + \"Master.url=%s\\n\"\n+            + \"Master.schema=\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.PostgresDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1\\n\"\n+            + \"Master.audit.sql=audit.sql\\n\";\n+\n+    public static final String MYSQL = \"\"\n+            + \"Master.driverClassName=com.mysql.jdbc.Driver\\n\"\n+            + \"Master.url=%s\\n\"\n+            + \"Master.schema=\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.MySQLDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1\\n\"\n+            + \"Master.audit.sql=audit.sql\\n\";\n+\n+    public static final String MARIADB = \"\"\n+            + \"Master.driverClassName=org.mariadb.jdbc.Driver\\n\"\n+            + \"Master.url=%s\\n\"\n+            + \"Master.schema=\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.MariaDBDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1\\n\"\n+            + \"Master.audit.sql=audit.sql\\n\";\n+\n+    public static final String ORACLE = \"\"\n+            + \"Master.driverClassName=oracle.jdbc.OracleDriver\\n\"\n+            + \"Master.url=jdbc:oracle:thin:@pioppo:1521:orcl\\n\"\n+            + \"Master.schema=%s\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.OracleDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm-oracle.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1 FROM DUAL\\n\"\n+            + \"Master.audit.sql=audit_oracle.sql\\n\";\n+\n+    public static final String SQLSERVER = \"\"\n+            + \"Master.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\\n\"\n+            + \"Master.url=jdbc:sqlserver://acacia:1433;database=syncope;selectMethod=cursor;\"\n+            + \"sendStringParametersAsUnicode=false\\n\"\n+            + \"Master.schema=%s\\n\"\n+            + \"Master.username=%s\\n\"\n+            + \"Master.password=%s\\n\"\n+            + \"Master.databasePlatform=org.apache.openjpa.jdbc.sql.SQLServerDictionary\\n\"\n+            + \"Master.orm=META-INF/spring-orm-sqlserver.xml\\n\"\n+            + \"Master.pool.validationQuery=SELECT 1\\n\"\n+            + \"Master.audit.sql=audit_sqlserver.sql\\n\";\n+\n+    private MasterProperties() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"769722f6f33523f92d1749c82b2492fcef327a83","filename":"installer/src/main/java/org/apache/syncope/installer/files/PersistenceProperties.java","status":"removed","additions":0,"deletions":110,"changes":110,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/0419594e89a7416470bd8950b1cc8cd75d023833/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FPersistenceProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/0419594e89a7416470bd8950b1cc8cd75d023833/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FPersistenceProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FPersistenceProperties.java?ref=0419594e89a7416470bd8950b1cc8cd75d023833","patch":"@@ -1,110 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.installer.files;\n-\n-public final class PersistenceProperties {\n-\n-    public static final String HEADER = \"# Licensed to the Apache Software Foundation (ASF) under one\\n\"\n-            + \"# or more contributor license agreements.  See the NOTICE file\\n\"\n-            + \"# distributed with this work for additional information\\n\"\n-            + \"# regarding copyright ownership.  The ASF licenses this file\\n\"\n-            + \"# to you under the Apache License, Version 2.0 (the\\n\"\n-            + \"# \\\"License\\\"); you may not use this file except in compliance\\n\"\n-            + \"# with the License.  You may obtain a copy of the License at\\n\" + \"#\\n\"\n-            + \"#   http://www.apache.org/licenses/LICENSE-2.0\\n\" + \"#\\n\"\n-            + \"# Unless required by applicable law or agreed to in writing,\\n\"\n-            + \"# software distributed under the License is distributed on an\\n\"\n-            + \"# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n\"\n-            + \"# KIND, either express or implied.  See the License for the\\n\"\n-            + \"# specific language governing permissions and limitations\\n\" + \"# under the License.\\n\";\n-\n-    public static final String POSTGRES = \"\"\n-            + \"jpa.driverClassName=org.postgresql.Driver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.PostgresDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1\\n\"\n-            + \"jpa.orm=META-INF/spring-orm.xml\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\\n\"\n-            + \"quartz.sql=tables_postgres.sql\\n\"\n-            + \"audit.sql=audit.sql\\n\"\n-            + \"database.schema=\\n\";\n-\n-    public static final String MYSQL = \"\"\n-            + \"jpa.driverClassName=com.mysql.jdbc.Driver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.MySQLDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1\\n\"\n-            + \"jpa.orm=META-INF/spring-orm.xml\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\\n\"\n-            + \"audit.sql=audit.sql\\n\"\n-            + \"database.schema=\\n\";\n-\n-    public static final String MARIADB = \"\"\n-            + \"jpa.driverClassName=org.mariadb.jdbc.Driver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.MariaDBDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\\n\"\n-            + \"quartz.sql=tables_mariadb.sql\\n\"\n-            + \"audit.sql=audit.sql\\n\"\n-            + \"database.schema=\\n\";\n-\n-    public static final String ORACLE = \"\"\n-            + \"jpa.driverClassName=oracle.jdbc.OracleDriver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.OracleDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1 FROM DUAL\\n\"\n-            + \"jpa.orm=META-INF/spring-orm-oracle.xml\\n\"\n-            + \"#note: other connection pool settings can also be configured here, see persistenceContext.xml\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\\n\"\n-            + \"quartz.scheduler.idleWaitTime=5000\\n\"\n-            + \"quartz.sql=tables_oracle.sql\\n\"\n-            + \"audit.sql=audit_oracle.sql\\n\"\n-            + \"database.schema=%s\\n\";\n-\n-    public static final String SQLSERVER = \"jpa.driverClassName=com.microsoft.sqlserver.jdbc.SQLServerDriver\\n\"\n-            + \"jpa.url=%s\\n\"\n-            + \"jpa.username=%s\\n\"\n-            + \"jpa.password=%s\\n\"\n-            + \"jpa.dialect=org.apache.openjpa.jdbc.sql.SQLServerDictionary\\n\"\n-            + \"jpa.pool.validationQuery=SELECT 1\\n\"\n-            + \"jpa.orm=META-INF/spring-orm-sqlserver.xml\\n\"\n-            + \"#note: other connection pool settings can also be configured here, see persistenceContext.xml\\n\"\n-            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.MSSQLDelegate\\n\"\n-            + \"quartz.scheduler.idleWaitTime=5000\\n\"\n-            + \"quartz.sql=tables_sqlServer.sql\\n\"\n-            + \"audit.sql=audit_sqlserver.sql\\n\"\n-            + \"database.schema=\";\n-\n-    public static final String MYSQL_QUARTZ_INNO_DB = \"quartz.sql=tables_mysql_innodb.sql\";\n-\n-    public static final String MYSQL_QUARTZ = \"quartz.sql=tables_mysql.sql\";\n-\n-    private PersistenceProperties() {\n-        // private constructor for static utility class\n-    }\n-}"},{"sha":"020efcb1ad70416b7b447002363c09178e2f998b","filename":"installer/src/main/java/org/apache/syncope/installer/files/ProvisioningProperties.java","status":"added","additions":69,"deletions":0,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FProvisioningProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FProvisioningProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Ffiles%2FProvisioningProperties.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -0,0 +1,69 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.installer.files;\n+\n+public final class ProvisioningProperties {\n+\n+    public static final String HEADER = \"# Licensed to the Apache Software Foundation (ASF) under one\\n\"\n+            + \"# or more contributor license agreements.  See the NOTICE file\\n\"\n+            + \"# distributed with this work for additional information\\n\"\n+            + \"# regarding copyright ownership.  The ASF licenses this file\\n\"\n+            + \"# to you under the Apache License, Version 2.0 (the\\n\"\n+            + \"# \\\"License\\\"); you may not use this file except in compliance\\n\"\n+            + \"# with the License.  You may obtain a copy of the License at\\n\" + \"#\\n\"\n+            + \"#   http://www.apache.org/licenses/LICENSE-2.0\\n\" + \"#\\n\"\n+            + \"# Unless required by applicable law or agreed to in writing,\\n\"\n+            + \"# software distributed under the License is distributed on an\\n\"\n+            + \"# \\\"AS IS\\\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\\n\"\n+            + \"# KIND, either express or implied.  See the License for the\\n\"\n+            + \"# specific language governing permissions and limitations\\n\"\n+            + \"# under the License.\\n\"\n+            + \"userProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultUserProvisioningManager\\n\"\n+            + \"groupProvisioningManager=org.apache.syncope.core.provisioning.java.DefaultGroupProvisioningManager\\n\"\n+            + \"anyObjectProvisioningManager=\"\n+            + \"org.apache.syncope.core.provisioning.java.DefaultAnyObjectProvisioningManager\\n\"\n+            + \"virAttrCache=org.apache.syncope.core.provisioning.java.cache.MemoryVirAttrCache\\n\";\n+\n+    public static final String POSTGRES = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.PostgreSQLDelegate\\n\"\n+            + \"quartz.sql=tables_postgres.sql\\n\";\n+\n+    public static final String MYSQL = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\\n\";\n+\n+    public static final String MYSQL_QUARTZ_INNO_DB = \"quartz.sql=tables_mysql_innodb.sql\";\n+\n+    public static final String MYSQL_QUARTZ = \"quartz.sql=tables_mysql.sql\";\n+\n+    public static final String MARIADB = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.StdJDBCDelegate\\n\"\n+            + \"quartz.sql=tables_mariadb.sql\\n\";\n+\n+    public static final String ORACLE = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.oracle.OracleDelegate\\n\"\n+            + \"quartz.sql=tables_oracle.sql\\n\";\n+\n+    public static final String SQLSERVER = \"\"\n+            + \"quartz.jobstore=org.quartz.impl.jdbcjobstore.MSSQLDelegate\\n\"\n+            + \"quartz.sql=tables_sqlServer.sql\\n\";\n+\n+    private ProvisioningProperties() {\n+        // private constructor for static utility class\n+    }\n+}"},{"sha":"4f17035393199a857df6515a2368989cf142db06","filename":"installer/src/main/java/org/apache/syncope/installer/processes/ArchetypeProcess.java","status":"modified","additions":29,"deletions":35,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FArchetypeProcess.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -32,6 +32,7 @@\n \n public class ArchetypeProcess extends BaseProcess {\n \n+    @Override\n     public void run(final AbstractUIProcessHandler handler, final String[] args) {\n         final String installPath = args[0];\n         final String mavenDir = args[1];\n@@ -54,45 +55,37 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n \n         setSyncopeInstallDir(installPath, artifactId);\n \n-        final FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n+        FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n         fileSystemUtils.createDirectory(installPath);\n         InstallLog.initialize(installPath, handler);\n-        final MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n+        MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n         File customMavenProxySettings = null;\n         try {\n             if (isProxyEnabled && mavenProxyAutoconf) {\n                 customMavenProxySettings = MavenUtils.createSettingsWithProxy(installPath, proxyHost, proxyPort,\n                         proxyUser, proxyPwd);\n             }\n-        } catch (IOException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n-                    \"I/O error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (ParserConfigurationException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+        } catch (IOException e) {\n+            StringBuilder message = new StringBuilder(\"I/O error during creation of Maven custom settings.xml\");\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (ParserConfigurationException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"Parser configuration error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (TransformerException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (TransformerException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"Transformer error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (SAXException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (SAXException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"XML parsing error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n         }\n+\n         handler.logOutput(\"########################## IMPORTANT ##########################\", true);\n         handler.logOutput(\"See \" + InstallLog.getInstance().getFileAbsolutePath() + \" for the maven logs\", true);\n         handler.logOutput(\"########################## IMPORTANT ##########################\", true);\n@@ -103,27 +96,28 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n             final File pomFile =\n                     new File(syncopeInstallDir + PROPERTIES.getProperty(\"pomFile\"));\n             String contentPomFile = fileSystemUtils.readFile(pomFile);\n-            fileSystemUtils.writeToFile(pomFile, contentPomFile.replace(ParentPom.PLACEHOLDER, ParentPom.REPOSITORY));\n+            fileSystemUtils.\n+                    writeToFile(pomFile, contentPomFile.replace(ParentPom.PLACEHOLDER, ParentPom.REPOSITORY));\n         }\n \n         fileSystemUtils.createDirectory(confDirectory);\n         fileSystemUtils.createDirectory(logsDirectory);\n         fileSystemUtils.createDirectory(bundlesDirectory);\n         fileSystemUtils.createDirectory(modelerDirectory);\n \n-        fileSystemUtils.copyFileFromResources(\"/\" + PROPERTIES.getProperty(\"modelerPomFile\"),\n-                modelerDirectory + \"/\" + PROPERTIES.getProperty(\"pomFile\"), handler);\n+        fileSystemUtils.copyFileFromResources(File.separator + PROPERTIES.getProperty(\"modelerPomFile\"),\n+                modelerDirectory + File.separator + PROPERTIES.getProperty(\"pomFile\"), handler);\n \n         fileSystemUtils.copyFile(\n                 syncopeInstallDir\n                 + PROPERTIES.getProperty(\"consoleResDirectory\")\n-                + \"/\" + PROPERTIES.getProperty(\"urlConfig\"),\n-                modelerDirectory + \"/\" + PROPERTIES.getProperty(\"urlConfig\"));\n+                + File.separator + PROPERTIES.getProperty(\"urlConfig\"),\n+                modelerDirectory + File.separator + PROPERTIES.getProperty(\"urlConfig\"));\n         fileSystemUtils.copyFile(\n                 syncopeInstallDir\n                 + PROPERTIES.getProperty(\"consoleResDirectory\")\n-                + \"/\" + PROPERTIES.getProperty(\"saveModel\"),\n-                modelerDirectory + \"/\" + PROPERTIES.getProperty(\"saveModel\"));\n+                + File.separator + PROPERTIES.getProperty(\"saveModel\"),\n+                modelerDirectory + File.separator + PROPERTIES.getProperty(\"saveModel\"));\n \n         final Properties modelerProperties = new Properties();\n         modelerProperties.setProperty(\"modeler.directory\", modelerDirectory);\n@@ -134,6 +128,6 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n         syncopeProperties.setProperty(\"log.directory\", logsDirectory);\n         syncopeProperties.setProperty(\"bundles.directory\", bundlesDirectory);\n         mavenUtils.mvnCleanPackageWithProperties(\n-                installPath + \"/\" + artifactId, syncopeProperties, customMavenProxySettings);\n+                installPath + File.separator + artifactId, syncopeProperties, customMavenProxySettings);\n     }\n }"},{"sha":"6c691ccab62fae8ddf74262990bf4ee1cd1eb2d4","filename":"installer/src/main/java/org/apache/syncope/installer/processes/BaseProcess.java","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FBaseProcess.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -18,14 +18,13 @@\n  */\n package org.apache.syncope.installer.processes;\n \n-import static org.apache.syncope.installer.processes.ArchetypeProcess.PROPERTIES;\n-\n+import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.IOException;\n import java.io.InputStream;\n import java.util.Properties;\n import org.apache.commons.io.IOUtils;\n \n-public class BaseProcess {\n+public abstract class BaseProcess {\n \n     protected static final Properties PROPERTIES = new Properties();\n \n@@ -51,7 +50,6 @@ protected void setSyncopeInstallDir(final String installPath, final String artif\n                 append(\"/\").toString();\n     }\n \n-    protected BaseProcess() {\n-        // protected constructor for static utility class\n-    }\n+    public abstract void run(AbstractUIProcessHandler handler, String[] args);\n+\n }"},{"sha":"e7e51481b10db1378040118851fcaf47c81a5eb5","filename":"installer/src/main/java/org/apache/syncope/installer/processes/ContainerProcess.java","status":"modified","additions":48,"deletions":71,"changes":119,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FContainerProcess.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -31,7 +31,7 @@\n import org.apache.syncope.installer.enums.Containers;\n import org.apache.syncope.installer.files.ConsoleProperties;\n import org.apache.syncope.installer.files.GlassfishCoreWebXml;\n-import org.apache.syncope.installer.files.PersistenceContextEMFactoryXml;\n+import org.apache.syncope.installer.files.MasterDomainXml;\n import org.apache.syncope.installer.utilities.InstallLog;\n import org.apache.syncope.installer.utilities.MavenUtils;\n import org.xml.sax.SAXException;\n@@ -104,12 +104,12 @@ public final class ContainerProcess extends BaseProcess {\n \n     private boolean mavenProxyAutoconf;\n \n+    @Override\n     public void run(final AbstractUIProcessHandler handler, final String[] args) {\n-\n         installPath = args[0];\n         mavenDir = args[1];\n         artifactId = args[2];\n-        final Containers selectedContainer = Containers.fromContainerName(args[3]);\n+        Containers selectedContainer = Containers.fromContainerName(args[3]);\n         tomcatSsl = Boolean.valueOf(args[4]);\n         tomcatHost = args[5];\n         tomcatPort = args[6];\n@@ -135,34 +135,26 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n         proxyPort = args[26];\n         proxyUser = args[27];\n         proxyPwd = args[28];\n-        mavenProxyAutoconf = Boolean.valueOf(args[28]);\n-\n-        final FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n+        mavenProxyAutoconf = Boolean.valueOf(args[29]);\n \n         handler.logOutput(\"Configure web.xml file according to \" + selectedContainer + \" properties\", true);\n         InstallLog.getInstance().info(\"Configure web.xml file according to \" + selectedContainer + \" properties\");\n \n+        FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n         setSyncopeInstallDir(installPath, artifactId);\n \n-        if (withDataSource) {\n-            switch (selectedContainer) {\n-                case GLASSFISH:\n-                    final File glassfishCoreWebXmlFile =\n-                            new File(syncopeInstallDir + PROPERTIES.getProperty(\"glassfishCoreWebXmlFile\"));\n-                    final String contentGlassfishWebXmlFile = fileSystemUtils.readFile(glassfishCoreWebXmlFile);\n-                    fileSystemUtils.writeToFile(glassfishCoreWebXmlFile,\n-                            contentGlassfishWebXmlFile.replace(GlassfishCoreWebXml.PLACEHOLDER,\n-                                    GlassfishCoreWebXml.DATA_SOURCE));\n-                    break;\n-\n-                default:\n-            }\n+        if (withDataSource && selectedContainer == Containers.GLASSFISH) {\n+            File glassfishCoreWebXmlFile =\n+                    new File(syncopeInstallDir + PROPERTIES.getProperty(\"glassfishCoreWebXmlFile\"));\n+            String contentGlassfishWebXmlFile = fileSystemUtils.readFile(glassfishCoreWebXmlFile);\n+            fileSystemUtils.writeToFile(glassfishCoreWebXmlFile,\n+                    contentGlassfishWebXmlFile.replace(GlassfishCoreWebXml.PLACEHOLDER,\n+                            GlassfishCoreWebXml.DATA_SOURCE));\n         }\n \n-        final File consolePropertiesFile = new File(syncopeInstallDir\n-                + PROPERTIES.getProperty(\"consoleResDirectory\")\n+        File consolePropertiesFile = new File(syncopeInstallDir + PROPERTIES.getProperty(\"consoleResDirectory\")\n                 + File.separator + PROPERTIES.getProperty(\"consolePropertiesFile\"));\n-        final String contentConsolePropertiesFile = fileSystemUtils.readFile(consolePropertiesFile);\n+        String contentConsolePropertiesFile = fileSystemUtils.readFile(consolePropertiesFile);\n \n         final String scheme;\n         final String host;\n@@ -194,65 +186,56 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n                 contentConsolePropertiesFile.replace(ConsoleProperties.PLACEHOLDER,\n                         String.format(ConsoleProperties.CONSOLE, scheme, host, port)));\n \n-        final MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n+        MavenUtils mavenUtils = new MavenUtils(mavenDir, handler);\n         File customMavenProxySettings = null;\n         try {\n             if (isProxyEnabled && mavenProxyAutoconf) {\n-                customMavenProxySettings = MavenUtils.createSettingsWithProxy(installPath, proxyHost, proxyPort,\n-                        proxyUser, proxyPwd);\n+                customMavenProxySettings = MavenUtils.createSettingsWithProxy(\n+                        installPath, proxyHost, proxyPort, proxyUser, proxyPwd);\n             }\n-        } catch (IOException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n-                    \"I/O error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (ParserConfigurationException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+        } catch (IOException e) {\n+            StringBuilder message = new StringBuilder(\"I/O error during creation of Maven custom settings.xml\");\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (ParserConfigurationException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"Parser configuration error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (TransformerException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (TransformerException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"Transformer error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n-        } catch (SAXException ex) {\n-            final StringBuilder messageError = new StringBuilder(\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n+        } catch (SAXException e) {\n+            StringBuilder message = new StringBuilder(\n                     \"XML parsing error during creation of Maven custom settings.xml\");\n-            final String emittedError = messageError.toString();\n-            handler.emitError(emittedError, emittedError);\n-            InstallLog.getInstance().error(messageError.append(ex.getMessage() == null ? \"\" : ex.getMessage()).\n-                    toString());\n+            handler.emitError(message.toString(), e.getMessage());\n+            InstallLog.getInstance().error(message.append('\\n').append(e.getMessage()).toString());\n         }\n \n-        final Properties mvnProperties = new Properties();\n+        Properties mvnProperties = new Properties();\n         mvnProperties.setProperty(\"conf.directory\", confDirectory);\n         mvnProperties.setProperty(\"log.directory\", logsDirectory);\n         mvnProperties.setProperty(\"bundles.directory\", bundlesDirectory);\n         mavenUtils.mvnCleanPackageWithProperties(\n-                installPath + \"/\" + artifactId, mvnProperties, customMavenProxySettings);\n+                installPath + File.separator + artifactId, mvnProperties, customMavenProxySettings);\n \n         if (isProxyEnabled && mavenProxyAutoconf) {\n             FileSystemUtils.delete(customMavenProxySettings);\n         }\n \n         switch (selectedContainer) {\n             case TOMCAT:\n-                final Tomcat tomcat = new Tomcat(\n+                Tomcat tomcat = new Tomcat(\n                         tomcatSsl, tomcatHost, tomcatPort, installPath, artifactId, tomcatUser, tomcatPassword,\n                         handler);\n                 boolean deployCoreResult = tomcat.deployCore();\n                 if (deployCoreResult) {\n                     handler.logOutput(\"Core successfully deployed \", true);\n                     InstallLog.getInstance().info(\"Core successfully deployed \");\n                 } else {\n-                    final String messageError = \"Deploy core on Tomcat failed\";\n+                    String messageError = \"Deploy core on Tomcat failed\";\n                     handler.emitError(messageError, messageError);\n                     InstallLog.getInstance().error(messageError);\n                 }\n@@ -269,7 +252,7 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n                 break;\n \n             case JBOSS:\n-                final JBoss jBoss = new JBoss(\n+                JBoss jBoss = new JBoss(\n                         jbossSsl, jbossHost, jbossManagementPort, jbossAdminUsername,\n                         jbossAdminPassword, installPath, artifactId, handler);\n \n@@ -295,10 +278,10 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n                 break;\n \n             case GLASSFISH:\n-                final String createJavaOptCommand = \"sh \" + glassfishDir + Glassfish.CREATE_JAVA_OPT_COMMAND;\n+                String createJavaOptCommand = \"sh \" + glassfishDir + Glassfish.CREATE_JAVA_OPT_COMMAND;\n                 fileSystemUtils.exec(createJavaOptCommand, null);\n \n-                final Glassfish glassfish = new Glassfish(installPath, artifactId);\n+                Glassfish glassfish = new Glassfish(installPath, artifactId);\n \n                 fileSystemUtils.exec(\"sh \" + glassfishDir\n                         + Glassfish.DEPLOY_COMMAND + glassfish.deployCore(), null);\n@@ -312,20 +295,14 @@ public void run(final AbstractUIProcessHandler handler, final String[] args) {\n \n     private void persistenceContextEMFactory(\n             final FileSystemUtils fileSystemUtils, final AbstractUIProcessHandler handler) {\n-        fileSystemUtils.copyFileFromResources(\"/jboss/persistenceContextEMFactory.xml\",\n-                syncopeInstallDir\n-                + PROPERTIES.getProperty(\"persistenceContextEMFactoryFile\"), handler);\n-        final File persistenceContextEMFactoryFile = new File(\n-                syncopeInstallDir + PROPERTIES.getProperty(\"persistenceContextEMFactoryFile\"));\n-        final String contentPersistenceContextEMFactory = fileSystemUtils.readFile(persistenceContextEMFactoryFile);\n-        fileSystemUtils.writeToFile(\n-                persistenceContextEMFactoryFile,\n-                contentPersistenceContextEMFactory.replace(PersistenceContextEMFactoryXml.PLACEHOLDER,\n-                        PersistenceContextEMFactoryXml.JBOSS));\n-    }\n \n-    private ContainerProcess() {\n-        super();\n-        // private constructor for static utility class\n+        fileSystemUtils.copyFileFromResources(\"/MasterDomain.xml\",\n+                syncopeInstallDir + PROPERTIES.getProperty(\"masterDomainFile\"), handler);\n+        File masterDomainFile = new File(\n+                syncopeInstallDir + PROPERTIES.getProperty(\"masterDomainFile\"));\n+        String contentPersistenceContextEMFactory = fileSystemUtils.readFile(masterDomainFile);\n+        fileSystemUtils.writeToFile(masterDomainFile,\n+                contentPersistenceContextEMFactory.replace(MasterDomainXml.PLACEHOLDER, MasterDomainXml.JBOSS));\n     }\n+\n }"},{"sha":"8cc528ba669d168ee7925f04353d364290b40cb6","filename":"installer/src/main/java/org/apache/syncope/installer/processes/PersistenceProcess.java","status":"modified","additions":33,"deletions":26,"changes":59,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Fprocesses%2FPersistenceProcess.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -22,7 +22,8 @@\n import com.izforge.izpack.panels.process.AbstractUIProcessHandler;\n import java.io.File;\n import org.apache.syncope.installer.enums.DBs;\n-import org.apache.syncope.installer.files.PersistenceProperties;\n+import org.apache.syncope.installer.files.MasterProperties;\n+import org.apache.syncope.installer.files.ProvisioningProperties;\n import org.apache.syncope.installer.utilities.InstallLog;\n \n public class PersistenceProcess extends BaseProcess {\n@@ -41,63 +42,69 @@ public class PersistenceProcess extends BaseProcess {\n \n     private boolean mysqlInnoDB;\n \n-    private String oracleTableSpace;\n+    private String schema;\n \n+    @Override\n     public void run(final AbstractUIProcessHandler handler, final String[] args) {\n-\n         installPath = args[0];\n         artifactId = args[1];\n         dbSelected = DBs.fromDbName(args[2]);\n         persistenceUrl = args[3];\n         persistenceUser = args[4];\n         persistencePassword = args[5];\n         mysqlInnoDB = Boolean.valueOf(args[6]);\n-        oracleTableSpace = args[7];\n+        schema = args[7];\n \n-        final FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n-        final StringBuilder persistenceProperties = new StringBuilder(PersistenceProperties.HEADER);\n+        FileSystemUtils fileSystemUtils = new FileSystemUtils(handler);\n+        StringBuilder provisioningProperties = new StringBuilder(ProvisioningProperties.HEADER);\n+        StringBuilder masterProperties = new StringBuilder(MasterProperties.HEADER);\n         setSyncopeInstallDir(installPath, artifactId);\n \n-        handler.logOutput(\"Configure persistence file according to \" + dbSelected + \" properties\", true);\n-        InstallLog.getInstance().info(\"Configure persistence file according to \" + dbSelected + \" properties\");\n+        handler.logOutput(\"Configure persistence for \" + dbSelected, false);\n+        InstallLog.getInstance().info(\"Configure persistence for \" + dbSelected);\n \n         switch (dbSelected) {\n             case POSTGRES:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.POSTGRES, persistenceUrl, persistenceUser, persistencePassword));\n+                provisioningProperties.append(ProvisioningProperties.POSTGRES);\n+                masterProperties.append(String.format(\n+                        MasterProperties.POSTGRES, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             case MYSQL:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.MYSQL, persistenceUrl, persistenceUser, persistencePassword));\n-                if (mysqlInnoDB) {\n-                    persistenceProperties.append(PersistenceProperties.MYSQL_QUARTZ_INNO_DB);\n-                } else {\n-                    persistenceProperties.append(PersistenceProperties.MYSQL_QUARTZ);\n-                }\n+                provisioningProperties.append(ProvisioningProperties.MYSQL);\n+                provisioningProperties.append(mysqlInnoDB\n+                        ? ProvisioningProperties.MYSQL_QUARTZ_INNO_DB\n+                        : ProvisioningProperties.MYSQL_QUARTZ);\n+                masterProperties.append(String.format(\n+                        MasterProperties.MYSQL, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             case MARIADB:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.MARIADB, persistenceUrl, persistenceUser, persistencePassword));\n+                provisioningProperties.append(ProvisioningProperties.MARIADB);\n+                masterProperties.append(String.format(\n+                        MasterProperties.MARIADB, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             case ORACLE:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.ORACLE, persistenceUrl, persistenceUser, persistencePassword,\n-                        oracleTableSpace));\n+                provisioningProperties.append(ProvisioningProperties.ORACLE);\n+                masterProperties.append(String.format(\n+                        MasterProperties.ORACLE, schema, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             case SQLSERVER:\n-                persistenceProperties.append(String.format(\n-                        PersistenceProperties.SQLSERVER, persistenceUrl, persistenceUser, persistencePassword));\n+                provisioningProperties.append(ProvisioningProperties.SQLSERVER);\n+                masterProperties.append(String.format(\n+                        MasterProperties.SQLSERVER, schema, persistenceUrl, persistenceUser, persistencePassword));\n                 break;\n \n             default:\n         }\n \n         fileSystemUtils.writeToFile(new File(\n-                syncopeInstallDir + PROPERTIES.getProperty(\"persistencePropertiesFile\")),\n-                persistenceProperties.toString());\n+                syncopeInstallDir + PROPERTIES.getProperty(\"provisioningPropertiesFile\")),\n+                provisioningProperties.toString());\n+        fileSystemUtils.writeToFile(new File(\n+                syncopeInstallDir + PROPERTIES.getProperty(\"masterPropertiesFile\")),\n+                masterProperties.toString());\n     }\n }"},{"sha":"45b43d5330d0d5d27d00294874f5a80037380427","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/FileSystemUtils.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FFileSystemUtils.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -159,6 +159,7 @@ public static void delete(final File file) {\n \n     public void copyFileFromResources(final String filePath,\n             final String destination, final AbstractUIProcessHandler handler) {\n+\n         try {\n             final URL url = getClass().getResource(filePath);\n             final File dest = new File(destination);"},{"sha":"3a8319f7b0113177a3a560af58cd4cffcabe531a","filename":"installer/src/main/java/org/apache/syncope/installer/utilities/MavenUtils.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Finstaller%2Futilities%2FMavenUtils.java?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -103,7 +103,7 @@ public void mvnCleanPackageWithProperties(\n         if (customSettingsFile != null && FileUtils.sizeOf(customSettingsFile) > 0) {\n             request.setUserSettingsFile(customSettingsFile);\n         }\n-        final List<String> mavenGoals = new ArrayList<String>();\n+        final List<String> mavenGoals = new ArrayList<>();\n         mavenGoals.add(\"clean\");\n         mavenGoals.add(\"package\");\n         request.setGoals(mavenGoals);\n@@ -146,11 +146,7 @@ private InvocationResult invoke(final InvocationRequest request, final String pa\n                     new PrintStream(InstallLog.getInstance().getFileAbsolutePath()), true));\n             invoker.setWorkingDirectory(new File(path));\n             result = invoker.execute(request);\n-        } catch (MavenInvocationException ex) {\n-            final String messageError = \"Maven exception: \" + ex.getMessage();\n-            handler.emitError(messageError, messageError);\n-            InstallLog.getInstance().info(messageError);\n-        } catch (FileNotFoundException ex) {\n+        } catch (MavenInvocationException | FileNotFoundException ex) {\n             final String messageError = \"Maven exception: \" + ex.getMessage();\n             handler.emitError(messageError, messageError);\n             InstallLog.getInstance().info(messageError);"},{"sha":"97d07e1c7b3ff092e04a443f0de1f9cfda5fe385","filename":"installer/src/main/resources/installer.properties","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fresources%2Finstaller.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fresources%2Finstaller.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2Finstaller.properties?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -20,9 +20,9 @@ urlConfig=url-config.js\n saveModel=save-model.html\n consoleResDirectory=console/src/main/resources\n pomFile=pom.xml\n-persistenceContextEMFactoryFile=core/src/main/resources/persistenceContextEMFactory.xml\n+masterDomainFile=core/src/main/resources/domains/MasterDomain.xml\n coreMetaInfDirectory=core/src/main/resources/META-INF\n-persistencePropertiesFile=core/src/main/resources/persistence.properties\n+provisioningPropertiesFile=core/src/main/resources/provisioning.properties\n+masterPropertiesFile=core/src/main/resources/domains/Master.properties\n consolePropertiesFile=console.properties\n modelerPomFile=modelerPom.xml\n-"},{"sha":"1f8e2720ae4f16e5b15740b8ca6a366480f4827f","filename":"installer/src/main/resources/izpack/ProcessPanel.Spec.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2FProcessPanel.Spec.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2FProcessPanel.Spec.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2Fizpack%2FProcessPanel.Spec.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -85,8 +85,6 @@ under the License.\n       <arg>$mvn.proxy.user</arg><!-- 27 -->\n       <arg>$mvn.proxy.pwd</arg><!-- 28 -->\n       <arg>$mvn.proxy.autoconf</arg><!-- 29 -->\n-      <arg>$mvn.proxy.autoconf</arg><!-- 30 -->\n-      <arg>$mvn.proxy.autoconf</arg><!-- 31 -->\n     </executeclass>\n   </job>\n   <onFail previous=\"true\" next=\"false\" />"},{"sha":"9209a9d3beb977b501ae2e2859739006be105b7f","filename":"installer/src/main/resources/modelerPom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fresources%2FmodelerPom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/installer%2Fsrc%2Fmain%2Fresources%2FmodelerPom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/installer%2Fsrc%2Fmain%2Fresources%2FmodelerPom.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -27,7 +27,7 @@ under the License.\n   <packaging>jar</packaging>\n    \n   <properties>\n-    <activiti.version>5.17</activiti.version>\n+    <activiti.version>5.18.0</activiti.version>\n     <activiti-modeler.directory>${modeler.directory}</activiti-modeler.directory>\n      \n     <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>"},{"sha":"c2547a9055cdd99ff114a348a360c258561d59cc","filename":"pom.xml","status":"modified","additions":5,"deletions":8,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -332,7 +332,7 @@ under the License.\n \n     <jackson.version>2.6.1</jackson.version>\n \n-    <spring.version>4.2.0.RELEASE</spring.version>\n+    <spring.version>4.2.1.RELEASE</spring.version>\n     <spring-security.version>4.0.2.RELEASE</spring-security.version>\n \n     <openjpa.version>2.4.0</openjpa.version>\n@@ -375,16 +375,18 @@ under the License.\n     <jquery-ui.version>1.11.4</jquery-ui.version>\n     <jquery-cookie.version>1.4.1-1</jquery-cookie.version>\n     <bootstrap.version>3.3.5</bootstrap.version>\n-    <bootstrap-select.version>1.6.3</bootstrap-select.version>\n+\n+    <bootstrap-select.version>1.7.3</bootstrap-select.version>\n     <wicket-bootstrap.version>0.10.3</wicket-bootstrap.version>\n+\n     <font-awesome.version>4.4.0</font-awesome.version>\n     <ionicons.version>2.0.1</ionicons.version>\n     <highlightjs.version>8.7</highlightjs.version>\n     <codemirror.version>5.6</codemirror.version>\n     <jsplumb.version>1.7.5</jsplumb.version>\n     \n     <wicket.version>7.0.0</wicket.version>\n-    <wicket-jqueryui.version>7.0.0</wicket-jqueryui.version>\n+    <wicket-jqueryui.version>7.0.1</wicket-jqueryui.version>\n \n     <izpack.version>5.0.3</izpack.version>\n     <httpclient.version>4.3.6</httpclient.version>\n@@ -474,11 +476,6 @@ under the License.\n         <artifactId>cxf-rt-frontend-jaxrs</artifactId>\n         <version>${cxf.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>org.apache.cxf</groupId>\n-        <artifactId>cxf-rt-rs-extension-providers</artifactId>\n-        <version>${cxf.version}</version>\n-      </dependency>\n       <dependency>\n         <groupId>org.apache.cxf</groupId>\n         <artifactId>cxf-rt-rs-extension-search</artifactId>"},{"sha":"2858fe6e56f869cc31e9d88a53aac11cfc341e7c","filename":"src/site/xdoc/downloads.xml","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/src%2Fsite%2Fxdoc%2Fdownloads.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/src%2Fsite%2Fxdoc%2Fdownloads.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fsite%2Fxdoc%2Fdownloads.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -75,7 +75,7 @@ under the License.\n           <tbody>\n             <tr>\n               <td>\n-                <a href=\"http://www.apache.org/dyn/closer.cgi/syncope/1.2.5/syncope-1.2.5-source-release.zip\">syncope-1.2.5-source-release.zip</a>\n+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/1.2.5/syncope-1.2.5-source-release.zip\">syncope-1.2.5-source-release.zip</a>\n               </td>\n               <td>\n                 <a href=\"http://www.apache.org/dist/syncope/1.2.5/syncope-1.2.5-source-release.zip.asc\">asc</a> \n@@ -85,7 +85,7 @@ under the License.\n             </tr>\n             <tr>\n               <td>\n-                <a href=\"http://www.apache.org/dyn/closer.cgi/syncope/1.2.5/syncope-standalone-1.2.5-distribution.zip\">syncope-standalone-1.2.5-distribution.zip</a>\n+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/1.2.5/syncope-standalone-1.2.5-distribution.zip\">syncope-standalone-1.2.5-distribution.zip</a>\n               </td>\n               <td>\n                 <a href=\"http://www.apache.org/dist/syncope/1.2.5/syncope-standalone-1.2.5-distribution.zip.asc\">asc</a> \n@@ -95,7 +95,7 @@ under the License.\n             </tr>\n             <tr>\n               <td>\n-                <a href=\"http://www.apache.org/dyn/closer.cgi/syncope/1.2.5/syncope-installer-1.2.5-uber.jar\">syncope-installer-1.2.5.jar</a>\n+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/1.2.5/syncope-installer-1.2.5-uber.jar\">syncope-installer-1.2.5.jar</a>\n               </td>\n               <td>\n                 <a href=\"http://www.apache.org/dist/syncope/1.2.5/syncope-installer-1.2.5-uber.jar.asc\">asc</a> \n@@ -105,7 +105,7 @@ under the License.\n             </tr>\n             <tr>\n               <td>\n-                <a href=\"http://www.apache.org/dyn/closer.cgi/syncope/1.2.5/apache-syncope-1.2.5.deb\">apache-syncope-1.2.5.deb</a>\n+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/1.2.5/apache-syncope-1.2.5.deb\">apache-syncope-1.2.5.deb</a>\n               </td>\n               <td>\n                 <a href=\"http://www.apache.org/dist/syncope/1.2.5/apache-syncope-1.2.5.deb.asc\">asc</a> \n@@ -115,7 +115,7 @@ under the License.\n             </tr>\n             <tr>\n               <td>\n-                <a href=\"http://www.apache.org/dyn/closer.cgi/syncope/1.2.5/apache-syncope-console-1.2.5.deb\">apache-syncope-console-1.2.5.deb</a>\n+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/1.2.5/apache-syncope-console-1.2.5.deb\">apache-syncope-console-1.2.5.deb</a>\n               </td>\n               <td>\n                 <a href=\"http://www.apache.org/dist/syncope/1.2.5/apache-syncope-console-1.2.5.deb.asc\">asc</a> \n@@ -141,7 +141,7 @@ under the License.\n           <tbody>\n             <tr>\n               <td>\n-                <a href=\"http://www.apache.org/dyn/closer.cgi/syncope/1.1.8/syncope-1.1.8-source-release.zip\">syncope-1.1.8-source-release.zip</a>\n+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/1.1.8/syncope-1.1.8-source-release.zip\">syncope-1.1.8-source-release.zip</a>\n               </td>\n               <td>\n                 <a href=\"http://www.apache.org/dist/syncope/1.1.8/syncope-1.1.8-source-release.zip.asc\">asc</a> \n@@ -151,7 +151,7 @@ under the License.\n             </tr>\n             <tr>\n               <td>\n-                <a href=\"http://www.apache.org/dyn/closer.cgi/syncope/1.1.8/syncope-standalone-1.1.8-distribution.zip\">syncope-standalone-1.1.8-distribution.zip</a>\n+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/1.1.8/syncope-standalone-1.1.8-distribution.zip\">syncope-standalone-1.1.8-distribution.zip</a>\n               </td>\n               <td>\n                 <a href=\"http://www.apache.org/dist/syncope/1.1.8/syncope-standalone-1.1.8-distribution.zip.asc\">asc</a> \n@@ -177,7 +177,7 @@ under the License.\n           <tbody>\n             <tr>\n               <td>\n-                <a href=\"http://www.apache.org/dyn/closer.cgi/syncope/1.0.9/syncope-root-1.0.9-source-release.zip\">syncope-root-1.0.9-source-release.zip</a>\n+                <a href=\"http://www.apache.org/dyn/closer.lua/syncope/1.0.9/syncope-root-1.0.9-source-release.zip\">syncope-root-1.0.9-source-release.zip</a>\n               </td>\n               <td>\n                 <a href=\"http://www.apache.org/dist/syncope/1.0.9/syncope-root-1.0.9-source-release.zip.asc\">asc</a> "},{"sha":"3617b53a2a1cc43dc6700a5880332d166bdf3f72","filename":"src/site/xdoc/release-process.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/src%2Fsite%2Fxdoc%2Frelease-process.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1dce5383d52ca0eb89d289acc8d6e04b4f5ead82/src%2Fsite%2Fxdoc%2Frelease-process.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fsite%2Fxdoc%2Frelease-process.xml?ref=1dce5383d52ca0eb89d289acc8d6e04b4f5ead82","patch":"@@ -136,7 +136,7 @@ git push]]></source>\n             Update the <source>downloads.xml</source> site page from a GIT local clone:\n             <ul>\n               <li>add new release artifacts with base URL\n-                <source>http://www.apache.org/dyn/closer.cgi/syncope/&lt;version&gt;/</source>\n+                <source>http://www.apache.org/dyn/closer.lua/syncope/&lt;version&gt;/</source>\n               </li>\n               <li>move current release artifacts to 'Older Releases' section and change base URL to \n                 <source>http://archive.apache.org/dist/syncope/</source>"}]}