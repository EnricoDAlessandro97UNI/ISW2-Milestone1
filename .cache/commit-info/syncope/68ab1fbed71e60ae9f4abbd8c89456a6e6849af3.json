{"sha":"68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY4YWIxZmJlZDcxZTYwYWU5ZjRhYmJkOGM4OTQ1NmE2ZTY4NDlhZjM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-31T17:46:57Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-10-31T17:47:06Z"},"message":"[SYNCOPE-152] Exception Mapper","tree":{"sha":"cb348c01df00788f03d40fcbf4fb88c07717eda6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/cb348c01df00788f03d40fcbf4fb88c07717eda6"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"f04ab6c26e99ae0a5fe19915e303fa965fcd6332","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f04ab6c26e99ae0a5fe19915e303fa965fcd6332","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f04ab6c26e99ae0a5fe19915e303fa965fcd6332"}],"stats":{"total":450,"additions":442,"deletions":8},"files":[{"sha":"d211a35fdc961ff74cb449f800d0a14d8b3c6c8d","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/ConflictException.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FConflictException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FConflictException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FConflictException.java?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api;\n+\n+import javax.ws.rs.ClientErrorException;\n+import javax.ws.rs.core.Response;\n+\n+public class ConflictException extends ClientErrorException {\n+\n+    private static final long serialVersionUID = -6845464464868163175L;\n+\n+    public ConflictException() {\n+        super(Response.Status.CONFLICT);\n+    }\n+\n+    public ConflictException(final String message) {\n+        super(message, Response.Status.CONFLICT);\n+    }\n+\n+}"},{"sha":"e6ab1952859932b51c49430df4c14318509aa080","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/PayloadTooLargeException.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FPayloadTooLargeException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FPayloadTooLargeException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FPayloadTooLargeException.java?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api;\n+\n+import javax.ws.rs.ClientErrorException;\n+import javax.ws.rs.core.Response;\n+\n+public class PayloadTooLargeException extends ClientErrorException {\n+\n+    private static final long serialVersionUID = -3980136349506530672L;\n+\n+    public PayloadTooLargeException() {\n+        super(Response.Status.REQUEST_ENTITY_TOO_LARGE);\n+    }\n+\n+    public PayloadTooLargeException(final String message) {\n+        super(message, Response.Status.REQUEST_ENTITY_TOO_LARGE);\n+    }\n+\n+}"},{"sha":"4b3679826c4a8da14253f2bce179b640c7673b58","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/SCIMBadRequestException.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FSCIMBadRequestException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FSCIMBadRequestException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2FSCIMBadRequestException.java?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -0,0 +1,44 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api;\n+\n+import javax.ws.rs.BadRequestException;\n+import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n+\n+public class SCIMBadRequestException extends BadRequestException {\n+\n+    private static final long serialVersionUID = -2588839750716910491L;\n+\n+    private final ErrorType errorType;\n+\n+    public SCIMBadRequestException(final ErrorType errorType) {\n+        super();\n+        this.errorType = errorType;\n+    }\n+\n+    public SCIMBadRequestException(final ErrorType errorType, final String detail) {\n+        super(detail);\n+        this.errorType = errorType;\n+    }\n+\n+    public ErrorType getErrorType() {\n+        return errorType;\n+    }\n+\n+}"},{"sha":"d7112d1b9a1bd9c101939dfd797c199ecc64bdaa","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/data/SCIMError.java","status":"added","additions":68,"deletions":0,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Fdata%2FSCIMError.java?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -0,0 +1,68 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.data;\n+\n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonFormat;\n+import com.fasterxml.jackson.annotation.JsonFormat.Shape;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import java.util.Arrays;\n+import java.util.List;\n+import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n+import org.apache.syncope.ext.scimv2.api.type.Resource;\n+\n+public class SCIMError extends SCIMBean {\n+\n+    private static final long serialVersionUID = -8836902509266522394L;\n+\n+    private final List<String> schemas = Arrays.asList(Resource.Error.schema());\n+\n+    private final ErrorType scimType;\n+\n+    private final String detail;\n+\n+    @JsonFormat(shape = Shape.STRING)\n+    private final int status = 400;\n+\n+    @JsonCreator(mode = JsonCreator.Mode.PROPERTIES)\n+    public SCIMError(\n+            @JsonProperty(\"scimType\") final ErrorType scimType,\n+            @JsonProperty(\"detail\") final String detail) {\n+\n+        this.scimType = scimType;\n+        this.detail = detail;\n+    }\n+\n+    public List<String> getSchemas() {\n+        return schemas;\n+    }\n+\n+    public ErrorType getScimType() {\n+        return scimType;\n+    }\n+\n+    public String getDetail() {\n+        return detail;\n+    }\n+\n+    public int getStatus() {\n+        return status;\n+    }\n+\n+}"},{"sha":"bbd7489ee1a0854145c8d3de590c04c8aa53a728","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/ErrorType.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FErrorType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FErrorType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FErrorType.java?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.api.type;\n+\n+public enum ErrorType {\n+    invalidFilter,\n+    tooMany,\n+    uniqueness,\n+    mutability,\n+    invalidSyntax,\n+    invalidPath,\n+    noTarget,\n+    invalidValue,\n+    invalidVers,\n+    sensitive;\n+\n+}"},{"sha":"8fb2bdeed1f264728ddda45bcf1412efd97c8241","filename":"ext/scimv2/scim-rest-api/src/main/java/org/apache/syncope/ext/scimv2/api/type/Resource.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fapi%2Ftype%2FResource.java?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -26,7 +26,8 @@ public enum Resource {\n     User(\"urn:ietf:params:scim:schemas:core:2.0:User\"),\n     EnterpriseUser(\"urn:ietf:params:scim:schemas:extension:enterprise:2.0:User\"),\n     Group(\"urn:ietf:params:scim:schemas:core:2.0:Group\"),\n-    ListResponse(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\");\n+    ListResponse(\"urn:ietf:params:scim:api:messages:2.0:ListResponse\"),\n+    Error(\"urn:ietf:params:scim:api:messages:2.0:Error\");\n \n     private final String schema;\n "},{"sha":"e525e77df5fce6ac0af1d94a2c813c3066617168","filename":"ext/scimv2/scim-rest-cxf/src/main/java/org/apache/syncope/ext/scimv2/cxf/SCIMExceptionMapper.java","status":"added","additions":210,"deletions":0,"changes":210,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fscimv2%2Fcxf%2FSCIMExceptionMapper.java?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -0,0 +1,210 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.ext.scimv2.cxf;\n+\n+import java.util.Map;\n+import java.util.Set;\n+import javax.validation.ValidationException;\n+import javax.ws.rs.ForbiddenException;\n+import javax.ws.rs.NotAuthorizedException;\n+import javax.ws.rs.NotFoundException;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.core.Response.ResponseBuilder;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+import org.apache.commons.lang3.exception.ExceptionUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.lib.types.EntityViolationType;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.attrvalue.validation.ParsingValidationException;\n+import org.apache.syncope.core.persistence.api.dao.DuplicateException;\n+import org.apache.syncope.core.persistence.api.dao.MalformedPathException;\n+import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n+import org.apache.syncope.core.workflow.api.WorkflowException;\n+import org.apache.syncope.ext.scimv2.api.ConflictException;\n+import org.apache.syncope.ext.scimv2.api.PayloadTooLargeException;\n+import org.apache.syncope.ext.scimv2.api.data.SCIMError;\n+import org.apache.syncope.ext.scimv2.api.type.ErrorType;\n+import org.identityconnectors.framework.common.exceptions.ConfigurationException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.dao.DataIntegrityViolationException;\n+import org.springframework.security.access.AccessDeniedException;\n+import org.springframework.transaction.TransactionSystemException;\n+\n+@Provider\n+public class SCIMExceptionMapper implements ExceptionMapper<Exception> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(SCIMExceptionMapper.class);\n+\n+    private static Class<?> ENTITYEXISTS_EXCLASS = null;\n+\n+    private static Class<?> PERSISTENCE_EXCLASS = null;\n+\n+    private static Class<?> ROLLBACK_EXCLASS = null;\n+\n+    private static Class<?> JPASYSTEM_EXCLASS = null;\n+\n+    private static Class<?> CONNECTOR_EXCLASS = null;\n+\n+    private static Class<?> IBATISPERSISTENCE_EXCLASS = null;\n+\n+    static {\n+        try {\n+            ENTITYEXISTS_EXCLASS = Class.forName(\"javax.persistence.EntityExistsException\");\n+            PERSISTENCE_EXCLASS = Class.forName(\"javax.persistence.PersistenceException\");\n+            ROLLBACK_EXCLASS = Class.forName(\"javax.persistence.RollbackException\");\n+            JPASYSTEM_EXCLASS = Class.forName(\"org.springframework.orm.jpa.JpaSystemException\");\n+            CONNECTOR_EXCLASS = Class.forName(\"org.identityconnectors.framework.common.exceptions.ConnectorException\");\n+            IBATISPERSISTENCE_EXCLASS = Class.forName(\"org.apache.ibatis.exceptions.PersistenceException\");\n+        } catch (ClassNotFoundException e) {\n+            // ignore\n+        }\n+    }\n+\n+    @Override\n+    public Response toResponse(final Exception ex) {\n+        LOG.error(\"Exception thrown\", ex);\n+\n+        ResponseBuilder builder;\n+\n+        if (ex instanceof AccessDeniedException\n+                || ex instanceof ForbiddenException\n+                || ex instanceof NotAuthorizedException\n+                || ex instanceof NotFoundException\n+                || ex instanceof ConflictException\n+                || ex instanceof PayloadTooLargeException) {\n+\n+            // leaves the default exception processing\n+            builder = null;\n+        } else if (ex instanceof SyncopeClientException) {\n+            SyncopeClientException sce = (SyncopeClientException) ex;\n+            builder = builder(sce.getType(), ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ex instanceof DelegatedAdministrationException\n+                || ExceptionUtils.getRootCause(ex) instanceof DelegatedAdministrationException) {\n+\n+            builder = builder(ClientExceptionType.DelegatedAdministration, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ENTITYEXISTS_EXCLASS.isAssignableFrom(ex.getClass())\n+                || ex instanceof DuplicateException\n+                || PERSISTENCE_EXCLASS.isAssignableFrom(ex.getClass())\n+                && ENTITYEXISTS_EXCLASS.isAssignableFrom(ex.getCause().getClass())) {\n+\n+            builder = builder(ClientExceptionType.EntityExists, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ex instanceof DataIntegrityViolationException\n+                || JPASYSTEM_EXCLASS.isAssignableFrom(ex.getClass())) {\n+\n+            builder = builder(ClientExceptionType.DataIntegrityViolation, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (CONNECTOR_EXCLASS.isAssignableFrom(ex.getClass())) {\n+            builder = builder(ClientExceptionType.ConnectorException, ExceptionUtils.getRootCauseMessage(ex));\n+        } else {\n+            builder = processInvalidEntityExceptions(ex);\n+            if (builder == null) {\n+                builder = processBadRequestExceptions(ex);\n+            }\n+            // process JAX-RS validation errors\n+            if (builder == null && ex instanceof ValidationException) {\n+                builder = builder(ClientExceptionType.RESTValidation, ExceptionUtils.getRootCauseMessage(ex));\n+            }\n+            // ...or just report as InternalServerError\n+            if (builder == null) {\n+                builder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\n+            }\n+        }\n+\n+        return builder == null ? null : builder.build();\n+    }\n+\n+    private ResponseBuilder processInvalidEntityExceptions(final Exception ex) {\n+        InvalidEntityException iee = null;\n+\n+        if (ex instanceof InvalidEntityException) {\n+            iee = (InvalidEntityException) ex;\n+        }\n+        if (ex instanceof TransactionSystemException && ROLLBACK_EXCLASS.isAssignableFrom(ex.getCause().getClass())\n+                && ex.getCause().getCause() instanceof InvalidEntityException) {\n+\n+            iee = (InvalidEntityException) ex.getCause().getCause();\n+        }\n+\n+        if (iee != null) {\n+            ClientExceptionType exType;\n+            if (iee.getEntityClassSimpleName().endsWith(\"Policy\")) {\n+                exType = ClientExceptionType.InvalidPolicy;\n+            } else if (iee.getEntityClassSimpleName().equals(PlainAttr.class.getSimpleName())) {\n+                exType = ClientExceptionType.InvalidValues;\n+            } else {\n+                try {\n+                    exType = ClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\n+                } catch (IllegalArgumentException e) {\n+                    // ignore\n+                    exType = ClientExceptionType.InvalidEntity;\n+                }\n+            }\n+\n+            StringBuilder msg = new StringBuilder();\n+\n+            for (Map.Entry<Class<?>, Set<EntityViolationType>> violation : iee.getViolations().entrySet()) {\n+                for (EntityViolationType violationType : violation.getValue()) {\n+                    msg.append(violationType.name()).append(\": \").append(violationType.getMessage()).append('\\n');\n+                }\n+            }\n+\n+            return builder(exType, msg.toString());\n+        }\n+\n+        return null;\n+    }\n+\n+    private ResponseBuilder processBadRequestExceptions(final Exception ex) {\n+        if (ex instanceof WorkflowException) {\n+            return builder(ClientExceptionType.Workflow, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (PERSISTENCE_EXCLASS.isAssignableFrom(ex.getClass())) {\n+            return builder(ClientExceptionType.GenericPersistence, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (IBATISPERSISTENCE_EXCLASS != null && IBATISPERSISTENCE_EXCLASS.isAssignableFrom(ex.getClass())) {\n+            return builder(ClientExceptionType.Workflow, \"Currently unavailable. Please try later.\");\n+        } else if (JPASYSTEM_EXCLASS.isAssignableFrom(ex.getClass())) {\n+            return builder(ClientExceptionType.DataIntegrityViolation, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ex instanceof ConfigurationException) {\n+            return builder(ClientExceptionType.InvalidConnIdConf, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ex instanceof ParsingValidationException) {\n+            return builder(ClientExceptionType.InvalidValues, ExceptionUtils.getRootCauseMessage(ex));\n+        } else if (ex instanceof MalformedPathException) {\n+            return builder(ClientExceptionType.InvalidPath, ExceptionUtils.getRootCauseMessage(ex));\n+        }\n+\n+        return null;\n+    }\n+\n+    private ResponseBuilder builder(final ClientExceptionType hType, final String msg) {\n+        ResponseBuilder builder = Response.status(hType.getResponseStatus());\n+\n+        if (hType.getResponseStatus() == Response.Status.BAD_REQUEST) {\n+            ErrorType scimType = null;\n+            if (hType.name().startsWith(\"Invalid\") || hType == ClientExceptionType.RESTValidation) {\n+                scimType = ErrorType.invalidValue;\n+            }\n+\n+            builder = builder.entity(new SCIMError(scimType, msg));\n+        }\n+\n+        return builder;\n+    }\n+}"},{"sha":"cb306bf6c76275ab731d61d5f75cbed09c66e7d7","filename":"ext/scimv2/scim-rest-cxf/src/main/resources/restSCIMv2CXFContext.xml","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fresources%2FrestSCIMv2CXFContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fresources%2FrestSCIMv2CXFContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Fscim-rest-cxf%2Fsrc%2Fmain%2Fresources%2FrestSCIMv2CXFContext.xml?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -35,6 +35,8 @@ under the License.\n   \n   <bean id=\"jsonProvider\" class=\"org.apache.syncope.ext.scimv2.cxf.JacksonSCIMJsonProvider\"/>\n \n+  <bean id=\"exceptionMapper\" class=\"org.apache.syncope.ext.scimv2.cxf.SCIMExceptionMapper\"/>\n+\n   <bean id=\"validationProvider\" class=\"org.apache.cxf.validation.BeanValidationProvider\"/>\n   <bean id=\"validationInInterceptor\" class=\"org.apache.cxf.jaxrs.validation.JAXRSBeanValidationInInterceptor\">\n     <property name=\"provider\" ref=\"validationProvider\"/>\n@@ -78,6 +80,7 @@ under the License.\n     </jaxrs:outInterceptors>\n     <jaxrs:providers>\n       <ref bean=\"jsonProvider\"/>\n+      <ref bean=\"exceptionMapper\"/>\n       <ref bean=\"addETagFilter\"/>\n       <ref bean=\"wadlGenerator\"/>\n     </jaxrs:providers>"},{"sha":"ecc75ba3441c2b4361f8d786e8a008b6c56ee7b6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SCIMITCase.java","status":"modified","additions":10,"deletions":7,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/68ab1fbed71e60ae9f4abbd8c89456a6e6849af3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSCIMITCase.java?ref=68ab1fbed71e60ae9f4abbd8c89456a6e6849af3","patch":"@@ -61,7 +61,7 @@ public void serviceProviderConfig() {\n         assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n \n         Response response = webClient().path(\"ServiceProviderConfig\").get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,\n                 StringUtils.substringBefore(response.getHeaderString(HttpHeaders.CONTENT_TYPE), \";\"));\n@@ -76,7 +76,7 @@ public void resourceTypes() {\n         assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n \n         Response response = webClient().path(\"ResourceTypes\").get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,\n                 StringUtils.substringBefore(response.getHeaderString(HttpHeaders.CONTENT_TYPE), \";\"));\n@@ -87,7 +87,7 @@ public void resourceTypes() {\n         assertEquals(2, resourceTypes.size());\n \n         response = webClient().path(\"ResourceTypes\").path(\"User\").get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n         ResourceType user = response.readEntity(ResourceType.class);\n         assertNotNull(user);\n@@ -100,7 +100,7 @@ public void schemas() {\n         assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n \n         Response response = webClient().path(\"Schemas\").get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,\n                 StringUtils.substringBefore(response.getHeaderString(HttpHeaders.CONTENT_TYPE), \";\"));\n@@ -109,8 +109,11 @@ public void schemas() {\n         assertNotNull(schemas);\n         assertEquals(3, schemas.size());\n \n+        response = webClient().path(\"Schemas\").path(\"none\").get();\n+        assertEquals(Response.Status.NOT_FOUND.getStatusCode(), response.getStatus());\n+\n         response = webClient().path(\"Schemas\").path(Resource.EnterpriseUser.schema()).get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n \n         ObjectNode enterpriseUser = response.readEntity(ObjectNode.class);\n         assertNotNull(enterpriseUser);\n@@ -122,7 +125,7 @@ public void read() throws IOException {\n         assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n \n         Response response = webClient().path(\"Users\").path(\"1417acbe-cbf6-4277-9372-e75e04f97000\").get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,\n                 StringUtils.substringBefore(response.getHeaderString(HttpHeaders.CONTENT_TYPE), \";\"));\n@@ -140,7 +143,7 @@ public void list() throws IOException {\n         assumeTrue(SCIMDetector.isSCIMAvailable(webClient()));\n \n         Response response = webClient().path(\"Groups\").get();\n-        assertEquals(200, response.getStatus());\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n         assertEquals(\n                 SCIMConstants.APPLICATION_SCIM_JSON,\n                 StringUtils.substringBefore(response.getHeaderString(HttpHeaders.CONTENT_TYPE), \";\"));"}]}