{"sha":"22839bf376aa74544b5a18fee227d26f3e3a4f67","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjIyODM5YmYzNzZhYTc0NTQ0YjVhMThmZWUyMjdkMjZmM2UzYTRmNjc=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-08T15:02:50Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-05-08T15:02:50Z"},"message":"[SYNCOPE-140] Implemented","tree":{"sha":"4c6f80585c4cb67a89fd1d37a404861bfadc88dd","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4c6f80585c4cb67a89fd1d37a404861bfadc88dd"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/22839bf376aa74544b5a18fee227d26f3e3a4f67","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22839bf376aa74544b5a18fee227d26f3e3a4f67","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/22839bf376aa74544b5a18fee227d26f3e3a4f67","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/22839bf376aa74544b5a18fee227d26f3e3a4f67/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"84028f11520152cbb2da560c9c241d95d6391019","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/84028f11520152cbb2da560c9c241d95d6391019","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/84028f11520152cbb2da560c9c241d95d6391019"}],"stats":{"total":2090,"additions":1684,"deletions":406},"files":[{"sha":"6c250effd219c7818015cc87169501b3c904d6c0","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AttributableOperations.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAttributableOperations.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -405,6 +405,9 @@ public static GroupMod diff(final GroupTO updated, final GroupTO original, final\n         result.setUserOwner(new ReferenceMod(updated.getUserOwner()));\n         result.setGroupOwner(new ReferenceMod(updated.getGroupOwner()));\n \n+        // 4. dynMembershipCond\n+        result.setDynMembershipCond(updated.getDynMembershipCond());\n+\n         return result;\n     }\n "},{"sha":"5620fa1285fa04bbbb20a5965f7aa21f58fa64dc","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/mod/GroupMod.java","status":"modified","additions":7,"deletions":90,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fmod%2FGroupMod.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -39,20 +39,6 @@ public class GroupMod extends AbstractSubjectMod {\n \n     private ReferenceMod groupOwner;\n \n-    private Boolean inheritOwner;\n-\n-    private Boolean inheritTemplates;\n-\n-    private Boolean inheritPlainAttrs;\n-\n-    private Boolean inheritDerAttrs;\n-\n-    private Boolean inheritVirAttrs;\n-\n-    private Boolean inheritAccountPolicy;\n-\n-    private Boolean inheritPasswordPolicy;\n-\n     private boolean modGAttrTemplates;\n \n     private final List<String> gPlainAttrTemplates = new ArrayList<>();\n@@ -77,9 +63,7 @@ public class GroupMod extends AbstractSubjectMod {\n \n     private final List<String> mVirAttrTemplates = new ArrayList<>();\n \n-    private ReferenceMod passwordPolicy;\n-\n-    private ReferenceMod accountPolicy;\n+    private String dynMembershipCond;\n \n     public String getName() {\n         return name;\n@@ -105,46 +89,6 @@ public void setGroupOwner(final ReferenceMod groupOwner) {\n         this.groupOwner = groupOwner;\n     }\n \n-    public Boolean getInheritOwner() {\n-        return inheritOwner;\n-    }\n-\n-    public void setInheritOwner(final Boolean inheritOwner) {\n-        this.inheritOwner = inheritOwner;\n-    }\n-\n-    public Boolean getInheritTemplates() {\n-        return inheritTemplates;\n-    }\n-\n-    public void setInheritTemplates(final Boolean inheritTemplates) {\n-        this.inheritTemplates = inheritTemplates;\n-    }\n-\n-    public Boolean getInheritPlainAttrs() {\n-        return inheritPlainAttrs;\n-    }\n-\n-    public void setInheritPlainAttrs(final Boolean inheritAttrs) {\n-        this.inheritPlainAttrs = inheritAttrs;\n-    }\n-\n-    public Boolean getInheritDerAttrs() {\n-        return inheritDerAttrs;\n-    }\n-\n-    public void setInheritDerAttrs(final Boolean inheritDerAttrs) {\n-        this.inheritDerAttrs = inheritDerAttrs;\n-    }\n-\n-    public Boolean getInheritVirAttrs() {\n-        return inheritVirAttrs;\n-    }\n-\n-    public void setInheritVirAttrs(final Boolean inheritVirAttrs) {\n-        this.inheritVirAttrs = inheritVirAttrs;\n-    }\n-\n     public boolean isModGAttrTemplates() {\n         return modGAttrTemplates;\n     }\n@@ -235,47 +179,20 @@ public List<String> getMVirAttrTemplates() {\n         return mVirAttrTemplates;\n     }\n \n-    public ReferenceMod getPasswordPolicy() {\n-        return passwordPolicy;\n-    }\n-\n-    public void setPasswordPolicy(final ReferenceMod passwordPolicy) {\n-        this.passwordPolicy = passwordPolicy;\n-    }\n-\n-    public Boolean getInheritPasswordPolicy() {\n-        return inheritPasswordPolicy;\n-    }\n-\n-    public void setInheritPasswordPolicy(final Boolean inheritPasswordPolicy) {\n-        this.inheritPasswordPolicy = inheritPasswordPolicy;\n-    }\n-\n-    public ReferenceMod getAccountPolicy() {\n-        return accountPolicy;\n-    }\n-\n-    public void setAccountPolicy(final ReferenceMod accountPolicy) {\n-        this.accountPolicy = accountPolicy;\n-    }\n-\n-    public Boolean getInheritAccountPolicy() {\n-        return inheritAccountPolicy;\n+    public String getDynMembershipCond() {\n+        return dynMembershipCond;\n     }\n \n-    public void setInheritAccountPolicy(final Boolean inheritAccountPolicy) {\n-        this.inheritAccountPolicy = inheritAccountPolicy;\n+    public void setDynMembershipCond(final String dynMembershipCond) {\n+        this.dynMembershipCond = dynMembershipCond;\n     }\n \n     @JsonIgnore\n     @Override\n     public boolean isEmpty() {\n         return super.isEmpty() && name == null && userOwner == null && groupOwner == null\n-                && inheritTemplates == null && inheritOwner == null\n-                && inheritAccountPolicy == null && inheritPasswordPolicy == null\n-                && inheritPlainAttrs == null && inheritDerAttrs == null && inheritVirAttrs == null\n-                && accountPolicy == null && passwordPolicy == null\n                 && gPlainAttrTemplates.isEmpty() && gDerAttrTemplates.isEmpty() && gVirAttrTemplates.isEmpty()\n-                && mPlainAttrTemplates.isEmpty() && mDerAttrTemplates.isEmpty() && mVirAttrTemplates.isEmpty();\n+                && mPlainAttrTemplates.isEmpty() && mDerAttrTemplates.isEmpty() && mVirAttrTemplates.isEmpty()\n+                && dynMembershipCond == null;\n     }\n }"},{"sha":"aaa56d7fdbfb5bc257415c2f9d240e078e20385c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/GroupFiqlSearchConditionBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FGroupFiqlSearchConditionBuilder.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -22,7 +22,7 @@\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n \n /**\n- * Extends <tt>SyncopeFiqlSearchConditionBuilder</tt> by providing some additional facilities for searching\n+ * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n  * groups in Syncope.\n  */\n public class GroupFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {"},{"sha":"9877267d456f77668c4d262fbeb5b44aa7ef5c73","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/SpecialAttr.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FSpecialAttr.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -26,7 +26,8 @@ public enum SpecialAttr {\n \n     NULL(\"$null\"),\n     RESOURCES(\"$resources\"),\n-    GROUPS(\"$groups\");\n+    GROUPS(\"$groups\"),\n+    ROLES(\"$roles\");\n \n     private final String literal;\n "},{"sha":"802694e75eb1c0d78ccc5b20ea840acafd017a7e","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserFiqlSearchConditionBuilder.java","status":"modified","additions":22,"deletions":4,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserFiqlSearchConditionBuilder.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -23,7 +23,7 @@\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n \n /**\n- * Extends <tt>SyncopeFiqlSearchConditionBuilder</tt> by providing some additional facilities for searching\n+ * Extends {@link AbstractFiqlSearchConditionBuilder} by providing some additional facilities for searching\n  * users in Syncope.\n  */\n public class UserFiqlSearchConditionBuilder extends AbstractFiqlSearchConditionBuilder {\n@@ -50,14 +50,20 @@ public CompleteCondition inGroups(final Long group, final Long... moreGroups) {\n         return newBuilderInstance().is(SpecialAttr.GROUPS.toString()).inGroups(group, moreGroups);\n     }\n \n+    public CompleteCondition inRoles(final Long role, final Long... moreRoles) {\n+        return newBuilderInstance().is(SpecialAttr.ROLES.toString()).inRoles(role, moreRoles);\n+    }\n+\n     public CompleteCondition notInGroups(final Long group, final Long... moreGroups) {\n         return newBuilderInstance().is(SpecialAttr.GROUPS.toString()).notInGroups(group, moreGroups);\n     }\n \n+    @Override\n     public CompleteCondition hasResources(final String resource, final String... moreResources) {\n         return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasResources(resource, moreResources);\n     }\n \n+    @Override\n     public CompleteCondition hasNotResources(final String resource, final String... moreResources) {\n         return newBuilderInstance().is(SpecialAttr.RESOURCES.toString()).hasNotResources(resource, moreResources);\n     }\n@@ -75,9 +81,9 @@ public Builder(final Builder parent) {\n \n         @Override\n         public UserProperty is(final String property) {\n-            Builder b = new Builder(this);\n-            b.result = property;\n-            return b;\n+            Builder builder = new Builder(this);\n+            builder.result = property;\n+            return builder;\n         }\n \n         @Override\n@@ -91,5 +97,17 @@ public CompleteCondition notInGroups(final Long group, final Long... moreGroups)\n             this.result = SpecialAttr.GROUPS.toString();\n             return condition(FiqlParser.NEQ, group, (Object[]) moreGroups);\n         }\n+\n+        @Override\n+        public CompleteCondition inRoles(final Long role, final Long... moreRoles) {\n+            this.result = SpecialAttr.ROLES.toString();\n+            return condition(FiqlParser.EQ, role, (Object[]) moreRoles);\n+        }\n+\n+        @Override\n+        public CompleteCondition notInRoles(final Long role, final Long... moreRoles) {\n+            this.result = SpecialAttr.ROLES.toString();\n+            return condition(FiqlParser.NEQ, role, (Object[]) moreRoles);\n+        }\n     }\n }"},{"sha":"5a659b7d997f90fbe3777d4b34c1464a41b48aed","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/search/UserProperty.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fsearch%2FUserProperty.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -26,4 +26,8 @@ public interface UserProperty extends SyncopeProperty {\n \n     CompleteCondition notInGroups(Long group, Long... moreGroups);\n \n+    CompleteCondition inRoles(Long role, Long... moreRoles);\n+\n+    CompleteCondition notInRoles(Long role, Long... moreRoles);\n+\n }"},{"sha":"da0bd2b24693519e564a767598d1e839f63a6813","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/GroupTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FGroupTO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -53,6 +53,8 @@ public class GroupTO extends AbstractSubjectTO {\n \n     private final List<String> mVirAttrTemplates = new ArrayList<>();\n \n+    private String dynMembershipCond;\n+\n     public String getName() {\n         return name;\n     }\n@@ -119,4 +121,12 @@ public List<String> getMVirAttrTemplates() {\n         return mVirAttrTemplates;\n     }\n \n+    public String getDynMembershipCond() {\n+        return dynMembershipCond;\n+    }\n+\n+    public void setDynMembershipCond(final String dynMembershipCond) {\n+        this.dynMembershipCond = dynMembershipCond;\n+    }\n+\n }"},{"sha":"1a12fdb6227cf8978923a4a2d8db4c049f6470dd","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/RoleTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRoleTO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -43,6 +43,8 @@ public class RoleTO extends AbstractBaseBean {\n \n     private final List<String> realms = new ArrayList<>();\n \n+    private String dynMembershipCond;\n+\n     public long getKey() {\n         return key;\n     }\n@@ -73,4 +75,12 @@ public List<String> getRealms() {\n         return realms;\n     }\n \n+    public String getDynMembershipCond() {\n+        return dynMembershipCond;\n+    }\n+\n+    public void setDynMembershipCond(final String dynMembershipCond) {\n+        this.dynMembershipCond = dynMembershipCond;\n+    }\n+\n }"},{"sha":"2feeffe32087bcad3b0781e34721205fa7d0dd1c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/UserTO.java","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FUserTO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -44,8 +44,12 @@ public class UserTO extends AbstractSubjectTO {\n \n     private final List<Long> roles = new ArrayList<>();\n \n+    private final List<Long> dynRoles = new ArrayList<>();\n+\n     private final List<MembershipTO> memberships = new ArrayList<>();\n \n+    private final List<Long> dynGroups = new ArrayList<>();\n+\n     private String status;\n \n     private String token;\n@@ -79,6 +83,13 @@ public List<Long> getRoles() {\n         return roles;\n     }\n \n+    @XmlElementWrapper(name = \"dynRoles\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"dynRoles\")\n+    public List<Long> getDynRoles() {\n+        return dynRoles;\n+    }\n+\n     @XmlElementWrapper(name = \"memberships\")\n     @XmlElement(name = \"membership\")\n     @JsonProperty(\"memberships\")\n@@ -103,6 +114,13 @@ public Map<Long, MembershipTO> getMembershipMap() {\n         return result;\n     }\n \n+    @XmlElementWrapper(name = \"dynGroups\")\n+    @XmlElement(name = \"role\")\n+    @JsonProperty(\"dynGroups\")\n+    public List<Long> getDynGroups() {\n+        return dynGroups;\n+    }\n+\n     public String getStatus() {\n         return status;\n     }"},{"sha":"014f52d88196e9263de6f34aa8fb3d3a2015b192","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/PropagationByResource.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FPropagationByResource.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -269,7 +269,7 @@ public final Set<String> get(final ResourceOperation type) {\n      * @param type resource operation type\n      * @param resourceNames to be set\n      */\n-    public final void set(final ResourceOperation type, final Set<String> resourceNames) {\n+    public final void set(final ResourceOperation type, final Collection<String> resourceNames) {\n \n         switch (type) {\n             case CREATE:"},{"sha":"a3a3ab8d41ea168082f8e8ae059ab4e73f14e399","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -103,7 +103,7 @@ public GroupTO read(final Long groupKey) {\n     @Transactional(readOnly = true)\n     public List<GroupTO> own() {\n         return CollectionUtils.collect(\n-                userDAO.find(AuthContextUtils.getAuthenticatedUsername()).getGroups(),\n+                userDAO.findAllGroups(userDAO.find(AuthContextUtils.getAuthenticatedUsername())),\n                 new Transformer<Group, GroupTO>() {\n \n                     @Override"},{"sha":"d03530105d00e7c1e5f2fb89d78a833afb4ddef1","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/LoggerLogic.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FLoggerLogic.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n-\n import java.lang.reflect.Method;\n import java.lang.reflect.Modifier;\n import java.util.ArrayList;"},{"sha":"72e03e5da93d93cfd2e84dedec05a2a222a65902","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/SyncopeLogic.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSyncopeLogic.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.logic;\n \n-import static org.apache.syncope.core.logic.AbstractLogic.LOG;\n-\n import java.io.IOException;\n import java.lang.reflect.Method;\n import java.net.URI;"},{"sha":"fc81696c453672d75264d62c2a1dd30b35739f9a","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -361,9 +361,9 @@ public UserTO unlink(final Long key, final Collection<String> resources) {\n         final UserMod userMod = new UserMod();\n         userMod.setKey(key);\n         userMod.getResourcesToRemove().addAll(resources);\n-        Long updatedId = provisioningManager.unlink(userMod);\n+        Long updatedKey = provisioningManager.unlink(userMod);\n \n-        return binder.getUserTO(updatedId);\n+        return binder.getUserTO(updatedKey);\n     }\n \n     @PreAuthorize(\"hasRole('\" + Entitlement.USER_UPDATE + \"')\")"},{"sha":"719a680b9ee9f527b2391f04fdbb60286734cb28","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/ConnObjectUtils.java","status":"modified","additions":22,"deletions":31,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FConnObjectUtils.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -29,6 +29,8 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.AttributableOperations;\n import org.apache.syncope.common.lib.mod.AbstractAttributableMod;\n@@ -554,16 +556,16 @@ private void retrieveVirAttrValue(\n             // not cached ...\n             LOG.debug(\"Need one or more remote connections\");\n \n-            final VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n+            VirAttrCacheValue toBeCached = new VirAttrCacheValue();\n \n             // SYNCOPE-458 if virattr owner is a Membership, owner must become user involved in membership because \n             // membership mapping is contained in user mapping\n-            final Subject<?, ?, ?> realOwner = owner instanceof Membership\n+            Subject<?, ?, ?> realOwner = owner instanceof Membership\n                     ? ((Membership) owner).getUser()\n                     : (Subject) owner;\n \n-            final Set<ExternalResource> targetResources = owner instanceof Membership\n-                    ? getTargetResources(virAttr, type, attrUtils, realOwner.getResources())\n+            Collection<ExternalResource> targetResources = owner instanceof Membership\n+                    ? getTargetResources(virAttr, type, attrUtils, userDAO.findAllResources((User) realOwner))\n                     : getTargetResources(virAttr, type, attrUtils);\n \n             for (ExternalResource resource : targetResources) {\n@@ -636,40 +638,29 @@ private void retrieveVirAttrValue(\n         }\n     }\n \n-    private Set<ExternalResource> getTargetResources(\n+    private Collection<ExternalResource> getTargetResources(\n             final VirAttr attr, final IntMappingType type, final AttributableUtils attrUtils) {\n \n-        final Set<ExternalResource> resources = new HashSet<>();\n-\n-        if (attr.getOwner() instanceof Subject) {\n-            for (ExternalResource res : ((Subject<?, ?, ?>) attr.getOwner()).getResources()) {\n-                if (!MappingUtils.getMatchingMappingItems(\n-                        attrUtils.getMappingItems(res, MappingPurpose.BOTH),\n-                        attr.getSchema().getKey(), type).isEmpty()) {\n-\n-                    resources.add(res);\n-                }\n-            }\n-        }\n-\n-        return resources;\n+        Iterable<? extends ExternalResource> iterable = attr.getOwner() instanceof User\n+                ? userDAO.findAllResources((User) attr.getOwner())\n+                : attr.getOwner() instanceof Group\n+                        ? ((Group) attr.getOwner()).getResources()\n+                        : Collections.<ExternalResource>emptySet();\n+        return getTargetResources(attr, type, attrUtils, iterable);\n     }\n \n-    private Set<ExternalResource> getTargetResources(final VirAttr attr, final IntMappingType type,\n-            final AttributableUtils attrUtils, final Set<? extends ExternalResource> ownerResources) {\n-\n-        final Set<ExternalResource> resources = new HashSet<>();\n+    private Collection<ExternalResource> getTargetResources(final VirAttr attr, final IntMappingType type,\n+            final AttributableUtils attrUtils, final Iterable<? extends ExternalResource> ownerResources) {\n \n-        for (ExternalResource res : ownerResources) {\n-            if (!MappingUtils.getMatchingMappingItems(\n-                    attrUtils.getMappingItems(res, MappingPurpose.BOTH),\n-                    attr.getSchema().getKey(), type).isEmpty()) {\n+        return CollectionUtils.select(ownerResources, new Predicate<ExternalResource>() {\n \n-                resources.add(res);\n+            @Override\n+            public boolean evaluate(final ExternalResource resource) {\n+                return !MappingUtils.getMatchingMappingItems(\n+                        attrUtils.getMappingItems(resource, MappingPurpose.BOTH),\n+                        attr.getSchema().getKey(), type).isEmpty();\n             }\n-        }\n-\n-        return resources;\n+        });\n     }\n \n     private void fillFromTemplate(final AbstractAttributableTO attributableTO, final AbstractAttributableTO template) {"},{"sha":"009e881d2b19034115d672272990f474ad2817a3","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/MappingUtils.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2FMappingUtils.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -72,6 +72,7 @@\n import org.apache.syncope.core.misc.security.Encryptor;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.jexl.JexlUtils;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.identityconnectors.framework.common.FrameworkUtil;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeBuilder;\n@@ -268,7 +269,8 @@ private static Pair<String, Attribute> prepareAttr(\n \n             case GROUP:\n                 if (subject instanceof User) {\n-                    for (Group group : ((User) subject).getGroups()) {\n+                    UserDAO userDAO = context.getBean(UserDAO.class);\n+                    for (Group group : userDAO.findAllGroups((User) subject)) {\n                         connObjectUtils.retrieveVirAttrValues(group, attrUtilsFactory.getInstance(group));\n                         attributables.add(group);\n                     }\n@@ -655,16 +657,16 @@ public static List<PlainAttrValue> getIntValues(final ExternalResource resource,\n     /**\n      * Get accountId internal value.\n      *\n-     * @param attributable attributable\n+     * @param subject subject\n      * @param accountIdItem accountId mapping item\n      * @param resource external resource\n      * @return accountId internal value\n      */\n-    public static String getAccountIdValue(final Attributable<?, ?, ?> attributable,\n+    public static String getAccountIdValue(final Subject<?, ?, ?> subject,\n             final ExternalResource resource, final MappingItem accountIdItem) {\n \n         List<PlainAttrValue> values = getIntValues(resource, accountIdItem,\n-                Collections.<Attributable<?, ?, ?>>singletonList(attributable), null, null, null, null);\n+                Collections.<Attributable<?, ?, ?>>singletonList(subject), null, null, null, null);\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();"},{"sha":"db3a80fffbbcfeb37e809fd99ef2945b94a3806c","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondConverter.java","status":"modified","additions":14,"deletions":4,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverter.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,9 +18,12 @@\n  */\n package org.apache.syncope.core.misc.search;\n \n+import org.apache.commons.lang3.exception.ExceptionUtils;\n import org.apache.cxf.jaxrs.ext.search.SearchBean;\n import org.apache.cxf.jaxrs.ext.search.fiql.FiqlParser;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n /**\n@@ -32,16 +35,23 @@ public final class SearchCondConverter {\n      * Parses a FIQL expression into Syncope's <tt>SearchCond</tt>, using CXF's <tt>FiqlParser</tt>.\n      *\n      * @param fiqlExpression FIQL string\n-     * @return <tt>SearchCond</tt> instance for given FIQL expression\n+     * @return {@link SearchCond} instance for given FIQL expression\n      * @see FiqlParser\n      */\n     public static SearchCond convert(final String fiqlExpression) {\n         FiqlParser<SearchBean> fiqlParser = new FiqlParser<>(\n                 SearchBean.class, AbstractFiqlSearchConditionBuilder.CONTEXTUAL_PROPERTIES);\n \n-        SearchCondVisitor searchCondVisitor = new SearchCondVisitor();\n-        searchCondVisitor.visit(fiqlParser.parse(fiqlExpression));\n-        return searchCondVisitor.getQuery();\n+        try {\n+            SearchCondVisitor searchCondVisitor = new SearchCondVisitor();\n+            searchCondVisitor.visit(fiqlParser.parse(fiqlExpression));\n+            return searchCondVisitor.getQuery();\n+        } catch (Exception e) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(fiqlExpression);\n+            sce.getElements().add(ExceptionUtils.getRootCauseMessage(e));\n+            throw sce;\n+        }\n     }\n \n     private SearchCondConverter() {"},{"sha":"cebfb388be9a4967671dc444d329a44a3bae0a41","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/search/SearchCondVisitor.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondVisitor.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -31,8 +31,9 @@\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.GroupCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n \n@@ -96,9 +97,15 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n                 } else {\n                     switch (specialAttrName) {\n                         case GROUPS:\n-                            MembershipCond membershipCond = new MembershipCond();\n-                            membershipCond.setGroupId(Long.valueOf(value));\n-                            leaf = SearchCond.getLeafCond(membershipCond);\n+                            GroupCond groupCond = new GroupCond();\n+                            groupCond.setGroupKey(Long.valueOf(value));\n+                            leaf = SearchCond.getLeafCond(groupCond);\n+                            break;\n+\n+                        case ROLES:\n+                            RoleCond roleCond = new RoleCond();\n+                            roleCond.setRoleKey(Long.valueOf(value));\n+                            leaf = SearchCond.getLeafCond(roleCond);\n                             break;\n \n                         case RESOURCES:\n@@ -156,7 +163,7 @@ private SearchCond visitPrimitive(final SearchCondition<SearchBean> sc) {\n     }\n \n     private SearchCond visitCompount(final SearchCondition<SearchBean> sc) {\n-        List<SearchCond> searchConds = new ArrayList<SearchCond>();\n+        List<SearchCond> searchConds = new ArrayList<>();\n         for (SearchCondition<SearchBean> searchCondition : sc.getSearchConditions()) {\n             searchConds.add(searchCondition.getStatement() == null\n                     ? visitCompount(searchCondition)"},{"sha":"d0501e4c51e6dcd7eff2a7dac50386664fa0fe80","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/PasswordGenerator.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FPasswordGenerator.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.core.misc.policy.InvalidPasswordPolicySpecException;\n import org.apache.syncope.core.misc.policy.PolicyPattern;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n@@ -42,6 +43,9 @@ public class PasswordGenerator {\n \n     private static final char[] SPECIAL_CHARS = { '!', '£', '%', '&', '(', ')', '?', '#', '$' };\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -68,7 +72,7 @@ public String generate(final User user)\n             }\n         }\n \n-        for (ExternalResource resource : user.getResources()) {\n+        for (ExternalResource resource : userDAO.findAllResources(user)) {\n             if (resource.getPasswordPolicy() != null\n                     && resource.getPasswordPolicy().getSpecification(PasswordPolicySpec.class) != null) {\n "},{"sha":"3ecdd1f0beb46958936e4d1462752e44d2c24e97","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeAuthenticationProvider.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -224,8 +224,8 @@ protected void updateLoginAttributes(final User user, final boolean authenticate\n     protected Set<? extends ExternalResource> getPassthroughResources(final User user) {\n         Set<? extends ExternalResource> result = null;\n \n-        // 1. look for directly assigned resources, pick the ones whose account policy has authentication resources\n-        for (ExternalResource resource : user.getOwnResources()) {\n+        // 1. look for assigned resources, pick the ones whose account policy has authentication resources\n+        for (ExternalResource resource : userDAO.findAllResources(user)) {\n             if (resource.getAccountPolicy() != null && !resource.getAccountPolicy().getResources().isEmpty()) {\n                 if (result == null) {\n                     result = resource.getAccountPolicy().getResources();\n@@ -253,7 +253,7 @@ protected boolean authenticate(final User user, final String password) {\n         boolean authenticated = encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n         LOG.debug(\"{} authenticated on internal storage: {}\", user.getUsername(), authenticated);\n \n-        final AttributableUtils attrUtils = attrUtilsFactory.getInstance(AttributableType.USER);\n+        AttributableUtils attrUtils = attrUtilsFactory.getInstance(AttributableType.USER);\n         for (Iterator<? extends ExternalResource> itor = getPassthroughResources(user).iterator();\n                 itor.hasNext() && !authenticated;) {\n "},{"sha":"f8f974b29e0d81253cf93f0142d06aba3db3a65e","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeGrantedAuthority.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -25,6 +25,8 @@\n import org.apache.commons.collections4.Closure;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.SetUtils;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.syncope.core.misc.RealmUtils;\n import org.springframework.security.core.GrantedAuthority;\n \n@@ -68,4 +70,14 @@ public String getAuthority() {\n         return entitlement;\n     }\n \n+    @Override\n+    public boolean equals(final Object obj) {\n+        return EqualsBuilder.reflectionEquals(this, obj);\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return HashCodeBuilder.reflectionHashCode(this);\n+    }\n+\n }"},{"sha":"0d6ff520ebfff79925fb031df0273eb7eb27a280","filename":"core/misc/src/main/java/org/apache/syncope/core/misc/security/SyncopeUserDetailsService.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsecurity%2FSyncopeUserDetailsService.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -81,8 +81,9 @@ public SyncopeGrantedAuthority transform(final String entitlement) {\n                 throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n             }\n \n-            // Give entitlements as assigned by roles (with realms, where applicable)\n-            for (final Role role : user.getRoles()) {\n+            // Give entitlements as assigned by roles (with realms, where applicable) - assigned either\n+            // statically and dynamically\n+            for (final Role role : userDAO.findAllRoles(user)) {\n                 CollectionUtils.forAllDo(role.getEntitlements(), new Closure<String>() {\n \n                     @Override"},{"sha":"b3bc11e076e484d13970d650057ec8f53dedf7f3","filename":"core/misc/src/test/java/org/apache/syncope/core/misc/search/SearchCondConverterTest.java","status":"modified","additions":17,"deletions":4,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fmisc%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fmisc%2Fsearch%2FSearchCondConverterTest.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -23,8 +23,9 @@\n import org.apache.syncope.common.lib.search.SpecialAttr;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.GroupCond;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n import org.junit.Test;\n@@ -86,9 +87,21 @@ public void groups() {\n         String fiqlExpression = new UserFiqlSearchConditionBuilder().inGroups(1L).query();\n         assertEquals(SpecialAttr.GROUPS + \"==1\", fiqlExpression);\n \n-        MembershipCond membCond = new MembershipCond();\n-        membCond.setGroupId(1L);\n-        SearchCond simpleCond = SearchCond.getLeafCond(membCond);\n+        GroupCond groupCond = new GroupCond();\n+        groupCond.setGroupKey(1L);\n+        SearchCond simpleCond = SearchCond.getLeafCond(groupCond);\n+\n+        assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n+    }\n+\n+    @Test\n+    public void roles() {\n+        String fiqlExpression = new UserFiqlSearchConditionBuilder().inRoles(1L).query();\n+        assertEquals(SpecialAttr.ROLES + \"==1\", fiqlExpression);\n+\n+        RoleCond roleCond = new RoleCond();\n+        roleCond.setRoleKey(1L);\n+        SearchCond simpleCond = SearchCond.getLeafCond(roleCond);\n \n         assertEquals(simpleCond, SearchCondConverter.convert(fiqlExpression));\n     }"},{"sha":"bcdd1ca2ce7019ae022c0ecb19771dd2b0a75f9e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -30,6 +30,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.GVirAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n \n public interface GroupDAO extends SubjectDAO<GPlainAttr, GDerAttr, GVirAttr> {\n \n@@ -72,4 +73,7 @@ public interface GroupDAO extends SubjectDAO<GPlainAttr, GDerAttr, GVirAttr> {\n      * @return map containing pairs with user key and operations to be performed on those resources (DELETE, typically).\n      */\n     Map<Long, PropagationByResource> findUsersWithIndirectResources(Long groupKey);\n+\n+    void refreshDynMemberships(User user);\n+\n }"},{"sha":"d1a310154378044d91b076c0ef24571955a84550","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/RoleDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FRoleDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -21,6 +21,7 @@\n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n \n public interface RoleDAO extends DAO<Role, Long> {\n \n@@ -37,4 +38,6 @@ public interface RoleDAO extends DAO<Role, Long> {\n     void delete(Role role);\n \n     void delete(Long key);\n+\n+    void refreshDynMemberships(User user);\n }"},{"sha":"469a98f113d47f8ac125c1d4f286acaeefd6a12e","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,10 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.api.dao;\n \n+import java.util.Collection;\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n@@ -64,4 +67,18 @@ public interface UserDAO extends SubjectDAO<UPlainAttr, UDerAttr, UVirAttr> {\n     User authFetch(Long key);\n \n     User authFetch(String username);\n+\n+    List<Role> findDynRoleMemberships(User user);\n+\n+    List<Group> findDynGroupMemberships(User user);\n+\n+    Collection<Role> findAllRoles(User user);\n+\n+    Collection<Group> findAllGroups(User user);\n+\n+    Collection<Long> findAllGroupKeys(User user);\n+\n+    Collection<ExternalResource> findAllResources(User user);\n+\n+    Collection<String> findAllResourceNames(User user);\n }"},{"sha":"3dbb9b04adb9fe6ae790ab1c5e2040e279c7bd45","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/GroupCond.java","status":"renamed","additions":7,"deletions":10,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FGroupCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FGroupCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FGroupCond.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,25 +18,22 @@\n  */\n package org.apache.syncope.core.persistence.api.dao.search;\n \n-/**\n- * Search condition to be applied when searching for memberships.\n- */\n-public class MembershipCond extends AbstractSearchCond {\n+public class GroupCond extends AbstractSearchCond {\n \n     private static final long serialVersionUID = -728155256293925989L;\n \n-    private Long groupId;\n+    private Long groupKey;\n \n-    public Long getGroupId() {\n-        return groupId;\n+    public Long getGroupKey() {\n+        return groupKey;\n     }\n \n-    public void setGroupId(final Long groupId) {\n-        this.groupId = groupId;\n+    public void setGroupKey(final Long groupKey) {\n+        this.groupKey = groupKey;\n     }\n \n     @Override\n     public final boolean isValid() {\n-        return groupId != null;\n+        return groupKey != null;\n     }\n }","previous_filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/MembershipCond.java"},{"sha":"be6688fefde1f5d62145b04d34e84d121ce9dc3c","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/RoleCond.java","status":"added","additions":39,"deletions":0,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FRoleCond.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -0,0 +1,39 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.search;\n+\n+public class RoleCond extends AbstractSearchCond {\n+\n+    private static final long serialVersionUID = 3581958527829522490L;\n+\n+    private Long roleKey;\n+\n+    public Long getRoleKey() {\n+        return roleKey;\n+    }\n+\n+    public void setRoleKey(final Long roleKey) {\n+        this.roleKey = roleKey;\n+    }\n+\n+    @Override\n+    public final boolean isValid() {\n+        return roleKey != null;\n+    }\n+}"},{"sha":"ab5b527588a22ef016fdcc86927e3391e9713cec","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/search/SearchCond.java","status":"modified","additions":37,"deletions":11,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fsearch%2FSearchCond.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -39,7 +39,9 @@ public enum Type {\n \n     private AttributeCond attributeCond;\n \n-    private MembershipCond membershipCond;\n+    private GroupCond groupCond;\n+\n+    private RoleCond roleCond;\n \n     private ResourceCond resourceCond;\n \n@@ -60,11 +62,20 @@ public static SearchCond getLeafCond(final AttributeCond attributeCond) {\n         return nodeCond;\n     }\n \n-    public static SearchCond getLeafCond(final MembershipCond membershipCond) {\n+    public static SearchCond getLeafCond(final GroupCond groupCond) {\n+        SearchCond nodeCond = new SearchCond();\n+\n+        nodeCond.type = Type.LEAF;\n+        nodeCond.groupCond = groupCond;\n+\n+        return nodeCond;\n+    }\n+\n+    public static SearchCond getLeafCond(final RoleCond roleCond) {\n         SearchCond nodeCond = new SearchCond();\n \n         nodeCond.type = Type.LEAF;\n-        nodeCond.membershipCond = membershipCond;\n+        nodeCond.roleCond = roleCond;\n \n         return nodeCond;\n     }\n@@ -84,8 +95,14 @@ public static SearchCond getNotLeafCond(final AttributeCond attributeCond) {\n         return nodeCond;\n     }\n \n-    public static SearchCond getNotLeafCond(final MembershipCond membershipCond) {\n-        SearchCond nodeCond = getLeafCond(membershipCond);\n+    public static SearchCond getNotLeafCond(final GroupCond groupCond) {\n+        SearchCond nodeCond = getLeafCond(groupCond);\n+        nodeCond.type = Type.NOT_LEAF;\n+        return nodeCond;\n+    }\n+\n+    public static SearchCond getNotLeafCond(final RoleCond roleCond) {\n+        SearchCond nodeCond = getLeafCond(roleCond);\n         nodeCond.type = Type.NOT_LEAF;\n         return nodeCond;\n     }\n@@ -155,12 +172,20 @@ public void setAttributeCond(final AttributeCond attributeCond) {\n         this.attributeCond = attributeCond;\n     }\n \n-    public MembershipCond getMembershipCond() {\n-        return membershipCond;\n+    public GroupCond getGroupCond() {\n+        return groupCond;\n+    }\n+\n+    public void setGroupCond(final GroupCond groupCond) {\n+        this.groupCond = groupCond;\n+    }\n+\n+    public RoleCond getRoleCond() {\n+        return roleCond;\n     }\n \n-    public void setMembershipCond(final MembershipCond membershipCond) {\n-        this.membershipCond = membershipCond;\n+    public void setRoleCond(final RoleCond roleCond) {\n+        this.roleCond = roleCond;\n     }\n \n     public ResourceCond getResourceCond() {\n@@ -207,10 +232,11 @@ public boolean isValid() {\n             case LEAF:\n             case NOT_LEAF:\n                 isValid = (subjectCond != null || attributeCond != null\n-                        || membershipCond != null || resourceCond != null)\n+                        || groupCond != null || roleCond != null || resourceCond != null)\n                         && (subjectCond == null || subjectCond.isValid())\n                         && (attributeCond == null || attributeCond.isValid())\n-                        && (membershipCond == null || membershipCond.isValid())\n+                        && (groupCond == null || groupCond.isValid())\n+                        && (roleCond == null || roleCond.isValid())\n                         && (resourceCond == null || resourceCond.isValid());\n                 break;\n "},{"sha":"8770e3546ad7818543a208f33d5448079db72c80","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynGroupMembership.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynGroupMembership.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+\n+public interface DynGroupMembership extends DynMembership {\n+\n+    Group getGroup();\n+\n+    void setGroup(Group role);\n+}"},{"sha":"2fbecc387892726c8f054dcd030550df16a638de","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynMembership.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynMembership.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -0,0 +1,35 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+\n+public interface DynMembership extends Entity<Long> {\n+\n+    String getFIQLCond();\n+\n+    void setFIQLCond(String fiql);\n+\n+    boolean addUser(User user);\n+\n+    boolean removeUser(User user);\n+\n+    List<? extends User> getUsers();\n+}"},{"sha":"5321434849d654362d05e7491f29b4efc6e45e4b","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/DynRoleMembership.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRoleMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRoleMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FDynRoleMembership.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+public interface DynRoleMembership extends DynMembership {\n+\n+    Role getRole();\n+\n+    void setRole(Role role);\n+}"},{"sha":"5a9fe86166b6fec694fe3ab5ed1fea3dde4c2c45","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/Role.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FRole.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -35,4 +35,7 @@ public interface Role extends Entity<Long> {\n \n     List<? extends Realm> getRealms();\n \n+    DynRoleMembership getDynMembership();\n+\n+    void setDynMembership(DynRoleMembership dynMembership);\n }"},{"sha":"f7959cd4c85948bdac282223a84d5f67401e8ed9","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/group/Group.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fgroup%2FGroup.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -20,6 +20,7 @@\n \n import java.util.List;\n import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n+import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -80,4 +81,7 @@ public interface Group extends Subject<GPlainAttr, GDerAttr, GVirAttr> {\n     @Override\n     List<? extends GVirAttr> getVirAttrs();\n \n+    DynGroupMembership getDynMembership();\n+\n+    void setDynMembership(DynGroupMembership dynMembership);\n }"},{"sha":"7349ecb2b0e05b2c18e8263f6e7bb2609d3d1b56","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/user/User.java","status":"modified","additions":2,"deletions":8,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fuser%2FUser.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,15 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.api.entity.user;\n \n+import java.util.Collection;\n import java.util.Date;\n import java.util.List;\n-import java.util.Set;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.Subject;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n \n public interface User extends Subject<UPlainAttr, UDerAttr, UVirAttr> {\n \n@@ -56,16 +54,12 @@ public interface User extends Subject<UPlainAttr, UDerAttr, UVirAttr> {\n \n     List<? extends Membership> getMemberships();\n \n-    Set<? extends ExternalResource> getOwnResources();\n+    Collection<Long> getStaticGroupKeys();\n \n     String getPassword();\n \n     List<String> getPasswordHistory();\n \n-    Set<Long> getGroupKeys();\n-\n-    List<Group> getGroups();\n-\n     String getSecurityAnswer();\n \n     SecurityQuestion getSecurityQuestion();"},{"sha":"70f00f72b3794c7d7e61970b5ccafc5925d26e9e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAExternalResourceDAO.java","status":"modified","additions":1,"deletions":13,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAExternalResourceDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -21,7 +21,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.syncope.common.lib.types.IntMappingType;\n import org.apache.syncope.common.lib.types.PolicyType;\n@@ -69,18 +68,7 @@ public class JPAExternalResourceDAO extends AbstractDAO<ExternalResource, String\n \n     @Override\n     public ExternalResource find(final String name) {\n-        TypedQuery<ExternalResource> query = entityManager.createQuery(\"SELECT e FROM \"\n-                + JPAExternalResource.class.getSimpleName() + \" e WHERE e.name = :name\", ExternalResource.class);\n-        query.setParameter(\"name\", name);\n-\n-        ExternalResource result = null;\n-        try {\n-            result = query.getSingleResult();\n-        } catch (NoResultException e) {\n-            LOG.debug(\"No resource found with name {}\", name, e);\n-        }\n-\n-        return result;\n+        return entityManager.find(JPAExternalResource.class, name);\n     }\n \n     private StringBuilder getByPolicyQuery(final PolicyType type) {"},{"sha":"4e6b985ce0ed5be3f87f24d79a883d2be175de6f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":28,"deletions":2,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -29,6 +29,7 @@\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n@@ -67,10 +68,12 @@\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.misc.RealmUtils;\n+import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n@@ -138,7 +141,7 @@ public List<Group> findOwnedByUser(final Long userKey) {\n \n         StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").append(JPAGroup.class.getSimpleName()).\n                 append(\" e WHERE e.userOwner=:owner \");\n-        for (Long groupKey : owner.getGroupKeys()) {\n+        for (Long groupKey : userDAO.findAllGroupKeys(owner)) {\n             queryString.append(\"OR e.groupOwner.id=\").append(groupKey).append(' ');\n         }\n \n@@ -239,6 +242,17 @@ private List<Long> unmatched(final Long groupId,\n \n     @Override\n     public Group save(final Group group) {\n+        // refresh dynaminc memberships\n+        if (group.getDynMembership() != null) {\n+            List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                    SearchCondConverter.convert(group.getDynMembership().getFIQLCond()), SubjectType.USER);\n+\n+            group.getDynMembership().getUsers().clear();\n+            for (User user : matchingUsers) {\n+                group.getDynMembership().addUser(user);\n+            }\n+        }\n+\n         // remove plain attributes without a valid template\n         List<GPlainAttr> rToBeDeleted = new ArrayList<>();\n         for (final PlainAttr attr : group.getPlainAttrs()) {\n@@ -387,7 +401,7 @@ public Map<Long, PropagationByResource> findUsersWithIndirectResources(final Lon\n \n             PropagationByResource propByRes = new PropagationByResource();\n             for (ExternalResource resource : group.getResources()) {\n-                if (!user.getOwnResources().contains(resource)) {\n+                if (!user.getResources().contains(resource)) {\n                     propByRes.add(ResourceOperation.DELETE, resource.getKey());\n                 }\n \n@@ -399,4 +413,16 @@ public Map<Long, PropagationByResource> findUsersWithIndirectResources(final Lon\n \n         return result;\n     }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public void refreshDynMemberships(final User user) {\n+        for (Group role : findAll(SyncopeConstants.FULL_ADMIN_REALMS, -1, -1)) {\n+            if (role.getDynMembership() != null && !searchDAO.matches(user,\n+                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), SubjectType.USER)) {\n+\n+                role.getDynMembership().removeUser(user);\n+            }\n+        }\n+    }\n }"},{"sha":"c195bd96b508c738e2e3a2a48b7636d442e397a9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPARoleDAO.java","status":"modified","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPARoleDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -21,13 +21,19 @@\n import java.util.List;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Propagation;\n+import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n public class JPARoleDAO extends AbstractDAO<Role, Long> implements RoleDAO {\n@@ -73,6 +79,17 @@ public List<Role> findAll() {\n \n     @Override\n     public Role save(final Role role) {\n+        // refresh dynaminc memberships\n+        if (role.getDynMembership() != null) {\n+            List<User> matchingUsers = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), SubjectType.USER);\n+\n+            role.getDynMembership().getUsers().clear();\n+            for (User user : matchingUsers) {\n+                role.getDynMembership().addUser(user);\n+            }\n+        }\n+\n         return entityManager.merge(role);\n     }\n \n@@ -91,4 +108,16 @@ public void delete(final Long key) {\n         delete(role);\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public void refreshDynMemberships(final User user) {\n+        for (Role role : findAll()) {\n+            if (role.getDynMembership() != null && !searchDAO.matches(user,\n+                    SearchCondConverter.convert(role.getDynMembership().getFIQLCond()), SubjectType.USER)) {\n+\n+                role.getDynMembership().removeUser(user);\n+            }\n+        }\n+    }\n+\n }"},{"sha":"b4cbad87fb6748a2985ae6d898f749d15e17d613","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPASubjectSearchDAO.java","status":"modified","additions":52,"deletions":5,"changes":57,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPASubjectSearchDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -46,9 +46,10 @@\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.GroupCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n import org.apache.syncope.core.persistence.api.entity.AttributableUtils;\n@@ -418,8 +419,12 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n \n             case LEAF:\n             case NOT_LEAF:\n-                if (nodeCond.getMembershipCond() != null && SubjectType.USER == type) {\n-                    query.append(getQuery(nodeCond.getMembershipCond(),\n+                if (nodeCond.getGroupCond() != null && SubjectType.USER == type) {\n+                    query.append(getQuery(nodeCond.getGroupCond(),\n+                            nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n+                }\n+                if (nodeCond.getRoleCond() != null && SubjectType.USER == type) {\n+                    query.append(getQuery(nodeCond.getRoleCond(),\n                             nodeCond.getType() == SearchCond.Type.NOT_LEAF, parameters, svs));\n                 }\n                 if (nodeCond.getResourceCond() != null) {\n@@ -456,7 +461,7 @@ private StringBuilder getQuery(final SearchCond nodeCond, final List<Object> par\n         return query;\n     }\n \n-    private String getQuery(final MembershipCond cond, final boolean not, final List<Object> parameters,\n+    private String getQuery(final GroupCond cond, final boolean not, final List<Object> parameters,\n             final SearchSupport svs) {\n \n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n@@ -470,7 +475,49 @@ private String getQuery(final MembershipCond cond, final boolean not, final List\n \n         query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n                 append(svs.membership().name).append(\" WHERE \").\n-                append(\"group_id=?\").append(setParameter(parameters, cond.getGroupId())).\n+                append(\"group_id=?\").append(setParameter(parameters, cond.getGroupKey())).\n+                append(')');\n+\n+        if (not) {\n+            query.append(\"AND subject_id NOT IN (\");\n+        } else {\n+            query.append(\"OR subject_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n+                append(svs.dyngroupmembership().name).append(\" WHERE \").\n+                append(\"group_id=?\").append(setParameter(parameters, cond.getGroupKey())).\n+                append(')');\n+\n+        return query.toString();\n+    }\n+\n+    private String getQuery(final RoleCond cond, final boolean not, final List<Object> parameters,\n+            final SearchSupport svs) {\n+\n+        StringBuilder query = new StringBuilder(\"SELECT DISTINCT subject_id FROM \").\n+                append(svs.field().name).append(\" WHERE \");\n+\n+        if (not) {\n+            query.append(\"subject_id NOT IN (\");\n+        } else {\n+            query.append(\"subject_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n+                append(svs.role().name).append(\" WHERE \").\n+                append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n+                append(')');\n+\n+        if (not) {\n+            query.append(\"AND subject_id NOT IN (\");\n+        } else {\n+            query.append(\"OR subject_id IN (\");\n+        }\n+\n+        query.append(\"SELECT DISTINCT subject_id \").append(\"FROM \").\n+                append(svs.dynrolemembership().name).append(\" WHERE \").\n+                append(\"role_id=?\").append(setParameter(parameters, cond.getRoleKey())).\n                 append(')');\n \n         return query.toString();"},{"sha":"d90ddbdb0cc0bf46fb093bd71012832e683f0ea5","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPATaskDAO.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPATaskDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -178,7 +178,6 @@ public void deleteAll(final ExternalResource resource, final TaskType type) {\n             public void execute(final Task input) {\n                 delete(input.getKey());\n             }\n-\n         });\n     }\n }"},{"sha":"46b51dc9d047063127bdc09868107bd5bff2964e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":102,"deletions":1,"changes":103,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,14 +18,18 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.Collections;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n import javax.annotation.Resource;\n import javax.persistence.NoResultException;\n import javax.persistence.TypedQuery;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SubjectType;\n@@ -47,8 +51,14 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.misc.security.AuthContextUtils;\n import org.apache.syncope.core.misc.security.UnauthorizedException;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADynGroupMembership;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADynRoleMembership;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n \n @Repository\n@@ -57,6 +67,9 @@ public class JPAUserDAO extends AbstractSubjectDAO<UPlainAttr, UDerAttr, UVirAtt\n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n@@ -187,12 +200,15 @@ public final int count(final Set<String> adminRealms) {\n \n     @Override\n     public User save(final User user) {\n-        final User merged = entityManager.merge(user);\n+        User merged = entityManager.merge(user);\n         for (VirAttr virAttr : merged.getVirAttrs()) {\n             virAttr.getValues().clear();\n             virAttr.getValues().addAll(user.getVirAttr(virAttr.getSchema().getKey()).getValues());\n         }\n \n+        roleDAO.refreshDynMemberships(merged);\n+        groupDAO.refreshDynMemberships(merged);\n+\n         return merged;\n     }\n \n@@ -220,6 +236,13 @@ public void delete(final User user) {\n         }\n         user.getMemberships().clear();\n \n+        for (Role role : findDynRoleMemberships(user)) {\n+            role.getDynMembership().removeUser(user);\n+        }\n+        for (Group group : findDynGroupMemberships(user)) {\n+            group.getDynMembership().removeUser(user);\n+        }\n+\n         entityManager.remove(user);\n     }\n \n@@ -277,4 +300,82 @@ public User authFetch(final String username) {\n         return user;\n     }\n \n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public List<Role> findDynRoleMemberships(final User user) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e.role FROM \" + JPADynRoleMembership.class.getSimpleName()\n+                + \" e WHERE :user MEMBER OF e.users\", Role.class);\n+        query.setParameter(\"user\", user);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public List<Group> findDynGroupMemberships(final User user) {\n+        TypedQuery<Group> query = entityManager.createQuery(\n+                \"SELECT e.group FROM \" + JPADynGroupMembership.class.getSimpleName()\n+                + \" e WHERE :user MEMBER OF e.users\", Group.class);\n+        query.setParameter(\"user\", user);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<Role> findAllRoles(final User user) {\n+        return CollectionUtils.union(user.getRoles(), findDynRoleMemberships(user));\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<Group> findAllGroups(final User user) {\n+        return CollectionUtils.union(\n+                CollectionUtils.collect(user.getMemberships(), new Transformer<Membership, Group>() {\n+\n+                    @Override\n+                    public Group transform(final Membership input) {\n+                        return input.getGroup();\n+                    }\n+                }, new ArrayList<Group>()),\n+                findDynGroupMemberships(user));\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<Long> findAllGroupKeys(final User user) {\n+        return CollectionUtils.collect(findAllGroups(user), new Transformer<Group, Long>() {\n+\n+            @Override\n+            public Long transform(final Group input) {\n+                return input.getKey();\n+            }\n+        });\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<ExternalResource> findAllResources(final User user) {\n+        Set<ExternalResource> result = new HashSet<>();\n+        result.addAll(user.getResources());\n+        for (Group group : findAllGroups(user)) {\n+            result.addAll(group.getResources());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n+    @Override\n+    public Collection<String> findAllResourceNames(final User user) {\n+        return CollectionUtils.collect(findAllResources(user), new Transformer<ExternalResource, String>() {\n+\n+            @Override\n+            public String transform(final ExternalResource input) {\n+                return input.getKey();\n+            }\n+        });\n+    }\n+\n }"},{"sha":"11b3298715a1db29aec6e54302a774db44912f1e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/SearchSupport.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FSearchSupport.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -110,6 +110,18 @@ public SearchView membership() {\n         return new SearchView(\"svm\", field().name + \"_membership\");\n     }\n \n+    public SearchView dyngroupmembership() {\n+        return new SearchView(\"svdg\", field().name + \"_dyngroupmembership\");\n+    }\n+\n+    public SearchView role() {\n+        return new SearchView(\"svr\", field().name + \"_role\");\n+    }\n+\n+    public SearchView dynrolemembership() {\n+        return new SearchView(\"svdr\", field().name + \"_dynrolemembership\");\n+    }\n+\n     public SearchView nullAttr() {\n         return new SearchView(\"svna\", field().name + \"_null_attr\");\n     }"},{"sha":"6e47b34d1359967da36582ae02c9e477f0be5c6d","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractDynMembership.java","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractDynMembership.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -0,0 +1,65 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.List;\n+import javax.persistence.MappedSuperclass;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.DynMembership;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+\n+@MappedSuperclass\n+public abstract class AbstractDynMembership extends AbstractEntity<Long> implements DynMembership {\n+\n+    private static final long serialVersionUID = 921821654690948787L;\n+\n+    @NotNull\n+    private String fiql;\n+\n+    @Override\n+    public String getFIQLCond() {\n+        return fiql;\n+    }\n+\n+    @Override\n+    public void setFIQLCond(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+\n+    protected abstract List<JPAUser> internalGetUsers();\n+\n+    @Override\n+    public boolean addUser(final User user) {\n+        checkType(user, JPAUser.class);\n+        return internalGetUsers().add((JPAUser) user);\n+    }\n+\n+    @Override\n+    public boolean removeUser(final User user) {\n+        checkType(user, JPAUser.class);\n+        return internalGetUsers().remove((JPAUser) user);\n+    }\n+\n+    @Override\n+    public List<? extends User> getUsers() {\n+        return internalGetUsers();\n+    }\n+\n+}"},{"sha":"166309f235c5bc9936b7131e2cdc8c945b02a305","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AbstractSubject.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAbstractSubject.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -52,17 +52,18 @@ public void setRealm(final Realm realm) {\n         this.realm = (JPARealm) realm;\n     }\n \n-    protected abstract Set<? extends ExternalResource> internalGetResources();\n+    protected abstract Set<JPAExternalResource> internalGetResources();\n \n     @Override\n-    @SuppressWarnings(\"unchecked\")\n     public boolean addResource(final ExternalResource resource) {\n-        return ((Set<ExternalResource>) internalGetResources()).add(resource);\n+        checkType(resource, JPAExternalResource.class);\n+        return internalGetResources().add((JPAExternalResource) resource);\n     }\n \n     @Override\n     public boolean removeResource(final ExternalResource resource) {\n-        return internalGetResources().remove(resource);\n+        checkType(resource, JPAExternalResource.class);\n+        return internalGetResources().remove((JPAExternalResource) resource);\n     }\n \n     @Override"},{"sha":"8a9547e8dd97de4ba3b95e4bd5d6c6b8f50bbde7","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/AnnotatedEntityListener.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAnnotatedEntityListener.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -28,9 +28,6 @@\n \n public class AnnotatedEntityListener {\n \n-    /**\n-     * Logger.\n-     */\n     private static final Logger LOG = LoggerFactory.getLogger(AnnotatedEntityListener.class);\n \n     @PrePersist"},{"sha":"1f553480a99aa976e27d06041876e76e41fe314a","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADynGroupMembership.java","status":"added","additions":77,"deletions":0,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynGroupMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynGroupMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynGroupMembership.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -0,0 +1,77 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.jpa.entity.group.JPAGroup;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+\n+@Entity\n+@Table(name = JPADynGroupMembership.TABLE)\n+public class JPADynGroupMembership extends AbstractDynMembership implements DynGroupMembership {\n+\n+    private static final long serialVersionUID = -7336814163949640354L;\n+\n+    public static final String TABLE = \"DynGroupMembership\";\n+\n+    @Id\n+    private Long id;\n+\n+    @OneToOne\n+    private JPAGroup group;\n+\n+    @ManyToMany\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"dynGroupMembership_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"user_id\"))\n+    private List<JPAUser> users = new ArrayList<>();\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    protected List<JPAUser> internalGetUsers() {\n+        return users;\n+    }\n+\n+    @Override\n+    public Group getGroup() {\n+        return group;\n+    }\n+\n+    @Override\n+    public void setGroup(final Group role) {\n+        checkType(role, JPAGroup.class);\n+        this.group = (JPAGroup) role;\n+    }\n+\n+}"},{"sha":"4796abfe6aebd9c5fac4f1335c477afcaaddb6f4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADynRoleMembership.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRoleMembership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRoleMembership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADynRoleMembership.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.persistence.Entity;\n+import javax.persistence.Id;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.JoinTable;\n+import javax.persistence.ManyToMany;\n+import javax.persistence.OneToOne;\n+import javax.persistence.Table;\n+import org.apache.syncope.core.persistence.api.entity.DynRoleMembership;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+\n+@Entity\n+@Table(name = JPADynRoleMembership.TABLE)\n+public class JPADynRoleMembership extends AbstractDynMembership implements DynRoleMembership {\n+\n+    private static final long serialVersionUID = -7336814163949640354L;\n+\n+    public static final String TABLE = \"DynRoleMembership\";\n+\n+    @Id\n+    private Long id;\n+\n+    @OneToOne\n+    private JPARole role;\n+\n+    @ManyToMany\n+    @JoinTable(joinColumns =\n+            @JoinColumn(name = \"dynRoleMembership_id\"),\n+            inverseJoinColumns =\n+            @JoinColumn(name = \"user_id\"))\n+    private List<JPAUser> users = new ArrayList<>();\n+\n+    @Override\n+    public Long getKey() {\n+        return id;\n+    }\n+\n+    @Override\n+    protected List<JPAUser> internalGetUsers() {\n+        return users;\n+    }\n+\n+    @Override\n+    public Role getRole() {\n+        return role;\n+    }\n+\n+    @Override\n+    public void setRole(final Role role) {\n+        checkType(role, JPARole.class);\n+        this.role = (JPARole) role;\n+    }\n+\n+}"},{"sha":"048955bdecf22fe2d5fcec39160f528845ef5651","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -21,6 +21,8 @@\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ConnInstance;\n import org.apache.syncope.core.persistence.api.entity.ConnPoolConf;\n+import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n+import org.apache.syncope.core.persistence.api.entity.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n@@ -265,6 +267,10 @@ public <KEY, T extends Entity<KEY>> T newEntity(final Class<T> reference) {\n             result = (T) new JPASecurityQuestion();\n         } else if (reference.equals(Logger.class)) {\n             result = (T) new JPALogger();\n+        } else if (reference.equals(DynRoleMembership.class)) {\n+            result = (T) new JPADynRoleMembership();\n+        } else if (reference.equals(DynGroupMembership.class)) {\n+            result = (T) new JPADynGroupMembership();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"0360f542fa65d8f74ef8a8954a32fe13958bcf16","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPARole.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPARole.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -23,6 +23,7 @@\n import java.util.List;\n import java.util.Set;\n import javax.persistence.Cacheable;\n+import javax.persistence.CascadeType;\n import javax.persistence.CollectionTable;\n import javax.persistence.Column;\n import javax.persistence.ElementCollection;\n@@ -32,9 +33,11 @@\n import javax.persistence.JoinColumn;\n import javax.persistence.JoinTable;\n import javax.persistence.ManyToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n \n@@ -69,6 +72,10 @@ public class JPARole extends AbstractEntity<Long> implements Role {\n     @Valid\n     private List<JPARealm> realms = new ArrayList<>();\n \n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"role\")\n+    @Valid\n+    private JPADynRoleMembership dynMembership;\n+\n     @Override\n     public Long getKey() {\n         return id;\n@@ -106,4 +113,14 @@ public List<? extends Realm> getRealms() {\n         return realms;\n     }\n \n+    @Override\n+    public DynRoleMembership getDynMembership() {\n+        return dynMembership;\n+    }\n+\n+    @Override\n+    public void setDynMembership(final DynRoleMembership dynMembership) {\n+        checkType(dynMembership, JPADynRoleMembership.class);\n+        this.dynMembership = (JPADynRoleMembership) dynMembership;\n+    }\n }"},{"sha":"20e880852e5a6f9d38516d233f717fd08760a4bd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/group/JPAGroup.java","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fgroup%2FJPAGroup.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -33,14 +33,15 @@\n import javax.persistence.ManyToMany;\n import javax.persistence.ManyToOne;\n import javax.persistence.OneToMany;\n+import javax.persistence.OneToOne;\n import javax.persistence.Table;\n import javax.validation.Valid;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.core.persistence.api.entity.AttrTemplate;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n+import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.Schema;\n import org.apache.syncope.core.persistence.api.entity.membership.MDerAttrTemplate;\n import org.apache.syncope.core.persistence.api.entity.membership.MPlainAttrTemplate;\n@@ -55,6 +56,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.validation.entity.GroupCheck;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractSubject;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADynGroupMembership;\n import org.apache.syncope.core.persistence.jpa.entity.JPAExternalResource;\n import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMPlainAttrTemplate;\n import org.apache.syncope.core.persistence.jpa.entity.membership.JPAMDerAttrTemplate;\n@@ -131,6 +133,10 @@ public class JPAGroup extends AbstractSubject<GPlainAttr, GDerAttr, GVirAttr> im\n     @Valid\n     private Set<JPAExternalResource> resources;\n \n+    @OneToOne(cascade = CascadeType.ALL, orphanRemoval = true, mappedBy = \"group\")\n+    @Valid\n+    private JPADynGroupMembership dynMembership;\n+\n     public JPAGroup() {\n         super();\n \n@@ -154,7 +160,7 @@ public Long getKey() {\n     }\n \n     @Override\n-    protected Set<? extends ExternalResource> internalGetResources() {\n+    protected Set<JPAExternalResource> internalGetResources() {\n         return resources;\n     }\n \n@@ -286,4 +292,16 @@ public boolean removeVirAttr(final GVirAttr attr) {\n     public List<? extends GVirAttr> getVirAttrs() {\n         return virAttrs;\n     }\n+\n+    @Override\n+    public DynGroupMembership getDynMembership() {\n+        return dynMembership;\n+    }\n+\n+    @Override\n+    public void setDynMembership(final DynGroupMembership dynMembership) {\n+        checkType(dynMembership, JPADynGroupMembership.class);\n+        this.dynMembership = (JPADynGroupMembership) dynMembership;\n+    }\n+\n }"},{"sha":"029c96bafe2ca7fcb5264cd99125795f69d82926","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/user/JPAUser.java","status":"modified","additions":6,"deletions":37,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fuser%2FJPAUser.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Calendar;\n+import java.util.Collection;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -53,9 +54,7 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.collections4.Transformer;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.membership.Membership;\n-import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.SecurityQuestion;\n import org.apache.syncope.core.persistence.api.entity.user.UDerAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n@@ -71,9 +70,6 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.jpa.entity.JPARole;\n \n-/**\n- * JPA user bean.\n- */\n @Entity\n @Table(name = JPAUser.TABLE)\n @Cacheable\n@@ -206,7 +202,7 @@ public Long getKey() {\n     }\n \n     @Override\n-    protected Set<? extends ExternalResource> internalGetResources() {\n+    protected Set<JPAExternalResource> internalGetResources() {\n         return resources;\n     }\n \n@@ -256,43 +252,16 @@ public List<? extends Membership> getMemberships() {\n     }\n \n     @Override\n-    public List<Group> getGroups() {\n-        return CollectionUtils.collect(memberships, new Transformer<Membership, Group>() {\n-\n-            @Override\n-            public Group transform(final Membership input) {\n-                return input.getGroup();\n-            }\n-        }, new ArrayList<Group>());\n-    }\n-\n-    @Override\n-    public Set<Long> getGroupKeys() {\n-        return CollectionUtils.collect(getGroups(), new Transformer<Group, Long>() {\n+    public Collection<Long> getStaticGroupKeys() {\n+        return CollectionUtils.collect(memberships, new Transformer<Membership, Long>() {\n \n             @Override\n-            public Long transform(final Group input) {\n-                return input.getKey();\n+            public Long transform(final Membership membership) {\n+                return membership.getGroup().getKey();\n             }\n         }, new HashSet<Long>());\n     }\n \n-    @Override\n-    public Set<ExternalResource> getResources() {\n-        Set<ExternalResource> result = new HashSet<>();\n-        result.addAll(super.getResources());\n-        for (Group group : getGroups()) {\n-            result.addAll(group.getResources());\n-        }\n-\n-        return result;\n-    }\n-\n-    @Override\n-    public Set<? extends ExternalResource> getOwnResources() {\n-        return super.getResources();\n-    }\n-\n     @Override\n     public String getPassword() {\n         return password;"},{"sha":"19fc7cf279850eea82dbf7c2472c7a762da39c68","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/UserValidator.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FUserValidator.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -25,7 +25,6 @@\n import org.apache.syncope.common.lib.types.AccountPolicySpec;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.common.lib.types.PasswordPolicySpec;\n-import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n import org.apache.syncope.core.persistence.api.entity.AccountPolicy;\n import org.apache.syncope.core.persistence.api.entity.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.PasswordPolicy;\n@@ -36,6 +35,7 @@\n import org.apache.syncope.core.misc.policy.PasswordPolicyEnforcer;\n import org.apache.syncope.core.misc.policy.PolicyEvaluator;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -48,7 +48,7 @@ public class UserValidator extends AbstractValidator<UserCheck, User> {\n     private String anonymousUser;\n \n     @Autowired\n-    private PolicyDAO policyDAO;\n+    private UserDAO userDAO;\n \n     @Autowired\n     private RealmDAO realmDAO;\n@@ -155,7 +155,7 @@ private List<PasswordPolicy> getPasswordPolicies(final User user) {\n         PasswordPolicy policy;\n \n         // add resource policies\n-        for (ExternalResource resource : user.getResources()) {\n+        for (ExternalResource resource : userDAO.findAllResources(user)) {\n             policy = resource.getPasswordPolicy();\n             if (policy != null) {\n                 policies.add(policy);\n@@ -179,7 +179,7 @@ private List<AccountPolicy> getAccountPolicies(final User user) {\n         AccountPolicy policy;\n \n         // add resource policies\n-        for (ExternalResource resource : user.getResources()) {\n+        for (ExternalResource resource : userDAO.findAllResources(user)) {\n             policy = resource.getAccountPolicy();\n             if (policy != null) {\n                 policies.add(policy);"},{"sha":"8c58d33a0c0c0fc0cff632b69ecdb9028b3535d4","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-oracle.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-oracle.xml?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -57,6 +57,15 @@ under the License.\n     </attributes>\n   </entity>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPADynRoleMembership\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_DynRoleMembership\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_DynRoleMembership\" pk-column-value=\"SEQ_DynRoleMembership\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+\n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">\n@@ -75,6 +84,15 @@ under the License.\n     </attributes>\n   </entity>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPADynGroupMembership\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_DynGroupMembership\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_DynGroupMembership\" pk-column-value=\"SEQ_DynGroupMembership\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"bd7f664eacf7015d86fcb5ed02b61199700d0ece","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm-sqlserver.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm-sqlserver.xml?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -57,6 +57,15 @@ under the License.\n     </attributes>\n   </entity>\n   \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPADynRoleMembership\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_DynRoleMembership\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_DynRoleMembership\" pk-column-value=\"SEQ_DynRoleMembership\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">\n@@ -75,6 +84,15 @@ under the License.\n     </attributes>\n   </entity>\n \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPADynGroupMembership\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_DynGroupMembership\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_DynGroupMembership\" pk-column-value=\"SEQ_DynGroupMembership\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"5562674e8903907dd27325c3b43308ec8ed4572b","filename":"core/persistence-jpa/src/main/resources/META-INF/spring-orm.xml","status":"modified","additions":20,"deletions":2,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-orm.xml?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -56,7 +56,16 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n-\n+  \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPADynRoleMembership\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_DynRoleMembership\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_DynRoleMembership\" pk-column-value=\"SEQ_DynRoleMembership\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.user.JPAUser\">\n     <attributes>\n       <id name=\"id\">\n@@ -74,7 +83,16 @@ under the License.\n       </id>\n     </attributes>\n   </entity>\n-\n+  \n+  <entity class=\"org.apache.syncope.core.persistence.jpa.entity.JPADynGroupMembership\">\n+    <attributes>\n+      <id name=\"id\">\n+        <generated-value generator=\"SEQ_DynGroupMembership\" strategy=\"TABLE\"/>\n+        <table-generator name=\"SEQ_DynGroupMembership\" pk-column-value=\"SEQ_DynGroupMembership\" initial-value=\"100\"/>\n+      </id>\n+    </attributes>\n+  </entity>\n+  \n   <entity class=\"org.apache.syncope.core.persistence.jpa.entity.membership.JPAMembership\">\n     <attributes>\n       <id name=\"id\">"},{"sha":"f7bce20aa7c8cfa643cb9f9b315a72e011ac47fa","filename":"core/persistence-jpa/src/main/resources/views.xml","status":"modified","additions":23,"deletions":3,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fviews.xml?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -68,9 +68,29 @@ under the License.\n   <entry key=\"user_search_membership\">\n     CREATE VIEW user_search_membership AS\n \n-    SELECT m.user_id AS subject_id, r.id AS group_id, r.name AS group_name\n-    FROM Membership m, SyncopeGroup r\n-    WHERE m.group_id = r.id\n+    SELECT m.user_id AS subject_id, g.id AS group_id, g.name AS group_name\n+    FROM Membership m, SyncopeGroup g\n+    WHERE m.group_id = g.id\n+  </entry>\n+  <entry key=\"user_search_dyngroupmembership\">\n+    CREATE VIEW user_search_dyngroupmembership AS\n+\n+    SELECT ds.user_id AS subject_id, d.group_id AS group_id\n+    FROM DynGroupMembership d, DynGroupMembership_SyncopeUser ds\n+    WHERE d.id = ds.dynGroupMembership_id\n+  </entry>\n+  <entry key=\"user_search_role\">\n+    CREATE VIEW user_search_role AS\n+\n+    SELECT ss.user_id AS subject_id, ss.role_id AS role_id\n+    FROM SyncopeUser_SyncopeRole ss\n+  </entry>\n+  <entry key=\"user_search_dynrolemembership\">\n+    CREATE VIEW user_search_dynrolemembership AS\n+\n+    SELECT ds.user_id AS subject_id, d.role_id AS role_id\n+    FROM DynRoleMembership d, DynRoleMembership_SyncopeUser ds\n+    WHERE d.id = ds.dynRoleMembership_id\n   </entry>\n   <entry key=\"user_search_resource\">\n     CREATE VIEW user_search_resource AS"},{"sha":"4ad4dd06586780ff9c23fda56123f2e4e2182c94","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/AttrTest.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FAttrTest.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -56,7 +56,7 @@ public class AttrTest extends AbstractTest {\n     private PlainAttrDAO plainAttrDAO;\n \n     @Autowired\n-    private PlainSchemaDAO userSchemaDAO;\n+    private PlainSchemaDAO plainSchemaDAO;\n \n     @Test\n     public void findById() {\n@@ -78,7 +78,7 @@ public void read() {\n     public void save() throws ClassNotFoundException {\n         User user = userDAO.find(1L);\n \n-        UPlainSchema emailSchema = userSchemaDAO.find(\"email\", UPlainSchema.class);\n+        UPlainSchema emailSchema = plainSchemaDAO.find(\"email\", UPlainSchema.class);\n         assertNotNull(emailSchema);\n \n         UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n@@ -106,7 +106,7 @@ public void save() throws ClassNotFoundException {\n     public void saveWithEnum() throws ClassNotFoundException {\n         User user = userDAO.find(1L);\n \n-        UPlainSchema gender = userSchemaDAO.find(\"gender\", UPlainSchema.class);\n+        UPlainSchema gender = plainSchemaDAO.find(\"gender\", UPlainSchema.class);\n         assertNotNull(gender);\n         assertNotNull(gender.getType());\n         assertNotNull(gender.getEnumerationValues());\n@@ -140,10 +140,10 @@ public void saveWithEnum() throws ClassNotFoundException {\n     public void validateAndSave() {\n         User user = userDAO.find(1L);\n \n-        final UPlainSchema emailSchema = userSchemaDAO.find(\"email\", UPlainSchema.class);\n+        final UPlainSchema emailSchema = plainSchemaDAO.find(\"email\", UPlainSchema.class);\n         assertNotNull(emailSchema);\n \n-        final UPlainSchema fullnameSchema = userSchemaDAO.find(\"fullname\", UPlainSchema.class);\n+        final UPlainSchema fullnameSchema = plainSchemaDAO.find(\"fullname\", UPlainSchema.class);\n         assertNotNull(fullnameSchema);\n \n         UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n@@ -176,7 +176,7 @@ public void validateAndSave() {\n     public void saveWithEncrypted() throws Exception {\n         User user = userDAO.find(1L);\n \n-        final UPlainSchema obscureSchema = userSchemaDAO.find(\"obscure\", UPlainSchema.class);\n+        final UPlainSchema obscureSchema = plainSchemaDAO.find(\"obscure\", UPlainSchema.class);\n         assertNotNull(obscureSchema);\n         assertNotNull(obscureSchema.getSecretKey());\n         assertNotNull(obscureSchema.getCipherAlgorithm());\n@@ -200,7 +200,7 @@ public void saveWithEncrypted() throws Exception {\n     public void saveWithBinary() throws UnsupportedEncodingException {\n         User user = userDAO.find(1L);\n \n-        final UPlainSchema photoSchema = userSchemaDAO.find(\"photo\", UPlainSchema.class);\n+        final UPlainSchema photoSchema = plainSchemaDAO.find(\"photo\", UPlainSchema.class);\n         assertNotNull(photoSchema);\n         assertNotNull(photoSchema.getMimeType());\n \n@@ -229,7 +229,7 @@ public void delete() {\n \n         plainAttrDAO.delete(attribute.getKey(), UPlainAttr.class);\n \n-        UPlainSchema schema = userSchemaDAO.find(attrSchemaName, UPlainSchema.class);\n+        UPlainSchema schema = plainSchemaDAO.find(attrSchemaName, UPlainSchema.class);\n         assertNotNull(\"user attribute schema deleted when deleting values\", schema);\n     }\n }"},{"sha":"7a20e89f7b974d1319de69a2495308c0eed3e6a9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/RoleTest.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FRoleTest.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -28,7 +28,6 @@\n import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n-import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.Test;\n@@ -41,9 +40,6 @@ public class RoleTest extends AbstractTest {\n     @Autowired\n     private RoleDAO roleDAO;\n \n-    @Autowired\n-    private SubjectSearchDAO searchDAO;\n-\n     @Autowired\n     private RealmDAO realmDAO;\n "},{"sha":"22e7494e0f8fa81d18ec8f6fa567cb10888bd330","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/entity/SubjectSearchTest.java","status":"modified","additions":34,"deletions":22,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FSubjectSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FSubjectSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FSubjectSearchTest.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -36,9 +36,10 @@\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.GroupCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.SubjectCond;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -65,14 +66,16 @@ public void userMatch() {\n         User user = userDAO.find(1L);\n         assertNotNull(user);\n \n-        MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setGroupId(5L);\n+        GroupCond groupCond = new GroupCond();\n+        groupCond.setGroupKey(5L);\n+        assertFalse(searchDAO.matches(user, SearchCond.getLeafCond(groupCond), SubjectType.USER));\n \n-        assertFalse(searchDAO.matches(user, SearchCond.getLeafCond(membershipCond), SubjectType.USER));\n+        groupCond.setGroupKey(1L);\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(groupCond), SubjectType.USER));\n \n-        membershipCond.setGroupId(1L);\n-\n-        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(membershipCond), SubjectType.USER));\n+        RoleCond roleCond = new RoleCond();\n+        roleCond.setRoleKey(3L);\n+        assertTrue(searchDAO.matches(user, SearchCond.getLeafCond(roleCond), SubjectType.USER));\n     }\n \n     @Test\n@@ -93,15 +96,15 @@ public void searchWithLikeCondition() {\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"%o%\");\n \n-        MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setGroupId(1L);\n+        GroupCond groupCond = new GroupCond();\n+        groupCond.setGroupKey(1L);\n \n         AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n         SearchCond subCond = SearchCond.getAndCond(SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(\n-                membershipCond));\n+                groupCond));\n \n         assertTrue(subCond.isValid());\n \n@@ -157,15 +160,15 @@ public void searchByPageAndSize() {\n         fullnameLeafCond.setSchema(\"fullname\");\n         fullnameLeafCond.setExpression(\"%o%\");\n \n-        MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setGroupId(1L);\n+        GroupCond groupCond = new GroupCond();\n+        groupCond.setGroupKey(1L);\n \n         AttributeCond loginDateCond = new AttributeCond(AttributeCond.Type.EQ);\n         loginDateCond.setSchema(\"loginDate\");\n         loginDateCond.setExpression(\"2009-05-26\");\n \n         SearchCond subCond = SearchCond.getAndCond(\n-                SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(membershipCond));\n+                SearchCond.getLeafCond(fullnameLeafCond), SearchCond.getLeafCond(groupCond));\n \n         assertTrue(subCond.isValid());\n \n@@ -187,24 +190,35 @@ public void searchByPageAndSize() {\n     }\n \n     @Test\n-    public void searchByMembership() {\n-        MembershipCond membershipCond = new MembershipCond();\n-        membershipCond.setGroupId(1L);\n+    public void searchByGroup() {\n+        GroupCond groupCond = new GroupCond();\n+        groupCond.setGroupKey(1L);\n \n         List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getLeafCond(membershipCond), SubjectType.USER);\n+                SearchCond.getLeafCond(groupCond), SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(2, users.size());\n \n-        membershipCond = new MembershipCond();\n-        membershipCond.setGroupId(5L);\n+        groupCond = new GroupCond();\n+        groupCond.setGroupKey(5L);\n \n         users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                SearchCond.getNotLeafCond(membershipCond), SubjectType.USER);\n+                SearchCond.getNotLeafCond(groupCond), SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(5, users.size());\n     }\n \n+    @Test\n+    public void searchByRole() {\n+        RoleCond roleCond = new RoleCond();\n+        roleCond.setRoleKey(3L);\n+\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                SearchCond.getLeafCond(roleCond), SubjectType.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+    }\n+\n     @Test\n     public void searchByIsNull() {\n         AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.ISNULL);\n@@ -233,11 +247,9 @@ public void searchByResource() {\n         ws1.setResourceName(\"ws-target-resource-list-mappings-2\");\n \n         SearchCond searchCondition = SearchCond.getAndCond(SearchCond.getNotLeafCond(ws2), SearchCond.getLeafCond(ws1));\n-\n         assertTrue(searchCondition.isValid());\n \n         List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, searchCondition, SubjectType.USER);\n-\n         assertNotNull(users);\n         assertEquals(1, users.size());\n     }"},{"sha":"d6d99ce50c4b88a116a6cf9e76bec66ca9ea7e45","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/GroupTest.java","status":"modified","additions":115,"deletions":1,"changes":116,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FGroupTest.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -24,32 +24,51 @@\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n \n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n import java.util.List;\n+import javax.persistence.EntityManager;\n+import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.types.AttributableType;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrValueDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainSchema;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADynGroupMembership;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n public class GroupTest extends AbstractTest {\n \n+    @Autowired\n+    private EntityManager entityManager;\n+\n     @Autowired\n     private UserDAO userDAO;\n \n     @Autowired\n     private GroupDAO groupDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n     @Autowired\n     private PlainSchemaDAO plainSchemaDAO;\n \n@@ -68,6 +87,7 @@ public void saveWithTwoOwners() {\n         assertNotNull(\"did not find expected user\", user);\n \n         Group group = entityFactory.newEntity(Group.class);\n+        group.setRealm(realmDAO.getRoot());\n         group.setName(\"error\");\n         group.setUserOwner(user);\n         group.setGroupOwner(root);\n@@ -98,9 +118,103 @@ public void delete() {\n         groupDAO.flush();\n \n         assertNull(groupDAO.find(2L));\n-        assertEquals(userDAO.find(2L).getGroups().size(), 2);\n+        assertEquals(userDAO.findAllGroups(userDAO.find(2L)).size(), 2);\n         assertNull(plainAttrDAO.find(700L, GPlainAttr.class));\n         assertNull(plainAttrValueDAO.find(41L, GPlainAttrValue.class));\n         assertNotNull(plainSchemaDAO.find(\"icon\", GPlainSchema.class));\n     }\n+\n+    /**\n+     * Static copy of {@link org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO} method with same signature:\n+     * required for avoiding creating of a new transaction - good for general use case but bad for the way how\n+     * this test class is architected.\n+     */\n+    private Collection<Group> findDynGroupMemberships(final User user) {\n+        TypedQuery<Group> query = entityManager.createQuery(\n+                \"SELECT e.group FROM \" + JPADynGroupMembership.class.getSimpleName()\n+                + \" e WHERE :user MEMBER OF e.users\", Group.class);\n+        query.setParameter(\"user\", user);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Test\n+    public void dynMembership() {\n+        // 0. create user matching the condition below\n+        User user = entityFactory.newEntity(User.class);\n+        user.setUsername(\"username\");\n+        user.setRealm(realmDAO.find(\"/even/two\"));\n+\n+        UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n+        attribute.setSchema(plainSchemaDAO.find(\"cool\", UPlainSchema.class));\n+        attribute.setOwner(user);\n+        attribute.addValue(\"true\", attrUtilsFactory.getInstance(AttributableType.USER));\n+        user.addPlainAttr(attribute);\n+\n+        user = userDAO.save(user);\n+        Long newUserKey = user.getKey();\n+        assertNotNull(newUserKey);\n+\n+        // 1. create group with dynamic membership\n+        Group group = entityFactory.newEntity(Group.class);\n+        group.setRealm(realmDAO.getRoot());\n+        group.setName(\"new\");\n+\n+        DynGroupMembership dynMembership = entityFactory.newEntity(DynGroupMembership.class);\n+        dynMembership.setFIQLCond(\"cool==true\");\n+        dynMembership.setGroup(group);\n+\n+        group.setDynMembership(dynMembership);\n+\n+        Group actual = groupDAO.save(group);\n+        assertNotNull(actual);\n+\n+        groupDAO.flush();\n+\n+        // 2. verify that dynamic membership is there\n+        actual = groupDAO.find(actual.getKey());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getDynMembership());\n+        assertNotNull(actual.getDynMembership().getKey());\n+        assertEquals(actual, actual.getDynMembership().getGroup());\n+\n+        // 3. verify that expected users have the created group dynamically assigned\n+        assertEquals(2, actual.getDynMembership().getUsers().size());\n+        assertEquals(new HashSet<>(Arrays.asList(4L, newUserKey)),\n+                CollectionUtils.collect(actual.getDynMembership().getUsers(), new Transformer<User, Long>() {\n+\n+                    @Override\n+                    public Long transform(final User input) {\n+                        return input.getKey();\n+                    }\n+                }, new HashSet<Long>()));\n+\n+        user = userDAO.find(4L);\n+        assertNotNull(user);\n+        Collection<Group> dynGroupMemberships = findDynGroupMemberships(user);\n+        assertEquals(1, dynGroupMemberships.size());\n+        assertTrue(dynGroupMemberships.contains(actual.getDynMembership().getGroup()));\n+\n+        // 4. delete the new user and verify that dynamic membership was updated\n+        userDAO.delete(newUserKey);\n+\n+        userDAO.flush();\n+\n+        actual = groupDAO.find(actual.getKey());\n+        assertEquals(1, actual.getDynMembership().getUsers().size());\n+        assertEquals(4L, actual.getDynMembership().getUsers().get(0).getKey(), 0);\n+\n+        // 5. delete group and verify that dynamic membership was also removed\n+        Long dynMembershipKey = actual.getDynMembership().getKey();\n+\n+        groupDAO.delete(actual);\n+\n+        groupDAO.flush();\n+\n+        assertNull(entityManager.find(JPADynGroupMembership.class, dynMembershipKey));\n+\n+        dynGroupMemberships = findDynGroupMemberships(user);\n+        assertTrue(dynGroupMemberships.isEmpty());\n+    }\n+\n }"},{"sha":"868f1045e66f20cb086736fe3c287867100a43ad","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/ResourceTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FResourceTest.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -225,7 +225,7 @@ public void delete() {\n         for (Long id : userIds) {\n             User actualUser = userDAO.find(id);\n             assertNotNull(actualUser);\n-            for (ExternalResource res : actualUser.getResources()) {\n+            for (ExternalResource res : userDAO.findAllResources(actualUser)) {\n                 assertFalse(res.getKey().equalsIgnoreCase(resource.getKey()));\n             }\n         }"},{"sha":"52e34519faa0aead570e4958a8dc6987e1d03d6f","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/RoleTest.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FRoleTest.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.relationship;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+import static org.junit.Assert.assertTrue;\n+\n+import java.util.Arrays;\n+import java.util.Collection;\n+import java.util.HashSet;\n+import javax.persistence.EntityManager;\n+import javax.persistence.TypedQuery;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.types.AttributableType;\n+import org.apache.syncope.common.lib.types.Entitlement;\n+import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.DynRoleMembership;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainAttr;\n+import org.apache.syncope.core.persistence.api.entity.user.UPlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.persistence.jpa.entity.JPADynRoleMembership;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional\n+public class RoleTest extends AbstractTest {\n+\n+    @Autowired\n+    private EntityManager entityManager;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private PlainSchemaDAO plainSchemaDAO;\n+\n+    @Autowired\n+    private UserDAO userDAO;\n+\n+    /**\n+     * Static copy of {@link org.apache.syncope.core.persistence.jpa.dao.JPAUserDAO} method with same signature:\n+     * required for avoiding creating new transaction - good for general use case but bad for the way how\n+     * this test class is architected.\n+     */\n+    private Collection<Role> findDynRoleMemberships(final User user) {\n+        TypedQuery<Role> query = entityManager.createQuery(\n+                \"SELECT e.role FROM \" + JPADynRoleMembership.class.getSimpleName()\n+                + \" e WHERE :user MEMBER OF e.users\", Role.class);\n+        query.setParameter(\"user\", user);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Test\n+    public void dynMembership() {\n+        // 0. create user matching the condition below\n+        User user = entityFactory.newEntity(User.class);\n+        user.setUsername(\"username\");\n+        user.setRealm(realmDAO.find(\"/even/two\"));\n+\n+        UPlainAttr attribute = entityFactory.newEntity(UPlainAttr.class);\n+        attribute.setSchema(plainSchemaDAO.find(\"cool\", UPlainSchema.class));\n+        attribute.setOwner(user);\n+        attribute.addValue(\"true\", attrUtilsFactory.getInstance(AttributableType.USER));\n+        user.addPlainAttr(attribute);\n+\n+        user = userDAO.save(user);\n+        Long newUserKey = user.getKey();\n+        assertNotNull(newUserKey);\n+\n+        // 1. create role with dynamic membership\n+        Role role = entityFactory.newEntity(Role.class);\n+        role.setName(\"new\");\n+        role.addRealm(realmDAO.getRoot());\n+        role.addRealm(realmDAO.find(\"/even/two\"));\n+        role.getEntitlements().add(Entitlement.LOG_LIST);\n+        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+\n+        DynRoleMembership dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n+        dynMembership.setFIQLCond(\"cool==true\");\n+        dynMembership.setRole(role);\n+\n+        role.setDynMembership(dynMembership);\n+\n+        Role actual = roleDAO.save(role);\n+        assertNotNull(actual);\n+\n+        roleDAO.flush();\n+\n+        // 2. verify that dynamic membership is there\n+        actual = roleDAO.find(actual.getKey());\n+        assertNotNull(actual);\n+        assertNotNull(actual.getDynMembership());\n+        assertNotNull(actual.getDynMembership().getKey());\n+        assertEquals(actual, actual.getDynMembership().getRole());\n+\n+        // 3. verify that expected users have the created role dynamically assigned\n+        assertEquals(2, actual.getDynMembership().getUsers().size());\n+        assertEquals(new HashSet<>(Arrays.asList(4L, newUserKey)),\n+                CollectionUtils.collect(actual.getDynMembership().getUsers(), new Transformer<User, Long>() {\n+\n+                    @Override\n+                    public Long transform(final User input) {\n+                        return input.getKey();\n+                    }\n+                }, new HashSet<Long>()));\n+\n+        user = userDAO.find(4L);\n+        assertNotNull(user);\n+        Collection<Role> dynRoleMemberships = findDynRoleMemberships(user);\n+        assertEquals(1, dynRoleMemberships.size());\n+        assertTrue(dynRoleMemberships.contains(actual.getDynMembership().getRole()));\n+\n+        // 4. delete the new user and verify that dynamic membership was updated\n+        userDAO.delete(newUserKey);\n+\n+        userDAO.flush();\n+\n+        actual = roleDAO.find(actual.getKey());\n+        assertEquals(1, actual.getDynMembership().getUsers().size());\n+        assertEquals(4L, actual.getDynMembership().getUsers().get(0).getKey(), 0);\n+\n+        // 5. delete role and verify that dynamic membership was also removed\n+        Long dynMembershipKey = actual.getDynMembership().getKey();\n+\n+        roleDAO.delete(actual);\n+\n+        roleDAO.flush();\n+\n+        assertNull(entityManager.find(JPADynRoleMembership.class, dynMembershipKey));\n+\n+        dynRoleMemberships = findDynRoleMemberships(user);\n+        assertTrue(dynRoleMemberships.isEmpty());\n+    }\n+}"},{"sha":"025d7cc554a0f442f873c5823848b57ba5bd294c","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/relationship/SubjectSearchTest.java","status":"modified","additions":48,"deletions":5,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FSubjectSearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FSubjectSearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Frelationship%2FSubjectSearchTest.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -26,11 +26,17 @@\n import java.util.List;\n import java.util.Set;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.Entitlement;\n import org.apache.syncope.common.lib.types.SubjectType;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.SubjectSearchDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.DynRoleMembership;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n@@ -47,6 +53,12 @@ public class SubjectSearchTest extends AbstractTest {\n     @Autowired\n     private SubjectSearchDAO searchDAO;\n \n+    @Autowired\n+    private RealmDAO realmDAO;\n+\n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     @Test\n     public void issueSYNCOPE95() {\n         Set<Group> groups = new HashSet<>(groupDAO.findAll(SyncopeConstants.FULL_ADMIN_REALMS, 1, 100));\n@@ -55,18 +67,49 @@ public void issueSYNCOPE95() {\n         }\n         groupDAO.flush();\n \n-        final AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n+        AttributeCond coolLeafCond = new AttributeCond(AttributeCond.Type.EQ);\n         coolLeafCond.setSchema(\"cool\");\n         coolLeafCond.setExpression(\"true\");\n \n-        final SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n+        SearchCond cond = SearchCond.getLeafCond(coolLeafCond);\n         assertTrue(cond.isValid());\n \n-        final List<User> users =\n-                searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, SubjectType.USER);\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS, cond, SubjectType.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n-        assertEquals(Long.valueOf(4L), users.get(0).getKey());\n+        assertEquals(4L, users.get(0).getKey(), 0);\n+    }\n+\n+    @Test\n+    public void searchByDynMembership() {\n+        // 1. create role with dynamic membership\n+        Role role = entityFactory.newEntity(Role.class);\n+        role.setName(\"new\");\n+        role.addRealm(realmDAO.getRoot());\n+        role.addRealm(realmDAO.find(\"/even/two\"));\n+        role.getEntitlements().add(Entitlement.LOG_LIST);\n+        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+\n+        DynRoleMembership dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n+        dynMembership.setFIQLCond(\"cool==true\");\n+        dynMembership.setRole(role);\n+\n+        role.setDynMembership(dynMembership);\n+\n+        role = roleDAO.save(role);\n+        assertNotNull(role);\n+\n+        roleDAO.flush();\n+\n+        // 2. search user by this dynamic role\n+        RoleCond roleCond = new RoleCond();\n+        roleCond.setRoleKey(role.getKey());\n+\n+        List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n+                SearchCond.getLeafCond(roleCond), SubjectType.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+        assertEquals(4L, users.get(0).getKey(), 0);\n     }\n }"},{"sha":"c1eff8c65f24274c0a84c94ed7b299434237ec25","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultUserProvisioningManager.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultUserProvisioningManager.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -230,7 +230,7 @@ public Pair<Long, List<PropagationStatus>> suspend(final User user, final Status\n \n     protected List<PropagationStatus> propagateStatus(final User user, final StatusMod statusMod) {\n         Collection<String> noPropResourceNames =\n-                CollectionUtils.removeAll(user.getResourceNames(), statusMod.getResourceNames());\n+                CollectionUtils.removeAll(userDAO.findAllResourceNames(user), statusMod.getResourceNames());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 user, statusMod.getType() != StatusMod.ModType.SUSPEND, noPropResourceNames);\n@@ -269,11 +269,11 @@ public void innerSuspend(final User user, final boolean propagate) {\n     public List<PropagationStatus> deprovision(final Long userKey, final Collection<String> resources) {\n         final User user = userDAO.authFetch(userKey);\n \n-        Collection<String> noPropResourceNames = CollectionUtils.removeAll(user.getResourceNames(), resources);\n-\n-        final List<PropagationTask> tasks =\n-                propagationManager.getUserDeleteTasks(userKey, new HashSet<>(resources), noPropResourceNames);\n-        final PropagationReporter propagationReporter =\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(\n+                userKey,\n+                new HashSet<>(resources),\n+                CollectionUtils.removeAll(userDAO.findAllResourceNames(user), resources));\n+        PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {\n             taskExecutor.execute(tasks, propagationReporter);"},{"sha":"14c00c752abe736b341a868133cbdd3648a5f784","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/VirAttrHandler.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FVirAttrHandler.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -51,6 +51,7 @@\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.UVirAttr;\n import org.apache.syncope.core.persistence.api.entity.user.UVirSchema;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -132,11 +133,13 @@ public PropagationByResource fillVirtual(final Attributable attributable,\n \n         PropagationByResource propByRes = new PropagationByResource();\n \n-        final Set<ExternalResource> externalResources = new HashSet<>();\n-        if (attributable instanceof Subject) {\n-            externalResources.addAll(((Subject<?, ?, ?>) attributable).getResources());\n+        Set<ExternalResource> externalResources = new HashSet<>();\n+        if (attributable instanceof User) {\n+            externalResources.addAll(userDAO.findAllResources((User) attributable));\n+        } else if (attributable instanceof Group) {\n+            externalResources.addAll(((Group) attributable).getResources());\n         } else if (attributable instanceof Membership) {\n-            externalResources.addAll(((Membership) attributable).getUser().getResources());\n+            externalResources.addAll(userDAO.findAllResources(((Membership) attributable).getUser()));\n             externalResources.addAll(((Membership) attributable).getGroup().getResources());\n         }\n "},{"sha":"b94ffa2fd5fd48979a65e5110b638f479482f624","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAttributableDataBinder.java","status":"modified","additions":23,"deletions":15,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAttributableDataBinder.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -91,6 +91,7 @@\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -240,7 +241,7 @@ private boolean evaluateMandatoryCondition(final AttributableUtils attrUtils, fi\n         Collection<MappingItem> mappings = MappingUtils.getMatchingMappingItems(\n                 attrUtils.getMappingItems(resource, MappingPurpose.PROPAGATION), intAttrName, intMappingType);\n         for (Iterator<MappingItem> itor = mappings.iterator(); itor.hasNext() && !result;) {\n-            final MappingItem mapping = itor.next();\n+            MappingItem mapping = itor.next();\n             result |= JexlUtils.evaluateMandatoryCondition(mapping.getMandatoryCondition(), attributable);\n         }\n \n@@ -252,15 +253,17 @@ private boolean evaluateMandatoryCondition(final AttributableUtils attrUtils,\n \n         boolean result = false;\n \n-        if (attributable instanceof Subject) {\n-            for (Iterator<? extends ExternalResource> itor =\n-                    ((Subject<?, ?, ?>) attributable).getResources().iterator(); itor.hasNext() && !result;) {\n-\n-                final ExternalResource resource = itor.next();\n-                if (resource.isEnforceMandatoryCondition()) {\n-                    result |= evaluateMandatoryCondition(\n-                            attrUtils, resource, attributable, intAttrName, intMappingType);\n-                }\n+        Iterable<? extends ExternalResource> iterable = attributable instanceof User\n+                ? userDAO.findAllResources((User) attributable)\n+                : attributable instanceof Group\n+                        ? ((Group) attributable).getResources()\n+                        : Collections.<ExternalResource>emptySet();\n+\n+        for (Iterator<? extends ExternalResource> itor = iterable.iterator(); itor.hasNext() && !result;) {\n+            ExternalResource resource = itor.next();\n+            if (resource.isEnforceMandatoryCondition()) {\n+                result |= evaluateMandatoryCondition(\n+                        attrUtils, resource, attributable, intAttrName, intMappingType);\n             }\n         }\n \n@@ -427,11 +430,13 @@ protected PropagationByResource fill(final Attributable attributable,\n             LOG.debug(\"Resources to be added:\\n{}\", propByRes);\n         }\n \n-        final Set<ExternalResource> externalResources = new HashSet<>();\n-        if (attributable instanceof Subject) {\n-            externalResources.addAll(((Subject<?, ?, ?>) attributable).getResources());\n+        Set<ExternalResource> externalResources = new HashSet<>();\n+        if (attributable instanceof User) {\n+            externalResources.addAll(userDAO.findAllResources((User) attributable));\n+        } else if (attributable instanceof Group) {\n+            externalResources.addAll(((Group) attributable).getResources());\n         } else if (attributable instanceof Membership) {\n-            externalResources.addAll(((Membership) attributable).getUser().getResources());\n+            externalResources.addAll(userDAO.findAllResources(((Membership) attributable).getUser()));\n             externalResources.addAll(((Membership) attributable).getGroup().getResources());\n         }\n \n@@ -777,7 +782,10 @@ protected void fillTO(final AbstractAttributableTO attributableTO,\n     protected Map<String, String> getAccountIds(final Subject<?, ?, ?> subject, final AttributableType type) {\n         Map<String, String> accountIds = new HashMap<>();\n \n-        for (ExternalResource resource : subject.getResources()) {\n+        Iterable<? extends ExternalResource> iterable = subject instanceof User\n+                ? userDAO.findAllResources((User) subject)\n+                : ((Group) subject).getResources();\n+        for (ExternalResource resource : iterable) {\n             if ((type == AttributableType.USER && resource.getUmapping() != null)\n                     || (type == AttributableType.GROUP && resource.getGmapping() != null)) {\n "},{"sha":"efe77712f7dac78a97791b23e94099a23f690414","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":42,"deletions":2,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import static org.apache.syncope.core.provisioning.java.data.AbstractAttributableDataBinder.LOG;\n-\n import java.util.ArrayList;\n import java.util.List;\n import java.util.Map;\n@@ -49,6 +47,9 @@\n import org.apache.syncope.common.lib.types.PropagationByResource;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n+import org.apache.syncope.core.misc.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.DynGroupMembership;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Component;\n import org.springframework.transaction.annotation.Transactional;\n@@ -89,6 +90,25 @@ private <T extends AttrTemplate<S>, S extends Schema> void setAttrTemplates(\n         }\n     }\n \n+    private void setDynMembership(final Group group, final String dynMembershipFIQL) {\n+        SearchCond dynMembershipCond = SearchCondConverter.convert(dynMembershipFIQL);\n+        if (!dynMembershipCond.isValid()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(dynMembershipFIQL);\n+            throw sce;\n+        }\n+\n+        DynGroupMembership dynMembership;\n+        if (group.getDynMembership() == null) {\n+            dynMembership = entityFactory.newEntity(DynGroupMembership.class);\n+            dynMembership.setGroup(group);\n+            group.setDynMembership(dynMembership);\n+        } else {\n+            dynMembership = group.getDynMembership();\n+        }\n+        dynMembership.setFIQLCond(dynMembershipFIQL);\n+    }\n+\n     @Override\n     public Group create(final Group group, final GroupTO groupTO) {\n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n@@ -132,6 +152,10 @@ public Group create(final Group group, final GroupTO groupTO) {\n             }\n         }\n \n+        if (groupTO.getDynMembershipCond() != null) {\n+            setDynMembership(group, groupTO.getDynMembershipCond());\n+        }\n+\n         return group;\n     }\n \n@@ -202,6 +226,18 @@ public PropagationByResource update(final Group toBeUpdated, final GroupMod grou\n             }\n         }\n \n+        // dynamic membership\n+        if (group.getDynMembership() != null && groupMod.getDynMembershipCond() == null) {\n+            group.setDynMembership(null);\n+        } else if (group.getDynMembership() == null && groupMod.getDynMembershipCond() != null) {\n+            setDynMembership(group, groupMod.getDynMembershipCond());\n+        } else if (group.getDynMembership() != null && groupMod.getDynMembershipCond() != null\n+                && !group.getDynMembership().getFIQLCond().equals(groupMod.getDynMembershipCond())) {\n+\n+            group.getDynMembership().getUsers().clear();\n+            setDynMembership(group, groupMod.getDynMembershipCond());\n+        }\n+\n         return propByRes;\n     }\n \n@@ -251,6 +287,10 @@ public GroupTO getGroupTO(final Group group) {\n             groupTO.getMVirAttrTemplates().add(template.getSchema().getKey());\n         }\n \n+        if (group.getDynMembership() != null) {\n+            groupTO.setDynMembershipCond(group.getDynMembership().getFIQLCond());\n+        }\n+\n         return groupTO;\n     }\n "},{"sha":"2f4fd2da48e7f19ba847ec6d45f20d6fa723a70e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/RoleDataBinderImpl.java","status":"modified","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FRoleDataBinderImpl.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -20,8 +20,13 @@\n \n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.RoleTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.misc.search.SearchCondConverter;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.DynRoleMembership;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -42,6 +47,25 @@ public class RoleDataBinderImpl implements RoleDataBinder {\n     @Autowired\n     private EntityFactory entityFactory;\n \n+    private void setDynMembership(final Role role, final String dynMembershipFIQL) {\n+        SearchCond dynMembershipCond = SearchCondConverter.convert(dynMembershipFIQL);\n+        if (!dynMembershipCond.isValid()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+            sce.getElements().add(dynMembershipFIQL);\n+            throw sce;\n+        }\n+\n+        DynRoleMembership dynMembership;\n+        if (role.getDynMembership() == null) {\n+            dynMembership = entityFactory.newEntity(DynRoleMembership.class);\n+            dynMembership.setRole(role);\n+            role.setDynMembership(dynMembership);\n+        } else {\n+            dynMembership = role.getDynMembership();\n+        }\n+        dynMembership.setFIQLCond(dynMembershipFIQL);\n+    }\n+\n     @Override\n     public Role create(final RoleTO roleTO) {\n         Role role = entityFactory.newEntity(Role.class);\n@@ -65,6 +89,22 @@ public void update(final Role role, final RoleTO roleTO) {\n                 role.addRealm(realm);\n             }\n         }\n+\n+        // dynamic membership\n+        if (role.getKey() == null && roleTO.getDynMembershipCond() != null) {\n+            setDynMembership(role, roleTO.getDynMembershipCond());\n+        } else {\n+            if (role.getDynMembership() != null && roleTO.getDynMembershipCond() == null) {\n+                role.setDynMembership(null);\n+            } else if (role.getDynMembership() == null && roleTO.getDynMembershipCond() != null) {\n+                setDynMembership(role, roleTO.getDynMembershipCond());\n+            } else if (role.getDynMembership() != null && roleTO.getDynMembershipCond() != null\n+                    && !role.getDynMembership().getFIQLCond().equals(roleTO.getDynMembershipCond())) {\n+\n+                role.getDynMembership().getUsers().clear();\n+                setDynMembership(role, roleTO.getDynMembershipCond());\n+            }\n+        }\n     }\n \n     @Override\n@@ -83,6 +123,10 @@ public String transform(final Realm input) {\n             }\n         }, roleTO.getRealms());\n \n+        if (role.getDynMembership() != null) {\n+            roleTO.setDynMembershipCond(role.getDynMembership().getFIQLCond());\n+        }\n+\n         return roleTO;\n     }\n "},{"sha":"317fce2d45023e0b3662556ca5a0e516408e329d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":20,"deletions":6,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,8 +18,7 @@\n  */\n package org.apache.syncope.core.provisioning.java.data;\n \n-import static org.apache.syncope.core.provisioning.java.data.AbstractAttributableDataBinder.LOG;\n-\n+import java.util.Collection;\n import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n@@ -226,7 +225,7 @@ public PropagationByResource update(final User toBeUpdated, final UserMod userMo\n \n         SyncopeClientCompositeException scce = SyncopeClientException.buildComposite();\n \n-        Set<String> currentResources = user.getResourceNames();\n+        Collection<String> currentResources = userDAO.findAllResourceNames(user);\n \n         // fetch account ids before update\n         Map<String, String> oldAccountIds = getAccountIds(user, AttributableType.USER);\n@@ -421,11 +420,10 @@ public UserTO getUserTO(final User user) {\n \n         connObjectUtils.retrieveVirAttrValues(user, attrUtilsFactory.getInstance(AttributableType.USER));\n         fillTO(userTO, user.getRealm().getFullPath(),\n-                user.getPlainAttrs(), user.getDerAttrs(), user.getVirAttrs(), user.getResources());\n+                user.getPlainAttrs(), user.getDerAttrs(), user.getVirAttrs(), userDAO.findAllResources(user));\n \n-        MembershipTO membershipTO;\n         for (Membership membership : user.getMemberships()) {\n-            membershipTO = new MembershipTO();\n+            MembershipTO membershipTO = new MembershipTO();\n \n             // set sys info\n             membershipTO.setCreator(membership.getCreator());\n@@ -447,6 +445,22 @@ public UserTO getUserTO(final User user) {\n             userTO.getMemberships().add(membershipTO);\n         }\n \n+        // dynamic memberships\n+        CollectionUtils.collect(userDAO.findDynRoleMemberships(user), new Transformer<Role, Long>() {\n+\n+            @Override\n+            public Long transform(final Role role) {\n+                return role.getKey();\n+            }\n+        }, userTO.getDynRoles());\n+        CollectionUtils.collect(userDAO.findDynGroupMemberships(user), new Transformer<Group, Long>() {\n+\n+            @Override\n+            public Long transform(final Group group) {\n+                return group.getKey();\n+            }\n+        }, userTO.getDynGroups());\n+\n         return userTO;\n     }\n "},{"sha":"64089873646ecce1cf27389e205a4f226134ac0b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/AbstractPropagationTaskExecutor.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FAbstractPropagationTaskExecutor.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -20,6 +20,7 @@\n \n import java.util.ArrayList;\n import java.util.Collection;\n+import java.util.Collections;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n@@ -50,6 +51,8 @@\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n import org.apache.syncope.core.misc.ConnObjectUtils;\n import org.apache.syncope.core.misc.ExceptionUtils2;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n import org.identityconnectors.framework.common.exceptions.ConnectorException;\n import org.identityconnectors.framework.common.objects.Attribute;\n@@ -280,7 +283,12 @@ protected void delete(final PropagationTask task, final ConnectorObject beforeOb\n              * two different memberships with the same resource).\n              */\n             Subject<?, ?, ?> subject = getSubject(task);\n-            if (subject == null || !subject.getResourceNames().contains(task.getResource().getKey())) {\n+            Collection<String> resources = subject instanceof User\n+                    ? userDAO.findAllResourceNames((User) subject)\n+                    : subject instanceof Group\n+                            ? ((Group) subject).getResourceNames()\n+                            : Collections.<String>emptySet();\n+            if (!resources.contains(task.getResource().getKey())) {\n                 LOG.debug(\"Delete {} on {}\", beforeObj.getUid(), task.getResource().getKey());\n \n                 connector.delete("},{"sha":"c246d8fc0697548fe781273b3c32b437595e54bb","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/LDAPMembershipPropagationActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FLDAPMembershipPropagationActions.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -71,7 +71,7 @@ public void before(final PropagationTask task, final ConnectorObject beforeObj)\n             User user = userDAO.find(task.getSubjectKey());\n             if (user != null) {\n                 List<String> groupAccountLinks = new ArrayList<>();\n-                for (Group group : user.getGroups()) {\n+                for (Group group : userDAO.findAllGroups(user)) {\n                     if (group.getResourceNames().contains(task.getResource().getKey())\n                             && StringUtils.isNotBlank(task.getResource().getGmapping().getAccountLink())) {\n "},{"sha":"2939095626bda0b3a7dbe7f88847cdbd57bec8ec","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/propagation/PropagationManagerImpl.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpropagation%2FPropagationManagerImpl.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -264,7 +264,7 @@ public List<PropagationTask> getUserUpdateTasks(final WorkflowResult<Pair<UserMo\n             origPropByRes.merge(wfResult.getPropByRes());\n \n             Set<String> pwdResourceNames = new HashSet<>(userMod.getPwdPropRequest().getResourceNames());\n-            Set<String> currentResourceNames = userDAO.authFetch(userMod.getKey()).getResourceNames();\n+            Collection<String> currentResourceNames = userDAO.findAllResourceNames(userDAO.authFetch(userMod.getKey()));\n             pwdResourceNames.retainAll(currentResourceNames);\n             PropagationByResource pwdPropByRes = new PropagationByResource();\n             pwdPropByRes.addAll(ResourceOperation.UPDATE, pwdResourceNames);\n@@ -312,8 +312,10 @@ public List<PropagationTask> getUpdateTasks(final Subject<?, ?, ?> subject,\n                         : vAttrsToBeUpdated, attrUtilsFactory.getInstance(subject));\n \n         // SYNCOPE-458 fill membership virtual attributes\n+        Collection<String> resourceNames;\n         if (subject instanceof User) {\n-            final User user = (User) subject;\n+            User user = (User) subject;\n+            resourceNames = userDAO.findAllResourceNames(user);\n             for (final Membership membership : user.getMemberships()) {\n                 if (membership.getVirAttrs() != null && !membership.getVirAttrs().isEmpty()) {\n                     final MembershipMod membershipMod = CollectionUtils.find(membershipsToAdd,\n@@ -334,10 +336,12 @@ public boolean evaluate(final MembershipMod membershipMod) {\n                     }\n                 }\n             }\n+        } else {\n+            resourceNames = subject.getResourceNames();\n         }\n \n         if (propByRes == null || propByRes.isEmpty()) {\n-            localPropByRes.addAll(ResourceOperation.UPDATE, subject.getResourceNames());\n+            localPropByRes.addAll(ResourceOperation.UPDATE, resourceNames);\n         } else {\n             localPropByRes.merge(propByRes);\n         }\n@@ -377,7 +381,7 @@ public boolean evaluate(final MembershipMod membershipMod) {\n     public List<PropagationTask> getUserDeleteTasks(final Long userKey, final Collection<String> noPropResourceNames) {\n \n         User user = userDAO.authFetch(userKey);\n-        return getDeleteTaskIds(user, user.getResourceNames(), noPropResourceNames);\n+        return getDeleteTaskIds(user, userDAO.findAllResourceNames(user), noPropResourceNames);\n     }\n \n     @Override\n@@ -424,7 +428,7 @@ public List<PropagationTask> getGroupDeleteTasks(\n \n     protected List<PropagationTask> getDeleteTaskIds(\n             final Subject<?, ?, ?> subject,\n-            final Set<String> resourceNames,\n+            final Collection<String> resourceNames,\n             final Collection<String> noPropResourceNames) {\n \n         final PropagationByResource propByRes = new PropagationByResource();"},{"sha":"e15f5269f7ab67c6513fc02fbef235ccfbf5d42b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/sync/AbstractPushResultHandler.java","status":"modified","additions":9,"deletions":5,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fsync%2FAbstractPushResultHandler.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.java.sync;\n \n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -43,6 +44,7 @@\n import org.apache.syncope.core.provisioning.api.sync.ProvisioningResult;\n import org.apache.syncope.core.provisioning.api.sync.PushActions;\n import org.apache.syncope.core.misc.MappingUtils;\n+import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.provisioning.api.sync.IgnoreProvisionException;\n import org.apache.syncope.core.provisioning.api.sync.SyncopePushResultHandler;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -347,20 +349,21 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n             vattrToBeUpdated.add(mod);\n         }\n \n-        final boolean changepwd;\n-\n+        boolean changepwd;\n+        Collection<String> resourceNames;\n         if (sbj instanceof User) {\n             changepwd = true;\n+            resourceNames = userDAO.findAllResourceNames((User) sbj);\n \n             // Search for memberships\n             for (Membership membership : User.class.cast(sbj).getMemberships()) {\n-                final MembershipMod membershipMod = new MembershipMod();\n+                MembershipMod membershipMod = new MembershipMod();\n                 membershipMod.setKey(membership.getKey());\n                 membershipMod.setGroup(membership.getGroup().getKey());\n \n                 for (VirAttr vattr : membership.getVirAttrs()) {\n                     membVattrToBeRemoved.remove(vattr.getSchema().getKey());\n-                    final AttrMod mod = new AttrMod();\n+                    AttrMod mod = new AttrMod();\n                     mod.setSchema(vattr.getSchema().getKey());\n                     mod.getValuesToBeAdded().addAll(vattr.getValues());\n                     membershipMod.getVirAttrsToUpdate().add(mod);\n@@ -374,9 +377,10 @@ private ResourceOperation getResourceOperation(final MatchingRule rule) {\n             }\n         } else {\n             changepwd = false;\n+            resourceNames = ((Group) sbj).getResourceNames();\n         }\n \n-        final List<String> noPropResources = new ArrayList<>(sbj.getResourceNames());\n+        List<String> noPropResources = new ArrayList<>(resourceNames);\n         noPropResources.remove(profile.getTask().getResource().getKey());\n \n         final PropagationByResource propByRes = new PropagationByResource();"},{"sha":"1849bd637a69bdf83a2739185080d27b61928a3a","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/ActivitiUserWorkflowAdapter.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FActivitiUserWorkflowAdapter.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -295,7 +295,7 @@ public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boo\n         }\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.CREATE, user.getResourceNames());\n+        propByRes.set(ResourceOperation.CREATE, userDAO.findAllResourceNames(user));\n \n         saveForFormSubmit(user, userTO.getPassword(), propByRes);\n \n@@ -415,7 +415,7 @@ protected void doDelete(final User user) {\n         doExecuteTask(user, \"delete\", null);\n \n         PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.DELETE, user.getResourceNames());\n+        propByRes.set(ResourceOperation.DELETE, userDAO.findAllResourceNames(user));\n \n         saveForFormSubmit(user, null, propByRes);\n \n@@ -695,7 +695,7 @@ public List<WorkflowFormTO> getForms() {\n                     taskCandidateOrAssigned(user.getKey().toString())));\n \n             List<String> candidateGroups = new ArrayList<>();\n-            for (Long groupId : user.getGroupKeys()) {\n+            for (Long groupId : userDAO.findAllGroupKeys(user)) {\n                 candidateGroups.add(groupId.toString());\n             }\n             if (!candidateGroups.isEmpty()) {"},{"sha":"b1f1c8c1f44dd454a60174e57590c84c41b91b09","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeGroupManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeGroupManager.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -67,7 +67,7 @@ public List<Group> findGroupsByUser(final String userId) {\n         User user = userDAO.find(userId);\n         if (user != null) {\n             result = new ArrayList<>();\n-            for (Long groupId : user.getGroupKeys()) {\n+            for (Long groupId : userDAO.findAllGroupKeys(user)) {\n                 result.add(new GroupEntity(groupId.toString()));\n             }\n         }"},{"sha":"2b568b1f9db59b99839c0f4157365f236e0889f7","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeUserManager.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserManager.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -75,7 +75,7 @@ public List<Group> findGroupsByUser(final String userKey) {\n         org.apache.syncope.core.persistence.api.entity.user.User user = userDAO.find(userKey);\n         if (user != null) {\n             result = new ArrayList<>();\n-            for (Long groupId : user.getGroupKeys()) {\n+            for (Long groupId : userDAO.findAllGroupKeys(user)) {\n                 result.add(new GroupEntity(groupId.toString()));\n             }\n         }"},{"sha":"506455fcb2cd6b6d733e182c540d46cdbdaa0862","filename":"core/workflow-activiti/src/main/java/org/apache/syncope/core/workflow/activiti/SyncopeUserQueryImpl.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-activiti%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Factiviti%2FSyncopeUserQueryImpl.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -141,7 +141,7 @@ private void execute(final int page, final int itemsPerPage) {\n             if (user == null) {\n                 result = Collections.<User>emptyList();\n             } else {\n-                if (memberOf == null || user.getGroupKeys().contains(memberOf)) {\n+                if (memberOf == null || userDAO.findAllGroupKeys(user).contains(memberOf)) {\n                     result = Collections.singletonList(fromSyncopeUser(user));\n                 }\n             }"},{"sha":"fa765ed127e3769d38bbe0107c25063c7d4a83f4","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultGroupWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultGroupWorkflowAdapter.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -44,7 +44,7 @@ public WorkflowResult<Long> create(final GroupTO groupTO) {\n         dataBinder.create(group, groupTO);\n         group = groupDAO.save(group);\n \n-        final PropagationByResource propByRes = new PropagationByResource();\n+        PropagationByResource propByRes = new PropagationByResource();\n         propByRes.set(ResourceOperation.CREATE, group.getResourceNames());\n \n         return new WorkflowResult<>(group.getKey(), propByRes, \"create\");"},{"sha":"78360a927efae90defc307a63c66be1803f34824","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/DefaultUserWorkflowAdapter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FDefaultUserWorkflowAdapter.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -87,7 +87,7 @@ public WorkflowResult<Pair<Long, Boolean>> create(final UserTO userTO, final boo\n         user = userDAO.save(user);\n \n         final PropagationByResource propByRes = new PropagationByResource();\n-        propByRes.set(ResourceOperation.CREATE, user.getResourceNames());\n+        propByRes.set(ResourceOperation.CREATE, userDAO.findAllResourceNames(user));\n \n         return new WorkflowResult<Pair<Long, Boolean>>(\n                 new ImmutablePair<>(user.getKey(), propagateEnable), propByRes, \"create\");"},{"sha":"031e451273c3547556f494e3499015b19c27695c","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserDeprovisionProcessor.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserDeprovisionProcessor.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.provisioning.camel.processor;\n \n-import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import org.apache.camel.Exchange;\n@@ -59,10 +58,10 @@ public void process(final Exchange exchange) {\n \n         User user = userDAO.authFetch(userKey);\n \n-        Collection<String> noPropResourceNames = CollectionUtils.removeAll(user.getResourceNames(), resources);\n-\n-        List<PropagationTask> tasks =\n-                propagationManager.getUserDeleteTasks(userKey, new HashSet<>(resources), noPropResourceNames);\n+        List<PropagationTask> tasks = propagationManager.getUserDeleteTasks(\n+                userKey,\n+                new HashSet<>(resources),\n+                CollectionUtils.removeAll(userDAO.findAllResourceNames(user), resources));\n         PropagationReporter propagationReporter =\n                 ApplicationContextProvider.getApplicationContext().getBean(PropagationReporter.class);\n         try {"},{"sha":"cb0bb82319594b1e202592e58ff50f08aa2fae7b","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/processor/UserStatusPropagationProcessor.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fprocessor%2FUserStatusPropagationProcessor.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -26,6 +26,7 @@\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.syncope.common.lib.mod.StatusMod;\n import org.apache.syncope.core.misc.spring.ApplicationContextProvider;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.task.PropagationTask;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n@@ -49,6 +50,9 @@ public class UserStatusPropagationProcessor implements Processor {\n     @Autowired\n     protected PropagationTaskExecutor taskExecutor;\n \n+    @Autowired\n+    protected UserDAO userDAO;\n+    \n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public void process(final Exchange exchange) {\n@@ -58,7 +62,7 @@ public void process(final Exchange exchange) {\n         StatusMod statusMod = exchange.getProperty(\"statusMod\", StatusMod.class);\n \n         Collection<String> resourcesToBeExcluded =\n-                CollectionUtils.removeAll(user.getResourceNames(), statusMod.getResourceNames());\n+                CollectionUtils.removeAll(userDAO.findAllResourceNames(user), statusMod.getResourceNames());\n \n         List<PropagationTask> tasks = propagationManager.getUserUpdateTasks(\n                 user, statusMod.getType() != StatusMod.ModType.SUSPEND, resourcesToBeExcluded);"},{"sha":"9a6ee5bf0cee490ee4fb361d2741f2e104da2181","filename":"fit/core-reference/src/main/resources/userWorkflow.bpmn20.xml","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2FuserWorkflow.bpmn20.xml?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -34,10 +34,10 @@ under the License.\n     <sequenceFlow id=\"flow2\" sourceRef=\"create\" targetRef=\"createGW\"/>\n     <exclusiveGateway id=\"createGW\"/>\n     <sequenceFlow id=\"createAsAnonymous2Approval\" sourceRef=\"createGW\" targetRef=\"createApproval\">\n-      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${wfExecutor == 'anonymous' || user.getGroupKeys().contains(9)}]]></conditionExpression>\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${wfExecutor == 'anonymous' || user.getStaticGroupKeys().contains(9)}]]></conditionExpression>\n     </sequenceFlow>\n     <sequenceFlow id=\"create2Activate\" sourceRef=\"createGW\" targetRef=\"enableGW\">\n-      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${!user.getGroupKeys().contains(9)}]]></conditionExpression>\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${!user.getStaticGroupKeys().contains(9)}]]></conditionExpression>\n     </sequenceFlow>\n     <userTask id=\"createApproval\" name=\"Create approval\" activiti:candidateGroups=\"7\" activiti:formKey=\"createApproval\">\n       <extensionElements>\n@@ -56,7 +56,7 @@ under the License.\n     </sequenceFlow>\n     <exclusiveGateway id=\"enableGW\"/>\n     <sequenceFlow id=\"createApprovalGW2OptIn\" sourceRef=\"enableGW\" targetRef=\"generateToken\">\n-      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${user.getGroupKeys().contains(11)}]]></conditionExpression>\n+      <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${user.getStaticGroupKeys().contains(11)}]]></conditionExpression>\n     </sequenceFlow>\n     <sequenceFlow id=\"createApprovalGW2Activate\" sourceRef=\"enableGW\" targetRef=\"activate\">\n       <conditionExpression xsi:type=\"tFormalExpression\"><![CDATA[${enabled == null}]]></conditionExpression>"},{"sha":"5dc3f5cbe9b8eb2c2c4f17e9129ed8a810e14f84","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/AbstractTaskITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FAbstractTaskITCase.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import static org.apache.syncope.fit.core.reference.AbstractITCase.taskService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;"},{"sha":"6ae349ccd013ea51af668ea9d2c957d2f4a12bf7","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/ConfigurationITCase.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FConfigurationITCase.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n-import static org.apache.commons.lang3.StringUtils.isEmpty;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n@@ -157,7 +156,7 @@ public void issueSYNCOPE418() {\n     }\n \n     private static String[] substringsBetween(final String str, final String open, final String close) {\n-        if (str == null || isEmpty(open) || isEmpty(close)) {\n+        if (str == null || StringUtils.isEmpty(open) || StringUtils.isEmpty(close)) {\n             return null;\n         }\n         final int strLen = str.length();"},{"sha":"9be9a28760a443b0df857b21f385f1bb94f4b8a6","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/GroupITCase.java","status":"modified","additions":49,"deletions":25,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FGroupITCase.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -35,6 +35,8 @@\n import javax.naming.directory.SearchControls;\n import javax.naming.directory.SearchResult;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.lib.SyncopeClient;\n@@ -71,15 +73,15 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class GroupITCase extends AbstractITCase {\n \n-    private GroupTO buildBasicGroupTO(final String name) {\n+    public static GroupTO getBasicSampleTO(final String name) {\n         GroupTO groupTO = new GroupTO();\n         groupTO.setRealm(\"/\");\n         groupTO.setName(name + getUUIDString());\n         return groupTO;\n     }\n \n-    private GroupTO buildGroupTO(final String name) {\n-        GroupTO groupTO = buildBasicGroupTO(name);\n+    public static GroupTO getSampleTO(final String name) {\n+        GroupTO groupTO = getBasicSampleTO(name);\n \n         groupTO.getGPlainAttrTemplates().add(\"icon\");\n         groupTO.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n@@ -91,7 +93,7 @@ private GroupTO buildGroupTO(final String name) {\n     @Test\n     @Ignore\n     public void create() {\n-        GroupTO groupTO = buildGroupTO(\"lastGroup\");\n+        GroupTO groupTO = getSampleTO(\"lastGroup\");\n         groupTO.getGVirAttrTemplates().add(\"rvirtualdata\");\n         groupTO.getVirAttrs().add(attrTO(\"rvirtualdata\", \"rvirtualvalue\"));\n         groupTO.setGroupOwner(8L);\n@@ -185,14 +187,18 @@ public void selfRead() {\n \n         List<GroupTO> groups = groupService2.own();\n         assertNotNull(groups);\n-        assertFalse(groups.isEmpty());\n-        assertNotNull(groups.get(0).getPlainAttrs());\n-        assertFalse(groups.get(0).getPlainAttrs().isEmpty());\n+        assertTrue(CollectionUtils.exists(groups, new Predicate<GroupTO>() {\n+\n+            @Override\n+            public boolean evaluate(final GroupTO group) {\n+                return 1L == group.getKey();\n+            }\n+        }));\n     }\n \n     @Test\n     public void update() {\n-        GroupTO groupTO = buildGroupTO(\"latestGroup\" + getUUIDString());\n+        GroupTO groupTO = getSampleTO(\"latestGroup\" + getUUIDString());\n         groupTO.getGPlainAttrTemplates().add(\"show\");\n         groupTO = createGroup(groupTO);\n \n@@ -204,9 +210,6 @@ public void update() {\n         groupMod.setName(modName);\n         groupMod.getPlainAttrsToUpdate().add(attrMod(\"show\", \"FALSE\"));\n \n-        // change password policy inheritance\n-        groupMod.setInheritPasswordPolicy(Boolean.FALSE);\n-\n         groupTO = updateGroup(groupMod);\n \n         assertEquals(modName, groupTO.getName());\n@@ -215,7 +218,7 @@ public void update() {\n \n     @Test\n     public void updateRemovingVirAttribute() {\n-        GroupTO groupTO = buildBasicGroupTO(\"withvirtual\" + getUUIDString());\n+        GroupTO groupTO = getBasicSampleTO(\"withvirtual\" + getUUIDString());\n         groupTO.getGVirAttrTemplates().add(\"rvirtualdata\");\n         groupTO.getVirAttrs().add(attrTO(\"rvirtualdata\", null));\n \n@@ -235,7 +238,7 @@ public void updateRemovingVirAttribute() {\n \n     @Test\n     public void updateRemovingDerAttribute() {\n-        GroupTO groupTO = buildBasicGroupTO(\"withderived\" + getUUIDString());\n+        GroupTO groupTO = getBasicSampleTO(\"withderived\" + getUUIDString());\n         groupTO.getGDerAttrTemplates().add(\"rderivedschema\");\n         groupTO.getDerAttrs().add(attrTO(\"rderivedschema\", null));\n \n@@ -319,7 +322,7 @@ public void issue178() {\n \n     @Test\n     public void unlink() {\n-        GroupTO actual = createGroup(buildGroupTO(\"unlink\"));\n+        GroupTO actual = createGroup(getSampleTO(\"unlink\"));\n         assertNotNull(actual);\n \n         assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.GROUP, actual.getKey()));\n@@ -338,7 +341,7 @@ public void unlink() {\n \n     @Test\n     public void link() {\n-        GroupTO groupTO = buildGroupTO(\"link\");\n+        GroupTO groupTO = getSampleTO(\"link\");\n         groupTO.getResources().clear();\n \n         GroupTO actual = createGroup(groupTO);\n@@ -369,7 +372,7 @@ public void link() {\n \n     @Test\n     public void unassign() {\n-        GroupTO actual = createGroup(buildGroupTO(\"unassign\"));\n+        GroupTO actual = createGroup(getSampleTO(\"unassign\"));\n         assertNotNull(actual);\n \n         assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.GROUP, actual.getKey()));\n@@ -393,7 +396,7 @@ public void unassign() {\n \n     @Test\n     public void assign() {\n-        GroupTO groupTO = buildGroupTO(\"assign\");\n+        GroupTO groupTO = getSampleTO(\"assign\");\n         groupTO.getResources().clear();\n \n         GroupTO actual = createGroup(groupTO);\n@@ -418,7 +421,7 @@ public void assign() {\n \n     @Test\n     public void deprovision() {\n-        GroupTO actual = createGroup(buildGroupTO(\"deprovision\"));\n+        GroupTO actual = createGroup(getSampleTO(\"deprovision\"));\n         assertNotNull(actual);\n \n         assertNotNull(resourceService.getConnectorObject(RESOURCE_NAME_LDAP, SubjectType.GROUP, actual.getKey()));\n@@ -442,7 +445,7 @@ public void deprovision() {\n \n     @Test\n     public void provision() {\n-        GroupTO groupTO = buildGroupTO(\"assign\" + getUUIDString());\n+        GroupTO groupTO = getSampleTO(\"assign\" + getUUIDString());\n         groupTO.getResources().clear();\n \n         GroupTO actual = createGroup(groupTO);\n@@ -468,7 +471,7 @@ public void provision() {\n \n     @Test\n     public void deprovisionUnlinked() {\n-        GroupTO groupTO = buildGroupTO(\"assign\" + getUUIDString());\n+        GroupTO groupTO = getSampleTO(\"assign\" + getUUIDString());\n         groupTO.getResources().clear();\n \n         GroupTO actual = createGroup(groupTO);\n@@ -517,7 +520,7 @@ public void createWithMandatorySchemaNotTemplate() {\n         schemaService.create(AttributableType.GROUP, SchemaType.PLAIN, badge);\n \n         // 2. create a group *without* an attribute for that schema: it works\n-        GroupTO groupTO = buildGroupTO(\"lastGroup\");\n+        GroupTO groupTO = getSampleTO(\"lastGroup\");\n         assertFalse(groupTO.getPlainAttrMap().containsKey(badge.getKey()));\n         groupTO = createGroup(groupTO);\n         assertNotNull(groupTO);\n@@ -549,14 +552,16 @@ public void createWithMandatorySchemaNotTemplate() {\n     public void anonymous() {\n         GroupService unauthenticated = clientFactory.createAnonymous().getService(GroupService.class);\n         try {\n-            unauthenticated.list(SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());\n+            unauthenticated.\n+                    list(SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build());\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n         }\n \n         GroupService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(GroupService.class);\n-        assertFalse(anonymous.list(SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).build()).\n+        assertFalse(anonymous.list(SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                build()).\n                 getResult().isEmpty());\n     }\n \n@@ -565,7 +570,7 @@ public void noContent() throws IOException {\n         SyncopeClient noContentclient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n         GroupService noContentService = noContentclient.prefer(GroupService.class, Preference.RETURN_NO_CONTENT);\n \n-        GroupTO group = buildGroupTO(\"noContent\");\n+        GroupTO group = getSampleTO(\"noContent\");\n \n         Response response = noContentService.create(group);\n         assertEquals(Response.Status.CREATED.getStatusCode(), response.getStatus());\n@@ -613,7 +618,7 @@ public void issueSYNCOPE632() {\n             assertNotNull(newLDAP);\n \n             // 2. create a group and give the resource created above\n-            groupTO = buildGroupTO(\"lastGroup\" + getUUIDString());\n+            groupTO = getSampleTO(\"lastGroup\" + getUUIDString());\n             groupTO.getGPlainAttrTemplates().add(\"icon\");\n             groupTO.getPlainAttrs().add(attrTO(\"icon\", \"anIcon\"));\n             groupTO.getGPlainAttrTemplates().add(\"show\");\n@@ -671,4 +676,23 @@ public void issueSYNCOPE632() {\n             resourceService.delete(\"new-ldap\");\n         }\n     }\n+\n+    @Test\n+    public void dynMembership() {\n+        assertTrue(userService.read(4L).getDynGroups().isEmpty());\n+\n+        GroupTO group = getBasicSampleTO(\"dynMembership\");\n+        group.setDynMembershipCond(\"cool==true\");\n+        group = createGroup(group);\n+        assertNotNull(group);\n+\n+        assertTrue(userService.read(4L).getDynGroups().contains(group.getKey()));\n+\n+        GroupMod mod = new GroupMod();\n+        mod.setKey(group.getKey());\n+        mod.setDynMembershipCond(\"cool==false\");\n+        groupService.update(mod.getKey(), mod);\n+\n+        assertTrue(userService.read(4L).getDynGroups().isEmpty());\n+    }\n }"},{"sha":"4d61644d715dc077d6f982d12a7e01afb0838184","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/RoleITCase.java","status":"modified","additions":29,"deletions":11,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FRoleITCase.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -39,6 +39,15 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class RoleITCase extends AbstractITCase {\n \n+    public static RoleTO getSampleRoleTO(final String name) {\n+        RoleTO role = new RoleTO();\n+        role.setName(name + getUUIDString());\n+        role.getRealms().add(\"/even\");\n+        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n+\n+        return role;\n+    }\n+\n     @Test\n     public void list() {\n         List<RoleTO> roleTOs = roleService.list();\n@@ -56,15 +65,6 @@ public void read() {\n         assertTrue(roleTO.getEntitlements().contains(Entitlement.GROUP_READ));\n     }\n \n-    private RoleTO buildRoleTO(final String name) {\n-        RoleTO role = new RoleTO();\n-        role.setName(name + getUUIDString());\n-        role.getRealms().add(\"/even\");\n-        role.getEntitlements().add(Entitlement.LOG_SET_LEVEL);\n-\n-        return role;\n-    }\n-\n     @Test\n     public void create() {\n         RoleTO role = new RoleTO();\n@@ -82,7 +82,7 @@ public void create() {\n \n     @Test\n     public void update() {\n-        RoleTO role = buildRoleTO(\"update\");\n+        RoleTO role = getSampleRoleTO(\"update\");\n         Response response = roleService.create(role);\n \n         RoleTO actual = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n@@ -104,7 +104,7 @@ public void update() {\n \n     @Test\n     public void delete() {\n-        RoleTO role = buildRoleTO(\"delete\");\n+        RoleTO role = getSampleRoleTO(\"delete\");\n         Response response = roleService.create(role);\n \n         RoleTO actual = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n@@ -119,4 +119,22 @@ public void delete() {\n             assertEquals(ClientExceptionType.NotFound, e.getType());\n         }\n     }\n+\n+    @Test\n+    public void dynMembership() {\n+        assertTrue(userService.read(4L).getDynRoles().isEmpty());\n+\n+        RoleTO role = getSampleRoleTO(\"dynMembership\");\n+        role.setDynMembershipCond(\"cool==true\");\n+        Response response = roleService.create(role);\n+        role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        assertNotNull(role);\n+\n+        assertTrue(userService.read(4L).getDynRoles().contains(role.getKey()));\n+\n+        role.setDynMembershipCond(\"cool==false\");\n+        roleService.update(role.getKey(), role);\n+\n+        assertTrue(userService.read(4L).getDynGroups().isEmpty());\n+    }\n }"},{"sha":"0f565101a95bd8eb6d24b3e1eddee01e8d14fa03","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/SearchITCase.java","status":"modified","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/22839bf376aa74544b5a18fee227d26f3e3a4f67/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FSearchITCase.java?ref=22839bf376aa74544b5a18fee227d26f3e3a4f67","patch":"@@ -18,20 +18,24 @@\n  */\n package org.apache.syncope.fit.core.reference;\n \n+import static org.apache.syncope.fit.core.reference.AbstractITCase.userService;\n import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertFalse;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertTrue;\n \n import java.util.Collection;\n+import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.CollectionUtils2;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.GroupTO;\n+import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.rest.api.service.RoleService;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -94,6 +98,89 @@ public void searchByGroupNameAndKey() {\n         assertEquals(1L, matchingGroups.getResult().iterator().next().getKey());\n     }\n \n+    @Test\n+    public void searchByGroup() {\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(1L).query()).\n+                build());\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+\n+        assertTrue(CollectionUtils.exists(matchedUsers.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 1;\n+            }\n+        }));\n+    }\n+\n+    @Test\n+    public void searchByDynGroup() {\n+        GroupTO group = GroupITCase.getBasicSampleTO(\"dynMembership\");\n+        group.setDynMembershipCond(\"cool==true\");\n+        group = createGroup(group);\n+        assertNotNull(group);\n+\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(group.getKey()).query()).\n+                build());\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+\n+        assertTrue(CollectionUtils.exists(matchedUsers.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 4;\n+            }\n+        }));\n+    }\n+\n+    @Test\n+    public void searchByRole() {\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(3L).query()).\n+                build());\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+\n+        assertTrue(CollectionUtils.exists(matchedUsers.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 1;\n+            }\n+        }));\n+    }\n+\n+    @Test\n+    public void searchByDynRole() {\n+        RoleTO role = RoleITCase.getSampleRoleTO(\"dynMembership\");\n+        role.setDynMembershipCond(\"cool==true\");\n+        Response response = roleService.create(role);\n+        role = getObject(response.getLocation(), RoleService.class, RoleTO.class);\n+        assertNotNull(role);\n+\n+        PagedResult<UserTO> matchedUsers = userService.search(\n+                SyncopeClient.getSubjectSearchQueryBuilder().realm(SyncopeConstants.ROOT_REALM).\n+                fiql(SyncopeClient.getUserSearchConditionBuilder().inRoles(role.getKey()).query()).\n+                build());\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.getResult().isEmpty());\n+\n+        assertTrue(CollectionUtils.exists(matchedUsers.getResult(), new Predicate<UserTO>() {\n+\n+            @Override\n+            public boolean evaluate(final UserTO user) {\n+                return user.getKey() == 4;\n+            }\n+        }));\n+    }\n+\n     @Test\n     public void searchUserByResourceName() {\n         PagedResult<UserTO> matchedUsers = userService.search("}]}