{"sha":"b30e7b23bb79cb583b09908c2f43a53f486045e3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmIzMGU3YjIzYmI3OWNiNTgzYjA5OTA4YzJmNDNhNTNmNDg2MDQ1ZTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-23T07:57:04Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2018-04-23T07:57:04Z"},"message":"[SYNCOPE-938] Maximizing usage of Optional#ifPresent","tree":{"sha":"e1f574f5e91de52b34fac90ce8fc4966179b59bb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e1f574f5e91de52b34fac90ce8fc4966179b59bb"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b30e7b23bb79cb583b09908c2f43a53f486045e3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b30e7b23bb79cb583b09908c2f43a53f486045e3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b30e7b23bb79cb583b09908c2f43a53f486045e3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b30e7b23bb79cb583b09908c2f43a53f486045e3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"39e7a412c41beb938557fbc7c5d2964019a0f606","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/39e7a412c41beb938557fbc7c5d2964019a0f606","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/39e7a412c41beb938557fbc7c5d2964019a0f606"}],"stats":{"total":328,"additions":140,"deletions":188},"files":[{"sha":"8167cc595a8b270b54d691bd4c391de5e1631e7a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/commands/info/Info.java","status":"modified","additions":36,"deletions":50,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2Fcommands%2Finfo%2FInfo.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.client.cli.commands.info;\n \n-import java.util.Optional;\n import org.apache.syncope.client.cli.SyncopeServices;\n-import org.apache.syncope.common.lib.info.JavaImplInfo;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.types.ImplementationType;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n@@ -97,15 +95,14 @@ public void workflowAdapter() {\n     }\n \n     public void accountRules() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.ACCOUNT_RULE);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.ACCOUNT_RULE).ifPresent(info -> {\n             try {\n-                infoResultManager.printAccountRules(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void connidLocations() {\n@@ -118,135 +115,124 @@ public void connidLocations() {\n     }\n \n     public void reconFilterBuilders() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.RECON_FILTER_BUILDER);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.RECON_FILTER_BUILDER).ifPresent(info -> {\n             try {\n-                infoResultManager.printReconFilterBuilders(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void logicActions() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.LOGIC_ACTIONS);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.LOGIC_ACTIONS).ifPresent(info -> {\n             try {\n-                infoResultManager.printLogicActions(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void itemTransformers() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.ITEM_TRANSFORMER);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.ITEM_TRANSFORMER).ifPresent(info -> {\n             try {\n-                infoResultManager.printItemTransformers(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void passwordRules() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PASSWORD_RULE);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.PASSWORD_RULE).ifPresent(info -> {\n             try {\n-                infoResultManager.printPasswordRules(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void propagationActions() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PROPAGATION_ACTIONS);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.PROPAGATION_ACTIONS).ifPresent(info -> {\n             try {\n-                infoResultManager.printPropagationActions(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void pushActions() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PUSH_ACTIONS);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.PUSH_ACTIONS).ifPresent(info -> {\n             try {\n-                infoResultManager.printPushActions(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void reportletConfs() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.REPORTLET);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.REPORTLET).ifPresent(info -> {\n             try {\n-                infoResultManager.printReportletConfs(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void pullActions() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PULL_ACTIONS);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.PULL_ACTIONS).ifPresent(info -> {\n             try {\n-                infoResultManager.printPullActions(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void pullCorrelationRules() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.PULL_CORRELATION_RULE);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.PULL_CORRELATION_RULE).ifPresent(info -> {\n             try {\n-                infoResultManager.printCorrelationRules(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void taskJobs() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.TASKJOB_DELEGATE);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.TASKJOB_DELEGATE).ifPresent(info -> {\n             try {\n-                infoResultManager.printJobs(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void validators() {\n-        Optional<JavaImplInfo> info = platformInfo.getJavaImplInfo(ImplementationType.VALIDATOR);\n-        if (info.isPresent()) {\n+        platformInfo.getJavaImplInfo(ImplementationType.VALIDATOR).ifPresent(info -> {\n             try {\n-                infoResultManager.printValidators(info.get().getClasses());\n+                infoResultManager.printAccountRules(info.getClasses());\n             } catch (final Exception ex) {\n                 LOG.error(\"Information error\", ex);\n                 infoResultManager.genericError(ex.getMessage());\n             }\n-        }\n+        });\n     }\n \n     public void passwordGenerator() {"},{"sha":"08a314726d06c1cebaf26883badec1f43229aae0","filename":"client/console/src/main/java/org/apache/syncope/client/console/panels/TypeExtensionDirectoryPanel.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTypeExtensionDirectoryPanel.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -24,7 +24,6 @@\n import java.util.Collections;\n import java.util.Iterator;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.commons.Constants;\n@@ -155,11 +154,10 @@ public void onClick(final AjaxRequestTarget target, final TypeExtensionTO ignore\n \n             @Override\n             public void onClick(final AjaxRequestTarget target, final TypeExtensionTO ignore) {\n-                Optional<TypeExtensionTO> typeExt = groupTO.getTypeExtension(typeExtension.getAnyType());\n-                if (typeExt.isPresent()) {\n-                    groupTO.getTypeExtensions().remove(typeExt.get());\n+                groupTO.getTypeExtension(typeExtension.getAnyType()).ifPresent(typeExt -> {\n+                    groupTO.getTypeExtensions().remove(typeExt);\n                     target.add(container);\n-                }\n+                });\n             }\n         }, ActionLink.ActionType.DELETE, StringUtils.EMPTY, true);\n         return panel;"},{"sha":"6948aca1967d4b7f4684fc3157f7b0fc8af62310","filename":"client/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/bootstrap/dialog/BaseModal.java","status":"modified","additions":5,"deletions":7,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fbootstrap%2Fdialog%2FBaseModal.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -24,7 +24,6 @@\n import java.io.Serializable;\n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.syncope.client.console.panels.AbstractModalPanel;\n import org.apache.syncope.client.console.panels.ModalPanel;\n import org.apache.syncope.client.console.panels.NotificationPanel;\n@@ -215,7 +214,7 @@ protected void onError(final AjaxRequestTarget target, final Form<?> form) {\n \n         if (submitButton == null) {\n             submitButton = submit;\n-            this.components.add(submitButton);\n+            components.add(submitButton);\n         } else {\n             submitButton.replaceWith(submit);\n             submitButton = submit;\n@@ -229,11 +228,10 @@ public void removeSubmitButton() {\n             throw new IllegalStateException();\n         }\n \n-        Optional<Component> button =\n-                this.components.stream().filter(component -> SUBMIT.equals(component.getId())).findAny();\n-        if (button.isPresent()) {\n-            this.components.remove(button.get());\n-        }\n+        components.stream().\n+                filter(component -> SUBMIT.equals(component.getId())).\n+                findFirst().\n+                ifPresent(button -> components.remove(button));\n \n         submitButton = null;\n     }"},{"sha":"8723a7da358a3ffbfb5ef2649595513ced7f1748","filename":"client/console/src/main/java/org/apache/syncope/client/console/widgets/ReconciliationWidget.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwidgets%2FReconciliationWidget.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -56,7 +56,6 @@\n import org.apache.syncope.client.console.widgets.reconciliation.ReconciliationReportParser;\n import org.apache.syncope.client.console.wizards.WizardMgtPanel;\n import org.apache.syncope.common.lib.to.ExecTO;\n-import org.apache.syncope.common.lib.to.JobTO;\n import org.apache.syncope.common.lib.to.ReportTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ReportExecExportFormat;\n@@ -122,20 +121,22 @@ public ReconciliationWidget(final String id, final PageReference pageRef) {\n             protected void onTimer(final AjaxRequestTarget target) {\n                 if (isCheckReconciliationJob()) {\n                     try {\n-                        Optional<JobTO> reportJobTO = restClient.listJobs().stream().\n+                        restClient.listJobs().stream().\n                                 filter(jobTO -> SyncopeConsoleApplication.get().\n-                                getReconciliationReportKey().equals(jobTO.getRefKey())).findAny();\n-                        if (reportJobTO.isPresent() && !reportJobTO.get().isRunning()) {\n-                            LOG.debug(\"Report {} is not running\",\n-                                    SyncopeConsoleApplication.get().getReconciliationReportKey());\n+                                getReconciliationReportKey().equals(jobTO.getRefKey())).\n+                                findFirst().ifPresent(reportJobTO -> {\n+                                    if (!reportJobTO.isRunning()) {\n+                                        LOG.debug(\"Report {} is not running\",\n+                                                SyncopeConsoleApplication.get().getReconciliationReportKey());\n \n-                            overlay.setVisible(false);\n+                                        overlay.setVisible(false);\n \n-                            container.addOrReplace(buildExecFragment());\n+                                        container.addOrReplace(buildExecFragment());\n \n-                            target.add(ReconciliationWidget.this);\n-                            setCheckReconciliationJob(false);\n-                        }\n+                                        target.add(ReconciliationWidget.this);\n+                                        setCheckReconciliationJob(false);\n+                                    }\n+                                });\n                     } catch (Throwable t) {\n                         LOG.error(\"Unexpected error while checking for updated reconciliation job info\", t);\n                     }\n@@ -267,7 +268,7 @@ private Pair<List<ProgressBean>, ReconciliationReport> parseReconciliationReport\n         Optional<ExecTO> exec = Optional.empty();\n         if (SyncopeConsoleSession.get().owns(StandardEntitlement.REPORT_LIST)) {\n             exec = restClient.listRecentExecutions(ROWS).stream().\n-                    filter(e -> reconciliationReportKey.equals(e.getRefKey())).findAny();\n+                    filter(e -> reconciliationReportKey.equals(e.getRefKey())).findFirst();\n         }\n         if (!exec.isPresent()) {\n             LOG.error(\"Could not find the last execution of reconciliation report\");\n@@ -391,11 +392,10 @@ public void populateItem(\n                             final String componentId,\n                             final IModel<Any> rowModel) {\n \n-                        final Any any = rowModel.getObject();\n+                        Any any = rowModel.getObject();\n \n-                        Optional<Missing> missing =\n-                                any.getMissing().stream().\n-                                        filter(object -> resource.equals(object.getResource())).findAny();\n+                        Optional<Missing> missing = any.getMissing().stream().\n+                                filter(object -> resource.equals(object.getResource())).findFirst();\n                         List<Misaligned> misaligned = any.getMisaligned().stream().\n                                 filter(object -> resource.equals(object.getResource())).collect(Collectors.toList());\n \n@@ -404,7 +404,7 @@ public void populateItem(\n                             if (misaligned == null || misaligned.isEmpty()) {\n                                 content = new Label(componentId, StringUtils.EMPTY);\n                             } else {\n-                                final Action<Any> action = new Action<>(new ActionLink<Any>() {\n+                                Action<Any> action = new Action<>(new ActionLink<Any>() {\n \n                                     private static final long serialVersionUID = -3722207913631435501L;\n \n@@ -427,7 +427,7 @@ public void onClick(final AjaxRequestTarget target, final Any ignore) {\n                                 content = new ActionPanel<>(componentId, rowModel, action);\n                             }\n                         } else {\n-                            final Action<Any> action = new Action<>(null, ActionLink.ActionType.NOT_FOUND);\n+                            Action<Any> action = new Action<>(null, ActionLink.ActionType.NOT_FOUND);\n                             action.hideLabel();\n                             content = new ActionPanel<>(componentId, rowModel, action);\n                         }"},{"sha":"130012e45b535a65c4fac8b7efbb27818e18725c","filename":"client/console/src/main/java/org/apache/syncope/client/console/wizards/resources/ConnectorConfPanel.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fresources%2FConnectorConfPanel.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Collections;\n import java.util.List;\n-import java.util.Optional;\n import java.util.stream.Collectors;\n import org.apache.syncope.common.lib.to.ConnBundleTO;\n import org.apache.syncope.common.lib.to.ConnInstanceTO;\n@@ -76,11 +75,12 @@ protected final List<ConnConfProperty> getConnProperties(final ConnInstanceTO in\n                     ConnConfProperty property = new ConnConfProperty();\n                     property.setSchema(key);\n \n-                    Optional<ConnConfProperty> conf = instance.getConf(key.getName());\n-                    if (conf.isPresent() && conf.get().getValues() != null) {\n-                        property.getValues().addAll(conf.get().getValues());\n-                        property.setOverridable(conf.get().isOverridable());\n-                    }\n+                    instance.getConf(key.getName()).ifPresent(conf -> {\n+                        if (conf.getValues() != null) {\n+                            property.getValues().addAll(conf.getValues());\n+                            property.setOverridable(conf.isOverridable());\n+                        }\n+                    });\n \n                     if (property.getValues().isEmpty() && !key.getDefaultValues().isEmpty()) {\n                         property.getValues().addAll(key.getDefaultValues());"},{"sha":"221b744f31de72e7ca6ce98964e8e45daf0cfb71","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":9,"deletions":11,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -20,7 +20,6 @@\n \n import java.util.HashSet;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n@@ -182,17 +181,16 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n     private void completeUserObject(final UserTO userTO, final UserTO selfTO) {\n         // memberships plain and virtual attrs\n         userTO.getMemberships().forEach(updatedTOMemb -> {\n-            Optional<MembershipTO> oldTOMatchedMemb = selfTO.getMemberships().stream().\n+            selfTO.getMemberships().stream().\n                     filter(oldTOMemb -> updatedTOMemb.getGroupKey().equals(oldTOMemb.getGroupKey())).\n-                    findFirst();\n-            if (oldTOMatchedMemb.isPresent()) {\n-                if (!updatedTOMemb.getPlainAttrs().isEmpty()) {\n-                    completeAttrs(updatedTOMemb.getPlainAttrs(), oldTOMatchedMemb.get().getPlainAttrs());\n-                }\n-                if (!updatedTOMemb.getVirAttrs().isEmpty()) {\n-                    completeAttrs(updatedTOMemb.getVirAttrs(), oldTOMatchedMemb.get().getVirAttrs());\n-                }\n-            }\n+                    findFirst().ifPresent(oldTOMatchedMemb -> {\n+                        if (!updatedTOMemb.getPlainAttrs().isEmpty()) {\n+                            completeAttrs(updatedTOMemb.getPlainAttrs(), oldTOMatchedMemb.getPlainAttrs());\n+                        }\n+                        if (!updatedTOMemb.getVirAttrs().isEmpty()) {\n+                            completeAttrs(updatedTOMemb.getVirAttrs(), oldTOMatchedMemb.getVirAttrs());\n+                        }\n+                    });\n         });\n         // plain attrs\n         completeAttrs(userTO.getPlainAttrs(), selfTO.getPlainAttrs());"},{"sha":"c82dc2dd9a003516927a85136f6f799540ade91c","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/AnyOperations.java","status":"modified","additions":6,"deletions":11,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FAnyOperations.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -21,7 +21,6 @@\n import java.util.Collection;\n import java.util.HashMap;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n import org.apache.commons.lang3.SerializationUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -536,11 +535,9 @@ public static AnyObjectTO patch(final AnyObjectTO anyObjectTO, final AnyObjectPa\n                     if (membPatch.getGroup() == null) {\n                         LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n                     } else {\n-                        Optional<MembershipTO> memb = result.getMemberships().stream().\n-                                filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).findFirst();\n-                        if (memb.isPresent()) {\n-                            result.getMemberships().remove(memb.get());\n-                        }\n+                        result.getMemberships().stream().\n+                                filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).\n+                                findFirst().ifPresent(memb -> result.getMemberships().remove(memb));\n \n                         if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n                             MembershipTO newMembershipTO =\n@@ -593,11 +590,9 @@ public static UserTO patch(final UserTO userTO, final UserPatch userPatch) {\n                     if (membPatch.getGroup() == null) {\n                         LOG.warn(\"Invalid {} specified: {}\", MembershipPatch.class.getName(), membPatch);\n                     } else {\n-                        Optional<MembershipTO> memb = result.getMemberships().stream().\n-                                filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).findFirst();\n-                        if (memb.isPresent()) {\n-                            result.getMemberships().remove(memb.get());\n-                        }\n+                        result.getMemberships().stream().\n+                                filter(membership -> membPatch.getGroup().equals(membership.getGroupKey())).\n+                                findFirst().ifPresent(memb -> result.getMemberships().remove(memb));\n \n                         if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n                             MembershipTO newMembershipTO ="},{"sha":"41bb0d87bc2b5ff0a17805d824e3992ce4af3a47","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultAccountRule.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultAccountRule.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Optional;\n import java.util.regex.Pattern;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.AccountRuleConf;\n@@ -50,7 +51,7 @@ public void setConf(final AccountRuleConf conf) {\n     public void enforce(final User user) {\n         this.conf.getSchemasNotPermitted().stream().\n                 map(schema -> user.getPlainAttr(schema)).\n-                filter(attr -> attr.isPresent()).\n+                filter(Optional::isPresent).\n                 map(attr -> attr.get().getValuesAsStrings()).\n                 filter(values -> (values != null && !values.isEmpty())).\n                 forEachOrdered(values -> this.conf.getWordsNotPermitted().add(values.get(0)));"},{"sha":"98c04bc733e29f277e6a0fab6c5e60cace1b0b25","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPasswordRule.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPasswordRule.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.dao;\n \n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n import org.apache.syncope.common.lib.policy.PasswordRuleConf;\n@@ -53,7 +54,7 @@ public void setConf(final PasswordRuleConf conf) {\n     public void enforce(final User user) {\n         this.conf.getSchemasNotPermitted().stream().\n                 map(schema -> user.getPlainAttr(schema)).\n-                filter(attr -> attr.isPresent()).\n+                filter(Optional::isPresent).\n                 map(attr -> attr.get().getValuesAsStrings()).\n                 filter(values -> (values != null && !values.isEmpty())).\n                 forEachOrdered(values -> this.conf.getWordsNotPermitted().add(values.get(0)));"},{"sha":"67eda83eef0ba5a7f75758d5e21c9e0f7cbf6c16","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":1,"deletions":5,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -48,7 +48,6 @@\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n@@ -296,10 +295,7 @@ public Pair<Boolean, Boolean> enforcePolicies(final User user) {\n                 }\n \n                 for (Implementation impl : policy.getRules()) {\n-                    Optional<PasswordRule> rule = ImplementationManager.buildPasswordRule(impl);\n-                    if (rule.isPresent()) {\n-                        rule.get().enforce(user);\n-                    }\n+                    ImplementationManager.buildPasswordRule(impl).ifPresent(rule -> rule.enforce(user));\n                 }\n \n                 if (user.verifyPasswordHistory(user.getClearPassword(), policy.getHistoryLength())) {"},{"sha":"98aab4de5e2dd2d19907f74df44a73fbd206acc3","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/DefaultGroupProvisioningManager.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FDefaultGroupProvisioningManager.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -23,14 +23,12 @@\n import java.util.Map;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n@@ -95,10 +93,8 @@ public Pair<String, List<PropagationStatus>> create(\n         WorkflowResult<String> created = gwfAdapter.create(groupTO);\n \n         // see ConnObjectUtils#getAnyTOFromConnObject for GroupOwnerSchema\n-        Optional<AttrTO> groupOwner = groupTO.getPlainAttr(StringUtils.EMPTY);\n-        if (groupOwner.isPresent()) {\n-            groupOwnerMap.put(created.getResult(), groupOwner.get().getValues().iterator().next());\n-        }\n+        groupTO.getPlainAttr(StringUtils.EMPTY).ifPresent(groupOwner\n+                -> groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next()));\n \n         List<PropagationTaskTO> tasks = propagationManager.getCreateTasks(\n                 AnyTypeKind.GROUP,"},{"sha":"5f5d83c1f4eae884606b4180d2236bf749c76688","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AbstractAnyDataBinder.java","status":"modified","additions":3,"deletions":5,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAbstractAnyDataBinder.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -330,7 +330,7 @@ protected void processAttrPatch(\n         }\n \n         resources.stream().\n-                filter(resource -> (resource.getProvision(any.getType()).isPresent())\n+                filter(resource -> resource.getProvision(any.getType()).isPresent()\n                 && resource.getProvision(any.getType()).get().getMapping() != null).\n                 forEach(resource -> {\n                     MappingUtils.getPropagationItems(\n@@ -655,10 +655,8 @@ protected Map<String, String> getConnObjectKeys(final Any<?> any, final AnyUtils\n                             + \" on resource '\" + resource.getKey() + \"'\");\n                 }\n \n-                Optional<String> connObjectKey = mappingManager.getConnObjectKeyValue(any, provision.get());\n-                if (connObjectKey.isPresent()) {\n-                    connObjectKeys.put(resource.getKey(), connObjectKey.get());\n-                }\n+                mappingManager.getConnObjectKeyValue(any, provision.get()).\n+                        ifPresent(connObjectKey -> connObjectKeys.put(resource.getKey(), connObjectKey));\n             }\n         });\n "},{"sha":"e09ab0efada147f70760f33db2bd2f20b29c725b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -274,12 +274,11 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n             if (relationshipType == null) {\n                 LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n             } else {\n-                Optional<? extends ARelationship> relationship =\n-                        anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getOtherEndKey());\n-                if (relationship.isPresent()) {\n-                    anyObject.getRelationships().remove(relationship.get());\n-                    relationship.get().setLeftEnd(null);\n-                }\n+                anyObject.getRelationship(relationshipType, patch.getRelationshipTO().getOtherEndKey()).\n+                        ifPresent(relationship -> {\n+                            anyObject.getRelationships().remove(relationship);\n+                            relationship.setLeftEnd(null);\n+                        });\n \n                 if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n                     if (StringUtils.isBlank(patch.getRelationshipTO().getOtherEndType())\n@@ -339,24 +338,23 @@ public PropagationByResource update(final AnyObject toBeUpdated, final AnyObject\n         // memberships\n         anyObjectPatch.getMemberships().stream().\n                 filter((membPatch) -> (membPatch.getGroup() != null)).forEachOrdered(membPatch -> {\n-            Optional<? extends AMembership> membership = anyObject.getMembership(membPatch.getGroup());\n-            if (membership.isPresent()) {\n-                anyObject.getMemberships().remove(membership.get());\n-                membership.get().setLeftEnd(null);\n-                anyObject.getPlainAttrs(membership.get()).forEach(attr -> {\n+            anyObject.getMembership(membPatch.getGroup()).ifPresent(membership -> {\n+                anyObject.getMemberships().remove(membership);\n+                membership.setLeftEnd(null);\n+                anyObject.getPlainAttrs(membership).forEach(attr -> {\n                     anyObject.remove(attr);\n                     attr.setOwner(null);\n                 });\n \n                 if (membPatch.getOperation() == PatchOperation.DELETE) {\n-                    groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()).stream().\n+                    groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()).stream().\n                             filter(resource -> reasons.containsKey(resource)).\n                             forEach(resource -> {\n-                                reasons.get(resource).remove(membership.get().getRightEnd().getKey());\n+                                reasons.get(resource).remove(membership.getRightEnd().getKey());\n                                 toBeProvisioned.add(resource);\n                             });\n                 }\n-            }\n+            });\n             if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n                 Group group = groupDAO.find(membPatch.getGroup());\n                 if (group == null) {"},{"sha":"fa9cb9f50cf0dd6d9b47188b34627cdf8dc570c9","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":12,"deletions":14,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -374,12 +374,11 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n             if (relationshipType == null) {\n                 LOG.debug(\"Ignoring invalid relationship type {}\", patch.getRelationshipTO().getType());\n             } else {\n-                Optional<? extends URelationship> relationship =\n-                        user.getRelationship(relationshipType, patch.getRelationshipTO().getOtherEndKey());\n-                if (relationship.isPresent()) {\n-                    user.getRelationships().remove(relationship.get());\n-                    relationship.get().setLeftEnd(null);\n-                }\n+                user.getRelationship(relationshipType, patch.getRelationshipTO().getOtherEndKey()).\n+                        ifPresent(relationship -> {\n+                            user.getRelationships().remove(relationship);\n+                            relationship.setLeftEnd(null);\n+                        });\n \n                 if (patch.getOperation() == PatchOperation.ADD_REPLACE) {\n                     AnyObject otherEnd = anyObjectDAO.find(patch.getRelationshipTO().getOtherEndKey());\n@@ -428,25 +427,24 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n         // memberships\n         userPatch.getMemberships().stream().\n                 filter(membPatch -> membPatch.getGroup() != null).forEachOrdered((membPatch) -> {\n-            Optional<? extends UMembership> membership = user.getMembership(membPatch.getGroup());\n-            if (membership.isPresent()) {\n-                user.getMemberships().remove(membership.get());\n-                membership.get().setLeftEnd(null);\n-                user.getPlainAttrs(membership.get()).forEach(attr -> {\n+            user.getMembership(membPatch.getGroup()).ifPresent(membership -> {\n+                user.getMemberships().remove(membership);\n+                membership.setLeftEnd(null);\n+                user.getPlainAttrs(membership).forEach(attr -> {\n                     user.remove(attr);\n                     attr.setOwner(null);\n                     attr.setMembership(null);\n                 });\n \n                 if (membPatch.getOperation() == PatchOperation.DELETE) {\n-                    groupDAO.findAllResourceKeys(membership.get().getRightEnd().getKey()).stream().\n+                    groupDAO.findAllResourceKeys(membership.getRightEnd().getKey()).stream().\n                             filter(resource -> reasons.containsKey(resource)).\n                             forEach(resource -> {\n-                                reasons.get(resource).remove(membership.get().getRightEnd().getKey());\n+                                reasons.get(resource).remove(membership.getRightEnd().getKey());\n                                 toBeProvisioned.add(resource);\n                             });\n                 }\n-            }\n+            });\n             if (membPatch.getOperation() == PatchOperation.ADD_REPLACE) {\n                 Group group = groupDAO.find(membPatch.getGroup());\n                 if (group == null) {"},{"sha":"b81378449fd3347f1e761fd45bc11b425ec228cc","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/PullJobDelegate.java","status":"modified","additions":3,"deletions":7,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FPullJobDelegate.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -144,20 +144,16 @@ protected void setGroupOwners(\n                         ghandler.getProfile().getTask().getResource(),\n                         ghandler.getProfile().getConnector(),\n                         userIgnoreCaseMatch);\n-\n                 if (userKey.isPresent()) {\n                     group.setUserOwner(userDAO.find(userKey.get()));\n                 } else {\n-                    Optional<String> groupKey = pullUtils.match(\n+                    pullUtils.match(\n                             anyTypeDAO.findGroup(),\n                             entry.getValue(),\n                             ghandler.getProfile().getTask().getResource(),\n                             ghandler.getProfile().getConnector(),\n-                            groupIgnoreCaseMatch);\n-\n-                    if (groupKey.isPresent()) {\n-                        group.setGroupOwner(groupDAO.find(groupKey.get()));\n-                    }\n+                            groupIgnoreCaseMatch).\n+                            ifPresent(groupKey -> group.setGroupOwner(groupDAO.find(groupKey)));\n                 }\n             }\n             return group;"},{"sha":"2ea790f3a875c5966cdd15d4448dba3c479e2ec3","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/WadlGenerator.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FWadlGenerator.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -92,13 +92,12 @@ public String getWadl() {\n                             classResourceInfos.add(cri.get());\n                         }\n                         cri.get().setResourceClass(beanClass);\n-                        continue;\n-                    }\n-\n-                    cri = Optional.ofNullable(ResourceUtils.createClassResourceInfo(\n-                            beanClass, beanClass, true, true, BusFactory.getDefaultBus()));\n-                    if (cri.isPresent()) {\n-                        classResourceInfos.add(cri.get());\n+                    } else {\n+                        cri = Optional.ofNullable(ResourceUtils.createClassResourceInfo(\n+                                beanClass, beanClass, true, true, BusFactory.getDefaultBus()));\n+                        if (cri.isPresent()) {\n+                            classResourceInfos.add(cri.get());\n+                        }\n                     }\n                 }\n "},{"sha":"eaa1a968da251b39357a20c73b19077650b62250","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/DefaultPasswordGenerator.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FDefaultPasswordGenerator.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -20,10 +20,8 @@\n \n import java.util.ArrayList;\n import java.util.List;\n-import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.policy.DefaultPasswordRuleConf;\n-import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.entity.policy.PasswordPolicy;\n import org.apache.syncope.core.provisioning.api.utils.policy.InvalidPasswordRuleConf;\n import org.apache.syncope.core.provisioning.api.utils.policy.PolicyPattern;\n@@ -69,10 +67,11 @@ public String generate(final List<PasswordPolicy> policies) throws InvalidPasswo\n \n         policies.stream().forEach(policy -> policy.getRules().forEach(impl -> {\n             try {\n-                Optional<PasswordRule> rule = ImplementationManager.buildPasswordRule(impl);\n-                if (rule.isPresent() && rule.get().getConf() instanceof DefaultPasswordRuleConf) {\n-                    defaultRuleConfs.add((DefaultPasswordRuleConf) rule.get().getConf());\n-                }\n+                ImplementationManager.buildPasswordRule(impl).ifPresent(rule -> {\n+                    if (rule.getConf() instanceof DefaultPasswordRuleConf) {\n+                        defaultRuleConfs.add((DefaultPasswordRuleConf) rule.getConf());\n+                    }\n+                });\n             } catch (Exception e) {\n                 LOG.error(\"Invalid {}, ignoring...\", impl, e);\n             }"},{"sha":"c18f7a07809185f653e2443638f4bd9d33ec925d","filename":"ext/camel/provisioning-camel/src/main/java/org/apache/syncope/core/provisioning/camel/producer/CreateProducer.java","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fcamel%2Fprovisioning-camel%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fcamel%2Fproducer%2FCreateProducer.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -20,7 +20,6 @@\n \n import java.util.List;\n import java.util.Map;\n-import java.util.Optional;\n import java.util.Set;\n \n import org.apache.camel.Endpoint;\n@@ -29,7 +28,6 @@\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.AnyTO;\n-import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PropagationTaskTO;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -72,10 +70,8 @@ public void process(final Exchange exchange) throws Exception {\n \n                 if (actual instanceof GroupTO && isPull()) {\n                     Map<String, String> groupOwnerMap = exchange.getProperty(\"groupOwnerMap\", Map.class);\n-                    Optional<AttrTO> groupOwner = ((GroupTO) actual).getPlainAttr(StringUtils.EMPTY);\n-                    if (groupOwner.isPresent()) {\n-                        groupOwnerMap.put(created.getResult(), groupOwner.get().getValues().iterator().next());\n-                    }\n+                    ((GroupTO) actual).getPlainAttr(StringUtils.EMPTY).ifPresent(groupOwner\n+                            -> groupOwnerMap.put(created.getResult(), groupOwner.getValues().iterator().next()));\n \n                     List<PropagationTaskTO> tasks = getPropagationManager().getCreateTasks(\n                             AnyTypeKind.GROUP,"},{"sha":"8a70e9ac8d908703c11e2a9cd747cd0dd1f8114a","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2UserManager.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2UserManager.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -234,11 +234,11 @@ public void fill(final String idpKey, final SAML2LoginResponseTO responseTO, fin\n                 switch (intAttrName.getSchemaType()) {\n                     case PLAIN:\n                         Optional<AttrTO> attr = userTO.getPlainAttr(intAttrName.getSchemaName());\n-                        if (!attr.isPresent()) {\n+                        if (attr.isPresent()) {\n+                            attr.get().getValues().clear();\n+                        } else {\n                             attr = Optional.of(new AttrTO.Builder().schema(intAttrName.getSchemaName()).build());\n                             userTO.getPlainAttrs().add(attr.get());\n-                        } else {\n-                            attr.get().getValues().clear();\n                         }\n                         attr.get().getValues().addAll(values);\n                         break;"},{"sha":"8c43c6ce93423d4356b54bcbdeadce473a31c9ac","filename":"ext/scimv2/logic/src/main/java/org/apache/syncope/core/logic/SCIMDataBinder.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b30e7b23bb79cb583b09908c2f43a53f486045e3/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b30e7b23bb79cb583b09908c2f43a53f486045e3/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fscimv2%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSCIMDataBinder.java?ref=b30e7b23bb79cb583b09908c2f43a53f486045e3","patch":"@@ -428,11 +428,10 @@ private <E extends Enum<?>> void fill(\n \n         values.forEach(value -> {\n             if (value.getType() != null) {\n-                Optional<SCIMComplexConf<E>> conf = confs.stream().\n-                        filter(object -> value.getType().equals(object.getType().name())).findFirst();\n-                if (conf.isPresent()) {\n-                    attrs.add(new AttrTO.Builder().schema(conf.get().getValue()).value(value.getValue()).build());\n-                }\n+                confs.stream().\n+                        filter(object -> value.getType().equals(object.getType().name())).findFirst().\n+                        ifPresent(conf -> attrs.add(\n+                        new AttrTO.Builder().schema(conf.getValue()).value(value.getValue()).build()));\n             }\n         });\n     }"}]}