{"sha":"06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjA2ZWIyMGExYjZkYWM4ZmQ2YjllNGQ3YTgyN2U1MmIyOTYxYzhiNDE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-12T17:52:58Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-01-12T17:52:58Z"},"message":"[SYNCOPE-620] client-lib","tree":{"sha":"03f718125061da1122fd93e7813be80c191c54a5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/03f718125061da1122fd93e7813be80c191c54a5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"8b4e52d74596ae729330d8904ae9fddcc190504d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/8b4e52d74596ae729330d8904ae9fddcc190504d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/8b4e52d74596ae729330d8904ae9fddcc190504d"}],"stats":{"total":774,"additions":774,"deletions":0},"files":[{"sha":"0551c79841c6c70b372531d1b7f3d925c32cc6eb","filename":"syncope620/client/lib/pom.xml","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Flib%2Fpom.xml?ref=06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","patch":"@@ -0,0 +1,62 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope-client</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Client Lib</name>\n+  <description>Apache Syncope Client Lib</description>\n+  <groupId>org.apache.syncope.client</groupId>\n+  <artifactId>syncope-client-lib</artifactId>\n+  <packaging>jar</packaging>\n+\n+  <dependencies>\n+    <dependency>\n+      <groupId>javax.ws.rs</groupId>\n+      <artifactId>javax.ws.rs-api</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-client</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.jackson.jaxrs</groupId>\n+      <artifactId>jackson-jaxrs-json-provider</artifactId>\n+    </dependency>  \n+\n+    <dependency>\n+      <groupId>org.slf4j</groupId>\n+      <artifactId>slf4j-api</artifactId>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.apache.syncope.common</groupId>\n+      <artifactId>syncope-common-rest-api</artifactId>\n+      <version>${project.version}</version>\n+    </dependency>\n+  </dependencies>\n+</project>"},{"sha":"bb772bc7b75f5f8e847055a57d5c09e5708906f9","filename":"syncope620/client/lib/src/main/java/org/apache/syncope/client/lib/RestClientExceptionMapper.java","status":"added","additions":126,"deletions":0,"changes":126,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientExceptionMapper.java?ref=06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","patch":"@@ -0,0 +1,126 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+import java.security.AccessControlException;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.ws.rs.BadRequestException;\n+import javax.ws.rs.core.Response;\n+import javax.ws.rs.ext.ExceptionMapper;\n+import javax.ws.rs.ext.Provider;\n+import javax.xml.ws.WebServiceException;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.ResponseExceptionMapper;\n+import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+@Provider\n+public class RestClientExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(RestClientExceptionMapper.class);\n+\n+    @Override\n+    public Response toResponse(final Exception exception) {\n+        throw new UnsupportedOperationException(\n+                \"Call of toResponse() method is not expected in RestClientExceptionnMapper\");\n+    }\n+\n+    @Override\n+    public Exception fromResponse(final Response response) {\n+        final int statusCode = response.getStatus();\n+        Exception ex;\n+\n+        // 1. Check for client (possibly composite) exception in HTTP header\n+        SyncopeClientCompositeException scce = checkSyncopeClientCompositeException(response);\n+        if (scce != null) {\n+            if (scce.getExceptions().size() == 1) {\n+                ex = scce.getExceptions().iterator().next();\n+            } else {\n+                ex = scce;\n+            }\n+        } // 2. Map SC_UNAUTHORIZED\n+        else if (statusCode == Response.Status.UNAUTHORIZED.getStatusCode()) {\n+            ex = new AccessControlException(\"Remote unauthorized exception\");\n+        } // 3. Map SC_BAD_REQUEST\n+        else if (statusCode == Response.Status.BAD_REQUEST.getStatusCode()) {\n+            ex = new BadRequestException();\n+        } // 4. All other codes are mapped to runtime exception with HTTP code information\n+        else {\n+            ex = new WebServiceException(String.format(\"Remote exception with status code: %s\",\n+                    Response.Status.fromStatusCode(statusCode).name()));\n+        }\n+        LOG.error(\"Exception thrown by REST methods: \" + ex.getMessage(), ex);\n+        return ex;\n+    }\n+\n+    private SyncopeClientCompositeException checkSyncopeClientCompositeException(final Response response) {\n+        List<Object> exTypesInHeaders = response.getHeaders().get(RESTHeaders.ERROR_CODE);\n+        if (exTypesInHeaders == null) {\n+            LOG.debug(\"No \" + RESTHeaders.ERROR_CODE + \" provided\");\n+            return null;\n+        }\n+\n+        final SyncopeClientCompositeException compException = SyncopeClientException.buildComposite();\n+\n+        final Set<String> handledExceptions = new HashSet<String>();\n+        for (Object exceptionTypeValue : exTypesInHeaders) {\n+            final String exTypeAsString = (String) exceptionTypeValue;\n+            ClientExceptionType exceptionType = null;\n+            try {\n+                exceptionType = ClientExceptionType.fromHeaderValue(exTypeAsString);\n+            } catch (IllegalArgumentException e) {\n+                LOG.error(\"Unexpected value of \" + RESTHeaders.ERROR_CODE + \": \" + exTypeAsString, e);\n+            }\n+            if (exceptionType != null) {\n+                handledExceptions.add(exTypeAsString);\n+\n+                final SyncopeClientException clientException = SyncopeClientException.build(exceptionType);\n+\n+                if (response.getHeaders().get(RESTHeaders.ERROR_INFO) != null\n+                        && !response.getHeaders().get(RESTHeaders.ERROR_INFO).isEmpty()) {\n+\n+                    for (Object value : response.getHeaders().get(RESTHeaders.ERROR_INFO)) {\n+                        final String element = value.toString();\n+                        if (element.startsWith(exceptionType.getHeaderValue())) {\n+                            clientException.getElements().add(StringUtils.substringAfter(value.toString(), \":\"));\n+                        }\n+                    }\n+                }\n+                compException.addException(clientException);\n+            }\n+        }\n+\n+        exTypesInHeaders.removeAll(handledExceptions);\n+        if (!exTypesInHeaders.isEmpty()) {\n+            LOG.error(\"Unmanaged exceptions: \" + exTypesInHeaders);\n+        }\n+\n+        if (compException.hasExceptions()) {\n+            return compException;\n+        }\n+\n+        return null;\n+    }\n+}"},{"sha":"4d77f2fcc560e3f3993baed1af32d0abdbd98b89","filename":"syncope620/client/lib/src/main/java/org/apache/syncope/client/lib/RestClientFactoryBean.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java?ref=06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+import javax.ws.rs.core.MediaType;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+\n+/**\n+ * Provides shortcuts for creating JAX-RS service instances via CXF's <tt>JAXRSClientFactoryBean</tt>.\n+ */\n+public class RestClientFactoryBean extends JAXRSClientFactoryBean {\n+\n+    /**\n+     * Creates an anonymous instance of the given service class, for the given content type.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param mediaType XML or JSON are suppoorted\n+     * @return anonymous service instance of the given reference class\n+     */\n+    public <T> T createServiceInstance(final Class<T> serviceClass, final MediaType mediaType) {\n+        return createServiceInstance(serviceClass, mediaType, null, null);\n+    }\n+\n+    /**\n+     * Creates an authenticated instance of the given service class, for the given content type.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param mediaType XML or JSON are suppoorted\n+     * @param username username for REST authentication\n+     * @param password password for REST authentication\n+     * @return anonymous service instance of the given reference class\n+     */\n+    public <T> T createServiceInstance(\n+            final Class<T> serviceClass, final MediaType mediaType, final String username, final String password) {\n+\n+        if (StringUtils.isNotBlank(username)) {\n+            setUsername(username);\n+        }\n+        if (StringUtils.isNotBlank(password)) {\n+            setPassword(password);\n+        }\n+        setServiceClass(serviceClass);\n+        final T serviceInstance = create(serviceClass);\n+        WebClient.client(serviceInstance).type(mediaType).accept(mediaType);\n+        return serviceInstance;\n+    }\n+}"},{"sha":"840766203a15420ffb08477e20ee3588bca06a07","filename":"syncope620/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"added","additions":276,"deletions":0,"changes":276,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","patch":"@@ -0,0 +1,276 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+import javax.ws.rs.core.EntityTag;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n+import org.apache.syncope.common.lib.search.RoleFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n+import org.apache.syncope.common.lib.types.SubjectType;\n+import org.apache.syncope.common.rest.api.Preference;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.UserSelfService;\n+import org.apache.syncope.common.rest.api.service.WorkflowService;\n+\n+/**\n+ * Entry point for client access to all REST services exposed by Syncope core; obtain instances via\n+ * {@link SyncopeClientFactoryBean}.\n+ */\n+public class SyncopeClient {\n+\n+    private final MediaType mediaType;\n+\n+    private final RestClientFactoryBean restClientFactory;\n+\n+    private final String username;\n+\n+    private final String password;\n+\n+    public SyncopeClient(final MediaType mediaType, final RestClientFactoryBean restClientFactory,\n+            final String username, final String password) {\n+\n+        this.mediaType = mediaType;\n+        this.restClientFactory = restClientFactory;\n+        this.username = username;\n+        this.password = password;\n+    }\n+\n+    /**\n+     * Returns a new instance of <tt>UserFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n+     *\n+     * @return default instance of <tt>UserFiqlSearchConditionBuilder</tt>\n+     */\n+    public static UserFiqlSearchConditionBuilder getUserSearchConditionBuilder() {\n+        return new UserFiqlSearchConditionBuilder();\n+    }\n+\n+    /**\n+     * Returns a new instance of <tt>RoleFiqlSearchConditionBuilder</tt>, for assisted building of FIQL queries.\n+     *\n+     * @return default instance of <tt>RoleFiqlSearchConditionBuilder</tt>\n+     */\n+    public static RoleFiqlSearchConditionBuilder getRoleSearchConditionBuilder() {\n+        return new RoleFiqlSearchConditionBuilder();\n+    }\n+\n+    /**\n+     * Returns a new instance of <tt>OrderByClauseBuilder</tt>, for assisted building of <tt>orderby</tt> clauses.\n+     *\n+     * @return default instance of <tt>OrderByClauseBuilder</tt>\n+     */\n+    public static OrderByClauseBuilder getOrderByClauseBuilder() {\n+        return new OrderByClauseBuilder();\n+    }\n+\n+    /**\n+     * Creates an instance of the given service class, with configured content type and authentication.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @return service instance of the given reference class\n+     */\n+    public <T> T getService(final Class<T> serviceClass) {\n+        return restClientFactory.createServiceInstance(serviceClass, mediaType, username, password);\n+    }\n+\n+    /**\n+     * Sets the given header on the give service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param key HTTP header key\n+     * @param values HTTP header values\n+     * @return given service instance, with given header set\n+     */\n+    public <T> T header(final T service, final String key, final Object... values) {\n+        WebClient.client(service).header(key, values);\n+        return service;\n+    }\n+\n+    /**\n+     * Creates an instance of the given service class and sets the given header.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param key HTTP header key\n+     * @param values HTTP header values\n+     * @return service instance of the given reference class, with given header set\n+     */\n+    public <T> T header(final Class<T> serviceClass, final String key, final Object... values) {\n+        return header(getService(serviceClass), key, values);\n+    }\n+\n+    /**\n+     * Sets the <tt>Prefer</tt> header on the give service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param preference preference to be set via <tt>Prefer</tt> header\n+     * @return given service instance, with <tt>Prefer</tt> header set\n+     */\n+    public <T> T prefer(final T service, final Preference preference) {\n+        return header(service, RESTHeaders.PREFER, preference.toString());\n+    }\n+\n+    /**\n+     * Creates an instance of the given service class, with <tt>Prefer</tt> header set.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param preference preference to be set via <tt>Prefer</tt> header\n+     * @return service instance of the given reference class, with <tt>Prefer</tt> header set\n+     */\n+    public <T> T prefer(final Class<T> serviceClass, final Preference preference) {\n+        return header(serviceClass, RESTHeaders.PREFER, preference.toString());\n+    }\n+\n+    /**\n+     * Sets the <tt>If-Match</tt> or <tt>If-None-Match</tt> header on the given service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param etag ETag value\n+     * @param ifNot if true then <tt>If-None-Match</tt> is set, <tt>If-Match</tt> otherwise\n+     * @return given service instance, with <tt>If-Match</tt> or <tt>If-None-Match</tt> set\n+     */\n+    private <T> T match(final T service, final EntityTag etag, final boolean ifNot) {\n+        WebClient.client(service).match(etag, ifNot);\n+        return service;\n+    }\n+\n+    /**\n+     * Sets the <tt>If-Match</tt> header on the given service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param etag ETag value\n+     * @return given service instance, with <tt>If-Match</tt> set\n+     */\n+    public <T> T ifMatch(final T service, final EntityTag etag) {\n+        return match(service, etag, false);\n+    }\n+\n+    /**\n+     * Creates an instance of the given service class, with <tt>If-Match</tt> header set.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param etag ETag value\n+     * @return given service instance, with <tt>If-Match</tt> set\n+     */\n+    public <T> T ifMatch(final Class<T> serviceClass, final EntityTag etag) {\n+        return match(getService(serviceClass), etag, false);\n+    }\n+\n+    /**\n+     * Sets the <tt>If-None-Match</tt> header on the given service instance.\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @param etag ETag value\n+     * @return given service instance, with <tt>If-None-Match</tt> set\n+     */\n+    public <T> T ifNoneMatch(final T service, final EntityTag etag) {\n+        return match(service, etag, true);\n+    }\n+\n+    /**\n+     * Creates an instance of the given service class, with <tt>If-None-Match</tt> header set.\n+     *\n+     * @param <T> any service class\n+     * @param serviceClass service class reference\n+     * @param etag ETag value\n+     * @return given service instance, with <tt>If-None-Match</tt> set\n+     */\n+    public <T> T ifNoneMatch(final Class<T> serviceClass, final EntityTag etag) {\n+        return match(getService(serviceClass), etag, true);\n+    }\n+\n+    /**\n+     * Checks whether self-registration is allowed by calling <tt>UserSelfService</tt>'s options.\n+     *\n+     * @return whether self-registration is allowed\n+     * @see UserSelfService#getOptions()\n+     */\n+    public boolean isSelfRegAllowed() {\n+        return Boolean.valueOf(restClientFactory.createServiceInstance(UserSelfService.class, mediaType, null, null).\n+                getOptions().getHeaderString(RESTHeaders.SELFREG_ALLOWED));\n+    }\n+\n+    /**\n+     * Checks whether password reset is allowed by calling <tt>UserSelfService</tt>'s options.\n+     *\n+     * @return whether password reset is allowed\n+     * @see UserSelfService#getOptions()\n+     */\n+    public boolean isPwdResetAllowed() {\n+        return Boolean.valueOf(restClientFactory.createServiceInstance(UserSelfService.class, mediaType, null, null).\n+                getOptions().getHeaderString(RESTHeaders.PWDRESET_ALLOWED));\n+    }\n+\n+    /**\n+     * Checks whether password reset requires security question by calling <tt>UserSelfService</tt>'s options.\n+     *\n+     * @return whether password reset requires security question\n+     * @see UserSelfService#getOptions()\n+     */\n+    public boolean isPwdResetRequiringSecurityQuestions() {\n+        return Boolean.valueOf(restClientFactory.createServiceInstance(UserSelfService.class, mediaType, null, null).\n+                getOptions().getHeaderString(RESTHeaders.PWDRESET_NEEDS_SECURITYQUESTIONS));\n+    }\n+\n+    /**\n+     * Checks whether Activiti workflow is enabled for users / roles, by calling <tt>WorkflowService</tt>'s options.\n+     *\n+     * @param subjectType user / role\n+     * @return whether Activiti workflow is enabled for given attributable type\n+     * @see WorkflowService#getOptions(org.apache.syncope.common.types.SubjectType)\n+     */\n+    public boolean isActivitiEnabledFor(final SubjectType subjectType) {\n+        Response options = getService(WorkflowService.class).getOptions(subjectType);\n+\n+        boolean result;\n+        switch (subjectType) {\n+            case ROLE:\n+                result = Boolean.valueOf(options.getHeaderString(RESTHeaders.ACTIVITI_ROLE_ENABLED));\n+                break;\n+\n+            case USER:\n+            default:\n+                result = Boolean.valueOf(options.getHeaderString(RESTHeaders.ACTIVITI_USER_ENABLED));\n+                break;\n+        }\n+\n+        return result;\n+    }\n+\n+    /**\n+     * Fetches <tt>ETag</tt> header value from latest service run (if available).\n+     *\n+     * @param <T> any service class\n+     * @param service service class instance\n+     * @return <tt>ETag</tt> header value from latest service run (if available)\n+     */\n+    public <T> EntityTag getLatestEntityTag(final T service) {\n+        return WebClient.client(service).getResponse().getEntityTag();\n+    }\n+}"},{"sha":"53e0fdaf38f5874ec6ba7a312a8a1958fefd833c","filename":"syncope620/client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"added","additions":202,"deletions":0,"changes":202,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","patch":"@@ -0,0 +1,202 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+import com.fasterxml.jackson.jaxrs.json.JacksonJaxbJsonProvider;\n+import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.List;\n+import java.util.Map;\n+import javax.ws.rs.core.MediaType;\n+import javax.xml.bind.Marshaller;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.feature.Feature;\n+import org.apache.cxf.feature.LoggingFeature;\n+import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n+import org.apache.cxf.staxutils.DocumentDepthProperties;\n+import org.apache.syncope.common.lib.to.AbstractPolicyTO;\n+\n+/**\n+ * Factory bean for creating instances of {@link SyncopeClient}.\n+ * Supports Spring-bean configuration and override via subclassing (see protected methods).\n+ */\n+public class SyncopeClientFactoryBean {\n+\n+    public enum ContentType {\n+\n+        JSON(MediaType.APPLICATION_JSON_TYPE),\n+        XML(MediaType.APPLICATION_XML_TYPE);\n+\n+        private final MediaType mediaType;\n+\n+        private ContentType(final MediaType mediaType) {\n+            this.mediaType = mediaType;\n+        }\n+\n+        public MediaType getMediaType() {\n+            return mediaType;\n+        }\n+\n+        public static ContentType fromString(final String value) {\n+            return StringUtils.isNotBlank(value) && value.equalsIgnoreCase(XML.getMediaType().toString())\n+                    ? XML\n+                    : JSON;\n+        }\n+    }\n+\n+    private JacksonJaxbJsonProvider jsonProvider;\n+\n+    @SuppressWarnings(\"rawtypes\")\n+    private JAXBElementProvider jaxbProvider;\n+\n+    private RestClientExceptionMapper exceptionMapper;\n+\n+    private String address;\n+\n+    private ContentType contentType;\n+\n+    private RestClientFactoryBean restClientFactoryBean;\n+\n+    protected JacksonJaxbJsonProvider defaultJsonProvider() {\n+        return new JacksonJaxbJsonProvider();\n+    }\n+\n+    @SuppressWarnings({ \"unchecked\", \"rawtypes\" })\n+    protected JAXBElementProvider defaultJAXBProvider() {\n+        JAXBElementProvider defaultJAXBProvider = new JAXBElementProvider();\n+\n+        DocumentDepthProperties depthProperties = new DocumentDepthProperties();\n+        depthProperties.setInnerElementCountThreshold(500);\n+        defaultJAXBProvider.setDepthProperties(depthProperties);\n+\n+        Map marshallerProperties = new HashMap();\n+        marshallerProperties.put(Marshaller.JAXB_FORMATTED_OUTPUT, Boolean.TRUE);\n+        defaultJAXBProvider.setMarshallerProperties(marshallerProperties);\n+\n+        Map<String, String> collectionWrapperMap = new HashMap<String, String>();\n+        collectionWrapperMap.put(AbstractPolicyTO.class.getName(), \"policies\");\n+        defaultJAXBProvider.setCollectionWrapperMap(collectionWrapperMap);\n+\n+        return defaultJAXBProvider;\n+    }\n+\n+    protected RestClientExceptionMapper defaultExceptionMapper() {\n+        return new RestClientExceptionMapper();\n+    }\n+\n+    protected RestClientFactoryBean defaultRestClientFactoryBean() {\n+        RestClientFactoryBean defaultRestClientFactoryBean = new RestClientFactoryBean();\n+\n+        if (StringUtils.isBlank(address)) {\n+            throw new IllegalArgumentException(\"Property 'address' is missing\");\n+        }\n+        defaultRestClientFactoryBean.setAddress(address);\n+\n+        defaultRestClientFactoryBean.setThreadSafe(true);\n+        defaultRestClientFactoryBean.setInheritHeaders(true);\n+\n+        List<Feature> features = new ArrayList<Feature>();\n+        features.add(new LoggingFeature());\n+        defaultRestClientFactoryBean.setFeatures(features);\n+\n+        List<Object> providers = new ArrayList<Object>(3);\n+        providers.add(getJaxbProvider());\n+        providers.add(getJsonProvider());\n+        providers.add(getExceptionMapper());\n+        defaultRestClientFactoryBean.setProviders(providers);\n+\n+        return defaultRestClientFactoryBean;\n+    }\n+\n+    public JacksonJaxbJsonProvider getJsonProvider() {\n+        return jsonProvider == null\n+                ? defaultJsonProvider()\n+                : jsonProvider;\n+    }\n+\n+    public void setJsonProvider(final JacksonJaxbJsonProvider jsonProvider) {\n+        this.jsonProvider = jsonProvider;\n+    }\n+\n+    public JAXBElementProvider getJaxbProvider() {\n+        return jaxbProvider == null\n+                ? defaultJAXBProvider()\n+                : jaxbProvider;\n+    }\n+\n+    public SyncopeClientFactoryBean setJaxbProvider(final JAXBElementProvider jaxbProvider) {\n+        this.jaxbProvider = jaxbProvider;\n+        return this;\n+    }\n+\n+    public RestClientExceptionMapper getExceptionMapper() {\n+        return exceptionMapper == null\n+                ? defaultExceptionMapper()\n+                : exceptionMapper;\n+    }\n+\n+    public SyncopeClientFactoryBean setExceptionMapper(final RestClientExceptionMapper exceptionMapper) {\n+        this.exceptionMapper = exceptionMapper;\n+        return this;\n+    }\n+\n+    public String getAddress() {\n+        return address;\n+    }\n+\n+    public SyncopeClientFactoryBean setAddress(final String address) {\n+        this.address = address;\n+        return this;\n+    }\n+\n+    public ContentType getContentType() {\n+        return contentType == null\n+                ? ContentType.JSON\n+                : contentType;\n+    }\n+\n+    public SyncopeClientFactoryBean setContentType(final ContentType contentType) {\n+        this.contentType = contentType;\n+        return this;\n+    }\n+\n+    public SyncopeClientFactoryBean setContentType(final String contentType) {\n+        this.contentType = ContentType.fromString(contentType);\n+        return this;\n+    }\n+\n+    public RestClientFactoryBean getRestClientFactoryBean() {\n+        return restClientFactoryBean == null\n+                ? defaultRestClientFactoryBean()\n+                : restClientFactoryBean;\n+    }\n+\n+    public SyncopeClientFactoryBean setRestClientFactoryBean(final RestClientFactoryBean restClientFactoryBean) {\n+        this.restClientFactoryBean = restClientFactoryBean;\n+        return this;\n+    }\n+\n+    public SyncopeClient createAnonymous() {\n+        return create(null, null);\n+    }\n+\n+    public SyncopeClient create(final String username, final String password) {\n+        return new SyncopeClient(getContentType().getMediaType(), getRestClientFactoryBean(), username, password);\n+    }\n+}"},{"sha":"f8092003776835dabaa707cbf0c2034f4e125fcd","filename":"syncope620/client/pom.xml","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fclient%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fclient%2Fpom.xml?ref=06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","patch":"@@ -0,0 +1,40 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<project xmlns=\"http://maven.apache.org/POM/4.0.0\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd\">\n+\n+  <modelVersion>4.0.0</modelVersion>\n+\n+  <parent>\n+    <groupId>org.apache.syncope</groupId>\n+    <artifactId>syncope</artifactId>\n+    <version>2.0.0-SNAPSHOT</version>\n+  </parent>\n+\n+  <name>Apache Syncope Client</name>\n+  <description>Apache Syncope Client</description>\n+  <groupId>org.apache.syncope</groupId>\n+  <artifactId>syncope-client</artifactId>\n+  <packaging>pom</packaging>\n+\n+  <modules>\n+    <module>lib</module>\n+  </modules>\n+\n+</project>"},{"sha":"fe966f3987e53bebb87f8a996ae842cfd6891c3a","filename":"syncope620/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41/syncope620%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/syncope620%2Fpom.xml?ref=06eb20a1b6dac8fd6b9e4d7a827e52b2961c8b41","patch":"@@ -820,5 +820,6 @@ under the License.\n   <modules>\n     <module>common</module>\n     <module>server</module>\n+    <module>client</module>\n   </modules>\n </project>"}]}