{"sha":"f1329b79966d1986bbbfe031e46d61469468abd1","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmYxMzI5Yjc5OTY2ZDE5ODZiYmJmZTAzMWU0NmQ2MTQ2OTQ2OGFiZDE=","commit":{"author":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-04-12T09:21:56Z"},"committer":{"name":"Andrea Patricelli","email":"andreapatricelli@apache.org","date":"2017-04-12T10:14:20Z"},"message":"[SYNCOPE-1064] improved security to avoid JS hacking and exploitation, added relative tests and moved form customization server side","tree":{"sha":"44ef0c51a98735deceb68c180588e7c704b0472b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/44ef0c51a98735deceb68c180588e7c704b0472b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f1329b79966d1986bbbfe031e46d61469468abd1","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1329b79966d1986bbbfe031e46d61469468abd1","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f1329b79966d1986bbbfe031e46d61469468abd1","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f1329b79966d1986bbbfe031e46d61469468abd1/comments","author":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"committer":{"login":"andrea-patricelli","id":3763111,"node_id":"MDQ6VXNlcjM3NjMxMTE=","avatar_url":"https://avatars.githubusercontent.com/u/3763111?v=4","gravatar_id":"","url":"https://api.github.com/users/andrea-patricelli","html_url":"https://github.com/andrea-patricelli","followers_url":"https://api.github.com/users/andrea-patricelli/followers","following_url":"https://api.github.com/users/andrea-patricelli/following{/other_user}","gists_url":"https://api.github.com/users/andrea-patricelli/gists{/gist_id}","starred_url":"https://api.github.com/users/andrea-patricelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/andrea-patricelli/subscriptions","organizations_url":"https://api.github.com/users/andrea-patricelli/orgs","repos_url":"https://api.github.com/users/andrea-patricelli/repos","events_url":"https://api.github.com/users/andrea-patricelli/events{/privacy}","received_events_url":"https://api.github.com/users/andrea-patricelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b"}],"stats":{"total":981,"additions":711,"deletions":270},"files":[{"sha":"1db4417142b31950a4303501330b172ec6b5711b","filename":"archetype/pom.xml","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/archetype%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/archetype%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fpom.xml?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -257,6 +257,7 @@ under the License.\n         <targetPath>${project.build.outputDirectory}/archetype-resources/enduser/src/main/resources</targetPath>\n         <includes>\n           <include>enduser.properties</include>\n+          <include>customForm.json</include>\n         </includes>\n       </resource>\n       <resource>\n@@ -283,6 +284,7 @@ under the License.\n         <includes>\n           <include>enduser.properties</include>\n           <include>saml2sp-agent.properties</include>\n+          <include>customForm.json</include>\n         </includes>\n       </resource>\n       <resource>"},{"sha":"06f77d47e00781bd127472624fee6d2b69cfca65","filename":"archetype/src/main/resources/archetype-resources/enduser/pom.xml","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/archetype%2Fsrc%2Fmain%2Fresources%2Farchetype-resources%2Fenduser%2Fpom.xml?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -246,6 +246,10 @@ under the License.\n                     <copy file=\"${project.build.directory}/test-classes/enduser.properties\" \n                           todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n                           overwrite=\"true\"/>\n+                    \n+                    <copy file=\"${project.build.directory}/test-classes/customForm\" \n+                                todir=\"${project.build.directory}/${project.build.finalName}/WEB-INF/classes\" \n+                                overwrite=\"true\"/>\n                   </target>\n                 </configuration>\n                 <goals>"},{"sha":"52fe4360149f373e052d3d20637b827c7db57390","filename":"client/enduser/pom.xml","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fpom.xml?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -182,6 +182,14 @@ under the License.\n       <groupId>org.apache.logging.log4j</groupId>\n       <artifactId>log4j-core</artifactId>\n     </dependency>\n+    \n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>junit</groupId>\n+      <artifactId>junit</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    \n   </dependencies>\n   \n   <build>"},{"sha":"fc0d730861aa88e19c8f15b49f45a7bf8d9600e4","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":101,"deletions":0,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -18,16 +18,28 @@\n  */\n package org.apache.syncope.client.enduser;\n \n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.File;\n+import java.io.FileFilter;\n+import java.io.IOException;\n import java.io.InputStream;\n import java.io.Serializable;\n+import java.util.HashMap;\n+import java.util.Map;\n import org.apache.syncope.client.enduser.pages.HomePage;\n import java.util.Properties;\n import org.apache.commons.io.FileUtils;\n+import org.apache.commons.io.monitor.FileAlterationListener;\n+import org.apache.commons.io.monitor.FileAlterationListenerAdaptor;\n+import org.apache.commons.io.monitor.FileAlterationMonitor;\n+import org.apache.commons.io.monitor.FileAlterationObserver;\n import org.apache.commons.lang3.BooleanUtils;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.enduser.annotations.Resource;\n import org.apache.syncope.client.enduser.init.ClassPathScanImplementationLookup;\n import org.apache.syncope.client.enduser.init.EnduserInitializer;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.resources.CaptchaResource;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n@@ -52,6 +64,8 @@ public class SyncopeEnduserApplication extends WebApplication implements Seriali\n \n     private static final String ENDUSER_PROPERTIES = \"enduser.properties\";\n \n+    private static final String CUSTOM_FORM_FILE = \"customForm.json\";\n+\n     public static SyncopeEnduserApplication get() {\n         return (SyncopeEnduserApplication) WebApplication.get();\n     }\n@@ -76,6 +90,10 @@ public static SyncopeEnduserApplication get() {\n \n     private SyncopeClientFactoryBean clientFactory;\n \n+    private Map<String, CustomAttributesInfo> customForm;\n+\n+    private static final ObjectMapper MAPPER = new ObjectMapper();\n+\n     @Override\n     protected void init() {\n         super.init();\n@@ -131,6 +149,80 @@ protected void init() {\n                 setContentType(SyncopeClientFactoryBean.ContentType.JSON).\n                 setUseCompression(BooleanUtils.toBoolean(useGZIPCompression));\n \n+        // read customForm.json\n+        try (InputStream is = getClass().getResourceAsStream(\"/\" + CUSTOM_FORM_FILE)) {\n+            customForm = MAPPER.readValue(is,\n+                    new TypeReference<HashMap<String, CustomAttributesInfo>>() {\n+            });\n+            File enduserDir = new File(props.getProperty(\"enduser.directory\"));\n+            boolean existsEnduserDir = enduserDir.exists() && enduserDir.canRead() && enduserDir.isDirectory();\n+            if (existsEnduserDir) {\n+                File customFormFile = FileUtils.getFile(enduserDir, CUSTOM_FORM_FILE);\n+                if (customFormFile.exists() && customFormFile.canRead() && customFormFile.isFile()) {\n+                    customForm = MAPPER.readValue(FileUtils.openInputStream(customFormFile),\n+                            new TypeReference<HashMap<String, CustomAttributesInfo>>() {\n+                    });\n+                }\n+            }\n+            FileAlterationObserver observer = existsEnduserDir\n+                    ? new FileAlterationObserver(enduserDir, new FileFilter() {\n+\n+                        @Override\n+                        public boolean accept(final File pathname) {\n+                            return StringUtils.contains(pathname.getPath(), CUSTOM_FORM_FILE);\n+                        }\n+                    })\n+                    : new FileAlterationObserver(getClass().getResource(\"/\" + CUSTOM_FORM_FILE).getFile(),\n+                            new FileFilter() {\n+\n+                        @Override\n+                        public boolean accept(final File pathname) {\n+                            return StringUtils.contains(pathname.getPath(), CUSTOM_FORM_FILE);\n+                        }\n+                    });\n+\n+            FileAlterationMonitor monitor = new FileAlterationMonitor(5000);\n+\n+            FileAlterationListener listener = new FileAlterationListenerAdaptor() {\n+\n+                @Override\n+                public void onFileChange(final File file) {\n+                    try {\n+                        LOG.trace(\"{} has changed. Reloading form customization configuration.\", CUSTOM_FORM_FILE);\n+                        customForm = MAPPER.readValue(FileUtils.openInputStream(file),\n+                                new TypeReference<HashMap<String, CustomAttributesInfo>>() {\n+                        });\n+                    } catch (IOException e) {\n+                        e.printStackTrace(System.err);\n+                    }\n+                }\n+\n+                @Override\n+                public void onFileCreate(final File file) {\n+                    try {\n+                        LOG.trace(\"{} has been created. Loading form customization configuration.\", CUSTOM_FORM_FILE);\n+                        customForm = MAPPER.readValue(FileUtils.openInputStream(file),\n+                                new TypeReference<HashMap<String, CustomAttributesInfo>>() {\n+                        });\n+                    } catch (IOException e) {\n+                        e.printStackTrace(System.err);\n+                    }\n+                }\n+\n+                @Override\n+                public void onFileDelete(final File file) {\n+                    LOG.trace(\"{} has been deleted. Resetting form customization configuration.\", CUSTOM_FORM_FILE);\n+                    customForm = null;\n+                }\n+            };\n+\n+            observer.addListener(listener);\n+            monitor.addObserver(observer);\n+            monitor.start();\n+        } catch (Exception e) {\n+            throw new WicketRuntimeException(\"Could not read \" + CUSTOM_FORM_FILE, e);\n+        }\n+\n         // mount resources\n         ClassPathScanImplementationLookup classPathScanImplementationLookup =\n                 (ClassPathScanImplementationLookup) getServletContext().\n@@ -221,4 +313,13 @@ public boolean isXsrfEnabled() {\n         return xsrfEnabled;\n     }\n \n+    public Map<String, CustomAttributesInfo> getCustomForm() {\n+        return customForm;\n+    }\n+\n+    public void setCustomForm(final Map<String, CustomAttributesInfo> customForm) {\n+        this.customForm.clear();\n+        this.customForm.putAll(customForm);\n+    }\n+\n }"},{"sha":"0a683a98310cc51fa348d65e37e015ded98d505d","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserConstants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserConstants.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -26,6 +26,8 @@ public final class SyncopeEnduserConstants {\n \n     public static final String XSRF_HEADER_NAME = \"X-XSRF-TOKEN\";\n \n+    public static final String MEMBERSHIP_ATTR_SEPARATOR = \"#\";\n+\n     private SyncopeEnduserConstants() {\n         // private constructor for utility class\n     }"},{"sha":"8268ef5565575bd27d6f0dc36ca052e9c6feb4bc","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.enduser;\n \n import java.security.AccessControlException;\n+import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n@@ -28,6 +29,7 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n@@ -66,6 +68,8 @@ public class SyncopeEnduserSession extends WebSession {\n \n     private final CookieUtils cookieUtils;\n \n+    private final Map<String, CustomAttributesInfo> customForm;\n+\n     private boolean xsrfTokenGenerated = false;\n \n     public static SyncopeEnduserSession get() {\n@@ -92,6 +96,7 @@ public boolean evaluate(final PlainSchemaTO object) {\n                 return object.getType() == AttrSchemaType.Date;\n             }\n         });\n+        customForm = new HashMap<>();\n     }\n \n     private void afterAuthentication() {\n@@ -197,4 +202,14 @@ public boolean isXsrfTokenGenerated() {\n     public void setXsrfTokenGenerated(final boolean xsrfTokenGenerated) {\n         this.xsrfTokenGenerated = xsrfTokenGenerated;\n     }\n+\n+    public Map<String, CustomAttributesInfo> getCustomForm() {\n+        return customForm;\n+    }\n+\n+    public void setCustomForm(final Map<String, CustomAttributesInfo> customForm) {\n+        this.customForm.clear();\n+        this.customForm.putAll(customForm);\n+    }\n+\n }"},{"sha":"a961576f1c8b19b009e2e3580fec89eb63790ed8","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/adapters/PlatformInfoAdapter.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fadapters%2FPlatformInfoAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fadapters%2FPlatformInfoAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fadapters%2FPlatformInfoAdapter.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -18,19 +18,23 @@\n  */\n package org.apache.syncope.client.enduser.adapters;\n \n+import java.util.Map;\n import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.model.PlatformInfoRequest;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n \n public final class PlatformInfoAdapter {\n \n-    public static PlatformInfoRequest toPlatformInfoRequest(final PlatformInfo platformInfo) {\n+    public static PlatformInfoRequest toPlatformInfoRequest(final PlatformInfo platformInfo,\n+            final Map<String, CustomAttributesInfo> customForm) {\n         PlatformInfoRequest request = new PlatformInfoRequest();\n         request.setPwdResetAllowed(platformInfo.isPwdResetAllowed());\n         request.setSelfRegAllowed(platformInfo.isSelfRegAllowed());\n         request.setPwdResetRequiringSecurityQuestions(platformInfo.isPwdResetRequiringSecurityQuestions());\n         request.setVersion(platformInfo.getVersion());\n         request.setCaptchaEnabled(SyncopeEnduserApplication.get().isCaptchaEnabled());\n+        request.setCustomForm(customForm);\n \n         return request;\n     }"},{"sha":"80d65f69dd0742660b8d5e3f4f2d6abbf13c336b","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttribute.java","status":"added","additions":62,"deletions":0,"changes":62,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttribute.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -0,0 +1,62 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.model;\n+\n+import java.io.Serializable;\n+import java.util.ArrayList;\n+import java.util.List;\n+\n+public class CustomAttribute implements Serializable {\n+\n+    private static final long serialVersionUID = 4910266842123376686L;\n+\n+    private Boolean readonly;\n+\n+    private List<String> defaultValues = new ArrayList<>();\n+\n+    public CustomAttribute() {\n+    }\n+\n+    public Boolean getReadonly() {\n+        return readonly;\n+    }\n+\n+    public void setReadonly(final Boolean readonly) {\n+        this.readonly = readonly;\n+    }\n+\n+    public List<String> getDefaultValues() {\n+        return defaultValues;\n+    }\n+\n+    public void setDefaultValues(final List<String> defaultValues) {\n+        this.defaultValues = defaultValues;\n+    }\n+\n+    public CustomAttribute readonly(final Boolean value) {\n+        this.readonly = value;\n+        return this;\n+    }\n+\n+    public CustomAttribute defaultValues(final List<String> value) {\n+        this.defaultValues = value;\n+        return this;\n+    }\n+\n+}"},{"sha":"a62a6bb21243c6c9264ab521486afd172c1d445f","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/model/CustomAttributesInfo.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttributesInfo.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttributesInfo.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FCustomAttributesInfo.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -28,7 +28,7 @@ public class CustomAttributesInfo implements Serializable {\n \n     private Boolean show = Boolean.TRUE;\n \n-    private Map<String, ?> attributes = new LinkedHashMap<>();\n+    private Map<String, CustomAttribute> attributes = new LinkedHashMap<>();\n \n     public CustomAttributesInfo() {\n     }\n@@ -41,11 +41,11 @@ public void setShow(final Boolean show) {\n         this.show = show;\n     }\n \n-    public Map<String, ?> getAttributes() {\n+    public Map<String, CustomAttribute> getAttributes() {\n         return attributes;\n     }\n \n-    public void setAttributes(final Map<String, ?> attributes) {\n+    public void setAttributes(final Map<String, CustomAttribute> attributes) {\n         this.attributes = attributes;\n     }\n \n@@ -54,7 +54,7 @@ public CustomAttributesInfo show(final Boolean value) {\n         return this;\n     }\n \n-    public CustomAttributesInfo attributes(final Map<String, ?> value) {\n+    public CustomAttributesInfo attributes(final Map<String, CustomAttribute> value) {\n         this.attributes = value;\n         return this;\n     }"},{"sha":"a75ae5323ee30cc347c8f5f69a30b1c441434caf","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/model/PlatformInfoRequest.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FPlatformInfoRequest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FPlatformInfoRequest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fmodel%2FPlatformInfoRequest.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.client.enduser.model;\n \n import java.io.Serializable;\n+import java.util.Map;\n \n public class PlatformInfoRequest implements Serializable {\n \n@@ -34,6 +35,8 @@ public class PlatformInfoRequest implements Serializable {\n \n     private boolean captchaEnabled;\n \n+    private Map<String, CustomAttributesInfo> customForm;\n+\n     public PlatformInfoRequest() {\n     }\n \n@@ -77,4 +80,12 @@ public void setCaptchaEnabled(final boolean captchaEnabled) {\n         this.captchaEnabled = captchaEnabled;\n     }\n \n+    public Map<String, CustomAttributesInfo> getCustomForm() {\n+        return customForm;\n+    }\n+\n+    public void setCustomForm(final Map<String, CustomAttributesInfo> customForm) {\n+        this.customForm = customForm;\n+    }\n+\n }"},{"sha":"a3e73e8395a91a6613104ecc03af2c14c368d7a2","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/BaseUserSelfResource.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FBaseUserSelfResource.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -18,6 +18,8 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n+import java.io.IOException;\n+import java.nio.charset.StandardCharsets;\n import java.text.ParseException;\n import java.util.ArrayList;\n import java.util.List;\n@@ -63,5 +65,17 @@ protected void millisToDate(final Map<String, AttrTO> plainAttrMap, final PlainS\n             dateAttr.getValues().addAll(formattedValues);\n         }\n     }\n+    \n+    protected void buildResponse(final ResourceResponse response, final int statusCode, final String message) {\n+        response.setTextEncoding(StandardCharsets.UTF_8.name());\n+        response.setStatusCode(statusCode);\n+        response.setWriteCallback(new WriteCallback() {\n+\n+            @Override\n+            public void writeData(final Attributes attributes) throws IOException {\n+                attributes.getResponse().write(message);\n+            }\n+        });\n+    }\n \n }"},{"sha":"c96fa2a162e901a16e2dea4cfeb2026969ef2885","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/InfoResource.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FInfoResource.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -18,15 +18,21 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n+import static org.apache.syncope.client.enduser.resources.BaseResource.MAPPER;\n+\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n+import java.util.HashMap;\n+import java.util.Map;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.adapters.PlatformInfoAdapter;\n import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.util.SaltGenerator;\n import org.apache.wicket.request.resource.IResource;\n import org.apache.wicket.util.cookies.CookieUtils;\n@@ -57,10 +63,14 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n \n                 @Override\n                 public void writeData(final IResource.Attributes attributes) throws IOException {\n+                    Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();\n                     attributes.getResponse().write(\n                             MAPPER.writeValueAsString(\n                                     PlatformInfoAdapter.toPlatformInfoRequest(\n-                                            SyncopeEnduserSession.get().getPlatformInfo())));\n+                                            SyncopeEnduserSession.get().getPlatformInfo(),\n+                                            customForm == null\n+                                                    ? new HashMap<String, CustomAttributesInfo>()\n+                                                    : customForm)));\n                 }\n             });\n             response.setStatusCode(Response.Status.OK.getStatusCode());"},{"sha":"5edd4b058b2589b3ef33f681400cdc84fef2603b","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/SchemaResource.java","status":"modified","additions":7,"deletions":7,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FSchemaResource.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -20,13 +20,11 @@\n \n import static org.apache.syncope.client.enduser.resources.BaseResource.MAPPER;\n \n-import com.fasterxml.jackson.core.type.TypeReference;\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.ArrayList;\n import java.util.Collections;\n import java.util.Comparator;\n-import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n import javax.servlet.http.HttpServletRequest;\n@@ -36,8 +34,11 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n+import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.model.CustomAttribute;\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.model.SchemaResponse;\n import org.apache.syncope.common.lib.to.AbstractSchemaTO;\n@@ -103,9 +104,8 @@ public boolean evaluate(final GroupTO item) {\n                 }\n             }\n \n-            Map<String, CustomAttributesInfo> customForm = MAPPER.readValue(request.getReader().readLine(),\n-                    new TypeReference<HashMap<String, CustomAttributesInfo>>() {\n-            });\n+            // USER from customization, if empty or null ignore it, use it to filter attributes otherwise\n+            Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();\n \n             SchemaService schemaService = SyncopeEnduserSession.get().getService(SchemaService.class);\n             final List<AbstractSchemaTO> plainSchemas = classes.isEmpty()\n@@ -176,7 +176,7 @@ public void writeData(final IResource.Attributes attributes) throws IOException\n     }\n \n     private List<AbstractSchemaTO> customizeSchemas(final List<AbstractSchemaTO> schemaTOs, final String groupParam,\n-            final Map<String, ?> customForm) {\n+            final Map<String, CustomAttribute> customForm) {\n \n         if (customForm.isEmpty()) {\n             return schemaTOs;\n@@ -211,7 +211,7 @@ public int compare(final AbstractSchemaTO schemaTO1, final AbstractSchemaTO sche\n     }\n \n     private String compositeSchemaKey(final String prefix, final String schemaKey) {\n-        return prefix + \"#\" + schemaKey;\n+        return prefix + SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR + schemaKey;\n     }\n \n }"},{"sha":"b7775b1c169e33d7fca8a4d59b3355f5e29afd41","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfCreateResource.java","status":"modified","additions":102,"deletions":98,"changes":200,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfCreateResource.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -20,8 +20,6 @@\n \n import static org.apache.syncope.client.enduser.resources.BaseResource.LOG;\n \n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n@@ -34,6 +32,7 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.util.UserRequestValidator;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -83,113 +82,118 @@ protected ResourceResponse newResourceResponse(final Attributes attributes) {\n             }\n \n             if (isSelfRegistrationAllowed() && userTO != null) {\n-\n-                // 1. membership attributes management\n-                Set<AttrTO> membAttrs = new HashSet<>();\n-                for (AttrTO attr : userTO.getPlainAttrs()) {\n-                    if (attr.getSchema().contains(\"#\")) {\n-                        final String[] simpleAttrs = attr.getSchema().split(\"#\");\n-                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                new Predicate<MembershipTO>() {\n-\n-                            @Override\n-                            public boolean evaluate(final MembershipTO item) {\n-                                return simpleAttrs[0].equals(item.getGroupName());\n+                LOG.debug(\"User self registration request for [{}]\", userTO.getUsername());\n+                LOG.trace(\"Request is [{}]\", userTO);\n+\n+                // check if request is compliant with customization form rules\n+                if (UserRequestValidator.compliant(userTO, SyncopeEnduserSession.get().getCustomForm(), true)) {\n+\n+                    // 1. membership attributes management\n+                    Set<AttrTO> membAttrs = new HashSet<>();\n+                    for (AttrTO attr : userTO.getPlainAttrs()) {\n+                        if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n+                            final String[] simpleAttrs = attr.getSchema().split(\n+                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                            MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n+                                    new Predicate<MembershipTO>() {\n+\n+                                @Override\n+                                public boolean evaluate(final MembershipTO item) {\n+                                    return simpleAttrs[0].equals(item.getGroupName());\n+                                }\n+                            });\n+                            if (membership == null) {\n+                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                userTO.getMemberships().add(membership);\n                             }\n-                        });\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                            userTO.getMemberships().add(membership);\n-                        }\n \n-                        AttrTO clone = SerializationUtils.clone(attr);\n-                        clone.setSchema(simpleAttrs[1]);\n-                        membership.getPlainAttrs().add(clone);\n-                        membAttrs.add(attr);\n+                            AttrTO clone = SerializationUtils.clone(attr);\n+                            clone.setSchema(simpleAttrs[1]);\n+                            membership.getPlainAttrs().add(clone);\n+                            membAttrs.add(attr);\n+                        }\n                     }\n-                }\n-                userTO.getPlainAttrs().removeAll(membAttrs);\n-\n-                // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n-                Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n-                for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                    millisToDate(userPlainAttrMap, plainSchema);\n-                    for (MembershipTO membership : userTO.getMemberships()) {\n-                        millisToDate(membership.getPlainAttrMap(), plainSchema);\n+                    userTO.getPlainAttrs().removeAll(membAttrs);\n+\n+                    // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n+                    Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n+                    for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n+                        millisToDate(userPlainAttrMap, plainSchema);\n+                        for (MembershipTO membership : userTO.getMemberships()) {\n+                            millisToDate(membership.getPlainAttrMap(), plainSchema);\n+                        }\n                     }\n-                }\n-\n-                membAttrs.clear();\n-                for (AttrTO attr : userTO.getDerAttrs()) {\n-                    if (attr.getSchema().contains(\"#\")) {\n-                        final String[] simpleAttrs = attr.getSchema().split(\"#\");\n-                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                new Predicate<MembershipTO>() {\n \n-                            @Override\n-                            public boolean evaluate(final MembershipTO item) {\n-                                return simpleAttrs[0].equals(item.getGroupName());\n+                    membAttrs.clear();\n+                    for (AttrTO attr : userTO.getDerAttrs()) {\n+                        if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n+                            final String[] simpleAttrs = attr.getSchema().split(\n+                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                            MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n+                                    new Predicate<MembershipTO>() {\n+\n+                                @Override\n+                                public boolean evaluate(final MembershipTO item) {\n+                                    return simpleAttrs[0].equals(item.getGroupName());\n+                                }\n+                            });\n+                            if (membership == null) {\n+                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                userTO.getMemberships().add(membership);\n                             }\n-                        });\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                            userTO.getMemberships().add(membership);\n-                        }\n \n-                        AttrTO clone = SerializationUtils.clone(attr);\n-                        clone.setSchema(simpleAttrs[1]);\n-                        membership.getDerAttrs().add(clone);\n-                        membAttrs.add(attr);\n+                            AttrTO clone = SerializationUtils.clone(attr);\n+                            clone.setSchema(simpleAttrs[1]);\n+                            membership.getDerAttrs().add(clone);\n+                            membAttrs.add(attr);\n+                        }\n                     }\n-                }\n-                userTO.getDerAttrs().removeAll(membAttrs);\n-\n-                membAttrs.clear();\n-                for (AttrTO attr : userTO.getVirAttrs()) {\n-                    if (attr.getSchema().contains(\"#\")) {\n-                        final String[] simpleAttrs = attr.getSchema().split(\"#\");\n-                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                                new Predicate<MembershipTO>() {\n-\n-                            @Override\n-                            public boolean evaluate(final MembershipTO item) {\n-                                return simpleAttrs[0].equals(item.getGroupName());\n+                    userTO.getDerAttrs().removeAll(membAttrs);\n+\n+                    membAttrs.clear();\n+                    for (AttrTO attr : userTO.getVirAttrs()) {\n+                        if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n+                            final String[] simpleAttrs = attr.getSchema().split(\n+                                    SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                            MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n+                                    new Predicate<MembershipTO>() {\n+\n+                                @Override\n+                                public boolean evaluate(final MembershipTO item) {\n+                                    return simpleAttrs[0].equals(item.getGroupName());\n+                                }\n+                            });\n+                            if (membership == null) {\n+                                membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                                userTO.getMemberships().add(membership);\n                             }\n-                        });\n-                        if (membership == null) {\n-                            membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                            userTO.getMemberships().add(membership);\n-                        }\n \n-                        AttrTO clone = SerializationUtils.clone(attr);\n-                        clone.setSchema(simpleAttrs[1]);\n-                        membership.getVirAttrs().add(clone);\n-                        membAttrs.add(attr);\n+                            AttrTO clone = SerializationUtils.clone(attr);\n+                            clone.setSchema(simpleAttrs[1]);\n+                            membership.getVirAttrs().add(clone);\n+                            membAttrs.add(attr);\n+                        }\n                     }\n+                    userTO.getVirAttrs().removeAll(membAttrs);\n+\n+                    LOG.debug(\"Received user self registration request for user: [{}]\", userTO.getUsername());\n+                    LOG.trace(\"Received user self registration request is: [{}]\", userTO);\n+\n+                    // adapt request and create user\n+                    final Response res = SyncopeEnduserSession.get().getService(UserSelfService.class).create(userTO,\n+                            true);\n+\n+                    buildResponse(response, res.getStatus(),\n+                            Response.Status.Family.SUCCESSFUL.equals(res.getStatusInfo().getFamily())\n+                            ? \"User[ \" + userTO.getUsername() + \"] successfully created\"\n+                            : \"ErrorMessage{{ \" + res.getStatusInfo().getReasonPhrase() + \" }}\");\n+                } else {\n+                    LOG.warn(\n+                            \"Incoming create request [{}] is not compliant with form customization rules. \"\n+                            + \"Create NOT allowed\", userTO.getUsername());\n+                    buildResponse(response, Response.Status.OK.getStatusCode(),\n+                            \"User: \" + userTO.getUsername() + \" successfully created\");\n                 }\n-                userTO.getVirAttrs().removeAll(membAttrs);\n-\n-                LOG.debug(\"Received user self registration request for user: [{}]\", userTO.getUsername());\n-                LOG.trace(\"Received user self registration request is: [{}]\", userTO);\n-\n-                // adapt request and create user\n-                final Response res = SyncopeEnduserSession.get().getService(UserSelfService.class).create(userTO, true);\n-\n-                response.setTextEncoding(StandardCharsets.UTF_8.name());\n-\n-                response.setWriteCallback(new WriteCallback() {\n-\n-                    @Override\n-                    public void writeData(final Attributes attributes) throws IOException {\n-                        attributes.getResponse().write(res.getStatusInfo().getFamily().equals(\n-                                Response.Status.Family.SUCCESSFUL)\n-                                        ? new StringBuilder().append(\"User: \").append(userTO.getUsername()).\n-                                                append(\" successfully created\")\n-                                        : new StringBuilder().append(\"ErrorMessage{{ \").\n-                                                append(res.getStatusInfo().getReasonPhrase()).append(\" }}\"));\n-                    }\n-                });\n-                response.setStatusCode(res.getStatus());\n             } else {\n                 response.setError(Response.Status.FORBIDDEN.getStatusCode(), new StringBuilder().\n                         append(\"ErrorMessage{{\").append(userTO == null\n@@ -198,7 +202,7 @@ public void writeData(final Attributes attributes) throws IOException {\n             }\n \n         } catch (Exception e) {\n-            LOG.error(\"Could not create userTO\", e);\n+            LOG.error(\"Unable to create userTO\", e);\n             response.setError(Response.Status.BAD_REQUEST.getStatusCode(),\n                     new StringBuilder().\n                             append(\"ErrorMessage{{ \")."},{"sha":"81ffcd1c582dce4ffcfe91eb8fc35cbd6f2bf408","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfReadResource.java","status":"modified","additions":37,"deletions":3,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfReadResource.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -18,19 +18,29 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n+import static org.apache.syncope.client.enduser.resources.BaseResource.MAPPER;\n+\n import java.io.IOException;\n import java.nio.charset.StandardCharsets;\n import java.util.Map;\n+import java.util.Set;\n import javax.servlet.http.HttpServletRequest;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.client.enduser.SyncopeEnduserApplication;\n+import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.model.CustomAttribute;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n import org.apache.wicket.request.resource.AbstractResource;\n import org.apache.wicket.request.resource.IResource;\n \n@@ -68,22 +78,35 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n             for (MembershipTO membership : userTO.getMemberships()) {\n                 String groupName = membership.getGroupName();\n                 for (AttrTO attr : membership.getPlainAttrs()) {\n-                    attr.setSchema(groupName.concat(\"#\").concat(attr.getSchema()));\n+                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).concat(attr.\n+                            getSchema()));\n                     userTO.getPlainAttrs().add(attr);\n                 }\n                 membership.getPlainAttrs().clear();\n                 for (AttrTO attr : membership.getDerAttrs()) {\n-                    attr.setSchema(groupName.concat(\"#\").concat(attr.getSchema()));\n+                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).concat(attr.\n+                            getSchema()));\n                     userTO.getDerAttrs().add(attr);\n                 }\n                 membership.getDerAttrs().clear();\n                 for (AttrTO attr : membership.getVirAttrs()) {\n-                    attr.setSchema(groupName.concat(\"#\").concat(attr.getSchema()));\n+                    attr.setSchema(groupName.concat(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR).concat(attr.\n+                            getSchema()));\n                     userTO.getVirAttrs().add(attr);\n                 }\n                 membership.getVirAttrs().clear();\n             }\n+            // USER from customization, if empty or null ignore it, use it to filter attributes otherwise\n+            Map<String, CustomAttributesInfo> customForm = SyncopeEnduserApplication.get().getCustomForm();\n \n+            if (customForm != null && !customForm.isEmpty()) {\n+                // filter PLAIN attributes\n+                customizeAttrs(userTO.getPlainAttrs(), customForm.get(SchemaType.PLAIN.name()).getAttributes());\n+                // filter DERIVED attributes\n+                customizeAttrs(userTO.getDerAttrs(), customForm.get(SchemaType.DERIVED.name()).getAttributes());\n+                // filter VIRTUAL attributes\n+                customizeAttrs(userTO.getVirAttrs(), customForm.get(SchemaType.VIRTUAL.name()).getAttributes());\n+            }\n             final String selfTOJson = MAPPER.writeValueAsString(userTO);\n             response.setContentType(MediaType.APPLICATION_JSON);\n             response.setTextEncoding(StandardCharsets.UTF_8.name());\n@@ -107,4 +130,15 @@ public void writeData(final Attributes attributes) throws IOException {\n         return response;\n     }\n \n+    private void customizeAttrs(final Set<AttrTO> attrs,\n+            final Map<String, CustomAttribute> customForm) {\n+\n+        CollectionUtils.filter(attrs, new Predicate<AttrTO>() {\n+\n+            @Override\n+            public boolean evaluate(final AttrTO attr) {\n+                return customForm.containsKey(attr.getSchema());\n+            }\n+        });\n+    }\n }"},{"sha":"828f323b70b266c7673eb05e4172d6c3840b9582","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/resources/UserSelfUpdateResource.java","status":"modified","additions":93,"deletions":95,"changes":188,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Fresources%2FUserSelfUpdateResource.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.client.enduser.resources;\n \n-import java.io.IOException;\n-import java.nio.charset.StandardCharsets;\n import java.util.HashSet;\n import java.util.Map;\n import java.util.Set;\n@@ -32,6 +30,7 @@\n import org.apache.syncope.client.enduser.SyncopeEnduserConstants;\n import org.apache.syncope.client.enduser.SyncopeEnduserSession;\n import org.apache.syncope.client.enduser.annotations.Resource;\n+import org.apache.syncope.client.enduser.util.UserRequestValidator;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.to.AttrTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n@@ -67,111 +66,110 @@ protected ResourceResponse newResourceResponse(final IResource.Attributes attrib\n \n             UserTO userTO = MAPPER.readValue(request.getReader().readLine(), UserTO.class);\n \n-            // 1. membership attributes management\n-            Set<AttrTO> membAttrs = new HashSet<>();\n-            for (AttrTO attr : userTO.getPlainAttrs()) {\n-                if (attr.getSchema().contains(\"#\")) {\n-                    final String[] compositeSchemaKey = attr.getSchema().split(\"#\");\n-                    MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                            new Predicate<MembershipTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final MembershipTO item) {\n-                            return compositeSchemaKey[0].equals(item.getGroupName());\n+            // check if request is compliant with customization form rules\n+            if (UserRequestValidator.compliant(userTO, SyncopeEnduserSession.get().getCustomForm(), false)) {\n+                // 1. membership attributes management\n+                Set<AttrTO> membAttrs = new HashSet<>();\n+                for (AttrTO attr : userTO.getPlainAttrs()) {\n+                    if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n+                        final String[] compositeSchemaKey = attr.getSchema().split(\n+                                SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n+                                new Predicate<MembershipTO>() {\n+\n+                            @Override\n+                            public boolean evaluate(final MembershipTO item) {\n+                                return compositeSchemaKey[0].equals(item.getGroupName());\n+                            }\n+                        });\n+                        if (membership == null) {\n+                            membership = new MembershipTO.Builder().group(null, compositeSchemaKey[0]).build();\n+                            userTO.getMemberships().add(membership);\n                         }\n-                    });\n-                    if (membership == null) {\n-                        membership = new MembershipTO.Builder().group(null, compositeSchemaKey[0]).build();\n-                        userTO.getMemberships().add(membership);\n+                        AttrTO clone = SerializationUtils.clone(attr);\n+                        clone.setSchema(compositeSchemaKey[1]);\n+                        membership.getPlainAttrs().add(clone);\n+                        membAttrs.add(attr);\n                     }\n-                    AttrTO clone = SerializationUtils.clone(attr);\n-                    clone.setSchema(compositeSchemaKey[1]);\n-                    membership.getPlainAttrs().add(clone);\n-                    membAttrs.add(attr);\n                 }\n-            }\n-            userTO.getPlainAttrs().removeAll(membAttrs);\n-\n-            // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n-            Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n-            for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n-                millisToDate(userPlainAttrMap, plainSchema);\n-                for (MembershipTO membership : userTO.getMemberships()) {\n-                    millisToDate(membership.getPlainAttrMap(), plainSchema);\n+                userTO.getPlainAttrs().removeAll(membAttrs);\n+\n+                // 2. millis -> Date conversion for PLAIN attributes of USER and its MEMBERSHIPS\n+                Map<String, AttrTO> userPlainAttrMap = userTO.getPlainAttrMap();\n+                for (PlainSchemaTO plainSchema : SyncopeEnduserSession.get().getDatePlainSchemas()) {\n+                    millisToDate(userPlainAttrMap, plainSchema);\n+                    for (MembershipTO membership : userTO.getMemberships()) {\n+                        millisToDate(membership.getPlainAttrMap(), plainSchema);\n+                    }\n                 }\n-            }\n \n-            membAttrs.clear();\n-            for (AttrTO attr : userTO.getDerAttrs()) {\n-                if (attr.getSchema().contains(\"#\")) {\n-                    final String[] simpleAttrs = attr.getSchema().split(\"#\");\n-                    MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                            new Predicate<MembershipTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final MembershipTO item) {\n-                            return simpleAttrs[0].equals(item.getGroupName());\n+                membAttrs.clear();\n+                for (AttrTO attr : userTO.getDerAttrs()) {\n+                    if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n+                        final String[] simpleAttrs = attr.getSchema().split(\n+                                SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n+                                new Predicate<MembershipTO>() {\n+\n+                            @Override\n+                            public boolean evaluate(final MembershipTO item) {\n+                                return simpleAttrs[0].equals(item.getGroupName());\n+                            }\n+                        });\n+                        if (membership == null) {\n+                            membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                            userTO.getMemberships().add(membership);\n                         }\n-                    });\n-                    if (membership == null) {\n-                        membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                        userTO.getMemberships().add(membership);\n+                        AttrTO clone = SerializationUtils.clone(attr);\n+                        clone.setSchema(simpleAttrs[1]);\n+                        membership.getDerAttrs().add(clone);\n+                        membAttrs.add(attr);\n                     }\n-                    AttrTO clone = SerializationUtils.clone(attr);\n-                    clone.setSchema(simpleAttrs[1]);\n-                    membership.getDerAttrs().add(clone);\n-                    membAttrs.add(attr);\n                 }\n-            }\n-            userTO.getDerAttrs().removeAll(membAttrs);\n-\n-            membAttrs.clear();\n-            for (AttrTO attr : userTO.getVirAttrs()) {\n-                if (attr.getSchema().contains(\"#\")) {\n-                    final String[] simpleAttrs = attr.getSchema().split(\"#\");\n-                    MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n-                            new Predicate<MembershipTO>() {\n-\n-                        @Override\n-                        public boolean evaluate(final MembershipTO item) {\n-                            return simpleAttrs[0].equals(item.getGroupName());\n-                        }\n-                    });\n-                    if (membership == null) {\n-                        membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n-                        userTO.getMemberships().add(membership);\n+                userTO.getDerAttrs().removeAll(membAttrs);\n+\n+                membAttrs.clear();\n+                for (AttrTO attr : userTO.getVirAttrs()) {\n+                    if (attr.getSchema().contains(SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR)) {\n+                        final String[] simpleAttrs = attr.getSchema().split(\n+                                SyncopeEnduserConstants.MEMBERSHIP_ATTR_SEPARATOR);\n+                        MembershipTO membership = IterableUtils.find(userTO.getMemberships(),\n+                                new Predicate<MembershipTO>() {\n+\n+                            @Override\n+                            public boolean evaluate(final MembershipTO item) {\n+                                return simpleAttrs[0].equals(item.getGroupName());\n+                            }\n+                        });\n+                        if (membership == null) {\n+                            membership = new MembershipTO.Builder().group(null, simpleAttrs[0]).build();\n+                            userTO.getMemberships().add(membership);\n \n+                        }\n+                        AttrTO clone = SerializationUtils.clone(attr);\n+                        clone.setSchema(simpleAttrs[1]);\n+                        membership.getVirAttrs().add(clone);\n+                        membAttrs.add(attr);\n                     }\n-                    AttrTO clone = SerializationUtils.clone(attr);\n-                    clone.setSchema(simpleAttrs[1]);\n-                    membership.getVirAttrs().add(clone);\n-                    membAttrs.add(attr);\n                 }\n+                userTO.getVirAttrs().removeAll(membAttrs);\n+\n+                // update user by patch\n+                Response res = SyncopeEnduserSession.get().\n+                        getService(userTO.getETagValue(), UserSelfService.class).update(AnyOperations.diff(userTO,\n+                        SyncopeEnduserSession.get().getSelfTO(), true));\n+\n+                buildResponse(response, res.getStatus(), res.getStatusInfo().getFamily().equals(\n+                        Response.Status.Family.SUCCESSFUL)\n+                                ? \"User [\" + userTO.getUsername() + \"] successfully updated\"\n+                                : \"ErrorMessage{{ \" + res.getStatusInfo().getReasonPhrase() + \" }}\");\n+            } else {\n+                LOG.warn(\n+                        \"Incoming update request [{}] is not compliant with form customization rules.\"\n+                        + \" Update NOT allowed\", userTO.getUsername());\n+                buildResponse(response, Response.Status.OK.getStatusCode(),\n+                        \"User: \" + userTO.getUsername() + \" successfully created\");\n             }\n-            userTO.getVirAttrs().removeAll(membAttrs);\n-\n-            // update user by patch\n-            Response res = SyncopeEnduserSession.get().\n-                    getService(userTO.getETagValue(), UserSelfService.class).update(AnyOperations.diff(userTO,\n-                    SyncopeEnduserSession.get().getSelfTO(), true));\n-\n-            final String responseMessage = res.getStatusInfo().getFamily().equals(Response.Status.Family.SUCCESSFUL)\n-                    ? new StringBuilder().\n-                            append(\"User\").append(userTO.getUsername()).append(\" successfully updated\").toString()\n-                    : new StringBuilder().\n-                            append(\"ErrorMessage{{ \").append(res.getStatusInfo().getReasonPhrase()).append(\" }}\").\n-                            toString();\n-\n-            response.setTextEncoding(StandardCharsets.UTF_8.name());\n-            response.setWriteCallback(new WriteCallback() {\n-\n-                @Override\n-                public void writeData(final Attributes attributes) throws IOException {\n-                    attributes.getResponse().write(responseMessage);\n-                }\n-            });\n-\n-            response.setStatusCode(res.getStatus());\n         } catch (final Exception e) {\n             LOG.error(\"Error while updating user\", e);\n             response.setError(Response.Status.BAD_REQUEST.getStatusCode(),"},{"sha":"350ae176328f1a62d34895d43920fe5bde0bfc30","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/util/UserRequestValidator.java","status":"added","additions":86,"deletions":0,"changes":86,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidator.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -0,0 +1,86 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.util;\n+\n+import java.util.Map;\n+import org.apache.commons.collections4.IterableUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.syncope.client.enduser.model.CustomAttribute;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.apache.syncope.common.lib.types.SchemaType;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public final class UserRequestValidator {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(UserRequestValidator.class);\n+\n+    private UserRequestValidator() {\n+    }\n+\n+    public static boolean compliant(final UserTO userTO, final Map<String, CustomAttributesInfo> customForm,\n+            final boolean checkDefaultValues) {\n+\n+        if (customForm.isEmpty()) {\n+            return true;\n+        }\n+\n+        return validateAttributes(userTO.getPlainAttrMap(), customForm.get(SchemaType.PLAIN.name()), checkDefaultValues)\n+                && validateAttributes(userTO.getDerAttrMap(), customForm.get(SchemaType.DERIVED.name()),\n+                        checkDefaultValues)\n+                && validateAttributes(userTO.getVirAttrMap(), customForm.get(SchemaType.VIRTUAL.name()),\n+                        checkDefaultValues);\n+    }\n+\n+    private static boolean validateAttributes(final Map<String, AttrTO> attrMap,\n+            final CustomAttributesInfo customAttrInfo, final boolean checkDefaultValues) {\n+\n+        return IterableUtils.matchesAll(attrMap.entrySet(), new Predicate<Map.Entry<String, AttrTO>>() {\n+\n+            @Override\n+            public boolean evaluate(final Map.Entry<String, AttrTO> entry) {\n+                String schemaKey = entry.getKey();\n+                AttrTO attrTO = entry.getValue();\n+                CustomAttribute customAttr = customAttrInfo.getAttributes().get(schemaKey);\n+                boolean compliant = customAttr != null && (!checkDefaultValues || isValid(attrTO, customAttr));\n+                if (!compliant) {\n+                    LOG.trace(\"Attribute [{}] or its values [{}] are not allowed by form customization rules\",\n+                            attrTO.getSchema(), attrTO.getValues());\n+                }\n+                return compliant;\n+            }\n+        });\n+\n+    }\n+\n+    private static boolean isValid(final AttrTO attrTO, final CustomAttribute customAttribute) {\n+        return customAttribute.getReadonly()\n+                ? IterableUtils.matchesAll(attrTO.getValues(), new Predicate<String>() {\n+\n+                    @Override\n+                    public boolean evaluate(final String object) {\n+                        return customAttribute.getDefaultValues().contains(object);\n+                    }\n+                })\n+                : true;\n+    }\n+\n+}"},{"sha":"0967ef424bce6791893e9a57bb952f80fd536e93","filename":"client/enduser/src/main/resources/META-INF/resources/app/configuration/customForm.json","status":"removed","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fconfiguration%2FcustomForm.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fconfiguration%2FcustomForm.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fconfiguration%2FcustomForm.json?ref=7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b","patch":"@@ -1 +0,0 @@\n-{}"},{"sha":"6bc7b8a7d59f9943d88d6030b765e61c88cd6d62","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/app.js","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fapp.js?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -332,8 +332,7 @@ app.run(['$rootScope', '$location', '$state', 'AuthService',\n     };\n   }]);\n app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'InfoService', 'SAML2IdPService',\n-  'ConfigurationService',\n-  function ($scope, $rootScope, $location, InfoService, SAML2IdPService, ConfigurationService) {\n+  function ($scope, $rootScope, $location, InfoService, SAML2IdPService) {\n     $scope.initApplication = function () {\n       /* \n        * disable by default wizard buttons in self-registration\n@@ -376,6 +375,10 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I\n                 $rootScope.version = response.version;\n                 $rootScope.pwdResetRequiringSecurityQuestions = response.pwdResetRequiringSecurityQuestions;\n                 $rootScope.captchaEnabled = response.captchaEnabled;\n+                /* \n+                 * USER form customization JSON\n+                 */\n+                $rootScope.customForm = response.customForm;\n               },\n               function (response) {\n                 console.error(\"Something went wrong while accessing info resource\", response);\n@@ -407,14 +410,6 @@ app.controller('ApplicationController', ['$scope', '$rootScope', '$location', 'I\n       $rootScope.getVersion = function () {\n         return $rootScope.version;\n       };\n-      /* \n-       * USER Attributes form customization\n-       */\n-      ConfigurationService.get(\"customForm.json\").then(function (response) {\n-        $rootScope.customForm = response;\n-      }, function (e) {\n-        console.warn(\"Unable to retrieve form customization file provided, applying default configuration.\");\n-      });\n       /* \n        * USER Attributes sorting strategies\n        */"},{"sha":"d49032fc059c43f646d69c307f624366bde14cc7","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/controllers/UserController.js","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FUserController.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FUserController.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fcontrollers%2FUserController.js?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -41,7 +41,6 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l\n     $scope.captchaInput = {\n       value: \"\"\n     };\n-    $scope.customForm = {};\n \n     $scope.initUser = function () {\n       $scope.dynamicForm = {\n@@ -401,6 +400,7 @@ angular.module(\"self\").controller(\"UserController\", ['$scope', '$rootScope', '$l\n \n     $scope.saveUser = function (user) {\n       var wrappedUser = UserUtil.getWrappedUser(user);\n+      wrappedUser.plainAttrs.push({\"schema\":\"cazzzz\",\"values\":[\"cazzzz\"]});\n       if ($scope.createMode) {\n         UserSelfService.create(wrappedUser, $scope.captchaInput.value).then(function (response) {\n           console.debug(\"User \" + $scope.user.username + \" SUCCESSFULLY_CREATED\");"},{"sha":"25ee9f279d62dfc9acd620ce048b423f86246210","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/services/configurationService.js","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FconfigurationService.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FconfigurationService.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FconfigurationService.js?ref=7a08dc65ac9eb22708fab32c30ba9a36e6b81b7b","patch":"@@ -1,41 +0,0 @@\n-/* \n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-\n-'use strict';\n-\n-angular.module('self')\n-        .factory('ConfigurationService', ['$q', '$http',\n-          function ($q, $http) {\n-\n-            var configuration = {};\n-\n-            configuration.get = function (filename) {\n-              return  $http.get(\"/syncope-enduser/app/configuration/\" + filename, {cache: false})\n-                      .then(function (response) {\n-                        return response.data;\n-                      }, function (response) {\n-                        console.error(\"Unable to retrieve \" + filename);\n-                        return $q.reject(response.data);\n-                      });\n-            };\n-\n-            return configuration;\n-          }]);\n-\n-"},{"sha":"be214fc3bb85b5a98a7bac298ac3b1b771dbab46","filename":"client/enduser/src/main/resources/META-INF/resources/app/js/services/schemaService.js","status":"modified","additions":4,"deletions":8,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FschemaService.js","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FschemaService.js","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fresources%2Fapp%2Fjs%2Fservices%2FschemaService.js?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -25,11 +25,9 @@ angular.module('self')\n \n             var schemaService = {};\n \n-            schemaService.getUserSchemas = function (anyTypeClass, customForm, sortingFunction) {\n+            schemaService.getUserSchemas = function (anyTypeClass, sortingFunction) {\n               var classParam = anyTypeClass ? \"?anyTypeClass=\" + encodeURI(anyTypeClass) : \"\";\n-              var body = customForm ? customForm : {};\n-\n-              return  $http.post(\"/syncope-enduser/api/schemas\" + classParam, body)\n+              return  $http.get(\"/syncope-enduser/api/schemas\" + classParam)\n                       .then(function (response) {\n                         var schemas = response.data;\n                         if (sortingFunction) {\n@@ -44,11 +42,9 @@ angular.module('self')\n                       });\n             };\n \n-            schemaService.getTypeExtSchemas = function (group, customForm) {\n+            schemaService.getTypeExtSchemas = function (group) {\n               var param = group ? \"?group=\" + encodeURI(group) : \"\";\n-              var body = customForm ? customForm : {};\n-\n-              return  $http.post(\"/syncope-enduser/api/schemas\" + param, body)\n+              return  $http.get(\"/syncope-enduser/api/schemas\" + param)\n                       .then(function (response) {\n                         return response.data;\n                       }, function (response) {"},{"sha":"9e26dfeeb6e641a33dae4961196235bdb965b21b","filename":"client/enduser/src/main/resources/customForm.json","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FcustomForm.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FcustomForm.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fresources%2FcustomForm.json?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -0,0 +1 @@\n+{}\n\\ No newline at end of file"},{"sha":"88c611abc0262e4b6a2252723e716e2c930cb2aa","filename":"client/enduser/src/test/java/org/apache/syncope/client/enduser/util/UserRequestValidatorTest.java","status":"added","additions":85,"deletions":0,"changes":85,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2Futil%2FUserRequestValidatorTest.java?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -0,0 +1,85 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements. See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership. The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License. You may obtain a copy of the License at\n+ *\n+ * http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied. See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.enduser.util;\n+\n+import com.fasterxml.jackson.core.type.TypeReference;\n+import com.fasterxml.jackson.databind.ObjectMapper;\n+import java.io.IOException;\n+import java.util.Arrays;\n+import java.util.HashMap;\n+import java.util.Map;\n+import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n+import org.apache.syncope.common.lib.to.AttrTO;\n+import org.apache.syncope.common.lib.to.UserTO;\n+import org.junit.Assert;\n+import org.junit.Test;\n+import org.springframework.core.io.ClassPathResource;\n+\n+public class UserRequestValidatorTest {\n+\n+    @Test\n+    public void testCompliant() throws IOException {\n+\n+        UserTO userTO = new UserTO();\n+        // plain\n+        AttrTO firstname = buildAttrTO(\"firstname\", \"defaultFirstname\");\n+        AttrTO surname = buildAttrTO(\"surname\", \"surnameValue\");\n+        AttrTO additionalCtype = buildAttrTO(\"additional#ctype\", \"ctypeValue\");\n+        AttrTO notAllowed = buildAttrTO(\"not_allowed\", \"notAllowedValue\");\n+        userTO.getPlainAttrs().addAll(Arrays.asList(firstname, surname, notAllowed, additionalCtype));\n+\n+        Map<String, CustomAttributesInfo> customForm = new ObjectMapper().readValue(new ClassPathResource(\n+                \"customForm.json\").getFile(), new TypeReference<HashMap<String, CustomAttributesInfo>>() {\n+        });\n+\n+        // not allowed because of presence of notAllowed attribute\n+        Assert.assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n+\n+        // remove notAllowed attribute and make it compliant\n+        userTO.getPlainAttrs().remove(notAllowed);\n+        Assert.assertTrue(UserRequestValidator.compliant(userTO, customForm, true));\n+\n+        // firstname must have only one defaultValue\n+        userTO.getPlainAttrMap().get(\"firstname\").getValues().add(\"notAllowedFirstnameValue\");\n+        Assert.assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n+        Assert.assertTrue(UserRequestValidator.compliant(userTO, customForm, false));\n+        // clean\n+        userTO.getPlainAttrMap().get(\"firstname\").getValues().remove(\"notAllowedFirstnameValue\");\n+\n+        // derived must not be present\n+        AttrTO derivedNotAllowed = buildAttrTO(\"derivedNotAllowed\");\n+        userTO.getDerAttrs().add(derivedNotAllowed);\n+        Assert.assertFalse(UserRequestValidator.compliant(userTO, customForm, true));\n+        // clean \n+        userTO.getDerAttrs().clear();\n+\n+        // virtual\n+        AttrTO virtualdata = buildAttrTO(\"virtualdata\", \"defaultVirtualData\");\n+        userTO.getVirAttrs().add(virtualdata);\n+        Assert.assertTrue(UserRequestValidator.compliant(userTO, customForm, true));\n+\n+        // with empty form is compliant by definition\n+        Assert.assertTrue(UserRequestValidator.compliant(userTO, new HashMap<String, CustomAttributesInfo>(), true));\n+    }\n+\n+    private AttrTO buildAttrTO(String schemaKey, String... values) {\n+        return new AttrTO.Builder().schema(schemaKey).values(values).build();\n+    }\n+\n+}"},{"sha":"0a8b4d3f1b746482d547e4eb5cbd9c1d04bb3cf8","filename":"client/enduser/src/test/resources/customForm.json","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Ftest%2Fresources%2FcustomForm.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/client%2Fenduser%2Fsrc%2Ftest%2Fresources%2FcustomForm.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Ftest%2Fresources%2FcustomForm.json?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -0,0 +1,47 @@\n+{\n+  \"PLAIN\": \n+          {\n+            \"show\": true,\n+            \"attributes\": {\n+              \"firstname\": {\n+                \"readonly\": true,\n+                \"defaultValues\": [\"defaultFirstname\"]\n+              },\n+              \"surname\": {\n+                \"readonly\": false,\n+                \"defaultValues\": []\n+              },\n+              \"fullname\": {\n+                \"readonly\": false\n+              },\n+              \"loginDate\": {\n+                \"readonly\": false\n+              },\n+              \"additional#loginDate\": {\n+                \"readonly\": false\n+              },\n+              \"additional#ctype\": {\n+                \"readonly\": false,\n+                \"defaultValues\": [\"ctypeDefault\"]\n+              },\n+              \"additional#cool\": {\n+                \"readonly\": false,\n+                \"defaultValues\": [\"true\"]\n+              }\n+            }\n+          },\n+  \"DERIVED\":\n+          {\n+            \"show\": false\n+          },\n+  \"VIRTUAL\": \n+          {\n+            \"show\": true,\n+            \"attributes\": {\n+              \"virtualdata\": {\n+                \"readonly\": true,\n+                \"defaultValues\": [\"defaultVirtualData\"]\n+              }\n+            }\n+          }\n+}\n\\ No newline at end of file"},{"sha":"f8d8204dca0b62178319ac452ebf439881444676","filename":"deb/enduser/pom.xml","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/deb%2Fenduser%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/deb%2Fenduser%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fenduser%2Fpom.xml?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -93,6 +93,7 @@ under the License.\n         <includes>\n           <include>enduser.properties</include>\n           <include>enduserContext.xml</include>\n+          <include>customForm.json</include>\n         </includes>\n         <targetPath>${project.build.directory}/etc</targetPath>\n         <filtering>true</filtering>"},{"sha":"934c7fbf0ff0ebdf81ae140f126130a427f07277","filename":"deb/enduser/src/deb/control/conffiles","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/deb%2Fenduser%2Fsrc%2Fdeb%2Fcontrol%2Fconffiles?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -1,3 +1,4 @@\n /etc/tomcat8/Catalina/localhost/syncope-enduser.xml\n /etc/apache-syncope/enduser.properties\n+/etc/apache-syncope/customForm.json\n /etc/apache-syncope/saml2sp-agent.properties"},{"sha":"9e26dfeeb6e641a33dae4961196235bdb965b21b","filename":"fit/enduser-reference/src/main/resources/customForm.json","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2FcustomForm.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2FcustomForm.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Fmain%2Fresources%2FcustomForm.json?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -0,0 +1 @@\n+{}\n\\ No newline at end of file"},{"sha":"9e26dfeeb6e641a33dae4961196235bdb965b21b","filename":"fit/enduser-reference/src/test/resources/customForm.json","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f1329b79966d1986bbbfe031e46d61469468abd1/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2FcustomForm.json","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f1329b79966d1986bbbfe031e46d61469468abd1/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2FcustomForm.json","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fenduser-reference%2Fsrc%2Ftest%2Fresources%2FcustomForm.json?ref=f1329b79966d1986bbbfe031e46d61469468abd1","patch":"@@ -0,0 +1 @@\n+{}\n\\ No newline at end of file"}]}