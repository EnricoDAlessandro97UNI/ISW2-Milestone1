{"sha":"5ff02d7cbfbe4674028aede2822acea712e28c53","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjVmZjAyZDdjYmZiZTQ2NzQwMjhhZWRlMjgyMmFjZWE3MTJlMjhjNTM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-07-25T11:25:54Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-07-25T11:25:54Z"},"message":"[SYNCOPE-406] Using JPA entity listener for @PreUpdate and @PrePersit, removing AspectJ\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1506901 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c53105769d6d59650426012fb80786b7cb6ce541","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c53105769d6d59650426012fb80786b7cb6ce541"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/5ff02d7cbfbe4674028aede2822acea712e28c53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ff02d7cbfbe4674028aede2822acea712e28c53","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/5ff02d7cbfbe4674028aede2822acea712e28c53","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/5ff02d7cbfbe4674028aede2822acea712e28c53/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28"}],"stats":{"total":538,"additions":224,"deletions":314},"files":[{"sha":"cc61d0a59c643dbbc515034ba5744edecc987cc9","filename":"core/pom.xml","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -124,10 +124,6 @@ under the License.\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-context-support</artifactId>\n     </dependency>\n-    <dependency>\n-      <groupId>org.springframework</groupId>\n-      <artifactId>spring-aop</artifactId>\n-    </dependency>\n     <dependency>\n       <groupId>org.springframework</groupId>\n       <artifactId>spring-tx</artifactId>\n@@ -164,11 +160,6 @@ under the License.\n       <groupId>org.springframework.security</groupId>\n       <artifactId>spring-security-config</artifactId>\n     </dependency>\n-\n-    <dependency>\n-      <groupId>org.aspectj</groupId>\n-      <artifactId>aspectjweaver</artifactId>\n-    </dependency>\n \t\n     <dependency>\n       <groupId>com.fasterxml.jackson.jaxrs</groupId>\n@@ -590,7 +581,6 @@ under the License.\n                   org.apache.openjpa*;version=\"[2,3)\",\n                   org.apache.syncope.common*;version=${project.version},\n                   org.apache.velocity*;version=\"[1.7,2)\",\n-                  org.aspectj.lang*;version=\"[1.7,2)\",\n                   org.codehaus.jackson*;version=\"[1.9,2)\",\n                   org.jasypt.digest;version=\"[1.9,2)\",\n                   org.quartz*;version=\"[2.1,3)\","},{"sha":"a5862875464269c49763d44076cc6198d801a883","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Entitlement.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -23,11 +23,8 @@\n import javax.persistence.Entity;\n import javax.persistence.Id;\n \n-import org.apache.syncope.core.persistence.validation.entity.EntitlementCheck;\n-\n @Entity\n @Cacheable\n-@EntitlementCheck\n public class Entitlement extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 8044745999246422483L;"},{"sha":"92e3fa4a7924d1c7356b5a27b90cd928daf03c70","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Policy.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -22,6 +22,8 @@\n import javax.persistence.EnumType;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n+import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.Lob;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.types.AbstractPolicySpec;\n@@ -30,6 +32,7 @@\n import org.apache.syncope.core.util.XMLSerializer;\n \n @Entity\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n @PolicyCheck\n public abstract class Policy extends AbstractBaseBean {\n "},{"sha":"a02750b8051d55d9249446fb9486eca642028914","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/Task.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FTask.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -26,12 +26,13 @@\n import javax.persistence.Entity;\n import javax.persistence.Id;\n import javax.persistence.Inheritance;\n+import javax.persistence.InheritanceType;\n import javax.persistence.OneToMany;\n \n @Entity\n-@Inheritance\n+@Inheritance(strategy = InheritanceType.SINGLE_TABLE)\n @DiscriminatorColumn(name = \"DTYPE\")\n-public class Task extends AbstractBaseBean {\n+public abstract class Task extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 5837401178128177511L;\n "},{"sha":"cfcc233318bf85ee58691d2bae58c6db8124b59c","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/PolicyDAO.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -42,5 +42,5 @@ public interface PolicyDAO extends DAO {\n \n     <T extends Policy> T save(T policy);\n \n-    void delete(Long id);\n+    <T extends Policy> void delete(T policy);\n }"},{"sha":"75cedca2169383a917cafb1377abe0ff3e70fde3","filename":"core/src/main/java/org/apache/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":47,"deletions":2,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -18,14 +18,22 @@\n  */\n package org.apache.syncope.core.persistence.dao.impl;\n \n+import static org.apache.syncope.common.types.PolicyType.ACCOUNT;\n+import static org.apache.syncope.common.types.PolicyType.GLOBAL_ACCOUNT;\n+import static org.apache.syncope.common.types.PolicyType.GLOBAL_PASSWORD;\n+import static org.apache.syncope.common.types.PolicyType.GLOBAL_SYNC;\n+import static org.apache.syncope.common.types.PolicyType.PASSWORD;\n+import static org.apache.syncope.common.types.PolicyType.SYNC;\n import java.util.List;\n import javax.persistence.TypedQuery;\n+import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.PolicyType;\n import org.apache.syncope.core.persistence.beans.AccountPolicy;\n import org.apache.syncope.core.persistence.beans.PasswordPolicy;\n import org.apache.syncope.core.persistence.beans.Policy;\n import org.apache.syncope.core.persistence.beans.SyncPolicy;\n import org.apache.syncope.core.persistence.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.springframework.stereotype.Repository;\n \n @Repository\n@@ -77,11 +85,48 @@ public List<Policy> findAll() {\n \n     @Override\n     public <T extends Policy> T save(final T policy) {\n+        switch (policy.getType()) {\n+            case GLOBAL_PASSWORD:\n+                // just one GLOBAL_PASSWORD policy\n+                final PasswordPolicy passwordPolicy = getGlobalPasswordPolicy();\n+\n+                if (passwordPolicy != null && !passwordPolicy.getId().equals(policy.getId())) {\n+                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidPasswordPolicy,\n+                            \"Global Password policy already exists\");\n+                }\n+                break;\n+\n+            case GLOBAL_ACCOUNT:\n+                // just one GLOBAL_ACCOUNT policy\n+                final AccountPolicy accountPolicy = getGlobalAccountPolicy();\n+\n+                if (accountPolicy != null && !accountPolicy.getId().equals(policy.getId())) {\n+                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidAccountPolicy,\n+                            \"Global Account policy already exists\");\n+                }\n+                break;\n+\n+            case GLOBAL_SYNC:\n+                // just one GLOBAL_SYNC policy\n+                final SyncPolicy syncPolicy = getGlobalSyncPolicy();\n+\n+                if (syncPolicy != null && !syncPolicy.getId().equals(policy.getId())) {\n+                    throw new InvalidEntityException(PasswordPolicy.class, EntityViolationType.InvalidSyncPolicy,\n+                            \"Global Synchronization policy already exists\");\n+                }\n+                break;\n+\n+            case PASSWORD:\n+            case ACCOUNT:\n+            case SYNC:\n+            default:\n+        }\n+\n         return entityManager.merge(policy);\n     }\n \n     @Override\n-    public void delete(final Long id) {\n-        entityManager.remove(find(id));\n+    public <T extends Policy> void delete(final T policy) {\n+        entityManager.remove(policy);\n     }\n }"},{"sha":"cbdef1ab3138597c36fac61626021e28b866365b","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/EntitlementCheck.java","status":"removed","additions":0,"deletions":41,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementCheck.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementCheck.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementCheck.java?ref=45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28","patch":"@@ -1,41 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.validation.entity;\n-\n-import java.lang.annotation.Documented;\n-import java.lang.annotation.ElementType;\n-import java.lang.annotation.Retention;\n-import java.lang.annotation.RetentionPolicy;\n-import java.lang.annotation.Target;\n-\n-import javax.validation.Constraint;\n-import javax.validation.Payload;\n-\n-@Target( { ElementType.TYPE })\n-@Retention(RetentionPolicy.RUNTIME)\n-@Constraint(validatedBy = EntitlementValidator.class)\n-@Documented\n-public @interface EntitlementCheck {\n-\n-    String message() default \"{org.apache.syncope.core.validation.entitlement}\";\n-\n-    Class<?>[] groups() default {};\n-\n-    Class<? extends Payload>[] payload() default {};\n-}"},{"sha":"890ca09184673f94ce5454331249c42bbdc82e72","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/EntitlementValidator.java","status":"removed","additions":0,"deletions":64,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntitlementValidator.java?ref=45f7fea7d13eb306a61fed13eb5ff4a9bcbf0c28","patch":"@@ -1,64 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.validation.entity;\n-\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n-import javax.validation.ConstraintValidator;\n-import javax.validation.ConstraintValidatorContext;\n-import org.apache.syncope.common.types.EntityViolationType;\n-import org.apache.syncope.core.persistence.beans.Entitlement;\n-\n-public class EntitlementValidator extends AbstractValidator implements\n-        ConstraintValidator<EntitlementCheck, Entitlement> {\n-\n-    private static final Pattern ROLE_ENTITLEMENT_NAME_PATTERN = Pattern.compile(\"^ROLE_([\\\\d])+\");\n-\n-    @Override\n-    public void initialize(final EntitlementCheck constraintAnnotation) {\n-    }\n-\n-    @Override\n-    public boolean isValid(final Entitlement object, final ConstraintValidatorContext context) {\n-\n-        boolean isValid = false;\n-\n-        if (object == null) {\n-            isValid = true;\n-        } else {\n-            if (object.getName() == null) {\n-                isValid = false;\n-            } else {\n-                Matcher matcher = ROLE_ENTITLEMENT_NAME_PATTERN.matcher(object.getName());\n-                isValid = !matcher.matches();\n-            }\n-\n-            if (!isValid) {\n-                LOG.error(object + \" cannot have name starting by ROLE_\");\n-\n-                context.disableDefaultConstraintViolation();\n-                context.buildConstraintViolationWithTemplate(getTemplate(\n-                        EntityViolationType.InvalidEntitlementName, object + \" cannot have name starting by ROLE_\")).\n-                        addNode(\"name\").addConstraintViolation();\n-            }\n-        }\n-\n-        return isValid;\n-    }\n-}"},{"sha":"ba56deb6d0b87f814afb75de704ffe8e8d672ca6","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/EntityValidationListener.java","status":"renamed","additions":12,"deletions":27,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationListener.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationListener.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FEntityValidationListener.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -19,49 +19,34 @@\n package org.apache.syncope.core.persistence.validation.entity;\n \n import java.util.Set;\n+import javax.persistence.PrePersist;\n+import javax.persistence.PreUpdate;\n \n import javax.validation.ConstraintViolation;\n import javax.validation.Validator;\n+import org.apache.syncope.core.util.ApplicationContextProvider;\n \n-import org.aspectj.lang.ProceedingJoinPoint;\n-import org.aspectj.lang.annotation.Around;\n-import org.aspectj.lang.annotation.Aspect;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n-import org.springframework.stereotype.Component;\n \n /**\n- * AOP proxy intercepting DAO calls.\n+ * JPA validation listener implementing bean validation.\n  */\n-@Component\n-@Aspect\n-public class EntityValidationInterceptor {\n+public class EntityValidationListener {\n \n     /**\n      * Logger.\n      */\n-    private static final Logger LOG = LoggerFactory.getLogger(EntityValidationInterceptor.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(EntityValidationListener.class);\n \n-    @Autowired\n-    private Validator validator;\n-\n-    /**\n-     * Validate bean prior saving to DB.\n-     *\n-     * @param pjp Aspect's ProceedingJoinPoint\n-     * @return DAO method's return value\n-     * @throws Throwable if anything goes wrong\n-     */\n-    @Around(\"execution(* org.apache.syncope.core.persistence.dao..*.save(..))\")\n-    public final Object save(final ProceedingJoinPoint pjp) throws Throwable {\n-\n-        Set<ConstraintViolation<Object>> violations = validator.validate(pjp.getArgs()[0]);\n+    @PrePersist\n+    @PreUpdate\n+    public void validate(final Object object) {\n+        final Validator validator = ApplicationContextProvider.getApplicationContext().getBean(Validator.class);\n+        Set<ConstraintViolation<Object>> violations = validator.validate(object);\n         if (!violations.isEmpty()) {\n             LOG.error(\"Bean validation errors found: {}\", violations);\n-            throw new InvalidEntityException(pjp.getArgs()[0].getClass().getSimpleName(), violations);\n+            throw new InvalidEntityException(object.getClass().getSimpleName(), violations);\n         }\n-\n-        return pjp.proceed();\n     }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/EntityValidationInterceptor.java"},{"sha":"ae59466de6c0a2ea3974b824ebf456daacb41c6a","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/InvalidEntityException.java","status":"modified","additions":32,"deletions":3,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FInvalidEntityException.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -26,22 +26,51 @@\n import javax.validation.ValidationException;\n import org.apache.syncope.common.types.EntityViolationType;\n \n+/**\n+ * Exception thrown when any JPA entity fails bean validation.\n+ */\n public class InvalidEntityException extends ValidationException {\n \n     private static final long serialVersionUID = 3249297275444409691L;\n \n-    private String entityClassSimpleName;\n+    private final String entityClassSimpleName;\n+\n+    private final Map<Class<?>, Set<EntityViolationType>> violations =\n+            new HashMap<Class<?>, Set<EntityViolationType>>();\n+\n+    /**\n+     * Constructs a singleton map of violations from given parameters.\n+     *\n+     * @param entityClass class of invalid entity\n+     * @param entityViolationType type of violation found\n+     * @param message message to be associated to the violation\n+     */\n+    public InvalidEntityException(final Class<?> entityClass,\n+            final EntityViolationType entityViolationType, final String message) {\n+\n+        super();\n+\n+        this.entityClassSimpleName = entityClass.getSimpleName();\n \n-    private final Map<Class<?>, Set<EntityViolationType>> violations;\n+        entityViolationType.setMessage(message.trim());\n+\n+        this.violations.put(entityClass, EnumSet.noneOf(EntityViolationType.class));\n+        this.violations.get(entityClass).add(entityViolationType);\n+    }\n \n+    /**\n+     * Constructs a map of violations out of given <tt>ConstraintViolation</tt> set.\n+     *\n+     * @param entityClassSimpleName simple class name of invalid entity\n+     * @param violations as returned by bean validation\n+     */\n     public InvalidEntityException(final String entityClassSimpleName,\n             final Set<ConstraintViolation<Object>> violations) {\n \n         super();\n \n         this.entityClassSimpleName = entityClassSimpleName;\n \n-        this.violations = new HashMap<Class<?>, Set<EntityViolationType>>();\n         for (ConstraintViolation<Object> violation : violations) {\n             int firstComma = violation.getMessageTemplate().indexOf(';');\n "},{"sha":"ff7f5c1dbc095b186cc01645a6a4b1a353e89d5e","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":0,"deletions":46,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -57,52 +57,6 @@ public boolean isValid(final Policy object, final ConstraintValidatorContext con\n             return false;\n         }\n \n-        switch (object.getType()) {\n-            case GLOBAL_PASSWORD:\n-                // just one GLOBAL_PASSWORD policy\n-                final PasswordPolicy passwordPolicy = policyDAO.getGlobalPasswordPolicy();\n-\n-                if (passwordPolicy != null && !passwordPolicy.getId().equals(object.getId())) {\n-                    context.buildConstraintViolationWithTemplate(\n-                            getTemplate(EntityViolationType.InvalidPasswordPolicy, \"Password policy already exists\")).\n-                            addNode(object.getClass().getSimpleName()).addConstraintViolation();\n-\n-                    return false;\n-                }\n-                break;\n-\n-            case GLOBAL_ACCOUNT:\n-                // just one GLOBAL_ACCOUNT policy\n-                final AccountPolicy accountPolicy = policyDAO.getGlobalAccountPolicy();\n-\n-                if (accountPolicy != null && !accountPolicy.getId().equals(object.getId())) {\n-                    context.buildConstraintViolationWithTemplate(getTemplate(\n-                            EntityViolationType.InvalidAccountPolicy, \"Global Account policy already exists\")).\n-                            addNode(object.getClass().getSimpleName()).addConstraintViolation();\n-\n-                    return false;\n-                }\n-                break;\n-\n-            case GLOBAL_SYNC:\n-                // just one GLOBAL_SYNC policy\n-                final SyncPolicy syncPolicy = policyDAO.getGlobalSyncPolicy();\n-\n-                if (syncPolicy != null && !syncPolicy.getId().equals(object.getId())) {\n-                    context.buildConstraintViolationWithTemplate(getTemplate(\n-                            EntityViolationType.InvalidSyncPolicy, \"Global Sync policy already exists\")).\n-                            addNode(object.getClass().getSimpleName()).addConstraintViolation();\n-\n-                    return false;\n-                }\n-                break;\n-\n-            case PASSWORD:\n-            case ACCOUNT:\n-            case SYNC:\n-            default:\n-        }\n-\n         return true;\n     }\n }"},{"sha":"3bd770f5b5db697a1894715b2a37812ab7cd0b8e","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -198,7 +198,7 @@ public AbstractPolicyTO delete(final Long id) {\n         }\n \n         AbstractPolicyTO policyToDelete = binder.getPolicyTO(policy);\n-        policyDAO.delete(id);\n+        policyDAO.delete(policy);\n \n         auditManager.audit(Category.policy, PolicySubCategory.delete, Result.success,\n                 \"Successfully deleted policy: \" + id);"},{"sha":"cdaf4937e84a3534e1f8cd63b3f799d95310f1f0","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserRequestDataBinder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserRequestDataBinder.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.rest.data;\n \n import javax.persistence.RollbackException;\n-\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserRequestTO;\n import org.apache.syncope.common.to.UserTO;\n@@ -81,6 +80,7 @@ public void testCreate(final UserTO userTO) {\n         SyncopeUser user = new SyncopeUser();\n         userDataBinder.create(user, userTO);\n         userDAO.save(user);\n+        userDAO.flush();\n \n         throw new RollbackException();\n     }\n@@ -90,6 +90,7 @@ public void testUpdate(final UserMod userMod) throws NotFoundException, Unauthor\n         SyncopeUser user = getUserFromId(userMod.getId());\n         userDataBinder.update(user, userMod);\n         userDAO.save(user);\n+        userDAO.flush();\n \n         throw new RollbackException();\n     }\n@@ -98,6 +99,7 @@ public void testUpdate(final UserMod userMod) throws NotFoundException, Unauthor\n     public void testDelete(final Long userId) throws NotFoundException, UnauthorizedRoleException {\n         SyncopeUser user = getUserFromId(userId);\n         userDAO.delete(user);\n+        userDAO.flush();\n \n         throw new RollbackException();\n     }"},{"sha":"327fbf3569421b5950e7764e9acd8664444e0aa0","filename":"core/src/main/java/org/apache/syncope/core/rest/utils/RestServiceExceptionMapper.java","status":"modified","additions":45,"deletions":35,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Futils%2FRestServiceExceptionMapper.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -22,6 +22,7 @@\n import java.util.Set;\r\n import javax.persistence.EntityExistsException;\r\n import javax.persistence.PersistenceException;\r\n+import javax.persistence.RollbackException;\r\n import javax.ws.rs.BadRequestException;\r\n import javax.ws.rs.core.HttpHeaders;\r\n import javax.ws.rs.core.Response;\r\n@@ -45,6 +46,7 @@\n import org.springframework.dao.DataIntegrityViolationException;\r\n import org.springframework.orm.jpa.JpaSystemException;\r\n import org.springframework.security.access.AccessDeniedException;\r\n+import org.springframework.transaction.TransactionSystemException;\r\n \r\n @Provider\r\n public class RestServiceExceptionMapper implements ExceptionMapper<Exception>, ResponseExceptionMapper<Exception> {\r\n@@ -85,17 +87,17 @@ public Response toResponse(final Exception ex) {\n                     getExMessage(ex));\r\n         }\r\n \r\n-        Response response = processBadRequestExceptions(ex);\r\n+        Response response = processNotFoundExceptions(ex);\r\n         if (response != null) {\r\n             return response;\r\n         }\r\n \r\n-        response = processNotFoundExceptions(ex);\r\n+        response = processInvalidEntityExceptions(ex);\r\n         if (response != null) {\r\n             return response;\r\n         }\r\n \r\n-        response = processServerErrorExceptions(ex);\r\n+        response = processBadRequestExceptions(ex);\r\n         if (response != null) {\r\n             return response;\r\n         }\r\n@@ -125,21 +127,6 @@ private Response getCompositeExceptionResponse(final SyncopeClientCompositeError\n         return responseBuilder.build();\r\n     }\r\n \r\n-    private Response processServerErrorExceptions(final Exception ex) {\r\n-        ResponseBuilder responseBuilder = Response.status(Response.Status.INTERNAL_SERVER_ERROR);\r\n-        if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\r\n-            return buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, getMessage(ex,\r\n-                    \"Currently unavailable. Please try later.\"));\r\n-        } else if (ex instanceof JpaSystemException) {\r\n-            return buildResponse(responseBuilder, SyncopeClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n-\r\n-        } else if (ex instanceof ConfigurationException) {\r\n-            return buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidConnIdConf, getExMessage(ex));\r\n-        }\r\n-\r\n-        return null;\r\n-    }\r\n-\r\n     private Response processNotFoundExceptions(final Exception ex) {\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.NOT_FOUND);\r\n \r\n@@ -156,6 +143,39 @@ private Response processNotFoundExceptions(final Exception ex) {\n         return null;\r\n     }\r\n \r\n+    private Response processInvalidEntityExceptions(final Exception ex) {\r\n+        InvalidEntityException iee = null;\r\n+\r\n+        if (ex instanceof InvalidEntityException) {\r\n+            iee = (InvalidEntityException) ex;\r\n+        }\r\n+        if (ex instanceof TransactionSystemException && ex.getCause() instanceof RollbackException\r\n+                && ex.getCause().getCause() instanceof InvalidEntityException) {\r\n+\r\n+            iee = (InvalidEntityException) ex.getCause().getCause();\r\n+        }\r\n+\r\n+        if (iee != null) {\r\n+            ResponseBuilder builder = Response.status(Response.Status.BAD_REQUEST);\r\n+\r\n+            SyncopeClientExceptionType exType =\r\n+                    SyncopeClientExceptionType.valueOf(\"Invalid\" + iee.getEntityClassSimpleName());\r\n+\r\n+            builder.header(SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n+\r\n+            for (Map.Entry<Class<?>, Set<EntityViolationType>> violation : iee.getViolations().entrySet()) {\r\n+                for (EntityViolationType violationType : violation.getValue()) {\r\n+                    builder.header(exType.getElementHeaderName(),\r\n+                            violationType.name() + \": \" + violationType.getMessage());\r\n+                }\r\n+            }\r\n+\r\n+            return builder.build();\r\n+        }\r\n+\r\n+        return null;\r\n+    }\r\n+\r\n     private Response processBadRequestExceptions(final Exception ex) {\r\n         ResponseBuilder responseBuilder = Response.status(Response.Status.BAD_REQUEST);\r\n \r\n@@ -165,29 +185,19 @@ private Response processBadRequestExceptions(final Exception ex) {\n             } else {\r\n                 return ((BadRequestException) ex).getResponse();\r\n             }\r\n-\r\n-        } else if (ex instanceof InvalidEntityException) {\r\n-            SyncopeClientExceptionType exType = SyncopeClientExceptionType.valueOf(\"Invalid\"\r\n-                    + ((InvalidEntityException) ex).getEntityClassSimpleName());\r\n-\r\n-            responseBuilder.header(\r\n-                    SyncopeClientCompositeErrorException.EXCEPTION_TYPE_HEADER, exType.getHeaderValue());\r\n-\r\n-            for (Map.Entry<Class<?>, Set<EntityViolationType>> violation\r\n-                    : ((InvalidEntityException) ex).getViolations().entrySet()) {\r\n-\r\n-                for (EntityViolationType violationType : violation.getValue()) {\r\n-                    responseBuilder.header(exType.getElementHeaderName(),\r\n-                            violation.getClass().getSimpleName() + \": \" + violationType);\r\n-                }\r\n-            }\r\n-            return responseBuilder.build();\r\n         } else if (ex instanceof WorkflowException) {\r\n             return buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, getExMessage(ex));\r\n         } else if (ex instanceof InvalidSearchConditionException) {\r\n             return buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidSearchCondition, getExMessage(ex));\r\n         } else if (ex instanceof PersistenceException) {\r\n             return buildResponse(responseBuilder, SyncopeClientExceptionType.GenericPersistence, getExMessage(ex));\r\n+        } else if (ex instanceof org.apache.ibatis.exceptions.PersistenceException) {\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.Workflow, getMessage(ex,\r\n+                    \"Currently unavailable. Please try later.\"));\r\n+        } else if (ex instanceof JpaSystemException) {\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.DataIntegrityViolation, getExMessage(ex));\r\n+        } else if (ex instanceof ConfigurationException) {\r\n+            return buildResponse(responseBuilder, SyncopeClientExceptionType.InvalidConnIdConf, getExMessage(ex));\r\n         }\r\n \r\n         return null;\r"},{"sha":"6a38a335fea398cec8705414ea92d5c3cd0018d9","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -30,7 +30,6 @@\n import org.apache.commons.jexl2.MapContext;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.mod.AttributeMod;\n-import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.connid.PasswordGenerator;"},{"sha":"771bb1771594b85359475aa0edce11ac3f4e216f","filename":"core/src/main/resources/META-INF/orm.xml","status":"modified","additions":17,"deletions":7,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -16,14 +16,24 @@ software distributed under the License is distributed on an\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n-\n -->\n-<entity-mappings  xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n-                  xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n-                  xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm \n-                                      http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"\n-                  version=\"2.0\">\n-\n+<entity-mappings xmlns=\"http://java.sun.com/xml/ns/persistence/orm\"\n+                 xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+                 xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm \n+                                     http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"\n+                 version=\"2.0\">\n+  \n+  <persistence-unit-metadata>\n+    <persistence-unit-defaults>\n+      <entity-listeners>\n+        <entity-listener class=\"org.apache.syncope.core.persistence.validation.entity.EntityValidationListener\">\n+          <pre-persist method-name=\"validate\"/>\n+          <pre-update method-name=\"validate\"/>\n+        </entity-listener>\n+      </entity-listeners>\n+    </persistence-unit-defaults>\n+  </persistence-unit-metadata>\n+  \n   <table-generator name=\"SEQ_UAttrValue\" pk-column-value=\"SEQ_UAttrValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_RAttrValue\" pk-column-value=\"SEQ_RAttrValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_MAttrValue\" pk-column-value=\"SEQ_MAttrValue\" initial-value=\"100\"/>"},{"sha":"fbf0f4da23c6418e2d5b03e2a26193302f581211","filename":"core/src/main/resources/META-INF/orm.xml.oracle","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.oracle?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -24,6 +24,17 @@ under the License.\n                                       http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"\n                   version=\"2.0\">\n \n+  <persistence-unit-metadata>\n+    <persistence-unit-defaults>\n+      <entity-listeners>\n+        <entity-listener class=\"org.apache.syncope.core.persistence.validation.entity.EntityValidationListener\">\n+          <pre-persist method-name=\"validate\"/>\n+          <pre-update method-name=\"validate\"/>\n+        </entity-listener>\n+      </entity-listeners>\n+    </persistence-unit-defaults>\n+  </persistence-unit-metadata>\n+  \n   <table-generator name=\"SEQ_UAttrValue\" pk-column-value=\"SEQ_UAttrValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_RAttrValue\" pk-column-value=\"SEQ_RAttrValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_MAttrValue\" pk-column-value=\"SEQ_MAttrValue\" initial-value=\"100\"/>"},{"sha":"34b6e3d043fdeb0d81830e342212ed382bad0790","filename":"core/src/main/resources/META-INF/orm.xml.sqlserver","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Form.xml.sqlserver?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -23,7 +23,18 @@ under the License.\n                   xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence/orm \n                                       http://java.sun.com/xml/ns/persistence/orm_2_0.xsd\"\n                   version=\"2.0\">\n-\n+  \n+  <persistence-unit-metadata>\n+    <persistence-unit-defaults>\n+      <entity-listeners>\n+        <entity-listener class=\"org.apache.syncope.core.persistence.validation.entity.EntityValidationListener\">\n+          <pre-persist method-name=\"validate\"/>\n+          <pre-update method-name=\"validate\"/>\n+        </entity-listener>\n+      </entity-listeners>\n+    </persistence-unit-defaults>\n+  </persistence-unit-metadata>\n+  \n   <table-generator name=\"SEQ_UAttrValue\" pk-column-value=\"SEQ_UAttrValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_RAttrValue\" pk-column-value=\"SEQ_RAttrValue\" initial-value=\"100\"/>\n   <table-generator name=\"SEQ_MAttrValue\" pk-column-value=\"SEQ_MAttrValue\" initial-value=\"100\"/>"},{"sha":"73525228e0e6e1471fe7d692e16c3cb21bfe685c","filename":"core/src/main/resources/META-INF/spring-persistence.xml","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-persistence.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-persistence.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FMETA-INF%2Fspring-persistence.xml?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -16,15 +16,16 @@ software distributed under the License is distributed on an\n KIND, either express or implied.  See the License for the\n specific language governing permissions and limitations\n under the License.\n-\n -->\n <persistence xmlns=\"http://java.sun.com/xml/ns/persistence\"\n              xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n              xsi:schemaLocation=\"http://java.sun.com/xml/ns/persistence\n-             http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n+                                 http://java.sun.com/xml/ns/persistence/persistence_2_0.xsd\"\n              version=\"2.0\">\n+  \n   <persistence-unit name=\"syncopePersistenceUnit\">\n     <mapping-file>META-INF/orm.xml</mapping-file>\n     <validation-mode>NONE</validation-mode>\n   </persistence-unit>\n+  \n </persistence>"},{"sha":"ae335404c61cfa0819ff071695e1a56b0fd42e94","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":1,"deletions":6,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -21,15 +21,12 @@ under the License.\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:tx=\"http://www.springframework.org/schema/tx\"\n-       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context\n                            http://www.springframework.org/schema/context/spring-context.xsd\n                            http://www.springframework.org/schema/tx\n-                           http://www.springframework.org/schema/tx/spring-tx.xsd\n-                           http://www.springframework.org/schema/aop\n-                           http://www.springframework.org/schema/aop/spring-aop.xsd\">\n+                           http://www.springframework.org/schema/tx/spring-tx.xsd\">\n \n   <import resource=\"persistenceContextEMFactory.xml\"/>\n \n@@ -38,8 +35,6 @@ under the License.\n   <context:component-scan base-package=\"org.apache.syncope.core.util\"/>\n   <context:component-scan base-package=\"org.apache.syncope.core.policy\"/>\n \n-  <aop:aspectj-autoproxy/>\n-\n   <bean id=\"xStream\" class=\"com.thoughtworks.xstream.XStream\"/>\n \n   <!-- Use JNDI datasource as default but, when not available, revert to"},{"sha":"23cdaf5c3520653bdd23d8dfeeda0b1a7e3d581e","filename":"core/src/main/webapp/cacheStats.jsp","status":"modified","additions":6,"deletions":14,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fwebapp%2FcacheStats.jsp","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Fmain%2Fwebapp%2FcacheStats.jsp","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FcacheStats.jsp?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -74,8 +74,7 @@ under the License.\n     <%\n         ConfigurableApplicationContext context = ApplicationContextProvider.getApplicationContext();\n \n-        EntityManagerFactory emf = context.getBean(\n-                EntityManagerFactory.class);\n+        EntityManagerFactory emf = context.getBean(EntityManagerFactory.class);\n         OpenJPAEntityManagerFactory oemf = OpenJPAPersistence.cast(emf);\n \n         QueryStatistics<QueryKey> queryStatistics =\n@@ -86,14 +85,10 @@ under the License.\n         String action = request.getParameter(\"do\");\n         StringBuilder info = new StringBuilder(512);\n \n-        if (\"activate\".equals(action)\n-                && !statistics.isEnabled()) {\n-\n+        if (\"activate\".equals(action) && !statistics.isEnabled()) {\n             statistics.enable();\n             info.append(\"Statistics enabled\\n\");\n-        } else if (\"deactivate\".equals(action)\n-                && !statistics.isEnabled()) {\n-\n+        } else if (\"deactivate\".equals(action) && !statistics.isEnabled()) {\n             statistics.disable();\n             info.append(\"Statistics disabled\\n\");\n         } else if (\"clear\".equals(action)) {\n@@ -102,8 +97,7 @@ under the License.\n             info.append(\"Statistics cleared\\n\");\n         }\n \n-        SimpleDateFormat sdf = new SimpleDateFormat(\n-                SyncopeConstants.DEFAULT_DATE_PATTERN);\n+        SimpleDateFormat sdf = new SimpleDateFormat(SyncopeConstants.DEFAULT_DATE_PATTERN);\n         if (info.length() > 0) {\n     %>\n     <p/><div class=\"success\">\n@@ -113,10 +107,8 @@ under the License.\n     <p/>\n     <a href=\"?\">Reload</a>\n     <p/>\n-       <a href=\"?do=<%=(statistics.isEnabled()\n-            ? \"deactivate\" : \"activate\")%>\">\n-      <%=(statistics.isEnabled()\n-              ? \"DEACTIVATE\" : \"ACTIVATE\")%></a>\n+    <a href=\"?do=<%=(statistics.isEnabled() ? \"deactivate\" : \"activate\")%>\">\n+      <%=(statistics.isEnabled() ? \"DEACTIVATE\" : \"ACTIVATE\")%></a>\n     <a href=\"?do=clear\">CLEAR</a>\n     <p/>\n     Last update: <%=sdf.format(statistics.since())%><br/>"},{"sha":"2d999a4f46c8062a973b4bb9b1f6df978e5d8008","filename":"core/src/test/java/org/apache/syncope/core/AbstractNonDAOTest.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractNonDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractNonDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2FAbstractNonDAOTest.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -23,7 +23,11 @@\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n-@ContextConfiguration(locations = {\"classpath:syncopeContext.xml\", \"classpath:persistenceContext.xml\",\n-    \"classpath:schedulingContext.xml\", \"classpath:workflowContext.xml\"})\n+@ContextConfiguration(locations = {\n+    \"classpath:syncopeContext.xml\",\n+    \"classpath:persistenceContext.xml\",\n+    \"classpath:schedulingContext.xml\",\n+    \"classpath:workflowContext.xml\"\n+})\n public abstract class AbstractNonDAOTest extends AbstractTest {\n }"},{"sha":"3dacf9d952cedcc09ff9e42192dbde551d156d7e","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/DummyConnectorRegistry.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDummyConnectorRegistry.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDummyConnectorRegistry.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FDummyConnectorRegistry.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -23,12 +23,11 @@\n public class DummyConnectorRegistry implements ConnectorRegistry {\n \n     @Override\n-    public void registerConnector(ExternalResource resource)\n+    public void registerConnector(final ExternalResource resource)\n             throws NotFoundException {\n     }\n \n     @Override\n-    public void unregisterConnector(String id) {\n+    public void unregisterConnector(final String id) {\n     }\n-\n }"},{"sha":"3b0485dc7682a1c7d6e2f7cf18effdc8202cddbd","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -143,7 +143,7 @@ public void delete() {\n         Policy policy = policyDAO.find(1L);\n         assertNotNull(\"find to delete did not work\", policy);\n \n-        policyDAO.delete(policy.getId());\n+        policyDAO.delete(policy);\n \n         Policy actual = policyDAO.find(1L);\n         assertNull(\"delete did not work\", actual);"},{"sha":"d97b72bf65f2238c0513e69ab0b6cc54dedbd42c","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/SchemaTest.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FSchemaTest.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -59,6 +59,16 @@ public class SchemaTest extends AbstractDAOTest {\n \n     @Test\n     public void deleteFullname() {\n+        // fullname is mapped as AccountId for ws-target-resource-2, need to swap it otherwise validation errors \n+        // will be raised\n+        for (AbstractMappingItem item : resourceDAO.find(\"ws-target-resource-2\").getUmapping().getItems()) {\n+            if (\"fullname\".equals(item.getIntAttrName())) {\n+                item.setAccountid(false);\n+            } else if (\"surname\".equals(item.getIntAttrName())) {\n+                item.setAccountid(true);\n+            }\n+        }\n+\n         // search for user schema fullname\n         USchema schema = schemaDAO.find(\"fullname\", USchema.class);\n         assertNotNull(schema);"},{"sha":"5fede1d9c34d8f5af31df61eabafef6b20620745","filename":"core/src/test/java/org/apache/syncope/core/rest/NotificationTestITCase.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FNotificationTestITCase.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -88,6 +88,7 @@ public void update() {\n         SyncopeClientException exception = null;\n         try {\n             notificationService.update(notificationTO.getId(), notificationTO);\n+            fail();\n         } catch (SyncopeClientCompositeErrorException e) {\n             exception = e.getException(SyncopeClientExceptionType.InvalidNotification);\n         }"},{"sha":"288d28792eafe851ab5b46e8c3edab458bf1e7d3","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -180,16 +180,10 @@ public void createUserWithNoPropagation() {\n     }\n \n     @Test\n-    /*\n-     * This test has been introduced to verify and solve the following issue:\n-     * http://code.google.com/p/syncope/issues/detail?id=172. Creations of a new user without having a global password\n-     * policy stored into the local repository used to fail with a null pointer exception. This bug has been fixed\n-     * introducing a simple control.\n-     */\n     public void issue172() {\n         List<PasswordPolicyTO> policies = policyService.list(PolicyType.GLOBAL_PASSWORD);\n         for (PasswordPolicyTO policyTO : policies) {\n-            policyService.delete(PolicyType.PASSWORD, policyTO.getId());\n+            policyService.delete(PolicyType.GLOBAL_PASSWORD, policyTO.getId());\n         }\n \n         try {"},{"sha":"c1c781bfb13f2eee5a0997924bb1d1b4fe048c66","filename":"core/src/test/java/org/apache/syncope/core/rest/data/ResourceDataBinderTest.java","status":"renamed","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinderTest.java?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -46,7 +46,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional\n-public class ResourceDataTest extends AbstractNonDAOTest {\n+public class ResourceDataBinderTest extends AbstractNonDAOTest {\n \n     @Autowired\n     private ResourceDAO resourceDAO;\n@@ -87,9 +87,6 @@ public void databinding() throws IOException {\n         assertEquals(resourceTOs, Arrays.asList(actual));\n     }\n \n-    /**\n-     * @see http://code.google.com/p/syncope/issues/detail?id=42\n-     */\n     @Test\n     public void issue42() {\n         USchema userId = schemaDAO.find(\"userId\", USchema.class);","previous_filename":"core/src/test/java/org/apache/syncope/core/rest/data/ResourceDataTest.java"},{"sha":"62084d10e36c8e7500aca7bcbf9bd519f4d7adaf","filename":"core/src/test/resources/persistenceTestEnv.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2FpersistenceTestEnv.xml?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -22,15 +22,15 @@ under the License.\n        xmlns:context=\"http://www.springframework.org/schema/context\"\n        xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n        xmlns:tx=\"http://www.springframework.org/schema/tx\"\n-       xmlns:aop=\"http://www.springframework.org/schema/aop\"\n        xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n                            http://www.springframework.org/schema/beans/spring-beans.xsd\n                            http://www.springframework.org/schema/context\n                            http://www.springframework.org/schema/context/spring-context.xsd\n                            http://www.springframework.org/schema/tx\n-                           http://www.springframework.org/schema/tx/spring-tx.xsd\n-                           http://www.springframework.org/schema/aop\n-                           http://www.springframework.org/schema/aop/spring-aop.xsd\">\n+                           http://www.springframework.org/schema/tx/spring-tx.xsd\">\n+\n+  <!-- Uncomment to enable single unit test execution via -Dtest=... -->\n+  <!--<bean class=\"org.apache.syncope.core.util.ApplicationContextProvider\"/>-->\n \n   <bean class=\"org.apache.syncope.core.persistence.dao.impl.TestDbInitializer\"/>\n   <bean class=\"org.apache.syncope.core.persistence.dao.DummyConnectorRegistry\"/> "},{"sha":"8b025152d14fd1f534e35732ae9b50faa9c80772","filename":"legal_ext/LICENSE","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/legal_ext%2FLICENSE","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/legal_ext%2FLICENSE","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/legal_ext%2FLICENSE?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -299,13 +299,6 @@ This is licensed under the AL 2.0, see above.\n \n ==\n \n-For AspectJ (http://www.eclipse.org/aspectj/):\n-\n-This program and the accompanying materials are licensed under\n-the terms of the Eclipse Public License v 1.0, see above.\n-\n-==\n-\n For Groovy (http://groovy.codehaus.org/):\n This is licensed under the AL 2.0, see above.\n "},{"sha":"921ee4e71e6d4c8020ceac8940a2e57b697521b2","filename":"legal_ext/NOTICE","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/legal_ext%2FNOTICE","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/legal_ext%2FNOTICE","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/legal_ext%2FNOTICE?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -39,12 +39,6 @@ This product includes software developed by the Activiti BPM Platform project.\n \n ==\n \n-This product includes AspectJ (>= 1.52) software developed by the Eclipse \n-Software Foundation.\n-This software is included in binary form only.\n-\n-==\n-\n This product includes software developed by the Groovy project.\n \n ==\n@@ -160,4 +154,4 @@ This product includes software developed by the atinject Project.\n Copyright (c) 2009, http://code.google.com/p/atinject/\n All rights reserved.\n \n-==\n\\ No newline at end of file\n+=="},{"sha":"653a5ea48f054068c5450a5a791cbf66e17c4cdb","filename":"pom.xml","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/5ff02d7cbfbe4674028aede2822acea712e28c53/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/5ff02d7cbfbe4674028aede2822acea712e28c53/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=5ff02d7cbfbe4674028aede2822acea712e28c53","patch":"@@ -307,7 +307,6 @@ under the License.\n     <cxf.version>2.7.7-SNAPSHOT</cxf.version>\t\n     <spring.version>3.2.3.RELEASE</spring.version>\n     <spring-security.version>3.1.4.RELEASE</spring-security.version>\n-    <aspectj.version>1.7.3</aspectj.version>\n     <jackson.version>2.2.2</jackson.version>\n     <xstream.version>1.4.4</xstream.version>\n     <velocity.version>1.7</velocity.version>\n@@ -534,11 +533,6 @@ under the License.\n         <artifactId>spring-context-support</artifactId>\n         <version>${spring.version}</version>\n       </dependency>\n-      <dependency>\n-        <groupId>org.springframework</groupId>\n-        <artifactId>spring-aop</artifactId>\n-        <version>${spring.version}</version>\n-      </dependency>\n       <dependency>\n         <groupId>org.springframework</groupId>\n         <artifactId>spring-jdbc</artifactId>\n@@ -586,12 +580,6 @@ under the License.\n       </dependency>\n       <!-- /Spring -->\n \n-      <dependency>\n-        <groupId>org.aspectj</groupId>\n-        <artifactId>aspectjweaver</artifactId>\n-        <version>${aspectj.version}</version>\n-      </dependency>\n-\n       <dependency>\n         <groupId>javax.ws.rs</groupId>\n         <artifactId>javax.ws.rs-api</artifactId>"}]}