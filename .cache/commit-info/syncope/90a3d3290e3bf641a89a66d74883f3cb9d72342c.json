{"sha":"90a3d3290e3bf641a89a66d74883f3cb9d72342c","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjkwYTNkMzI5MGUzYmY2NDFhODlhNjZkNzQ4ODNmM2NiOWQ3MjM0MmM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-04-09T11:35:40Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2020-04-10T08:27:53Z"},"message":"[SYNCOPE-1545] ClientApp service","tree":{"sha":"67854403ab4d45960a54d5b3b79c5177abeb63cc","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/67854403ab4d45960a54d5b3b79c5177abeb63cc"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/90a3d3290e3bf641a89a66d74883f3cb9d72342c","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90a3d3290e3bf641a89a66d74883f3cb9d72342c","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/90a3d3290e3bf641a89a66d74883f3cb9d72342c","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/90a3d3290e3bf641a89a66d74883f3cb9d72342c/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"426b2f2a332f2246b2888aabd3537bfeb903704d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/426b2f2a332f2246b2888aabd3537bfeb903704d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/426b2f2a332f2246b2888aabd3537bfeb903704d"}],"stats":{"total":2896,"additions":2896,"deletions":0},"files":[{"sha":"ed8a6f09cfe7dca22cc4e7c4a78ee5157e00d960","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/ClientAppTO.java","status":"added","additions":154,"deletions":0,"changes":154,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FClientAppTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FClientAppTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FClientAppTO.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,154 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to.client;\n+\n+import com.fasterxml.jackson.annotation.JsonPropertyOrder;\n+import com.fasterxml.jackson.annotation.JsonTypeInfo;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n+import org.apache.syncope.common.lib.to.EntityTO;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlSeeAlso;\n+import javax.xml.bind.annotation.XmlType;\n+\n+@XmlRootElement(name = \"clientApp\")\n+@XmlType\n+@XmlSeeAlso({ OIDCRPTO.class, SAML2SPTO.class })\n+@JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.EXISTING_PROPERTY, property = \"@class\")\n+@JsonPropertyOrder(value = { \"@class\", \"key\", \"name\", \"description\", \"authPolicy\", \"accessPolicy\", \"attReleasePolicy\" })\n+@Schema(subTypes = { OIDCRPTO.class, SAML2SPTO.class }, discriminatorProperty = \"@class\")\n+public abstract class ClientAppTO extends BaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 6577639976115661357L;\n+\n+    private String key;\n+\n+    private String name;\n+\n+    private Long clientAppId;\n+\n+    private String description;\n+\n+    private String authPolicy;\n+\n+    private String accessPolicy;\n+\n+    private String attrReleasePolicy;\n+\n+    public String getAttrReleasePolicy() {\n+        return attrReleasePolicy;\n+    }\n+\n+    public void setAttrReleasePolicy(final String attrReleasePolicy) {\n+        this.attrReleasePolicy = attrReleasePolicy;\n+    }\n+\n+    public String getAccessPolicy() {\n+        return accessPolicy;\n+    }\n+\n+    public void setAccessPolicy(final String accessPolicy) {\n+        this.accessPolicy = accessPolicy;\n+    }\n+\n+    public String getAuthPolicy() {\n+        return authPolicy;\n+    }\n+\n+    public void setAuthPolicy(final String authPolicy) {\n+        this.authPolicy = authPolicy;\n+    }\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public Long getClientAppId() {\n+        return clientAppId;\n+    }\n+\n+    public void setClientAppId(final Long clientAppId) {\n+        this.clientAppId = clientAppId;\n+    }\n+\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Schema(name = \"@class\", required = true)\n+    public abstract String getDiscriminator();\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+                .appendSuper(super.hashCode())\n+                .append(key)\n+                .append(clientAppId)\n+                .append(name)\n+                .append(description)\n+                .append(authPolicy)\n+                .append(accessPolicy)\n+                .append(attrReleasePolicy)\n+                .toHashCode();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        ClientAppTO rhs = (ClientAppTO) obj;\n+        return new EqualsBuilder()\n+                .appendSuper(super.equals(obj))\n+                .append(this.key, rhs.key)\n+                .append(this.clientAppId, rhs.clientAppId)\n+                .append(this.name, rhs.name)\n+                .append(this.description, rhs.description)\n+                .append(this.authPolicy, rhs.authPolicy)\n+                .append(this.accessPolicy, rhs.accessPolicy)\n+                .append(this.attrReleasePolicy, rhs.attrReleasePolicy)\n+                .isEquals();\n+    }\n+}"},{"sha":"987c534ac342b37bac950246e1ad6c701f9a317b","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/OIDCRPTO.java","status":"added","additions":168,"deletions":0,"changes":168,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FOIDCRPTO.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,168 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to.client;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import java.util.ArrayList;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlTransient;\n+import javax.xml.bind.annotation.XmlType;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import javax.xml.bind.annotation.XmlElement;\n+import javax.xml.bind.annotation.XmlElementWrapper;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+\n+@XmlRootElement(name = \"oidcrp\")\n+@XmlType\n+@Schema(allOf = { ClientAppTO.class })\n+public class OIDCRPTO extends ClientAppTO {\n+\n+    private static final long serialVersionUID = -6370888503924521351L;\n+\n+    private String clientId;\n+\n+    private String clientSecret;\n+\n+    private boolean signIdToken;\n+\n+    private String jwks;\n+\n+    private OIDCSubjectType subjectType;\n+\n+    private final List<String> redirectUris = new ArrayList<>();\n+\n+    private final Set<String> supportedGrantTypes = new HashSet<>();\n+\n+    private final Set<String> supportedResponseTypes = new HashSet<>();\n+\n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true,\n+            example = \"org.apache.syncope.common.lib.to.client.OIDCRPTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    public String getClientId() {\n+        return clientId;\n+    }\n+\n+    public void setClientId(final String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    public String getClientSecret() {\n+        return clientSecret;\n+    }\n+\n+    public void setClientSecret(final String clientSecret) {\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    @XmlElementWrapper(name = \"redirectUris\")\n+    @XmlElement(name = \"redirectUri\")\n+    @JsonProperty(\"redirectUris\")\n+    public List<String> getRedirectUris() {\n+        return redirectUris;\n+    }\n+\n+    @XmlElementWrapper(name = \"supportedGrantTypes\")\n+    @XmlElement(name = \"supportedGrantType\")\n+    @JsonProperty(\"supportedGrantTypes\")\n+    public Set<String> getSupportedGrantTypes() {\n+        return supportedGrantTypes;\n+    }\n+\n+    @XmlElementWrapper(name = \"supportedResponseTypes\")\n+    @XmlElement(name = \"supportedResponseType\")\n+    @JsonProperty(\"supportedResponseTypes\")\n+    public Set<String> getSupportedResponseTypes() {\n+        return supportedResponseTypes;\n+    }\n+\n+    public boolean isSignIdToken() {\n+        return signIdToken;\n+    }\n+\n+    public void setSignIdToken(final boolean signIdToken) {\n+        this.signIdToken = signIdToken;\n+    }\n+\n+    public String getJwks() {\n+        return jwks;\n+    }\n+\n+    public void setJwks(final String jwks) {\n+        this.jwks = jwks;\n+    }\n+\n+    public OIDCSubjectType getSubjectType() {\n+        return subjectType;\n+    }\n+\n+    public void setSubjectType(final OIDCSubjectType subjectType) {\n+        this.subjectType = subjectType;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        OIDCRPTO rhs = (OIDCRPTO) obj;\n+        return new EqualsBuilder()\n+                .appendSuper(super.equals(obj))\n+                .append(this.clientId, rhs.clientId)\n+                .append(this.clientSecret, rhs.clientSecret)\n+                .append(this.redirectUris, rhs.redirectUris)\n+                .append(this.supportedGrantTypes, rhs.supportedGrantTypes)\n+                .append(this.supportedResponseTypes, rhs.supportedResponseTypes)\n+                .append(this.signIdToken, rhs.signIdToken)\n+                .append(this.jwks, rhs.jwks)\n+                .append(this.subjectType, rhs.subjectType)\n+                .isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+                .appendSuper(super.hashCode())\n+                .append(clientId)\n+                .append(clientSecret)\n+                .append(redirectUris)\n+                .append(supportedGrantTypes)\n+                .append(supportedResponseTypes)\n+                .append(signIdToken)\n+                .append(jwks)\n+                .append(subjectType)\n+                .toHashCode();\n+    }\n+}"},{"sha":"d2cfac5b58f74bb81c80b18122f99340da9c67a9","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/to/client/SAML2SPTO.java","status":"added","additions":225,"deletions":0,"changes":225,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2Fclient%2FSAML2SPTO.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,225 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to.client;\n+\n+import com.fasterxml.jackson.annotation.JsonProperty;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import javax.xml.bind.annotation.XmlTransient;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+\n+@XmlRootElement(name = \"saml2SP\")\n+@XmlType\n+@Schema(allOf = { ClientAppTO.class })\n+public class SAML2SPTO extends ClientAppTO {\n+\n+    private static final long serialVersionUID = -6370888503924521351L;\n+\n+    private String entityId;\n+\n+    private String metadataLocation;\n+\n+    private String metadataSignatureLocation;\n+\n+    private boolean signAssertions;\n+\n+    private boolean signResponses;\n+\n+    private boolean encryptionOptional;\n+\n+    private boolean encryptAssertions;\n+\n+    private String requiredAuthenticationContextClass;\n+\n+    private SAML2SPNameId requiredNameIdFormat;\n+\n+    private Integer skewAllowance;\n+\n+    private String nameIdQualifier;\n+\n+    private String assertionAudiences;\n+\n+    private String serviceProviderNameIdQualifier;\n+\n+    @XmlTransient\n+    @JsonProperty(\"@class\")\n+    @Schema(name = \"@class\", required = true,\n+            example = \"org.apache.syncope.common.lib.to.client.SAML2SPTO\")\n+    @Override\n+    public String getDiscriminator() {\n+        return getClass().getName();\n+    }\n+\n+    public String getEntityId() {\n+        return entityId;\n+    }\n+\n+    public void setEntityId(final String entityId) {\n+        this.entityId = entityId;\n+    }\n+\n+    public String getMetadataLocation() {\n+        return metadataLocation;\n+    }\n+\n+    public void setMetadataLocation(final String metadataLocation) {\n+        this.metadataLocation = metadataLocation;\n+    }\n+\n+    public String getMetadataSignatureLocation() {\n+        return metadataSignatureLocation;\n+    }\n+\n+    public void setMetadataSignatureLocation(final String metadataSignatureLocation) {\n+        this.metadataSignatureLocation = metadataSignatureLocation;\n+    }\n+\n+    public boolean isSignAssertions() {\n+        return signAssertions;\n+    }\n+\n+    public void setSignAssertions(final boolean signAssertions) {\n+        this.signAssertions = signAssertions;\n+    }\n+\n+    public boolean isSignResponses() {\n+        return signResponses;\n+    }\n+\n+    public void setSignResponses(final boolean signResponses) {\n+        this.signResponses = signResponses;\n+    }\n+\n+    public boolean isEncryptionOptional() {\n+        return encryptionOptional;\n+    }\n+\n+    public void setEncryptionOptional(final boolean encryptionOptional) {\n+        this.encryptionOptional = encryptionOptional;\n+    }\n+\n+    public boolean isEncryptAssertions() {\n+        return encryptAssertions;\n+    }\n+\n+    public void setEncryptAssertions(final boolean encryptAssertions) {\n+        this.encryptAssertions = encryptAssertions;\n+    }\n+\n+    public String getRequiredAuthenticationContextClass() {\n+        return requiredAuthenticationContextClass;\n+    }\n+\n+    public void setRequiredAuthenticationContextClass(final String requiredAuthenticationContextClass) {\n+        this.requiredAuthenticationContextClass = requiredAuthenticationContextClass;\n+    }\n+\n+    public SAML2SPNameId getRequiredNameIdFormat() {\n+        return requiredNameIdFormat;\n+    }\n+\n+    public void setRequiredNameIdFormat(final SAML2SPNameId requiredNameIdFormat) {\n+        this.requiredNameIdFormat = requiredNameIdFormat;\n+    }\n+\n+    public Integer getSkewAllowance() {\n+        return skewAllowance;\n+    }\n+\n+    public void setSkewAllowance(final Integer skewAllowance) {\n+        this.skewAllowance = skewAllowance;\n+    }\n+\n+    public String getNameIdQualifier() {\n+        return nameIdQualifier;\n+    }\n+\n+    public void setNameIdQualifier(final String nameIdQualifier) {\n+        this.nameIdQualifier = nameIdQualifier;\n+    }\n+\n+    public String getAssertionAudiences() {\n+        return assertionAudiences;\n+    }\n+\n+    public void setAssertionAudiences(final String assertionAudiences) {\n+        this.assertionAudiences = assertionAudiences;\n+    }\n+\n+    public String getServiceProviderNameIdQualifier() {\n+        return serviceProviderNameIdQualifier;\n+    }\n+\n+    public void setServiceProviderNameIdQualifier(final String serviceProviderNameIdQualifier) {\n+        this.serviceProviderNameIdQualifier = serviceProviderNameIdQualifier;\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (obj == this) {\n+            return true;\n+        }\n+        if (obj.getClass() != getClass()) {\n+            return false;\n+        }\n+        SAML2SPTO rhs = (SAML2SPTO) obj;\n+        return new EqualsBuilder()\n+                .appendSuper(super.equals(obj))\n+                .append(this.entityId, rhs.entityId)\n+                .append(this.metadataLocation, rhs.metadataLocation)\n+                .append(this.metadataSignatureLocation, rhs.metadataSignatureLocation)\n+                .append(this.signAssertions, rhs.signAssertions)\n+                .append(this.signResponses, rhs.signResponses)\n+                .append(this.encryptionOptional, rhs.encryptionOptional)\n+                .append(this.encryptAssertions, rhs.encryptAssertions)\n+                .append(this.requiredAuthenticationContextClass, rhs.requiredAuthenticationContextClass)\n+                .append(this.requiredNameIdFormat, rhs.requiredNameIdFormat)\n+                .append(this.skewAllowance, rhs.skewAllowance)\n+                .append(this.nameIdQualifier, rhs.nameIdQualifier)\n+                .append(this.assertionAudiences, rhs.assertionAudiences)\n+                .append(this.serviceProviderNameIdQualifier, rhs.serviceProviderNameIdQualifier)\n+                .isEquals();\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder()\n+                .appendSuper(super.hashCode())\n+                .append(entityId)\n+                .append(metadataLocation)\n+                .append(metadataSignatureLocation)\n+                .append(signAssertions)\n+                .append(signResponses)\n+                .append(encryptionOptional)\n+                .append(encryptAssertions)\n+                .append(requiredAuthenticationContextClass)\n+                .append(requiredNameIdFormat)\n+                .append(skewAllowance)\n+                .append(nameIdQualifier)\n+                .append(assertionAudiences)\n+                .append(serviceProviderNameIdQualifier)\n+                .toHashCode();\n+    }\n+}"},{"sha":"7f901592f5cf3982f750cf7a5037de9478d7ba14","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/ClientAppType.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientAppType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientAppType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FClientAppType.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum ClientAppType {\n+    SAML2SP,\n+    OIDCRP;\n+\n+}"},{"sha":"d75a68dab0da6b5f406f72564a77dd001d9b25b5","filename":"common/am/lib/src/main/java/org/apache/syncope/common/lib/types/SAML2SPNameId.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SPNameId.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SPNameId.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FSAML2SPNameId.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.types;\n+\n+import javax.xml.bind.annotation.XmlEnum;\n+\n+@XmlEnum\n+public enum SAML2SPNameId {\n+\n+    EMAIL_ADDRESS(\"urn:oasis:names:tc:SAML:1.1:nameid-format:emailAddress\"),\n+    UNSPECIFIED(\"urn:oasis:names:tc:SAML:1.1:nameid-format:unspecified\"),\n+    ENTITY(\"urn:oasis:names:tc:SAML:2.0:nameid-format:entity\"),\n+    PERSISTENT(\"urn:oasis:names:tc:SAML:2.0:nameid-format:persistent\"),\n+    TRANSIENT(\"urn:oasis:names:tc:SAML:2.0:nameid-format:transient\"),\n+    ENCRYPTED(\"urn:oasis:names:tc:SAML:2.0:nameid-format:encrypted\");\n+\n+    private final String nameId;\n+\n+    SAML2SPNameId(final String nameId) {\n+        this.nameId = nameId;\n+    }\n+\n+    public String getNameId() {\n+        return nameId;\n+    }\n+}"},{"sha":"c2e2398944bd429ab24275d1bdf6d29cfa706ee4","filename":"common/am/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/ClientAppService.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FClientAppService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FClientAppService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fam%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FClientAppService.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,134 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for client applications.\n+ */\n+@Tag(name = \"ClientApps\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"clientApps\")\n+public interface ClientAppService extends JAXRSService {\n+\n+    /**\n+     * Returns the client app matching the given key.\n+     *\n+     * @param type client app type\n+     * @param key key of requested client app\n+     * @param <T> response type (extending ClientAppTO)\n+     * @return client app with matching id\n+     */\n+    @GET\n+    @Path(\"{type}/{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    <T extends ClientAppTO> T read(\n+            @NotNull @PathParam(\"type\") ClientAppType type,\n+            @NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Returns a list of client apps of the matching type.\n+     *\n+     * @param type Type selector for requested client apps\n+     * @param <T> response type (extending ClientAppTO)\n+     * @return list of client apps with matching type\n+     */\n+    @GET\n+    @Path(\"{type}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    <T extends ClientAppTO> List<T> list(@NotNull @PathParam(\"type\") ClientAppType type);\n+\n+    /**\n+     * Create a new client app.\n+     *\n+     * @param type client app type\n+     * @param clientAppTO ClientApp to be created (needs to match type)\n+     * @return Response object featuring Location header of created client app\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"ClientApp successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"UUID generated for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Path(\"{type}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(@NotNull @PathParam(\"type\") ClientAppType type, @NotNull ClientAppTO clientAppTO);\n+\n+    /**\n+     * Updates client app matching the given key.\n+     *\n+     * @param type client app type\n+     * @param clientAppTO ClientApp to replace existing client app\n+     */\n+    @Parameter(name = \"key\", description = \"ClientApp's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{type}/{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull @PathParam(\"type\") ClientAppType type, @NotNull ClientAppTO clientAppTO);\n+\n+    /**\n+     * Delete client app matching the given key.\n+     *\n+     * @param type client app type\n+     * @param key key of client app to be deleted\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{type}/{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void delete(@NotNull @PathParam(\"type\") ClientAppType type, @NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"6e27383914130ddabd6bbfb4a7e9270361f135b7","filename":"core/am/logic/src/main/java/org/apache/syncope/core/logic/ClientAppLogic.java","status":"added","additions":204,"deletions":0,"changes":204,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FClientAppLogic.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import java.util.stream.Stream;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.types.AMEntitlement;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Component\n+public class ClientAppLogic extends AbstractTransactionalLogic<ClientAppTO> {\n+\n+    @Autowired\n+    private ClientAppUtilsFactory clientAppUtilsFactory;\n+\n+    @Autowired\n+    private ClientAppDataBinder binder;\n+\n+    @Autowired\n+    private SAML2SPDAO saml2spDAO;\n+\n+    @Autowired\n+    private OIDCRPDAO oidcrpDAO;\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.CLIENTAPP_LIST + \"')\")\n+    public <T extends ClientAppTO> List<T> list(final ClientAppType type) {\n+        Stream<T> stream;\n+\n+        switch (type) {\n+            case OIDCRP:\n+                stream = oidcrpDAO.findAll().stream().map(binder::getClientAppTO);\n+                break;\n+\n+            case SAML2SP:\n+            default:\n+                stream = saml2spDAO.findAll().stream().map(binder::getClientAppTO);\n+        }\n+\n+        return stream.collect(Collectors.toList());\n+    }\n+\n+    private void checkType(final ClientAppType type, final ClientAppUtils clientAppUtils) {\n+        if (clientAppUtils.getType() != type) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRequest);\n+            sce.getElements().add(\"Found \" + type + \", expected \" + clientAppUtils.getType());\n+            throw sce;\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.CLIENTAPP_READ + \"')\")\n+    @Transactional(readOnly = true)\n+    public <T extends ClientAppTO> T read(final ClientAppType type, final String key) {\n+        switch (type) {\n+            case OIDCRP:\n+                OIDCRP oidcrp = oidcrpDAO.find(key);\n+                if (oidcrp == null) {\n+                    throw new NotFoundException(\"Client app \" + key + \" not found\");\n+                }\n+\n+                checkType(type, clientAppUtilsFactory.getInstance(oidcrp));\n+\n+                return binder.getClientAppTO(oidcrp);\n+\n+            case SAML2SP:\n+            default:\n+                SAML2SP saml2sp = saml2spDAO.find(key);\n+                if (saml2sp == null) {\n+                    throw new NotFoundException(\"Client app \" + key + \" not found\");\n+                }\n+\n+                checkType(type, clientAppUtilsFactory.getInstance(saml2sp));\n+\n+                return binder.getClientAppTO(saml2sp);\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.CLIENTAPP_CREATE + \"')\")\n+    public ClientAppTO create(final ClientAppType type, final ClientAppTO clientAppTO) {\n+        checkType(type, clientAppUtilsFactory.getInstance(clientAppTO));\n+\n+        switch (type) {\n+            case OIDCRP:\n+                return binder.getClientAppTO(oidcrpDAO.save(binder.create(clientAppTO)));\n+\n+            case SAML2SP:\n+            default:\n+                return binder.getClientAppTO(saml2spDAO.save(binder.create(clientAppTO)));\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.CLIENTAPP_UPDATE + \"')\")\n+    public void update(final ClientAppType type, final ClientAppTO clientAppTO) {\n+        checkType(type, clientAppUtilsFactory.getInstance(clientAppTO));\n+\n+        switch (type) {\n+            case OIDCRP:\n+                OIDCRP oidcrp = oidcrpDAO.find(clientAppTO.getKey());\n+                if (oidcrp == null) {\n+                    throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n+                }\n+                binder.update(oidcrp, clientAppTO);\n+                oidcrpDAO.save(oidcrp);\n+                break;\n+\n+            case SAML2SP:\n+            default:\n+                SAML2SP saml2sp = saml2spDAO.find(clientAppTO.getKey());\n+                if (saml2sp == null) {\n+                    throw new NotFoundException(\"Client app \" + clientAppTO.getKey() + \" not found\");\n+                }\n+                binder.update(saml2sp, clientAppTO);\n+                saml2spDAO.save(saml2sp);\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + AMEntitlement.CLIENTAPP_DELETE + \"')\")\n+    public void delete(final ClientAppType type, final String key) {\n+        switch (type) {\n+            case OIDCRP:\n+                OIDCRP oidcrp = oidcrpDAO.find(key);\n+                if (oidcrp == null) {\n+                    throw new NotFoundException(\"Client app \" + key + \" not found\");\n+                }\n+                oidcrpDAO.delete(oidcrp);\n+                break;\n+\n+            case SAML2SP:\n+            default:\n+                SAML2SP saml2sp = saml2spDAO.find(key);\n+                if (saml2sp == null) {\n+                    throw new NotFoundException(\"Client app \" + key + \" not found\");\n+                }\n+                saml2spDAO.delete(saml2sp);\n+        }\n+    }\n+\n+    @Override\n+    protected ClientAppTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof ClientAppTO) {\n+                    key = ((ClientAppTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                ClientApp clientApp = saml2spDAO.find(key);\n+                if (clientApp == null) {\n+                    clientApp = oidcrpDAO.find(key);\n+                }\n+\n+                return binder.getClientAppTO(clientApp);\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"e2e461e4bc51f6269b0e7017afe9dc1332e731e5","filename":"core/am/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/ClientAppServiceImpl.java","status":"added","additions":66,"deletions":0,"changes":66,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fam%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FClientAppServiceImpl.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,66 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.ClientAppService;\n+import org.apache.syncope.core.logic.ClientAppLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class ClientAppServiceImpl extends AbstractServiceImpl implements ClientAppService {\n+\n+    @Autowired\n+    private ClientAppLogic logic;\n+\n+    @Override\n+    public Response create(final ClientAppType type, final ClientAppTO clientAppTO) {\n+        ClientAppTO appTO = logic.create(type, clientAppTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(appTO.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, appTO.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public <T extends ClientAppTO> List<T> list(final ClientAppType type) {\n+        return logic.list(type);\n+    }\n+\n+    @Override\n+    public <T extends ClientAppTO> T read(final ClientAppType type, final String key) {\n+        return logic.read(type, key);\n+    }\n+\n+    @Override\n+    public void update(final ClientAppType type, final ClientAppTO clientAppTO) {\n+        logic.update(type, clientAppTO);\n+    }\n+\n+    @Override\n+    public void delete(final ClientAppType type, final String key) {\n+        logic.delete(type, key);\n+    }\n+}"},{"sha":"517c92b85ca123ca7c32f8f1638733c9dd32e2db","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/OIDCRPDAO.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCRPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCRPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FOIDCRPDAO.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+\n+public interface OIDCRPDAO extends DAO<OIDCRP> {\n+\n+    OIDCRP find(String key);\n+\n+    OIDCRP findByClientAppId(Long clientAppId);\n+\n+    OIDCRP findByName(String name);\n+\n+    OIDCRP findByClientId(String clientId);\n+\n+    List<OIDCRP> findAll();\n+\n+    OIDCRP save(OIDCRP clientApp);\n+\n+    void delete(String key);\n+\n+    void deleteByClientId(String clientId);\n+\n+    void delete(OIDCRP clientApp);\n+}"},{"sha":"2d2fdbd9423528c699b8ee41f90d196b04603659","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/auth/SAML2SPDAO.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2Fauth%2FSAML2SPDAO.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao.auth;\n+\n+import org.apache.syncope.core.persistence.api.dao.DAO;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+\n+public interface SAML2SPDAO extends DAO<SAML2SP> {\n+\n+    SAML2SP find(String key);\n+\n+    SAML2SP findByClientAppId(Long clientAppId);\n+\n+    SAML2SP findByName(String name);\n+\n+    SAML2SP findByEntityId(String clientId);\n+\n+    List<SAML2SP> findAll();\n+\n+    SAML2SP save(SAML2SP clientApp);\n+\n+    void delete(String key);\n+\n+    void deleteByEntityId(String entityId);\n+\n+    void delete(SAML2SP clientApp);\n+}"},{"sha":"70bf7b733a34d71def64abdcedca5a1f868fb4b5","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/ClientApp.java","status":"added","additions":56,"deletions":0,"changes":56,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientApp.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,56 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.Entity;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+\n+public interface ClientApp extends Entity {\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    Long getClientAppId();\n+\n+    void setClientAppId(Long clientAppId);\n+\n+    String getDescription();\n+\n+    void setDescription(String description);\n+\n+    AuthPolicy getAuthPolicy();\n+\n+    void setAuthPolicy(AuthPolicy policy);\n+\n+    AccessPolicy getAccessPolicy();\n+\n+    void setAccessPolicy(AccessPolicy policy);\n+\n+    AttrReleasePolicy getAttrReleasePolicy();\n+\n+    void setAttrReleasePolicy(AttrReleasePolicy policy);\n+\n+    Realm getRealm();\n+\n+    void setRealm(Realm realm);\n+}"},{"sha":"7db5f1192c21a361e3342fab94d98c91b34bc0b7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/ClientAppUtils.java","status":"added","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtils.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,28 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+\n+public interface ClientAppUtils {\n+\n+    ClientAppType getType();\n+\n+    Class<? extends ClientApp> clientAppClass();\n+}"},{"sha":"6777d9d3581a8ba63f31f2ad2d1abc6fed6e6df7","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/ClientAppUtilsFactory.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FClientAppUtilsFactory.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+\n+public interface ClientAppUtilsFactory {\n+\n+    ClientAppUtils getInstance(ClientAppType type);\n+\n+    ClientAppUtils getInstance(ClientApp clientApp);\n+\n+    ClientAppUtils getInstance(Class<? extends ClientAppTO> clientAppClass);\n+\n+    ClientAppUtils getInstance(ClientAppTO clientAppTO);\n+}"},{"sha":"0a7246177f8f95afb9628836553d93033ce47b9a","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/OIDCRP.java","status":"added","additions":52,"deletions":0,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FOIDCRP.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,52 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+\n+public interface OIDCRP extends ClientApp {\n+\n+    void setClientId(String id);\n+\n+    String getClientId();\n+\n+    void setClientSecret(String secret);\n+\n+    String getClientSecret();\n+\n+    List<String> getRedirectUris();\n+\n+    Set<String> getSupportedGrantTypes();\n+\n+    Set<String> getSupportedResponseTypes();\n+\n+    boolean isSignIdToken();\n+\n+    void setSignIdToken(boolean signIdToken);\n+\n+    String getJwks();\n+\n+    void setJwks(String jwks);\n+\n+    OIDCSubjectType getSubjectType();\n+\n+    void setSubjectType(OIDCSubjectType subjectType);\n+}"},{"sha":"2103b5d55b8cf9f1f3b310aa0aaa0234b2ecea09","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/auth/SAML2SP.java","status":"added","additions":76,"deletions":0,"changes":76,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2Fauth%2FSAML2SP.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,76 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity.auth;\n+\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+\n+public interface SAML2SP extends ClientApp {\n+\n+    String getEntityId();\n+\n+    void setEntityId(String id);\n+\n+    String getMetadataLocation();\n+\n+    void setMetadataLocation(String location);\n+\n+    void setMetadataSignatureLocation(String location);\n+\n+    String getMetadataSignatureLocation();\n+\n+    void setSignAssertions(boolean location);\n+\n+    boolean isSignAssertions();\n+\n+    void setSignResponses(boolean location);\n+\n+    boolean isSignResponses();\n+\n+    void setEncryptionOptional(boolean location);\n+\n+    boolean isEncryptionOptional();\n+\n+    void setEncryptAssertions(boolean location);\n+\n+    boolean isEncryptAssertions();\n+\n+    void setRequiredAuthenticationContextClass(String location);\n+\n+    String getRequiredAuthenticationContextClass();\n+\n+    void setRequiredNameIdFormat(SAML2SPNameId location);\n+\n+    SAML2SPNameId getRequiredNameIdFormat();\n+\n+    void setSkewAllowance(Integer location);\n+\n+    Integer getSkewAllowance();\n+\n+    void setNameIdQualifier(String location);\n+\n+    String getNameIdQualifier();\n+\n+    void setAssertionAudiences(String location);\n+\n+    String getAssertionAudiences();\n+\n+    void setServiceProviderNameIdQualifier(String location);\n+\n+    String getServiceProviderNameIdQualifier();\n+}"},{"sha":"bf6b32aab3c7d240d2f47dadc36105aab2b458b9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPAOIDCRPDAO.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPAOIDCRPDAO.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import java.util.List;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPAOIDCRP;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+\n+@Repository\n+public class JPAOIDCRPDAO extends AbstractDAO<OIDCRP> implements OIDCRPDAO {\n+\n+    @Override\n+    public OIDCRP find(final String key) {\n+        return entityManager().find(JPAOIDCRP.class, key);\n+    }\n+\n+    private OIDCRP find(final String column, final Object value) {\n+        TypedQuery<OIDCRP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAOIDCRP.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n+                OIDCRP.class);\n+        query.setParameter(\"value\", value);\n+\n+        OIDCRP result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (final NoResultException e) {\n+            LOG.debug(\"No OIDCRP found with \" + column + \" {}\", value, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public OIDCRP findByClientAppId(final Long clientAppId) {\n+        return find(\"clientAppId\", clientAppId);\n+    }\n+\n+    @Override\n+    public OIDCRP findByName(final String name) {\n+        return find(\"name\", name);\n+    }\n+\n+    @Override\n+    public OIDCRP findByClientId(final String clientId) {\n+        return find(\"clientId\", clientId);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<OIDCRP> findAll() {\n+        TypedQuery<OIDCRP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAOIDCRP.class.getSimpleName() + \" e\", OIDCRP.class);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public OIDCRP save(final OIDCRP clientApp) {\n+        return entityManager().merge(clientApp);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        OIDCRP rpTO = find(key);\n+        if (rpTO == null) {\n+            return;\n+        }\n+\n+        delete(rpTO);\n+    }\n+\n+    @Override\n+    public void deleteByClientId(final String clientId) {\n+        OIDCRP rpTO = findByClientId(clientId);\n+        if (rpTO == null) {\n+            return;\n+        }\n+        delete(rpTO);\n+    }\n+\n+    @Override\n+    public void delete(final OIDCRP clientApp) {\n+        entityManager().remove(clientApp);\n+    }\n+}"},{"sha":"e8ce293ef0ce668632908d85b8bbda7881440c14","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/auth/JPASAML2SPDAO.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2Fauth%2FJPASAML2SPDAO.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao.auth;\n+\n+import org.apache.syncope.core.persistence.jpa.dao.AbstractDAO;\n+import org.apache.syncope.core.persistence.jpa.entity.auth.JPASAML2SP;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import javax.persistence.NoResultException;\n+import javax.persistence.TypedQuery;\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+\n+@Repository\n+public class JPASAML2SPDAO extends AbstractDAO<SAML2SP> implements SAML2SPDAO {\n+\n+    @Override\n+    public SAML2SP find(final String key) {\n+        return entityManager().find(JPASAML2SP.class, key);\n+    }\n+\n+    private SAML2SP find(final String column, final Object value) {\n+        TypedQuery<SAML2SP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2SP.class.getSimpleName() + \" e WHERE e.\" + column + \"=:value\",\n+                SAML2SP.class);\n+        query.setParameter(\"value\", value);\n+\n+        SAML2SP result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (final NoResultException e) {\n+            LOG.debug(\"No SAML2SP found with \" + column + \" {}\", value, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public SAML2SP findByClientAppId(final Long clientAppId) {\n+        return find(\"clientAppId\", clientAppId);\n+    }\n+\n+    @Override\n+    public SAML2SP findByName(final String name) {\n+        return find(\"name\", name);\n+    }\n+\n+    @Override\n+    public SAML2SP findByEntityId(final String entityId) {\n+        return find(\"entityId\", entityId);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<SAML2SP> findAll() {\n+        TypedQuery<SAML2SP> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPASAML2SP.class.getSimpleName() + \" e\", SAML2SP.class);\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public SAML2SP save(final SAML2SP clientApp) {\n+        return entityManager().merge(clientApp);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        SAML2SP policy = find(key);\n+        if (policy == null) {\n+            return;\n+        }\n+\n+        delete(policy);\n+    }\n+\n+    @Override\n+    public void deleteByEntityId(final String entityId) {\n+        SAML2SP app = findByEntityId(entityId);\n+        if (app == null) {\n+            return;\n+        }\n+        delete(app);\n+    }\n+\n+    @Override\n+    public void delete(final SAML2SP clientApp) {\n+        entityManager().remove(clientApp);\n+    }\n+}"},{"sha":"e815c0fcd23e4fa88e2e8b895b62c55ed8f6332f","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/AbstractClientApp.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FAbstractClientApp.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,131 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.AbstractGeneratedKeyEntity;\n+import org.apache.syncope.core.persistence.jpa.entity.JPARealm;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAttrReleasePolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAuthPolicy;\n+import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccessPolicy;\n+import javax.persistence.Column;\n+import javax.persistence.FetchType;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.MappedSuperclass;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+\n+@MappedSuperclass\n+public class AbstractClientApp extends AbstractGeneratedKeyEntity implements ClientApp {\n+\n+    private static final long serialVersionUID = 7422422526695279794L;\n+\n+    @Column(unique = true, nullable = false)\n+    private String name;\n+\n+    @Column(unique = true, nullable = false)\n+    private Long clientAppId;\n+\n+    @Column\n+    private String description;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPARealm realm;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAAuthPolicy authPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAAccessPolicy accessPolicy;\n+\n+    @ManyToOne(fetch = FetchType.EAGER)\n+    private JPAAttrReleasePolicy attrReleasePolicy;\n+\n+    public Long getClientAppId() {\n+        return clientAppId;\n+    }\n+\n+    public void setClientAppId(final Long clientAppId) {\n+        this.clientAppId = clientAppId;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getDescription() {\n+        return description;\n+    }\n+\n+    @Override\n+    public void setDescription(final String description) {\n+        this.description = description;\n+    }\n+\n+    @Override\n+    public JPAAuthPolicy getAuthPolicy() {\n+        return authPolicy;\n+    }\n+\n+    @Override\n+    public void setAuthPolicy(final AuthPolicy authPolicy) {\n+        checkType(authPolicy, JPAAuthPolicy.class);\n+        this.authPolicy = (JPAAuthPolicy) authPolicy;\n+    }\n+\n+    public JPAAccessPolicy getAccessPolicy() {\n+        return accessPolicy;\n+    }\n+\n+    public void setAccessPolicy(final AccessPolicy accessPolicy) {\n+        checkType(accessPolicy, JPAAccessPolicy.class);\n+        this.accessPolicy = (JPAAccessPolicy) accessPolicy;\n+    }\n+\n+    @Override\n+    public AttrReleasePolicy getAttrReleasePolicy() {\n+        return this.attrReleasePolicy;\n+    }\n+\n+    @Override\n+    public void setAttrReleasePolicy(final AttrReleasePolicy policy) {\n+        checkType(policy, JPAAccessPolicy.class);\n+        this.attrReleasePolicy = (JPAAttrReleasePolicy) policy;\n+    }\n+\n+    @Override\n+    public Realm getRealm() {\n+        return realm;\n+    }\n+\n+    @Override\n+    public void setRealm(final Realm realm) {\n+        checkType(realm, JPARealm.class);\n+        this.realm = (JPARealm) realm;\n+    }\n+}"},{"sha":"ced3c6a04283c93cd9d82c150534efb91ae62c8e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtils.java","status":"added","additions":51,"deletions":0,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtils.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,51 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+\n+public class JPAClientAppUtils implements ClientAppUtils {\n+\n+    private final ClientAppType type;\n+\n+    protected JPAClientAppUtils(final ClientAppType type) {\n+        this.type = type;\n+    }\n+\n+    @Override\n+    public ClientAppType getType() {\n+        return type;\n+    }\n+\n+    @Override\n+    public Class<? extends ClientApp> clientAppClass() {\n+        switch (type) {\n+            case OIDCRP:\n+                return OIDCRP.class;\n+\n+            case SAML2SP:\n+            default:\n+                return SAML2SP.class;\n+        }\n+    }\n+}"},{"sha":"610cc63dd96339facc07e855680f65f4734839a6","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAClientAppUtilsFactory.java","status":"added","additions":72,"deletions":0,"changes":72,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAClientAppUtilsFactory.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,72 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtils;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientAppUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class JPAClientAppUtilsFactory implements ClientAppUtilsFactory {\n+\n+    @Override\n+    public ClientAppUtils getInstance(final ClientAppType type) {\n+        return new JPAClientAppUtils(type);\n+    }\n+\n+    @Override\n+    public ClientAppUtils getInstance(final ClientApp clientApp) {\n+        ClientAppType type;\n+        if (clientApp instanceof SAML2SP) {\n+            type = ClientAppType.SAML2SP;\n+        } else if (clientApp instanceof OIDCRP) {\n+            type = ClientAppType.OIDCRP;\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid client app: \" + clientApp);\n+        }\n+\n+        return getInstance(type);\n+    }\n+\n+    @Override\n+    public ClientAppUtils getInstance(final Class<? extends ClientAppTO> clientAppClass) {\n+        ClientAppType type;\n+        if (clientAppClass == SAML2SPTO.class) {\n+            type = ClientAppType.SAML2SP;\n+        } else if (clientAppClass == OIDCRPTO.class) {\n+            type = ClientAppType.OIDCRP;\n+        } else {\n+            throw new IllegalArgumentException(\"Invalid ClientAppTO app: \" + clientAppClass.getName());\n+        }\n+\n+        return getInstance(type);\n+    }\n+\n+    @Override\n+    public ClientAppUtils getInstance(final ClientAppTO clientAppTO) {\n+        return getInstance(clientAppTO.getClass());\n+    }\n+}"},{"sha":"a4f9a7b569564bec1479842ee30af5a7a87f0fb3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPAOIDCRP.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPAOIDCRP.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import javax.persistence.CollectionTable;\n+import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n+import javax.persistence.Entity;\n+import javax.persistence.FetchType;\n+import javax.persistence.JoinColumn;\n+import javax.persistence.Table;\n+import java.util.ArrayList;\n+import java.util.HashSet;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+\n+@Entity\n+@Table(name = JPAOIDCRP.TABLE)\n+public class JPAOIDCRP extends AbstractClientApp implements OIDCRP {\n+\n+    private static final long serialVersionUID = 7422422526695279794L;\n+\n+    public static final String TABLE = \"OIDCRP\";\n+\n+    @Column(unique = true, nullable = false)\n+    private String clientId;\n+\n+    @Column\n+    private String clientSecret;\n+\n+    @Column\n+    private boolean signIdToken;\n+\n+    @Column\n+    private String jwks;\n+\n+    @Column\n+    private OIDCSubjectType subjectType;\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column\n+    @CollectionTable(name = \"OIDCRP_RedirectUris\",\n+            joinColumns =\n+            @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n+    private List<String> redirectUris = new ArrayList<>();\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column\n+    @CollectionTable(name = \"OIDCRP_SupportedGrantTypes\",\n+            joinColumns =\n+            @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n+    private Set<String> supportedGrantTypes = new HashSet<>();\n+\n+    @ElementCollection(fetch = FetchType.EAGER)\n+    @Column(name = \"supportedResponseType\")\n+    @CollectionTable(name = \"OIDCRP_SupportedResponseTypes\",\n+            joinColumns =\n+            @JoinColumn(name = \"client_id\", referencedColumnName = \"id\"))\n+    private Set<String> supportedResponseTypes = new HashSet<>();\n+\n+    @Override\n+    public List<String> getRedirectUris() {\n+        return redirectUris;\n+    }\n+\n+    @Override\n+    public String getClientId() {\n+        return clientId;\n+    }\n+\n+    @Override\n+    public void setClientId(final String clientId) {\n+        this.clientId = clientId;\n+    }\n+\n+    @Override\n+    public String getClientSecret() {\n+        return clientSecret;\n+    }\n+\n+    @Override\n+    public void setClientSecret(final String clientSecret) {\n+        this.clientSecret = clientSecret;\n+    }\n+\n+    @Override\n+    public boolean isSignIdToken() {\n+        return signIdToken;\n+    }\n+\n+    @Override\n+    public void setSignIdToken(final boolean signIdToken) {\n+        this.signIdToken = signIdToken;\n+    }\n+\n+    @Override\n+    public String getJwks() {\n+        return jwks;\n+    }\n+\n+    @Override\n+    public void setJwks(final String jwks) {\n+        this.jwks = jwks;\n+    }\n+\n+    @Override\n+    public OIDCSubjectType getSubjectType() {\n+        return subjectType;\n+    }\n+\n+    @Override\n+    public void setSubjectType(final OIDCSubjectType subjectType) {\n+        this.subjectType = subjectType;\n+    }\n+\n+    @Override\n+    public Set<String> getSupportedGrantTypes() {\n+        return supportedGrantTypes;\n+    }\n+\n+    @Override\n+    public Set<String> getSupportedResponseTypes() {\n+        return supportedResponseTypes;\n+    }\n+}"},{"sha":"a34f0e571a648745271e10554382656cf9df53a0","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/auth/JPASAML2SP.java","status":"added","additions":204,"deletions":0,"changes":204,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2Fauth%2FJPASAML2SP.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,204 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity.auth;\n+\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Table;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+\n+@Entity\n+@Table(name = JPASAML2SP.TABLE)\n+public class JPASAML2SP extends AbstractClientApp implements SAML2SP {\n+\n+    public static final String TABLE = \"SAML2SP\";\n+\n+    private static final long serialVersionUID = 6422422526695279794L;\n+\n+    @Column(unique = true, nullable = false)\n+    private String entityId;\n+\n+    @Column(nullable = false)\n+    private String metadataLocation;\n+\n+    @Column\n+    private String metadataSignatureLocation;\n+\n+    @Column\n+    private boolean signAssertions;\n+\n+    @Column\n+    private boolean signResponses;\n+\n+    @Column\n+    private boolean encryptionOptional;\n+\n+    @Column\n+    private boolean encryptAssertions;\n+\n+    @Column(name = \"reqAuthnContextClass\")\n+    private String requiredAuthenticationContextClass;\n+\n+    @Column\n+    private SAML2SPNameId requiredNameIdFormat;\n+\n+    @Column\n+    private Integer skewAllowance;\n+\n+    @Column\n+    private String nameIdQualifier;\n+\n+    @Column\n+    private String assertionAudiences;\n+\n+    @Column(name = \"spNameIdQualifier\")\n+    private String serviceProviderNameIdQualifier;\n+\n+    @Override\n+    public String getEntityId() {\n+        return entityId;\n+    }\n+\n+    @Override\n+    public void setEntityId(final String entityId) {\n+        this.entityId = entityId;\n+    }\n+\n+    @Override\n+    public String getMetadataLocation() {\n+        return metadataLocation;\n+    }\n+\n+    @Override\n+    public void setMetadataLocation(final String metadataLocation) {\n+        this.metadataLocation = metadataLocation;\n+    }\n+\n+    @Override\n+    public String getMetadataSignatureLocation() {\n+        return metadataSignatureLocation;\n+    }\n+\n+    @Override\n+    public void setMetadataSignatureLocation(final String metadataSignatureLocation) {\n+        this.metadataSignatureLocation = metadataSignatureLocation;\n+    }\n+\n+    @Override\n+    public boolean isSignAssertions() {\n+        return signAssertions;\n+    }\n+\n+    @Override\n+    public void setSignAssertions(final boolean signAssertions) {\n+        this.signAssertions = signAssertions;\n+    }\n+\n+    @Override\n+    public boolean isSignResponses() {\n+        return signResponses;\n+    }\n+\n+    @Override\n+    public void setSignResponses(final boolean signResponses) {\n+        this.signResponses = signResponses;\n+    }\n+\n+    @Override\n+    public boolean isEncryptionOptional() {\n+        return encryptionOptional;\n+    }\n+\n+    @Override\n+    public void setEncryptionOptional(final boolean encryptionOptional) {\n+        this.encryptionOptional = encryptionOptional;\n+    }\n+\n+    @Override\n+    public boolean isEncryptAssertions() {\n+        return encryptAssertions;\n+    }\n+\n+    @Override\n+    public void setEncryptAssertions(final boolean encryptAssertions) {\n+        this.encryptAssertions = encryptAssertions;\n+    }\n+\n+    @Override\n+    public String getRequiredAuthenticationContextClass() {\n+        return requiredAuthenticationContextClass;\n+    }\n+\n+    @Override\n+    public void setRequiredAuthenticationContextClass(final String requiredAuthenticationContextClass) {\n+        this.requiredAuthenticationContextClass = requiredAuthenticationContextClass;\n+    }\n+\n+    @Override\n+    public SAML2SPNameId getRequiredNameIdFormat() {\n+        return requiredNameIdFormat;\n+    }\n+\n+    @Override\n+    public void setRequiredNameIdFormat(final SAML2SPNameId requiredNameIdFormat) {\n+        this.requiredNameIdFormat = requiredNameIdFormat;\n+    }\n+\n+    @Override\n+    public Integer getSkewAllowance() {\n+        return skewAllowance;\n+    }\n+\n+    @Override\n+    public void setSkewAllowance(final Integer skewAllowance) {\n+        this.skewAllowance = skewAllowance;\n+    }\n+\n+    @Override\n+    public String getNameIdQualifier() {\n+        return nameIdQualifier;\n+    }\n+\n+    @Override\n+    public void setNameIdQualifier(final String nameIdQualifier) {\n+        this.nameIdQualifier = nameIdQualifier;\n+    }\n+\n+    @Override\n+    public String getAssertionAudiences() {\n+        return assertionAudiences;\n+    }\n+\n+    @Override\n+    public void setAssertionAudiences(final String assertionAudiences) {\n+        this.assertionAudiences = assertionAudiences;\n+    }\n+\n+    @Override\n+    public String getServiceProviderNameIdQualifier() {\n+        return serviceProviderNameIdQualifier;\n+    }\n+\n+    @Override\n+    public void setServiceProviderNameIdQualifier(final String serviceProviderNameIdQualifier) {\n+        this.serviceProviderNameIdQualifier = serviceProviderNameIdQualifier;\n+    }\n+\n+}"},{"sha":"d2eea8f46f732b14f7ca8328820f4711d60b3daf","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AbstractClientAppTest.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAbstractClientAppTest.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,109 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import java.util.List;\n+import java.util.Map;\n+import java.util.Set;\n+import org.apache.syncope.common.lib.policy.DefaultAccessPolicyConf;\n+import org.apache.syncope.common.lib.policy.AllowedAttrReleasePolicyConf;\n+import org.apache.syncope.common.lib.policy.DefaultAuthPolicyConf;\n+import org.apache.syncope.common.lib.types.AMImplementationType;\n+import org.apache.syncope.common.lib.types.ImplementationEngine;\n+import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n+import org.apache.syncope.core.persistence.api.entity.Implementation;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class AbstractClientAppTest extends AbstractTest {\n+\n+    @Autowired\n+    protected PolicyDAO policyDAO;\n+\n+    @Autowired\n+    protected ImplementationDAO implementationDAO;\n+\n+    protected AttrReleasePolicy buildAndSaveAttrRelPolicy() {\n+        AttrReleasePolicy attrRelPolicy = entityFactory.newEntity(AttrReleasePolicy.class);\n+        attrRelPolicy.setName(\"AttrRelPolicyTest\");\n+        attrRelPolicy.setDescription(\"This is a sample access policy\");\n+\n+        AllowedAttrReleasePolicyConf conf = new AllowedAttrReleasePolicyConf();\n+        conf.setName(\"Example Attr Rel Policy for an application\");\n+        conf.getAllowedAttributes().addAll(List.of(\"cn\", \"givenName\"));\n+\n+        Implementation type = entityFactory.newEntity(Implementation.class);\n+        type.setKey(\"AttrRelPolicyTest\");\n+        type.setEngine(ImplementationEngine.JAVA);\n+        type.setType(AMImplementationType.ATTR_RELEASE_POLICY_CONFIGURATIONS);\n+        type.setBody(POJOHelper.serialize(conf));\n+        type = implementationDAO.save(type);\n+        attrRelPolicy.setConfiguration(type);\n+        return policyDAO.save(attrRelPolicy);\n+\n+    }\n+\n+    protected AccessPolicy buildAndSaveAccessPolicy() {\n+        AccessPolicy accessPolicy = entityFactory.newEntity(AccessPolicy.class);\n+        accessPolicy.setName(\"AccessPolicyTest\");\n+        accessPolicy.setDescription(\"This is a sample access policy\");\n+\n+        DefaultAccessPolicyConf conf = new DefaultAccessPolicyConf();\n+        conf.setEnabled(true);\n+        conf.setName(\"Example Access Policy for an application\");\n+        conf.getRequiredAttributes().putAll(Map.of(\"attribute1\", Set.of(\"value1\", \"value2\")));\n+        conf.setSsoEnabled(false);\n+\n+        Implementation type = entityFactory.newEntity(Implementation.class);\n+        type.setKey(\"AccessPolicyConfKey\");\n+        type.setEngine(ImplementationEngine.JAVA);\n+        type.setType(AMImplementationType.ACCESS_POLICY_CONFIGURATIONS);\n+        type.setBody(POJOHelper.serialize(conf));\n+        type = implementationDAO.save(type);\n+\n+        accessPolicy.setConfiguration(type);\n+        return policyDAO.save(accessPolicy);\n+\n+    }\n+\n+    protected AuthPolicy buildAndSaveAuthPolicy() {\n+        AuthPolicy authPolicy = entityFactory.newEntity(AuthPolicy.class);\n+        authPolicy.setName(\"AuthPolicyTest\");\n+        authPolicy.setDescription(\"This is a sample authentication policy\");\n+\n+        DefaultAuthPolicyConf conf = new DefaultAuthPolicyConf();\n+        conf.getAuthModules().addAll(List.of(\"LdapAuthentication1\", \"DatabaseAuthentication2\"));\n+\n+        Implementation type = entityFactory.newEntity(Implementation.class);\n+        type.setKey(\"AuthPolicyConfKey\");\n+        type.setEngine(ImplementationEngine.JAVA);\n+        type.setType(AMImplementationType.AUTH_POLICY_CONFIGURATIONS);\n+        type.setBody(POJOHelper.serialize(conf));\n+        type = implementationDAO.save(type);\n+\n+        authPolicy.setConfiguration(type);\n+        return policyDAO.save(authPolicy);\n+    }\n+\n+}"},{"sha":"d79677a752c572772a3a2f4a44b0d2a02d6ac1a9","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/OIDCRPTest.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FOIDCRPTest.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.UUID;\n+import org.apache.syncope.common.lib.types.OIDCSubjectType;\n+import org.apache.syncope.core.persistence.api.dao.auth.OIDCRPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class OIDCRPTest extends AbstractClientAppTest {\n+\n+    @Autowired\n+    private OIDCRPDAO oidcrpDAO;\n+\n+    @Test\n+    public void find() {\n+        int beforeCount = oidcrpDAO.findAll().size();\n+\n+        OIDCRP rp = entityFactory.newEntity(OIDCRP.class);\n+        rp.setName(\"OIDC\");\n+        rp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        rp.setDescription(\"This is a sample OIDC RP\");\n+        rp.setClientId(\"clientid\");\n+        rp.setClientSecret(\"secret\");\n+        rp.setSubjectType(OIDCSubjectType.PUBLIC);\n+        rp.getSupportedGrantTypes().add(\"something\");\n+        rp.getSupportedResponseTypes().add(\"something\");\n+\n+        AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n+        rp.setAccessPolicy(accessPolicy);\n+\n+        AuthPolicy authPolicy = buildAndSaveAuthPolicy();\n+        rp.setAuthPolicy(authPolicy);\n+\n+        oidcrpDAO.save(rp);\n+\n+        assertNotNull(rp);\n+        assertNotNull(rp.getKey());\n+\n+        int afterCount = oidcrpDAO.findAll().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+\n+        rp = oidcrpDAO.findByClientId(\"clientid\");\n+        assertNotNull(rp);\n+        assertNotNull(rp.getAuthPolicy());\n+\n+        rp = oidcrpDAO.findByName(\"OIDC\");\n+        assertNotNull(rp);\n+        \n+        rp = oidcrpDAO.findByClientAppId(rp.getClientAppId());\n+        assertNotNull(rp);\n+\n+        oidcrpDAO.deleteByClientId(\"clientid\");\n+        assertNull(oidcrpDAO.findByName(\"OIDC\"));\n+    }\n+}"},{"sha":"a5e50c7ba6590ac57129522f2c114b83fc188658","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/SAML2SPTest.java","status":"added","additions":80,"deletions":0,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FSAML2SPTest.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,80 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.inner;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertNull;\n+\n+import java.util.UUID;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.junit.jupiter.api.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.apache.syncope.common.lib.types.SAML2SPNameId;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.persistence.api.dao.auth.SAML2SPDAO;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+\n+@Transactional(\"Master\")\n+public class SAML2SPTest extends AbstractClientAppTest {\n+\n+    @Autowired\n+    private SAML2SPDAO saml2spDAO;\n+\n+    @Test\n+    public void find() {\n+        int beforeCount = saml2spDAO.findAll().size();\n+        SAML2SP sp = entityFactory.newEntity(SAML2SP.class);\n+        sp.setName(\"SAML2\");\n+        sp.setClientAppId(UUID.randomUUID().getMostSignificantBits() & Long.MAX_VALUE);\n+        sp.setDescription(\"This is a sample SAML2 SP\");\n+        sp.setEntityId(\"urn:example:saml2:sp\");\n+        sp.setMetadataLocation(\"https://example.org/metadata.xml\");\n+        sp.setRequiredNameIdFormat(SAML2SPNameId.EMAIL_ADDRESS);\n+        sp.setEncryptionOptional(true);\n+        sp.setEncryptAssertions(true);\n+\n+        AccessPolicy accessPolicy = buildAndSaveAccessPolicy();\n+        sp.setAccessPolicy(accessPolicy);\n+\n+        AuthPolicy authnPolicy = buildAndSaveAuthPolicy();\n+        sp.setAuthPolicy(authnPolicy);\n+\n+        saml2spDAO.save(sp);\n+\n+        assertNotNull(sp);\n+        assertNotNull(sp.getKey());\n+\n+        int afterCount = saml2spDAO.findAll().size();\n+        assertEquals(afterCount, beforeCount + 1);\n+\n+        sp = saml2spDAO.findByEntityId(sp.getEntityId());\n+        assertNotNull(sp);\n+\n+        sp = saml2spDAO.findByName(sp.getName());\n+        assertNotNull(sp);\n+\n+        sp = saml2spDAO.findByClientAppId(sp.getClientAppId());\n+        assertNotNull(sp);\n+\n+        saml2spDAO.deleteByEntityId(sp.getEntityId());\n+        assertNull(saml2spDAO.findByName(sp.getName()));\n+    }\n+}"},{"sha":"05901228496e9dfb9a01151238f5e58177e86599","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/ClientAppDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FClientAppDataBinder.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+\n+public interface ClientAppDataBinder {\n+\n+    <T extends ClientApp> T create(ClientAppTO clientAppTO);\n+\n+    <T extends ClientApp> void update(T clientApp, ClientAppTO clientAppTO);\n+\n+    <T extends ClientAppTO> T getClientAppTO(ClientApp clientApp);\n+}"},{"sha":"67db455e6ee0500cb899857fce4b81f8efa59780","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/ClientAppDataBinderImpl.java","status":"added","additions":268,"deletions":0,"changes":268,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FClientAppDataBinderImpl.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,268 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.client.ClientAppTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.PolicyDAO;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.auth.ClientApp;\n+import org.apache.syncope.core.persistence.api.entity.auth.SAML2SP;\n+import org.apache.syncope.core.persistence.api.entity.policy.AccessPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AttrReleasePolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.AuthPolicy;\n+import org.apache.syncope.core.persistence.api.entity.policy.Policy;\n+import org.apache.syncope.core.provisioning.api.data.ClientAppDataBinder;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.apache.syncope.core.persistence.api.entity.auth.OIDCRP;\n+\n+@Component\n+public class ClientAppDataBinderImpl implements ClientAppDataBinder {\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends ClientApp> T create(final ClientAppTO clientAppTO) {\n+        if (clientAppTO instanceof SAML2SPTO) {\n+            return (T) doCreate((SAML2SPTO) clientAppTO);\n+        } else if (clientAppTO instanceof OIDCRPTO) {\n+            return (T) doCreate((OIDCRPTO) clientAppTO);\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported client app: \" + clientAppTO.getClass().getName());\n+        }\n+    }\n+\n+    @Override\n+    public <T extends ClientApp> void update(final T clientApp, final ClientAppTO clientAppTO) {\n+        if (clientAppTO instanceof SAML2SPTO) {\n+            doUpdate((SAML2SP) clientApp, (SAML2SPTO) clientAppTO);\n+        } else if (clientAppTO instanceof OIDCRPTO) {\n+            doUpdate((OIDCRP) clientApp, (OIDCRPTO) clientAppTO);\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported client app: \" + clientAppTO.getClass().getName());\n+        }\n+    }\n+\n+    @Override\n+    @SuppressWarnings(\"unchecked\")\n+    public <T extends ClientAppTO> T getClientAppTO(final ClientApp clientApp) {\n+        if (clientApp instanceof SAML2SP) {\n+            return (T) getClientAppTO((SAML2SP) clientApp);\n+        } else if (clientApp instanceof OIDCRP) {\n+            return (T) getClientAppTO((OIDCRP) clientApp);\n+        } else {\n+            throw new IllegalArgumentException(\"Unsupported client app: \" + clientApp.getClass().getName());\n+        }\n+    }\n+\n+    private SAML2SP doCreate(final SAML2SPTO clientAppTO) {\n+        SAML2SP saml2sp = entityFactory.newEntity(SAML2SP.class);\n+        update(saml2sp, clientAppTO);\n+        return saml2sp;\n+    }\n+\n+    private void doUpdate(final SAML2SP clientApp, final SAML2SPTO clientAppTO) {\n+        clientApp.setDescription(clientAppTO.getDescription());\n+        clientApp.setName(clientAppTO.getName());\n+        clientApp.setClientAppId(clientAppTO.getClientAppId());\n+        clientApp.setEntityId(clientAppTO.getEntityId());\n+        clientApp.setMetadataLocation(clientAppTO.getMetadataLocation());\n+        clientApp.setMetadataSignatureLocation(clientAppTO.getMetadataLocation());\n+        clientApp.setSignAssertions(clientAppTO.isSignAssertions());\n+        clientApp.setSignResponses(clientAppTO.isSignResponses());\n+        clientApp.setEncryptionOptional(clientAppTO.isEncryptionOptional());\n+        clientApp.setEncryptAssertions(clientAppTO.isEncryptAssertions());\n+        clientApp.setRequiredAuthenticationContextClass(clientAppTO.getRequiredAuthenticationContextClass());\n+        clientApp.setRequiredNameIdFormat(clientAppTO.getRequiredNameIdFormat());\n+        clientApp.setSkewAllowance(clientAppTO.getSkewAllowance());\n+        clientApp.setNameIdQualifier(clientAppTO.getNameIdQualifier());\n+        clientApp.setAssertionAudiences(clientAppTO.getAssertionAudiences());\n+        clientApp.setServiceProviderNameIdQualifier(clientAppTO.getServiceProviderNameIdQualifier());\n+\n+        if (clientAppTO.getAuthPolicy() == null) {\n+            clientApp.setAuthPolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAuthPolicy());\n+            if (policy instanceof AuthPolicy) {\n+                clientApp.setAuthPolicy((AuthPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AuthPolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n+        if (clientAppTO.getAccessPolicy() == null) {\n+            clientApp.setAccessPolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAccessPolicy());\n+            if (policy instanceof AccessPolicy) {\n+                clientApp.setAccessPolicy((AccessPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AccessPolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n+        if (clientAppTO.getAttrReleasePolicy() == null) {\n+            clientApp.setAttrReleasePolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAttrReleasePolicy());\n+            if (policy instanceof AttrReleasePolicy) {\n+                clientApp.setAttrReleasePolicy((AttrReleasePolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AttrReleasePolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+    }\n+\n+    private SAML2SPTO getClientAppTO(final SAML2SP clientApp) {\n+        SAML2SPTO clientAppTO = new SAML2SPTO();\n+\n+        clientAppTO.setName(clientApp.getName());\n+        clientAppTO.setKey(clientApp.getKey());\n+        clientAppTO.setDescription(clientApp.getDescription());\n+        clientAppTO.setClientAppId(clientApp.getClientAppId());\n+        clientAppTO.setEntityId(clientApp.getEntityId());\n+        clientAppTO.setMetadataLocation(clientApp.getMetadataLocation());\n+        clientAppTO.setMetadataSignatureLocation(clientApp.getMetadataLocation());\n+        clientAppTO.setSignAssertions(clientApp.isSignAssertions());\n+        clientAppTO.setSignResponses(clientApp.isSignResponses());\n+        clientAppTO.setEncryptionOptional(clientApp.isEncryptionOptional());\n+        clientAppTO.setEncryptAssertions(clientApp.isEncryptAssertions());\n+        clientAppTO.setRequiredAuthenticationContextClass(clientApp.getRequiredAuthenticationContextClass());\n+        clientAppTO.setRequiredNameIdFormat(clientApp.getRequiredNameIdFormat());\n+        clientAppTO.setSkewAllowance(clientApp.getSkewAllowance());\n+        clientAppTO.setNameIdQualifier(clientApp.getNameIdQualifier());\n+        clientAppTO.setAssertionAudiences(clientApp.getAssertionAudiences());\n+        clientAppTO.setServiceProviderNameIdQualifier(clientApp.getServiceProviderNameIdQualifier());\n+\n+        clientAppTO.setAuthPolicy(clientApp.getAuthPolicy() == null\n+                ? null : clientApp.getAuthPolicy().getKey());\n+        clientAppTO.setAccessPolicy(clientApp.getAccessPolicy() == null\n+                ? null : clientApp.getAccessPolicy().getKey());\n+        clientAppTO.setAttrReleasePolicy(clientApp.getAttrReleasePolicy() == null\n+                ? null : clientApp.getAttrReleasePolicy().getKey());\n+\n+        return clientAppTO;\n+    }\n+\n+    private OIDCRP doCreate(final OIDCRPTO clientAppTO) {\n+        OIDCRP oidcrp = entityFactory.newEntity(OIDCRP.class);\n+        update(oidcrp, clientAppTO);\n+        return oidcrp;\n+    }\n+\n+    private void doUpdate(final OIDCRP clientApp, final OIDCRPTO clientAppTO) {\n+        clientApp.setName(clientAppTO.getName());\n+        clientApp.setClientAppId(clientAppTO.getClientAppId());\n+        clientApp.setDescription(clientAppTO.getDescription());\n+        clientApp.setClientSecret(clientAppTO.getClientSecret());\n+        clientApp.setClientId(clientAppTO.getClientId());\n+        clientApp.setSignIdToken(clientAppTO.isSignIdToken());\n+        clientApp.setJwks(clientAppTO.getJwks());\n+        clientApp.setSubjectType(clientAppTO.getSubjectType());\n+        clientApp.getRedirectUris().addAll(clientAppTO.getRedirectUris());\n+        clientApp.getSupportedGrantTypes().addAll(clientAppTO.getSupportedGrantTypes());\n+        clientApp.getSupportedResponseTypes().addAll(clientAppTO.getSupportedResponseTypes());\n+\n+        if (clientAppTO.getAuthPolicy() == null) {\n+            clientApp.setAuthPolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAuthPolicy());\n+            if (policy instanceof AuthPolicy) {\n+                clientApp.setAuthPolicy((AuthPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AuthPolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n+        if (clientAppTO.getAccessPolicy() == null) {\n+            clientApp.setAccessPolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAccessPolicy());\n+            if (policy instanceof AccessPolicy) {\n+                clientApp.setAccessPolicy((AccessPolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AccessPolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+\n+        if (clientAppTO.getAttrReleasePolicy() == null) {\n+            clientApp.setAttrReleasePolicy(null);\n+        } else {\n+            Policy policy = policyDAO.find(clientAppTO.getAttrReleasePolicy());\n+            if (policy instanceof AttrReleasePolicy) {\n+                clientApp.setAttrReleasePolicy((AttrReleasePolicy) policy);\n+            } else {\n+                SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidPolicy);\n+                sce.getElements().add(\"Expected \" + AttrReleasePolicy.class.getSimpleName()\n+                        + \", found \" + policy.getClass().getSimpleName());\n+                throw sce;\n+            }\n+        }\n+    }\n+\n+    private OIDCRPTO getClientAppTO(final OIDCRP clientApp) {\n+        OIDCRPTO clientAppTO = new OIDCRPTO();\n+\n+        clientAppTO.setName(clientApp.getName());\n+        clientAppTO.setKey(clientApp.getKey());\n+        clientAppTO.setDescription(clientApp.getDescription());\n+        clientAppTO.setClientAppId(clientApp.getClientAppId());\n+        clientAppTO.setClientId(clientApp.getClientId());\n+        clientAppTO.setClientSecret(clientApp.getClientSecret());\n+        clientAppTO.setSignIdToken(clientApp.isSignIdToken());\n+        clientAppTO.setJwks(clientApp.getJwks());\n+        clientAppTO.setSubjectType(clientApp.getSubjectType());\n+        clientAppTO.getRedirectUris().addAll(clientApp.getRedirectUris());\n+        clientAppTO.getSupportedGrantTypes().addAll(clientApp.getSupportedGrantTypes());\n+        clientAppTO.getSupportedResponseTypes().addAll(clientApp.getSupportedResponseTypes());\n+\n+        clientAppTO.setAuthPolicy(clientApp.getAuthPolicy() == null\n+                ? null : clientApp.getAuthPolicy().getKey());\n+        clientAppTO.setAccessPolicy(clientApp.getAccessPolicy() == null\n+                ? null : clientApp.getAccessPolicy().getKey());\n+        clientAppTO.setAttrReleasePolicy(clientApp.getAttrReleasePolicy() == null\n+                ? null : clientApp.getAttrReleasePolicy().getKey());\n+\n+        return clientAppTO;\n+    }\n+}"},{"sha":"3ee15869970bd61cb6108152fcba914848384c71","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ClientAppITCase.java","status":"added","additions":155,"deletions":0,"changes":155,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/90a3d3290e3bf641a89a66d74883f3cb9d72342c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/90a3d3290e3bf641a89a66d74883f3cb9d72342c/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FClientAppITCase.java?ref=90a3d3290e3bf641a89a66d74883f3cb9d72342c","patch":"@@ -0,0 +1,155 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.AccessPolicyTO;\n+import org.apache.syncope.common.lib.to.client.OIDCRPTO;\n+import org.apache.syncope.common.lib.to.client.SAML2SPTO;\n+import org.apache.syncope.common.lib.types.ClientAppType;\n+import org.apache.syncope.common.lib.types.PolicyType;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+public class ClientAppITCase extends AbstractITCase {\n+\n+    @Test\n+    public void createSAML2SP() {\n+        createClientApp(ClientAppType.SAML2SP, buildSAML2SP());\n+    }\n+\n+    @Test\n+    public void readSAML2SP() {\n+        SAML2SPTO samlSpTO = buildSAML2SP();\n+        samlSpTO = createClientApp(ClientAppType.SAML2SP, samlSpTO);\n+\n+        SAML2SPTO found = clientAppService.read(ClientAppType.SAML2SP, samlSpTO.getKey());\n+        assertNotNull(found);\n+        assertFalse(StringUtils.isBlank(found.getEntityId()));\n+        assertFalse(StringUtils.isBlank(found.getMetadataLocation()));\n+        assertTrue(found.isEncryptAssertions());\n+        assertTrue(found.isEncryptionOptional());\n+        assertNotNull(found.getRequiredNameIdFormat());\n+        assertNotNull(found.getAccessPolicy());\n+        assertNotNull(found.getAuthPolicy());\n+    }\n+\n+    @Test\n+    public void updateSAML2SP() {\n+        SAML2SPTO samlSpTO = buildSAML2SP();\n+        samlSpTO = createClientApp(ClientAppType.SAML2SP, samlSpTO);\n+\n+        AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n+        accessPolicyTO.setKey(\"NewAccessPolicyTest_\" + getUUIDString());\n+        accessPolicyTO.setDescription(\"New Access policy\");\n+        accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n+        assertNotNull(accessPolicyTO);\n+\n+        samlSpTO.setEntityId(\"newEntityId\");\n+        samlSpTO.setAccessPolicy(accessPolicyTO.getKey());\n+\n+        clientAppService.update(ClientAppType.SAML2SP, samlSpTO);\n+        SAML2SPTO updated = clientAppService.read(ClientAppType.SAML2SP, samlSpTO.getKey());\n+\n+        assertNotNull(updated);\n+        assertEquals(\"newEntityId\", updated.getEntityId());\n+        assertNotNull(updated.getAccessPolicy());\n+    }\n+\n+    @Test\n+    public void deleteSAML2SP() {\n+        SAML2SPTO samlSpTO = buildSAML2SP();\n+        samlSpTO = createClientApp(ClientAppType.SAML2SP, samlSpTO);\n+\n+        clientAppService.delete(ClientAppType.SAML2SP, samlSpTO.getKey());\n+\n+        try {\n+            clientAppService.read(ClientAppType.SAML2SP, samlSpTO.getKey());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+    @Test\n+    public void createOIDCRP() {\n+        createClientApp(ClientAppType.OIDCRP, buildOIDCRP());\n+    }\n+\n+    @Test\n+    public void readOIDCRP() {\n+        OIDCRPTO oidcrpTO = buildOIDCRP();\n+        oidcrpTO = createClientApp(ClientAppType.OIDCRP, oidcrpTO);\n+\n+        OIDCRPTO found = clientAppService.read(ClientAppType.OIDCRP, oidcrpTO.getKey());\n+        assertNotNull(found);\n+        assertFalse(StringUtils.isBlank(found.getClientId()));\n+        assertFalse(StringUtils.isBlank(found.getClientSecret()));\n+        assertNotNull(found.getSubjectType());\n+        assertFalse(found.getSupportedGrantTypes().isEmpty());\n+        assertFalse(found.getSupportedResponseTypes().isEmpty());\n+        assertNotNull(found.getAccessPolicy());\n+        assertNotNull(found.getAuthPolicy());\n+    }\n+\n+    @Test\n+    public void updateOIDCRP() {\n+        OIDCRPTO oidcrpTO = buildOIDCRP();\n+        oidcrpTO = createClientApp(ClientAppType.OIDCRP, oidcrpTO);\n+\n+        AccessPolicyTO accessPolicyTO = new AccessPolicyTO();\n+        accessPolicyTO.setKey(\"NewAccessPolicyTest_\" + getUUIDString());\n+        accessPolicyTO.setDescription(\"New Access policy\");\n+        accessPolicyTO = createPolicy(PolicyType.ACCESS, accessPolicyTO);\n+        assertNotNull(accessPolicyTO);\n+\n+        oidcrpTO.setClientId(\"newClientId\");\n+        oidcrpTO.setAccessPolicy(accessPolicyTO.getKey());\n+\n+        clientAppService.update(ClientAppType.OIDCRP, oidcrpTO);\n+        OIDCRPTO updated = clientAppService.read(ClientAppType.OIDCRP, oidcrpTO.getKey());\n+\n+        assertNotNull(updated);\n+        assertEquals(\"newClientId\", updated.getClientId());\n+        assertNotNull(updated.getAccessPolicy());\n+    }\n+\n+    @Test\n+    public void delete() {\n+        OIDCRPTO oidcrpTO = buildOIDCRP();\n+        oidcrpTO = createClientApp(ClientAppType.OIDCRP, oidcrpTO);\n+\n+        clientAppService.delete(ClientAppType.OIDCRP, oidcrpTO.getKey());\n+\n+        try {\n+            clientAppService.read(ClientAppType.OIDCRP, oidcrpTO.getKey());\n+            fail(\"This should not happen\");\n+        } catch (SyncopeClientException e) {\n+            assertNotNull(e);\n+        }\n+    }\n+\n+}"}]}