{"sha":"e522014cc19b53d6dca57e6f80f2c7335a81590e","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU1MjIwMTRjYzE5YjUzZDZkY2E1N2U2ZjgwZjJjNzMzNWE4MTU5MGU=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-30T17:56:47Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-01-30T17:56:47Z"},"message":"[SYNCOPE-301] Merge from 1_0_X\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1440561 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"d5dba73dffdf322eee92b02bf7593993ef081b74","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d5dba73dffdf322eee92b02bf7593993ef081b74"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e522014cc19b53d6dca57e6f80f2c7335a81590e","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e522014cc19b53d6dca57e6f80f2c7335a81590e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e522014cc19b53d6dca57e6f80f2c7335a81590e","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e522014cc19b53d6dca57e6f80f2c7335a81590e/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"64739979c172c88fe836ab0b95bbf4754fd9c21b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/64739979c172c88fe836ab0b95bbf4754fd9c21b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/64739979c172c88fe836ab0b95bbf4754fd9c21b"}],"stats":{"total":290,"additions":174,"deletions":116},"files":[{"sha":"a488cf3946116e9d28bedea5e9a464bfde77fa65","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":2,"deletions":3,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=e522014cc19b53d6dca57e6f80f2c7335a81590e","patch":"@@ -26,7 +26,6 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n-\n import org.apache.commons.lang.builder.EqualsBuilder;\n import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.syncope.common.SyncopeConstants;\n@@ -69,7 +68,7 @@ public final SimpleDateFormat getDateFormatter() {\n      * @param property the integer representing a boolean value\n      * @return the boolean value corresponding to the property param\n      */\n-    public final Boolean isBooleanAsInteger(final Integer property) {\n+    public final boolean isBooleanAsInteger(final Integer property) {\n         return property != null && property == 1;\n     }\n \n@@ -99,7 +98,7 @@ private String[] getExcludeFields() {\n             }\n         }\n \n-        return excludeFields.toArray(new String[] {});\n+        return excludeFields.toArray(new String[]{});\n     }\n \n     @Override"},{"sha":"e6a87bdb81ef283baaaf7e4f49290f4a8bb5ce73","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=e522014cc19b53d6dca57e6f80f2c7335a81590e","patch":"@@ -492,7 +492,7 @@ public void setSuspended(final Boolean suspended) {\n     }\n \n     public Boolean isSuspended() {\n-        return isBooleanAsInteger(suspended);\n+        return suspended == null ? null : isBooleanAsInteger(suspended);\n     }\n \n     private String encodePassword(final String password, final CipherAlgorithm cipherAlgoritm)"},{"sha":"86d1949ac96aec7e0ffc3c4873163f939256459f","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=e522014cc19b53d6dca57e6f80f2c7335a81590e","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.security;\n \n import java.util.Date;\n-\n import org.apache.syncope.common.types.AuditElements.AuthenticationSubCategory;\n import org.apache.syncope.common.types.AuditElements.Category;\n import org.apache.syncope.common.types.AuditElements.Result;\n@@ -123,7 +122,7 @@ public Authentication authenticate(final Authentication authentication)\n         } else {\n             user = userDAO.find(username);\n \n-            if (user != null) {\n+            if (user != null && user.isSuspended() != null) {\n                 if (user.isSuspended()) {\n                     throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n                 }"},{"sha":"857d26a28b63d1ff29f538bb2b61dd73f95edcf1","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":136,"deletions":80,"changes":216,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=e522014cc19b53d6dca57e6f80f2c7335a81590e","patch":"@@ -18,14 +18,15 @@\n  */\n package org.apache.syncope.core.sync.impl;\n \n+import java.util.AbstractMap;\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import org.apache.commons.lang.StringUtils;\n-import org.apache.syncope.common.mod.AbstractAttributableMod;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.mod.RoleMod;\n import org.apache.syncope.common.mod.UserMod;\n@@ -58,6 +59,7 @@\n import org.apache.syncope.core.persistence.dao.SchemaDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n+import org.apache.syncope.core.propagation.PropagationByResource;\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.SyncopeConnector;\n@@ -449,6 +451,18 @@ public Long findMatchingAttributableId(final ObjectClass objectClass, final Stri\n         return result;\n     }\n \n+    protected Boolean readEnabled(final ConnectorObject connectorObject) {\n+        Boolean enabled = null;\n+        if (syncTask.isSyncStatus()) {\n+            Attribute status = AttributeUtil.find(OperationalAttributes.ENABLE_NAME, connectorObject.getAttributes());\n+            if (status != null && status.getValue() != null && !status.getValue().isEmpty()) {\n+                enabled = (Boolean) status.getValue().get(0);\n+            }\n+        }\n+\n+        return enabled;\n+    }\n+\n     protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUtil, final boolean dryRun)\n             throws JobExecutionException {\n \n@@ -477,19 +491,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n         } else {\n             try {\n                 if (AttributableType.USER == attrUtil.getType()) {\n-                    // --------------------------\n-                    // Check for status synchronization ...\n-                    // --------------------------\n-                    Boolean enabled = null;\n-                    if (syncTask.isSyncStatus()) {\n-                        Attribute status = AttributeUtil.find(OperationalAttributes.ENABLE_NAME,\n-                                delta.getObject().getAttributes());\n-                        if (status != null && status.getValue() != null && !status.getValue().isEmpty()) {\n-                            enabled = (Boolean) status.getValue().get(0);\n-                        }\n-                    }\n-                    // --------------------------\n-\n+                    Boolean enabled = readEnabled(delta.getObject());\n                     WorkflowResult<Map.Entry<Long, Boolean>> created =\n                             uwfAdapter.create((UserTO) subjectTO, true, enabled);\n \n@@ -544,9 +546,106 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n         return Collections.singletonList(result);\n     }\n \n+    protected void updateUser(final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n+            throws Exception {\n+\n+        UserTO userTO = userDataBinder.getUserTO(id);\n+        UserMod userMod = connObjectUtil.getAttributableMod(\n+                id, delta.getObject(), userTO, syncTask, AttributableUtil.getInstance(AttributableType.USER));\n+\n+        delta = actions.beforeUpdate(this, delta, userTO, userMod);\n+\n+        if (dryRun) {\n+            return;\n+        }\n+\n+        WorkflowResult<Map.Entry<Long, Boolean>> updated;\n+        try {\n+            updated = uwfAdapter.update(userMod);\n+        } catch (Exception e) {\n+            LOG.error(\"Update of user {} failed, trying to sync its status anyway (if configured)\", id, e);\n+\n+            result.setStatus(SyncResult.Status.FAILURE);\n+            result.setMessage(\"Update failed, trying to sync status anyway (if configured)\\n\" + e.getMessage());\n+\n+            updated = new WorkflowResult<Map.Entry<Long, Boolean>>(\n+                    new AbstractMap.SimpleEntry<Long, Boolean>(id, false), new PropagationByResource(),\n+                    new HashSet<String>());\n+        }\n+\n+        Boolean enabled = readEnabled(delta.getObject());\n+        if (enabled != null) {\n+            WorkflowResult<Long> enableUpdate = null;\n+\n+            SyncopeUser user = userDAO.find(id);\n+            enableUpdate = user.isSuspended() == null\n+                    ? uwfAdapter.activate(id, null)\n+                    : enabled\n+                    ? uwfAdapter.reactivate(id)\n+                    : uwfAdapter.suspend(id);\n+\n+            if (enableUpdate != null) {\n+                if (enableUpdate.getPropByRes() != null) {\n+                    updated.getPropByRes().merge(enableUpdate.getPropByRes());\n+                    updated.getPropByRes().purge();\n+                }\n+                updated.getPerformedTasks().addAll(enableUpdate.getPerformedTasks());\n+            }\n+        }\n+\n+        List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n+                userMod.getPassword(),\n+                userMod.getVirtualAttributesToBeRemoved(),\n+                userMod.getVirtualAttributesToBeUpdated(),\n+                Collections.singleton(syncTask.getResource().getName()));\n+\n+        taskExecutor.execute(tasks);\n+\n+        notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n+\n+        userTO = userDataBinder.getUserTO(updated.getResult().getKey());\n+\n+        actions.after(this, delta, userTO, result);\n+    }\n+\n+    protected void updateRole(final Long id, SyncDelta delta, final boolean dryRun, final SyncResult result)\n+            throws Exception {\n+\n+        RoleTO roleTO = roleDataBinder.getRoleTO(id);\n+        RoleMod roleMod = connObjectUtil.getAttributableMod(\n+                id, delta.getObject(), roleTO, syncTask, AttributableUtil.getInstance(AttributableType.ROLE));\n+\n+        delta = actions.beforeUpdate(this, delta, roleTO, roleMod);\n+\n+        if (dryRun) {\n+            return;\n+        }\n+\n+        WorkflowResult<Long> updated = rwfAdapter.update(roleMod);\n+        String roleOwner = null;\n+        for (AttributeMod attrMod : roleMod.getAttributesToBeUpdated()) {\n+            if (attrMod.getSchema().isEmpty()) {\n+                roleOwner = attrMod.getValuesToBeAdded().iterator().next();\n+            }\n+        }\n+        if (roleOwner != null) {\n+            roleOwnerMap.put(updated.getResult(), roleOwner);\n+        }\n+\n+        List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n+                roleMod.getVirtualAttributesToBeRemoved(),\n+                roleMod.getVirtualAttributesToBeUpdated(),\n+                Collections.singleton(syncTask.getResource().getName()));\n+\n+        taskExecutor.execute(tasks);\n+\n+        roleTO = roleDataBinder.getRoleTO(updated.getResult());\n+\n+        actions.after(this, delta, roleTO, result);\n+    }\n+\n     protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, final AttributableUtil attrUtil,\n-            final boolean dryRun)\n-            throws JobExecutionException {\n+            final boolean dryRun) throws JobExecutionException {\n \n         if (!syncTask.isPerformUpdate()) {\n             LOG.debug(\"SyncTask not configured for update\");\n@@ -558,79 +657,36 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n         List<SyncResult> updResults = new ArrayList<SyncResult>();\n \n         for (Long id : subjects) {\n+            LOG.debug(\"About to update {}\", id);\n+\n             final SyncResult result = new SyncResult();\n             result.setOperation(ResourceOperation.UPDATE);\n             result.setSubjectType(attrUtil.getType());\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+            result.setId(id);\n \n             try {\n-                AbstractAttributableTO subjectTO = AttributableType.USER == attrUtil.getType()\n-                        ? userDataBinder.getUserTO(id)\n-                        : roleDataBinder.getRoleTO(id);\n-                try {\n-                    final AbstractAttributableMod mod = connObjectUtil.getAttributableMod(\n-                            id, delta.getObject(), subjectTO, syncTask, attrUtil);\n-                    delta = actions.beforeUpdate(this, delta, subjectTO, mod);\n-\n-                    result.setStatus(SyncResult.Status.SUCCESS);\n-                    result.setId(mod.getId());\n-                    if (mod instanceof UserMod) {\n-                        result.setName(((UserMod) mod).getUsername());\n-                    }\n-                    if (mod instanceof RoleMod) {\n-                        result.setName(((RoleMod) mod).getName());\n-                    }\n-\n-                    if (!dryRun) {\n-                        if (AttributableType.USER == attrUtil.getType()) {\n-                            WorkflowResult<Map.Entry<Long, Boolean>> updated = uwfAdapter.update((UserMod) mod);\n-\n-                            List<PropagationTask> tasks = propagationManager.getUserUpdateTaskIds(updated,\n-                                    ((UserMod) mod).getPassword(), mod.getVirtualAttributesToBeRemoved(),\n-                                    mod.getVirtualAttributesToBeUpdated(),\n-                                    Collections.singleton(syncTask.getResource().getName()));\n-\n-                            taskExecutor.execute(tasks);\n-\n-                            notificationManager.createTasks(updated.getResult().getKey(), updated.getPerformedTasks());\n+                if (AttributableType.USER == attrUtil.getType()) {\n+                    updateUser(id, delta, dryRun, result);\n+                }\n \n-                            subjectTO = userDataBinder.getUserTO(updated.getResult().getKey());\n-                        }\n-                        if (AttributableType.ROLE == attrUtil.getType()) {\n-                            WorkflowResult<Long> updated = rwfAdapter.update((RoleMod) mod);\n-                            String roleOwner = null;\n-                            for (AttributeMod attrMod : mod.getAttributesToBeUpdated()) {\n-                                if (attrMod.getSchema().isEmpty()) {\n-                                    roleOwner = attrMod.getValuesToBeAdded().iterator().next();\n-                                }\n-                            }\n-                            if (roleOwner != null) {\n-                                roleOwnerMap.put(updated.getResult(), roleOwner);\n-                            }\n-\n-                            List<PropagationTask> tasks = propagationManager.getRoleUpdateTaskIds(updated,\n-                                    mod.getVirtualAttributesToBeRemoved(), mod.getVirtualAttributesToBeUpdated(),\n-                                    Collections.singleton(syncTask.getResource().getName()));\n-\n-                            taskExecutor.execute(tasks);\n-\n-                            subjectTO = roleDataBinder.getRoleTO(updated.getResult());\n-                        }\n-                    }\n-                } catch (PropagationException e) {\n-                    LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n-                } catch (Exception e) {\n-                    result.setStatus(SyncResult.Status.SUCCESS);\n-                    result.setMessage(e.getMessage());\n-                    LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                if (AttributableType.ROLE == attrUtil.getType()) {\n+                    updateRole(id, delta, dryRun, result);\n                 }\n+            } catch (PropagationException e) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(delta.getUid().getUidValue() + \"updated but not propagated\\n\" + e.getMessage());\n \n-                actions.after(this, delta, subjectTO, result);\n-                updResults.add(result);\n-            } catch (NotFoundException e) {\n-                LOG.error(\"Could not find {} {}\", attrUtil.getType(), id, e);\n-            } catch (UnauthorizedRoleException e) {\n-                LOG.error(\"Not allowed to read {} {}\", attrUtil.getType(), id, e);\n+                LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+            } catch (Exception e) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(e.getMessage());\n+\n+                LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n             }\n+            results.add(result);\n+\n+            LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n         }\n \n         return updResults;"},{"sha":"13584902a724f20de49e0526a7eca002ef079a0a","filename":"core/src/main/java/org/apache/syncope/core/workflow/WorkflowResult.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FWorkflowResult.java?ref=e522014cc19b53d6dca57e6f80f2c7335a81590e","patch":"@@ -20,7 +20,6 @@\n \n import java.util.Collections;\n import java.util.Set;\n-\n import org.apache.commons.lang.builder.EqualsBuilder;\n import org.apache.commons.lang.builder.HashCodeBuilder;\n import org.apache.commons.lang.builder.ReflectionToStringBuilder;\n@@ -36,14 +35,12 @@\n     private Set<String> performedTasks;\n \n     public WorkflowResult(final T result, final PropagationByResource propByRes, final String performedTask) {\n-\n         this.result = result;\n         this.propByRes = propByRes;\n         this.performedTasks = Collections.singleton(performedTask);\n     }\n \n     public WorkflowResult(final T result, final PropagationByResource propByRes, final Set<String> performedTasks) {\n-\n         this.result = result;\n         this.propByRes = propByRes;\n         this.performedTasks = performedTasks;"},{"sha":"99075a3b76d7072c1606823887c09c07ad24afe8","filename":"core/src/main/java/org/apache/syncope/core/workflow/user/NoOpUserWorkflowAdapter.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fuser%2FNoOpUserWorkflowAdapter.java?ref=e522014cc19b53d6dca57e6f80f2c7335a81590e","patch":"@@ -18,11 +18,11 @@\n  */\n package org.apache.syncope.core.workflow.user;\n \n+import java.util.AbstractMap;\n+import java.util.AbstractMap.SimpleEntry;\n import java.util.Arrays;\n import java.util.Collections;\n import java.util.List;\n-import java.util.AbstractMap;\n-import java.util.AbstractMap.SimpleEntry;\n import java.util.Map;\n import org.apache.syncope.common.mod.UserMod;\n import org.apache.syncope.common.to.UserTO;\n@@ -51,6 +51,7 @@ public class NoOpUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n     @Override\n     public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, final boolean disablePwdPolicyCheck)\n             throws WorkflowException {\n+\n         return create(userTO, disablePwdPolicyCheck, null);\n     }\n \n@@ -62,8 +63,7 @@ public WorkflowResult<Map.Entry<Long, Boolean>> create(final UserTO userTO, fina\n         SyncopeUser user = new SyncopeUser();\n         dataBinder.create(user, userTO);\n \n-        // this will make SyncopeUserValidator not to consider\n-        // password policies at all\n+        // this will make SyncopeUserValidator not to consider password policies at all\n         if (disablePwdPolicyCheck) {\n             user.removeClearPassword();\n         }"},{"sha":"043ffbacae80fd583e588db1a8b28dc25ce8a6de","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":25,"deletions":18,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=e522014cc19b53d6dca57e6f80f2c7335a81590e","patch":"@@ -27,9 +27,7 @@\n import java.util.Collections;\n import java.util.List;\n import java.util.Set;\n-\n import javax.ws.rs.core.Response;\n-\n import org.apache.syncope.common.search.AttributableCond;\n import org.apache.syncope.common.search.AttributeCond;\n import org.apache.syncope.common.search.MembershipCond;\n@@ -56,7 +54,6 @@\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.apache.syncope.core.workflow.ActivitiDetector;\n import org.junit.FixMethodOrder;\n-import org.junit.Ignore;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n import org.springframework.http.HttpStatus;\n@@ -330,11 +327,11 @@ public void sync() {\n \n     @Test\n     public void reconcileFromDB() {\n-        // Update sync task\n+        // update sync task\n         SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, 7L);\n         assertNotNull(task);\n \n-        //  add user template\n+        // add user template\n         UserTO template = new UserTO();\n         template.addAttribute(attributeTO(\"type\", \"'type a'\"));\n         template.addAttribute(attributeTO(\"userId\", \"'reconciled@syncope.apache.org'\"));\n@@ -351,14 +348,26 @@ public void reconcileFromDB() {\n         assertEquals(new RoleTO(), actual.getRoleTemplate());\n \n         TaskExecTO execution = execSyncTask(actual.getId(), 20, false);\n+        assertNotNull(execution.getStatus());\n+        assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n \n-        final String status = execution.getStatus();\n-        assertNotNull(status);\n-        assertTrue(PropagationTaskExecStatus.valueOf(status).isSuccessful());\n-\n-        final UserTO userTO = userService.read(\"testuser1\");\n+        UserTO userTO = userService.read(\"testuser1\");\n         assertNotNull(userTO);\n         assertEquals(\"reconciled@syncope.apache.org\", userTO.getAttributeMap().get(\"userId\").getValues().get(0));\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        // enable user on external resource\n+        JdbcTemplate jdbcTemplate = new JdbcTemplate(testDataSource);\n+        jdbcTemplate.execute(\"UPDATE TEST SET STATUS=TRUE\");\n+\n+        // re-execute the same SyncTask: now user must be active\n+        execution = execSyncTask(actual.getId(), 20, false);\n+        assertNotNull(execution.getStatus());\n+        assertTrue(PropagationTaskExecStatus.valueOf(execution.getStatus()).isSuccessful());\n+        \n+        userTO = userService.read(\"testuser1\");\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n     }\n \n     @Test\n@@ -716,19 +725,17 @@ private TaskExecTO execSyncTask(final Long taskId, final int maxWaitSeconds,\n \n     @Test\n     public void issueSYNCOPE272() {\n+        // create user with testdb resource\n+        UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope272@syncope.apache.org\");\n+        userTO.addResource(\"resource-testdb\");\n \n-            //Create user with testdb resource\n-            UserTO userTO = UserTestITCase.getUniqueSampleTO(\"syncope272@syncope.apache.org\");\n-            userTO.addResource(\"resource-testdb\");\n-\n-            userTO = createUser(userTO);\n-            try {\n-\n+        userTO = createUser(userTO);\n+        try {\n             assertNotNull(userTO);\n             assertEquals(1, userTO.getPropagationStatusTOs().size());\n             assertTrue(userTO.getPropagationStatusTOs().get(0).getStatus().isSuccessful());\n \n-            // Update sync task\n+            // update sync task\n             SyncTaskTO task = taskService.read(TaskType.SYNCHRONIZATION, SYNC_TASK_ID);\n             assertNotNull(task);\n "},{"sha":"62f31e8d9b9148531e9b84af0bd30c28927af02c","filename":"core/src/test/resources/content.xml","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e522014cc19b53d6dca57e6f80f2c7335a81590e/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=e522014cc19b53d6dca57e6f80f2c7335a81590e","patch":"@@ -42,15 +42,15 @@ under the License.\n   <Policy DTYPE=\"PasswordPolicy\" id=\"8\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3Corg.apache.syncope.common.types.PasswordPolicySpec%3E%0A++%3ChistoryLength%3E0%3C%2FhistoryLength%3E%0A++%3CmaxLength%3E0%3C%2FmaxLength%3E%0A++%3CminLength%3E10%3C%2FminLength%3E%0A++%3CnonAlphanumericRequired%3Etrue%3C%2FnonAlphanumericRequired%3E%0A++%3CalphanumericRequired%3Efalse%3C%2FalphanumericRequired%3E%0A++%3CdigitRequired%3Etrue%3C%2FdigitRequired%3E%0A++%3ClowercaseRequired%3Etrue%3C%2FlowercaseRequired%3E%0A++%3CuppercaseRequired%3Etrue%3C%2FuppercaseRequired%3E%0A++%3CmustStartWithDigit%3Etrue%3C%2FmustStartWithDigit%3E%0A++%3CmustntStartWithDigit%3Efalse%3C%2FmustntStartWithDigit%3E%0A++%3CmustEndWithDigit%3Etrue%3C%2FmustEndWithDigit%3E%0A++%3CmustntEndWithDigit%3Efalse%3C%2FmustntEndWithDigit%3E%0A++%3CmustStartWithNonAlpha%3Efalse%3C%2FmustStartWithNonAlpha%3E%0A++%3CmustStartWithAlpha%3Efalse%3C%2FmustStartWithAlpha%3E%0A++%3CmustntStartWithNonAlpha%3Efalse%3C%2FmustntStartWithNonAlpha%3E%0A++%3CmustntStartWithAlpha%3Efalse%3C%2FmustntStartWithAlpha%3E%0A++%3CmustEndWithNonAlpha%3Efalse%3C%2FmustEndWithNonAlpha%3E%0A++%3CmustEndWithAlpha%3Efalse%3C%2FmustEndWithAlpha%3E%0A++%3CmustntEndWithNonAlpha%3Efalse%3C%2FmustntEndWithNonAlpha%3E%0A++%3CmustntEndWithAlpha%3Efalse%3C%2FmustntEndWithAlpha%3E%0A++%3CprefixesNotPermitted%3E%0A++++%3Cstring%3Enotpermitted1%3C%2Fstring%3E%0A++++%3Cstring%3Enotpermitted2%3C%2Fstring%3E%0A++%3C%2FprefixesNotPermitted%3E%0A%3C%2Forg.apache.syncope.common.types.PasswordPolicySpec%3E\"/>\n     \n   <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n-               username=\"user1\" creationDate=\"2010-10-20 11:00:00\"/>\n+               username=\"user1\" creationDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n   <SyncopeUser id=\"2\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n-               username=\"user2\" creationDate=\"2010-10-20 11:00:00\"/>\n+               username=\"user2\" creationDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n   <SyncopeUser id=\"3\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n-               username=\"user3\" creationDate=\"2010-10-20 11:00:00\"/>\n+               username=\"user3\" creationDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n   <SyncopeUser id=\"4\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n-               username=\"user4\" creationDate=\"2010-10-20 11:00:00\"/>\n+               username=\"user4\" creationDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n   <SyncopeUser id=\"5\" workflowId=\"0\" status=\"active\" password=\"5baa61e4c9b93f3f0682250b6cf8331b7ee68fd8\" cipherAlgorithm=\"SHA1\"\n-               username=\"user5\" creationDate=\"2010-10-20 11:00:00\"/>\n+               username=\"user5\" creationDate=\"2010-10-20 11:00:00\" suspended=\"0\"/>\n \n   <SyncopeRole id=\"1\" name=\"root\"/>\n   <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\"/>"}]}