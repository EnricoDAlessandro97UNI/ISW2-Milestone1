{"sha":"32af0320d9d426bb34fc5a69287b5e19a0630ad3","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjMyYWYwMzIwZDlkNDI2YmIzNGZjNWE2OTI4N2I1ZTE5YTA2MzBhZDM=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-02-28T16:58:39Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-03-02T10:57:57Z"},"message":"[SYNCOPE-1035] Using JWT as authentication mean, obtained via initial call","tree":{"sha":"30137cc5df097b0867eae3a4da357efc81861f38","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/30137cc5df097b0867eae3a4da357efc81861f38"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/32af0320d9d426bb34fc5a69287b5e19a0630ad3","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/32af0320d9d426bb34fc5a69287b5e19a0630ad3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/32af0320d9d426bb34fc5a69287b5e19a0630ad3","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/32af0320d9d426bb34fc5a69287b5e19a0630ad3/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"b49453765b615d63e6acba555a3c4f8dcf2febaf","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b49453765b615d63e6acba555a3c4f8dcf2febaf","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b49453765b615d63e6acba555a3c4f8dcf2febaf"}],"stats":{"total":2479,"additions":2096,"deletions":383},"files":[{"sha":"beb5feb150825fd69642b4d9f2f11fd0de56cc1a","filename":"client/cli/src/main/java/org/apache/syncope/client/cli/SyncopeServices.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fcli%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fcli%2FSyncopeServices.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -53,7 +53,7 @@ public static <T> T get(final Class<T> clazz) {\n                 setUseCompression(BooleanUtils.toBoolean(useGZIPCompression)).\n                 create(properties.getProperty(\"syncope.admin.user\"), syncopeAdminPassword);\n \n-        LOG.debug(\"Creting service for {}\", clazz.getName());\n+        LOG.debug(\"Creating service for {}\", clazz.getName());\n         return syncopeClient.getService(clazz);\n     }\n "},{"sha":"1ce3b719ff4bf590b5e6eef4b50d7167d8dd0fd0","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":21,"deletions":24,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -37,8 +37,8 @@\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n-import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.to.DomainTO;\n@@ -87,10 +87,6 @@ public class SyncopeConsoleSession extends AuthenticatedWebSession {\n \n     private SyncopeClient client;\n \n-    private String username;\n-\n-    private String password;\n-\n     private UserTO selfTO;\n \n     private Map<String, Set<String>> auth;\n@@ -106,9 +102,10 @@ public static SyncopeConsoleSession get() {\n     public SyncopeConsoleSession(final Request request) {\n         super(request);\n \n-        SyncopeClient anonymousClient = SyncopeConsoleApplication.get().getClientFactory().create(\n-                SyncopeConsoleApplication.get().getAnonymousUser(),\n-                SyncopeConsoleApplication.get().getAnonymousKey());\n+        SyncopeClient anonymousClient = SyncopeConsoleApplication.get().getClientFactory().\n+                create(new AnonymousAuthenticationHandler(\n+                        SyncopeConsoleApplication.get().getAnonymousUser(),\n+                        SyncopeConsoleApplication.get().getAnonymousKey()));\n \n         platformInfo = anonymousClient.getService(SyncopeService.class).platform();\n         systemInfo = anonymousClient.getService(SyncopeService.class).system();\n@@ -134,8 +131,16 @@ public ScheduledFuture<?> scheduleAtFixedRate(\n \n     @Override\n     public void invalidate() {\n+        client.logout();\n+        executorService.shutdown();\n         super.invalidate();\n+    }\n+\n+    @Override\n+    public void invalidateNow() {\n+        client.logout();\n         executorService.shutdownNow();\n+        super.invalidateNow();\n     }\n \n     public PlatformInfo getPlatformInfo() {\n@@ -158,6 +163,10 @@ public String getDomain() {\n         return StringUtils.isBlank(domain) ? SyncopeConstants.MASTER_DOMAIN : domain;\n     }\n \n+    public String getJWT() {\n+        return client.getJWT();\n+    }\n+\n     @Override\n     public boolean authenticate(final String username, final String password) {\n         boolean authenticated = false;\n@@ -170,8 +179,6 @@ public boolean authenticate(final String username, final String password) {\n             auth = self.getKey();\n             selfTO = self.getValue();\n \n-            this.username = username;\n-            this.password = password;\n             authenticated = true;\n         } catch (Exception e) {\n             LOG.error(\"Authentication failed\", e);\n@@ -199,7 +206,7 @@ public Roles getRoles() {\n     }\n \n     public void refreshAuth() {\n-        authenticate(username, password);\n+        client.refresh();\n         roles = null;\n     }\n \n@@ -213,8 +220,7 @@ private <T> T getCachedService(final Class<T> serviceClass) {\n             services.put(serviceClass, service);\n         }\n \n-        WebClient.client(service).\n-                type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n+        WebClient.client(service).type(MediaType.APPLICATION_JSON).accept(MediaType.APPLICATION_JSON);\n \n         return service;\n     }\n@@ -231,18 +237,9 @@ public <T> T getService(final String etag, final Class<T> serviceClass) {\n     }\n \n     public <T> T getService(final MediaType mediaType, final Class<T> serviceClass) {\n-        T service;\n+        T service = client.getService(serviceClass);\n \n-        synchronized (SyncopeConsoleApplication.get().getClientFactory()) {\n-            SyncopeClientFactoryBean.ContentType preType = SyncopeConsoleApplication.get().getClientFactory().\n-                    getContentType();\n-\n-            SyncopeConsoleApplication.get().getClientFactory().\n-                    setContentType(SyncopeClientFactoryBean.ContentType.fromString(mediaType.toString()));\n-            service = SyncopeConsoleApplication.get().getClientFactory().\n-                    create(username, password).getService(serviceClass);\n-            SyncopeConsoleApplication.get().getClientFactory().setContentType(preType);\n-        }\n+        WebClient.client(service).type(mediaType).accept(mediaType);\n \n         return service;\n     }"},{"sha":"d2c73f1211880d416b0551862a9797735c8dc9f5","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/BaseRestClient.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FBaseRestClient.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -24,6 +24,7 @@\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.JAXRSService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n@@ -69,10 +70,14 @@ protected static String toOrderBy(final SortParam<String> sort) {\n         return builder.build();\n     }\n \n-    protected static <E extends JAXRSService, T> T getObject(final E service, final URI location,\n-            final Class<T> resultClass) {\n+    protected static <E extends JAXRSService, T> T getObject(\n+            final E service, final URI location, final Class<T> resultClass) {\n+\n         WebClient webClient = WebClient.fromClient(WebClient.client(service));\n         webClient.accept(SyncopeConsoleApplication.get().getMediaType()).to(location.toASCIIString(), false);\n-        return webClient.get(resultClass);\n+        return webClient.\n+                header(RESTHeaders.DOMAIN, SyncopeConsoleSession.get().getDomain()).\n+                header(RESTHeaders.TOKEN, SyncopeConsoleSession.get().getJWT()).\n+                get(resultClass);\n     }\n }"},{"sha":"7ac3fcc63074518f12dad58966147be64921bdca","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ConnectorRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FConnectorRestClient.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -58,8 +58,8 @@ public ConnInstanceTO create(final ConnInstanceTO connectorTO) {\n         connectorTO.getConf().clear();\n         connectorTO.getConf().addAll(filteredConf);\n \n-        final ConnectorService service = getService(ConnectorService.class);\n-        final Response response = service.create(connectorTO);\n+        ConnectorService service = getService(ConnectorService.class);\n+        Response response = service.create(connectorTO);\n \n         return getObject(service, response.getLocation(), ConnInstanceTO.class);\n     }"},{"sha":"7ba375dacf65735afdba70c88295043e25c67773","filename":"client/console/src/main/java/org/apache/syncope/client/console/rest/ResourceRestClient.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FResourceRestClient.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -104,8 +104,8 @@ public int compare(final ResourceTO o1, final ResourceTO o2) {\n     }\n \n     public ResourceTO create(final ResourceTO resourceTO) {\n-        final ResourceService service = getService(ResourceService.class);\n-        final Response response = service.create(resourceTO);\n+        ResourceService service = getService(ResourceService.class);\n+        Response response = service.create(resourceTO);\n         return getObject(service, response.getLocation(), ResourceTO.class);\n     }\n "},{"sha":"7c1af3b02f27537993190e34b4ca6b854eaade69","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserSession.java","status":"modified","additions":20,"deletions":28,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserSession.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -18,9 +18,7 @@\n  */\n package org.apache.syncope.client.enduser;\n \n-import java.text.DateFormat;\n import java.util.List;\n-import java.util.Locale;\n import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.core.EntityTag;\n@@ -29,6 +27,7 @@\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.info.PlatformInfo;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -58,10 +57,6 @@ public class SyncopeEnduserSession extends WebSession {\n \n     private SyncopeClient client;\n \n-    private String username;\n-\n-    private String password;\n-\n     private final PlatformInfo platformInfo;\n \n     private final List<PlainSchemaTO> datePlainSchemas;\n@@ -81,9 +76,10 @@ public SyncopeEnduserSession(final Request request) {\n         // define cookie utility to manage application cookies\n         cookieUtils = new CookieUtils();\n \n-        anonymousClient = SyncopeEnduserApplication.get().getClientFactory().create(\n-                SyncopeEnduserApplication.get().getAnonymousUser(),\n-                SyncopeEnduserApplication.get().getAnonymousKey());\n+        anonymousClient = SyncopeEnduserApplication.get().getClientFactory().\n+                create(new AnonymousAuthenticationHandler(\n+                        SyncopeEnduserApplication.get().getAnonymousUser(),\n+                        SyncopeEnduserApplication.get().getAnonymousKey()));\n         platformInfo = anonymousClient.getService(SyncopeService.class).platform();\n \n         datePlainSchemas = anonymousClient.getService(SchemaService.class).\n@@ -108,10 +104,8 @@ public boolean authenticate(final String username, final String password) {\n             Pair<Map<String, Set<String>>, UserTO> self = client.self();\n             selfTO = self.getValue();\n \n-            this.username = username;\n-            this.password = password;\n-            // bind explicitly this session to have a stateful behavior during http requests, unless session will expire\n-            // for every  request\n+            // bind explicitly this session to have a stateful behavior during http requests, unless session will\n+            // expire for every request\n             this.bind();\n             authenticated = true;\n         } catch (Exception e) {\n@@ -135,14 +129,6 @@ public <T> T getService(final String etag, final Class<T> serviceClass) {\n         return serviceInstance;\n     }\n \n-    public String getUsername() {\n-        return username;\n-    }\n-\n-    public String getPassword() {\n-        return password;\n-    }\n-\n     public PlatformInfo getPlatformInfo() {\n         return platformInfo;\n     }\n@@ -156,13 +142,7 @@ public UserTO getSelfTO() {\n     }\n \n     public boolean isAuthenticated() {\n-        return getUsername() != null;\n-    }\n-\n-    public DateFormat getDateFormat() {\n-        final Locale locale = getLocale() == null ? Locale.ENGLISH : getLocale();\n-\n-        return DateFormat.getDateTimeInstance(DateFormat.SHORT, DateFormat.SHORT, locale);\n+        return client.getJWT() != null;\n     }\n \n     public CookieUtils getCookieUtils() {\n@@ -177,4 +157,16 @@ public void setXsrfTokenGenerated(final boolean xsrfTokenGenerated) {\n         this.xsrfTokenGenerated = xsrfTokenGenerated;\n     }\n \n+    @Override\n+    public void invalidate() {\n+        client.logout();\n+        super.invalidate();\n+    }\n+\n+    @Override\n+    public void invalidateNow() {\n+        client.logout();\n+        super.invalidateNow();\n+    }\n+\n }"},{"sha":"b34be6654426b59568211920fb25a3b441fa4e8f","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/AnonymousAuthenticationHandler.java","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FAnonymousAuthenticationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FAnonymousAuthenticationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FAnonymousAuthenticationHandler.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,30 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+/**\n+ * Implementation providing Basic Authentication capability for the special {@code anonymous} user.\n+ */\n+public class AnonymousAuthenticationHandler extends BasicAuthenticationHandler implements AuthenticationHandler {\n+\n+    public AnonymousAuthenticationHandler(final String username, final String password) {\n+        super(username, password);\n+    }\n+\n+}"},{"sha":"d30de3dc7bec01b588e3479195c5f0629cfa06e5","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/AuthenticationHandler.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FAuthenticationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FAuthenticationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FAuthenticationHandler.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,27 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+/**\n+ * Marker interface for usage with\n+ * {@link SyncopeClientFactoryBean#create(org.apache.syncope.client.lib.AuthenticationHandler)}.\n+ */\n+public interface AuthenticationHandler {\n+\n+}"},{"sha":"ff1452ec1bcc39036d597798e93628c6346404b5","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/BasicAuthenticationHandler.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FBasicAuthenticationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FBasicAuthenticationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FBasicAuthenticationHandler.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+/**\n+ * Implementation providing Basic Authentication capability.\n+ */\n+public class BasicAuthenticationHandler implements AuthenticationHandler {\n+\n+    private final String username;\n+\n+    private final String password;\n+\n+    public BasicAuthenticationHandler(final String username, final String password) {\n+        this.username = username;\n+        this.password = password;\n+    }\n+\n+    public String getUsername() {\n+        return username;\n+    }\n+\n+    public String getPassword() {\n+        return password;\n+    }\n+\n+}"},{"sha":"b13ec2ee935cfad8b8b0fa4dfc54e780cd9475af","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/JWTAuthenticationHandler.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FJWTAuthenticationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FJWTAuthenticationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FJWTAuthenticationHandler.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+/**\n+ * Implementation providing JSON Web Token authentication capability.\n+ */\n+public class JWTAuthenticationHandler implements AuthenticationHandler {\n+\n+    private final String jwt;\n+\n+    public JWTAuthenticationHandler(final String jwtToken) {\n+        this.jwt = jwtToken;\n+    }\n+\n+    public String getJwt() {\n+        return jwt;\n+    }\n+\n+}"},{"sha":"6ad2b1f67af5f2f2e7dc5a9889ae32d9d7439a99","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/NoAuthenticationHandler.java","status":"added","additions":26,"deletions":0,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FNoAuthenticationHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FNoAuthenticationHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FNoAuthenticationHandler.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,26 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.lib;\n+\n+/**\n+ * Empty implementation not providing any real authentication capability.\n+ */\n+public class NoAuthenticationHandler implements AuthenticationHandler {\n+\n+}"},{"sha":"c126deb8ab2a08ec059824292fe20156f609b910","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/RestClientFactoryBean.java","status":"removed","additions":0,"deletions":91,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b49453765b615d63e6acba555a3c4f8dcf2febaf/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b49453765b615d63e6acba555a3c4f8dcf2febaf/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FRestClientFactoryBean.java?ref=b49453765b615d63e6acba555a3c4f8dcf2febaf","patch":"@@ -1,91 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.client.lib;\n-\n-import javax.ws.rs.core.MediaType;\n-import org.apache.commons.lang3.StringUtils;\n-import org.apache.cxf.jaxrs.client.Client;\n-import org.apache.cxf.jaxrs.client.ClientConfiguration;\n-import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n-import org.apache.cxf.jaxrs.client.WebClient;\n-import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n-import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n-import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n-\n-/**\n- * Provides shortcuts for creating JAX-RS service instances via CXF's {@link JAXRSClientFactoryBean}.\n- */\n-public class RestClientFactoryBean extends JAXRSClientFactoryBean {\n-\n-    public static final String HEADER_SPLIT_PROPERTY = \"org.apache.cxf.http.header.split\";\n-\n-    /**\n-     * Creates an anonymous instance of the given service class, for the given content type.\n-     *\n-     * @param <T> any service class\n-     * @param serviceClass service class reference\n-     * @param mediaType XML or JSON are supported\n-     * @return anonymous service instance of the given reference class\n-     */\n-    public <T> T createServiceInstance(final Class<T> serviceClass, final MediaType mediaType) {\n-        return createServiceInstance(serviceClass, mediaType, null, null, false);\n-    }\n-\n-    /**\n-     * Creates an authenticated instance of the given service class, for the given content type.\n-     *\n-     * @param <T> any service class\n-     * @param serviceClass service class reference\n-     * @param mediaType XML or JSON are supported\n-     * @param username username for REST authentication\n-     * @param password password for REST authentication\n-     * @param useCompression whether transparent gzip <tt>Content-Encoding</tt> handling is to be enabled\n-     * @return anonymous service instance of the given reference class\n-     */\n-    public <T> T createServiceInstance(\n-            final Class<T> serviceClass,\n-            final MediaType mediaType,\n-            final String username,\n-            final String password,\n-            final boolean useCompression) {\n-\n-        if (StringUtils.isNotBlank(username)) {\n-            setUsername(username);\n-        }\n-        if (StringUtils.isNotBlank(password)) {\n-            setPassword(password);\n-        }\n-\n-        setServiceClass(serviceClass);\n-        T serviceInstance = create(serviceClass);\n-\n-        Client client = WebClient.client(serviceInstance);\n-        client.type(mediaType).accept(mediaType);\n-\n-        ClientConfiguration config = WebClient.getConfig(client);\n-        config.getRequestContext().put(HEADER_SPLIT_PROPERTY, true);\n-        config.getRequestContext().put(URLConnectionHTTPConduit.HTTPURL_CONNECTION_METHOD_REFLECTION, true);\n-        if (useCompression) {\n-            config.getInInterceptors().add(new GZIPInInterceptor());\n-            config.getOutInterceptors().add(new GZIPOutInterceptor());\n-        }\n-\n-        return serviceInstance;\n-    }\n-}"},{"sha":"a5664195280c2da52e824c6f91de8d03a650c024","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClient.java","status":"modified","additions":128,"deletions":64,"changes":192,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClient.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -21,22 +21,32 @@\n import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import java.io.IOException;\n+import java.util.Collections;\n import java.util.HashMap;\n+import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import javax.ws.rs.core.EntityTag;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.cxf.jaxrs.client.Client;\n+import org.apache.cxf.jaxrs.client.ClientConfiguration;\n+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.cxf.transport.common.gzip.GZIPInInterceptor;\n+import org.apache.cxf.transport.common.gzip.GZIPOutInterceptor;\n+import org.apache.cxf.transport.http.URLConnectionHTTPConduit;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.search.AnyObjectFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.OrderByClauseBuilder;\n import org.apache.syncope.common.lib.search.GroupFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.UserFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.UserTO;\n import org.apache.syncope.common.rest.api.Preference;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.AccessTokenService;\n import org.apache.syncope.common.rest.api.service.UserSelfService;\n \n /**\n@@ -45,33 +55,98 @@\n  */\n public class SyncopeClient {\n \n+    private static final String HEADER_SPLIT_PROPERTY = \"org.apache.cxf.http.header.split\";\n+\n     private final MediaType mediaType;\n \n-    private final RestClientFactoryBean restClientFactory;\n+    private final JAXRSClientFactoryBean restClientFactory;\n \n     private final RestClientExceptionMapper exceptionMapper;\n \n-    private final String username;\n-\n-    private final String password;\n-\n     private final boolean useCompression;\n \n     public SyncopeClient(\n             final MediaType mediaType,\n-            final RestClientFactoryBean restClientFactory,\n+            final JAXRSClientFactoryBean restClientFactory,\n             final RestClientExceptionMapper exceptionMapper,\n-            final String username, final String password,\n+            final AuthenticationHandler handler,\n             final boolean useCompression) {\n \n         this.mediaType = mediaType;\n         this.restClientFactory = restClientFactory;\n+        if (this.restClientFactory.getHeaders() == null) {\n+            this.restClientFactory.setHeaders(new HashMap<String, String>());\n+        }\n         this.exceptionMapper = exceptionMapper;\n-        this.username = username;\n-        this.password = password;\n+        init(handler);\n         this.useCompression = useCompression;\n     }\n \n+    /**\n+     * Initializes the provided {@code restClientFactory} with the authentication capabilities of the provided\n+     * {@code handler}.\n+     *\n+     * Currently supports:\n+     * <ul>\n+     * <li>{@link JWTAuthenticationHandler}</li>\n+     * <li>{@link AnonymousAuthenticationHandler}</li>\n+     * <li>{@link BasicAuthenticationHandler}</li>\n+     * </ul>\n+     * More can be supported by subclasses.\n+     *\n+     * @param handler authentication handler\n+     */\n+    protected void init(final AuthenticationHandler handler) {\n+        cleanup();\n+\n+        if (handler instanceof AnonymousAuthenticationHandler) {\n+            restClientFactory.setUsername(((AnonymousAuthenticationHandler) handler).getUsername());\n+            restClientFactory.setPassword(((AnonymousAuthenticationHandler) handler).getPassword());\n+        } else if (handler instanceof BasicAuthenticationHandler) {\n+            restClientFactory.setUsername(((BasicAuthenticationHandler) handler).getUsername());\n+            restClientFactory.setPassword(((BasicAuthenticationHandler) handler).getPassword());\n+\n+            String jwt = getService(AccessTokenService.class).login().getHeaderString(RESTHeaders.TOKEN);\n+            restClientFactory.getHeaders().put(RESTHeaders.TOKEN, Collections.singletonList(jwt));\n+\n+            restClientFactory.setUsername(null);\n+            restClientFactory.setPassword(null);\n+        } else if (handler instanceof JWTAuthenticationHandler) {\n+            restClientFactory.getHeaders().put(\n+                    RESTHeaders.TOKEN, Collections.singletonList(((JWTAuthenticationHandler) handler).getJwt()));\n+        }\n+    }\n+\n+    protected void cleanup() {\n+        restClientFactory.getHeaders().remove(RESTHeaders.TOKEN);\n+        restClientFactory.setUsername(null);\n+        restClientFactory.setPassword(null);\n+    }\n+\n+    /**\n+     * Attempts to extend the lifespan of the JWT currently in use.\n+     */\n+    public void refresh() {\n+        getService(AccessTokenService.class).refresh();\n+    }\n+\n+    /**\n+     * Invalidates the JWT currently in use.\n+     */\n+    public void logout() {\n+        getService(AccessTokenService.class).logout();\n+        cleanup();\n+    }\n+\n+    /**\n+     * (Re)initializes the current instance with the authentication capabilities of the provided {@code handler}.\n+     *\n+     * @param handler authentication handler\n+     */\n+    public void login(final AuthenticationHandler handler) {\n+        init(handler);\n+    }\n+\n     /**\n      * Returns a new instance of {@link UserFiqlSearchConditionBuilder}, for assisted building of FIQL queries.\n      *\n@@ -109,6 +184,31 @@ public static OrderByClauseBuilder getOrderByClauseBuilder() {\n         return new OrderByClauseBuilder();\n     }\n \n+    /**\n+     * Returns the JWT in used by this instance, passed with the {@link RESTHeaders#TOKEN} header in all requests.\n+     * It can be null (in case {@link NoAuthenticationHandler} or {@link AnonymousAuthenticationHandler} were used).\n+     *\n+     * @return the JWT in used by this instance\n+     */\n+    public String getJWT() {\n+        List<String> headerValues = restClientFactory.getHeaders().get(RESTHeaders.TOKEN);\n+        return headerValues == null || headerValues.isEmpty()\n+                ? null\n+                : headerValues.get(0);\n+    }\n+\n+    /**\n+     * Returns the domain configured for this instance, or {@link SyncopeConstants#MASTER_DOMAIN} if not set.\n+     *\n+     * @return the domain configured for this instance\n+     */\n+    public String getDomain() {\n+        List<String> headerValues = restClientFactory.getHeaders().get(RESTHeaders.DOMAIN);\n+        return headerValues == null || headerValues.isEmpty()\n+                ? SyncopeConstants.MASTER_DOMAIN\n+                : headerValues.get(0);\n+    }\n+\n     /**\n      * Creates an instance of the given service class, with configured content type and authentication.\n      *\n@@ -118,16 +218,29 @@ public static OrderByClauseBuilder getOrderByClauseBuilder() {\n      */\n     public <T> T getService(final Class<T> serviceClass) {\n         synchronized (restClientFactory) {\n-            return restClientFactory.createServiceInstance(serviceClass, mediaType, username, password, useCompression);\n+            restClientFactory.setServiceClass(serviceClass);\n+            T serviceInstance = restClientFactory.create(serviceClass);\n+\n+            Client client = WebClient.client(serviceInstance);\n+            client.type(mediaType).accept(mediaType);\n+\n+            ClientConfiguration config = WebClient.getConfig(client);\n+            config.getRequestContext().put(HEADER_SPLIT_PROPERTY, true);\n+            config.getRequestContext().put(URLConnectionHTTPConduit.HTTPURL_CONNECTION_METHOD_REFLECTION, true);\n+            if (useCompression) {\n+                config.getInInterceptors().add(new GZIPInInterceptor());\n+                config.getOutInterceptors().add(new GZIPOutInterceptor());\n+            }\n+\n+            return serviceInstance;\n         }\n     }\n \n     @SuppressWarnings(\"unchecked\")\n     public Pair<Map<String, Set<String>>, UserTO> self() {\n         // Explicitly disable header value split because it interferes with JSON deserialization below\n         UserSelfService service = getService(UserSelfService.class);\n-        WebClient.getConfig(WebClient.client(service)).\n-                getRequestContext().put(RestClientFactoryBean.HEADER_SPLIT_PROPERTY, false);\n+        WebClient.getConfig(WebClient.client(service)).getRequestContext().put(HEADER_SPLIT_PROPERTY, false);\n \n         Response response = service.read();\n         if (response.getStatusInfo().getStatusCode() != Response.Status.OK.getStatusCode()) {\n@@ -163,19 +276,6 @@ public <T> T header(final T service, final String key, final Object... values) {\n         return service;\n     }\n \n-    /**\n-     * Creates an instance of the given service class and sets the given header.\n-     *\n-     * @param <T> any service class\n-     * @param serviceClass service class reference\n-     * @param key HTTP header key\n-     * @param values HTTP header values\n-     * @return service instance of the given reference class, with given header set\n-     */\n-    public <T> T header(final Class<T> serviceClass, final String key, final Object... values) {\n-        return header(getService(serviceClass), key, values);\n-    }\n-\n     /**\n      * Sets the {@code Prefer} header on the give service instance.\n      *\n@@ -188,29 +288,17 @@ public <T> T prefer(final T service, final Preference preference) {\n         return header(service, RESTHeaders.PREFER, preference.toString());\n     }\n \n-    /**\n-     * Creates an instance of the given service class, with {@code Prefer} header set.\n-     *\n-     * @param <T> any service class\n-     * @param serviceClass service class reference\n-     * @param preference preference to be set via {@code Prefer} header\n-     * @return service instance of the given reference class, with {@code Prefer} header set\n-     */\n-    public <T> T prefer(final Class<T> serviceClass, final Preference preference) {\n-        return header(serviceClass, RESTHeaders.PREFER, preference.toString());\n-    }\n-\n     /**\n      * Asks for asynchronous propagation towards external resources with null priority.\n      *\n      * @param <T> any service class\n-     * @param serviceClass service class reference\n+     * @param service service class instance\n      * @param nullPriorityAsync whether asynchronous propagation towards external resources with null priority is\n      * requested\n      * @return service instance of the given reference class, with related header set\n      */\n-    public <T> T nullPriorityAsync(final Class<T> serviceClass, final boolean nullPriorityAsync) {\n-        return header(serviceClass, RESTHeaders.NULL_PRIORITY_ASYNC, nullPriorityAsync);\n+    public <T> T nullPriorityAsync(final T service, final boolean nullPriorityAsync) {\n+        return header(service, RESTHeaders.NULL_PRIORITY_ASYNC, nullPriorityAsync);\n     }\n \n     /**\n@@ -239,18 +327,6 @@ public <T> T ifMatch(final T service, final EntityTag etag) {\n         return match(service, etag, false);\n     }\n \n-    /**\n-     * Creates an instance of the given service class, with {@code If-Match} header set.\n-     *\n-     * @param <T> any service class\n-     * @param serviceClass service class reference\n-     * @param etag ETag value\n-     * @return given service instance, with {@code If-Match} set\n-     */\n-    public <T> T ifMatch(final Class<T> serviceClass, final EntityTag etag) {\n-        return match(getService(serviceClass), etag, false);\n-    }\n-\n     /**\n      * Sets the {@code If-None-Match} header on the given service instance.\n      *\n@@ -263,18 +339,6 @@ public <T> T ifNoneMatch(final T service, final EntityTag etag) {\n         return match(service, etag, true);\n     }\n \n-    /**\n-     * Creates an instance of the given service class, with {@code If-None-Match} header set.\n-     *\n-     * @param <T> any service class\n-     * @param serviceClass service class reference\n-     * @param etag ETag value\n-     * @return given service instance, with {@code If-None-Match} set\n-     */\n-    public <T> T ifNoneMatch(final Class<T> serviceClass, final EntityTag etag) {\n-        return match(getService(serviceClass), etag, true);\n-    }\n-\n     /**\n      * Fetches {@code ETag} header value from latest service run (if available).\n      *"},{"sha":"45e6ffa644f98335275931e3a22d9a14d1dfb6b2","filename":"client/lib/src/main/java/org/apache/syncope/client/lib/SyncopeClientFactoryBean.java","status":"modified","additions":34,"deletions":11,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FSyncopeClientFactoryBean.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -31,6 +31,7 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.feature.Feature;\n import org.apache.cxf.ext.logging.LoggingFeature;\n+import org.apache.cxf.jaxrs.client.JAXRSClientFactoryBean;\n import org.apache.cxf.jaxrs.provider.JAXBElementProvider;\n import org.apache.cxf.staxutils.DocumentDepthProperties;\n import org.apache.syncope.common.lib.policy.AbstractPolicyTO;\n@@ -79,7 +80,7 @@ public static ContentType fromString(final String value) {\n \n     private boolean useCompression;\n \n-    private RestClientFactoryBean restClientFactoryBean;\n+    private JAXRSClientFactoryBean restClientFactoryBean;\n \n     protected JacksonJaxbJsonProvider defaultJsonProvider() {\n         ObjectMapper objectMapper = new ObjectMapper();\n@@ -111,16 +112,17 @@ protected RestClientExceptionMapper defaultExceptionMapper() {\n         return new RestClientExceptionMapper();\n     }\n \n-    protected RestClientFactoryBean defaultRestClientFactoryBean() {\n-        RestClientFactoryBean defaultRestClientFactoryBean = new RestClientFactoryBean();\n+    protected JAXRSClientFactoryBean defaultRestClientFactoryBean() {\n+        JAXRSClientFactoryBean defaultRestClientFactoryBean = new JAXRSClientFactoryBean();\n+        defaultRestClientFactoryBean.setHeaders(new HashMap<String, String>());\n \n         if (StringUtils.isBlank(address)) {\n             throw new IllegalArgumentException(\"Property 'address' is missing\");\n         }\n         defaultRestClientFactoryBean.setAddress(address);\n \n         if (StringUtils.isNotBlank(domain)) {\n-            defaultRestClientFactoryBean.setHeaders(Collections.singletonMap(RESTHeaders.DOMAIN, domain));\n+            defaultRestClientFactoryBean.getHeaders().put(RESTHeaders.DOMAIN, Collections.singletonList(domain));\n         }\n \n         defaultRestClientFactoryBean.setThreadSafe(true);\n@@ -221,41 +223,62 @@ public boolean isUseCompression() {\n         return useCompression;\n     }\n \n-    public RestClientFactoryBean getRestClientFactoryBean() {\n+    public JAXRSClientFactoryBean getRestClientFactoryBean() {\n         return restClientFactoryBean == null\n                 ? defaultRestClientFactoryBean()\n                 : restClientFactoryBean;\n     }\n \n-    public SyncopeClientFactoryBean setRestClientFactoryBean(final RestClientFactoryBean restClientFactoryBean) {\n+    public SyncopeClientFactoryBean setRestClientFactoryBean(final JAXRSClientFactoryBean restClientFactoryBean) {\n         this.restClientFactoryBean = restClientFactoryBean;\n         return this;\n     }\n \n     /**\n-     * Builds client instance with no authentication, for user self-registration and related queries (schema,\n-     * resources, ...).\n+     * Builds client instance with no authentication, for user self-registration and password reset.\n      *\n      * @return client instance with no authentication\n      */\n     public SyncopeClient create() {\n-        return create(null, null);\n+        return create(new NoAuthenticationHandler());\n     }\n \n     /**\n      * Builds client instance with the given credentials.\n+     * Such credentials will be used only to obtain a valid JWT in the {@link RESTHeaders#TOKEN} header;\n      *\n      * @param username username\n      * @param password password\n      * @return client instance with the given credentials\n      */\n     public SyncopeClient create(final String username, final String password) {\n+        return create(new BasicAuthenticationHandler(username, password));\n+    }\n+\n+    /**\n+     * Builds client instance which will be passing the provided value in the {@link RESTHeaders#TOKEN}\n+     * request header.\n+     *\n+     * @param jwt value received after login, in the {@link RESTHeaders#TOKEN} response header\n+     * @return client instance which will be passing the provided value in the {{@link RESTHeaders#TOKEN}\n+     * request header\n+     */\n+    public SyncopeClient create(final String jwt) {\n+        return create(new JWTAuthenticationHandler(jwt));\n+    }\n+\n+    /**\n+     * Builds client instance with the given authentication handler.\n+     *\n+     * @param handler authentication handler\n+     * @return client instance with the given authentication handler\n+     */\n+    public SyncopeClient create(final AuthenticationHandler handler) {\n         return new SyncopeClient(\n                 getContentType().getMediaType(),\n                 getRestClientFactoryBean(),\n                 getExceptionMapper(),\n-                username,\n-                password,\n+                handler,\n                 useCompression);\n     }\n }"},{"sha":"583109f2defec80d8e5114ddcaa48d344e551604","filename":"client/lib/src/test/java/org/apache/syncope/client/lib/ConcurrencyTest.java","status":"modified","additions":6,"deletions":7,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Flib%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Flib%2FConcurrencyTest.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -32,8 +32,7 @@ public class ConcurrencyTest {\n \n     private static final int THREAD_NUMBER = 1000;\n \n-    private static final SyncopeClient client =\n-            new SyncopeClientFactoryBean().setAddress(\"http://url\").create(\"username\", \"password\");\n+    private static final SyncopeClient client = new SyncopeClientFactoryBean().setAddress(\"http://url\").create();\n \n     @Test\n     public void multiThreadTest()\n@@ -54,11 +53,11 @@ public void run() {\n                     }\n                 }\n             };\n-\t    try {\n-\t\texecution.start();\n-\t    } catch(OutOfMemoryError e) {\n-\t\t// ignore\n-\t    }\n+            try {\n+                execution.start();\n+            } catch (OutOfMemoryError e) {\n+                // ignore\n+            }\n         }\n \n         Thread.sleep(THREAD_NUMBER);"},{"sha":"5ab80d2c189dd18e64ab556b8f1d9513d3440200","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -29,6 +29,8 @@ public final class SyncopeConstants {\n \n     public static final String NS = \"http://syncope.apache.org/2.0\";\n \n+    public static final String JWT_CLAIM_REMOTE_HOST = \"remoteHost\";\n+\n     public static final String MASTER_DOMAIN = \"Master\";\n \n     public static final String ROOT_REALM = \"/\";"},{"sha":"c172e8852df5f9ab585ee568db892a892fe3a277","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/to/AccessTokenTO.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FAccessTokenTO.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import java.util.Date;\n+import javax.xml.bind.annotation.XmlRootElement;\n+import javax.xml.bind.annotation.XmlType;\n+import org.apache.syncope.common.lib.AbstractBaseBean;\n+\n+@XmlRootElement(name = \"accessToken\")\n+@XmlType\n+public class AccessTokenTO extends AbstractBaseBean implements EntityTO {\n+\n+    private static final long serialVersionUID = 6577639976115661357L;\n+\n+    private String key;\n+\n+    private String body;\n+\n+    private Date expiryTime;\n+\n+    private String owner;\n+\n+    private String authorities;\n+\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    public void setBody(final String body) {\n+        this.body = body;\n+    }\n+\n+    public Date getExpiryTime() {\n+        return expiryTime == null\n+                ? null\n+                : new Date(expiryTime.getTime());\n+    }\n+\n+    public void setExpiryTime(final Date expiryTime) {\n+        this.expiryTime = expiryTime == null\n+                ? null\n+                : new Date(expiryTime.getTime());\n+    }\n+\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+    public String getAuthorities() {\n+        return authorities;\n+    }\n+\n+    public void setAuthorities(final String authorities) {\n+        this.authorities = authorities;\n+    }\n+\n+}"},{"sha":"8f70ba1cce1d6345c91eab6d4459b74251a33412","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/types/StandardEntitlement.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Ftypes%2FStandardEntitlement.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -240,6 +240,10 @@ public final class StandardEntitlement {\n \n     public static final String SECURITY_QUESTION_DELETE = \"SECURITY_QUESTION_DELETE\";\n \n+    public static final String ACCESS_TOKEN_LIST = \"TASK_LIST\";\n+\n+    public static final String ACCESS_TOKEN_DELETE = \"TASK_DELETE\";\n+\n     private static final Set<String> VALUES;\n \n     static {"},{"sha":"0c54116716871269a64c80d91869ea4a3d2e13e6","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/RESTHeaders.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2FRESTHeaders.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -25,6 +25,8 @@ public final class RESTHeaders {\n \n     public static final String DOMAIN = \"X-Syncope-Domain\";\n \n+    public static final String TOKEN = \"X-Syncope-Token\";\n+\n     public static final String OWNED_ENTITLEMENTS = \"X-Syncope-Entitlements\";\n \n     public static final String RESOURCE_KEY = \"X-Syncope-Key\";"},{"sha":"abdea3f89709812535b1fbcd585ca22207b27584","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/beans/AccessTokenQuery.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAccessTokenQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAccessTokenQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fbeans%2FAccessTokenQuery.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.beans;\n+\n+public class AccessTokenQuery extends AbstractQuery {\n+\n+    private static final long serialVersionUID = -8792519310029596796L;\n+\n+    public static class Builder extends AbstractQuery.Builder<AccessTokenQuery, Builder> {\n+\n+        @Override\n+        protected AccessTokenQuery newInstance() {\n+            return new AccessTokenQuery();\n+        }\n+    }\n+\n+}"},{"sha":"e9f5ff396e1e93dd70b36b856f4299a1b937884c","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AccessTokenService.java","status":"added","additions":82,"deletions":0,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAccessTokenService.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,82 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import javax.ws.rs.BeanParam;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AccessTokenTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.rest.api.beans.AccessTokenQuery;\n+\n+/**\n+ * REST operations for access tokens.\n+ */\n+@Path(\"accessTokens\")\n+public interface AccessTokenService extends JAXRSService {\n+\n+    /**\n+     * Returns an empty response bearing the X-Syncope-Token header value, in case of successful authentication.\n+     * The provided value is a signed JSON Web Token.\n+     *\n+     * @return empty response bearing the X-Syncope-Token header value, in case of successful authentication\n+     */\n+    @POST\n+    @Path(\"login\")\n+    Response login();\n+\n+    /**\n+     * Returns an empty response bearing the X-Syncope-Token header value, with extended lifetime.\n+     * The provided value is a signed JSON Web Token.\n+     *\n+     * @return an empty response bearing the X-Syncope-Token header value, with extended lifetime\n+     */\n+    @POST\n+    @Path(\"refresh\")\n+    Response refresh();\n+\n+    /**\n+     * Invalidates the access token of the requesting user.\n+     */\n+    @POST\n+    @Path(\"logout\")\n+    void logout();\n+\n+    /**\n+     * Returns a paged list of existing access tokens matching the given query.\n+     *\n+     * @param query query conditions\n+     * @return paged list of existing access tokens matching the given query\n+     */\n+    @GET\n+    PagedResult<AccessTokenTO> list(@BeanParam AccessTokenQuery query);\n+\n+    /**\n+     * Invalidates the access token matching the provided key.\n+     *\n+     * @param key access token key\n+     */\n+    @DELETE\n+    @Path(\"{key}\")\n+    void delete(@PathParam(\"key\") String key);\n+}"},{"sha":"8442b9c0481feb3bed156b3aeeeedd93a6664836","filename":"core/logic/pom.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Flogic%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Flogic%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fpom.xml?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -38,6 +38,16 @@ under the License.\n   </properties>\n \n   <dependencies>\n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-security-jose</artifactId>\n+    </dependency>\n+\n+    <dependency>\n+      <groupId>com.fasterxml.uuid</groupId>\n+      <artifactId>java-uuid-generator</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.apache.commons</groupId>\n       <artifactId>commons-dbcp2</artifactId>"},{"sha":"6ca1b87e98958889dd78732ccb66f475f7de9e5f","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AccessTokenLogic.java","status":"added","additions":187,"deletions":0,"changes":187,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAccessTokenLogic.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,187 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import com.fasterxml.uuid.Generators;\n+import com.fasterxml.uuid.impl.RandomBasedGenerator;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import javax.annotation.Resource;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Transformer;\n+import org.apache.cxf.rs.security.jose.common.JoseType;\n+import org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm;\n+import org.apache.cxf.rs.security.jose.jws.JwsHeaders;\n+import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n+import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactProducer;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureProvider;\n+import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.apache.cxf.rs.security.jose.jwt.JwtToken;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.AccessTokenTO;\n+import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AccessTokenLogic extends AbstractTransactionalLogic<AccessTokenTO> {\n+\n+    private static final RandomBasedGenerator UUID_GENERATOR = Generators.randomBasedGenerator();\n+\n+    private static final JwsHeaders JWS_HEADERS = new JwsHeaders(JoseType.JWT, SignatureAlgorithm.HS512);\n+\n+    @Resource(name = \"jwtIssuer\")\n+    private String jwtIssuer;\n+\n+    @Resource(name = \"anonymousUser\")\n+    private String anonymousUser;\n+\n+    @Autowired\n+    private JwsSignatureProvider jwsSignatureProvider;\n+\n+    @Autowired\n+    private AccessTokenDataBinder binder;\n+\n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n+    @Autowired\n+    private ConfDAO confDAO;\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public String login(final String remoteHost) {\n+        if (anonymousUser.equals(AuthContextUtils.getUsername())) {\n+            throw new IllegalArgumentException(anonymousUser + \" cannot be granted for an access token\");\n+        }\n+\n+        String body = null;\n+\n+        AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());\n+        if (accessToken != null) {\n+            body = accessToken.getBody();\n+        }\n+\n+        if (body == null) {\n+            Date now = new Date();\n+            Calendar expiry = Calendar.getInstance();\n+            expiry.setTime(now);\n+            expiry.add(Calendar.MINUTE,\n+                    confDAO.find(\"jwt.lifetime.minutes\", \"120\").getValues().get(0).getLongValue().intValue());\n+\n+            JwtClaims claims = new JwtClaims();\n+            claims.setTokenId(UUID_GENERATOR.generate().toString());\n+            claims.setSubject(AuthContextUtils.getUsername());\n+            claims.setIssuedAt(now.getTime());\n+            claims.setIssuer(jwtIssuer);\n+            claims.setExpiryTime(expiry.getTime().getTime());\n+            claims.setNotBefore(now.getTime());\n+            claims.setClaim(SyncopeConstants.JWT_CLAIM_REMOTE_HOST, remoteHost);\n+\n+            JwtToken token = new JwtToken(JWS_HEADERS, claims);\n+            JwsJwtCompactProducer producer = new JwsJwtCompactProducer(token);\n+\n+            body = producer.signWith(jwsSignatureProvider);\n+\n+            binder.create(claims.getTokenId(), body, expiry.getTime());\n+        }\n+\n+        return body;\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public String refresh() {\n+        AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());\n+        if (accessToken == null) {\n+            throw new NotFoundException(\"AccessToken for \" + AuthContextUtils.getUsername());\n+        }\n+\n+        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(accessToken.getBody());\n+\n+        Date now = new Date();\n+        Calendar expiry = Calendar.getInstance();\n+        expiry.setTime(now);\n+        expiry.add(Calendar.MINUTE,\n+                confDAO.find(\"jwt.lifetime.minutes\", \"120\").getValues().get(0).getLongValue().intValue());\n+        consumer.getJwtClaims().setExpiryTime(expiry.getTime().getTime());\n+\n+        JwtToken token = new JwtToken(JWS_HEADERS, consumer.getJwtClaims());\n+        JwsJwtCompactProducer producer = new JwsJwtCompactProducer(token);\n+\n+        String body = producer.signWith(jwsSignatureProvider);\n+\n+        binder.update(accessToken, body, expiry.getTime());\n+\n+        return body;\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public void logout() {\n+        AccessToken accessToken = accessTokenDAO.findByOwner(AuthContextUtils.getUsername());\n+        if (accessToken == null) {\n+            throw new NotFoundException(\"AccessToken for \" + AuthContextUtils.getUsername());\n+        }\n+\n+        delete(accessToken.getKey());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ACCESS_TOKEN_LIST + \"')\")\n+    public int count() {\n+        return accessTokenDAO.count();\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ACCESS_TOKEN_LIST + \"')\")\n+    public List<AccessTokenTO> list(\n+            final int page,\n+            final int size,\n+            final List<OrderByClause> orderByClauses) {\n+\n+        return CollectionUtils.collect(accessTokenDAO.findAll(page, size, orderByClauses),\n+                new Transformer<AccessToken, AccessTokenTO>() {\n+\n+            @Override\n+            public AccessTokenTO transform(final AccessToken input) {\n+                return binder.getAccessTokenTO(input);\n+            }\n+        }, new ArrayList<AccessTokenTO>());\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + StandardEntitlement.ACCESS_TOKEN_DELETE + \"')\")\n+    public void delete(final String key) {\n+        accessTokenDAO.delete(key);\n+    }\n+\n+    @Override\n+    protected AccessTokenTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+\n+}"},{"sha":"af8a29f99cfe9b5d9fd78da62e3592cc5c8702b6","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/ReportLogic.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FReportLogic.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -137,8 +137,7 @@ public ReportTO update(final ReportTO reportTO) {\n \n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.REPORT_LIST + \"')\")\n     public List<ReportTO> list() {\n-        return CollectionUtils.collect(reportDAO.findAll(),\n-                new Transformer<Report, ReportTO>() {\n+        return CollectionUtils.collect(reportDAO.findAll(), new Transformer<Report, ReportTO>() {\n \n             @Override\n             public ReportTO transform(final Report input) {"},{"sha":"ef07ee64e2142fb47e32b005e0d9ba067e986d90","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AccessTokenDAO.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccessTokenDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccessTokenDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAccessTokenDAO.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+\n+public interface AccessTokenDAO extends DAO<AccessToken> {\n+\n+    AccessToken find(String key);\n+\n+    AccessToken findByOwner(String username);\n+\n+    int count();\n+\n+    List<AccessToken> findAll(int page, int itemsPerPage, List<OrderByClause> orderByClauses);\n+\n+    AccessToken save(AccessToken accessToken);\n+\n+    void delete(String key);\n+\n+    void delete(AccessToken accessToken);\n+\n+    int deleteExpired();\n+}"},{"sha":"e08e9e3aa74518c26b17483ae31d91134af9f1fe","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/AccessToken.java","status":"added","additions":36,"deletions":0,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FAccessToken.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,36 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.Date;\n+\n+public interface AccessToken extends ProvidedKeyEntity {\n+\n+    String getBody();\n+\n+    void setBody(String body);\n+\n+    Date getExpiryTime();\n+\n+    void setExpiryTime(Date expiryTime);\n+\n+    String getOwner();\n+\n+    void setOwner(String owner);\n+}"},{"sha":"01c53fd2786cc4176d4009278d99522ec5241c34","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAccessTokenDAO.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAccessTokenDAO.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.Date;\n+import java.util.List;\n+import javax.persistence.NoResultException;\n+import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAAccessToken;\n+import org.springframework.stereotype.Repository;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.util.ReflectionUtils;\n+\n+@Repository\n+public class JPAAccessTokenDAO extends AbstractDAO<AccessToken> implements AccessTokenDAO {\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public AccessToken find(final String key) {\n+        return entityManager().find(JPAAccessToken.class, key);\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public AccessToken findByOwner(final String username) {\n+        TypedQuery<AccessToken> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAAccessToken.class.getSimpleName() + \" e \"\n+                + \"WHERE e.owner=:username\", AccessToken.class);\n+        query.setParameter(\"username\", username);\n+\n+        AccessToken result = null;\n+        try {\n+            result = query.getSingleResult();\n+        } catch (NoResultException e) {\n+            LOG.debug(\"No token for user {} could be found\", username, e);\n+        }\n+\n+        return result;\n+    }\n+\n+    private StringBuilder buildFindAllQuery() {\n+        return new StringBuilder(\"SELECT e FROM \").\n+                append(JPAAccessToken.class.getSimpleName()).\n+                append(\" e WHERE 1=1\");\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public int count() {\n+        StringBuilder queryString = buildFindAllQuery();\n+\n+        Query query = entityManager().createQuery(StringUtils.replaceOnce(\n+                queryString.toString(), \"SELECT e\", \"SELECT COUNT(e)\"));\n+        return ((Number) query.getSingleResult()).intValue();\n+    }\n+\n+    private String toOrderByStatement(final List<OrderByClause> orderByClauses) {\n+        StringBuilder statement = new StringBuilder();\n+\n+        for (OrderByClause clause : orderByClauses) {\n+            String field = clause.getField().trim();\n+            if (ReflectionUtils.findField(JPAAccessToken.class, field) != null) {\n+                statement.append(\"e.\").append(field).append(' ').append(clause.getDirection().name());\n+            }\n+        }\n+\n+        if (statement.length() == 0) {\n+            statement.append(\"ORDER BY e.expiryTime DESC\");\n+        } else {\n+            statement.insert(0, \"ORDER BY \");\n+        }\n+        return statement.toString();\n+    }\n+\n+    @Transactional(readOnly = true)\n+    @Override\n+    public List<AccessToken> findAll(final int page, final int itemsPerPage, final List<OrderByClause> orderByClauses) {\n+        StringBuilder queryString = buildFindAllQuery().append(toOrderByStatement(orderByClauses));\n+\n+        TypedQuery<AccessToken> query = entityManager().createQuery(queryString.toString(), AccessToken.class);\n+\n+        query.setFirstResult(itemsPerPage * (page <= 0\n+                ? 0\n+                : page - 1));\n+\n+        if (itemsPerPage > 0) {\n+            query.setMaxResults(itemsPerPage);\n+        }\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    @Transactional(rollbackFor = Throwable.class)\n+    public AccessToken save(final AccessToken accessToken) {\n+        return entityManager().merge(accessToken);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        AccessToken accessToken = find(key);\n+        if (accessToken == null) {\n+            return;\n+        }\n+\n+        delete(accessToken);\n+    }\n+\n+    @Override\n+    public void delete(final AccessToken accessToken) {\n+        entityManager().remove(accessToken);\n+    }\n+\n+    @Override\n+    public int deleteExpired() {\n+        Query query = entityManager().createQuery(\n+                \"DELETE FROM \" + JPAAccessToken.class.getSimpleName() + \" e \"\n+                + \"WHERE e.expiryTime < :now\");\n+        query.setParameter(\"now\", new Date());\n+        return query.executeUpdate();\n+    }\n+}"},{"sha":"35801367710cca63d41c2860cf7fb3daf3ab5ecf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -50,13 +50,15 @@\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.apache.syncope.core.persistence.api.ImplementationLookup;\n import org.apache.syncope.core.persistence.api.attrvalue.validation.InvalidEntityException;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -95,6 +97,9 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n     @Autowired\n     private RoleDAO roleDAO;\n \n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n     @Autowired\n     private ImplementationLookup implementationLookup;\n \n@@ -424,6 +429,11 @@ public void delete(final User user) {\n             group.getUDynMembership().getMembers().remove(user);\n         }\n \n+        AccessToken accessToken = accessTokenDAO.findByOwner(user.getUsername());\n+        if (accessToken != null) {\n+            accessTokenDAO.delete(accessToken);\n+        }\n+\n         entityManager().remove(user);\n     }\n "},{"sha":"05464d66a2a7c898bff9ed64bb18b42f1bf6c718","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAAccessToken.java","status":"added","additions":83,"deletions":0,"changes":83,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAAccessToken.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,83 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import java.util.Date;\n+import javax.persistence.Cacheable;\n+import javax.persistence.Column;\n+import javax.persistence.Entity;\n+import javax.persistence.Lob;\n+import javax.persistence.Table;\n+import javax.persistence.Temporal;\n+import javax.persistence.TemporalType;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+\n+@Entity\n+@Table(name = JPAAccessToken.TABLE)\n+@Cacheable\n+public class JPAAccessToken extends AbstractProvidedKeyEntity implements AccessToken {\n+\n+    public static final String TABLE = \"AccessToken\";\n+\n+    private static final long serialVersionUID = -8734194815582467949L;\n+\n+    @Lob\n+    private String body;\n+\n+    @Temporal(TemporalType.TIMESTAMP)\n+    private Date expiryTime;\n+\n+    @Column(nullable = true)\n+    private String owner;\n+\n+    @Override\n+    public String getBody() {\n+        return body;\n+    }\n+\n+    @Override\n+    public void setBody(final String body) {\n+        this.body = body;\n+    }\n+\n+    @Override\n+    public Date getExpiryTime() {\n+        return expiryTime == null\n+                ? null\n+                : new Date(expiryTime.getTime());\n+    }\n+\n+    @Override\n+    public void setExpiryTime(final Date expiryTime) {\n+        this.expiryTime = expiryTime == null\n+                ? null\n+                : new Date(expiryTime.getTime());\n+    }\n+\n+    @Override\n+    public String getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final String owner) {\n+        this.owner = owner;\n+    }\n+\n+}"},{"sha":"7d9660cad34fb54ecf0dc8ae7ac97155e4044387","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPasswordPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAPullPolicy;\n import org.apache.syncope.core.persistence.jpa.entity.policy.JPAAccountPolicy;\n@@ -252,6 +253,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPAADynGroupMembership();\n         } else if (reference.equals(UDynGroupMembership.class)) {\n             result = (E) new JPAUDynGroupMembership();\n+        } else if (reference.equals(AccessToken.class)) {\n+            result = (E) new JPAAccessToken();\n         } else {\n             throw new IllegalArgumentException(\"Could not find a JPA implementation of \" + reference.getName());\n         }"},{"sha":"33d8a70fc6c318fb0f10b98de4b22f8501043566","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -142,6 +142,15 @@ under the License.\n               owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"identity.recertification.day.interval\"/>\n   <CPlainAttrValue id=\"e5fa94db-b524-4309-908d-8198d0b3f77b\"\n                    attribute_id=\"bcfd7efc-0605-4b5e-b4bb-85c1d5f64bbb\" longValue=\"-1\"/>\n+\n+  <!--  JWT lifetime in minutes -->                   \n+  <SyncopeSchema id=\"jwt.lifetime.minutes\"/>\n+  <PlainSchema id=\"jwt.lifetime.minutes\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"cfec3140-562d-459c-ac6a-e3e10758661d\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"jwt.lifetime.minutes\"/>\n+  <CPlainAttrValue id=\"447e2456-3ff5-41bc-8ff1-cbb0567546cb\"\n+                   attribute_id=\"cfec3140-562d-459c-ac6a-e3e10758661d\" longValue=\"120\"/>\n   \n   <AnyType id=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass id=\"BaseUser\"/>\n@@ -160,6 +169,10 @@ under the License.\n   <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec598989\" name=\"Identity Recertification Task\"  active=\"0\"\n         jobDelegateClassName=\"org.apache.syncope.core.provisioning.java.job.IdentityRecertification\"/>\n   \n+  <Task DTYPE=\"SchedTask\" id=\"89de5014-e3f5-4462-84d8-d97575740baf\" name=\"Access Token Cleanup Task\"  active=\"1\"\n+        jobDelegateClassName=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"\n+        cronExpression=\"0 0/5 * * * ?\"/>\n+\n   <!-- Password reset notifications -->\n   <MailTemplate id=\"requestPasswordReset\"\n                 textTemplate=\"Hi,"},{"sha":"78dd527ec862862d0d662c5b73cb91d343294ed8","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/MultitenancyTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FMultitenancyTest.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -83,7 +83,7 @@ public static void unsetAuthContext() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(11, plainSchemaDAO.findAll().size());\n+        assertEquals(13, plainSchemaDAO.findAll().size());\n     }\n \n     @Test"},{"sha":"f1d0f95c8cf12320e164c94ca694af20ddaef874","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/PlainSchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FPlainSchemaTest.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -47,7 +47,7 @@ public class PlainSchemaTest extends AbstractTest {\n     @Test\n     public void findAll() {\n         List<PlainSchema> schemas = plainSchemaDAO.findAll();\n-        assertEquals(40, schemas.size());\n+        assertEquals(41, schemas.size());\n     }\n \n     @Test"},{"sha":"e7f11658c51681353d7f14446472e208d7efaa9a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/TaskTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FTaskTest.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -97,7 +97,7 @@ public void findPaginated() {\n     public void findAll() {\n         assertEquals(5, taskDAO.findAll(TaskType.PROPAGATION).size());\n         assertEquals(1, taskDAO.findAll(TaskType.NOTIFICATION).size());\n-        assertEquals(2, taskDAO.findAll(TaskType.SCHEDULED).size());\n+        assertEquals(3, taskDAO.findAll(TaskType.SCHEDULED).size());\n         assertEquals(10, taskDAO.findAll(TaskType.PULL).size());\n         assertEquals(11, taskDAO.findAll(TaskType.PUSH).size());\n     }"},{"sha":"5f87771856bcee23e2eed05b3ee9417e0747dc1a","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AccessTokenTest.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAccessTokenTest.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.outer;\n+\n+import static org.junit.Assert.assertEquals;\n+import static org.junit.Assert.assertNotNull;\n+import static org.junit.Assert.assertNull;\n+\n+import java.util.Date;\n+import java.util.UUID;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.junit.Test;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+@Transactional(\"Master\")\n+public class AccessTokenTest extends AbstractTest {\n+\n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n+    @Test\n+    public void crud() {\n+        AccessToken accessToken = entityFactory.newEntity(AccessToken.class);\n+        accessToken.setKey(UUID.randomUUID().toString());\n+        accessToken.setBody(\"pointless body\");\n+        accessToken.setExpiryTime(new Date());\n+        accessToken.setOwner(\"bellini\");\n+\n+        accessToken = accessTokenDAO.save(accessToken);\n+        assertNotNull(accessToken);\n+\n+        accessTokenDAO.flush();\n+\n+        accessToken = accessTokenDAO.findByOwner(\"bellini\");\n+        assertNotNull(accessToken);\n+        assertEquals(\"bellini\", accessToken.getOwner());\n+\n+        accessTokenDAO.deleteExpired();\n+\n+        accessTokenDAO.flush();\n+\n+        accessToken = accessTokenDAO.findByOwner(\"bellini\");\n+        assertNull(accessToken);\n+    }\n+}"},{"sha":"e626c645f9381ca53c396f0988ced750803d4232","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -143,6 +143,15 @@ under the License.\n   <CPlainAttrValue id=\"e5fa94db-b524-4309-908d-8198d0b3f77b\"\n                    attribute_id=\"bcfd7efc-0605-4b5e-b4bb-85c1d5f64bbb\" longValue=\"365\"/>\n \n+  <!--  JWT lifetime in minutes -->                   \n+  <SyncopeSchema id=\"jwt.lifetime.minutes\"/>\n+  <PlainSchema id=\"jwt.lifetime.minutes\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"cfec3140-562d-459c-ac6a-e3e10758661d\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"jwt.lifetime.minutes\"/>\n+  <CPlainAttrValue id=\"447e2456-3ff5-41bc-8ff1-cbb0567546cb\"\n+                   attribute_id=\"cfec3140-562d-459c-ac6a-e3e10758661d\" longValue=\"120\"/>\n+\n   <!-- sample policies -->\n   <PullPolicy id=\"66691e96-285f-4464-bc19-e68384ea4c85\" description=\"a pull policy\"\n               specification='{\"conflictResolutionAction\":\"IGNORE\"}'/>\n@@ -1110,6 +1119,9 @@ under the License.\n         jobDelegateClassName=\"org.apache.syncope.fit.core.reference.TestSampleJobDelegate\" cronExpression=\"0 0 0 1 * ?\"/>\n   <Task DTYPE=\"SchedTask\" id=\"e95555d2-1b09-42c8-b25b-f4c4ec598989\" name=\"Identity Recertification Task\"  active=\"1\"\n         jobDelegateClassName=\"org.apache.syncope.core.provisioning.java.job.IdentityRecertification\"/>\n+  <Task DTYPE=\"SchedTask\" id=\"89de5014-e3f5-4462-84d8-d97575740baf\" name=\"Access Token Cleanup Task\"  active=\"1\"\n+        jobDelegateClassName=\"org.apache.syncope.core.provisioning.java.job.ExpiredAccessTokenCleanup\"\n+        cronExpression=\"0 0/5 * * * ?\"/>\n   <Task DTYPE=\"PropagationTask\" id=\"d6c2d6d3-6329-44c1-9187-f1469ead1cfa\" operation=\"UPDATE\"\n         objectClassName=\"__ACCOUNT__\" resource_id=\"ws-target-resource-nopropagation\" anyTypeKind=\"USER\" entityKey=\"1417acbe-cbf6-4277-9372-e75e04f97000\"\n         attributes='[{\"name\":\"__PASSWORD__\",\"value\":[{\"readOnly\":false,\"disposed\":false,\"encryptedBytes\":\"m9nh2US0Sa6m+cXccCq0Xw==\",\"base64SHA1Hash\":\"GFJ69qfjxEOdrmt+9q+0Cw2uz60=\"}]},{\"name\":\"__NAME__\",\"value\":[\"userId\"],\"nameValue\":\"userId\"},{\"name\":\"fullname\",\"value\":[\"fullname\"]},{\"name\":\"type\",\"value\":[\"type\"]}]'/>"},{"sha":"d4949d85e2cdb6f5d787c8edad9dd510504c5763","filename":"core/persistence-jpa/src/test/resources/domains/TwoContent.xml","status":"modified","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FTwoContent.xml?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -105,6 +105,24 @@ under the License.\n   <CPlainAttrValue id=\"e5fa94db-b524-4309-908d-8198d0b3f779\"\n                    attribute_id=\"bcfd7efc-0605-4b5e-b4bb-85c1d5f6493a\" booleanValue=\"0\"/>\n   \n+  <!-- Identity Recertification interval in days -->                   \n+  <SyncopeSchema id=\"identity.recertification.day.interval\"/>\n+  <PlainSchema id=\"identity.recertification.day.interval\" type=\"Long\"\n+               mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"bcfd7efc-0605-4b5e-b4bb-85c1d5f64bbb\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"identity.recertification.day.interval\"/>\n+  <CPlainAttrValue id=\"e5fa94db-b524-4309-908d-8198d0b3f77b\"\n+                   attribute_id=\"bcfd7efc-0605-4b5e-b4bb-85c1d5f64bbb\" longValue=\"-1\"/>\n+\n+  <!--  JWT lifetime in minutes -->                   \n+  <SyncopeSchema id=\"jwt.lifetime.minutes\"/>\n+  <PlainSchema id=\"jwt.lifetime.minutes\" type=\"Long\"\n+               mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <CPlainAttr id=\"cfec3140-562d-459c-ac6a-e3e10758661d\"\n+              owner_id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\" schema_id=\"jwt.lifetime.minutes\"/>\n+  <CPlainAttrValue id=\"447e2456-3ff5-41bc-8ff1-cbb0567546cb\"\n+                   attribute_id=\"cfec3140-562d-459c-ac6a-e3e10758661d\" longValue=\"120\"/>\n+\n   <AnyType id=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass id=\"BaseUser\"/>\n   <AnyType_AnyTypeClass anyType_id=\"USER\" anyTypeClass_id=\"BaseUser\"/>"},{"sha":"b06b4c2ba6f12f7fb21c36ff8676a85cf8e558a9","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/AccessTokenDataBinder.java","status":"added","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FAccessTokenDataBinder.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,33 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import java.util.Date;\n+import org.apache.syncope.common.lib.to.AccessTokenTO;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+\n+public interface AccessTokenDataBinder {\n+\n+    void create(String key, String body, Date expiryTime);\n+\n+    void update(AccessToken accessToken, String body, Date expiryTime);\n+\n+    AccessTokenTO getAccessTokenTO(AccessToken accessToken);\n+\n+}"},{"sha":"af999062c17893f0a984faf70973adda1380b5c1","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/serialization/POJOHelper.java","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fserialization%2FPOJOHelper.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.provisioning.api.serialization;\n \n import com.fasterxml.jackson.core.Version;\n+import com.fasterxml.jackson.core.type.TypeReference;\n import com.fasterxml.jackson.databind.ObjectMapper;\n import com.fasterxml.jackson.databind.module.SimpleModule;\n import com.fasterxml.jackson.module.afterburner.AfterburnerModule;\n@@ -75,6 +76,18 @@ public static <T extends Object> T deserialize(final String serialized, final Cl\n         return result;\n     }\n \n+    public static <T extends Object> T deserialize(final String serialized, final TypeReference<T> reference) {\n+        T result = null;\n+\n+        try {\n+            result = MAPPER.readValue(serialized, reference);\n+        } catch (Exception e) {\n+            LOG.error(\"During deserialization\", e);\n+        }\n+\n+        return result;\n+    }\n+\n     private POJOHelper() {\n     }\n }"},{"sha":"d15664c55125a2e35ff565f4a7738339818b8a8f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AccessTokenDataBinderImpl.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAccessTokenDataBinderImpl.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,70 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import java.util.Date;\n+import org.apache.syncope.common.lib.to.AccessTokenTO;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.provisioning.api.data.AccessTokenDataBinder;\n+import org.apache.syncope.core.spring.BeanUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+\n+@Component\n+public class AccessTokenDataBinderImpl implements AccessTokenDataBinder {\n+\n+    private static final String[] IGNORE_PROPERTIES = { \"owner\" };\n+\n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n+    @Autowired\n+    private EntityFactory entityFactory;\n+\n+    @Override\n+    public void create(final String key, final String body, final Date expiryTime) {\n+        AccessToken accessToken = entityFactory.newEntity(AccessToken.class);\n+        accessToken.setKey(key);\n+        accessToken.setBody(body);\n+        accessToken.setExpiryTime(expiryTime);\n+        accessToken.setOwner(AuthContextUtils.getUsername());\n+\n+        accessTokenDAO.save(accessToken);\n+    }\n+\n+    @Override\n+    public void update(final AccessToken accessToken, final String body, final Date expiryTime) {\n+        accessToken.setBody(body);\n+        accessToken.setExpiryTime(expiryTime);\n+\n+        accessTokenDAO.save(accessToken);\n+    }\n+\n+    @Override\n+    public AccessTokenTO getAccessTokenTO(final AccessToken accessToken) {\n+        AccessTokenTO accessTokenTO = new AccessTokenTO();\n+        BeanUtils.copyProperties(accessToken, accessTokenTO, IGNORE_PROPERTIES);\n+        accessTokenTO.setOwner(accessToken.getOwner());\n+\n+        return accessTokenTO;\n+    }\n+}"},{"sha":"fe21b516743a6daebd3e16b21d24b2e820853f80","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -48,6 +48,7 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.ResourceOperation;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\n import org.apache.syncope.core.persistence.api.dao.SecurityQuestionDAO;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -61,6 +62,7 @@\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -99,6 +101,9 @@ public class UserDataBinderImpl extends AbstractAnyDataBinder implements UserDat\n     @Autowired\n     private AnyTypeDAO anyTypeDAO;\n \n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n     @Resource(name = \"adminUser\")\n     private String adminUser;\n \n@@ -338,6 +343,12 @@ public PropagationByResource update(final User toBeUpdated, final UserPatch user\n                 AuthContextUtils.updateUsername(userPatch.getUsername().getValue());\n             }\n \n+            AccessToken accessToken = accessTokenDAO.findByOwner(oldUsername);\n+            if (accessToken != null) {\n+                accessToken.setOwner(userPatch.getUsername().getValue());\n+                accessTokenDAO.save(accessToken);\n+            }\n+\n             propByRes.addAll(ResourceOperation.UPDATE, currentResources);\n         }\n "},{"sha":"1e4ac03f05485a24ee1830891f5bb12bf7a9e87d","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/ExpiredAccessTokenCleanup.java","status":"added","additions":42,"deletions":0,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredAccessTokenCleanup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredAccessTokenCleanup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FExpiredAccessTokenCleanup.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,42 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.job;\n+\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n+import org.quartz.JobExecutionException;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+public class ExpiredAccessTokenCleanup extends AbstractSchedTaskJobDelegate {\n+\n+    @Autowired\n+    private AccessTokenDAO accessTokenDAO;\n+\n+    @Override\n+    protected String doExecute(final boolean dryRun) throws JobExecutionException {\n+        if (!dryRun) {\n+            int deleted = accessTokenDAO.deleteExpired();\n+            LOG.debug(\"Successfully deleted {} expired access tokens\", deleted);\n+        }\n+\n+        return (dryRun\n+                ? \"DRY \"\n+                : \"\") + \"RUNNING\";\n+    }\n+\n+}"},{"sha":"36e59a2a30fa13eae18e215812712e9eb395b3d5","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/IdentityRecertification.java","status":"modified","additions":15,"deletions":6,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2FIdentityRecertification.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -18,10 +18,13 @@\n  */\r\n package org.apache.syncope.core.provisioning.java.job;\r\n \r\n+import java.util.Collections;\r\n import java.util.Date;\r\n import org.apache.commons.lang3.StringUtils;\r\n+import org.apache.syncope.common.lib.SyncopeConstants;\r\n import org.apache.syncope.core.persistence.api.dao.ConfDAO;\r\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\r\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\r\n import org.apache.syncope.core.persistence.api.entity.conf.CPlainAttr;\r\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\r\n import org.apache.syncope.core.persistence.api.entity.user.User;\r\n@@ -33,6 +36,8 @@ public class IdentityRecertification extends AbstractSchedTaskJobDelegate {\n \r\n     private static final String RECERTIFICATION_TIME = \"identity.recertification.day.interval\";\r\n \r\n+    private static final int PAGE_SIZE = 10;\r\n+\r\n     @Autowired\r\n     private ConfDAO confDAO;\r\n \r\n@@ -88,13 +93,17 @@ protected String doExecute(final boolean dryRun) throws JobExecutionException {\n             return (\"IDENTITY RECERTIFICATION DISABLED\");\r\n         }\r\n \r\n-        for (User user : userDAO.findAll()) {\r\n-            LOG.debug(\"Processing user: {}\", user.getUsername());\r\n+        for (int page = 1; page <= (userDAO.count() / PAGE_SIZE) + 1; page++) {\r\n+            for (User user : userDAO.findAll(\r\n+                    SyncopeConstants.FULL_ADMIN_REALMS, page, PAGE_SIZE, Collections.<OrderByClause>emptyList())) {\r\n \r\n-            if (StringUtils.isNotBlank(user.getWorkflowId()) && isToBeRecertified(user) && !dryRun) {\r\n-                uwfAdapter.requestCertify(user);\r\n-            } else {\r\n-                LOG.warn(\"Workflow for {} is null or empty\", user);\r\n+                LOG.debug(\"Processing user: {}\", user.getUsername());\r\n+\r\n+                if (StringUtils.isNotBlank(user.getWorkflowId()) && isToBeRecertified(user) && !dryRun) {\r\n+                    uwfAdapter.requestCertify(user);\r\n+                } else {\r\n+                    LOG.warn(\"Workflow for {} is null or empty\", user);\r\n+                }\r\n             }\r\n         }\r\n \r"},{"sha":"2b19add31a44c4788cada19560a9514e32c0335d","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AccessTokenServiceImpl.java","status":"added","additions":73,"deletions":0,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAccessTokenServiceImpl.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,73 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.AccessTokenTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.beans.AccessTokenQuery;\n+import org.springframework.stereotype.Service;\n+import org.apache.syncope.common.rest.api.service.AccessTokenService;\n+import org.apache.syncope.core.logic.AccessTokenLogic;\n+import org.springframework.beans.factory.annotation.Autowired;\n+\n+@Service\n+public class AccessTokenServiceImpl extends AbstractServiceImpl implements AccessTokenService {\n+\n+    @Autowired\n+    private AccessTokenLogic logic;\n+\n+    @Override\n+    public Response login() {\n+        return Response.noContent().\n+                header(RESTHeaders.TOKEN, logic.login(messageContext.getHttpServletRequest().getRemoteHost())).\n+                build();\n+    }\n+\n+    @Override\n+    public Response refresh() {\n+        return Response.noContent().\n+                header(RESTHeaders.TOKEN, logic.refresh()).\n+                build();\n+    }\n+\n+    @Override\n+    public void logout() {\n+        logic.logout();\n+    }\n+\n+    @Override\n+    public PagedResult<AccessTokenTO> list(final AccessTokenQuery query) {\n+        return buildPagedResult(\n+                logic.list(\n+                        query.getPage(),\n+                        query.getSize(),\n+                        getOrderByClauses(query.getOrderBy())),\n+                query.getPage(),\n+                query.getSize(),\n+                logic.count());\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+\n+}"},{"sha":"d92d4e028b08d4fc1672250540761902b46cb975","filename":"core/spring/pom.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fpom.xml?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -54,6 +54,11 @@ under the License.\n       <artifactId>jasypt</artifactId>\n     </dependency>\n     \n+    <dependency>\n+      <groupId>org.apache.cxf</groupId>\n+      <artifactId>cxf-rt-rs-security-jose</artifactId>\n+    </dependency>\n+\n     <dependency>\n       <groupId>org.springframework.security</groupId>\n       <artifactId>spring-security-core</artifactId>"},{"sha":"af859852819083c6cec270b20c400daf6960a176","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":92,"deletions":14,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -35,9 +35,11 @@\n import org.apache.commons.collections4.Transformer;\n import org.apache.commons.lang3.tuple.ImmutablePair;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n+import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n@@ -48,6 +50,7 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -57,14 +60,17 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.ConnectorFactory;\n+import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.MappingManager;\n import org.identityconnectors.framework.common.objects.Uid;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.AuthenticationCredentialsNotFoundException;\n import org.springframework.security.authentication.AuthenticationServiceException;\n import org.springframework.security.authentication.DisabledException;\n import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n import org.springframework.transaction.annotation.Transactional;\n \n /**\n@@ -79,6 +85,9 @@ public class AuthDataAccessor {\n \n     protected static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n \n+    protected static final Set<SyncopeGrantedAuthority> ANONYMOUS_AUTHORITIES =\n+            Collections.singleton(new SyncopeGrantedAuthority(StandardEntitlement.ANONYMOUS));\n+\n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n \n@@ -106,6 +115,9 @@ public class AuthDataAccessor {\n     @Autowired\n     protected AnySearchDAO searchDAO;\n \n+    @Autowired\n+    protected AccessTokenDAO accessTokenDAO;\n+\n     @Autowired\n     protected ConnectorFactory connFactory;\n \n@@ -170,7 +182,7 @@ public Pair<User, Boolean> authenticate(final Authentication authentication) {\n             }\n \n             boolean userModified = false;\n-            authenticated = authenticate(user, authentication.getCredentials().toString());\n+            authenticated = AuthDataAccessor.this.authenticate(user, authentication.getCredentials().toString());\n             if (authenticated) {\n                 if (confDAO.find(\"log.lastlogindate\", Boolean.toString(true)).getValues().get(0).getBooleanValue()) {\n                     user.setLastLoginDate(new Date());\n@@ -249,23 +261,20 @@ protected Set<? extends ExternalResource> getPassthroughResources(final User use\n         return SetUtils.emptyIfNull(result);\n     }\n \n-    @Transactional(readOnly = true)\n-    public void audit(\n-            final AuditElements.EventCategoryType type,\n-            final String category,\n-            final String subcategory,\n-            final String event,\n-            final AuditElements.Result result,\n-            final Object before,\n-            final Object output,\n-            final Object... input) {\n+    protected Set<SyncopeGrantedAuthority> getAdminAuthorities() {\n+        return CollectionUtils.collect(EntitlementsHolder.getInstance().getValues(),\n+                new Transformer<String, SyncopeGrantedAuthority>() {\n \n-        auditManager.audit(type, category, subcategory, event, result, before, output, input);\n+            @Override\n+            public SyncopeGrantedAuthority transform(final String entitlement) {\n+                return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n+            }\n+        }, new HashSet<SyncopeGrantedAuthority>());\n     }\n \n-    @Transactional\n-    public Set<SyncopeGrantedAuthority> getAuthorities(final User user) {\n+    protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n         Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n+\n         if (user.isMustChangePassword()) {\n             authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.MUST_CHANGE_PASSWORD));\n         } else {\n@@ -322,4 +331,73 @@ public String transform(final Realm realm) {\n \n         return authorities;\n     }\n+\n+    @Transactional\n+    public Set<SyncopeGrantedAuthority> getAuthorities(final String username) {\n+        Set<SyncopeGrantedAuthority> authorities;\n+\n+        if (anonymousUser.equals(username)) {\n+            authorities = ANONYMOUS_AUTHORITIES;\n+        } else if (adminUser.equals(username)) {\n+            authorities = getAdminAuthorities();\n+        } else {\n+            User user = userDAO.findByUsername(username);\n+            if (user == null) {\n+                throw new UsernameNotFoundException(\"Could not find any user with id \" + username);\n+            }\n+\n+            authorities = getUserAuthorities(user);\n+        }\n+\n+        return authorities;\n+    }\n+\n+    @Transactional\n+    public Set<SyncopeGrantedAuthority> authenticate(final JWTAuthentication authentication) {\n+        AccessToken accessToken = accessTokenDAO.find(authentication.getClaims().getTokenId());\n+        if (accessToken == null) {\n+            throw new AuthenticationCredentialsNotFoundException(\n+                    \"Could not find JWT \" + authentication.getClaims().getTokenId());\n+        }\n+\n+        Set<SyncopeGrantedAuthority> authorities;\n+        if (adminUser.equals(accessToken.getOwner())) {\n+            authorities = getAdminAuthorities();\n+        } else {\n+            User user = userDAO.findByUsername(accessToken.getOwner());\n+            if (user == null) {\n+                throw new AuthenticationCredentialsNotFoundException(\n+                        \"Could not find user \" + accessToken.getOwner()\n+                        + \" for JWT \" + authentication.getClaims().getTokenId());\n+            }\n+\n+            if (user.isSuspended() != null && user.isSuspended()) {\n+                throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n+            }\n+\n+            CPlainAttr authStatuses = confDAO.find(\"authentication.statuses\");\n+            if (authStatuses != null && !authStatuses.getValuesAsStrings().contains(user.getStatus())) {\n+                throw new DisabledException(\"User \" + user.getUsername() + \" not allowed to authenticate\");\n+            }\n+\n+            authorities = getUserAuthorities(user);\n+        }\n+\n+        return authorities;\n+    }\n+\n+    @Transactional(readOnly = true)\n+    public void audit(\n+            final AuditElements.EventCategoryType type,\n+            final String category,\n+            final String subcategory,\n+            final String event,\n+            final AuditElements.Result result,\n+            final Object before,\n+            final Object output,\n+            final Object... input) {\n+\n+        auditManager.audit(type, category, subcategory, event, result, before, output, input);\n+    }\n+\n }"},{"sha":"734893846cca3d994cdda14ed18514447aaca38e","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthentication.java","status":"added","additions":88,"deletions":0,"changes":88,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthentication.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,88 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import java.util.Collection;\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.springframework.security.core.Authentication;\n+\n+/**\n+ * Represents the token for an authentication request or for an authenticated principal as JSON Web Token,\n+ * once the request has been processed by the\n+ * {@link org.springframework.security.authentication.AuthenticationManager#authenticate(Authentication)} method.\n+ */\n+public class JWTAuthentication implements Authentication {\n+\n+    private static final long serialVersionUID = -2013733709281305394L;\n+\n+    private final JwtClaims claims;\n+\n+    private final SyncopeAuthenticationDetails details;\n+\n+    private final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n+\n+    private boolean authenticated = false;\n+\n+    public JWTAuthentication(final JwtClaims claims, final SyncopeAuthenticationDetails details) {\n+        this.claims = claims;\n+        this.details = details;\n+    }\n+\n+    public JwtClaims getClaims() {\n+        return claims;\n+    }\n+\n+    @Override\n+    public Collection<SyncopeGrantedAuthority> getAuthorities() {\n+        return authorities;\n+    }\n+\n+    @Override\n+    public Object getCredentials() {\n+        return StringUtils.EMPTY;\n+    }\n+\n+    @Override\n+    public SyncopeAuthenticationDetails getDetails() {\n+        return details;\n+    }\n+\n+    @Override\n+    public Object getPrincipal() {\n+        return claims.getSubject();\n+    }\n+\n+    @Override\n+    public boolean isAuthenticated() {\n+        return authenticated;\n+    }\n+\n+    @Override\n+    public void setAuthenticated(final boolean authenticated) throws IllegalArgumentException {\n+        this.authenticated = authenticated;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return claims.getSubject();\n+    }\n+}"},{"sha":"c1520fa5e8aaa54ba7a53f32ecd67465f11b8777","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationFilter.java","status":"added","additions":108,"deletions":0,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationFilter.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,108 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import java.io.IOException;\n+import javax.servlet.FilterChain;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.cxf.rs.security.jose.jws.JwsJwtCompactConsumer;\n+import org.apache.cxf.rs.security.jose.jws.JwsSignatureVerifier;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.AuthenticationManager;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.security.web.AuthenticationEntryPoint;\n+import org.springframework.util.Assert;\n+import org.springframework.web.filter.OncePerRequestFilter;\n+\n+/**\n+ * Processes the JSON Web Token provided as {@link RESTHeaders#TOKEN} HTTP header, putting the result into the\n+ * {@link SecurityContextHolder}.\n+ */\n+public class JWTAuthenticationFilter extends OncePerRequestFilter {\n+\n+    private static final Logger LOG = LoggerFactory.getLogger(JWTAuthenticationFilter.class);\n+\n+    private AuthenticationEntryPoint authenticationEntryPoint;\n+\n+    private AuthenticationManager authenticationManager;\n+\n+    private SyncopeAuthenticationDetailsSource authenticationDetailsSource;\n+\n+    @Autowired\n+    private JwsSignatureVerifier jwsSignatureCerifier;\n+\n+    public void setAuthenticationEntryPoint(final AuthenticationEntryPoint authenticationEntryPoint) {\n+        this.authenticationEntryPoint = authenticationEntryPoint;\n+    }\n+\n+    public void setAuthenticationManager(final AuthenticationManager authenticationManager) {\n+        this.authenticationManager = authenticationManager;\n+    }\n+\n+    public void setAuthenticationDetailsSource(final SyncopeAuthenticationDetailsSource authenticationDetailsSource) {\n+        this.authenticationDetailsSource = authenticationDetailsSource;\n+    }\n+\n+    @Override\n+    public void afterPropertiesSet() {\n+        Assert.notNull(this.authenticationEntryPoint, \"An AuthenticationEntryPoint is required\");\n+        Assert.notNull(this.authenticationManager, \"An AuthenticationManager is required\");\n+        Assert.notNull(this.authenticationDetailsSource, \"AuthenticationDetailsSource required\");\n+    }\n+\n+    @Override\n+    protected void doFilterInternal(\n+            final HttpServletRequest request,\n+            final HttpServletResponse response,\n+            final FilterChain chain)\n+            throws ServletException, IOException {\n+\n+        String stringToken = request.getHeader(RESTHeaders.TOKEN);\n+        if (stringToken == null) {\n+            chain.doFilter(request, response);\n+            return;\n+        }\n+\n+        LOG.debug(\"JWT receveid: {}\", stringToken);\n+\n+        JwsJwtCompactConsumer consumer = new JwsJwtCompactConsumer(stringToken);\n+        try {\n+            if (!consumer.verifySignatureWith(jwsSignatureCerifier)) {\n+                throw new BadCredentialsException(\"Invalid signature found in JWT\");\n+            }\n+\n+            Authentication authentication = authenticationManager.authenticate(\n+                    new JWTAuthentication(consumer.getJwtClaims(), authenticationDetailsSource.buildDetails(request)));\n+            SecurityContextHolder.getContext().setAuthentication(authentication);\n+\n+            chain.doFilter(request, response);\n+        } catch (AuthenticationException e) {\n+            SecurityContextHolder.clearContext();\n+            this.authenticationEntryPoint.commence(request, response, e);\n+        }\n+    }\n+}"},{"sha":"9686fd72398dc88e1228f88e44bf87b53435d5ea","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/JWTAuthenticationProvider.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FJWTAuthenticationProvider.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import java.util.Date;\n+import javax.annotation.Resource;\n+import org.apache.cxf.rs.security.jose.jwt.JwtClaims;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.AuthenticationProvider;\n+import org.springframework.security.authentication.BadCredentialsException;\n+import org.springframework.security.authentication.CredentialsExpiredException;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+\n+/**\n+ * Attempts to authenticate the passed {@link JWTAuthentication} object, returning a fully populated\n+ * {@link Authentication} object (including granted authorities) if successful.\n+ */\n+public class JWTAuthenticationProvider implements AuthenticationProvider {\n+\n+    @Resource(name = \"jwtIssuer\")\n+    private String jwtIssuer;\n+\n+    @Autowired\n+    private AuthDataAccessor dataAccessor;\n+\n+    @Override\n+    public Authentication authenticate(final Authentication authentication) throws AuthenticationException {\n+        final JWTAuthentication jwtAuthentication = (JWTAuthentication) authentication;\n+\n+        AuthContextUtils.execWithAuthContext(\n+                jwtAuthentication.getDetails().getDomain(),\n+                new AuthContextUtils.Executable<Void>() {\n+\n+            @Override\n+            public Void exec() {\n+                jwtAuthentication.getAuthorities().addAll(dataAccessor.authenticate(jwtAuthentication));\n+                return null;\n+            }\n+        });\n+\n+        JwtClaims claims = jwtAuthentication.getClaims();\n+        Long referenceTime = new Date().getTime();\n+\n+        Long expiryTime = claims.getExpiryTime();\n+        if (expiryTime == null || expiryTime < referenceTime) {\n+            throw new CredentialsExpiredException(\"JWT is expired\");\n+        }\n+\n+        Long notBefore = claims.getNotBefore();\n+        if (notBefore == null || notBefore > referenceTime) {\n+            throw new CredentialsExpiredException(\"JWT not valid yet\");\n+        }\n+\n+        if (!jwtIssuer.equals(claims.getIssuer())) {\n+            throw new BadCredentialsException(\"Invalid JWT issuer\");\n+        }\n+\n+        if (!claims.containsProperty(SyncopeConstants.JWT_CLAIM_REMOTE_HOST)\n+                || !claims.getClaim(SyncopeConstants.JWT_CLAIM_REMOTE_HOST).\n+                        equals(jwtAuthentication.getDetails().getRemoteHost())) {\n+\n+            throw new BadCredentialsException(\"Unexpected property found in JWT\");\n+        }\n+\n+        jwtAuthentication.setAuthenticated(true);\n+        return jwtAuthentication;\n+    }\n+\n+    @Override\n+    public boolean supports(final Class<?> authentication) {\n+        return JWTAuthentication.class.isAssignableFrom(authentication);\n+    }\n+}"},{"sha":"d2080aacd497689168a9b6890912635d41ffdcd9","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationDetails.java","status":"modified","additions":11,"deletions":23,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeAuthenticationDetails.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -20,52 +20,40 @@\n \n import java.io.Serializable;\n import javax.servlet.http.HttpServletRequest;\n-import javax.servlet.http.HttpSession;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n import org.apache.commons.lang3.builder.ReflectionToStringBuilder;\n import org.apache.commons.lang3.builder.ToStringStyle;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n \n public class SyncopeAuthenticationDetails implements Serializable {\n \n     private static final long serialVersionUID = -5899959397393502897L;\n \n-    private final String remoteAddress;\n+    private final String remoteHost;\n \n-    private final String sessionId;\n-\n-    private String domain;\n+    private final String domain;\n \n     public SyncopeAuthenticationDetails(final HttpServletRequest request) {\n-        this.remoteAddress = request.getRemoteAddr();\n-\n-        HttpSession session = request.getSession(false);\n-        this.sessionId = session == null ? null : session.getId();\n-\n         this.domain = request.getHeader(RESTHeaders.DOMAIN);\n+        this.remoteHost = request.getRemoteHost();\n     }\n \n     public SyncopeAuthenticationDetails(final String domain) {\n-        this.remoteAddress = null;\n-        this.sessionId = null;\n         this.domain = domain;\n-    }\n-\n-    public String getRemoteAddress() {\n-        return remoteAddress;\n-    }\n-\n-    public String getSessionId() {\n-        return sessionId;\n+        this.remoteHost = null;\n     }\n \n     public String getDomain() {\n-        return domain;\n+        return StringUtils.isBlank(domain)\n+                ? SyncopeConstants.MASTER_DOMAIN\n+                : domain;\n     }\n \n-    public void setDomain(final String domain) {\n-        this.domain = domain;\n+    public String getRemoteHost() {\n+        return remoteHost;\n     }\n \n     @Override"},{"sha":"79b33c5f60854c6ad8772bd0b9a5b16dab8b004f","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeDigestAuthenticationEntryPoint.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeDigestAuthenticationEntryPoint.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeDigestAuthenticationEntryPoint.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeDigestAuthenticationEntryPoint.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -0,0 +1,43 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.spring.security;\n+\n+import java.io.IOException;\n+import javax.servlet.ServletException;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.web.authentication.www.DigestAuthenticationEntryPoint;\n+\n+/**\n+ * Render Spring's {@link AuthenticationException} as other Syncope errors.\n+ */\n+public class SyncopeDigestAuthenticationEntryPoint extends DigestAuthenticationEntryPoint {\n+\n+    @Override\n+    public void commence(final HttpServletRequest request, final HttpServletResponse response,\n+            final AuthenticationException authException) throws IOException, ServletException {\n+\n+        response.addHeader(RESTHeaders.ERROR_INFO, authException.getMessage());\n+\n+        super.commence(request, response, authException);\n+    }\n+\n+}"},{"sha":"578dd354b9b0fb2c6df1b14578ff1a347f9e3602","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeGrantedAuthority.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FSyncopeGrantedAuthority.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -18,6 +18,9 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n+import com.fasterxml.jackson.annotation.JsonCreator;\n+import com.fasterxml.jackson.annotation.JsonIgnore;\n+import com.fasterxml.jackson.annotation.JsonProperty;\n import java.util.Collection;\n import java.util.Collections;\n import java.util.HashSet;\n@@ -36,11 +39,13 @@ public class SyncopeGrantedAuthority implements GrantedAuthority {\n \n     private static final long serialVersionUID = -5647624636011919735L;\n \n+    @JsonProperty\n     private final String entitlement;\n \n     private final Set<String> realms = SetUtils.orderedSet(new HashSet<String>());\n \n-    public SyncopeGrantedAuthority(final String entitlement) {\n+    @JsonCreator\n+    public SyncopeGrantedAuthority(@JsonProperty(\"entitlement\") final String entitlement) {\n         this.entitlement = entitlement;\n     }\n \n@@ -67,6 +72,7 @@ public Set<String> getRealms() {\n         return Collections.unmodifiableSet(realms);\n     }\n \n+    @JsonIgnore\n     @Override\n     public String getAuthority() {\n         return entitlement;"},{"sha":"83a03c39b1074fdb266b6fe5b286f0089dafa991","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/UsernamePasswordAuthenticationProvider.java","status":"renamed","additions":10,"deletions":35,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FUsernamePasswordAuthenticationProvider.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -18,22 +18,15 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import java.util.HashSet;\n-import java.util.Set;\n import javax.annotation.Resource;\n-import org.apache.commons.collections4.CollectionUtils;\n-import org.apache.commons.collections4.Transformer;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.AuditElements.Result;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n-import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.core.spring.security.AuthContextUtils.Executable;\n import org.apache.syncope.core.persistence.api.entity.Domain;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n-import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.core.provisioning.api.UserProvisioningManager;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -45,9 +38,9 @@\n import org.springframework.security.core.Authentication;\n \n @Configurable\n-public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n+public class UsernamePasswordAuthenticationProvider implements AuthenticationProvider {\n \n-    protected static final Logger LOG = LoggerFactory.getLogger(SyncopeAuthenticationProvider.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(UsernamePasswordAuthenticationProvider.class);\n \n     @Autowired\n     protected AuthDataAccessor dataAccessor;\n@@ -58,13 +51,16 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n \n-    @Resource(name = \"anonymousUser\")\n-    protected String anonymousUser;\n-\n+    @Resource(name = \"adminPassword\")\n     protected String adminPassword;\n \n+    @Resource(name = \"adminPasswordAlgorithm\")\n     protected String adminPasswordAlgorithm;\n \n+    @Resource(name = \"anonymousUser\")\n+    protected String anonymousUser;\n+\n+    @Resource(name = \"anonymousKey\")\n     protected String anonymousKey;\n \n     protected final Encryptor encryptor = Encryptor.getInstance();\n@@ -93,21 +89,13 @@ public void setAnonymousKey(final String anonymousKey) {\n     @Override\n     public Authentication authenticate(final Authentication authentication) {\n         String domainKey = SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).getDomain();\n-        if (StringUtils.isBlank(domainKey)) {\n-            domainKey = SyncopeConstants.MASTER_DOMAIN;\n-        }\n-        SyncopeAuthenticationDetails.class.cast(authentication.getDetails()).setDomain(domainKey);\n \n         final String[] username = new String[1];\n         Boolean authenticated;\n-        final Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n \n         if (anonymousUser.equals(authentication.getName())) {\n             username[0] = anonymousUser;\n             authenticated = authentication.getCredentials().toString().equals(anonymousKey);\n-            if (authenticated) {\n-                authorities.add(new SyncopeGrantedAuthority(StandardEntitlement.ANONYMOUS));\n-            }\n         } else if (adminUser.equals(authentication.getName())) {\n             username[0] = adminUser;\n             if (SyncopeConstants.MASTER_DOMAIN.equals(domainKey)) {\n@@ -131,17 +119,6 @@ public Boolean exec() {\n                     }\n                 });\n             }\n-            if (authenticated) {\n-                CollectionUtils.collect(\n-                        EntitlementsHolder.getInstance().getValues(),\n-                        new Transformer<String, SyncopeGrantedAuthority>() {\n-\n-                    @Override\n-                    public SyncopeGrantedAuthority transform(final String entitlement) {\n-                        return new SyncopeGrantedAuthority(entitlement, SyncopeConstants.ROOT_REALM);\n-                    }\n-                }, authorities);\n-            }\n         } else {\n             final Pair<User, Boolean> authResult =\n                     AuthContextUtils.execWithAuthContext(domainKey, new Executable<Pair<User, Boolean>>() {\n@@ -155,9 +132,7 @@ public Pair<User, Boolean> exec() {\n             if (authResult.getLeft() != null && authResult.getRight() != null) {\n                 username[0] = authResult.getLeft().getUsername();\n \n-                if (authResult.getRight()) {\n-                    authorities.addAll(dataAccessor.getAuthorities(authResult.getLeft()));\n-                } else {\n+                if (!authResult.getRight()) {\n                     AuthContextUtils.execWithAuthContext(domainKey, new Executable<Void>() {\n \n                         @Override\n@@ -184,7 +159,7 @@ public UsernamePasswordAuthenticationToken exec() {\n                     UsernamePasswordAuthenticationToken token = new UsernamePasswordAuthenticationToken(\n                             username[0],\n                             null,\n-                            authorities);\n+                            dataAccessor.getAuthorities(username[0]));\n                     token.setDetails(authentication.getDetails());\n \n                     dataAccessor.audit(AuditElements.EventCategoryType.LOGIC,","previous_filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/SyncopeAuthenticationProvider.java"},{"sha":"d4f892b3880dc25d5d01c2e999694a0164af9721","filename":"core/spring/src/main/resources/security.properties","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -22,6 +22,10 @@ anonymousUser=${anonymousUser}\n anonymousKey=${anonymousKey}\n \n secretKey=${secretKey}\n+\n+jwsKey=ZW7pRixehFuNUtnY5Se47IemgMryTzazPPJ9CGX5LTCmsOJpOgHAQEuPQeV9A28f\n+jwtIssuer=ApacheSyncope\n+\n # default for LDAP / RFC2307 SSHA\n digester.saltIterations=1\n digester.saltSizeBytes=8"},{"sha":"809b78d886721334f9ca7f9f84b5d9da4024dfd7","filename":"core/spring/src/main/resources/securityContext.xml","status":"modified","additions":63,"deletions":27,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -28,53 +28,89 @@ under the License.\n   <bean id=\"adminUser\" class=\"java.lang.String\">\n     <constructor-arg value=\"${adminUser}\"/>\n   </bean>\n+  <bean id=\"adminPassword\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${adminPassword}\"/>\n+  </bean>\n+  <bean id=\"adminPasswordAlgorithm\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${adminPasswordAlgorithm}\"/>\n+  </bean>\n+\n   <bean id=\"anonymousUser\" class=\"java.lang.String\">\n     <constructor-arg value=\"${anonymousUser}\"/>\n   </bean>\n+  <bean id=\"anonymousKey\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${anonymousKey}\"/>\n+  </bean>\n+  \n+  <bean id=\"jwtIssuer\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${jwtIssuer}\"/>\n+  </bean>\n+  <bean id=\"jwsKey\" class=\"java.lang.String\">\n+    <constructor-arg value=\"${jwsKey}\"/>\n+  </bean>\n+  <bean id=\"jwsSignatureVerifier\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureVerifier\">\n+    <constructor-arg value=\"${jwsKey}.bytes\" index=\"0\"/>\n+    <constructor-arg index=\"1\">\n+      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">HS512</value>\n+    </constructor-arg>\n+  </bean>\n+  <bean id=\"jwsSignatureProvider\" class=\"org.apache.cxf.rs.security.jose.jws.HmacJwsSignatureProvider\">\n+    <constructor-arg value=\"${jwsKey}.bytes\" index=\"0\"/>\n+    <constructor-arg index=\"1\">\n+      <value type=\"org.apache.cxf.rs.security.jose.jwa.SignatureAlgorithm\">HS512</value>\n+    </constructor-arg>\n+  </bean>\n   \n   <bean class=\"${passwordGenerator}\"/>\n   <bean class=\"org.apache.syncope.core.spring.DefaultRolesPrefixPostProcessor\"/>\n   \n   <security:global-method-security pre-post-annotations=\"enabled\"/>\n   \n+  <bean id=\"securityContextRepository\" class='org.springframework.security.web.context.NullSecurityContextRepository'/>\n+  <bean id=\"securityContextPersistenceFilter\"\n+        class=\"org.springframework.security.web.context.SecurityContextPersistenceFilter\">\n+    <constructor-arg ref=\"securityContextRepository\"/>\n+  </bean>\n+\n   <bean id=\"filterChainProxy\" class=\"org.springframework.security.web.FilterChainProxy\">\n     <security:filter-chain-map request-matcher=\"ant\">\n       <security:filter-chain pattern=\"/**\" filters=\"securityContextPersistenceFilter\"/>\n     </security:filter-chain-map>\n-  </bean>\n-  \n-  <bean id=\"securityContextRepository\" class='org.springframework.security.web.context.NullSecurityContextRepository'/>\n+  </bean>  \n \n-  <bean id=\"securityContextPersistenceFilter\"\n-        class=\"org.springframework.security.web.context.SecurityContextPersistenceFilter\">\n-    <constructor-arg ref=\"securityContextRepository\"/>\n+  <bean id=\"firewall\" class=\"org.springframework.security.web.firewall.DefaultHttpFirewall\">\n+    <property name=\"allowUrlEncodedSlash\" value=\"true\"/>\n   </bean>\n+  <security:http-firewall ref=\"firewall\"/>\n \n-  <bean id=\"syncopeAuthenticationDetailsSource\"\n+  <bean id=\"authenticationDetailsSource\"\n         class=\"org.apache.syncope.core.spring.security.SyncopeAuthenticationDetailsSource\"/>\n-\n-  <bean id=\"mustChangePasswordFilter\" class=\"org.apache.syncope.core.spring.security.MustChangePasswordFilter\"/>\n       \n   <bean id=\"basicAuthenticationEntryPoint\" \n         class=\"org.apache.syncope.core.spring.security.SyncopeBasicAuthenticationEntryPoint\">\n     <property name=\"realmName\" value=\"Apache Syncope authentication\"/>\n   </bean>\n   \n-  <bean id=\"syncopeAccessDeniedHandler\" class=\"org.apache.syncope.core.spring.security.SyncopeAccessDeniedHandler\"/>\n-  \n-  <bean id=\"firewall\" class=\"org.springframework.security.web.firewall.DefaultHttpFirewall\">\n-    <property name=\"allowUrlEncodedSlash\" value=\"true\"/>\n+  <bean id=\"jwtAuthenticationFilter\" class=\"org.apache.syncope.core.spring.security.JWTAuthenticationFilter\">\n+    <property name=\"authenticationManager\" ref=\"authenticationManager\"/>\n+    <property name=\"authenticationEntryPoint\" ref=\"basicAuthenticationEntryPoint\"/>\n+    <property name=\"authenticationDetailsSource\" ref=\"authenticationDetailsSource\"/>\n   </bean>\n-  <security:http-firewall ref=\"firewall\"/>\n+  \n+  <bean id=\"mustChangePasswordFilter\" class=\"org.apache.syncope.core.spring.security.MustChangePasswordFilter\"/>\n \n-  <security:http security-context-repository-ref=\"securityContextRepository\"\n+  <bean id=\"syncopeAccessDeniedHandler\" class=\"org.apache.syncope.core.spring.security.SyncopeAccessDeniedHandler\"/>\n+    \n+  <security:http create-session=\"stateless\"\n+                 security-context-repository-ref=\"securityContextRepository\"\n                  entry-point-ref=\"basicAuthenticationEntryPoint\"\n-                 use-expressions=\"false\" disable-url-rewriting=\"false\">\n+                 use-expressions=\"false\" disable-url-rewriting=\"false\"\n+                 pattern=\"/**\">\n \n-    <security:http-basic entry-point-ref=\"basicAuthenticationEntryPoint\"\n-                         authentication-details-source-ref=\"syncopeAuthenticationDetailsSource\"/>\n     <security:anonymous username=\"${anonymousUser}\"/>\n-    <security:intercept-url pattern=\"/**\"/>\n+\n+    <security:custom-filter ref=\"jwtAuthenticationFilter\" before=\"BASIC_AUTH_FILTER\"/>\n+    <security:http-basic authentication-details-source-ref=\"authenticationDetailsSource\"/>\n     \n     <security:custom-filter before=\"FILTER_SECURITY_INTERCEPTOR\" ref=\"mustChangePasswordFilter\"/>\n     \n@@ -86,14 +122,14 @@ under the License.\n \n   <bean class=\"org.apache.syncope.core.spring.security.AuthDataAccessor\"/>\n \n-  <bean id=\"syncopeAuthenticationProvider\"\n-        class=\"org.apache.syncope.core.spring.security.SyncopeAuthenticationProvider\">\n-    <property name=\"adminPassword\" value=\"${adminPassword}\"/>\n-    <property name=\"adminPasswordAlgorithm\" value=\"${adminPasswordAlgorithm}\"/>\n-    <property name=\"anonymousKey\" value=\"${anonymousKey}\"/>\n-  </bean>\n+  <bean id=\"usernamePasswordAuthenticationProvider\"\n+        class=\"org.apache.syncope.core.spring.security.UsernamePasswordAuthenticationProvider\"/>\n+\n+  <bean id=\"jwtAuthenticationProvider\"\n+        class=\"org.apache.syncope.core.spring.security.JWTAuthenticationProvider\"/>\n \n-  <security:authentication-manager>\n-    <security:authentication-provider ref=\"syncopeAuthenticationProvider\"/>\n+  <security:authentication-manager alias=\"authenticationManager\">\n+    <security:authentication-provider ref=\"usernamePasswordAuthenticationProvider\"/>\n+    <security:authentication-provider ref=\"jwtAuthenticationProvider\"/>\n   </security:authentication-manager>\n </beans>"},{"sha":"282f8dc718513b6dde4cfb297674cc46e4ea562c","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/AbstractITCase.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2FAbstractITCase.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -52,6 +52,7 @@\n import org.apache.syncope.common.lib.types.ConnConfProperty;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.common.rest.api.service.AnyTypeClassService;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n@@ -284,7 +285,10 @@ public <T> T getObject(final URI location, final Class<?> serviceClass, final Cl\n         WebClient webClient = WebClient.fromClient(WebClient.client(adminClient.getService(serviceClass)));\n         webClient.accept(clientFactory.getContentType().getMediaType()).to(location.toASCIIString(), false);\n \n-        return webClient.get(resultClass);\n+        return webClient.\n+                header(RESTHeaders.DOMAIN, adminClient.getDomain()).\n+                header(RESTHeaders.TOKEN, adminClient.getJWT()).\n+                get(resultClass);\n     }\n \n     @SuppressWarnings(\"unchecked\")"},{"sha":"74a892441e5e8cd0e197d567329a8238a65317d8","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":49,"deletions":21,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -38,6 +38,8 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n+import org.apache.syncope.client.lib.BasicAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.EntityTOUtils;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -98,15 +100,6 @@ private int getFailedLogins(final UserService userService, final String userKey)\n         return readUserTO.getFailedLogins();\n     }\n \n-    private void assertReadFails(final SyncopeClient client) {\n-        try {\n-            client.self();\n-            fail(\"access should not work\");\n-        } catch (Exception e) {\n-            assertNotNull(e);\n-        }\n-    }\n-\n     @Test\n     public void testReadEntitlements() {\n         // 1. as not authenticated (not allowed)\n@@ -118,7 +111,8 @@ public void testReadEntitlements() {\n         }\n \n         // 2. as anonymous\n-        Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).self();\n+        Pair<Map<String, Set<String>>, UserTO> self = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).self();\n         assertEquals(1, self.getKey().size());\n         assertTrue(self.getKey().keySet().contains(StandardEntitlement.ANONYMOUS));\n         assertEquals(ANONYMOUS_UNAME, self.getValue().getUsername());\n@@ -342,10 +336,18 @@ public void checkFailedLogins() {\n         assertEquals(0, getFailedLogins(userService2, userKey));\n \n         // authentications failed ...\n-        SyncopeClient badPwdClient = clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n-        assertReadFails(badPwdClient);\n-        assertReadFails(badPwdClient);\n-\n+        try {\n+            clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+        try {\n+            clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n         assertEquals(2, getFailedLogins(userService, userKey));\n \n         UserService userService4 = clientFactory.create(userTO.getUsername(), \"password123\").\n@@ -366,15 +368,34 @@ public void checkUserSuspension() {\n         assertEquals(0, getFailedLogins(userService, userKey));\n \n         // authentications failed ...\n-        SyncopeClient badPwdClient = clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n-        assertReadFails(badPwdClient);\n-        assertReadFails(badPwdClient);\n-        assertReadFails(badPwdClient);\n+        try {\n+            clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+        try {\n+            clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n+        try {\n+            clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n \n         assertEquals(3, getFailedLogins(userService, userKey));\n \n         // last authentication before suspension\n-        assertReadFails(badPwdClient);\n+        try {\n+            clientFactory.create(userTO.getUsername(), \"wrongpwd1\");\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n \n         userTO = userService.read(userTO.getKey());\n         assertNotNull(userTO);\n@@ -383,8 +404,12 @@ public void checkUserSuspension() {\n         assertEquals(\"suspended\", userTO.getStatus());\n \n         // Access with correct credentials should fail as user is suspended\n-        SyncopeClient goodPwdClient = clientFactory.create(userTO.getUsername(), \"password123\");\n-        assertReadFails(goodPwdClient);\n+        try {\n+            clientFactory.create(userTO.getUsername(), \"password123\");\n+            fail();\n+        } catch (AccessControlException e) {\n+            assertNotNull(e);\n+        }\n \n         StatusPatch reactivate = new StatusPatch();\n         reactivate.setKey(userTO.getKey());\n@@ -394,6 +419,7 @@ public void checkUserSuspension() {\n         assertNotNull(userTO);\n         assertEquals(\"active\", userTO.getStatus());\n \n+        SyncopeClient goodPwdClient = clientFactory.create(userTO.getUsername(), \"password123\");\n         assertEquals(0, goodPwdClient.self().getValue().getFailedLogins(), 0);\n     }\n \n@@ -468,6 +494,8 @@ public boolean evaluate(final String entitlement) {\n         assertTrue(bellini.getRoles().contains(role.getKey()));\n \n         // 5. now the instance of the type above can be created successfully\n+        belliniClient.logout();\n+        belliniClient.login(new BasicAuthenticationHandler(\"bellini\", ADMIN_PWD));\n         belliniClient.getService(AnyObjectService.class).create(folder);\n     }\n "},{"sha":"1d8c528a98e3d9a652064972271d8cc12016ccb9","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/GroupITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FGroupITCase.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -41,6 +41,7 @@\n import org.apache.commons.collections4.IterableUtils;\n import org.apache.commons.collections4.Predicate;\n import org.apache.commons.lang3.SerializationUtils;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.AnyOperations;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -624,7 +625,9 @@ public void anonymous() {\n             assertNotNull(e);\n         }\n \n-        GroupService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(GroupService.class);\n+        GroupService anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).\n+                getService(GroupService.class);\n         assertFalse(anonymous.search(new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).build()).\n                 getResult().isEmpty());\n     }"},{"sha":"8c11fb70512f24582dff25dab95ab5127ac16823","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -100,7 +100,7 @@ public void masterOnly() {\n \n     @Test\n     public void readPlainSchemas() {\n-        assertEquals(11, adminClient.getService(SchemaService.class).\n+        assertEquals(13, adminClient.getService(SchemaService.class).\n                 list(new SchemaQuery.Builder().type(SchemaType.PLAIN).build()).size());\n     }\n "},{"sha":"b98dc532dcaf4abe8f534bdeffd9666e077aff1e","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RESTITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRESTITCase.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -38,6 +38,7 @@\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.BasicAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -69,9 +70,8 @@ public void unauthorizedOrForbidden() {\n         assertFalse(connectors.isEmpty());\n \n         // service with bad password: 401 unauthorized\n-        SyncopeClient badClient = clientFactory.create(\"bellini\", \"passwor\");\n         try {\n-            badClient.getService(ConnectorService.class).list(null);\n+            clientFactory.create(\"bellini\", \"passwor\");\n             fail();\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n@@ -90,7 +90,8 @@ public void unauthorizedOrForbidden() {\n     @Test\n     public void noContent() throws IOException {\n         SyncopeClient noContentclient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n-        GroupService noContentService = noContentclient.prefer(GroupService.class, Preference.RETURN_NO_CONTENT);\n+        GroupService noContentService = noContentclient.prefer(\n+                noContentclient.getService(GroupService.class), Preference.RETURN_NO_CONTENT);\n \n         GroupTO group = GroupITCase.getSampleTO(\"noContent\");\n \n@@ -144,7 +145,7 @@ public void ifMatch() {\n         EntityTag etag1 = adminClient.getLatestEntityTag(userService);\n         assertFalse(etag.getValue().equals(etag1.getValue()));\n \n-        UserService ifMatchService = adminClient.ifMatch(UserService.class, etag);\n+        UserService ifMatchService = adminClient.ifMatch(adminClient.getService(UserService.class), etag);\n         userPatch.setUsername(new StringReplacePatchItem.Builder().value(userTO.getUsername() + \"YY\").build());\n         try {\n             ifMatchService.update(userPatch);\n@@ -165,8 +166,7 @@ public void defaultContentType() {\n                 MediaType.WILDCARD_TYPE,\n                 factory.getRestClientFactoryBean(),\n                 factory.getExceptionMapper(),\n-                ADMIN_UNAME,\n-                ADMIN_PWD,\n+                new BasicAuthenticationHandler(ADMIN_UNAME, ADMIN_PWD),\n                 false);\n \n         // perform operation"},{"sha":"370cf528263cd3c2fc414519aa9a45154be51369","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/ResourceITCase.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FResourceITCase.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -35,6 +35,7 @@\n import javax.ws.rs.core.Response;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.Transformer;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n import org.apache.syncope.common.lib.to.ConnObjectTO;\n@@ -528,7 +529,8 @@ public void anonymous() {\n             assertNotNull(e);\n         }\n \n-        ResourceService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).\n+        ResourceService anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).\n                 getService(ResourceService.class);\n         assertFalse(anonymous.list().isEmpty());\n     }"},{"sha":"21e9fe6da81776b38ef844e36c804ef3f6fecd82","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":4,"deletions":5,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -42,6 +42,7 @@\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AssociationPatch;\n@@ -325,10 +326,8 @@ public void create() {\n             fail(\"Credentials should be valid and not cause AccessControlException\");\n         }\n \n-        UserSelfService userSelfService2 = clientFactory.create(\n-                newUserTO.getUsername(), \"passwordXX\").getService(UserSelfService.class);\n         try {\n-            userSelfService2.read();\n+            clientFactory.create(newUserTO.getUsername(), \"passwordXX\").getService(UserSelfService.class);\n             fail(\"Credentials are invalid, thus request should raise AccessControlException\");\n         } catch (AccessControlException e) {\n             assertNotNull(e);\n@@ -879,8 +878,8 @@ public String transform(final PropagationStatus status) {\n \n     @Test\n     public void async() {\n-        UserService asyncService =\n-                clientFactory.create(ADMIN_UNAME, ADMIN_PWD).nullPriorityAsync(UserService.class, true);\n+        SyncopeClient asyncClient = clientFactory.create(ADMIN_UNAME, ADMIN_PWD);\n+        UserService asyncService = asyncClient.nullPriorityAsync(asyncClient.getService(UserService.class), true);\n \n         UserTO user = getUniqueSampleTO(\"async@syncope.apache.org\");\n         user.getResources().add(RESOURCE_NAME_TESTDB);"},{"sha":"faf1a0dcd564a569227e2e4ba97744587dadb19f","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/VirSchemaITCase.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FVirSchemaITCase.java?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -27,6 +27,7 @@\n import java.security.AccessControlException;\n import java.util.List;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.to.VirSchemaTO;\n@@ -99,7 +100,9 @@ public void anonymous() {\n             assertNotNull(e);\n         }\n \n-        SchemaService anonymous = clientFactory.create(ANONYMOUS_UNAME, ANONYMOUS_KEY).getService(SchemaService.class);\n+        SchemaService anonymous = clientFactory.create(\n+                new AnonymousAuthenticationHandler(ANONYMOUS_UNAME, ANONYMOUS_KEY)).\n+                getService(SchemaService.class);\n         assertFalse(anonymous.list(new SchemaQuery.Builder().type(SchemaType.VIRTUAL).build()).isEmpty());\n     }\n "},{"sha":"ed48b99e3c4f09159ea1879f4425d9d49552f39d","filename":"pom.xml","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -539,6 +539,11 @@ under the License.\n         <artifactId>cxf-rt-rs-extension-search</artifactId>\n         <version>${cxf.version}</version>\n       </dependency>\n+      <dependency>\n+        <groupId>org.apache.cxf</groupId>\n+        <artifactId>cxf-rt-rs-security-jose</artifactId>\n+        <version>${cxf.version}</version>\n+      </dependency>\n       <dependency>\n         <groupId>org.apache.cxf</groupId>\n         <artifactId>cxf-rt-rs-service-description</artifactId>\n@@ -763,7 +768,11 @@ under the License.\n         <exclusions>\n           <exclusion>\n             <groupId>org.springframework</groupId>\n-            <artifactId>spring-aop</artifactId>\n+            <artifactId>spring-beans</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-core</artifactId>\n           </exclusion>\n           <exclusion>\n             <groupId>org.springframework</groupId>\n@@ -775,6 +784,16 @@ under the License.\n         <groupId>org.springframework.security</groupId>\n         <artifactId>spring-security-web</artifactId>\n         <version>${spring-security.version}</version>\n+        <exclusions>\n+          <exclusion>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-beans</artifactId>\n+          </exclusion>\n+          <exclusion>\n+            <groupId>org.springframework</groupId>\n+            <artifactId>spring-core</artifactId>\n+          </exclusion>\n+        </exclusions>\n       </dependency>\n       <dependency>\n         <groupId>org.springframework.security</groupId>"},{"sha":"8c31dbd64ae3533619a852bcaff5a8ec4bb9d906","filename":"src/main/asciidoc/reference-guide/concepts/typemanagement.adoc","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/32af0320d9d426bb34fc5a69287b5e19a0630ad3/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftypemanagement.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/32af0320d9d426bb34fc5a69287b5e19a0630ad3/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftypemanagement.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Ftypemanagement.adoc?ref=32af0320d9d426bb34fc5a69287b5e19a0630ad3","patch":"@@ -72,7 +72,7 @@ Sometimes it is useful to obtain values as arbitrary combinations of other attri\n concatenation of `firstname` 's and `surname` 's values, separated by a blank space.\n \n Derived schemas are always read-only and require a http://commons.apache.org/proper/commons-jexl/[JEXL^]\n-expression to be specified that reference plain schema types. +\n+expression to be specified that references plain schema types. +\n For the sample above, it would be\n \n  firstname + ' ' + surname"}]}