{"sha":"f62322c85fbc26a10ef2605e7f6b81dc98401006","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmY2MjMyMmM4NWZiYzI2YTEwZWYyNjA1ZTdmNmI4MWRjOTg0MDEwMDY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-12T11:35:27Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2014-06-12T11:35:27Z"},"message":"[SYNCOPE-270] Implementation provided\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1602129 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b2194fc73961a1725bd4aa8eaf2d0aa9d4fb7a08","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b2194fc73961a1725bd4aa8eaf2d0aa9d4fb7a08"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/f62322c85fbc26a10ef2605e7f6b81dc98401006","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f62322c85fbc26a10ef2605e7f6b81dc98401006","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f62322c85fbc26a10ef2605e7f6b81dc98401006","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f62322c85fbc26a10ef2605e7f6b81dc98401006/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"7a74fa1b19dd9a7b1e809aa6ddf4d432568ff074","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7a74fa1b19dd9a7b1e809aa6ddf4d432568ff074","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7a74fa1b19dd9a7b1e809aa6ddf4d432568ff074"}],"stats":{"total":449,"additions":274,"deletions":175},"files":[{"sha":"2e02230daf32ebac25c90616350bbc0c5bb0bb7d","filename":"build-tools/src/main/resources/content.ldif","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/build-tools%2Fsrc%2Fmain%2Fresources%2Fcontent.ldif?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -44,3 +44,4 @@ sn: Surname\n uid: syncFromLDAP\n userpassword:: cGFzc3dvcmQxMjM=\n givenname: syncFromLDAP\n+registeredAddress:  5BAA61E4C9B93F3F0682250B6CF8331B7EE68FD8"},{"sha":"0b880eebfd90bb44842b6e5255fd26d626ee615f","filename":"common/src/main/java/org/apache/syncope/common/to/SchemaTO.java","status":"modified","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FSchemaTO.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -23,6 +23,7 @@\n \r\n import org.apache.commons.lang3.StringUtils;\r\n import org.apache.syncope.common.types.AttributeSchemaType;\r\n+import org.apache.syncope.common.types.CipherAlgorithm;\r\n \r\n @XmlRootElement(name = \"schema\")\r\n @XmlType\r\n@@ -38,6 +39,10 @@ public class SchemaTO extends AbstractSchemaTO {\n \r\n     private String enumerationKeys;\r\n \r\n+    private String secretKey;\r\n+\r\n+    private CipherAlgorithm cipherAlgorithm;\r\n+\r\n     private boolean multivalue;\r\n \r\n     private boolean uniqueConstraint;\r\n@@ -82,6 +87,22 @@ public void setEnumerationKeys(final String enumerationKeys) {\n         this.enumerationKeys = enumerationKeys;\r\n     }\r\n \r\n+    public String getSecretKey() {\r\n+        return secretKey;\r\n+    }\r\n+\r\n+    public void setSecretKey(final String secretKey) {\r\n+        this.secretKey = secretKey;\r\n+    }\r\n+\r\n+    public CipherAlgorithm getCipherAlgorithm() {\r\n+        return cipherAlgorithm;\r\n+    }\r\n+\r\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\r\n+        this.cipherAlgorithm = cipherAlgorithm;\r\n+    }\r\n+\r\n     public boolean isMultivalue() {\r\n         return multivalue;\r\n     }\r"},{"sha":"b78348e4354fd211c8753c391461301f215e7f65","filename":"common/src/main/java/org/apache/syncope/common/types/AttributeSchemaType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FAttributeSchemaType.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -29,7 +29,8 @@ public enum AttributeSchemaType {\n     Double(Double.class),\r\n     Boolean(Boolean.class),\r\n     Date(Date.class),\r\n-    Enum(Enum.class);\r\n+    Enum(Enum.class),\r\n+    Encrypted(byte[].class);\r\n \r\n     final private Class<?> type;\r\n \r"},{"sha":"d8698f13ddc86534c44138a7dc1333902f5eecdd","filename":"common/src/main/java/org/apache/syncope/common/types/CipherAlgorithm.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -51,8 +51,4 @@ public String getAlgorithm() {\n     public boolean isInvertible() {\r\n         return invertible;\r\n     }\r\n-\r\n-    public static CipherAlgorithm fromString(final String value) {\r\n-        return CipherAlgorithm.valueOf(value.toUpperCase());\r\n-    }\r\n }\r"},{"sha":"445d8dbc72ee6a7e34cf1cb5b2ae62b2ad018eda","filename":"common/src/main/java/org/apache/syncope/common/types/EntityViolationType.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FEntityViolationType.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -43,6 +43,7 @@ public enum EntityViolationType {\n     InvalidReport(\"org.apache.syncope.core.validation.report\"),\r\n     InvalidResource(\"org.apache.syncope.core.validation.externalresource\"),\r\n     InvalidRoleOwner(\"org.apache.syncope.core.validation.syncoperole.owner\"),\r\n+    InvalidSchemaEncrypted(\"org.apache.syncope.core.validation.schema.encrypted\"),\r\n     InvalidSchemaEnum(\"org.apache.syncope.core.validation.schema.enum\"),\r\n     InvalidSchemaMultivalueUnique(\"org.apache.syncope.core.validation.schema.multivalueUnique\"),\r\n     InvalidSchedTask(\"org.apache.syncope.core.validation.schedtask\"),\r"},{"sha":"d2909959db1fe5b541213f505bf5f636032d563b","filename":"common/src/main/java/org/apache/syncope/common/types/SchemaType.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FSchemaType.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -42,7 +42,7 @@ public enum SchemaType {\n \r\n     private final Class<? extends AbstractSchemaTO> toClass;\r\n \r\n-    private SchemaType(final Class<? extends AbstractSchemaTO> toClass) {\r\n+    SchemaType(final Class<? extends AbstractSchemaTO> toClass) {\r\n         this.toClass = toClass;\r\n     }\r\n \r"},{"sha":"496348ae4159665477b37d529eef24d69098c44d","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttr.java","status":"modified","additions":5,"deletions":10,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttr.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -36,16 +36,15 @@ public abstract class AbstractAttr extends AbstractBaseBean {\n \n     public abstract Long getId();\n \n-    @SuppressWarnings(\"unchecked\")\n-    public <T extends AbstractAttrValue> T addValue(final String value, final AttributableUtil attributableUtil)\n+    public void addValue(final String value, final AttributableUtil attributableUtil)\n             throws InvalidAttrValueException {\n \n-        T attrValue;\n+        AbstractAttrValue attrValue;\n         if (getSchema().isUniqueConstraint()) {\n-            attrValue = (T) attributableUtil.newAttrUniqueValue();\n+            attrValue = attributableUtil.newAttrUniqueValue();\n             ((AbstractAttrUniqueValue) attrValue).setSchema(getSchema());\n         } else {\n-            attrValue = (T) attributableUtil.newAttrValue();\n+            attrValue = attributableUtil.newAttrValue();\n         }\n \n         attrValue.setAttribute(this);\n@@ -59,8 +58,6 @@ public <T extends AbstractAttrValue> T addValue(final String value, final Attrib\n             }\n             addValue(attrValue);\n         }\n-\n-        return attrValue;\n     }\n \n     public abstract <T extends AbstractAttributable> T getOwner();\n@@ -69,7 +66,7 @@ public <T extends AbstractAttrValue> T addValue(final String value, final Attrib\n \n     public abstract <T extends AbstractNormalSchema> T getSchema();\n \n-    public abstract <T extends AbstractAttrValue> boolean addValue(T attrValue);\n+    protected abstract <T extends AbstractAttrValue> boolean addValue(T attrValue);\n \n     public abstract <T extends AbstractAttrValue> boolean removeValue(T attrValue);\n \n@@ -89,8 +86,6 @@ public List<String> getValuesAsStrings() {\n \n     public abstract <T extends AbstractAttrValue> List<T> getValues();\n \n-    public abstract <T extends AbstractAttrValue> void setValues(List<T> attributeValues);\n-\n     public abstract <T extends AbstractAttrValue> T getUniqueValue();\n \n     public abstract <T extends AbstractAttrValue> void setUniqueValue(T uniqueAttributeValue);"},{"sha":"e3749c1ce142973d2a9560f1b31e887374eb9297","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractAttrValue.java","status":"modified","additions":12,"deletions":1,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttrValue.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.core.persistence.validation.attrvalue.ParsingValidationException;\n import org.apache.syncope.core.persistence.validation.entity.AttrValueCheck;\n import org.apache.syncope.core.util.DataFormat;\n+import org.apache.syncope.core.util.Encryptor;\n \n @MappedSuperclass\n @AttrValueCheck\n@@ -143,6 +144,14 @@ public <T extends AbstractAttrValue> void parseValue(final AbstractNormalSchema\n                 }\n                 break;\n \n+            case Encrypted:\n+                try {\n+                    this.setStringValue(Encryptor.getInstance(schema.getSecretKey()).\n+                            encode(value, schema.getCipherAlgorithm()));\n+                } catch (Exception pe) {\n+                    exception = pe;\n+                }\n+                break;\n \n             case String:\n             case Enum:\n@@ -201,8 +210,10 @@ public String getValueAsString() {\n                         : DataFormat.format(getDateValue(), false, getAttribute().getSchema().getConversionPattern());\n                 break;\n \n+            case String:\n+            case Enum:\n+            case Encrypted:\n             default:\n-                // applied to String and Enum SchemaType\n                 result = getStringValue();\n                 break;\n         }"},{"sha":"8999faae6f9ff94ffce66efedf9b9097a41c44ed","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractNormalSchema.java","status":"modified","additions":26,"deletions":1,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractNormalSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractNormalSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractNormalSchema.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -30,6 +30,7 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.common.types.CipherAlgorithm;\n import org.apache.syncope.core.persistence.validation.attrvalue.AbstractValidator;\n import org.apache.syncope.core.persistence.validation.attrvalue.BasicValidator;\n import org.apache.syncope.core.persistence.validation.entity.SchemaCheck;\n@@ -81,6 +82,13 @@ public abstract class AbstractNormalSchema extends AbstractSchema {\n     @Lob\n     private String enumerationKeys;\n \n+    @Column(nullable = true)\n+    private String secretKey;\n+\n+    @Column(nullable = true)\n+    @Enumerated(EnumType.STRING)\n+    private CipherAlgorithm cipherAlgorithm;\n+\n     @Transient\n     private AbstractValidator validator;\n \n@@ -152,7 +160,7 @@ public AbstractValidator getValidator() {\n         if (getValidatorClass() != null && getValidatorClass().length() > 0) {\n             try {\n                 Constructor<?> validatorConstructor = Class.forName(getValidatorClass()).\n-                        getConstructor(new Class<?>[] {getClass().getSuperclass()});\n+                        getConstructor(new Class<?>[] { getClass().getSuperclass() });\n                 validator = (AbstractValidator) validatorConstructor.newInstance(this);\n             } catch (Exception e) {\n                 LOG.error(\"Could not instantiate validator of type {}, reverting to {}\",\n@@ -206,4 +214,21 @@ public void setConversionPattern(final String conversionPattern) {\n \n         this.conversionPattern = conversionPattern;\n     }\n+\n+    public String getSecretKey() {\n+        return secretKey;\n+    }\n+\n+    public void setSecretKey(final String secretKey) {\n+        this.secretKey = secretKey;\n+    }\n+\n+    public CipherAlgorithm getCipherAlgorithm() {\n+        return cipherAlgorithm;\n+    }\n+\n+    public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n+        this.cipherAlgorithm = cipherAlgorithm;\n+    }\n+\n }"},{"sha":"5ced40df473307a999c5492d2afcd878b9ad9272","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/membership/MAttr.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fmembership%2FMAttr.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -122,18 +122,6 @@ public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends AbstractAttrValue> void setValues(final List<T> attributeValues) {\n-        this.values.clear();\n-        if (attributeValues != null && !attributeValues.isEmpty()) {\n-            for (T mav : attributeValues) {\n-                mav.setAttribute(this);\n-            }\n-            this.values.addAll((List<MAttrValue>) attributeValues);\n-        }\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> T getUniqueValue() {"},{"sha":"1e488466b8d7729f3527fd97b7fedad5ced7790c","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/role/RAttr.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Frole%2FRAttr.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -119,19 +119,6 @@ public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends AbstractAttrValue> void setValues(final List<T> attributeValues) {\n-\n-        this.values.clear();\n-        if (attributeValues != null && !attributeValues.isEmpty()) {\n-            for (T mav : attributeValues) {\n-                mav.setAttribute(this);\n-            }\n-            this.values.addAll((List<RAttrValue>) attributeValues);\n-        }\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> T getUniqueValue() {"},{"sha":"9e71444e3b74664d34387b9b09f3d1d24f3f6f81","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -56,7 +56,7 @@\n import org.apache.syncope.core.persistence.beans.membership.Membership;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.validation.entity.SyncopeUserCheck;\n-import org.apache.syncope.core.util.PasswordEncoder;\n+import org.apache.syncope.core.util.Encryptor;\n import org.apache.syncope.core.util.SecureRandomUtil;\n \n /**\n@@ -259,19 +259,20 @@ public void removeClearPassword() {\n         clearPassword = null;\n     }\n \n-    public void setEncodedPassword(final String password, final CipherAlgorithm cipherAlgoritm, final int historySize) {\n+    public void setEncodedPassword(final String password, final CipherAlgorithm cipherAlgoritm) {\n         // clear password\n         this.clearPassword = null;\n+\n         this.password = password;\n         this.cipherAlgorithm = cipherAlgoritm;\n     }\n-    \n+\n     public void setPassword(final String password, final CipherAlgorithm cipherAlgoritm, final int historySize) {\n         // clear password\n         this.clearPassword = password;\n \n         try {\n-            this.password = PasswordEncoder.encode(password, cipherAlgoritm);\n+            this.password = Encryptor.getInstance().encode(password, cipherAlgoritm);\n             this.cipherAlgorithm = cipherAlgoritm;\n         } catch (Exception e) {\n             LOG.error(\"Could not encode password\", e);\n@@ -495,8 +496,8 @@ public boolean verifyPasswordHistory(final String password, final int size) {\n                 res = passwordHistory.subList(size >= passwordHistory.size()\n                         ? 0\n                         : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n-                        ? password\n-                        : PasswordEncoder.encode(password, cipherAlgorithm));\n+                                ? password\n+                                : Encryptor.getInstance().encode(password, cipherAlgorithm));\n             } catch (Exception e) {\n                 LOG.error(\"Error evaluating password history\", e);\n             }"},{"sha":"5f38fa909c0c191a9fc8b974078421ab5ff727a6","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/UAttr.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FUAttr.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -136,19 +136,6 @@ public <T extends AbstractAttrValue> List<T> getValues() {\n         return (List<T>) values;\n     }\n \n-    @SuppressWarnings(\"unchecked\")\n-    @Override\n-    public <T extends AbstractAttrValue> void setValues(final List<T> attributeValues) {\n-\n-        this.values.clear();\n-        if (attributeValues != null && !attributeValues.isEmpty()) {\n-            for (T mav : attributeValues) {\n-                mav.setAttribute(this);\n-            }\n-            this.values.addAll((List<UAttrValue>) attributeValues);\n-        }\n-    }\n-\n     @SuppressWarnings(\"unchecked\")\n     @Override\n     public <T extends AbstractAttrValue> T getUniqueValue() {"},{"sha":"7f25c234049768691630edf96cf1f0453445cbe1","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/attrvalue/BasicValidator.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FBasicValidator.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.validation.attrvalue;\n \n-import java.util.Arrays;\n import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n@@ -34,9 +33,8 @@ public BasicValidator(final AbstractNormalSchema schema) {\n \n     @Override\n     protected void doValidate(final AbstractAttrValue attributeValue) throws InvalidAttrValueException {\n-        if (AttributeSchemaType.Enum.equals(schema.getType())) {\n+        if (AttributeSchemaType.Enum == schema.getType()) {\n             final String[] enumeration = schema.getEnumerationValues().split(SyncopeConstants.ENUM_VALUES_SEPARATOR);\n-\n             final String value = attributeValue.getStringValue();\n \n             boolean found = false;\n@@ -47,7 +45,7 @@ protected void doValidate(final AbstractAttrValue attributeValue) throws Invalid\n             }\n \n             if (!found) {\n-                throw new InvalidAttrValueException(\"\\\"\" + value + \"\\\" is not one of: \" + Arrays.toString(enumeration));\n+                throw new InvalidAttrValueException(\"'\" + value + \"' is not one of: \" + schema.getEnumerationValues());\n             }\n         }\n     }"},{"sha":"20204cea625171bcb86f32b7cc1bf9391b3a5eb1","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/attrvalue/InvalidAttrValueException.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fattrvalue%2FInvalidAttrValueException.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -24,11 +24,11 @@\n \n public class InvalidAttrValueException extends ValidationException {\n     \n-    public InvalidAttrValueException(String errorMessage) {\n+    public InvalidAttrValueException(final String errorMessage) {\n         super(errorMessage);\n     }\n     \n-    public InvalidAttrValueException(String errorMessage, Throwable t) {\n+    public InvalidAttrValueException(final String errorMessage, final Throwable t) {\n         super(errorMessage, t);\n     }\n "},{"sha":"57ecd6ef01dcd3f05563401214595fdc1934b16a","filename":"core/src/main/java/org/apache/syncope/core/persistence/validation/entity/SchemaValidator.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSchemaValidator.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -20,7 +20,6 @@\n \n import javax.validation.ConstraintValidatorContext;\n import org.apache.commons.lang3.StringUtils;\n-\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n import org.apache.syncope.core.persistence.beans.AbstractNormalSchema;\n@@ -37,13 +36,23 @@ public boolean isValid(final AbstractNormalSchema schema, final ConstraintValida\n                     getTemplate(EntityViolationType.InvalidSchemaEnum, \"Enumeration values missing\")).\n                     addNode(\"enumerationValues\").addConstraintViolation();\n         } else {\n-            isValid = !schema.isMultivalue() || !schema.isUniqueConstraint();\n+            isValid = schema.getType() != AttributeSchemaType.Encrypted\n+                    || (schema.getSecretKey() != null && schema.getCipherAlgorithm() != null);\n             if (!isValid) {\n                 context.disableDefaultConstraintViolation();\n                 context.buildConstraintViolationWithTemplate(\n-                        getTemplate(EntityViolationType.InvalidSchemaMultivalueUnique,\n-                        \"Cannot contemporary be multivalue and have unique constraint\")).\n-                        addNode(\"multiValue\").addConstraintViolation();\n+                        getTemplate(EntityViolationType.InvalidSchemaEncrypted,\n+                                \"SecretKey or CipherAlgorithm missing\")).\n+                        addNode(\"secretKey\").addNode(\"cipherAlgorithm\").addConstraintViolation();\n+            } else {\n+                isValid = !schema.isMultivalue() || !schema.isUniqueConstraint();\n+                if (!isValid) {\n+                    context.disableDefaultConstraintViolation();\n+                    context.buildConstraintViolationWithTemplate(\n+                            getTemplate(EntityViolationType.InvalidSchemaMultivalueUnique,\n+                                    \"Cannot contemporary be multivalue and have unique constraint\")).\n+                            addNode(\"multiValue\").addConstraintViolation();\n+                }\n             }\n         }\n "},{"sha":"44e5626a1a142d7fa602f31c662e41d201f2a9a8","filename":"core/src/main/java/org/apache/syncope/core/rest/data/SchemaDataBinder.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FSchemaDataBinder.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -90,6 +90,7 @@ public <T extends AbstractNormalSchema> void update(final SchemaTO schemaTO, fin\n \n     public <T extends AbstractNormalSchema> SchemaTO getSchemaTO(\n             final T schema, final AttributableUtil attributableUtil) {\n+\n         SchemaTO schemaTO = new SchemaTO();\n         BeanUtils.copyProperties(schema, schemaTO);\n "},{"sha":"10f3517eb36e9110e35519f9cf0bf9683ecef6a3","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -55,7 +55,7 @@\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n-import org.apache.syncope.core.util.PasswordEncoder;\n+import org.apache.syncope.core.util.Encryptor;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.stereotype.Component;\n@@ -78,6 +78,8 @@ public class UserDataBinder extends AbstractAttributableDataBinder {\n     @Resource(name = \"anonymousUser\")\n     private String anonymousUser;\n \n+    private final Encryptor encryptor = Encryptor.getInstance();\n+\n     @Transactional(readOnly = true)\n     public SyncopeUser getUserFromId(final Long userId) {\n         if (userId == null) {\n@@ -138,7 +140,7 @@ public boolean verifyPassword(final String username, final String password) {\n \n     @Transactional(readOnly = true)\n     public boolean verifyPassword(final SyncopeUser user, final String password) {\n-        return PasswordEncoder.verify(password, user.getCipherAlgorithm(), user.getPassword());\n+        return encryptor.verify(password, user.getCipherAlgorithm(), user.getPassword());\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"85af14b6a53c56d2c91ad1c78af83d926e0cc2da","filename":"core/src/main/java/org/apache/syncope/core/security/EncodePasswordCLI.java","status":"modified","additions":6,"deletions":3,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -21,7 +21,7 @@\n import java.util.Arrays;\n \n import org.apache.syncope.common.types.CipherAlgorithm;\n-import org.apache.syncope.core.util.PasswordEncoder;\n+import org.apache.syncope.core.util.Encryptor;\n \n /**\n  * Command line version of encoder to encode the admin password.\n@@ -36,14 +36,17 @@ public static void main(final String[] args)\n             System.exit(1);\n         }\n \n-        if (CipherAlgorithm.valueOf(args[1]).getAlgorithm().isEmpty()) {\n+        CipherAlgorithm cipherAlgorithm = null;\n+        try {\n+            cipherAlgorithm = CipherAlgorithm.valueOf(args[1]);\n+        } catch (IllegalArgumentException e) {\n             System.err.println(\"Unsupported algorithm \" + args[1]);\n             usage();\n             System.exit(2);\n         }\n \n         System.out.println(\"Encoding password '\" + args[0] + \"' with \" + args[1]);\n-        System.out.println(PasswordEncoder.encode(args[0], CipherAlgorithm.valueOf(args[1])));\n+        System.out.println(Encryptor.getInstance().encode(args[0], cipherAlgorithm));\n     }\n \n     private static void usage() {"},{"sha":"47fb7d2e6cb8bfca877848ec4aa8f1e13487e971","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -29,7 +29,7 @@\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.persistence.dao.ConfDAO;\n import org.apache.syncope.core.persistence.dao.UserDAO;\n-import org.apache.syncope.core.util.PasswordEncoder;\n+import org.apache.syncope.core.util.Encryptor;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -73,6 +73,8 @@ public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n \n     private SyncopeUserDetailsService userDetailsService;\n \n+    private final Encryptor encryptor = Encryptor.getInstance();\n+\n     /**\n      * @param adminPassword the adminPassword to set\n      */\n@@ -194,7 +196,7 @@ public Authentication authenticate(final Authentication authentication)\n     protected boolean authenticate(final String password, final CipherAlgorithm cipherAlgorithm,\n             final String digestedPassword) {\n \n-        return PasswordEncoder.verify(password, cipherAlgorithm, digestedPassword);\n+        return encryptor.verify(password, cipherAlgorithm, digestedPassword);\n     }\n \n     @Override"},{"sha":"5c0ba7c99b4804123b9d867ccd3e45b8df6eb914","filename":"core/src/main/java/org/apache/syncope/core/sync/PushActions.java","status":"modified","additions":9,"deletions":9,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -31,7 +31,7 @@\n public interface PushActions extends AbstractSyncActions<AbstractSyncopeResultHandler<?, ?>> {\n \n     /**\n-     * Action to be executed before to assign (link & provision) a synchronized user to the resource.\n+     * Action to be executed before to assign (link & provision) a synchronized user / role to the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -45,7 +45,7 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeAssign(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to provision a synchronized user to the resource.\n+     * Action to be executed before to provision a synchronized user / role to the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -59,7 +59,7 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeProvisi\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to update a synchronized user on the resource.\n+     * Action to be executed before to update a synchronized user / role on the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -73,7 +73,7 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUpdate(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to link a synchronized user to the resource.\n+     * Action to be executed before to link a synchronized user / role to the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -87,7 +87,7 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeLink(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to unlink a synchronized user from the resource.\n+     * Action to be executed before to unlink a synchronized user / role from the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -101,7 +101,7 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUnlink(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to unassign a synchronized user from the resource.\n+     * Action to be executed before to unassign a synchronized user / role from the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -115,7 +115,7 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUnassig\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to unassign a synchronized user from the resource.\n+     * Action to be executed before to unassign a synchronized user / role from the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -129,7 +129,7 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeDeprovi\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before delete a synchronized user locally and from the resource.\n+     * Action to be executed before delete a synchronized user / role locally and from the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -143,7 +143,7 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeDelete(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed after each local user synchronization.\n+     * Action to be executed after each local user / role synchronization.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info pushed out (accountId, attributes)"},{"sha":"d2ff1d7199867bad31f6968f96bda474c9962a76","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncActions.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -30,7 +30,7 @@\n public interface SyncActions extends AbstractSyncActions<AbstractSyncopeResultHandler<?, ?>> {\n \n     /**\n-     * Action to be executed before to create a synchronized user locally.\n+     * Action to be executed before to create a synchronized user / role locally.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n@@ -44,7 +44,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before creating (and linking to the resource) a synchronized user locally.\n+     * Action to be executed before creating (and linking to the resource) a synchronized user / role locally.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n@@ -58,7 +58,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeAssign(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before unlinking resource from the synchronized user and de-provisioning.\n+     * Action to be executed before unlinking resource from the synchronized user / role and de-provisioning.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n@@ -86,7 +86,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeDeprovision(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before unlinking resource from the synchronized user.\n+     * Action to be executed before unlinking resource from the synchronized user / role.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n@@ -100,7 +100,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeUnlink(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before linking resource to the synchronized user.\n+     * Action to be executed before linking resource to the synchronized user / role.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n@@ -114,7 +114,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeLink(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to update a synchronized user locally.\n+     * Action to be executed before to update a synchronized user / role locally.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n@@ -131,7 +131,7 @@ <T extends AbstractAttributableTO, K extends AbstractAttributableMod> SyncDelta\n             throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to delete a synchronized user locally.\n+     * Action to be executed before to delete a synchronized user / role locally.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information\n@@ -145,7 +145,7 @@ <T extends AbstractAttributableTO> SyncDelta beforeDelete(\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed after each local user synchronization.\n+     * Action to be executed after each local user / role synchronization.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta retrieved synchronization information (may be modified by 'beforeCreate/beforeUpdate/beforeDelete')"},{"sha":"f2c73c5684c28ad4df41b2aea86400776f71089e","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/LDAPPasswordSyncActions.java","status":"modified","additions":14,"deletions":15,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPPasswordSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPPasswordSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FLDAPPasswordSyncActions.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -39,13 +39,14 @@\n  * that are hashed.\n  */\n public class LDAPPasswordSyncActions extends DefaultSyncActions {\n-    \n+\n     protected static final Logger LOG = LoggerFactory.getLogger(LDAPPasswordSyncActions.class);\n \n     @Autowired\n-    protected UserDAO userDAO;\n+    private UserDAO userDAO;\n \n     private String encodedPassword;\n+\n     private CipherAlgorithm cipher;\n \n     @Transactional(readOnly = true)\n@@ -54,22 +55,24 @@ public <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n             final AbstractSyncopeResultHandler<?, ?> handler,\n             final SyncDelta delta,\n             final T subject) throws JobExecutionException {\n+\n         if (subject instanceof UserTO) {\n-            String password = ((UserTO)subject).getPassword();\n+            String password = ((UserTO) subject).getPassword();\n             if (password != null && password.startsWith(\"{\")) {\n                 int closingBracketIndex = password.indexOf('}');\n                 String digest = password.substring(1, password.indexOf('}'));\n-                CipherAlgorithm cipherAlgorithm = CipherAlgorithm.fromString(digest);\n-                if (cipherAlgorithm != null) {\n+                try {\n                     encodedPassword = password.substring(closingBracketIndex + 1);\n-                    cipher = cipherAlgorithm;\n+                    cipher = CipherAlgorithm.valueOf(digest);\n+                } catch (IllegalArgumentException e) {\n+                    LOG.error(\"Cipher algorithm not allowed: {}\", digest, e);\n                 }\n             }\n         }\n-        \n+\n         return delta;\n     }\n-    \n+\n     @Transactional(readOnly = true)\n     @Override\n     public <T extends AbstractAttributableTO> void after(\n@@ -84,16 +87,12 @@ public <T extends AbstractAttributableTO> void after(\n                 byte[] encodedPasswordBytes = Base64.decode(encodedPassword.getBytes());\n                 char[] encodedHex = Hex.encode(encodedPasswordBytes);\n                 String encodedHexStr = new String(encodedHex).toUpperCase();\n-                \n-                /*UserMod userMod = new UserMod();\n-                userMod.setId(subject.getId());\n-                userMod.setPassword(encodedHexStr);\n-                uwfAdapter.update(userMod);*/\n-                syncopeUser.setEncodedPassword(encodedHexStr, cipher, 0);\n+\n+                syncopeUser.setEncodedPassword(encodedHexStr, cipher);\n             }\n             encodedPassword = null;\n             cipher = null;\n         }\n     }\n-    \n+\n }"},{"sha":"7b4c3e32786ecf9c12897b7993df2e49969cd78c","filename":"core/src/main/java/org/apache/syncope/core/util/Encryptor.java","status":"renamed","additions":54,"deletions":30,"changes":84,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEncryptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEncryptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FEncryptor.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -22,14 +22,18 @@\n import java.io.UnsupportedEncodingException;\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n+import java.util.Map;\n import java.util.Properties;\n+import java.util.concurrent.ConcurrentHashMap;\n import javax.crypto.BadPaddingException;\n import javax.crypto.Cipher;\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n import javax.crypto.spec.SecretKeySpec;\n import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.jasypt.commons.CommonUtils;\n import org.jasypt.digest.StandardStringDigester;\n@@ -38,56 +42,82 @@\n import org.springframework.security.crypto.bcrypt.BCrypt;\n import org.springframework.security.crypto.codec.Base64;\n \n-public final class PasswordEncoder {\n+public class Encryptor {\n \n-    private static final Logger LOG = LoggerFactory.getLogger(PasswordEncoder.class);\n+    private static final Logger LOG = LoggerFactory.getLogger(Encryptor.class);\n \n-    private static SecretKeySpec keySpec;\n+    private static final Map<String, Encryptor> INSTANCES = new ConcurrentHashMap<String, Encryptor>();\n \n-    static {\n-        String secretKey = null;\n+    private static final String DEFAULT_SECRET_KEY = \"1abcdefghilmnopqrstuvz2!\";\n+\n+    private static String PASSWORD_SECRET_KEY;\n \n+    private SecretKeySpec keySpec;\n+\n+    static {\n         InputStream propStream = null;\n         try {\n-            propStream = PasswordEncoder.class.getResourceAsStream(\"/security.properties\");\n+            propStream = Encryptor.class.getResourceAsStream(\"/security.properties\");\n             Properties props = new Properties();\n             props.load(propStream);\n-            secretKey = props.getProperty(\"secretKey\");\n+            PASSWORD_SECRET_KEY = props.getProperty(\"secretKey\");\n         } catch (Exception e) {\n-            LOG.error(\"Could not read secretKey\", e);\n+            LOG.error(\"Could not read password secretKey\", e);\n         } finally {\n             IOUtils.closeQuietly(propStream);\n         }\n \n-        if (secretKey == null) {\n-            secretKey = \"1abcdefghilmnopqrstuvz2!\";\n-            LOG.debug(\"secretKey not found, reverting to default\");\n+        if (PASSWORD_SECRET_KEY == null) {\n+            PASSWORD_SECRET_KEY = DEFAULT_SECRET_KEY;\n+            LOG.debug(\"password secretKey not found, reverting to default\");\n         }\n-        if (secretKey.length() < 16) {\n-            StringBuilder secretKeyPadding = new StringBuilder(secretKey);\n-            for (int i = 0; i < 16 - secretKey.length(); i++) {\n-                secretKeyPadding.append('0');\n+    }\n+\n+    public static Encryptor getInstance() {\n+        return getInstance(PASSWORD_SECRET_KEY);\n+    }\n+\n+    public static Encryptor getInstance(final String secretKey) {\n+        String actualKey = StringUtils.isBlank(secretKey) ? DEFAULT_SECRET_KEY : secretKey;\n+\n+        Encryptor instance = INSTANCES.get(actualKey);\n+        if (instance == null) {\n+            instance = new Encryptor(actualKey);\n+            INSTANCES.put(actualKey, instance);\n+        }\n+\n+        return instance;\n+    }\n+\n+    private Encryptor(final String secretKey) {\n+        String actualKey = secretKey;\n+        if (actualKey.length() < 16) {\n+            StringBuilder actualKeyPadding = new StringBuilder(actualKey);\n+            for (int i = 0; i < 16 - actualKey.length(); i++) {\n+                actualKeyPadding.append('0');\n             }\n-            secretKey = secretKeyPadding.toString();\n-            LOG.debug(\"secretKey too short, adding some random characters\");\n+            actualKey = actualKeyPadding.toString();\n+            LOG.debug(\"actualKey too short, adding some random characters\");\n         }\n \n         try {\n-            keySpec = new SecretKeySpec(ArrayUtils.subarray(secretKey.getBytes(\"UTF8\"), 0, 16), \"AES\");\n+            keySpec = new SecretKeySpec(ArrayUtils.subarray(\n+                    actualKey.getBytes(SyncopeConstants.DEFAULT_ENCODING), 0, 16),\n+                    CipherAlgorithm.AES.getAlgorithm());\n         } catch (Exception e) {\n             LOG.error(\"Error during key specification\", e);\n         }\n     }\n \n-    public static String encode(final String password, final CipherAlgorithm cipherAlgorithm)\n+    public String encode(final String password, final CipherAlgorithm cipherAlgorithm)\n             throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n             IllegalBlockSizeException, BadPaddingException {\n \n         String encodedPassword = null;\n \n         if (password != null) {\n             if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n-                final byte[] cleartext = password.getBytes(\"UTF8\");\n+                final byte[] cleartext = password.getBytes(SyncopeConstants.DEFAULT_ENCODING);\n \n                 final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n                 cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n@@ -103,7 +133,7 @@ public static String encode(final String password, final CipherAlgorithm cipherA\n         return encodedPassword;\n     }\n \n-    public static boolean verify(final String password, final CipherAlgorithm cipherAlgorithm,\n+    public boolean verify(final String password, final CipherAlgorithm cipherAlgorithm,\n             final String digestedPassword) {\n \n         boolean res = false;\n@@ -125,14 +155,14 @@ public static boolean verify(final String password, final CipherAlgorithm cipher\n         return res;\n     }\n \n-    public static String decode(final String encodedPassword, final CipherAlgorithm cipherAlgorithm)\n+    public String decode(final String encodedPassword, final CipherAlgorithm cipherAlgorithm)\n             throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n             IllegalBlockSizeException, BadPaddingException {\n \n         String password = null;\n \n         if (encodedPassword != null && cipherAlgorithm == CipherAlgorithm.AES) {\n-            final byte[] encoded = encodedPassword.getBytes(\"UTF8\");\n+            final byte[] encoded = encodedPassword.getBytes(SyncopeConstants.DEFAULT_ENCODING);\n \n             final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n             cipher.init(Cipher.DECRYPT_MODE, keySpec);\n@@ -143,7 +173,7 @@ public static String decode(final String encodedPassword, final CipherAlgorithm\n         return password;\n     }\n \n-    private static StandardStringDigester getDigester(final CipherAlgorithm cipherAlgorithm) {\n+    private StandardStringDigester getDigester(final CipherAlgorithm cipherAlgorithm) {\n         StandardStringDigester digester = new StandardStringDigester();\n \n         if (cipherAlgorithm.getAlgorithm().startsWith(\"S-\")) {\n@@ -161,10 +191,4 @@ private static StandardStringDigester getDigester(final CipherAlgorithm cipherAl\n         digester.setStringOutputType(CommonUtils.STRING_OUTPUT_TYPE_HEXADECIMAL);\n         return digester;\n     }\n-\n-    /**\n-     * Private default constructor, for static-only classes.\n-     */\n-    private PasswordEncoder() {\n-    }\n }","previous_filename":"core/src/main/java/org/apache/syncope/core/util/PasswordEncoder.java"},{"sha":"b4189a5efaa1cc8c6f2ff7a4baec6fcfbd6d2b85","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -79,6 +79,8 @@ public final class MappingUtil {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(MappingUtil.class);\n \n+    private static final Encryptor ENCRYPTOR = Encryptor.getInstance();\n+\n     public static <T extends AbstractMappingItem> List<T> getMatchingMappingItems(\n             final Collection<T> items, final IntMappingType type) {\n \n@@ -339,7 +341,7 @@ private static <T extends AbstractAttributable> Map.Entry<String, Attribute> pre\n                     SyncopeUser user = (SyncopeUser) subject;\n                     if (user.canDecodePassword()) {\n                         try {\n-                            passwordAttrValue = PasswordEncoder.decode(user.getPassword(), user.getCipherAlgorithm());\n+                            passwordAttrValue = ENCRYPTOR.decode(user.getPassword(), user.getCipherAlgorithm());\n                         } catch (Exception e) {\n                             LOG.error(\"Could not decode password for {}\", user, e);\n                         }\n@@ -636,6 +638,7 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n      * Get accountId internal value.\n      *\n      * @param attributable attributable\n+     * @param accountIdItem accountId mapping item\n      * @param resource external resource\n      * @param accountIdItem accountid mapping item\n      * @return accountId internal value"},{"sha":"1090ffac591565a061ac568c9bd5bdebfae5a7d7","filename":"core/src/test/java/org/apache/syncope/core/connid/PasswordGeneratorTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGeneratorTest.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -73,7 +73,7 @@ public void testPasswordGenerator() {\n             fail(ex.getMessage());\n         }\n         assertNotNull(password);\n-        user.setPassword(password, CipherAlgorithm.SHA1, 0);\n+        user.setPassword(password, CipherAlgorithm.SHA, 0);\n         userDAO.save(user);\n     }\n "},{"sha":"8b0af5562640ccdb2674e4b675e18769bdf11128","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/AttrTest.java","status":"modified","additions":28,"deletions":3,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FAttrTest.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -18,13 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.dao;\n \n+import static org.junit.Assert.assertEquals;\n import static org.junit.Assert.assertNotNull;\n import static org.junit.Assert.assertNull;\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n import javax.validation.ValidationException;\n-\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.EntityViolationType;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -33,6 +33,7 @@\n import org.apache.syncope.core.persistence.beans.user.USchema;\n import org.apache.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.apache.syncope.core.util.AttributableUtil;\n+import org.apache.syncope.core.util.Encryptor;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n@@ -96,7 +97,7 @@ public void save() throws ClassNotFoundException {\n     }\n \n     @Test\n-    public void checkForEnumType() throws ClassNotFoundException {\n+    public void saveWithEnum() throws ClassNotFoundException {\n         SyncopeUser user = userDAO.find(1L);\n \n         USchema gender = userSchemaDAO.find(\"gender\", USchema.class);\n@@ -122,7 +123,7 @@ public void checkForEnumType() throws ClassNotFoundException {\n \n         InvalidEntityException iee = null;\n         try {\n-            user = userDAO.save(user);\n+            userDAO.save(user);\n         } catch (InvalidEntityException e) {\n             iee = e;\n         }\n@@ -165,6 +166,30 @@ public void validateAndSave() {\n         assertTrue(iee.hasViolation(EntityViolationType.InvalidUSchema));\n     }\n \n+    @Test\n+    public void saveWithEncrypted() throws Exception {\n+        SyncopeUser user = userDAO.find(1L);\n+\n+        final USchema obscureSchema = userSchemaDAO.find(\"obscure\", USchema.class);\n+        assertNotNull(obscureSchema);\n+        assertNotNull(obscureSchema.getSecretKey());\n+        assertNotNull(obscureSchema.getCipherAlgorithm());\n+\n+        UAttr attribute = new UAttr();\n+        attribute.setSchema(obscureSchema);\n+        attribute.addValue(\"testvalue\", AttributableUtil.getInstance(AttributableType.USER));\n+        attribute.setOwner(user);\n+        user.addAttr(attribute);\n+\n+        userDAO.save(user);\n+\n+        UAttr obscure = user.getAttr(\"obscure\");\n+        assertNotNull(obscure);\n+        assertEquals(1, obscure.getValues().size());\n+        assertEquals(Encryptor.getInstance(obscureSchema.getSecretKey()).\n+                encode(\"testvalue\", obscureSchema.getCipherAlgorithm()), obscure.getValues().get(0).getStringValue());\n+    }\n+\n     @Test\n     public void delete() {\n         UAttr attribute = attrDAO.find(104L, UAttr.class);"},{"sha":"f0b9b2625a966873519293f46ec31d9a7c634c6e","filename":"core/src/test/java/org/apache/syncope/core/persistence/dao/SchemaTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FSchemaTest.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -50,7 +50,7 @@ public class SchemaTest extends AbstractDAOTest {\n     @Test\n     public void findAll() {\n         List<USchema> userList = schemaDAO.findAll(USchema.class);\n-        assertEquals(13, userList.size());\n+        assertEquals(14, userList.size());\n \n         List<RSchema> roleList = schemaDAO.findAll(RSchema.class);\n         assertEquals(5, roleList.size());"},{"sha":"9895769e9e942165ed712a79a704e4feb36de7fd","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -64,7 +64,7 @@\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.RESTHeaders;\n import org.apache.syncope.common.types.SchemaType;\n-import org.apache.syncope.core.util.PasswordEncoder;\n+import org.apache.syncope.core.util.Encryptor;\n import org.junit.BeforeClass;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n@@ -179,7 +179,7 @@ public abstract class AbstractTest {\n     public static void securitySetup() {\n         InputStream propStream = null;\n         try {\n-            propStream = PasswordEncoder.class.getResourceAsStream(\"/security.properties\");\n+            propStream = Encryptor.class.getResourceAsStream(\"/security.properties\");\n             Properties props = new Properties();\n             props.load(propStream);\n "},{"sha":"dc037e97691bd20fc85b8123a1f19f0c2b69705a","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.util.AttributableOperations;\n import org.apache.syncope.common.SyncopeClientException;\n+import org.apache.syncope.common.types.CipherAlgorithm;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n import org.junit.runners.MethodSorters;\n@@ -114,11 +115,21 @@ public void createUEnumWithoutEnumeration() {\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidUSchema, e.getType());\n \n-            assertTrue(e.getElements().iterator().next().toString().\n-                    contains(EntityViolationType.InvalidSchemaEnum.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidSchemaEnum.name()));\n         }\n     }\n \n+    @Test\n+    public void createEncrypted() {\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"encrypted\");\n+        schemaTO.setType(AttributeSchemaType.Encrypted);\n+        schemaTO.setCipherAlgorithm(CipherAlgorithm.AES);\n+        schemaTO.setSecretKey(\"huhadfhsjfsfsdkj!####\");\n+\n+        createSchema(AttributableType.MEMBERSHIP, SchemaType.NORMAL, schemaTO);\n+    }\n+\n     @Test\n     public void delete() {\n         SchemaTO schemaTO = buildSchemaTO(\"todelete\", AttributeSchemaType.String);\n@@ -277,9 +288,7 @@ public void issueSYNCOPE418() {\n             fail();\n         } catch (SyncopeClientException e) {\n             assertEquals(ClientExceptionType.InvalidRSchema, e.getType());\n-\n-            assertTrue(e.getElements().iterator().next().toString().\n-                    contains(EntityViolationType.InvalidName.name()));\n+            assertTrue(e.getElements().iterator().next().contains(EntityViolationType.InvalidName.name()));\n         }\n     }\n "},{"sha":"e361007218b3ce7f4a35cfd55a30fbdebb6b9537","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -249,7 +249,7 @@ public void read() {\n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n         assertTrue(taskTO.getExecutions().isEmpty());\n-        \n+\n         final PushTaskTO pushTaskTO = taskService.<PushTaskTO>read(13L);\n         assertEquals(UnmatchingRule.ASSIGN, pushTaskTO.getUnmatchigRule());\n         assertEquals(MatchingRule.UPDATE, pushTaskTO.getMatchigRule());\n@@ -484,8 +484,10 @@ public void reconcileFromLDAP() {\n         assertEquals(1, matchingUsers.getResult().size());\n \n         // Check for SYNCOPE-436\n-        assertEquals(\"syncFromLDAP\", matchingUsers.getResult().get(0).getVirAttrMap().\n-                get(\"virtualReadOnly\").getValues().get(0));\n+        assertEquals(\"syncFromLDAP\",\n+                matchingUsers.getResult().get(0).getVirAttrMap().get(\"virtualReadOnly\").getValues().get(0));\n+        // Check for SYNCOPE-270\n+        assertNotNull(matchingUsers.getResult().get(0).getAttrMap().get(\"obscure\"));\n \n         final RoleTO roleTO = matchingRoles.getResult().iterator().next();\n         assertNotNull(roleTO);"},{"sha":"323336c67df0459dbfb5005acb4646ccba24bf06","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":7,"deletions":4,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -27,7 +27,6 @@\n import static org.junit.Assert.fail;\n \n import java.security.AccessControlException;\n-import java.text.DateFormat;\n import java.text.SimpleDateFormat;\n import java.util.Collections;\n import java.util.Date;\n@@ -133,8 +132,7 @@ public static UserTO getSampleTO(final String email) {\n         userTO.getAttrs().add(attributeTO(\"type\", \"a type\"));\n         userTO.getAttrs().add(attributeTO(\"userId\", uid));\n         userTO.getAttrs().add(attributeTO(\"email\", uid));\n-        DateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n-        userTO.getAttrs().add(attributeTO(\"loginDate\", sdf.format(new Date())));\n+        userTO.getAttrs().add(attributeTO(\"loginDate\", new SimpleDateFormat(\"yyyy-MM-dd\").format(new Date())));\n         userTO.getDerAttrs().add(attributeTO(\"cn\", null));\n         userTO.getVirAttrs().add(attributeTO(\"virtualdata\", \"virtualvalue\"));\n         return userTO;\n@@ -712,7 +710,7 @@ public void update() {\n         assertTrue(userTO.getCreationDate().before(userTO.getLastChangeDate()));\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n-        passwordTestUser.setPassword(\"new2Password\", CipherAlgorithm.SHA1, 0);\n+        passwordTestUser.setPassword(\"new2Password\", CipherAlgorithm.SHA, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         assertEquals(1, userTO.getMemberships().size());\n@@ -1757,17 +1755,22 @@ public void issueSYNCOPE357() {\n \n         // 2. create user with membership of the above role\n         UserTO userTO = getUniqueSampleTO(\"syncope357@syncope.apache.org\");\n+        userTO.getAttrs().add(attributeTO(\"obscure\", \"valueToBeObscured\"));\n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(roleTO.getId());\n         userTO.getMemberships().add(membershipTO);\n \n         userTO = createUser(userTO);\n         assertTrue(userTO.getResources().contains(RESOURCE_NAME_LDAP));\n+        assertNotNull(userTO.getAttrMap().get(\"obscure\"));\n \n         // 3. read user on resource\n         ConnObjectTO connObj = resourceService.getConnectorObject(\n                 RESOURCE_NAME_LDAP, AttributableType.USER, userTO.getId());\n         assertNotNull(connObj);\n+        AttributeTO registeredAddress = connObj.getAttrMap().get(\"registeredAddress\");\n+        assertNotNull(registeredAddress);\n+        assertEquals(userTO.getAttrMap().get(\"obscure\").getValues(), registeredAddress.getValues());\n \n         // 4. remove role\n         roleService.delete(roleTO.getId());"},{"sha":"1fd34f2007666331a812482ff77742d055e64e09","filename":"core/src/test/java/org/apache/syncope/core/security/PasswordEncoderTest.java","status":"modified","additions":12,"deletions":13,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -23,38 +23,37 @@\n import static org.junit.Assert.assertTrue;\n \n import org.apache.syncope.common.types.CipherAlgorithm;\n-import org.apache.syncope.core.util.PasswordEncoder;\n+import org.apache.syncope.core.util.Encryptor;\n import org.junit.Test;\n \n /**\n- * Testclass to test all encryption algorithms.\n+ * Test class to test all encryption algorithms.\n  */\n public class PasswordEncoderTest {\n \n     private final String password = \"password\";\n-    \n+\n+    private final Encryptor encryptor = Encryptor.getInstance();\n+\n     /**\n-     * Verify all algorithms\n+     * Verify all algorithms.\n      */\n     @Test\n-    public void testEncoder()\n-            throws Exception {\n-\n+    public void testEncoder() throws Exception {\n         for (CipherAlgorithm cipherAlgorithm : CipherAlgorithm.values()) {\n-            final String encPassword = PasswordEncoder.encode(password, cipherAlgorithm);\n+            final String encPassword = encryptor.encode(password, cipherAlgorithm);\n \n             assertNotNull(encPassword);\n-            assertTrue(PasswordEncoder.verify(password, cipherAlgorithm, encPassword));\n-            assertFalse(PasswordEncoder.verify(\"pass\", cipherAlgorithm, encPassword));\n+            assertTrue(encryptor.verify(password, cipherAlgorithm, encPassword));\n+            assertFalse(encryptor.verify(\"pass\", cipherAlgorithm, encPassword));\n \n             // check that same password encoded with BCRYPT or Salted versions results in different digest\n             if (cipherAlgorithm.equals(CipherAlgorithm.BCRYPT) || cipherAlgorithm.getAlgorithm().startsWith(\"S-\")) {\n-                final String encSamePassword = PasswordEncoder.encode(password, cipherAlgorithm);\n+                final String encSamePassword = encryptor.encode(password, cipherAlgorithm);\n                 assertNotNull(encSamePassword);\n                 assertFalse(encSamePassword.equals(encPassword));\n-                assertTrue(PasswordEncoder.verify(password, cipherAlgorithm, encSamePassword));\n+                assertTrue(encryptor.verify(password, cipherAlgorithm, encSamePassword));\n             }\n         }\n-\n     }\n }"},{"sha":"d91ee803899b1222e6c89046d0fe778a9cd7b2bc","filename":"core/src/test/resources/content.xml","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/f62322c85fbc26a10ef2605e7f6b81dc98401006/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=f62322c85fbc26a10ef2605e7f6b81dc98401006","patch":"@@ -173,6 +173,9 @@ under the License.\n            mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n   <USchema name=\"makeItDouble\" type=\"Long\"\n            mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n+  <USchema name=\"obscure\" type=\"Encrypted\"\n+           mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n+           secretKey=\"7abcdefghilmnopqrstuvz9#\" cipherAlgorithm=\"SHA\"/>\n \n   <UDerSchema name=\"csvuserid\" expression=\"firstname + ',' + surname\"/>\n   <UDerSchema name=\"cn\" expression=\"surname + ', ' + firstname\"/>\n@@ -753,6 +756,9 @@ under the License.\n   <UMappingItem id=\"319\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n                 extAttrName=\"givenname\" intAttrName=\"virtualReadOnly\" intMappingType=\"UserVirtualSchema\"\n                 mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n+  <UMappingItem id=\"320\" accountid=\"0\" password=\"0\" mapping_id=\"11\"\n+                extAttrName=\"registeredAddress\" intAttrName=\"obscure\" intMappingType=\"UserSchema\"\n+                mandatoryCondition=\"false\" purpose=\"BOTH\"/>\n   \n   <RMapping id=\"1\" resource_name=\"resource-ldap\"\n             accountlink=\"&apos;cn=&apos; + name + &apos;,ou=groups,o=isp&apos;\"/>"}]}