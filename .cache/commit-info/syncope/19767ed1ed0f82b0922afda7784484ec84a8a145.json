{"sha":"19767ed1ed0f82b0922afda7784484ec84a8a145","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE5NzY3ZWQxZWQwZjgyYjA5MjJhZmRhNzc4NDQ4NGVjODRhOGExNDU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-16T15:53:25Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-12-16T15:53:25Z"},"message":"(Fixes issue #59)\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246700 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"84b13dd5d15ef7f4d6cf942ce9ff88aeab552bc5","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/84b13dd5d15ef7f4d6cf942ce9ff88aeab552bc5"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/19767ed1ed0f82b0922afda7784484ec84a8a145","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/19767ed1ed0f82b0922afda7784484ec84a8a145","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/19767ed1ed0f82b0922afda7784484ec84a8a145","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/19767ed1ed0f82b0922afda7784484ec84a8a145/comments","author":null,"committer":null,"parents":[{"sha":"f739d3d4b44b7762cc444fba6e6868127cd75c79","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/f739d3d4b44b7762cc444fba6e6868127cd75c79","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/f739d3d4b44b7762cc444fba6e6868127cd75c79"}],"stats":{"total":1318,"additions":1100,"deletions":218},"files":[{"sha":"16fbd94653aa0325da398434f21ac0df171dfc36","filename":"client/src/main/java/org/syncope/client/mod/RoleMod.java","status":"modified","additions":32,"deletions":2,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FRoleMod.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -14,12 +14,23 @@\n  */\n package org.syncope.client.mod;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class RoleMod extends AbstractAttributableMod {\n \n     private String name;\n+\n     private boolean changeInheritAttributes;\n+\n     private boolean changeInheritDerivedAttributes;\n \n+    private List<String> entitlements;\n+\n+    public RoleMod() {\n+        entitlements = new ArrayList<String>();\n+    }\n+\n     public boolean isChangeInheritAttributes() {\n         return changeInheritAttributes;\n     }\n@@ -45,4 +56,23 @@ public String getName() {\n     public void setName(String name) {\n         this.name = name;\n     }\n+\n+    public boolean addEntitlement(String entitlement) {\n+        return entitlements.add(entitlement);\n+    }\n+\n+    public boolean removeEntitlement(String entitlement) {\n+        return entitlements.remove(entitlement);\n+    }\n+\n+    public List<String> getEntitlements() {\n+        return entitlements;\n+    }\n+\n+    public void setEntitlements(List<String> entitlements) {\n+        this.entitlements.clear();\n+        if (entitlements != null || !entitlements.isEmpty()) {\n+            this.entitlements.addAll(entitlements);\n+        }\n+    }\n }"},{"sha":"34eb7772f8056e4488255e6cefe0d58949cc665c","filename":"client/src/main/java/org/syncope/client/to/RoleTO.java","status":"modified","additions":32,"deletions":1,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -14,13 +14,25 @@\n  */\n package org.syncope.client.to;\n \n+import java.util.ArrayList;\n+import java.util.List;\n+\n public class RoleTO extends AbstractAttributableTO {\n \n     private String name;\n+\n     private long parent;\n+\n     private boolean inheritAttributes;\n+\n     private boolean inheritDerivedAttributes;\n \n+    private List<String> entitlements;\n+\n+    public RoleTO() {\n+        entitlements = new ArrayList<String>();\n+    }\n+\n     public String getName() {\n         return name;\n     }\n@@ -51,7 +63,26 @@ public boolean isInheritDerivedAttributes() {\n \n     public void setInheritDerivedAttributes(\n             final boolean inheritDerivedAttributes) {\n-        \n+\n         this.inheritDerivedAttributes = inheritDerivedAttributes;\n     }\n+\n+    public boolean addEntitlement(String entitlement) {\n+        return entitlements.add(entitlement);\n+    }\n+\n+    public boolean removeEntitlement(String entitlement) {\n+        return entitlements.remove(entitlement);\n+    }\n+\n+    public List<String> getEntitlements() {\n+        return entitlements;\n+    }\n+\n+    public void setEntitlements(List<String> entitlements) {\n+        this.entitlements.clear();\n+        if (entitlements != null || !entitlements.isEmpty()) {\n+            this.entitlements.addAll(entitlements);\n+        }\n+    }\n }"},{"sha":"1229254f40dd6b5c69b2b877a10f6f06c88ea86f","filename":"console/src/main/java/org/syncope/console/SyncopeApplication.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2FSyncopeApplication.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -75,17 +75,17 @@ public void setupAuthorizations() {\n         MetaDataRoleAuthorizationStrategy.authorize(Schema.class,\n                 \"SCHEMA_LIST\");\n         MetaDataRoleAuthorizationStrategy.authorize(Roles.class,\n-                \"ROLES_LIST\");\n+                \"ROLE_LIST\");\n         MetaDataRoleAuthorizationStrategy.authorize(Connectors.class,\n-                \"CONNECTORS_LIST\");\n+                \"CONNECTOR_LIST\");\n         MetaDataRoleAuthorizationStrategy.authorize(Resources.class,\n-                \"RESOURCES_LIST\");\n+                \"RESOURCE_LIST\");\n         MetaDataRoleAuthorizationStrategy.authorize(Users.class,\n                 \"USER_LIST\");\n         MetaDataRoleAuthorizationStrategy.authorize(Report.class,\n                 \"REPORT_LIST\");\n         MetaDataRoleAuthorizationStrategy.authorize(Tasks.class,\n-                \"TASKS_LIST\");\n+                \"TASK_LIST\");\n         MetaDataRoleAuthorizationStrategy.authorize(Configuration.class,\n                 \"CONFIGURATION_LIST\");\n     }\n@@ -144,4 +144,4 @@ protected Class<? extends AuthenticatedWebSession> getWebSessionClass() {\n     protected Class<? extends WebPage> getSignInPageClass() {\n         return Login.class;\n     }\n-}\n\\ No newline at end of file\n+}"},{"sha":"923fd1bde463a2e7223826c24acce35edad36fde","filename":"console/src/main/java/org/syncope/console/pages/Login.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FLogin.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -151,23 +151,23 @@ public List<String> getAdminRoles() {\n         roles.add(\"SCHEMA_DELETE\");\n         roles.add(\"SCHEMA_UPDATE\");\n \n-        roles.add(\"ROLES_CREATE\");\n-        roles.add(\"ROLES_LIST\");\n-        roles.add(\"ROLES_READ\");\n-        roles.add(\"ROLES_DELETE\");\n-        roles.add(\"ROLES_UPDATE\");\n-\n-        roles.add(\"RESOURCES_CREATE\");\n-        roles.add(\"RESOURCES_LIST\");\n-        roles.add(\"RESOURCES_READ\");\n-        roles.add(\"RESOURCES_DELETE\");\n-        roles.add(\"RESOURCES_UPDATE\");\n-\n-        roles.add(\"CONNECTORS_CREATE\");\n-        roles.add(\"CONNECTORS_LIST\");\n-        roles.add(\"CONNECTORS_READ\");\n-        roles.add(\"CONNECTORS_DELETE\");\n-        roles.add(\"CONNECTORS_UPDATE\");\n+        roles.add(\"ROLE_CREATE\");\n+        roles.add(\"ROLE_LIST\");\n+        roles.add(\"ROLE_READ\");\n+        roles.add(\"ROLE_DELETE\");\n+        roles.add(\"ROLE_UPDATE\");\n+\n+        roles.add(\"RESOURCE_CREATE\");\n+        roles.add(\"RESOURCE_LIST\");\n+        roles.add(\"RESOURCE_READ\");\n+        roles.add(\"RESOURCE_DELETE\");\n+        roles.add(\"RESOURCE_UPDATE\");\n+\n+        roles.add(\"CONNECTOR_CREATE\");\n+        roles.add(\"CONNECTOR_LIST\");\n+        roles.add(\"CONNECTOR_READ\");\n+        roles.add(\"CONNECTOR_DELETE\");\n+        roles.add(\"CONNECTOR_UPDATE\");\n \n         roles.add(\"REPORT_LIST\");\n \n@@ -177,12 +177,12 @@ public List<String> getAdminRoles() {\n         roles.add(\"CONFIGURATION_DELETE\");\n         roles.add(\"CONFIGURATION_UPDATE\");\n \n-        roles.add(\"TASKS_CREATE\");\n-        roles.add(\"TASKS_LIST\");\n-        roles.add(\"TASKS_READ\");\n-        roles.add(\"TASKS_DELETE\");\n-        roles.add(\"TASKS_UPDATE\");\n-        roles.add(\"TASKS_EXECUTE\");\n+        roles.add(\"TASK_CREATE\");\n+        roles.add(\"TASK_LIST\");\n+        roles.add(\"TASK_READ\");\n+        roles.add(\"TASK_DELETE\");\n+        roles.add(\"TASK_UPDATE\");\n+        roles.add(\"TASK_EXECUTE\");\n \n         return roles;\n     }\n@@ -202,15 +202,15 @@ public List<String> getManagerRoles() {\n //        roles.add(\"SCHEMA_DELETE\");\n //        roles.add(\"SCHEMA_UPDATE\");\n \n-         roles.add(\"CONNECTORS_LIST\");\n+         roles.add(\"CONNECTOR_LIST\");\n          roles.add(\"REPORT_LIST\");\n \n-//        roles.add(\"ROLES_CREATE\");\n-        roles.add(\"ROLES_LIST\");\n-        roles.add(\"ROLES_READ\");\n-//        roles.add(\"ROLES_DELETE\");\n-//        roles.add(\"ROLES_UPDATE\");\n-        roles.add(\"TASKS_LIST\");\n+//        roles.add(\"ROLE_CREATE\");\n+        roles.add(\"ROLE_LIST\");\n+        roles.add(\"ROLE_READ\");\n+//        roles.add(\"ROLE_DELETE\");\n+//        roles.add(\"ROLE_UPDATE\");\n+        roles.add(\"TASK_LIST\");\n \n         return roles;\n     }"},{"sha":"58de79a04e740876a459370e1e3232710ff20a29","filename":"console/src/main/java/org/syncope/console/rest/AuthRestClient.java","status":"modified","additions":30,"deletions":30,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FAuthRestClient.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -97,23 +97,23 @@ public List<String> getAdminRoles() {\n         roles.add(\"SCHEMA_DELETE\");\n         roles.add(\"SCHEMA_UPDATE\");\n \n-        roles.add(\"ROLES_CREATE\");\n-        roles.add(\"ROLES_LIST\");\n-        roles.add(\"ROLES_READ\");\n-        roles.add(\"ROLES_DELETE\");\n-        roles.add(\"ROLES_UPDATE\");\n-\n-        roles.add(\"RESOURCES_CREATE\");\n-        roles.add(\"RESOURCES_LIST\");\n-        roles.add(\"RESOURCES_READ\");\n-        roles.add(\"RESOURCES_DELETE\");\n-        roles.add(\"RESOURCES_UPDATE\");\n-\n-        roles.add(\"CONNECTORS_CREATE\");\n-        roles.add(\"CONNECTORS_LIST\");\n-        roles.add(\"CONNECTORS_READ\");\n-        roles.add(\"CONNECTORS_DELETE\");\n-        roles.add(\"CONNECTORS_UPDATE\");\n+        roles.add(\"ROLE_CREATE\");\n+        roles.add(\"ROLE_LIST\");\n+        roles.add(\"ROLE_READ\");\n+        roles.add(\"ROLE_DELETE\");\n+        roles.add(\"ROLE_UPDATE\");\n+\n+        roles.add(\"RESOURCE_CREATE\");\n+        roles.add(\"RESOURCE_LIST\");\n+        roles.add(\"RESOURCE_READ\");\n+        roles.add(\"RESOURCE_DELETE\");\n+        roles.add(\"RESOURCE_UPDATE\");\n+\n+        roles.add(\"CONNECTOR_CREATE\");\n+        roles.add(\"CONNECTOR_LIST\");\n+        roles.add(\"CONNECTOR_READ\");\n+        roles.add(\"CONNECTOR_DELETE\");\n+        roles.add(\"CONNECTOR_UPDATE\");\n \n         roles.add(\"REPORT_LIST\");\n \n@@ -123,12 +123,12 @@ public List<String> getAdminRoles() {\n         roles.add(\"CONFIGURATION_DELETE\");\n         roles.add(\"CONFIGURATION_UPDATE\");\n \n-        roles.add(\"TASKS_CREATE\");\n-        roles.add(\"TASKS_LIST\");\n-        roles.add(\"TASKS_READ\");\n-        roles.add(\"TASKS_DELETE\");\n-        roles.add(\"TASKS_UPDATE\");\n-        roles.add(\"TASKS_EXECUTE\");\n+        roles.add(\"TASK_CREATE\");\n+        roles.add(\"TASK_LIST\");\n+        roles.add(\"TASK_READ\");\n+        roles.add(\"TASK_DELETE\");\n+        roles.add(\"TASK_UPDATE\");\n+        roles.add(\"TASK_EXECUTE\");\n \n         return roles;\n     }\n@@ -148,15 +148,15 @@ public List<String> getManagerRoles() {\n //        roles.add(\"SCHEMA_DELETE\");\n //        roles.add(\"SCHEMA_UPDATE\");\n \n-         roles.add(\"CONNECTORS_LIST\");\n+         roles.add(\"CONNECTOR_LIST\");\n          roles.add(\"REPORT_LIST\");\n \n-//        roles.add(\"ROLES_CREATE\");\n-        roles.add(\"ROLES_LIST\");\n-        roles.add(\"ROLES_READ\");\n-//        roles.add(\"ROLES_DELETE\");\n-//        roles.add(\"ROLES_UPDATE\");\n-        roles.add(\"TASKS_LIST\");\n+//        roles.add(\"ROLE_CREATE\");\n+        roles.add(\"ROLE_LIST\");\n+        roles.add(\"ROLE_READ\");\n+//        roles.add(\"ROLE_DELETE\");\n+//        roles.add(\"ROLE_UPDATE\");\n+        roles.add(\"TASK_LIST\");\n \n         return roles;\n     }"},{"sha":"abfced7113a479e1aec14f653f162c056a9f9a5c","filename":"console/src/main/resources/authorizations.xml","status":"modified","additions":34,"deletions":21,"changes":55,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Fauthorizations.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -1,4 +1,17 @@\n-<?xml version=\"1.0\"?>\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n <!--\n action@id = list|create|read|update|delete\n \n@@ -55,45 +68,45 @@ page@id= Schema|Users|Roles|Resources|Connectors|Report|Configuration|Task\n \n     <page id=\"Roles\">\n         <action id=\"list\">\n-            <entitlement>ROLES_LIST</entitlement>\n+            <entitlement>ROLE_LIST</entitlement>\n         </action>\n \n         <action id=\"create\">\n-            <entitlement>ROLES_CREATE</entitlement>\n+            <entitlement>ROLE_CREATE</entitlement>\n         </action>\n \n         <action id=\"read\">\n-            <entitlement>ROLES_READ</entitlement>\n+            <entitlement>ROLE_READ</entitlement>\n         </action>\n \n         <action id=\"update\">\n-            <entitlement>ROLES_UPDATE</entitlement>\n+            <entitlement>ROLE_UPDATE</entitlement>\n         </action>\n \n         <action id=\"delete\">\n-            <entitlement>ROLES_DELETE</entitlement>\n+            <entitlement>ROLE_DELETE</entitlement>\n         </action>\n     </page>\n \n     <page id=\"Resources\">\n         <action id=\"list\">\n-            <entitlement>RESOURCES_LIST</entitlement>\n+            <entitlement>RESOURCE_LIST</entitlement>\n         </action>\n \n         <action id=\"create\">\n-            <entitlement>RESOURCES_CREATE</entitlement>\n+            <entitlement>RESOURCE_CREATE</entitlement>\n         </action>\n \n         <action id=\"read\">\n-            <entitlement>RESOURCES_READ</entitlement>\n+            <entitlement>RESOURCE_READ</entitlement>\n         </action>\n \n         <action id=\"update\">\n-            <entitlement>RESOURCES_UPDATE</entitlement>\n+            <entitlement>RESOURCE_UPDATE</entitlement>\n         </action>\n \n         <action id=\"delete\">\n-            <entitlement>RESOURCES_DELETE</entitlement>\n+            <entitlement>RESOURCE_DELETE</entitlement>\n         </action>\n     </page>\n \n@@ -105,23 +118,23 @@ page@id= Schema|Users|Roles|Resources|Connectors|Report|Configuration|Task\n \n     <page id=\"Connectors\">\n        <action id=\"list\">\n-            <entitlement>CONNECTORS_LIST</entitlement>\n+            <entitlement>CONNECTOR_LIST</entitlement>\n         </action>\n \n         <action id=\"create\">\n-            <entitlement>CONNECTORS_CREATE</entitlement>\n+            <entitlement>CONNECTOR_CREATE</entitlement>\n         </action>\n \n         <action id=\"read\">\n-            <entitlement>CONNECTORS_READ</entitlement>\n+            <entitlement>CONNECTOR_READ</entitlement>\n         </action>\n \n         <action id=\"update\">\n-            <entitlement>CONNECTORS_UPDATE</entitlement>\n+            <entitlement>CONNECTOR_UPDATE</entitlement>\n         </action>\n \n         <action id=\"delete\">\n-            <entitlement>CONNECTORS_DELETE</entitlement>\n+            <entitlement>CONNECTOR_DELETE</entitlement>\n         </action>\n     </page>\n \n@@ -153,19 +166,19 @@ page@id= Schema|Users|Roles|Resources|Connectors|Report|Configuration|Task\n \n     <page id=\"Tasks\">\n        <action id=\"list\">\n-            <entitlement>TASKS_LIST</entitlement>\n+            <entitlement>TASK_LIST</entitlement>\n         </action>\n \n         <action id=\"execute\">\n-            <entitlement>TASKS_EXECUTE</entitlement>\n+            <entitlement>TASK_EXECUTE</entitlement>\n         </action>\n \n         <action id=\"read\">\n-            <entitlement>TASKS_READ</entitlement>\n+            <entitlement>TASK_READ</entitlement>\n         </action>\n \n         <action id=\"delete\">\n-            <entitlement>TASKS_DELETE</entitlement>\n+            <entitlement>TASK_DELETE</entitlement>\n         </action>\n     </page>\n-</auth>\n\\ No newline at end of file\n+</auth>"},{"sha":"c8fe65788135398ff7e1f661f06a40d7e841993a","filename":"core/pom.xml","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -85,6 +85,11 @@\n             <artifactId>commons-email</artifactId>\n         </dependency>\n \n+        <dependency>\n+            <groupId>commons-httpclient</groupId>\n+            <artifactId>commons-httpclient</artifactId>\n+        </dependency>\n+\n         <dependency>\n             <groupId>opensymphony</groupId>\n             <artifactId>osworkflow</artifactId>\n@@ -130,6 +135,14 @@\n             <groupId>org.springframework</groupId>\n             <artifactId>spring-tx</artifactId>\n         </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-web</artifactId>\n+        </dependency>\n+        <dependency>\n+            <groupId>org.springframework.security</groupId>\n+            <artifactId>spring-security-config</artifactId>\n+        </dependency>\n \n         <dependency>\n             <groupId>cglib</groupId>\n@@ -374,6 +387,7 @@\n                             <classesDirectory>${project.build.directory}/test-classes</classesDirectory>\n                             <includes>\n                                 <include>**/persistence.properties</include>\n+                                <include>**/security.properties</include>\n                                 <include>**/ehcache.xml</include>\n                                 <include>**/content.xml</include>\n                             </includes>\n@@ -399,6 +413,7 @@\n                         <configuration>\n                             <packagingExcludes>\n                                 WEB-INF/classes/persistence.properties,\n+                                WEB-INF/classes/security.properties,\n                                 WEB-INF/classes/ehcache.xml,\n                                 WEB-INF/classes/content.xml,\n                                 WEB-INF/classes/beans.xml"},{"sha":"d279a66c49adaf29816bb33e16fc636809f8fee3","filename":"core/src/main/java/org/syncope/core/persistence/beans/Entitlement.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FEntitlement.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -22,14 +22,19 @@\n import javax.persistence.FetchType;\n import javax.persistence.Id;\n import javax.persistence.ManyToMany;\n+import org.hibernate.annotations.Cache;\n+import org.hibernate.annotations.CacheConcurrencyStrategy;\n \n @Entity\n+@Cache(usage = CacheConcurrencyStrategy.TRANSACTIONAL)\n public class Entitlement extends AbstractBaseBean {\n \n     @Id\n     private String name;\n+\n     @Column(nullable = true)\n     private String description;\n+\n     @ManyToMany(fetch = FetchType.EAGER, mappedBy = \"entitlements\")\n     private Set<SyncopeRole> roles;\n "},{"sha":"68260bc8af17dabda595bbe3adf9155bab0a8a12","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":12,"deletions":5,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -166,13 +166,20 @@ public void setPassword(final String password) {\n         if (password == null) {\n             this.password = null;\n         } else {\n-            MessageDigest md = null;\n             try {\n-                md = MessageDigest.getInstance(\"MD5\");\n-                md.update(password.getBytes());\n-                this.password = new String(md.digest());\n+                MessageDigest algorithm = MessageDigest.getInstance(\"MD5\");\n+                algorithm.reset();\n+                algorithm.update(password.getBytes());\n+\n+                byte messageDigest[] = algorithm.digest();\n+                StringBuilder hexString = new StringBuilder();\n+                for (int i = 0; i < messageDigest.length; i++) {\n+                    hexString.append(\n+                            Integer.toHexString(0xFF & messageDigest[i]));\n+                }\n+                this.password = hexString.toString();\n             } catch (NoSuchAlgorithmException e) {\n-                LOG.error(\"Could not find required digest \");\n+                LOG.error(\"Could not find MD5 algorithm\", e);\n             }\n         }\n     }"},{"sha":"4379e2a33406553a3ed6c26aa97adb5771ca0517","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -16,6 +16,7 @@\n \n import java.util.List;\n import javax.persistence.Query;\n+import org.hibernate.Session;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Entitlement;\n@@ -39,6 +40,10 @@ public Entitlement find(String name) {\n     public List<Entitlement> findAll() {\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM Entitlement e\");\n+        query.setHint(\"org.hibernate.cacheable\", true);\n+        query.setHint(\"org.hibernate.cacheRegion\",\n+                Entitlement.class.getName());\n+\n         return query.getResultList();\n     }\n \n@@ -60,5 +65,9 @@ public void delete(String name) {\n         }\n \n         entityManager.remove(entitlement);\n+\n+        // Make empty Entitlement query cache\n+        ((Session) entityManager.getDelegate()).getSessionFactory().\n+                evictQueries(Entitlement.class.getName());\n     }\n }"},{"sha":"d6772d6d6f5a255bb631c9518b39a2f7dd0488a1","filename":"core/src/main/java/org/syncope/core/rest/controller/AuthenticationController.java","status":"added","additions":44,"deletions":0,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAuthenticationController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -0,0 +1,44 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.springframework.security.core.GrantedAuthority;\n+import org.springframework.security.core.context.SecurityContextHolder;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+\n+@Controller\n+@RequestMapping(\"/auth\")\n+public class AuthenticationController extends AbstractController {\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/entitlements\")\n+    public Set<String> getEntitlements() {\n+        Set<String> result = new HashSet<String>(\n+                SecurityContextHolder.getContext().\n+                getAuthentication().getAuthorities().size());\n+        for (GrantedAuthority authority :\n+                SecurityContextHolder.getContext().\n+                getAuthentication().getAuthorities()) {\n+\n+            result.add(authority.getAuthority());\n+        }\n+\n+        return result;\n+    }\n+}"},{"sha":"75062078c3eb015b38ba3c0d137e55bc97245506","filename":"core/src/main/java/org/syncope/core/rest/controller/ConfigurationController.java","status":"modified","additions":21,"deletions":15,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConfigurationController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -23,6 +23,7 @@\n import javax.servlet.http.HttpServletResponse;\n import org.reflections.Reflections;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -42,18 +43,19 @@ public class ConfigurationController extends AbstractController {\n \n     @Autowired\n     private SyncopeConfDAO syncopeConfigurationDAO;\n+\n     @Autowired\n     private ConfigurationDataBinder configurationDataBinder;\n \n+    @PreAuthorize(\"hasRole('CONFIGURATION_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n-    public ConfigurationTO create(HttpServletRequest request,\n-            HttpServletResponse response,\n-            @RequestBody ConfigurationTO configurationTO) {\n+    public ConfigurationTO create(final HttpServletRequest request,\n+            final HttpServletResponse response,\n+            @RequestBody final ConfigurationTO configurationTO) {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"create called with parameters \" + configurationTO);\n-        }\n+        LOG.debug(\"Configuration create called with parameters {}\",\n+                configurationTO);\n \n         SyncopeConf syncopeConfiguration =\n                 configurationDataBinder.createSyncopeConfiguration(\n@@ -67,17 +69,18 @@ public ConfigurationTO create(HttpServletRequest request,\n         return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n     }\n \n+    @PreAuthorize(\"hasRole('CONFIGURATION_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{confKey}\")\n-    public void delete(HttpServletResponse response,\n-            @PathVariable(\"confKey\") String confKey)\n+    public void delete(final HttpServletResponse response,\n+            @PathVariable(\"confKey\") final String confKey)\n             throws MissingConfKeyException {\n \n-        SyncopeConf syncopeConfiguration =\n-                syncopeConfigurationDAO.find(confKey);\n+        syncopeConfigurationDAO.find(confKey);\n         syncopeConfigurationDAO.delete(confKey);\n     }\n \n+    @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     public List<ConfigurationTO> list(HttpServletRequest request) {\n@@ -94,13 +97,14 @@ public List<ConfigurationTO> list(HttpServletRequest request) {\n         return configurationTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('CONFIGURATION_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{confKey}\")\n     public ConfigurationTO read(HttpServletResponse response,\n             @PathVariable(\"confKey\") String confKey)\n             throws MissingConfKeyException {\n \n-        ConfigurationTO result = null;\n+        ConfigurationTO result;\n         try {\n             SyncopeConf syncopeConfiguration =\n                     syncopeConfigurationDAO.find(confKey);\n@@ -117,10 +121,11 @@ public ConfigurationTO read(HttpServletResponse response,\n         return result;\n     }\n \n+    @PreAuthorize(\"hasRole('CONFIGURATION_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n-    public ConfigurationTO update(HttpServletResponse response,\n-            @RequestBody ConfigurationTO configurationTO)\n+    public ConfigurationTO update(final HttpServletResponse response,\n+            @RequestBody final ConfigurationTO configurationTO)\n             throws MissingConfKeyException {\n \n         SyncopeConf syncopeConfiguration =\n@@ -131,6 +136,7 @@ public ConfigurationTO update(HttpServletResponse response,\n         return configurationDataBinder.getConfigurationTO(syncopeConfiguration);\n     }\n \n+    @PreAuthorize(\"hasRole('CONFIGURATION_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/validators\")\n     public ModelAndView getValidators() {"},{"sha":"071f4e4905a0310424a0f338ef01f1781bffe323","filename":"core/src/main/java/org/syncope/core/rest/controller/ConnectorInstanceController.java","status":"modified","additions":37,"deletions":37,"changes":74,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FConnectorInstanceController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -27,6 +27,7 @@\n import org.identityconnectors.framework.api.ConnectorInfo;\n import org.identityconnectors.framework.api.ConnectorInfoManager;\n import org.identityconnectors.framework.api.ConnectorKey;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.to.ConnectorBundleTO;\n@@ -45,19 +46,20 @@ public class ConnectorInstanceController extends AbstractController {\n \n     @Autowired\n     private ConnectorInstanceDAO connectorInstanceDAO;\n+\n     @Autowired\n     private ConnectorInstanceDataBinder binder;\n \n+    @PreAuthorize(\"hasRole('CONNECTOR_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n-    public ConnectorInstanceTO create(HttpServletResponse response,\n-            @RequestBody ConnectorInstanceTO connectorTO)\n+    public ConnectorInstanceTO create(final HttpServletResponse response,\n+            @RequestBody final ConnectorInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException,\n             MissingConfKeyException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"Create called with configuration \" + connectorTO);\n-        }\n+        LOG.debug(\"ConnectorInstance create called with configuration {}\",\n+                connectorTO);\n \n         ConnectorInstance connectorInstance = null;\n         try {\n@@ -72,19 +74,19 @@ public ConnectorInstanceTO create(HttpServletResponse response,\n         // and register the new connector instance for later usage\n         connectorInstance = connectorInstanceDAO.save(connectorInstance);\n \n+        response.setStatus(HttpServletResponse.SC_CREATED);\n         return binder.getConnectorInstanceTO(connectorInstance);\n     }\n \n+    @PreAuthorize(\"hasRole('CONNECTOR_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n-    public ConnectorInstanceTO update(HttpServletResponse response,\n-            @RequestBody ConnectorInstanceTO connectorTO)\n+    public ConnectorInstanceTO update(\n+            @RequestBody final ConnectorInstanceTO connectorTO)\n             throws SyncopeClientCompositeErrorException, NotFoundException,\n             MissingConfKeyException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"update called with configuration \" + connectorTO);\n-        }\n+        LOG.debug(\"Connector update called with configuration {}\", connectorTO);\n \n         ConnectorInstance connectorInstance;\n         try {\n@@ -103,26 +105,25 @@ public ConnectorInstanceTO update(HttpServletResponse response,\n         return binder.getConnectorInstanceTO(connectorInstance);\n     }\n \n+    @PreAuthorize(\"hasRole('CONNECTOR_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{connectorId}\")\n-    public void delete(HttpServletResponse response,\n-            @PathVariable(\"connectorId\") Long connectorId)\n+    public void delete(@PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n \n         ConnectorInstance connectorInstance =\n                 connectorInstanceDAO.find(connectorId);\n \n         if (connectorInstance == null) {\n-            if (LOG.isErrorEnabled()) {\n-                LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n-            }\n+            LOG.error(\"Could not find connector '\" + connectorId + \"'\");\n \n             throw new NotFoundException(String.valueOf(connectorId));\n         }\n \n         connectorInstanceDAO.delete(connectorId);\n     }\n \n+    @PreAuthorize(\"hasRole('CONNECTOR_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     public List<ConnectorInstanceTO> list() {\n@@ -138,9 +139,10 @@ public List<ConnectorInstanceTO> list() {\n         return connectorInstanceTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{connectorId}\")\n-    public ConnectorInstanceTO read(HttpServletResponse response,\n+    public ConnectorInstanceTO read(\n             @PathVariable(\"connectorId\") Long connectorId)\n             throws NotFoundException {\n \n@@ -156,11 +158,10 @@ public ConnectorInstanceTO read(HttpServletResponse response,\n         return binder.getConnectorInstanceTO(connectorInstance);\n     }\n \n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/check/{connectorId}\")\n-    public ModelAndView check(HttpServletResponse response,\n-            @PathVariable(\"connectorId\") String connectorId) {\n-\n+    public ModelAndView check(@PathVariable(\"connectorId\") String connectorId) {\n         ConnectorFacadeProxy connector =\n                 ConnectorInstanceLoader.getConnector(connectorId);\n \n@@ -173,16 +174,15 @@ public ModelAndView check(HttpServletResponse response,\n                 verify = Boolean.TRUE;\n             }\n         } catch (RuntimeException ignore) {\n-            if (LOG.isInfoEnabled()) {\n-                LOG.info(\"Connector validation failed\", ignore);\n-            }\n+            LOG.warn(\"Connector validation failed\", ignore);\n         }\n \n         mav.addObject(verify);\n \n         return mav;\n     }\n \n+    @PreAuthorize(\"hasRole('CONNECTOR_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/getBundles\")\n     public List<ConnectorBundleTO> getBundles()\n@@ -193,17 +193,17 @@ public List<ConnectorBundleTO> getBundles()\n \n         List<ConnectorInfo> bundles = manager.getConnectorInfos();\n \n-        if (LOG.isDebugEnabled() && bundles != null) {\n-            LOG.debug(\"#Bundles: \" + bundles.size());\n+        if (bundles != null) {\n+            LOG.debug(\"#Bundles: {}\", bundles.size());\n \n             for (ConnectorInfo bundle : bundles) {\n-                LOG.debug(\"Bundle: \" + bundle.getConnectorDisplayName());\n+                LOG.debug(\"Bundle: {}\", bundle.getConnectorDisplayName());\n             }\n         }\n \n-        ConnectorBundleTO connectorBundleTO = null;\n-        ConnectorKey key = null;\n-        ConfigurationProperties properties = null;\n+        ConnectorBundleTO connectorBundleTO;\n+        ConnectorKey key;\n+        ConfigurationProperties properties;\n \n         List<ConnectorBundleTO> connectorBundleTOs =\n                 new ArrayList<ConnectorBundleTO>();\n@@ -213,11 +213,13 @@ public List<ConnectorBundleTO> getBundles()\n \n             key = bundle.getConnectorKey();\n \n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"\\nBundle name: \" + key.getBundleName()\n-                        + \"\\nBundle version: \" + key.getBundleVersion()\n-                        + \"\\nBundle class: \" + key.getConnectorName());\n-            }\n+            LOG.debug(\"\\nBundle name: {}\"\n+                    + \"\\nBundle version: {}\"\n+                    + \"\\nBundle class: {}\",\n+                    new Object[]{\n+                        key.getBundleName(),\n+                        key.getBundleVersion(),\n+                        key.getConnectorName()});\n \n             connectorBundleTO.setBundleName(key.getBundleName());\n             connectorBundleTO.setConnectorName(key.getConnectorName());\n@@ -228,10 +230,8 @@ public List<ConnectorBundleTO> getBundles()\n \n             connectorBundleTO.setProperties(properties.getPropertyNames());\n \n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Bundle properties: \"\n-                        + connectorBundleTO.getProperties());\n-            }\n+            LOG.debug(\"Bundle properties: {}\",\n+                    connectorBundleTO.getProperties());\n \n             connectorBundleTOs.add(connectorBundleTO);\n         }"},{"sha":"c58e043cc6ac37f16ba56f9718103a82501166ca","filename":"core/src/main/java/org/syncope/core/rest/controller/DerivedSchemaController.java","status":"modified","additions":13,"deletions":3,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FDerivedSchemaController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -19,6 +19,7 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -36,10 +37,13 @@ public class DerivedSchemaController extends AbstractController {\n \n     @Autowired\n     private DerivedSchemaDAO derivedSchemaDAO;\n+\n     @Autowired\n     private DerivedSchemaDataBinder derivedSchemaDataBinder;\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n+    @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/{kind}/create\")\n     public DerivedSchemaTO create(final HttpServletResponse response,\n             @RequestBody final DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") final String kind)\n@@ -57,6 +61,7 @@ public DerivedSchemaTO create(final HttpServletResponse response,\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n+    @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{kind}/delete/{schema}\")\n     public void delete(HttpServletResponse response,\n@@ -77,7 +82,9 @@ public void delete(HttpServletResponse response,\n         }\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n+    @PreAuthorize(\"hasRole('SCHEMA_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{kind}/list\")\n     public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         Class reference = getAttributableUtil(kind).derivedSchemaClass();\n         List<AbstractDerSchema> derivedAttributeSchemas =\n@@ -94,6 +101,7 @@ public List<DerivedSchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         return derivedSchemaTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{kind}/read/{derivedSchema}\")\n     public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n@@ -112,7 +120,9 @@ public DerivedSchemaTO read(@PathVariable(\"kind\") final String kind,\n         return derivedSchemaDataBinder.getDerivedSchemaTO(derivedSchema);\n     }\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n+    @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/{kind}/update\")\n     public DerivedSchemaTO update(\n             @RequestBody final DerivedSchemaTO derivedSchemaTO,\n             @PathVariable(\"kind\") final String kind)"},{"sha":"55db94c8623dc533b60213ca7225b81e695e363c","filename":"core/src/main/java/org/syncope/core/rest/controller/ResourceController.java","status":"modified","additions":13,"deletions":14,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FResourceController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -25,6 +25,7 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.syncope.client.to.ResourceTO;\n@@ -53,6 +54,7 @@ public class ResourceController extends AbstractController {\n     @Autowired\n     private ResourceDataBinder binder;\n \n+    @PreAuthorize(\"hasRole('RESOURCE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public ResourceTO create(final HttpServletResponse response,\n@@ -107,6 +109,7 @@ public ResourceTO create(final HttpServletResponse response,\n         return binder.getResourceTO(resource);\n     }\n \n+    @PreAuthorize(\"hasRole('RESOURCE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public ResourceTO update(final HttpServletResponse response,\n@@ -155,6 +158,7 @@ public ResourceTO update(final HttpServletResponse response,\n         return binder.getResourceTO(resource);\n     }\n \n+    @PreAuthorize(\"hasRole('RESOURCE_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{resourceName}\")\n     public void delete(final HttpServletResponse response,\n@@ -171,6 +175,7 @@ public void delete(final HttpServletResponse response,\n         resourceDAO.delete(resourceName);\n     }\n \n+    @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{resourceName}\")\n@@ -187,6 +192,7 @@ public ResourceTO read(final HttpServletResponse response,\n         return binder.getResourceTO(resource);\n     }\n \n+    @PreAuthorize(\"hasRole('RESOURCE_LIST')\")\n     @Transactional(readOnly = true)\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n@@ -202,6 +208,7 @@ public List<ResourceTO> list(HttpServletResponse response)\n         return binder.getResourceTOs(resources);\n     }\n \n+    @PreAuthorize(\"hasRole('RESOURCE_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{roleName}/mappings\")\n     public List<SchemaMappingTO> getRoleResourcesMapping(\n@@ -235,25 +242,17 @@ public List<SchemaMappingTO> getRoleResourcesMapping(\n \n         Set<TargetResource> resources = role.getTargetResources();\n \n-        List<SchemaMappingTO> resourceMappings = null;\n+        List<SchemaMappingTO> resourceMappings;\n         for (TargetResource resource : resources) {\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"Ask for the mappings of '\" + resource + \"'\");\n-            }\n+            LOG.debug(\"Ask for the mappings of {}\", resource);\n \n             List<SchemaMapping> schemaMappings = resource.getMappings();\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"The mappings of '\" + resource + \"' are '\"\n-                        + schemaMappings + \"'\");\n-            }\n+            LOG.debug(\"The mappings of {} are {}\",\n+                    resource, schemaMappings);\n \n             resourceMappings = binder.getSchemaMappingTOs(schemaMappings);\n-\n-            if (LOG.isDebugEnabled()) {\n-                LOG.debug(\"The mappings TO of '\" + resource + \"' are '\"\n-                        + resourceMappings + \"'\");\n-            }\n+            LOG.debug(\"The mappings TO of {} are {}\",\n+                    resource, resourceMappings);\n \n             roleMappings.addAll(resourceMappings);\n         }"},{"sha":"bdebb9ae076687b9d69e9c5dfd06e19817585364","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"modified","additions":19,"deletions":19,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -20,6 +20,7 @@\n import javax.servlet.http.HttpServletRequest;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -30,7 +31,6 @@\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n-import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.core.rest.data.RoleDataBinder;\n \n @Controller\n@@ -43,18 +43,17 @@ public class RoleController extends AbstractController {\n     @Autowired\n     private RoleDataBinder roleDataBinder;\n \n+    @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public RoleTO create(HttpServletRequest request,\n             HttpServletResponse response,\n             @RequestBody RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"create called with parameters \" + roleTO);\n-        }\n+        LOG.debug(\"Role create called with parameters {}\", roleTO);\n \n-        SyncopeRole role = null;\n+        SyncopeRole role;\n         try {\n             role = roleDataBinder.create(roleTO);\n         } catch (SyncopeClientCompositeErrorException e) {\n@@ -68,23 +67,24 @@ public RoleTO create(HttpServletRequest request,\n         return roleDataBinder.getRoleTO(role);\n     }\n \n+    @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{roleId}\")\n     public void delete(HttpServletResponse response,\n             @PathVariable(\"roleId\") Long roleId)\n             throws NotFoundException {\n \n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n-\n         if (role == null) {\n             LOG.error(\"Could not find role '\" + roleId + \"'\");\n \n-            throw new NotFoundException(String.valueOf(roleId));\n-        } else {\n-            syncopeRoleDAO.delete(roleId);\n+            throw new NotFoundException(\"Role \" + String.valueOf(roleId));\n         }\n+\n+        syncopeRoleDAO.delete(roleId);\n     }\n \n+    @PreAuthorize(\"hasRole('ROLE_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     public List<RoleTO> list(HttpServletRequest request) {\n@@ -97,24 +97,25 @@ public List<RoleTO> list(HttpServletRequest request) {\n         return roleTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/parent/{roleId}\")\n     public RoleTO parent(HttpServletResponse response,\n             @PathVariable(\"roleId\") Long roleId)\n             throws NotFoundException {\n \n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n-\n         if (role == null) {\n             LOG.error(\"Could not find role '\" + roleId + \"'\");\n \n-            throw new NotFoundException(String.valueOf(roleId));\n+            throw new NotFoundException(\"Role \" + String.valueOf(roleId));\n         }\n \n         return role.getParent() == null ? null\n                 : roleDataBinder.getRoleTO(role.getParent());\n     }\n \n+    @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/children/{roleId}\")\n     public List<RoleTO> children(HttpServletResponse response,\n@@ -129,14 +130,14 @@ public List<RoleTO> children(HttpServletResponse response,\n         return roleTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('ROLE_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{roleId}\")\n     public RoleTO read(HttpServletResponse response,\n             @PathVariable(\"roleId\") Long roleId)\n             throws NotFoundException {\n \n         SyncopeRole role = syncopeRoleDAO.find(roleId);\n-\n         if (role == null) {\n             LOG.error(\"Could not find role '\" + roleId + \"'\");\n \n@@ -146,25 +147,24 @@ public RoleTO read(HttpServletResponse response,\n         return roleDataBinder.getRoleTO(role);\n     }\n \n+    @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public RoleTO update(HttpServletResponse response,\n             @RequestBody RoleMod roleMod)\n             throws NotFoundException {\n \n-        if (LOG.isDebugEnabled()) {\n-            LOG.debug(\"update called with parameter \" + roleMod);\n-        }\n+        LOG.debug(\"Role update called with parameter {}\", roleMod);\n \n         SyncopeRole role = syncopeRoleDAO.find(roleMod.getId());\n         if (role == null) {\n-            LOG.error(\"Could not find user '\" + roleMod.getId() + \"'\");\n+            LOG.error(\"Could not find role '\" + roleMod.getId() + \"'\");\n \n-            throw new NotFoundException(String.valueOf(roleMod.getId()));\n+            throw new NotFoundException(\n+                    \"Role \" + String.valueOf(roleMod.getId()));\n         }\n \n-        ResourceOperations resourceOperations =\n-                roleDataBinder.update(role, roleMod);\n+        roleDataBinder.update(role, roleMod);\n         role = syncopeRoleDAO.save(role);\n \n         return roleDataBinder.getRoleTO(role);"},{"sha":"dd272129f53e38eea9a0cead667b2c9b714ee131","filename":"core/src/main/java/org/syncope/core/rest/controller/SchemaController.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FSchemaController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -19,6 +19,7 @@\n import javassist.NotFoundException;\n import javax.servlet.http.HttpServletResponse;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.stereotype.Controller;\n import org.springframework.web.bind.annotation.PathVariable;\n import org.springframework.web.bind.annotation.RequestBody;\n@@ -40,7 +41,9 @@ public class SchemaController extends AbstractController {\n     @Autowired\n     private SchemaDataBinder schemaDataBinder;\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\n+    @PreAuthorize(\"hasRole('SCHEMA_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/{kind}/create\")\n     public SchemaTO create(final HttpServletResponse response,\n             @RequestBody final SchemaTO schemaTO,\n             @PathVariable(\"kind\") final String kind)\n@@ -56,6 +59,7 @@ public SchemaTO create(final HttpServletResponse response,\n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n+    @PreAuthorize(\"hasRole('SCHEMA_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/{kind}/delete/{schema}\")\n     public void delete(@PathVariable(\"kind\") final String kind,\n@@ -73,7 +77,9 @@ public void delete(@PathVariable(\"kind\") final String kind,\n         }\n     }\n \n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n+    @PreAuthorize(\"hasRole('SCHEMA_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/{kind}/list\")\n     public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         Class reference = getAttributableUtil(kind).schemaClass();\n         List<AbstractSchema> schemas = schemaDAO.findAll(reference);\n@@ -86,6 +92,7 @@ public List<SchemaTO> list(@PathVariable(\"kind\") final String kind) {\n         return schemaTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('SCHEMA_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/{kind}/read/{schema}\")\n     public SchemaTO read(@PathVariable(\"kind\") final String kind,\n@@ -102,7 +109,9 @@ public SchemaTO read(@PathVariable(\"kind\") final String kind,\n         return schemaDataBinder.getSchemaTO(schema);\n     }\n \n-    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\n+    @PreAuthorize(\"hasRole('SCHEMA_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/{kind}/update\")\n     public SchemaTO update(@RequestBody final SchemaTO schemaTO,\n             @PathVariable(\"kind\") final String kind)\n             throws SyncopeClientCompositeErrorException, NotFoundException {"},{"sha":"7ef8707b89e043226f88d2d82c261c70c10c71c5","filename":"core/src/main/java/org/syncope/core/rest/controller/TaskController.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FTaskController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -23,6 +23,7 @@\n import java.util.List;\n import javassist.NotFoundException;\n import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.web.bind.annotation.RequestParam;\n import org.syncope.client.to.TaskExecutionTO;\n import org.syncope.client.to.TaskTO;\n@@ -54,6 +55,7 @@ public class TaskController extends AbstractController {\n     @Autowired\n     private PropagationManager propagationManager;\n \n+    @PreAuthorize(\"hasRole('TASK_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     public List<TaskTO> list() {\n@@ -66,6 +68,7 @@ public List<TaskTO> list() {\n         return taskTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/execution/list\")\n     public List<TaskExecutionTO> listExecutions() {\n@@ -79,6 +82,7 @@ public List<TaskExecutionTO> listExecutions() {\n         return executionTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{taskId}\")\n     public TaskTO read(@PathVariable(\"taskId\") final Long taskId)\n@@ -92,6 +96,7 @@ public TaskTO read(@PathVariable(\"taskId\") final Long taskId)\n         return taskDataBinder.getTaskTO(task);\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/execution/read/{executionId}\")\n     public TaskExecutionTO readExecution(\n@@ -106,6 +111,7 @@ public TaskExecutionTO readExecution(\n         return taskDataBinder.getTaskExecutionTO(execution);\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_EXECUTE')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/execute/{taskId}\")\n     public TaskExecutionTO execute(@PathVariable(\"taskId\") final Long taskId)\n@@ -136,6 +142,7 @@ public TaskExecutionTO execute(@PathVariable(\"taskId\") final Long taskId)\n         return taskDataBinder.getTaskExecutionTO(execution);\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/execution/report/{executionId}\")\n     public TaskExecutionTO report(\n@@ -181,6 +188,7 @@ public TaskExecutionTO report(\n         return taskDataBinder.getTaskExecutionTO(execution);\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{taskId}\")\n     public void delete(@PathVariable(\"taskId\") Long taskId)\n@@ -212,6 +220,7 @@ public void delete(@PathVariable(\"taskId\") Long taskId)\n         taskDAO.delete(task);\n     }\n \n+    @PreAuthorize(\"hasRole('TASK_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/execution/delete/{executionId}\")\n     public void deleteExecution(@PathVariable(\"executionId\") Long executionId)"},{"sha":"349fe224b8ea4d7f5282f8bce2d707f48569f858","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":15,"deletions":0,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -43,6 +43,7 @@\n import jpasymphony.dao.JPAWorkflowEntryDAO;\n import org.springframework.dao.DataIntegrityViolationException;\n import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n import org.springframework.transaction.annotation.Transactional;\n import org.springframework.web.servlet.ModelAndView;\n import org.syncope.client.mod.UserMod;\n@@ -139,6 +140,7 @@ public SyncopeUser doExecuteAction(final String actionName,\n         return syncopeUserDAO.save(user);\n     }\n \n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/action/{actionName}\")\n     public UserTO executeAction(HttpServletResponse response,\n@@ -162,6 +164,7 @@ public UserTO activate(@RequestBody UserTO userTO)\n                 (Object) userTO.getToken())), userWorkflow);\n     }\n \n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/generateToken/{userId}\")\n     public UserTO generateToken(@PathVariable(\"userId\") Long userId)\n@@ -175,6 +178,7 @@ public UserTO generateToken(@PathVariable(\"userId\") Long userId)\n                 userWorkflow);\n     }\n \n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/verifyToken\")\n     public UserTO verifyToken(@RequestBody UserTO userTO)\n@@ -187,6 +191,7 @@ public UserTO verifyToken(@RequestBody UserTO userTO)\n                 userWorkflow);\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/verifyPassword/{userId}\")\n     @Transactional(readOnly = true)\n@@ -206,6 +211,7 @@ public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n                 user.getPassword().equals(passwordUser.getPassword()));\n     }\n \n+    @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/list\")\n     @Transactional(readOnly = true)\n@@ -219,6 +225,7 @@ public List<UserTO> list() {\n         return userTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_LIST')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/paginatedList/{page}/{size}\")\n     @Transactional(readOnly = true)\n@@ -235,6 +242,7 @@ public List<UserTO> paginatedList(\n         return userTOs;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/read/{userId}\")\n     @Transactional(readOnly = true)\n@@ -249,6 +257,7 @@ public UserTO read(@PathVariable(\"userId\") Long userId)\n         return userDataBinder.getUserTO(user, userWorkflow);\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/actions/{userId}\")\n     @Transactional(readOnly = true)\n@@ -273,6 +282,7 @@ public WorkflowActionsTO getActions(@PathVariable(\"userId\") Long userId)\n         return result;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/search\")\n     @Transactional(readOnly = true)\n@@ -296,6 +306,7 @@ public List<UserTO> search(@RequestBody NodeCond searchCondition)\n         return result;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/paginatedSearch/{page}/{size}\")\n     @Transactional(readOnly = true)\n@@ -322,6 +333,7 @@ public List<UserTO> paginatedSearch(\n         return result;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_READ')\")\n     @RequestMapping(method = RequestMethod.GET,\n     value = \"/status/{userId}\")\n     @Transactional(readOnly = true)\n@@ -370,6 +382,7 @@ private Set<String> getSyncResourceNames(SyncopeUser user,\n         return syncResourceNames;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_CREATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/create\")\n     public UserTO create(HttpServletResponse response,\n@@ -458,6 +471,7 @@ public UserTO create(HttpServletResponse response,\n         return savedTO;\n     }\n \n+    @PreAuthorize(\"hasRole('USER_UPDATE')\")\n     @RequestMapping(method = RequestMethod.POST,\n     value = \"/update\")\n     public UserTO update(@RequestBody UserMod userMod,\n@@ -498,6 +512,7 @@ public UserTO update(@RequestBody UserMod userMod,\n         return userDataBinder.getUserTO(user, userWorkflow);\n     }\n \n+    @PreAuthorize(\"hasRole('USER_DELETE')\")\n     @RequestMapping(method = RequestMethod.DELETE,\n     value = \"/delete/{userId}\")\n     public void delete(@PathVariable(\"userId\") Long userId,"},{"sha":"ce5dca85ba8af96fd287abcb4a3cb26c661688cb","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":33,"deletions":0,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -14,20 +14,26 @@\n  */\n package org.syncope.core.rest.data;\n \n+import org.springframework.beans.factory.annotation.Autowired;\n import org.syncope.core.persistence.util.AttributableUtil;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.RoleMod;\n import org.syncope.client.to.RoleTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.types.SyncopeClientExceptionType;\n \n @Component\n public class RoleDataBinder extends AbstractAttributableDataBinder {\n \n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n     public SyncopeRole create(final RoleTO roleTO)\n             throws SyncopeClientCompositeErrorException {\n \n@@ -75,6 +81,17 @@ public SyncopeRole create(final RoleTO roleTO)\n         // attributes, derived attributes and resources\n         fill(role, roleTO, AttributableUtil.ROLE, scce);\n \n+        // entitlements\n+        Entitlement entitlement;\n+        for (String entitlementName : roleTO.getEntitlements()) {\n+            entitlement = entitlementDAO.find(entitlementName);\n+            if (entitlement == null) {\n+                LOG.warn(\"Ignoring invalid entitlement {}\", entitlementName);\n+            } else {\n+                role.addEntitlement(entitlement);\n+            }\n+        }\n+\n         return role;\n     }\n \n@@ -115,6 +132,18 @@ public ResourceOperations update(SyncopeRole role, RoleMod roleMod)\n                     !role.isInheritDerivedAttributes());\n         }\n \n+        // entitlements\n+        role.getEntitlements().clear();\n+        Entitlement entitlement;\n+        for (String entitlementName : roleMod.getEntitlements()) {\n+            entitlement = entitlementDAO.find(entitlementName);\n+            if (entitlement == null) {\n+                LOG.warn(\"Ignoring invalid entitlement {}\", entitlementName);\n+            } else {\n+                role.addEntitlement(entitlement);\n+            }\n+        }\n+\n         // attributes, derived attributes and resources\n         return fill(role, roleMod, AttributableUtil.ROLE, scce);\n     }\n@@ -134,6 +163,10 @@ public RoleTO getRoleTO(SyncopeRole role) {\n                 role.findInheritedDerivedAttributes(),\n                 role.getTargetResources());\n \n+        for (Entitlement entitlement : role.getEntitlements()) {\n+            roleTO.addEntitlement(entitlement.getName());\n+        }\n+\n         return roleTO;\n     }\n }"},{"sha":"43b4e6aef84be5e2beda24fca846162c2bd9e094","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -22,7 +22,6 @@\n import java.util.Set;\n import javassist.NotFoundException;\n import javax.persistence.EntityNotFoundException;\n-import org.identityconnectors.common.Base64;\n import org.springframework.http.HttpStatus;\n import org.springframework.stereotype.Component;\n import org.syncope.client.mod.MembershipMod;\n@@ -320,7 +319,7 @@ public UserTO getUserTO(SyncopeUser user, Workflow userWorkflow) {\n         userTO.setId(user.getId());\n         userTO.setToken(user.getToken());\n         userTO.setTokenExpireTime(user.getTokenExpireTime());\n-        userTO.setPassword(Base64.encode(user.getPassword().getBytes()));\n+        userTO.setPassword(user.getPassword());\n \n         try {\n             List<Step> currentSteps = userWorkflow.getCurrentSteps("},{"sha":"e2bbd6b27c236d1613c0b7be97b18294ed12cda2","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"added","additions":131,"deletions":0,"changes":131,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -0,0 +1,131 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.security;\n+\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.security.authentication.AuthenticationProvider;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.Authentication;\n+import org.springframework.security.core.AuthenticationException;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+\n+@Configurable\n+public class SyncopeAuthenticationProvider implements AuthenticationProvider {\n+\n+    /**\n+     * Logger.\n+     */\n+    private static final Logger LOG = LoggerFactory.getLogger(\n+            SyncopeAuthenticationProvider.class);\n+\n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+\n+    private SyncopeUserDetailsService syncopeUserDetailsService;\n+\n+    private String adminUser;\n+\n+    private String adminMD5Password;\n+\n+    public String getAdminMD5Password() {\n+        return adminMD5Password;\n+    }\n+\n+    public void setAdminMD5Password(String adminMD5Password) {\n+        this.adminMD5Password = adminMD5Password;\n+    }\n+\n+    public String getAdminUser() {\n+        return adminUser;\n+    }\n+\n+    public void setAdminUser(String adminUser) {\n+        this.adminUser = adminUser;\n+    }\n+\n+    public SyncopeUserDetailsService getSyncopeUserDetailsService() {\n+        return syncopeUserDetailsService;\n+    }\n+\n+    public void setSyncopeUserDetailsService(\n+            SyncopeUserDetailsService syncopeUserDetailsService) {\n+\n+        this.syncopeUserDetailsService = syncopeUserDetailsService;\n+    }\n+\n+    @Override\n+    public Authentication authenticate(final Authentication authentication)\n+            throws AuthenticationException {\n+\n+        boolean authenticated;\n+        SyncopeUser passwordUser = new SyncopeUser();\n+        passwordUser.setPassword(\n+                authentication.getCredentials().toString());\n+        if (adminUser.equals(authentication.getPrincipal())) {\n+            authenticated = adminMD5Password.equals(\n+                    passwordUser.getPassword());\n+        } else {\n+            Long id;\n+            try {\n+                id = Long.valueOf(authentication.getPrincipal().toString());\n+            } catch (NumberFormatException e) {\n+                throw new UsernameNotFoundException(\n+                        \"Invalid user id: \" + authentication.getName(), e);\n+            }\n+\n+            SyncopeUser user = syncopeUserDAO.find(id);\n+            if (user == null) {\n+                throw new UsernameNotFoundException(\n+                        \"Could not find any user with id \" + id);\n+            }\n+\n+            authenticated = user.getPassword().equals(\n+                    passwordUser.getPassword());\n+        }\n+\n+        Authentication result;\n+        if (authenticated) {\n+            UsernamePasswordAuthenticationToken token =\n+                    new UsernamePasswordAuthenticationToken(\n+                    authentication.getPrincipal(),\n+                    null,\n+                    syncopeUserDetailsService.loadUserByUsername(\n+                    authentication.getPrincipal().toString()).getAuthorities());\n+            token.setDetails(authentication.getDetails());\n+\n+            result = token;\n+\n+            LOG.debug(\"User {} authenticated with roles {}\",\n+                    authentication.getPrincipal(), token.getAuthorities());\n+        } else {\n+            result = authentication;\n+\n+            LOG.debug(\"User {} not authenticated\",\n+                    authentication.getPrincipal());\n+        }\n+\n+        return result;\n+    }\n+\n+    @Override\n+    public boolean supports(final Class<? extends Object> type) {\n+        return type.equals(UsernamePasswordAuthenticationToken.class);\n+    }\n+}"},{"sha":"56c89f326cc2cc89639754869ab73bebe9c3ab1d","filename":"core/src/main/java/org/syncope/core/security/SyncopeUserDetailsService.java","status":"added","additions":90,"deletions":0,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeUserDetailsService.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -0,0 +1,90 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.security;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.beans.factory.annotation.Configurable;\n+import org.springframework.dao.DataAccessException;\n+import org.springframework.security.core.authority.GrantedAuthorityImpl;\n+import org.springframework.security.core.userdetails.User;\n+import org.springframework.security.core.userdetails.UserDetails;\n+import org.springframework.security.core.userdetails.UserDetailsService;\n+import org.springframework.security.core.userdetails.UsernameNotFoundException;\n+import org.syncope.core.persistence.beans.Entitlement;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.EntitlementDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+\n+@Configurable\n+public class SyncopeUserDetailsService implements UserDetailsService {\n+\n+    @Autowired\n+    private SyncopeUserDAO syncopeUserDAO;\n+\n+    @Autowired\n+    private EntitlementDAO entitlementDAO;\n+\n+    private String adminUser;\n+\n+    public String getAdminUser() {\n+        return adminUser;\n+    }\n+\n+    public void setAdminUser(String adminUser) {\n+        this.adminUser = adminUser;\n+    }\n+\n+    @Override\n+    public UserDetails loadUserByUsername(final String username)\n+            throws UsernameNotFoundException, DataAccessException {\n+\n+        User result;\n+        Set<GrantedAuthorityImpl> authorities =\n+                new HashSet<GrantedAuthorityImpl>();\n+        if (adminUser.equals(username)) {\n+            for (Entitlement entitlement : entitlementDAO.findAll()) {\n+                authorities.add(\n+                        new GrantedAuthorityImpl(entitlement.getName()));\n+            }\n+        } else {\n+            Long id;\n+            try {\n+                id = Long.valueOf(username);\n+            } catch (NumberFormatException e) {\n+                throw new UsernameNotFoundException(\n+                        \"Invalid user id: \" + username, e);\n+            }\n+\n+            SyncopeUser user = syncopeUserDAO.find(id);\n+            if (user == null) {\n+                throw new UsernameNotFoundException(\n+                        \"Could not find any user with id \" + id);\n+            }\n+\n+            for (SyncopeRole role : user.getRoles()) {\n+                for (Entitlement entitlement : role.getEntitlements()) {\n+                    authorities.add(new GrantedAuthorityImpl(\n+                            entitlement.getName()));\n+                }\n+            }\n+        }\n+\n+        return new User(username, \"<PASSWORD_PLACEHOLDER>\",\n+                true, true, true, true, authorities);\n+    }\n+}"},{"sha":"eaed171d9bb2419dc9617c09202b682b50bf4627","filename":"core/src/main/resources/content.xml","status":"modified","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -69,4 +69,41 @@\n                       mandatoryCondition=\"false\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"\n                       conversionPattern=\"yyyy-MM-dd'T'HH:mm:ss.SSSZ\"/>\n \n+                          <!-- Authentication and authorization -->\n+    <Entitlement name=\"SCHEMA_LIST\"/>\n+    <Entitlement name=\"SCHEMA_CREATE\"/>\n+    <Entitlement name=\"SCHEMA_READ\"/>\n+    <Entitlement name=\"SCHEMA_UPDATE\"/>\n+    <Entitlement name=\"SCHEMA_DELETE\"/>\n+    <Entitlement name=\"USER_LIST\"/>\n+    <Entitlement name=\"USER_CREATE\"/>\n+    <Entitlement name=\"USER_READ\"/>\n+    <Entitlement name=\"USER_UPDATE\"/>\n+    <Entitlement name=\"USER_DELETE\"/>\n+    <Entitlement name=\"USER_VIEW\"/>\n+    <Entitlement name=\"ROLE_LIST\"/>\n+    <Entitlement name=\"ROLE_CREATE\"/>\n+    <Entitlement name=\"ROLE_READ\"/>\n+    <Entitlement name=\"ROLE_UPDATE\"/>\n+    <Entitlement name=\"ROLE_DELETE\"/>\n+    <Entitlement name=\"RESOURCE_LIST\"/>\n+    <Entitlement name=\"RESOURCE_CREATE\"/>\n+    <Entitlement name=\"RESOURCE_READ\"/>\n+    <Entitlement name=\"RESOURCE_UPDATE\"/>\n+    <Entitlement name=\"RESOURCE_DELETE\"/>\n+    <Entitlement name=\"REPORT_LIST\"/>\n+    <Entitlement name=\"CONNECTOR_LIST\"/>\n+    <Entitlement name=\"CONNECTOR_CREATE\"/>\n+    <Entitlement name=\"CONNECTOR_READ\"/>\n+    <Entitlement name=\"CONNECTOR_UPDATE\"/>\n+    <Entitlement name=\"CONNECTOR_DELETE\"/>\n+    <Entitlement name=\"CONFIGURATION_LIST\"/>\n+    <Entitlement name=\"CONFIGURATION_CREATE\"/>\n+    <Entitlement name=\"CONFIGURATION_READ\"/>\n+    <Entitlement name=\"CONFIGURATION_UPDATE\"/>\n+    <Entitlement name=\"CONFIGURATION_DELETE\"/>\n+    <Entitlement name=\"TASK_LIST\"/>\n+    <Entitlement name=\"TASK_EXECUTE\"/>\n+    <Entitlement name=\"TASK_READ\"/>\n+    <Entitlement name=\"TASK_DELETE\"/>\n </dataset>"},{"sha":"9656f87515b33536088edfafe95f4278f5caba3d","filename":"core/src/main/resources/logback.xml","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Flogback.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -90,6 +90,11 @@\n         <appender-ref ref=\"persistence\"/>\n     </logger>\n \n+    <logger name=\"org.syncope.core.security\" additivity=\"false\">\n+        <level value=\"INFO\"/>\n+        <appender-ref ref=\"main\"/>\n+    </logger>\n+\n     <logger name=\"org.syncope.core.rest\" additivity=\"false\">\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"rest\"/>\n@@ -120,6 +125,11 @@\n         <appender-ref ref=\"monitor\"/>\n     </logger>\n \n+    <logger name=\"net.sf.ehcache\" additivity=\"false\">\n+        <level value=\"INFO\"/>\n+        <appender-ref ref=\"main\"/>\n+    </logger>\n+\n     <logger name=\"org.springframework\" additivity=\"false\">\n         <level value=\"INFO\"/>\n         <appender-ref ref=\"main\"/>\n@@ -155,6 +165,15 @@\n         <appender-ref ref=\"test\"/>\n     </logger>\n \n+    <logger name=\"org.apache.commons.httpclient\" additivity=\"false\">\n+        <level value=\"INFO\"/>\n+        <appender-ref ref=\"test\"/>\n+    </logger>\n+    <logger name=\"httpclient\" additivity=\"false\">\n+        <level value=\"INFO\"/>\n+        <appender-ref ref=\"test\"/>\n+    </logger>\n+\n     <root>\n         <priority value=\"INFO\"/>\n         <appender-ref ref=\"main\"/>"},{"sha":"94e088fde620c169c405575c4dd798d5fcf2916b","filename":"core/src/main/resources/persistenceContext.xml","status":"modified","additions":0,"deletions":9,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContext.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -39,15 +39,6 @@\n     <bean id=\"contextApplicationContextProvider\"\n           class=\"org.syncope.core.persistence.util.ApplicationContextProvider\"/>\n \n-    <bean id=\"propertyConfigurer\"\n-          class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n-        <property name=\"locations\">\n-            <list>\n-                <value>classpath:persistence.properties</value>\n-            </list>\n-        </property>\n-    </bean>\n-\n     <bean id=\"dbUnitDataTypeFactory\" class=\"${dbUnitDataTypeFactory}\"/>\n \n     <bean id=\"xStream\" class=\"com.thoughtworks.xstream.XStream\"/>"},{"sha":"f4a1240856ceb9dbf8c529e552f18f44c3567af9","filename":"core/src/main/resources/security.properties","status":"added","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -0,0 +1,13 @@\n+#  Licensed under the Apache License, Version 2.0 (the \"License\");\n+#  you may not use this file except in compliance with the License.\n+#  You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+#  limitations under the License.\n+adminUser=admin\n+adminMD5Password=5f4dcc3b5aa765d61d8327deb882cf99"},{"sha":"666dc988e6b420d8aded4421821c8909b7a84e3b","filename":"core/src/main/resources/securityContext.xml","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsecurityContext.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -0,0 +1,47 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xmlns:security=\"http://www.springframework.org/schema/security\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+       http://www.springframework.org/schema/beans/spring-beans.xsd\n+       http://www.springframework.org/schema/security\n+       http://www.springframework.org/schema/security/spring-security.xsd\">\n+\n+    <security:global-method-security pre-post-annotations=\"enabled\"/>\n+\n+    <security:http>\n+        <security:http-basic/>\n+        <security:intercept-url pattern=\"/**\"/>\n+    </security:http>\n+\n+    <bean id=\"syncopeUserDetailsService\"\n+          class=\"org.syncope.core.security.SyncopeUserDetailsService\">\n+        <property name=\"adminUser\" value=\"${adminUser}\"/>\n+    </bean>\n+\n+    <bean id=\"syncopeAuthenticationProvider\"\n+          class=\"org.syncope.core.security.SyncopeAuthenticationProvider\">\n+        <property name=\"adminUser\" value=\"${adminUser}\"/>\n+        <property name=\"adminMD5Password\" value=\"${adminMD5Password}\"/>\n+        <property name=\"syncopeUserDetailsService\" ref=\"syncopeUserDetailsService\"/>\n+    </bean>\n+\n+    <security:authentication-manager>\n+        <security:authentication-provider ref=\"syncopeAuthenticationProvider\"\n+                                          user-service-ref=\"syncopeUserDetailsService\"/>\n+    </security:authentication-manager>\n+\n+</beans>"},{"sha":"b16a07b67595f70fe7d35c371b89ed0eb9f78de5","filename":"core/src/main/resources/syncopeContext.xml","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FsyncopeContext.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -0,0 +1,29 @@\n+<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n+<!--\n+  Licensed under the Apache License, Version 2.0 (the \"License\");\n+  you may not use this file except in compliance with the License.\n+  You may obtain a copy of the License at\n+\n+       http://www.apache.org/licenses/LICENSE-2.0\n+\n+  Unless required by applicable law or agreed to in writing, software\n+  distributed under the License is distributed on an \"AS IS\" BASIS,\n+  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+  See the License for the specific language governing permissions and\n+  limitations under the License.\n+-->\n+<beans xmlns=\"http://www.springframework.org/schema/beans\"\n+       xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\"\n+       xsi:schemaLocation=\"http://www.springframework.org/schema/beans\n+       http://www.springframework.org/schema/beans/spring-beans.xsd\">\n+\n+    <bean class=\"org.springframework.beans.factory.config.PropertyPlaceholderConfigurer\">\n+        <property name=\"locations\">\n+            <list>\n+                <value>classpath:persistence.properties</value>\n+                <value>classpath:security.properties</value>\n+            </list>\n+        </property>\n+    </bean>\n+\n+</beans>"},{"sha":"4a761f0b32529af71c8595b34134edabd760772e","filename":"core/src/main/webapp/WEB-INF/syncope-core-rest-servlet.xml","status":"modified","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fsyncope-core-rest-servlet.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -81,7 +81,20 @@\n         <property name=\"ignoreAcceptHeader\" value=\"false\"/>\n     </bean>\n \n+    <bean id=\"httpClientParams\" class=\"org.apache.commons.httpclient.params.HttpClientParams\">\n+        <property name=\"authenticationPreemptive\" value=\"true\"/>\n+        <property name=\"connectionManagerClass\"\n+                  value=\"org.apache.commons.httpclient.MultiThreadedHttpConnectionManager\"/>\n+    </bean>\n+    <bean id=\"httpClient\" class=\"org.apache.commons.httpclient.HttpClient\">\n+        <constructor-arg ref=\"httpClientParams\"/>\n+    </bean>\n+    <bean id=\"httpClientFactory\" class=\"org.springframework.http.client.CommonsClientHttpRequestFactory\">\n+        <constructor-arg ref=\"httpClient\"/>\n+    </bean>\n     <bean id=\"restTemplate\" class=\"org.springframework.web.client.RestTemplate\">\n+        <constructor-arg ref=\"httpClientFactory\"/>\n+\n         <property name=\"messageConverters\" ref=\"mappingJacksonHttpMessageConverter\"/>\n         <property name=\"errorHandler\">\n             <bean id=\"syncopeClientErrorHandler\""},{"sha":"04d4ea27dff14f681c27963180d30eb3c8a265f9","filename":"core/src/main/webapp/WEB-INF/web.xml","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fwebapp%2FWEB-INF%2Fweb.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -66,11 +66,27 @@\n             <param-value>true</param-value>\n         </init-param>\n     </filter>\n+    <filter>\n+        <filter-name>OpenEntityManagerInViewFilter</filter-name>\n+        <filter-class>org.springframework.orm.jpa.support.OpenEntityManagerInViewFilter</filter-class>\n+    </filter>\n+    <filter>\n+        <filter-name>springSecurityFilterChain</filter-name>\n+        <filter-class>org.springframework.web.filter.DelegatingFilterProxy</filter-class>\n+    </filter>\n \n     <filter-mapping>\n         <filter-name>encodingFilter</filter-name>\n         <url-pattern>/*</url-pattern>\n     </filter-mapping>\n+    <filter-mapping>\n+        <filter-name>OpenEntityManagerInViewFilter</filter-name>\n+        <url-pattern>/*</url-pattern>\n+    </filter-mapping>\n+    <filter-mapping>\n+        <filter-name>springSecurityFilterChain</filter-name>\n+        <url-pattern>/*</url-pattern>\n+    </filter-mapping>\n \n     <error-page>\n         <exception-type>java.lang.Throwable</exception-type>"},{"sha":"1d7ed1bd7ce27424499eda17d05bea38bffdceb6","filename":"core/src/test/java/jpasymphony/dao/JPAWorkflowEntryTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Fdao%2FJPAWorkflowEntryTest.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -28,6 +28,7 @@\n @Transactional\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n+    \"classpath:syncopeContext.xml\",\n     \"classpath:persistenceContext.xml\",\n     \"classpath:workflowContext.xml\"\n })"},{"sha":"852f3747e8f57d344c63845c38dda7ebcf3cb8bb","filename":"core/src/test/java/jpasymphony/relationships/JPAWorkflowEntryTest.java","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Fjpasymphony%2Frelationships%2FJPAWorkflowEntryTest.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -34,6 +34,7 @@\n @Transactional\n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n+    \"classpath:syncopeContext.xml\",\n     \"classpath:persistenceContext.xml\",\n     \"classpath:workflowContext.xml\"\n })"},{"sha":"2d82bde4556512b690faa891487538cbe68ae596","filename":"core/src/test/java/org/syncope/core/persistence/AbstractTest.java","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2FAbstractTest.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -42,6 +42,7 @@\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n+    \"classpath:syncopeContext.xml\",\n     \"classpath:persistenceContext.xml\"\n })\n public abstract class AbstractTest {\n@@ -51,10 +52,14 @@ public abstract class AbstractTest {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(\n             AbstractTest.class);\n+\n     protected static String bundlesVersion;\n+\n     protected static String bundlesDirectory;\n+\n     @Autowired\n     private DataSource dataSource;\n+\n     @Autowired\n     private DefaultDataTypeFactory dbUnitDataTypeFactory;\n "},{"sha":"7f4e5f42a9b0889dceecd20a9f480f595bd16fcb","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -2,9 +2,9 @@\n  *  Licensed under the Apache License, Version 2.0 (the \"License\");\n  *  you may not use this file except in compliance with the License.\n  *  You may obtain a copy of the License at\n- * \n+ *\n  *       http://www.apache.org/licenses/LICENSE-2.0\n- * \n+ *\n  *  Unless required by applicable law or agreed to in writing, software\n  *  distributed under the License is distributed on an \"AS IS\" BASIS,\n  *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n@@ -23,7 +23,6 @@\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.beans.Entitlement;\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n-import org.syncope.core.persistence.dao.EntitlementDAO;\n import org.syncope.core.persistence.AbstractTest;\n \n @Transactional\n@@ -36,7 +35,7 @@ public class EntitlementTest extends AbstractTest {\n     public final void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n         assertEquals(\"did not get expected number of entitlements \",\n-                2, list.size());\n+                38, list.size());\n     }\n \n     @Test"},{"sha":"c1e5ac6d6fa04a06d1279054f08968094ad678cd","filename":"core/src/test/java/org/syncope/core/rest/AbstractTest.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -14,16 +14,21 @@\n  */\n package org.syncope.core.rest;\n \n+import org.apache.commons.httpclient.UsernamePasswordCredentials;\n+import org.apache.commons.httpclient.auth.AuthScope;\n+import org.junit.Before;\n import org.junit.runner.RunWith;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.client.CommonsClientHttpRequestFactory;\n import org.springframework.test.context.ContextConfiguration;\n import org.springframework.test.context.junit4.SpringJUnit4ClassRunner;\n import org.springframework.web.client.RestTemplate;\n \n @RunWith(SpringJUnit4ClassRunner.class)\n @ContextConfiguration(locations = {\n+    \"classpath:syncopeContext.xml\",\n     \"classpath:persistenceContext.xml\",\n     \"classpath:workflowContext.xml\",\n     \"file:target/syncope/WEB-INF/syncope-core-rest-servlet.xml\"\n@@ -35,8 +40,17 @@ public abstract class AbstractTest {\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(\n             AbstractTest.class);\n+\n     protected static final String BASE_URL =\n             \"http://localhost:9080/syncope/rest/\";\n+\n     @Autowired\n     protected RestTemplate restTemplate;\n+\n+    @Before\n+    public void setupRestTemplate() {\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\"admin\", \"password\"));\n+    }\n }"},{"sha":"b817e2dc8a311a06e6ead6e77d9778d99451c421","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -0,0 +1,176 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest;\n+\n+import static org.junit.Assert.*;\n+\n+import java.text.DateFormat;\n+import java.text.SimpleDateFormat;\n+import java.util.ArrayList;\n+import java.util.Arrays;\n+import java.util.Date;\n+import java.util.List;\n+import org.apache.commons.httpclient.UsernamePasswordCredentials;\n+import org.apache.commons.httpclient.auth.AuthScope;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.http.client.CommonsClientHttpRequestFactory;\n+import org.springframework.web.client.HttpClientErrorException;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.MembershipTO;\n+import org.syncope.client.to.RoleTO;\n+import org.syncope.client.to.SchemaTO;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.types.SchemaType;\n+\n+public class AuthenticationTestITCase extends AbstractTest {\n+\n+    private UserTO getSampleTO(final String email) {\n+        UserTO userTO = new UserTO();\n+        userTO.setPassword(\"password\");\n+\n+        AttributeTO usernameTO = new AttributeTO();\n+        usernameTO.setSchema(\"username\");\n+        usernameTO.addValue(email);\n+        userTO.addAttribute(usernameTO);\n+\n+        AttributeTO firstnameTO = new AttributeTO();\n+        firstnameTO.setSchema(\"firstname\");\n+        firstnameTO.addValue(email);\n+        userTO.addAttribute(firstnameTO);\n+\n+        AttributeTO surnameTO = new AttributeTO();\n+        surnameTO.setSchema(\"surname\");\n+        surnameTO.addValue(\"Surname\");\n+        userTO.addAttribute(surnameTO);\n+\n+        AttributeTO typeTO = new AttributeTO();\n+        typeTO.setSchema(\"type\");\n+        typeTO.addValue(\"a type\");\n+        userTO.addAttribute(typeTO);\n+\n+        AttributeTO userIdTO = new AttributeTO();\n+        userIdTO.setSchema(\"userId\");\n+        userIdTO.addValue(email);\n+        userTO.addAttribute(userIdTO);\n+\n+        AttributeTO emailTO = new AttributeTO();\n+        emailTO.setSchema(\"email\");\n+        emailTO.addValue(email);\n+        userTO.addAttribute(emailTO);\n+\n+        AttributeTO loginDateTO = new AttributeTO();\n+        loginDateTO.setSchema(\"loginDate\");\n+        DateFormat sdf = new SimpleDateFormat(\"yyyy-MM-dd\");\n+        loginDateTO.addValue(sdf.format(new Date()));\n+        userTO.addAttribute(loginDateTO);\n+\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        userTO.addAttribute(testAttributeTO);\n+\n+        return userTO;\n+    }\n+\n+    @Test\n+    public void testEntitlements() {\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\"1\", \"password\"));\n+\n+        List<String> authEnts = Arrays.asList(\n+                restTemplate.getForObject(BASE_URL\n+                + \"auth/entitlements.json\", String[].class));\n+\n+        List<String> dbEnts = new ArrayList<String>();\n+        dbEnts.add(\"base\");\n+        dbEnts.add(\"advanced\");\n+        dbEnts.add(\"SCHEMA_READ\");\n+        assertEquals(dbEnts, authEnts);\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+    }\n+\n+    @Test\n+    public void testAuthorization() {\n+        // 0. create a role that can only read schemas\n+        RoleTO authRoleTO = new RoleTO();\n+        authRoleTO.setName(\"authRole\");\n+        authRoleTO.setParent(8L);\n+        authRoleTO.addEntitlement(\"SCHEMA_READ\");\n+\n+        authRoleTO = restTemplate.postForObject(\n+                BASE_URL + \"role/create\",\n+                authRoleTO, RoleTO.class);\n+        assertNotNull(authRoleTO);\n+\n+        // 1. create a schema (as admin)\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"authTestSchema\");\n+        schemaTO.setMandatoryCondition(\"false\");\n+        schemaTO.setType(SchemaType.String);\n+\n+        SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n+                + \"schema/user/create\", schemaTO, SchemaTO.class);\n+        assertEquals(schemaTO, newSchemaTO);\n+\n+        // 2. create an user with the role created above (as admin)\n+        UserTO userTO = getSampleTO(\"auth@test.org\");\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(authRoleTO.getId());\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        // 3. read the schema created above (as admin) - success\n+        schemaTO = restTemplate.getForObject(BASE_URL\n+                + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n+        assertNotNull(schemaTO);\n+\n+        // 4. read the schema created above (as user) - success\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                String.valueOf(userTO.getId()), \"password\"));\n+\n+        schemaTO = restTemplate.getForObject(BASE_URL\n+                + \"schema/user/read/authTestSchema.json\", SchemaTO.class);\n+        assertNotNull(schemaTO);\n+\n+        // 5. update the schema create above (as user) - failure\n+        HttpClientErrorException exception = null;\n+        try {\n+            schemaTO.setVirtual(true);\n+            restTemplate.postForObject(BASE_URL\n+                    + \"schema/role/update\", schemaTO, SchemaTO.class);\n+        } catch (HttpClientErrorException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+        assertEquals(HttpStatus.FORBIDDEN, exception.getStatusCode());\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+    }\n+}"},{"sha":"8da1be9716b34ca1e025542a3c04ab56c49beadf","filename":"core/src/test/java/org/syncope/core/rest/ConnectorInstanceTestITCase.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FConnectorInstanceTestITCase.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -14,10 +14,10 @@\n  */\n package org.syncope.core.rest;\n \n-import java.io.InputStream;\n-import java.util.Arrays;\n import static org.junit.Assert.*;\n \n+import java.io.InputStream;\n+import java.util.Arrays;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Properties;\n@@ -36,9 +36,9 @@\n \n public class ConnectorInstanceTestITCase extends AbstractTest {\n \n-    protected static String bundles_version;\n+    private static String bundles_version;\n \n-    protected static String bundles_directory;\n+    private static String bundles_directory;\n \n     @Before\n     public void init() {"},{"sha":"ed27f4ef5bcf9cf9a1efc7be784c2a28fdc3aa84","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -39,7 +39,6 @@ public void create() {\n                 + \"schema/user/create\", schemaTO, SchemaTO.class);\n         assertEquals(schemaTO, newSchemaTO);\n \n-\n         newSchemaTO = restTemplate.postForObject(BASE_URL\n                 + \"schema/membership/create\", schemaTO, SchemaTO.class);\n         assertEquals(schemaTO, newSchemaTO);"},{"sha":"960f5c420d3fc04fa4fa01e832a87b90d217a2b0","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":1,"deletions":3,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -24,7 +24,6 @@\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n-import org.identityconnectors.common.Base64;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n import org.springframework.test.annotation.ExpectedException;\n@@ -600,8 +599,7 @@ public final void update() {\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n         passwordTestUser.setPassword(\"newPassword\");\n-        assertEquals(new String(Base64.encode(\n-                passwordTestUser.getPassword().getBytes())),\n+        assertEquals(passwordTestUser.getPassword(),\n                 userTO.getPassword());\n \n         assertEquals(1, userTO.getMemberships().size());"},{"sha":"5c0685b7e55cd76673e7f94501985d01c459d046","filename":"core/src/test/resources/content.xml","status":"modified","additions":43,"deletions":4,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -46,10 +46,10 @@\n     <SyncopeConf confKey=\"verifyToken.email.template.txt\" confValue=\"verifyToken.txt\"/>\n     <SyncopeConf confKey=\"identityconnectors.bundle.directory\" confValue=\"${bundles.directory}\"/>\n                           \n-    <SyncopeUser id=\"1\" workflowId=\"0\" password=\"password\"/>\n-    <SyncopeUser id=\"2\" workflowId=\"0\" password=\"password\"/>\n-    <SyncopeUser id=\"3\" workflowId=\"0\" password=\"password\"/>\n-    <SyncopeUser id=\"4\" workflowId=\"0\" password=\"password\"/>\n+    <SyncopeUser id=\"1\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"2\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"3\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n+    <SyncopeUser id=\"4\" workflowId=\"0\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\"/>\n \n     <SyncopeRole id=\"1\" name=\"root\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n     <SyncopeRole id=\"2\" name=\"child\" parent_id=\"1\" inheritAttributes=\"0\" inheritDerivedAttributes=\"0\"/>\n@@ -303,4 +303,43 @@\n     <RDerAttr id=\"1001\" derivedSchema_name=\"displayProperty\" owner_id=\"1\"/>\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n \n+    <!-- Authentication and authorization -->\n+    <Entitlement name=\"SCHEMA_LIST\"/>\n+    <Entitlement name=\"SCHEMA_CREATE\"/>\n+    <Entitlement name=\"SCHEMA_READ\"/>\n+    <Entitlement name=\"SCHEMA_UPDATE\"/>\n+    <Entitlement name=\"SCHEMA_DELETE\"/>\n+    <Entitlement name=\"USER_LIST\"/>\n+    <Entitlement name=\"USER_CREATE\"/>\n+    <Entitlement name=\"USER_READ\"/>\n+    <Entitlement name=\"USER_UPDATE\"/>\n+    <Entitlement name=\"USER_DELETE\"/>\n+    <Entitlement name=\"USER_VIEW\"/>\n+    <Entitlement name=\"ROLE_LIST\"/>\n+    <Entitlement name=\"ROLE_CREATE\"/>\n+    <Entitlement name=\"ROLE_READ\"/>\n+    <Entitlement name=\"ROLE_UPDATE\"/>\n+    <Entitlement name=\"ROLE_DELETE\"/>\n+    <Entitlement name=\"RESOURCE_LIST\"/>\n+    <Entitlement name=\"RESOURCE_CREATE\"/>\n+    <Entitlement name=\"RESOURCE_READ\"/>\n+    <Entitlement name=\"RESOURCE_UPDATE\"/>\n+    <Entitlement name=\"RESOURCE_DELETE\"/>\n+    <Entitlement name=\"REPORT_LIST\"/>\n+    <Entitlement name=\"CONNECTOR_LIST\"/>\n+    <Entitlement name=\"CONNECTOR_CREATE\"/>\n+    <Entitlement name=\"CONNECTOR_READ\"/>\n+    <Entitlement name=\"CONNECTOR_UPDATE\"/>\n+    <Entitlement name=\"CONNECTOR_DELETE\"/>\n+    <Entitlement name=\"CONFIGURATION_LIST\"/>\n+    <Entitlement name=\"CONFIGURATION_CREATE\"/>\n+    <Entitlement name=\"CONFIGURATION_READ\"/>\n+    <Entitlement name=\"CONFIGURATION_UPDATE\"/>\n+    <Entitlement name=\"CONFIGURATION_DELETE\"/>\n+    <Entitlement name=\"TASK_LIST\"/>\n+    <Entitlement name=\"TASK_EXECUTE\"/>\n+    <Entitlement name=\"TASK_READ\"/>\n+    <Entitlement name=\"TASK_DELETE\"/>\n+\n+    <SyncopeRole_Entitlement entitlements_name=\"SCHEMA_READ\" roles_id=\"8\"/>\n </dataset>"},{"sha":"f4a1240856ceb9dbf8c529e552f18f44c3567af9","filename":"core/src/test/resources/security.properties","status":"added","additions":13,"deletions":0,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/core%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fsecurity.properties?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -0,0 +1,13 @@\n+#  Licensed under the Apache License, Version 2.0 (the \"License\");\n+#  you may not use this file except in compliance with the License.\n+#  You may obtain a copy of the License at\n+#\n+#       http://www.apache.org/licenses/LICENSE-2.0\n+#\n+#  Unless required by applicable law or agreed to in writing, software\n+#  distributed under the License is distributed on an \"AS IS\" BASIS,\n+#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+#  See the License for the specific language governing permissions and\n+#  limitations under the License.\n+adminUser=admin\n+adminMD5Password=5f4dcc3b5aa765d61d8327deb882cf99"},{"sha":"35f072c7860bec4dcff1d41817c071ebd184a8db","filename":"pom.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/19767ed1ed0f82b0922afda7784484ec84a8a145/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/19767ed1ed0f82b0922afda7784484ec84a8a145/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=19767ed1ed0f82b0922afda7784484ec84a8a145","patch":"@@ -99,6 +99,7 @@\n         <commons-jexl.version>2.0.1</commons-jexl.version>\n         <commons-lang.version>2.5</commons-lang.version>\n         <commons-email.version>1.2</commons-email.version>\n+        <commons-httpclient.version>3.1</commons-httpclient.version>\n \n         <osworkflow.version>2.8.0</osworkflow.version>\n         <propertyset.version>1.3</propertyset.version>\n@@ -178,6 +179,12 @@\n                 <version>${commons-email.version}</version>\n             </dependency>\n \n+            <dependency>\n+                <groupId>commons-httpclient</groupId>\n+                <artifactId>commons-httpclient</artifactId>\n+                <version>${commons-httpclient.version}</version>\n+            </dependency>\n+\n             <dependency>\n                 <groupId>opensymphony</groupId>\n                 <artifactId>osworkflow</artifactId>\n@@ -272,6 +279,16 @@\n                 <artifactId>spring-web</artifactId>\n                 <version>${org.springframework.version}</version>\n             </dependency>\n+            <dependency>\n+                <groupId>org.springframework.security</groupId>\n+                <artifactId>spring-security-web</artifactId>\n+                <version>${org.springframework.version}</version>\n+            </dependency>\n+            <dependency>\n+                <groupId>org.springframework.security</groupId>\n+                <artifactId>spring-security-config</artifactId>\n+                <version>${org.springframework.version}</version>\n+            </dependency>\n             <!-- /Spring -->\n \n             <!-- CXF -->"}]}