{"sha":"28f31bb8b93cb508110d0fb0a125eb974fcb3df4","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjI4ZjMxYmI4YjkzY2I1MDgxMTBkMGZiMGExMjVlYjk3NGZjYjNkZjQ=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-04T09:14:52Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2020-02-04T09:21:36Z"},"message":"[SYNCOPE-1538] Adjusting realm search to Admin Console needs","tree":{"sha":"73781d7f13de3aac40438a3f3c93ae759183a91a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/73781d7f13de3aac40438a3f3c93ae759183a91a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/28f31bb8b93cb508110d0fb0a125eb974fcb3df4","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/28f31bb8b93cb508110d0fb0a125eb974fcb3df4","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/28f31bb8b93cb508110d0fb0a125eb974fcb3df4","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"aacd9f7b615ec1fc578dec1becddbcd874e80a4b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aacd9f7b615ec1fc578dec1becddbcd874e80a4b","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aacd9f7b615ec1fc578dec1becddbcd874e80a4b"}],"stats":{"total":65,"additions":40,"deletions":25},"files":[{"sha":"910043f7b8ded44395680e5591d5f435200f7e88","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/RealmTO.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FRealmTO.java?ref=28f31bb8b93cb508110d0fb0a125eb974fcb3df4","patch":"@@ -33,11 +33,12 @@\n import javax.xml.bind.annotation.adapters.XmlJavaTypeAdapter;\n import org.apache.commons.lang3.builder.EqualsBuilder;\n import org.apache.commons.lang3.builder.HashCodeBuilder;\n+import org.apache.syncope.common.lib.BaseBean;\n import org.apache.syncope.common.lib.jaxb.XmlGenericMapAdapter;\n \n @XmlRootElement(name = \"realm\")\n @XmlType\n-public class RealmTO implements NamedEntityTO, TemplatableTO {\n+public class RealmTO extends BaseBean implements NamedEntityTO, TemplatableTO {\n \n     private static final long serialVersionUID = 516330662956254391L;\n "},{"sha":"79cc617876d514d728d08fafa8255ff182cec24d","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/RealmService.java","status":"modified","additions":8,"deletions":5,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FRealmService.java?ref=28f31bb8b93cb508110d0fb0a125eb974fcb3df4","patch":"@@ -42,6 +42,7 @@\n import javax.ws.rs.core.HttpHeaders;\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -58,21 +59,23 @@\n public interface RealmService extends JAXRSService {\n \n     /**\n-     * Returns a paged list of existing realms matching the given query.\n+     * Returns a list of existing realms matching the given query (not including descendant realms) and the total number\n+     * of descedant realms.\n      *\n      * @param query query conditions\n-     * @return paged list of existing realms matching the given query\n+     * @return list of existing realms matching the given query (not including descendant realms) and the total number\n+     * of descedant realms\n      */\n     @GET\n     @Path(\"search\")\n     @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n-    List<RealmTO> search(@BeanParam RealmQuery query);\n+    PagedResult<RealmTO> search(@BeanParam RealmQuery query);\n \n     /**\n-     * Returns realms rooted at the given path.\n+     * Returns realms rooted at the given path, including descendant realms.\n      *\n      * @param fullPath full path of the root realm where to read from\n-     * @return realms rooted at the given path\n+     * @return realms rooted at the given path, including descendant realms\n      */\n     @GET\n     @Path(\"{fullPath:.*}\")"},{"sha":"bad86d86191447290cc35b5eb31b1ec021c1273f","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RealmLogic.java","status":"modified","additions":13,"deletions":7,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRealmLogic.java?ref=28f31bb8b93cb508110d0fb0a125eb974fcb3df4","patch":"@@ -25,6 +25,7 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -72,16 +73,21 @@ public class RealmLogic extends AbstractTransactionalLogic<RealmTO> {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.REALM_LIST + \"')\")\n     @Transactional(readOnly = true)\n-    public List<RealmTO> search(final String keyword) {\n+    public Pair<Integer, List<RealmTO>> search(final String keyword) {\n         Set<String> bases = AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.REALM_LIST);\n \n-        return realmDAO.findMatching(keyword).stream().\n+        Set<Realm> match = realmDAO.findMatching(keyword).stream().\n                 filter(realm -> bases.stream().anyMatch(base -> realm.getFullPath().startsWith(base))).\n-                flatMap(realm -> realmDAO.findDescendants(realm).stream()).\n-                distinct().\n-                map(realm -> binder.getRealmTO(realm, true)).\n-                sorted(Comparator.comparing(RealmTO::getFullPath)).\n-                collect(Collectors.toList());\n+                collect(Collectors.toSet());\n+\n+        int descendants = Math.toIntExact(\n+                match.stream().flatMap(realm -> realmDAO.findDescendants(realm).stream()).distinct().count());\n+\n+        return Pair.of(\n+                descendants,\n+                match.stream().map(realm -> binder.getRealmTO(realm, true)).\n+                        sorted(Comparator.comparing(RealmTO::getFullPath)).\n+                        collect(Collectors.toList()));\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")"},{"sha":"c80403e36bd572aab5b82794bd3f59482c444da8","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/RealmServiceImpl.java","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FRealmServiceImpl.java?ref=28f31bb8b93cb508110d0fb0a125eb974fcb3df4","patch":"@@ -22,7 +22,9 @@\n import java.util.List;\n import javax.ws.rs.core.Response;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.rest.api.RESTHeaders;\n@@ -39,9 +41,11 @@ public class RealmServiceImpl extends AbstractServiceImpl implements RealmServic\n     private RealmLogic logic;\n \n     @Override\n-    public List<RealmTO> search(final RealmQuery query) {\n+    public PagedResult<RealmTO> search(final RealmQuery query) {\n         String keyword = query.getKeyword() == null ? null : query.getKeyword().replace('*', '%');\n-        return logic.search(keyword);\n+\n+        Pair<Integer, List<RealmTO>> result = logic.search(keyword);\n+        return buildPagedResult(result.getRight(), 1, result.getRight().size(), result.getLeft());\n     }\n \n     @Override"},{"sha":"bd8cdded4007d4b00fce5694b98a184a3af78e41","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/MultitenancyITCase.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FMultitenancyITCase.java?ref=28f31bb8b93cb508110d0fb0a125eb974fcb3df4","patch":"@@ -25,7 +25,6 @@\n import static org.junit.jupiter.api.Assertions.fail;\n import static org.junit.jupiter.api.Assumptions.assumeFalse;\n \n-import java.util.List;\n import java.util.Locale;\n import javax.ws.rs.ForbiddenException;\n import javax.ws.rs.core.GenericType;\n@@ -114,16 +113,17 @@ public void readPlainSchemas() {\n \n     @Test\n     public void readRealm() {\n-        List<RealmTO> realms = adminClient.getService(RealmService.class).\n+        PagedResult<RealmTO> realms = adminClient.getService(RealmService.class).\n                 search(new RealmQuery.Builder().keyword(\"*\").build());\n-        assertEquals(1, realms.size());\n-        assertEquals(SyncopeConstants.ROOT_REALM, realms.get(0).getName());\n+        assertEquals(1, realms.getTotalCount());\n+        assertEquals(1, realms.getResult().size());\n+        assertEquals(SyncopeConstants.ROOT_REALM, realms.getResult().get(0).getName());\n     }\n \n     @Test\n     public void createUser() {\n         assertNull(adminClient.getService(RealmService.class).\n-                search(new RealmQuery.Builder().keyword(\"*\").build()).get(0).getPasswordPolicy());\n+                search(new RealmQuery.Builder().keyword(\"*\").build()).getResult().get(0).getPasswordPolicy());\n \n         UserCR userCR = new UserCR();\n         userCR.setRealm(SyncopeConstants.ROOT_REALM);"},{"sha":"1d8d5bc01e9523b9546f0b6b40429ca7a161ab29","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/RealmITCase.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FRealmITCase.java?ref=28f31bb8b93cb508110d0fb0a125eb974fcb3df4","patch":"@@ -36,6 +36,7 @@\n import org.apache.syncope.common.lib.to.RealmTO;\n import org.apache.syncope.common.lib.policy.DefaultAccountRuleConf;\n import org.apache.syncope.common.lib.to.ImplementationTO;\n+import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.ImplementationEngine;\n@@ -58,8 +59,8 @@ private static Optional<RealmTO> getRealm(final String fullPath) {\n \n     @Test\n     public void search() {\n-        List<RealmTO> match = realmService.search(new RealmQuery.Builder().keyword(\"*o*\").build());\n-        assertTrue(match.stream().allMatch(realm -> realm.getName().contains(\"o\")));\n+        PagedResult<RealmTO> match = realmService.search(new RealmQuery.Builder().keyword(\"*o*\").build());\n+        assertTrue(match.getResult().stream().allMatch(realm -> realm.getName().contains(\"o\")));\n     }\n \n     @Test"},{"sha":"76da0adb260429f9ab9128c3c28bb94624f456c3","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=28f31bb8b93cb508110d0fb0a125eb974fcb3df4","patch":"@@ -963,7 +963,7 @@ public void customPolicyRules() {\n         passwordPolicy = createPolicy(PolicyType.PASSWORD, passwordPolicy);\n         assertNotNull(passwordPolicy);\n \n-        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).get(0);\n+        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).getResult().get(0);\n         String oldAccountPolicy = realm.getAccountPolicy();\n         realm.setAccountPolicy(accountPolicy.getKey());\n         String oldPasswordPolicy = realm.getPasswordPolicy();"},{"sha":"818fffacfa4ef3ca65bc7005e0af7804ed30e788","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserIssuesITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/28f31bb8b93cb508110d0fb0a125eb974fcb3df4/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserIssuesITCase.java?ref=28f31bb8b93cb508110d0fb0a125eb974fcb3df4","patch":"@@ -793,7 +793,7 @@ public void issueSYNCOPE420() throws IOException {\n         }\n         assertNotNull(logicActions);\n \n-        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).get(0);\n+        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).getResult().get(0);\n         assertNotNull(realm);\n         realm.getActions().add(logicActions.getKey());\n         realmService.update(realm);\n@@ -1223,7 +1223,7 @@ public void issueSYNCOPE626() {\n         passwordPolicy = createPolicy(PolicyType.PASSWORD, passwordPolicy);\n         assertNotNull(passwordPolicy);\n \n-        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).get(0);\n+        RealmTO realm = realmService.search(new RealmQuery.Builder().keyword(\"two\").build()).getResult().get(0);\n         String oldPasswordPolicy = realm.getPasswordPolicy();\n         realm.setPasswordPolicy(passwordPolicy.getKey());\n         realmService.update(realm);"}]}