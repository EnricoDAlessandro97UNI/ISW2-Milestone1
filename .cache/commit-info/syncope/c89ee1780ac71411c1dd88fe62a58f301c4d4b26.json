{"sha":"c89ee1780ac71411c1dd88fe62a58f301c4d4b26","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM4OWVlMTc4MGFjNzE0MTFjMWRkODhmZTYyYTU4ZjMwMWM0ZDRiMjY=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-10T10:21:14Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-10T10:21:14Z"},"message":"[SYNCOPE-259]\n* Service Cleanup (removed deprecated annotations, removed obsolete comments)\n* SchemaService refactoring to use new SchemaType instead of SchemaTO classes in method signature\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1431255 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"27a1a829259cc09acd999e0d4eb5fd3eb0c0c27b","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/27a1a829259cc09acd999e0d4eb5fd3eb0c0c27b"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c89ee1780ac71411c1dd88fe62a58f301c4d4b26","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c89ee1780ac71411c1dd88fe62a58f301c4d4b26","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c89ee1780ac71411c1dd88fe62a58f301c4d4b26","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/comments","author":null,"committer":null,"parents":[{"sha":"014a02579b0c13dbfb5a548eaf179c0bf7f318fe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/014a02579b0c13dbfb5a548eaf179c0bf7f318fe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/014a02579b0c13dbfb5a548eaf179c0bf7f318fe"}],"stats":{"total":1084,"additions":513,"deletions":571},"files":[{"sha":"7c2050f010d8d6cceeb75de04e2760d65a4c6ae0","filename":"client/src/main/java/org/apache/syncope/services/LoggerService.java","status":"modified","additions":7,"deletions":14,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FLoggerService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -36,6 +36,7 @@\n @Path(\"logger\")\r\n public interface LoggerService {\r\n \r\n+    //TODO use list(LoggerType) signature for both normal logger and audit logger instead of two different methods\r\n     @GET\r\n     @RequestMapping(method = RequestMethod.GET, value = \"/log/list\")\r\n     List<LoggerTO> listLogs();\r\n@@ -48,25 +49,17 @@ public interface LoggerService {\n     @PUT\r\n     @Path(\"{name}/level\")\r\n     @RequestMapping(method = RequestMethod.POST, value = \"/log/{name}/{level}\")\r\n-    LoggerTO setLogLevel(@PathParam(\"name\") final String name, final Level level);\r\n+    LoggerTO update(@PathParam(\"name\") final String name, final Level level);\r\n \r\n     @DELETE\r\n     @Path(\"{name}\")\r\n     @RequestMapping(method = RequestMethod.GET, value = \"/log/delete/{name}\")\r\n-    LoggerTO deleteLog(@PathParam(\"name\") final String name);\r\n+    LoggerTO delete(@PathParam(\"name\") final String name);\r\n \r\n-    /**\r\n-     * @deprecated Refactoring needed here. Use {@link #setLogLevel(String, Level)} after refactoring is done.\r\n-     */\r\n-    @Deprecated\r\n-    @RequestMapping(method = RequestMethod.PUT, value = \"/audit/enable\")\r\n-    void enableAudit(final AuditLoggerName auditLoggerName);\r\n+    // TODO refactor this method to use update()\r\n+    void enableAudit(AuditLoggerName auditLoggerName);\r\n \r\n-    /**\r\n-     * @deprecated Refactoring needed here. Use {@link #deleteLog(String)} after refactoring is done.\r\n-     */\r\n-    @Deprecated\r\n-    @RequestMapping(method = RequestMethod.PUT, value = \"/audit/disable\")\r\n-    void disableAudit(final AuditLoggerName auditLoggerName);\r\n+    // TODO refactor this method to use delete()\r\n+    void disableAudit(AuditLoggerName auditLoggerName);\r\n \r\n }\n\\ No newline at end of file"},{"sha":"d71038f8420b9696f9c0386657b65d3b8294805e","filename":"client/src/main/java/org/apache/syncope/services/NotificationService.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FNotificationService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FNotificationService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FNotificationService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -34,25 +34,20 @@ public interface NotificationService {\n \r\n     @GET\r\n     @Path(\"{notificationId}\")\r\n-//    @RequestMapping(method = RequestMethod.GET, value = \"/read/{notificationId}\")\r\n     NotificationTO read(@PathParam(\"notificationId\") final Long notificationId);\r\n \r\n     @GET\r\n-//    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\r\n     List<NotificationTO> list();\r\n \r\n     @POST\r\n-//    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\r\n     NotificationTO create(final NotificationTO notificationTO);\r\n \r\n     @PUT\r\n     @Path(\"{notificationId}\")\r\n-//    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\r\n     NotificationTO update(@PathParam(\"notificationId\") final Long notificationId, final NotificationTO notificationTO);\r\n \r\n     @DELETE\r\n     @Path(\"{notificationId}\")\r\n-//    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{notificationId}\")\r\n     NotificationTO delete(@PathParam(\"notificationId\") final Long notificationId);\r\n \r\n }\n\\ No newline at end of file"},{"sha":"62e8c7aff2d85ed7d7714c86c5b56664ad0746a6","filename":"client/src/main/java/org/apache/syncope/services/PolicyService.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FPolicyService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -36,27 +36,27 @@ public interface PolicyService {\n \t@POST\r\n     <T extends PolicyTO> T create(final T policyTO);\r\n \r\n-\t@PUT\r\n+\t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n+\t@DELETE\r\n \t@Path(\"{policyId}\")\r\n-    <T extends PolicyTO> T update(@PathParam(\"policyId\") final Long policyId, final T policyTO);\r\n-\r\n-\t@GET\r\n-\t@Path(\"{type}\")\r\n-\t<T extends PolicyTO> List<T> listByType(@PathParam(\"type\") final PolicyType type);\r\n+\t<T extends PolicyTO> T delete(@PathParam(\"policyId\") final Long policyId, Class<T> policyClass);\r\n \r\n-\t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n \t@GET\r\n-\t@Path(\"global/{type}\")\r\n-\t<T extends PolicyTO> T readGlobal(@PathParam(\"type\") final PolicyType type, Class<T> policyClass);\r\n+\t@Path(\"{kind}\")\r\n+\t<T extends PolicyTO> List<T> listByType(@PathParam(\"kind\") final PolicyType type);\r\n \r\n \t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n \t@GET\r\n \t@Path(\"{policyId}\")\r\n \t<T extends PolicyTO> T read(@PathParam(\"policyId\") final Long policyId, Class<T> policyClass);\r\n \r\n \t// TODO: policyClass is required only for Spring RestTemplate mock. Must be removed for CXF\r\n-\t@DELETE\r\n+\t@GET\r\n+\t@Path(\"global/{kind}\")\r\n+\t<T extends PolicyTO> T readGlobal(@PathParam(\"kind\") final PolicyType type, Class<T> policyClass);\r\n+\r\n+\t@PUT\r\n \t@Path(\"{policyId}\")\r\n-\t<T extends PolicyTO> T delete(@PathParam(\"policyId\") final Long policyId, Class<T> policyClass);\r\n+    <T extends PolicyTO> T update(@PathParam(\"policyId\") final Long policyId, final T policyTO);\r\n \r\n }\n\\ No newline at end of file"},{"sha":"87533a2db8722fd956eac0f6c709628ce2f55dda","filename":"client/src/main/java/org/apache/syncope/services/RoleService.java","status":"modified","additions":30,"deletions":31,"changes":61,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FRoleService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -35,49 +35,48 @@\n @Path(\"roles\")\r\n public interface RoleService {\r\n \r\n-\t@GET\r\n+    @GET\r\n     @Path(\"{roleId}/children\")\r\n-\tList<RoleTO> children(@PathParam(\"roleId\") final Long roleId);\r\n+    List<RoleTO> children(@PathParam(\"roleId\") final Long roleId);\r\n \r\n-\t@POST\r\n-\tRoleTO create(final RoleTO roleTO);\r\n+    @POST\r\n+    RoleTO create(final RoleTO roleTO);\r\n \r\n-\t@DELETE\r\n+    @DELETE\r\n     @Path(\"{roleId}\")\r\n-\tRoleTO delete(@PathParam(\"roleId\") final Long roleId);\r\n+    RoleTO delete(@PathParam(\"roleId\") final Long roleId);\r\n \r\n-\t@GET\r\n-\tList<RoleTO> list();\r\n+    @GET\r\n+    List<RoleTO> list();\r\n \r\n-\t@GET\r\n+    @GET\r\n     @Path(\"{roleId}/parent\")\r\n-\tRoleTO parent(@PathParam(\"roleId\") final Long roleId);\r\n+    RoleTO parent(@PathParam(\"roleId\") final Long roleId);\r\n \r\n-\t@GET\r\n-\t@Path(\"{roleId}\")\r\n-\tRoleTO read(@PathParam(\"roleId\") final Long roleId);\r\n+    @GET\r\n+    @Path(\"{roleId}\")\r\n+    RoleTO read(@PathParam(\"roleId\") final Long roleId);\r\n \r\n-\t@POST\r\n-\t@Path(\"search\")\r\n-\tList<RoleTO> search(final NodeCond searchCondition);\r\n+    @POST\r\n+    @Path(\"search\")\r\n+    List<RoleTO> search(final NodeCond searchCondition);\r\n \r\n-\t@POST\r\n-\t@Path(\"search\")\r\n-\tList<RoleTO> search(final NodeCond searchCondition,\r\n-\t\t\t@QueryParam(\"page\") final int page,\r\n-\t\t\t@QueryParam(\"size\") @DefaultValue(\"25\") final int size);\r\n+    @POST\r\n+    @Path(\"search\")\r\n+    List<RoleTO> search(final NodeCond searchCondition,\r\n+            @QueryParam(\"page\") final int page,\r\n+            @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\r\n \r\n-\t@POST\r\n-\t@Path(\"search/count\")\r\n-\tint searchCount(final NodeCond searchCondition);\r\n+    @POST\r\n+    @Path(\"search/count\")\r\n+    int searchCount(final NodeCond searchCondition);\r\n \r\n-\t/**\r\n-\t * @deprecated Authentication checks should not depend on the method called\r\n-\t */\r\n-\t@Deprecated\r\n-\tRoleTO selfRead(final Long roleId);\r\n+    /**\r\n+     * deprecated Authentication checks should not depend on the method called\r\n+     */\r\n+    RoleTO selfRead(final Long roleId);\r\n \r\n-\t@POST\r\n+    @POST\r\n     @Path(\"{roleId}\")\r\n-\tRoleTO update(@PathParam(\"roleId\") final Long roleId, final RoleMod roleMod);\r\n+    RoleTO update(@PathParam(\"roleId\") final Long roleId, final RoleMod roleMod);\r\n }\n\\ No newline at end of file"},{"sha":"59fb94897721735f2da74aad78321b94286434b0","filename":"client/src/main/java/org/apache/syncope/services/SchemaService.java","status":"modified","additions":33,"deletions":15,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FSchemaService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -29,34 +29,52 @@\n \r\n import org.apache.syncope.client.to.AbstractSchemaTO;\r\n \r\n-@Path(\"schemas\")\r\n+@Path(\"schemas/{kind}/{type}\")\r\n public interface SchemaService {\r\n \r\n+    //TODO refactoring needed here. SchemaType exists already in org.apache.syncope.types.\r\n+    // Maybe that (other) type can be renamed to SchemaElementType ?\r\n+    enum SchemaType {\r\n+        NORMAL(\"schema\"), DERIVED(\"derivedSchema\"), VIRTUAL(\"virtualSchema\");\r\n+\r\n+        private final String name;\r\n+\r\n+        private SchemaType(String name) {\r\n+            this.name = name;\r\n+        }\r\n+\r\n+        @Override\r\n+        public String toString() {\r\n+            return name;\r\n+        }\r\n+    }\r\n+\r\n     @POST\r\n-    //    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/create\")\r\n-    <T extends AbstractSchemaTO> T create(@PathParam(\"kind\") final String kind, final T schemaTO);\r\n+    <T extends AbstractSchemaTO> T create(@PathParam(\"kind\") final String kind,\r\n+            @PathParam(\"type\") final SchemaType type,\r\n+            final T schemaTO);\r\n \r\n     @DELETE\r\n-    @Path(\"{kind}/{schema}\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/delete/{schema}\")\r\n+    @Path(\"{name}\")\r\n     <T extends AbstractSchemaTO> T delete(@PathParam(\"kind\") final String kind,\r\n-            @PathParam(\"schema\") final String schemaName, final Class<T> type);\r\n+            @PathParam(\"type\") final SchemaType type,\r\n+            @PathParam(\"name\") final String schemaName);\r\n \r\n     @GET\r\n-    @Path(\"{kind}\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\r\n-    <T extends AbstractSchemaTO> List<T> list(@PathParam(\"kind\") final String kind, final Class<T[]> type);\r\n+    <T extends AbstractSchemaTO> List<T> list(@PathParam(\"kind\") final String kind,\r\n+            @PathParam(\"type\") final SchemaType type);\r\n \r\n     @GET\r\n-    @Path(\"{kind}/{schema}\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/read/{schema}\")\r\n+    @Path(\"{name}\")\r\n     <T extends AbstractSchemaTO> T read(@PathParam(\"kind\") final String kind,\r\n-            @PathParam(\"schema\") final String schemaName, final Class<T> type);\r\n+            @PathParam(\"type\") final SchemaType type,\r\n+            @PathParam(\"name\") final String schemaName);\r\n \r\n     @PUT\r\n-    @Path(\"{kind}/{schema}\")\r\n-    //    @RequestMapping(method = RequestMethod.POST, value = \"/{kind}/update\")\r\n+    @Path(\"{name}\")\r\n     <T extends AbstractSchemaTO> T update(@PathParam(\"kind\") final String kind,\r\n-            @PathParam(\"schema\") final String schemaName, final T schemaTO);\r\n+            @PathParam(\"type\") final SchemaType type,\r\n+            @PathParam(\"name\") final String schemaName,\r\n+            final T schemaTO);\r\n \r\n }\n\\ No newline at end of file"},{"sha":"b0b2f3a3b0c8900abb4bf23653c7b3c834e17f48","filename":"client/src/main/java/org/apache/syncope/services/TaskService.java","status":"modified","additions":1,"deletions":26,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FTaskService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -34,90 +34,65 @@\n import org.apache.syncope.client.to.TaskExecTO;\r\n import org.apache.syncope.client.to.TaskTO;\r\n import org.apache.syncope.types.PropagationTaskExecStatus;\r\n-import org.springframework.web.bind.annotation.RequestMapping;\r\n-import org.springframework.web.bind.annotation.RequestMethod;\r\n \r\n @Path(\"tasks\")\r\n public interface TaskService {\r\n \r\n     @GET\r\n     @Path(\"{kind}/count\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/count\")\r\n     int count(@PathParam(\"kind\") final String kind);\r\n \r\n-    //    @RequestMapping(method = RequestMethod.POST, value = \"/create/sync\")\r\n-    //    TaskTO createSyncTask(  final SyncTaskTO taskTO);\r\n-    //\r\n-    //    @RequestMapping(method = RequestMethod.POST, value = \"/create/sched\")\r\n-    //    TaskTO createSchedTask( final SchedTaskTO taskTO);\r\n-\r\n     @POST\r\n     <T extends TaskTO> T create(T taskTO);\r\n \r\n     @DELETE\r\n     @Path(\"{taskId}\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{taskId}\")\r\n     <T extends TaskTO> T delete(@PathParam(\"taskId\") final Long taskId, Class<T> type);\r\n \r\n     @DELETE\r\n     @Path(\"executions/{executionId}\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/delete/{executionId}\")\r\n     TaskExecTO deleteExecution(@PathParam(\"executionId\") final Long executionId);\r\n \r\n     @POST\r\n     @Path(\"{taskId}/execute\")\r\n-    @RequestMapping(method = RequestMethod.POST, value = \"/execute/{taskId}\")\r\n     TaskExecTO execute(@PathParam(\"taskId\") final Long taskId,\r\n             @QueryParam(\"dryRun\") @DefaultValue(\"false\") final boolean dryRun);\r\n \r\n     @GET\r\n     @Path(\"jobClasses\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/jobClasses\")\r\n     Set<String> getJobClasses();\r\n \r\n     @GET\r\n     @Path(\"syncActionsClasses\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/syncActionsClasses\")\r\n     Set<String> getSyncActionsClasses();\r\n \r\n     @GET\r\n     @Path(\"{kind}\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\r\n     <T extends TaskTO> List<T> list(@PathParam(\"kind\") final String kind, Class<T[]> type);\r\n \r\n     @GET\r\n     @Path(\"{kind}\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list/{page}/{size}\")\r\n     <T extends TaskTO> List<T> list(@PathParam(\"kind\") final String kind, @QueryParam(\"page\") final int page,\r\n             @QueryParam(\"size\") @DefaultValue(\"25\") final int size, Class<T[]> type);\r\n \r\n     @GET\r\n     @Path(\"{kind}/executions\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/execution/list\")\r\n     List<TaskExecTO> listExecutions(@PathParam(\"kind\") final String kind);\r\n \r\n     @GET\r\n     @Path(\"{taskId}\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/read/{taskId}\")\r\n     <T extends TaskTO> T read(@PathParam(\"taskId\") final Long taskId, Class<T> type);\r\n \r\n     @GET\r\n     @Path(\"executions/{executionId}\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/read/{executionId}\")\r\n     TaskExecTO readExecution(@PathParam(\"executionId\") final Long executionId);\r\n \r\n     @POST\r\n     @Path(\"executions/{executionId}/report\")\r\n-    @RequestMapping(method = RequestMethod.GET, value = \"/execution/report/{executionId}\")\r\n+    //TODO create new TaskExecutionReportTO object which contains status and message\r\n     TaskExecTO report(@PathParam(\"executionId\") final Long executionId,\r\n             @HeaderParam(\"Execution-Status\") final PropagationTaskExecStatus status, final String message);\r\n \r\n-    //    @RequestMapping(method = RequestMethod.POST, value = \"/update/sync\")\r\n-    //    TaskTO updateSync(final SyncTaskTO taskTO);\r\n-    //\r\n-    //    @RequestMapping(method = RequestMethod.POST, value = \"/update/sched\")\r\n-    //    TaskTO updateSched(final SchedTaskTO taskTO);\r\n-\r\n     @PUT\r\n     @Path(\"{taskId}\")\r\n     <T extends TaskTO> T update(@PathParam(\"taskId\") final Long taskId, T taskTO);\r"},{"sha":"af8213fb2bd28b77ca9d2efffab1e28dbf459482","filename":"client/src/main/java/org/apache/syncope/services/UserRequestService.java","status":"modified","additions":1,"deletions":7,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserRequestService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -30,7 +30,7 @@\n import org.apache.syncope.client.to.UserRequestTO;\r\n import org.apache.syncope.client.to.UserTO;\r\n \r\n-@Path(\"requests/users\")\r\n+@Path(\"requests/user\")\r\n public interface UserRequestService {\r\n \r\n     @GET\r\n@@ -40,31 +40,25 @@ public interface UserRequestService {\n \r\n     @POST\r\n     @Path(\"create\")\r\n-    //    @RequestMapping(method = RequestMethod.POST, value = \"/create\")\r\n     UserRequestTO create(final UserTO userTO);\r\n \r\n     @POST\r\n     @Path(\"update\")\r\n-    //    @RequestMapping(method = RequestMethod.POST, value = \"/update\")\r\n     UserRequestTO update(final UserMod userMod);\r\n \r\n     @POST\r\n     @Path(\"delete\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/delete/{userId}\")\r\n     UserRequestTO delete(final Long userId);\r\n \r\n     @GET\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/list\")\r\n     List<UserRequestTO> list();\r\n \r\n     @GET\r\n     @Path(\"{requestId}\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/read/{requestId}\")\r\n     UserRequestTO read(@PathParam(\"requestId\") final Long requestId);\r\n \r\n     @DELETE\r\n     @Path(\"{requestId}\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/deleteRequest/{requestId}\")\r\n     UserRequestTO deleteRequest(@PathParam(\"requestId\") final Long requestId);\r\n \r\n }\n\\ No newline at end of file"},{"sha":"00f4cfd5948e0a81db34bfc664b957e7b1175de4","filename":"client/src/main/java/org/apache/syncope/services/UserService.java","status":"modified","additions":14,"deletions":37,"changes":51,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FUserService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -39,23 +39,18 @@\n public interface UserService {\n \n     /**\n-     * @deprecated As of release 1.2.0, replaced by\n-     *             {@link #setStatus(Long, StatusMod)}\n+     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n      */\n-    @Deprecated\n     UserTO activate(long userId, String token);\n \n     /**\n-     * @deprecated As of release 1.2.0, replaced by\n-     *             {@link #setStatus(Long, StatusMod)}\n+     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n      */\n-    @Deprecated\n     UserTO activateByUsername(String username, String token);\n \n     /**\n-     * @deprecated This method needs to be moved to a new workflow service.\n+     * deprecated This method needs to be moved to a new workflow service.\n      */\n-    @Deprecated\n     @POST\n     @Path(\"workflow/task/{taskId}/claim\")\n     WorkflowFormTO claimForm(@PathParam(\"taskId\") final String taskId);\n@@ -72,24 +67,21 @@ public interface UserService {\n     UserTO delete(@PathParam(\"userId\") final Long userId);\n \n     /**\n-     * @deprecated This method needs to be moved to a new workflow service.\n+     * deprecated This method needs to be moved to workflow service.\n      */\n-    @Deprecated\n     @POST\n     UserTO executeWorkflow(@PathParam(\"taskId\") final String taskId, final UserTO userTO);\n \n     /**\n-     * @deprecated This method needs to be moved to a new workflow service.\n+     * deprecated This method needs to be moved to workflow service.\n      */\n-    @Deprecated\n     @GET\n     @Path(\"{userId}/workflow/form\")\n     WorkflowFormTO getFormForUser(@PathParam(\"userId\") final Long userId);\n \n     /**\n-     * @deprecated This method needs to be moved to a new workflow service.\n+     * deprecated This method needs to be moved to workflow service.\n      */\n-    @Deprecated\n     @GET\n     @Path(\"workflow/form\")\n     List<WorkflowFormTO> getForms();\n@@ -102,24 +94,18 @@ List<UserTO> list(@QueryParam(\"page\") final int page,\n             @QueryParam(\"size\") @DefaultValue(\"25\") final int size);\n \n     /**\n-     * @deprecated As of release 1.2.0, replaced by\n-     *             {@link #setStatus(Long, StatusMod)}\n+     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n      */\n-    @Deprecated\n     UserTO reactivate(long userId);\n \n     /**\n-     * @deprecated As of release 1.2.0, replaced by\n-     *             {@link #setStatus(Long, StatusMod)}\n+     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n      */\n-    @Deprecated\n     UserTO reactivate(long userId, String query);\n \n     /**\n-     * @deprecated As of release 1.2.0, replaced by\n-     *             {@link #setStatus(Long, StatusMod)}\n+     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n      */\n-    @Deprecated\n     UserTO reactivateByUsername(String username);\n \n     @GET\n@@ -130,10 +116,8 @@ List<UserTO> list(@QueryParam(\"page\") final int page,\n     UserTO read(@MatrixParam(\"uname\") final String username);\n \n     /**\n-     * @deprecated As of release 1.2.0, use {@link #read(Long)} or\n-     *             {@link #read(String)} instead.\n+     * deprecated As of release 1.2.0, use {@link #read(Long)} or {@link #read(String)} instead.\n      */\n-    @Deprecated\n     UserTO readSelf();\n \n     @POST\n@@ -154,32 +138,25 @@ List<UserTO> search(final NodeCond searchCondition, @QueryParam(\"page\") final in\n     public abstract UserTO setStatus(@PathParam(\"userId\") final Long userId, final StatusMod statusUpdate);\n \n     /**\n-     * @deprecated This method needs to be moved to a new workflow service.\n+     * deprecated This method needs to be moved to a new workflow service.\n      */\n-    @Deprecated\n     @POST\n     @Path(\"workflow/form\")\n     UserTO submitForm(final WorkflowFormTO form);\n \n     /**\n-     * @deprecated As of release 1.2.0, replaced by\n-     *             {@link #setStatus(Long, StatusMod)}\n+     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n      */\n-    @Deprecated\n     UserTO suspend(long userId);\n \n     /**\n-     * @deprecated As of release 1.2.0, replaced by\n-     *             {@link #setStatus(Long, StatusMod)}\n+     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n      */\n-    @Deprecated\n     UserTO suspend(long userId, String query);\n \n     /**\n-     * @deprecated As of release 1.2.0, replaced by\n-     *             {@link #setStatus(Long, StatusMod)}\n+     * deprecated As of release 1.2.0, replaced by {@link #setStatus(Long, StatusMod)}\n      */\n-    @Deprecated\n     UserTO suspendByUsername(String username);\n \n     @POST"},{"sha":"5903dd2c0bc4caf8d84aaba58f1db26b9e995634","filename":"client/src/main/java/org/apache/syncope/services/WorkflowService.java","status":"modified","additions":0,"deletions":5,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2FWorkflowService.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -32,20 +32,15 @@ public interface WorkflowService {\n \r\n     @GET\r\n     @Path(\"{kind}\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/definition/user\")\r\n-    //    @RequestMapping(method = RequestMethod.GET, value = \"/definition/role\")\r\n     WorkflowDefinitionTO getDefinition(@PathParam(\"kind\") final String kind);\r\n \r\n \r\n \r\n     @PUT\r\n     @Path(\"{kind}\")\r\n-//    @RequestMapping(method = RequestMethod.PUT, value = \"/definition/user\")\r\n-//    @RequestMapping(method = RequestMethod.PUT, value = \"/definition/role\")\r\n     void updateDefinition(@PathParam(\"kind\") final String kind, final WorkflowDefinitionTO definition);\r\n \r\n     @GET\r\n     @Path(\"{kind}/tasks\")\r\n-//    @RequestMapping(method = RequestMethod.GET, value = \"/tasks/user\")\r\n     List<String> getDefinedTasks(@PathParam(\"kind\") final String kind);\r\n }\n\\ No newline at end of file"},{"sha":"c3ff6c3c835e51e2163588d61de3098ba91237e6","filename":"client/src/main/java/org/apache/syncope/services/proxy/LoggerServiceProxy.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FLoggerServiceProxy.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -46,13 +46,13 @@ public List<AuditLoggerName> listAudits() {\n     }\r\n \r\n     @Override\r\n-    public LoggerTO setLogLevel(String name, Level level) {\r\n+    public LoggerTO update(String name, Level level) {\r\n         return restTemplate.postForObject(baseUrl + \"logger/log/{name}/{level}\", null, LoggerTO.class, name,\r\n                 level);\r\n     }\r\n \r\n     @Override\r\n-    public LoggerTO deleteLog(String name) {\r\n+    public LoggerTO delete(String name) {\r\n         return restTemplate.getForObject(baseUrl + \"logger/log/delete/{name}\", LoggerTO.class, name);\r\n     }\r\n \r"},{"sha":"db4e7ff928ecd9fa83f184ef3a24fbff32abc8fb","filename":"client/src/main/java/org/apache/syncope/services/proxy/SchemaServiceProxy.java","status":"modified","additions":36,"deletions":41,"changes":77,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fservices%2Fproxy%2FSchemaServiceProxy.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -28,67 +28,62 @@\n import org.apache.syncope.services.SchemaService;\r\n import org.springframework.web.client.RestTemplate;\r\n \r\n+@SuppressWarnings(\"unchecked\")\r\n public class SchemaServiceProxy extends SpringServiceProxy implements SchemaService {\r\n \r\n     public SchemaServiceProxy(String baseUrl, RestTemplate restTemplate) {\r\n         super(baseUrl, restTemplate);\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T create(String kind, T schemaTO) {\r\n-        String schemaType = getSchemaType(schemaTO.getClass());\r\n-\r\n-        return (T) restTemplate.postForObject(baseUrl + schemaType + \"/{kind}/create\", schemaTO,\r\n-                schemaTO.getClass(), kind);\r\n+    public <T extends AbstractSchemaTO> T create(String kind, SchemaType type, T schemaTO) {\r\n+        return (T) restTemplate.postForObject(baseUrl + type + \"/{kind}/create\", schemaTO, getTOClass(type), kind);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T delete(String kind, String schemaName, Class<T> type) {\r\n-        String schemaType = getSchemaType(type);\r\n-        return restTemplate.getForObject(baseUrl + schemaType + \"/{kind}/delete/{name}.json\", type, kind,\r\n+    public <T extends AbstractSchemaTO> T delete(String kind, SchemaType type, String schemaName) {\r\n+        return (T) restTemplate.getForObject(baseUrl + type + \"/{kind}/delete/{name}.json\", getTOClass(type), kind,\r\n                 schemaName);\r\n     }\r\n \r\n     @Override\r\n-    public <T extends AbstractSchemaTO> List<T> list(String kind, Class<T[]> type) {\r\n-        String schemaType = getSchemaTypeArray(type);\r\n-        return Arrays.asList(restTemplate.getForObject(baseUrl + schemaType + \"/{kind}/list.json\", type,\r\n-                kind));\r\n+    public <T extends AbstractSchemaTO> List<T> list(String kind, SchemaType type) {\r\n+        switch (type) {\r\n+        case NORMAL:\r\n+            return (List<T>) Arrays.asList(restTemplate.getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                    SchemaTO[].class, kind));\r\n+        case DERIVED:\r\n+            return (List<T>) Arrays.asList(restTemplate.getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                    DerivedSchemaTO[].class, kind));\r\n+        case VIRTUAL:\r\n+            return (List<T>) Arrays.asList(restTemplate.getForObject(baseUrl + type + \"/{kind}/list.json\",\r\n+                    VirtualSchemaTO[].class, kind));\r\n+        default:\r\n+            throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n+        }\r\n     }\r\n \r\n-    @Override\r\n-    public <T extends AbstractSchemaTO> T read(String kind, String schemaName, Class<T> type) {\r\n-        String schemaType = getSchemaType(type);\r\n-        return restTemplate.getForObject(baseUrl + schemaType + \"/{kind}/read/{name}.json\", type, kind,\r\n-                schemaName);\r\n+    private Class<? extends AbstractSchemaTO> getTOClass(SchemaType type) {\r\n+        switch (type) {\r\n+        case NORMAL:\r\n+            return SchemaTO.class;\r\n+        case DERIVED:\r\n+            return DerivedSchemaTO.class;\r\n+        case VIRTUAL:\r\n+            return VirtualSchemaTO.class;\r\n+        default:\r\n+            throw new IllegalArgumentException(\"SchemaType is not supported.\");\r\n+        }\r\n     }\r\n \r\n-    @SuppressWarnings(\"unchecked\")\r\n     @Override\r\n-    public <T extends AbstractSchemaTO> T update(String kind, String schemaName, T schemaTO) {\r\n-        String schemaType = getSchemaType(schemaTO.getClass());\r\n-        return (T) restTemplate.postForObject(baseUrl + schemaType + \"/{kind}/update\", schemaTO,\r\n-                schemaTO.getClass(), kind);\r\n-    }\r\n-\r\n-    private String getSchemaType(Class<? extends AbstractSchemaTO> type) {\r\n-        return (type.isAssignableFrom(SchemaTO.class))\r\n-                ? \"schema\"\r\n-                : (type.isAssignableFrom(DerivedSchemaTO.class))\r\n-                        ? \"derivedSchema\"\r\n-                        : (type.isAssignableFrom(VirtualSchemaTO.class))\r\n-                                ? \"virtualSchema\"\r\n-                                : \"\";\r\n+    public <T extends AbstractSchemaTO> T read(String kind, SchemaType type, String schemaName) {\r\n+        return (T) restTemplate.getForObject(baseUrl + type + \"/{kind}/read/{name}.json\", getTOClass(type), kind,\r\n+                schemaName);\r\n     }\r\n \r\n-    private <T extends AbstractSchemaTO> String getSchemaTypeArray(Class<T[]> type) {\r\n-        return (type.isAssignableFrom(SchemaTO[].class))\r\n-                ? \"schema\"\r\n-                : (type.isAssignableFrom(DerivedSchemaTO[].class))\r\n-                        ? \"derivedSchema\"\r\n-                        : (type.isAssignableFrom(VirtualSchemaTO[].class))\r\n-                                ? \"virtualSchema\"\r\n-                                : \"\";\r\n+    @Override\r\n+    public <T extends AbstractSchemaTO> T update(String kind, SchemaType type, String schemaName, T schemaTO) {\r\n+        return (T) restTemplate.postForObject(baseUrl + type + \"/{kind}/update\", schemaTO, getTOClass(type), kind);\r\n     }\r\n }\r"},{"sha":"de4d4a51ba8956f176b23ba47f755e1ca8a2a534","filename":"client/src/main/java/org/apache/syncope/types/AuditLoggerName.java","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAuditLoggerName.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAuditLoggerName.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Ftypes%2FAuditLoggerName.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -29,12 +29,14 @@\n \n public class AuditLoggerName extends AbstractBaseBean {\n \n-    private Category category;\n+    private static final long serialVersionUID = -647989486671786839L;\n+\n+    private final Category category;\n \n     @JsonTypeInfo(use = JsonTypeInfo.Id.CLASS, include = JsonTypeInfo.As.PROPERTY, property = \"@class\")\n-    private Enum<?> subcategory;\n+    private final Enum<?> subcategory;\n \n-    private Result result;\n+    private final Result result;\n \n     @JsonCreator\n     public AuditLoggerName(@JsonProperty(\"category\") final Category category,"},{"sha":"50f8357d56683df72cd56366b6587a9e7ddb3543","filename":"core/src/test/java/org/apache/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":327,"deletions":326,"changes":653,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -37,6 +37,7 @@\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n+import org.apache.syncope.services.SchemaService;\n import org.apache.syncope.types.SchemaType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n@@ -48,395 +49,395 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class AuthenticationTestITCase extends AbstractTest {\n \n-\t@Test\n-\tpublic void testAdminEntitlements() {\n-\t\t// 1. as anonymous, read all available entitlements\n-\t\tSet<String> allEntitlements = entitlementService.getAllEntitlements();\n-\t\tassertNotNull(allEntitlements);\n-\t\tassertFalse(allEntitlements.isEmpty());\n-\n-\t\t// 2. as admin, read own entitlements\n-\t\tsuper.resetRestTemplate();\n-\n-\t\tSet<String> adminEntitlements = entitlementService.getMyEntitlements();\n-\n-\t\tassertEquals(allEntitlements, adminEntitlements);\n-\t}\n-\n-\t@Test\n-\tpublic void testUserSchemaAuthorization() {\n-\t\t// 0. create a role that can only read schemas\n-\t\tRoleTO authRoleTO = new RoleTO();\n-\t\tauthRoleTO.setName(\"authRole\");\n-\t\tauthRoleTO.setParent(8L);\n-\t\tauthRoleTO.addEntitlement(\"SCHEMA_READ\");\n-\n-\t\tauthRoleTO = roleService.create(authRoleTO);\n-\t\tassertNotNull(authRoleTO);\n-\n-\t\t// 1. create a schema (as admin)\n-\t\tSchemaTO schemaTO = new SchemaTO();\n-\t\tschemaTO.setName(\"authTestSchema\");\n-\t\tschemaTO.setMandatoryCondition(\"false\");\n-\t\tschemaTO.setType(SchemaType.String);\n-\n-\t\tSchemaTO newSchemaTO = schemaService.create(\"user\", schemaTO);\n-\t\tassertEquals(schemaTO, newSchemaTO);\n-\n-\t\t// 2. create an user with the role created above (as admin)\n-\t\tUserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n-\n-\t\tMembershipTO membershipTO = new MembershipTO();\n-\t\tmembershipTO.setRoleId(authRoleTO.getId());\n-\t\tAttributeTO testAttributeTO = new AttributeTO();\n-\t\ttestAttributeTO.setSchema(\"testAttribute\");\n-\t\ttestAttributeTO.addValue(\"a value\");\n-\t\tmembershipTO.addAttribute(testAttributeTO);\n-\t\tuserTO.addMembership(membershipTO);\n-\n-\t\tuserTO = userService.create(userTO);\n-\t\tassertNotNull(userTO);\n-\n-\t\t// 3. read the schema created above (as admin) - success\n-\t\tschemaTO = schemaService.read(\"user\", \"authTestSchema\", SchemaTO.class);\n-\t\tassertNotNull(schemaTO);\n-\n-\t\t// 4. read the schema created above (as user) - success\n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n-\n-\t\tschemaTO = schemaService.read(\"user\", \"authTestSchema\", SchemaTO.class);\n-\t\tassertNotNull(schemaTO);\n-\n-\t\t// 5. update the schema create above (as user) - failure\n-\t\tHttpClientErrorException exception = null;\n-\t\ttry {\n-\t\t    schemaService.update(\"role\", schemaTO.getName(), schemaTO);\n-\t\t} catch (HttpClientErrorException e) {\n-\t\t\texception = e;\n-\t\t}\n-\t\tassertNotNull(exception);\n-\t\tassertEquals(HttpStatus.FORBIDDEN, exception.getStatusCode());\n-\n-\t\t// reset admin credentials for restTemplate\n-\t\tsuper.resetRestTemplate();\n-\n-\t\tuserTO = userService.read(userTO.getId());\n-\n-\t\tassertNotNull(userTO);\n-\t\tassertNotNull(userTO.getLastLoginDate());\n-\t\tassertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n-\t}\n-\n-\t@Test\n-\tpublic void testUserRead() {\n-\t\tUserTO userTO = UserTestITCase.getSampleTO(\"testuserread@test.org\");\n-\n-\t\tMembershipTO membershipTO = new MembershipTO();\n-\t\tmembershipTO.setRoleId(7L);\n-\t\tAttributeTO testAttributeTO = new AttributeTO();\n-\t\ttestAttributeTO.setSchema(\"testAttribute\");\n-\t\ttestAttributeTO.addValue(\"a value\");\n-\t\tmembershipTO.addAttribute(testAttributeTO);\n-\t\tuserTO.addMembership(membershipTO);\n-\n-\t\tuserTO = userService.create(userTO);\n-\t\tassertNotNull(userTO);\n+    @Test\n+    public void testAdminEntitlements() {\n+        // 1. as anonymous, read all available entitlements\n+        Set<String> allEntitlements = entitlementService.getAllEntitlements();\n+        assertNotNull(allEntitlements);\n+        assertFalse(allEntitlements.isEmpty());\n+\n+        // 2. as admin, read own entitlements\n+        super.resetRestTemplate();\n+\n+        Set<String> adminEntitlements = entitlementService.getMyEntitlements();\n+\n+        assertEquals(allEntitlements, adminEntitlements);\n+    }\n+\n+    @Test\n+    public void testUserSchemaAuthorization() {\n+        // 0. create a role that can only read schemas\n+        RoleTO authRoleTO = new RoleTO();\n+        authRoleTO.setName(\"authRole\");\n+        authRoleTO.setParent(8L);\n+        authRoleTO.addEntitlement(\"SCHEMA_READ\");\n+\n+        authRoleTO = roleService.create(authRoleTO);\n+        assertNotNull(authRoleTO);\n+\n+        // 1. create a schema (as admin)\n+        SchemaTO schemaTO = new SchemaTO();\n+        schemaTO.setName(\"authTestSchema\");\n+        schemaTO.setMandatoryCondition(\"false\");\n+        schemaTO.setType(SchemaType.String);\n+\n+        SchemaTO newSchemaTO = schemaService.create(\"user\", SchemaService.SchemaType.NORMAL, schemaTO);\n+        assertEquals(schemaTO, newSchemaTO);\n+\n+        // 2. create an user with the role created above (as admin)\n+        UserTO userTO = UserTestITCase.getSampleTO(\"auth@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(authRoleTO.getId());\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = userService.create(userTO);\n+        assertNotNull(userTO);\n+\n+        // 3. read the schema created above (as admin) - success\n+        schemaTO = schemaService.read(\"user\", SchemaService.SchemaType.NORMAL, \"authTestSchema\");\n+        assertNotNull(schemaTO);\n+\n+        // 4. read the schema created above (as user) - success\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\n+        schemaTO = schemaService.read(\"user\", SchemaService.SchemaType.NORMAL, \"authTestSchema\");\n+        assertNotNull(schemaTO);\n+\n+        // 5. update the schema create above (as user) - failure\n+        HttpClientErrorException exception = null;\n+        try {\n+            schemaService.update(\"role\", SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n+        } catch (HttpClientErrorException e) {\n+            exception = e;\n+        }\n+        assertNotNull(exception);\n+        assertEquals(HttpStatus.FORBIDDEN, exception.getStatusCode());\n+\n+        // reset admin credentials for restTemplate\n+        super.resetRestTemplate();\n+\n+        userTO = userService.read(userTO.getId());\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getLastLoginDate());\n+        assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n+    }\n+\n+    @Test\n+    public void testUserRead() {\n+        UserTO userTO = UserTestITCase.getSampleTO(\"testuserread@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = userService.create(userTO);\n+        assertNotNull(userTO);\n \n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n-\n-\t\tUserTO readUserTO = userService.read(1L);\n-\t\tassertNotNull(readUserTO);\n-\n-\t\tsuper.setupRestTemplate(\"user2\", \"password\");\n-\n-\t\tSyncopeClientException exception = null;\n-\t\ttry {\n-\t\t\tuserService.read(1L);\n-\t\t\tfail();\n-\t\t} catch (SyncopeClientCompositeErrorException e) {\n-\t\t\texception = e\n-\t\t\t\t\t.getException(SyncopeClientExceptionType.UnauthorizedRole);\n-\t\t}\n-\t\tassertNotNull(exception);\n-\n-\t\t// reset admin credentials for restTemplate\n-\t\tsuper.resetRestTemplate();\n-\t}\n-\n-\t@Test\n-\tpublic void testUserSearch() {\n-\t\tUserTO userTO = UserTestITCase.getSampleTO(\"testusersearch@test.org\");\n-\n-\t\tMembershipTO membershipTO = new MembershipTO();\n-\t\tmembershipTO.setRoleId(7L);\n-\t\tAttributeTO testAttributeTO = new AttributeTO();\n-\t\ttestAttributeTO.setSchema(\"testAttribute\");\n-\t\ttestAttributeTO.addValue(\"a value\");\n-\t\tmembershipTO.addAttribute(testAttributeTO);\n-\t\tuserTO.addMembership(membershipTO);\n-\n-\t\tuserTO = userService.create(userTO);\n-\t\tassertNotNull(userTO);\n-\n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n-\n-\t\tAttributeCond isNullCond = new AttributeCond(\n-\t\t\t\tAttributeCond.Type.ISNOTNULL);\n-\t\tisNullCond.setSchema(\"loginDate\");\n-\t\tNodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n-\n-\t\tList<UserTO> matchedUsers = userService.search(searchCondition);\n-\t\tassertNotNull(matchedUsers);\n-\t\tassertFalse(matchedUsers.isEmpty());\n-\t\tSet<Long> userIds = new HashSet<Long>(matchedUsers.size());\n-\t\tfor (UserTO user : matchedUsers) {\n-\t\t\tuserIds.add(user.getId());\n-\t\t}\n-\t\tassertTrue(userIds.contains(1L));\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\n+        UserTO readUserTO = userService.read(1L);\n+        assertNotNull(readUserTO);\n+\n+        super.setupRestTemplate(\"user2\", \"password\");\n+\n+        SyncopeClientException exception = null;\n+        try {\n+            userService.read(1L);\n+            fail();\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            exception = e\n+                    .getException(SyncopeClientExceptionType.UnauthorizedRole);\n+        }\n+        assertNotNull(exception);\n+\n+        // reset admin credentials for restTemplate\n+        super.resetRestTemplate();\n+    }\n+\n+    @Test\n+    public void testUserSearch() {\n+        UserTO userTO = UserTestITCase.getSampleTO(\"testusersearch@test.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = userService.create(userTO);\n+        assertNotNull(userTO);\n+\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n+\n+        AttributeCond isNullCond = new AttributeCond(\n+                AttributeCond.Type.ISNOTNULL);\n+        isNullCond.setSchema(\"loginDate\");\n+        NodeCond searchCondition = NodeCond.getLeafCond(isNullCond);\n+\n+        List<UserTO> matchedUsers = userService.search(searchCondition);\n+        assertNotNull(matchedUsers);\n+        assertFalse(matchedUsers.isEmpty());\n+        Set<Long> userIds = new HashSet<Long>(matchedUsers.size());\n+        for (UserTO user : matchedUsers) {\n+            userIds.add(user.getId());\n+        }\n+        assertTrue(userIds.contains(1L));\n \n-\t\tsuper.setupRestTemplate(\"user2\", \"password\");\n-\n-\t\tmatchedUsers = userService.search(searchCondition);\n-\n-\t\tassertNotNull(matchedUsers);\n+        super.setupRestTemplate(\"user2\", \"password\");\n+\n+        matchedUsers = userService.search(searchCondition);\n+\n+        assertNotNull(matchedUsers);\n \n-\t\tuserIds = new HashSet<Long>(matchedUsers.size());\n+        userIds = new HashSet<Long>(matchedUsers.size());\n \n-\t\tfor (UserTO user : matchedUsers) {\n-\t\t\tuserIds.add(user.getId());\n-\t\t}\n-\t\tassertFalse(userIds.contains(1L));\n+        for (UserTO user : matchedUsers) {\n+            userIds.add(user.getId());\n+        }\n+        assertFalse(userIds.contains(1L));\n \n-\t\t// reset admin credentials for restTemplate\n-\t\tsuper.resetRestTemplate();\n-\t}\n+        // reset admin credentials for restTemplate\n+        super.resetRestTemplate();\n+    }\n \n-\t@Test\n-\tpublic void checkFailedLogins() {\n-\t\tUserTO userTO = UserTestITCase\n-\t\t\t\t.getSampleTO(\"checkFailedLogin@syncope.apache.org\");\n+    @Test\n+    public void checkFailedLogins() {\n+        UserTO userTO = UserTestITCase\n+                .getSampleTO(\"checkFailedLogin@syncope.apache.org\");\n \n-\t\tMembershipTO membershipTO = new MembershipTO();\n-\t\tmembershipTO.setRoleId(7L);\n-\t\tAttributeTO testAttributeTO = new AttributeTO();\n-\t\ttestAttributeTO.setSchema(\"testAttribute\");\n-\t\ttestAttributeTO.addValue(\"a value\");\n-\t\tmembershipTO.addAttribute(testAttributeTO);\n-\t\tuserTO.addMembership(membershipTO);\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n \n-\t\tuserTO = userService.create(userTO);\n-\t\tassertNotNull(userTO);\n+        userTO = userService.create(userTO);\n+        assertNotNull(userTO);\n \n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-\t\tUserTO readUserTO = userService.read(userTO.getId());\n+        UserTO readUserTO = userService.read(userTO.getId());\n \n-\t\tassertNotNull(readUserTO);\n-\t\tassertNotNull(readUserTO.getFailedLogins());\n-\t\tassertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n+        assertNotNull(readUserTO);\n+        assertNotNull(readUserTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n \n-\t\t// authentications failed ...\n+        // authentications failed ...\n \n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n-\t\tThrowable t = null;\n+        Throwable t = null;\n \n-\t\ttry {\n-\t\t\tuserService.read(userTO.getId());\n-\t\t\tassertNotNull(readUserTO);\n-\t\t} catch (Exception e) {\n-\t\t\tt = e;\n-\t\t}\n+        try {\n+            userService.read(userTO.getId());\n+            assertNotNull(readUserTO);\n+        } catch (Exception e) {\n+            t = e;\n+        }\n \n-\t\tassertNotNull(t);\n-\t\tt = null;\n+        assertNotNull(t);\n+        t = null;\n \n-\t\ttry {\n-\t\t\tuserService.read(userTO.getId());\n-\t\t\tassertNotNull(readUserTO);\n-\t\t} catch (Exception e) {\n-\t\t\tt = e;\n-\t\t}\n+        try {\n+            userService.read(userTO.getId());\n+            assertNotNull(readUserTO);\n+        } catch (Exception e) {\n+            t = e;\n+        }\n \n-\t\t// reset admin credentials for restTemplate\n-\t\tsuper.resetRestTemplate();\n+        // reset admin credentials for restTemplate\n+        super.resetRestTemplate();\n \n-\t\treadUserTO = userService.read(userTO.getId());\n-\t\tassertNotNull(readUserTO);\n-\t\tassertNotNull(readUserTO.getFailedLogins());\n-\t\tassertEquals(Integer.valueOf(2), readUserTO.getFailedLogins());\n+        readUserTO = userService.read(userTO.getId());\n+        assertNotNull(readUserTO);\n+        assertNotNull(readUserTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(2), readUserTO.getFailedLogins());\n \n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-\t\treadUserTO = userService.read(userTO.getId());\n-\t\tassertNotNull(readUserTO);\n-\t\tassertNotNull(readUserTO.getFailedLogins());\n-\t\tassertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n-\t}\n+        readUserTO = userService.read(userTO.getId());\n+        assertNotNull(readUserTO);\n+        assertNotNull(readUserTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(0), readUserTO.getFailedLogins());\n+    }\n \n-\t@Test\n-\tpublic void checkUserSuspension() {\n-\t\tUserTO userTO = UserTestITCase\n-\t\t\t\t.getSampleTO(\"checkSuspension@syncope.apache.org\");\n+    @Test\n+    public void checkUserSuspension() {\n+        UserTO userTO = UserTestITCase\n+                .getSampleTO(\"checkSuspension@syncope.apache.org\");\n \n-\t\tMembershipTO membershipTO = new MembershipTO();\n-\t\tmembershipTO.setRoleId(7L);\n-\t\tAttributeTO testAttributeTO = new AttributeTO();\n-\t\ttestAttributeTO.setSchema(\"testAttribute\");\n-\t\ttestAttributeTO.addValue(\"a value\");\n-\t\tmembershipTO.addAttribute(testAttributeTO);\n-\t\tuserTO.addMembership(membershipTO);\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n \n-\t\tuserTO = userService.create(userTO);\n-\t\tassertNotNull(userTO);\n+        userTO = userService.create(userTO);\n+        assertNotNull(userTO);\n \n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-\t\tuserTO = userService.read(userTO.getId());\n+        userTO = userService.read(userTO.getId());\n \n-\t\tassertNotNull(userTO);\n-\t\tassertNotNull(userTO.getFailedLogins());\n-\t\tassertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n \n-\t\t// authentications failed ...\n+        // authentications failed ...\n \n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n-\t\tThrowable t = null;\n+        Throwable t = null;\n \n-\t\ttry {\n-\t\t\tuserService.read(userTO.getId());\n-\t\t\tfail();\n-\t\t} catch (Exception e) {\n-\t\t\tt = e;\n-\t\t}\n+        try {\n+            userService.read(userTO.getId());\n+            fail();\n+        } catch (Exception e) {\n+            t = e;\n+        }\n \n-\t\tassertNotNull(t);\n-\t\tt = null;\n+        assertNotNull(t);\n+        t = null;\n \n-\t\ttry {\n-\t\t\tuserService.read(userTO.getId());\n-\t\t} catch (Exception e) {\n-\t\t\tt = e;\n-\t\t}\n+        try {\n+            userService.read(userTO.getId());\n+        } catch (Exception e) {\n+            t = e;\n+        }\n \n-\t\tassertNotNull(t);\n-\t\tt = null;\n+        assertNotNull(t);\n+        t = null;\n \n-\t\ttry {\n-\t\t\tuserService.read(userTO.getId());\n-\t\t} catch (Exception e) {\n-\t\t\tt = e;\n-\t\t}\n+        try {\n+            userService.read(userTO.getId());\n+        } catch (Exception e) {\n+            t = e;\n+        }\n \n-\t\tassertNotNull(t);\n-\t\tt = null;\n+        assertNotNull(t);\n+        t = null;\n \n-\t\t// reset admin credentials for restTemplate\n-\t\tsuper.resetRestTemplate();\n+        // reset admin credentials for restTemplate\n+        super.resetRestTemplate();\n \n-\t\tuserTO = userService.read(userTO.getId());\n+        userTO = userService.read(userTO.getId());\n \n-\t\tassertNotNull(userTO);\n-\t\tassertNotNull(userTO.getFailedLogins());\n-\t\tassertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n \n-\t\t// last authentication before suspension\n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n+        // last authentication before suspension\n+        super.setupRestTemplate(userTO.getUsername(), \"wrongpwd1\");\n \n-\t\ttry {\n-\t\t\tuserService.read(userTO.getId());\n-\t\t} catch (Exception e) {\n-\t\t\tt = e;\n-\t\t}\n+        try {\n+            userService.read(userTO.getId());\n+        } catch (Exception e) {\n+            t = e;\n+        }\n \n-\t\tassertNotNull(t);\n-\t\tt = null;\n+        assertNotNull(t);\n+        t = null;\n \n-\t\t// reset admin credentials for restTemplate\n-\t\tsuper.resetRestTemplate();\n+        // reset admin credentials for restTemplate\n+        super.resetRestTemplate();\n \n-\t\tuserTO = userService.read(userTO.getId());\n+        userTO = userService.read(userTO.getId());\n \n-\t\tassertNotNull(userTO);\n-\t\tassertNotNull(userTO.getFailedLogins());\n-\t\tassertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n-\t\tassertEquals(\"suspended\", userTO.getStatus());\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getFailedLogins());\n+        assertEquals(Integer.valueOf(3), userTO.getFailedLogins());\n+        assertEquals(\"suspended\", userTO.getStatus());\n \n-\t\t// check for authentication\n+        // check for authentication\n \n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-\t\ttry {\n-\t\t\tuserService.read(userTO.getId());\n-\t\t\tassertNotNull(userTO);\n-\t\t} catch (Exception e) {\n-\t\t\tt = e;\n-\t\t}\n+        try {\n+            userService.read(userTO.getId());\n+            assertNotNull(userTO);\n+        } catch (Exception e) {\n+            t = e;\n+        }\n \n-\t\tassertNotNull(t);\n-\t\tt = null;\n+        assertNotNull(t);\n+        t = null;\n \n-\t\t// reset admin credentials for restTemplate\n-\t\tsuper.resetRestTemplate();\n+        // reset admin credentials for restTemplate\n+        super.resetRestTemplate();\n \n-\t\tuserTO = userService.reactivate(userTO.getId());\n+        userTO = userService.reactivate(userTO.getId());\n \n-\t\tassertNotNull(userTO);\n-\t\tassertEquals(\"active\", userTO.getStatus());\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n \n-\t\tsuper.setupRestTemplate(userTO.getUsername(), \"password123\");\n+        super.setupRestTemplate(userTO.getUsername(), \"password123\");\n \n-\t\tuserTO = userService.read(userTO.getId());\n+        userTO = userService.read(userTO.getId());\n \n-\t\tassertNotNull(userTO);\n-\t\tassertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n-\t}\n+        assertNotNull(userTO);\n+        assertEquals(Integer.valueOf(0), userTO.getFailedLogins());\n+    }\n \n-\t@Test\n-\tpublic void issueSYNCOPE48() {\n-\t\t// Parent role, able to create users with role 1\n-\t\tRoleTO parentRole = new RoleTO();\n-\t\tparentRole.setName(\"parentAdminRole\");\n-\t\tparentRole.addEntitlement(\"USER_CREATE\");\n-\t\tparentRole.addEntitlement(\"ROLE_1\");\n-\t\tparentRole.setParent(1L);\n+    @Test\n+    public void issueSYNCOPE48() {\n+        // Parent role, able to create users with role 1\n+        RoleTO parentRole = new RoleTO();\n+        parentRole.setName(\"parentAdminRole\");\n+        parentRole.addEntitlement(\"USER_CREATE\");\n+        parentRole.addEntitlement(\"ROLE_1\");\n+        parentRole.setParent(1L);\n \n-\t\tparentRole = roleService.create(parentRole);\n-\t\tassertNotNull(parentRole);\n+        parentRole = roleService.create(parentRole);\n+        assertNotNull(parentRole);\n \n-\t\t// Child role, with no entitlements\n-\t\tRoleTO childRole = new RoleTO();\n-\t\tchildRole.setName(\"childAdminRole\");\n-\t\tchildRole.setParent(parentRole.getId());\n+        // Child role, with no entitlements\n+        RoleTO childRole = new RoleTO();\n+        childRole.setName(\"childAdminRole\");\n+        childRole.setParent(parentRole.getId());\n \n-\t\tchildRole = roleService.create(childRole);\n-\t\tassertNotNull(childRole);\n+        childRole = roleService.create(childRole);\n+        assertNotNull(childRole);\n \n-\t\t// User with child role, created by admin\n-\t\tUserTO role1Admin = UserTestITCase\n-\t\t\t\t.getSampleTO(\"syncope48admin@apache.org\");\n-\t\trole1Admin.setPassword(\"password\");\n-\t\tMembershipTO membershipTO = new MembershipTO();\n-\t\tmembershipTO.setRoleId(childRole.getId());\n-\t\trole1Admin.addMembership(membershipTO);\n+        // User with child role, created by admin\n+        UserTO role1Admin = UserTestITCase\n+                .getSampleTO(\"syncope48admin@apache.org\");\n+        role1Admin.setPassword(\"password\");\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(childRole.getId());\n+        role1Admin.addMembership(membershipTO);\n \n-\t\trole1Admin = userService.create(role1Admin);\n-\t\tassertNotNull(role1Admin);\n+        role1Admin = userService.create(role1Admin);\n+        assertNotNull(role1Admin);\n \n-\t\tsuper.setupRestTemplate(role1Admin.getUsername(), \"password\");\n+        super.setupRestTemplate(role1Admin.getUsername(), \"password\");\n \n-\t\t// User with role 1, created by user with child role created above\n-\t\tUserTO role1User = UserTestITCase\n-\t\t\t\t.getSampleTO(\"syncope48user@apache.org\");\n-\t\tmembershipTO = new MembershipTO();\n-\t\tmembershipTO.setRoleId(1L);\n-\t\trole1User.addMembership(membershipTO);\n+        // User with role 1, created by user with child role created above\n+        UserTO role1User = UserTestITCase\n+                .getSampleTO(\"syncope48user@apache.org\");\n+        membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(1L);\n+        role1User.addMembership(membershipTO);\n \n-\t\trole1User = userService.create(role1User);\n-\t\tassertNotNull(role1User);\n+        role1User = userService.create(role1User);\n+        assertNotNull(role1User);\n \n-\t\t// reset admin credentials for restTemplate\n-\t\tsuper.resetRestTemplate();\n-\t}\n+        // reset admin credentials for restTemplate\n+        super.resetRestTemplate();\n+    }\n }"},{"sha":"40b67c81e65825095d48d126c7cc18eba086202e","filename":"core/src/test/java/org/apache/syncope/core/rest/DerivedSchemaTestITCase.java","status":"modified","additions":11,"deletions":10,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FDerivedSchemaTestITCase.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -26,6 +26,7 @@\n \n import org.apache.syncope.client.to.DerivedSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.services.SchemaService;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -40,7 +41,7 @@ public class DerivedSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<DerivedSchemaTO> derivedSchemas = schemaService.list(USER, DerivedSchemaTO[].class);\n+        List<DerivedSchemaTO> derivedSchemas = schemaService.list(USER, SchemaService.SchemaType.DERIVED);\n         assertFalse(derivedSchemas.isEmpty());\n         for (DerivedSchemaTO derivedSchemaTO : derivedSchemas) {\n             assertNotNull(derivedSchemaTO);\n@@ -49,7 +50,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        DerivedSchemaTO derivedSchemaTO = schemaService.read(USER, \"cn\", DerivedSchemaTO.class);\n+        DerivedSchemaTO derivedSchemaTO = schemaService.read(USER, SchemaService.SchemaType.DERIVED, \"cn\");\n         assertNotNull(derivedSchemaTO);\n     }\n \n@@ -59,25 +60,25 @@ public void create() {\n         schema.setName(\"derived\");\n         schema.setExpression(\"derived_sx + '_' + derived_dx\");\n \n-        DerivedSchemaTO actual = schemaService.create(USER, schema);\n+        DerivedSchemaTO actual = schemaService.create(USER, SchemaService.SchemaType.DERIVED, schema);\n         assertNotNull(actual);\n \n-        actual = schemaService.read(USER, actual.getName(), DerivedSchemaTO.class);\n+        actual = schemaService.read(USER, SchemaService.SchemaType.DERIVED, actual.getName());\n         assertNotNull(actual);\n         assertEquals(actual.getExpression(), \"derived_sx + '_' + derived_dx\");\n     }\n \n     @Test\n     public void delete() {\n-        DerivedSchemaTO schema = schemaService.read(ROLE, \"rderiveddata\", DerivedSchemaTO.class);\n+        DerivedSchemaTO schema = schemaService.read(ROLE, SchemaService.SchemaType.DERIVED, \"rderiveddata\");\n         assertNotNull(schema);\n \n-        DerivedSchemaTO schemaToDelete = schemaService.delete(ROLE, schema.getName(), DerivedSchemaTO.class);\n+        DerivedSchemaTO schemaToDelete = schemaService.delete(ROLE, SchemaService.SchemaType.DERIVED, schema.getName());\n         assertNotNull(schemaToDelete);\n \n         Throwable t = null;\n         try {\n-            schemaService.read(ROLE, \"rderiveddata\", DerivedSchemaTO.class);\n+            schemaService.read(ROLE, SchemaService.SchemaType.DERIVED, \"rderiveddata\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));\n@@ -87,16 +88,16 @@ public void delete() {\n \n     @Test\n     public void update() {\n-        DerivedSchemaTO schema = schemaService.read(MEMBERSHIP, \"mderiveddata\", DerivedSchemaTO.class);\n+        DerivedSchemaTO schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '-' + mderived_dx\", schema.getExpression());\n \n         schema.setExpression(\"mderived_sx + '.' + mderived_dx\");\n \n-        schema = schemaService.update(MEMBERSHIP, schema.getName(), schema);\n+        schema = schemaService.update(MEMBERSHIP, SchemaService.SchemaType.DERIVED, schema.getName(), schema);\n         assertNotNull(schema);\n \n-        schema = schemaService.read(MEMBERSHIP, \"mderiveddata\", DerivedSchemaTO.class);\n+        schema = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.DERIVED, \"mderiveddata\");\n         assertNotNull(schema);\n         assertEquals(\"mderived_sx + '.' + mderived_dx\", schema.getExpression());\n     }"},{"sha":"8a73ae8f4e3f5404558cee5a395df0c96e0dd3d8","filename":"core/src/test/java/org/apache/syncope/core/rest/LoggerTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FLoggerTestITCase.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -65,7 +65,7 @@ public void setLevel() {\n         assertNotNull(loggers);\n         int startSize = loggers.size();\n \n-        LoggerTO logger = loggerService.setLogLevel(\"TEST\", Level.INFO);\n+        LoggerTO logger = loggerService.update(\"TEST\", Level.INFO);\n         assertNotNull(logger);\n         assertEquals(SyncopeLoggerLevel.INFO, logger.getLevel());\n \n@@ -74,7 +74,7 @@ public void setLevel() {\n         assertEquals(startSize + 1, loggers.size());\n \n         // TEST Delete\n-        loggerService.deleteLog(\"TEST\");\n+        loggerService.delete(\"TEST\");\n         loggers = loggerService.listLogs();\n         assertNotNull(loggers);\n         assertEquals(startSize, loggers.size());"},{"sha":"5a98eef077698059e322b992afcc22e147c317de","filename":"core/src/test/java/org/apache/syncope/core/rest/PolicyTestITCase.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -44,7 +44,7 @@ public class PolicyTestITCase extends AbstractTest {\n     @Test\n     public void listByType() {\n         List<SyncPolicyTO> policyTOs = policyService.listByType(PolicyType.SYNC);\n-        \n+\n         assertNotNull(policyTOs);\n         assertFalse(policyTOs.isEmpty());\n     }\n@@ -62,7 +62,7 @@ public void getGlobalPasswordPolicy() {\n \n         assertNotNull(policyTO);\n         assertEquals(PolicyType.GLOBAL_PASSWORD, policyTO.getType());\n-        assertEquals(8, ((PasswordPolicySpec) policyTO.getSpecification()).getMinLength());\n+        assertEquals(8, policyTO.getSpecification().getMinLength());\n     }\n \n     @Test\n@@ -134,7 +134,7 @@ public void update() {\n \n         assertNotNull(\"find to update did not work\", policy);\n \n-        PasswordPolicySpec policySpec = ((PasswordPolicyTO) policy).getSpecification();\n+        PasswordPolicySpec policySpec = policy.getSpecification();\n         policySpec.setMaxLength(22);\n         policy.setSpecification(policySpec);\n \n@@ -143,8 +143,8 @@ public void update() {\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n-        assertEquals(22, ((PasswordPolicyTO) policy).getSpecification().getMaxLength());\n-        assertEquals(8, ((PasswordPolicyTO) policy).getSpecification().getMinLength());\n+        assertEquals(22, policy.getSpecification().getMaxLength());\n+        assertEquals(8, policy.getSpecification().getMinLength());\n     }\n \n     @Test\n@@ -166,5 +166,5 @@ public void delete() {\n \n         assertNotNull(t);\n     }\n-    \n+\n }"},{"sha":"1ab53a2eac3bde38ed6d1812327eae5a78df9d27","filename":"core/src/test/java/org/apache/syncope/core/rest/RoleTestITCase.java","status":"modified","additions":0,"deletions":4,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FRoleTestITCase.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -28,13 +28,9 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-import org.apache.http.auth.UsernamePasswordCredentials;\n-import org.apache.http.impl.client.DefaultHttpClient;\n-import org.apache.syncope.client.http.PreemptiveAuthHttpRequestFactory;\n import org.apache.syncope.client.mod.RoleMod;\n import org.apache.syncope.client.to.ConnObjectTO;\n import org.apache.syncope.client.to.RoleTO;\n-import org.apache.syncope.client.to.SchemaTO;\n import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;"},{"sha":"3e08130639c5f5efbb8051cd231bf5b58bbe413c","filename":"core/src/test/java/org/apache/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":19,"deletions":18,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -34,6 +34,7 @@\n import org.apache.syncope.client.util.AttributableOperations;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.apache.syncope.client.validation.SyncopeClientException;\n+import org.apache.syncope.services.SchemaService;\n import org.apache.syncope.types.EntityViolationType;\n import org.apache.syncope.types.SchemaType;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n@@ -57,10 +58,10 @@ public void create() {\n         schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n-        SchemaTO newSchemaTO = schemaService.create(USER, schemaTO);\n+        SchemaTO newSchemaTO = schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n \n-        newSchemaTO = schemaService.create(MEMBERSHIP, schemaTO);\n+        newSchemaTO = schemaService.create(MEMBERSHIP, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertEquals(schemaTO, newSchemaTO);\n     }\n \n@@ -71,7 +72,7 @@ public void createWithNotPermittedName() {\n         schemaTO.setType(SchemaType.String);\n \n         try {\n-            schemaService.create(USER, schemaTO);\n+            schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -90,7 +91,7 @@ public void createREnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            schemaService.create(ROLE, schemaTO);\n+            schemaService.create(ROLE, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -109,7 +110,7 @@ public void createUEnumWithoutEnumeration() {\n         schemaTO.setType(SchemaType.Enum);\n \n         try {\n-            schemaService.create(USER, schemaTO);\n+            schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -123,11 +124,11 @@ public void createUEnumWithoutEnumeration() {\n \n     @Test\n     public void delete() {\n-        SchemaTO deletedSchema = schemaService.delete(USER, \"cool\", SchemaTO.class);\n+        SchemaTO deletedSchema = schemaService.delete(USER, SchemaService.SchemaType.NORMAL, \"cool\");\n         assertNotNull(deletedSchema);\n         SchemaTO firstname = null;\n         try {\n-            firstname = schemaService.read(USER, \"cool\", SchemaTO.class);\n+            firstname = schemaService.read(USER, SchemaService.SchemaType.NORMAL, \"cool\");\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n@@ -136,19 +137,19 @@ public void delete() {\n \n     @Test\n     public void list() {\n-        List<SchemaTO> userSchemas = schemaService.list(USER, SchemaTO[].class);\n+        List<SchemaTO> userSchemas = schemaService.list(USER, SchemaService.SchemaType.NORMAL);\n         assertFalse(userSchemas.isEmpty());\n         for (SchemaTO schemaTO : userSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> roleSchemas = schemaService.list(ROLE, SchemaTO[].class);\n+        List<SchemaTO> roleSchemas = schemaService.list(ROLE, SchemaService.SchemaType.NORMAL);\n         assertFalse(roleSchemas.isEmpty());\n         for (SchemaTO schemaTO : roleSchemas) {\n             assertNotNull(schemaTO);\n         }\n \n-        List<SchemaTO> membershipSchemas = schemaService.list(MEMBERSHIP, SchemaTO[].class);\n+        List<SchemaTO> membershipSchemas = schemaService.list(MEMBERSHIP, SchemaService.SchemaType.NORMAL);\n         assertFalse(membershipSchemas.isEmpty());\n         for (SchemaTO schemaTO : membershipSchemas) {\n             assertNotNull(schemaTO);\n@@ -157,15 +158,15 @@ public void list() {\n \n     @Test\n     public void update() {\n-        SchemaTO schemaTO = schemaService.read(ROLE, \"icon\", SchemaTO.class);\n+        SchemaTO schemaTO = schemaService.read(ROLE, SchemaService.SchemaType.NORMAL, \"icon\");\n         assertNotNull(schemaTO);\n \n-        SchemaTO updatedTO = schemaService.update(ROLE, schemaTO.getName(), schemaTO);\n+        SchemaTO updatedTO = schemaService.update(ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n         assertEquals(schemaTO, updatedTO);\n \n         updatedTO.setType(SchemaType.Date);\n         try {\n-            schemaService.update(ROLE, schemaTO.getName(), updatedTO);\n+            schemaService.update(ROLE, SchemaService.SchemaType.NORMAL, schemaTO.getName(), updatedTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidRSchema);\n@@ -179,7 +180,7 @@ public void issue258() {\n         schemaTO.setName(\"schema_issue258\");\n         schemaTO.setType(SchemaType.Double);\n \n-        schemaTO = schemaService.create(USER, schemaTO);\n+        schemaTO = schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue258@syncope.apache.org\");\n@@ -190,7 +191,7 @@ public void issue258() {\n \n         schemaTO.setType(SchemaType.Long);\n         try {\n-            schemaService.update(USER, schemaTO.getName(), schemaTO);\n+            schemaService.update(USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);\n@@ -205,7 +206,7 @@ public void issue259() {\n         schemaTO.setUniqueConstraint(true);\n         schemaTO.setType(SchemaType.Long);\n \n-        schemaTO = schemaService.create(USER, schemaTO);\n+        schemaTO = schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue259@syncope.apache.org\");\n@@ -231,7 +232,7 @@ public void issue260() {\n         schemaTO.setType(SchemaType.Double);\n         schemaTO.setUniqueConstraint(true);\n \n-        schemaTO = schemaService.create(USER, schemaTO);\n+        schemaTO = schemaService.create(USER, SchemaService.SchemaType.NORMAL, schemaTO);\n         assertNotNull(schemaTO);\n \n         UserTO userTO = UserTestITCase.getSampleTO(\"issue260@syncope.apache.org\");\n@@ -241,7 +242,7 @@ public void issue260() {\n \n         schemaTO.setUniqueConstraint(false);\n         try {\n-            schemaService.update(USER, schemaTO.getName(), schemaTO);\n+            schemaService.update(USER, SchemaService.SchemaType.NORMAL, schemaTO.getName(), schemaTO);\n             fail(\"This should not be reacheable\");\n         } catch (SyncopeClientCompositeErrorException scce) {\n             SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.InvalidUSchema);"},{"sha":"8440cc628d9ad69f607409f840352ba3dfefaf18","filename":"core/src/test/java/org/apache/syncope/core/rest/VirtualSchemaTestITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c89ee1780ac71411c1dd88fe62a58f301c4d4b26/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FVirtualSchemaTestITCase.java?ref=c89ee1780ac71411c1dd88fe62a58f301c4d4b26","patch":"@@ -25,6 +25,7 @@\n \n import org.apache.syncope.client.to.VirtualSchemaTO;\n import org.apache.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.apache.syncope.services.SchemaService;\n import org.apache.syncope.types.SyncopeClientExceptionType;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -39,7 +40,7 @@ public class VirtualSchemaTestITCase extends AbstractTest {\n \n     @Test\n     public void list() {\n-        List<VirtualSchemaTO> VirtualSchemas = schemaService.list(USER, VirtualSchemaTO[].class);\n+        List<VirtualSchemaTO> VirtualSchemas = schemaService.list(USER, SchemaService.SchemaType.VIRTUAL);\n         assertFalse(VirtualSchemas.isEmpty());\n         for (VirtualSchemaTO VirtualSchemaTO : VirtualSchemas) {\n             assertNotNull(VirtualSchemaTO);\n@@ -48,8 +49,7 @@ public void list() {\n \n     @Test\n     public void read() {\n-        VirtualSchemaTO VirtualSchemaTO = schemaService.read(MEMBERSHIP, \"mvirtualdata\",\n-                VirtualSchemaTO.class);\n+        VirtualSchemaTO VirtualSchemaTO = schemaService.read(MEMBERSHIP, SchemaService.SchemaType.VIRTUAL, \"mvirtualdata\");\n         assertNotNull(VirtualSchemaTO);\n     }\n \n@@ -58,24 +58,24 @@ public void create() {\n         VirtualSchemaTO schema = new VirtualSchemaTO();\n         schema.setName(\"virtual\");\n \n-        VirtualSchemaTO actual = schemaService.create(USER, schema);\n+        VirtualSchemaTO actual = schemaService.create(USER, SchemaService.SchemaType.VIRTUAL, schema);\n         assertNotNull(actual);\n \n-        actual = schemaService.read(USER, actual.getName(), VirtualSchemaTO.class);\n+        actual = schemaService.read(USER, SchemaService.SchemaType.VIRTUAL, actual.getName());\n         assertNotNull(actual);\n     }\n \n     @Test\n     public void delete() {\n-        VirtualSchemaTO schema = schemaService.read(ROLE, \"rvirtualdata\", VirtualSchemaTO.class);\n+        VirtualSchemaTO schema = schemaService.read(ROLE, SchemaService.SchemaType.VIRTUAL, \"rvirtualdata\");\n         assertNotNull(schema);\n \n-        VirtualSchemaTO deletedSchema = schemaService.delete(ROLE, schema.getName(), VirtualSchemaTO.class);\n+        VirtualSchemaTO deletedSchema = schemaService.delete(ROLE, SchemaService.SchemaType.VIRTUAL, schema.getName());\n         assertNotNull(deletedSchema);\n \n         Throwable t = null;\n         try {\n-            schema = schemaService.read(ROLE, \"rvirtualdata\", VirtualSchemaTO.class);\n+            schema = schemaService.read(ROLE, SchemaService.SchemaType.VIRTUAL, \"rvirtualdata\");\n         } catch (SyncopeClientCompositeErrorException e) {\n             t = e;\n             assertNotNull(e.getException(SyncopeClientExceptionType.NotFound));"}]}