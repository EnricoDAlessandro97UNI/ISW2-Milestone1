{"sha":"b97e4af9f1eb728051d719ea2bd52c28a897293d","node_id":"C_kwDOJfYA1toAKGI5N2U0YWY5ZjFlYjcyODA1MWQ3MTllYTJiZDUyYzI4YTg5NzI5M2Q","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2022-07-08T10:14:59Z"},"committer":{"name":"GitHub","email":"noreply@github.com","date":"2022-07-08T10:14:59Z"},"message":"[SYNCOPE-1688] Manage and reuse saved FIQL queries from Console (#359)","tree":{"sha":"a2344bab332ad5f13ad7e26b058f3d4548511950","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/a2344bab332ad5f13ad7e26b058f3d4548511950"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b97e4af9f1eb728051d719ea2bd52c28a897293d","comment_count":0,"verification":{"verified":true,"reason":"valid","signature":"-----BEGIN PGP SIGNATURE-----\n\nwsBcBAABCAAQBQJiyAOjCRBK7hj4Ov3rIwAA6KQIALJm+HXb89ie9NRakjbTC2h0\npfvvIlcqbdueDwJEu1qP4zqRd1nd366RKoYi/ZhrKr/pUACnIK6G1QhagTHXGkRA\nE5J2uMRlu9BOzmXTFuhOBr8IRl+uBGWR1Tm3/3ADvstxFArKujOoYlnq/rsoH2qO\nPOA9oDDkOAjoFe0DLlm8gg5XIuMwn+MSwhyU/cp37crt9lEpmgIn8E69NvbFN9GQ\n28p5WO+Umb0WiDbEwRQ5TyESoChuq5Z2tNgpPIRV6DGw53yqJsderES3fDx0QH9i\nUnDuYlksv9OLZADWCrP3S7A0p0nqQvgP/GF8ecMub4tazshQfJ3Iir1tE6Ku7jM=\n=02VL\n-----END PGP SIGNATURE-----\n","payload":"tree a2344bab332ad5f13ad7e26b058f3d4548511950\nparent e4d0fa81dd6e458d01d265cbe9dde5a95bda8c43\nauthor Francesco Chicchiriccò <ilgrosso@users.noreply.github.com> 1657275299 +0200\ncommitter GitHub <noreply@github.com> 1657275299 +0200\n\n[SYNCOPE-1688] Manage and reuse saved FIQL queries from Console (#359)\n\n"}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b97e4af9f1eb728051d719ea2bd52c28a897293d","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b97e4af9f1eb728051d719ea2bd52c28a897293d","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b97e4af9f1eb728051d719ea2bd52c28a897293d/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"web-flow","id":19864447,"node_id":"MDQ6VXNlcjE5ODY0NDQ3","avatar_url":"https://avatars.githubusercontent.com/u/19864447?v=4","gravatar_id":"","url":"https://api.github.com/users/web-flow","html_url":"https://github.com/web-flow","followers_url":"https://api.github.com/users/web-flow/followers","following_url":"https://api.github.com/users/web-flow/following{/other_user}","gists_url":"https://api.github.com/users/web-flow/gists{/gist_id}","starred_url":"https://api.github.com/users/web-flow/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/web-flow/subscriptions","organizations_url":"https://api.github.com/users/web-flow/orgs","repos_url":"https://api.github.com/users/web-flow/repos","events_url":"https://api.github.com/users/web-flow/events{/privacy}","received_events_url":"https://api.github.com/users/web-flow/received_events","type":"User","site_admin":false},"parents":[{"sha":"e4d0fa81dd6e458d01d265cbe9dde5a95bda8c43","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e4d0fa81dd6e458d01d265cbe9dde5a95bda8c43","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e4d0fa81dd6e458d01d265cbe9dde5a95bda8c43"}],"stats":{"total":2353,"additions":2049,"deletions":304},"files":[{"sha":"08475c41109657cdc2ab8c9cca4593ad96a000db","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/authprofiles/AuthProfileWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fauthprofiles%2FAuthProfileWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -66,7 +66,7 @@ protected class Step extends WizardStep {\n         Step(final T modelObject) {\n             model.setObject(modelObject);\n             model.setInitialModelObject(modelObject);\n-            add(new BeanPanel<>(\"bean\", model).setRenderBodyOnly(true));\n+            add(new BeanPanel<>(\"bean\", model, pageRef).setRenderBodyOnly(true));\n         }\n     }\n }"},{"sha":"784b04d5dbaeaa67b85a085cfab44978911b775d","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/AttrRepoWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAttrRepoWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -155,12 +155,12 @@ protected void onEvent(final AjaxRequestTarget target) {\n         }\n     }\n \n-    protected static class Configuration extends WizardStep {\n+    protected class Configuration extends WizardStep {\n \n         private static final long serialVersionUID = -785981096328637758L;\n \n         Configuration(final AttrRepoTO attrRepo) {\n-            add(new BeanPanel<>(\"bean\", new PropertyModel<>(attrRepo, \"conf\")).setRenderBodyOnly(true));\n+            add(new BeanPanel<>(\"bean\", new PropertyModel<>(attrRepo, \"conf\"), pageRef).setRenderBodyOnly(true));\n         }\n     }\n "},{"sha":"d976f5ab8a5d8c6c0387b049d8a1091d862b839a","filename":"client/am/console/src/main/java/org/apache/syncope/client/console/wizards/AuthModuleWizardBuilder.java","status":"modified","additions":5,"deletions":4,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fam%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FAuthModuleWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -160,16 +160,17 @@ protected void onEvent(final AjaxRequestTarget target) {\n         }\n     }\n \n-    protected static class Configuration extends WizardStep {\n+    protected class Configuration extends WizardStep {\n \n         private static final long serialVersionUID = -785981096328637758L;\n \n         Configuration(final AuthModuleTO authModule) {\n-            add(new BeanPanel<>(\"bean\", new PropertyModel<>(authModule, \"conf\"), \"ldap\").setRenderBodyOnly(true));\n+            add(new BeanPanel<>(\n+                    \"bean\", new PropertyModel<>(authModule, \"conf\"), pageRef, \"ldap\").setRenderBodyOnly(true));\n         }\n     }\n \n-    protected static class GoogleMfaAuthModuleConfLDAP extends WizardStep implements WizardModel.ICondition {\n+    protected class GoogleMfaAuthModuleConfLDAP extends WizardStep implements WizardModel.ICondition {\n \n         private static final long serialVersionUID = 5328049907748683944L;\n \n@@ -213,7 +214,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             });\n             add(enable);\n \n-            add(new BeanPanel<>(\"bean\", beanPanelModel).setRenderBodyOnly(true));\n+            add(new BeanPanel<>(\"bean\", beanPanelModel, pageRef).setRenderBodyOnly(true));\n             setOutputMarkupId(true);\n         }\n "},{"sha":"24875279f14499721e7248af8644a4870ee0cc78","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/ConnObjectListViewPanel.java","status":"modified","additions":55,"deletions":51,"changes":106,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FConnObjectListViewPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -79,21 +79,23 @@ public abstract class ConnObjectListViewPanel extends Panel {\n \n     private static final long serialVersionUID = 4986172040062752781L;\n \n-    private static final Logger LOG = LoggerFactory.getLogger(ConnObjectListViewPanel.class);\n+    protected static final Logger LOG = LoggerFactory.getLogger(ConnObjectListViewPanel.class);\n \n-    private static final int SIZE = 10;\n+    protected static final int SIZE = 10;\n \n-    private static final String STATUS = \"Status\";\n+    protected static final String STATUS = \"Status\";\n \n-    private String nextPageCookie;\n+    protected String nextPageCookie;\n \n-    private AbstractSearchPanel searchPanel;\n+    protected AbstractSearchPanel searchPanel;\n \n-    private WebMarkupContainer arrows;\n+    protected WebMarkupContainer arrows;\n \n-    private String anyType;\n+    protected String anyType;\n \n-    private ResourceTO resource;\n+    protected ResourceTO resource;\n+\n+    protected final PageReference pageRef;\n \n     protected ConnObjectListViewPanel(\n             final String id,\n@@ -105,6 +107,7 @@ protected ConnObjectListViewPanel(\n \n         this.anyType = anyType;\n         this.resource = resource;\n+        this.pageRef = pageRef;\n \n         final Model<Integer> model = Model.of(-1);\n         final StringResourceModel res = new StringResourceModel(\"search.result\", this, new Model<>(anyType));\n@@ -148,7 +151,7 @@ public void onClick(final AjaxRequestTarget target) {\n         List<ConnObjectTO> listOfItems = reloadItems(resource.getKey(), anyType, null, null);\n \n         ListViewPanel.Builder<ConnObjectTO> builder = new ListViewPanel.Builder<>(\n-            ConnObjectTO.class, pageRef) {\n+                ConnObjectTO.class, pageRef) {\n \n             private static final long serialVersionUID = -8251750413385566738L;\n \n@@ -158,45 +161,45 @@ protected Component getValueComponent(final String key, final ConnObjectTO bean)\n                     ReconStatus status;\n                     try {\n                         status = ReconciliationRestClient.status(\n-                            new ReconQuery.Builder(anyType, resource.getKey()).fiql(bean.getFiql()).build());\n+                                new ReconQuery.Builder(anyType, resource.getKey()).fiql(bean.getFiql()).build());\n                     } catch (Exception e) {\n                         LOG.error(\"While requesting for reconciliation status of {} {} with FIQL '{}'\",\n-                            anyType, resource.getKey(), bean.getFiql(), e);\n+                                anyType, resource.getKey(), bean.getFiql(), e);\n \n                         status = new ReconStatus();\n                     }\n \n                     return status.getOnSyncope() == null\n-                        ? StatusUtils.getLabel(\"field\", \"notfound icon\", \"Not found\", Constants.NOT_FOUND_ICON)\n-                        : new Label(\"field\", Model.of()).add(new PopoverBehavior(\n-                        Model.of(),\n-                        Model.of(status.getAnyKey()),\n-                        new PopoverConfig().\n-                            withTitle(status.getMatchType() == MatchType.LINKED_ACCOUNT\n-                                ? MatchType.LINKED_ACCOUNT.name() + \", \" + AnyTypeKind.USER\n-                                : status.getAnyTypeKind().name()).\n-                            withPlacement(TooltipConfig.Placement.left)) {\n-\n-                        private static final long serialVersionUID = -7867802555691605021L;\n-\n-                        @Override\n-                        protected String createRelAttribute() {\n-                            return \"field\";\n-                        }\n-\n-                        @Override\n-                        public void onComponentTag(final Component component, final ComponentTag tag) {\n-                            super.onComponentTag(component, tag);\n-                            tag.put(\"class\", Constants.ACTIVE_ICON);\n-                        }\n-                    });\n+                            ? StatusUtils.getLabel(\"field\", \"notfound icon\", \"Not found\", Constants.NOT_FOUND_ICON)\n+                            : new Label(\"field\", Model.of()).add(new PopoverBehavior(\n+                                    Model.of(),\n+                                    Model.of(status.getAnyKey()),\n+                                    new PopoverConfig().\n+                                            withTitle(status.getMatchType() == MatchType.LINKED_ACCOUNT\n+                                                    ? MatchType.LINKED_ACCOUNT.name() + \", \" + AnyTypeKind.USER\n+                                                    : status.getAnyTypeKind().name()).\n+                                            withPlacement(TooltipConfig.Placement.left)) {\n+\n+                                private static final long serialVersionUID = -7867802555691605021L;\n+\n+                                @Override\n+                                protected String createRelAttribute() {\n+                                    return \"field\";\n+                                }\n+\n+                                @Override\n+                                public void onComponentTag(final Component component, final ComponentTag tag) {\n+                                    super.onComponentTag(component, tag);\n+                                    tag.put(\"class\", Constants.ACTIVE_ICON);\n+                                }\n+                            });\n                 } else {\n                     Optional<Attr> attr =\n-                        bean.getAttrs().stream().filter(object -> object.getSchema().equals(key)).findAny();\n+                            bean.getAttrs().stream().filter(object -> object.getSchema().equals(key)).findAny();\n \n                     return attr.isEmpty() || attr.get().getValues().isEmpty()\n-                        ? new Label(\"field\", StringUtils.EMPTY)\n-                        : new CollectionPanel(\"field\", attr.get().getValues());\n+                            ? new Label(\"field\", StringUtils.EMPTY)\n+                            : new CollectionPanel(\"field\", attr.get().getValues());\n                 }\n             }\n \n@@ -228,19 +231,19 @@ public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObje\n                 public void onClick(final AjaxRequestTarget target, final ConnObjectTO modelObject) {\n                     try {\n                         ReconStatus status = ReconciliationRestClient.status(\n-                            new ReconQuery.Builder(anyType, resource.getKey()).fiql(modelObject.getFiql()).build());\n+                                new ReconQuery.Builder(anyType, resource.getKey()).fiql(modelObject.getFiql()).build());\n \n                         pullConnObject(\n-                            modelObject.getFiql(),\n-                            target,\n-                            resource.getKey(),\n-                            anyType,\n-                            status.getRealm(),\n-                            StringUtils.isNotBlank(status.getAnyKey()),\n-                            pageRef);\n+                                modelObject.getFiql(),\n+                                target,\n+                                resource.getKey(),\n+                                anyType,\n+                                status.getRealm(),\n+                                StringUtils.isNotBlank(status.getAnyKey()),\n+                                pageRef);\n                     } catch (Exception e) {\n                         LOG.error(\"While puling single object {} {} with FIQL '{}'\",\n-                            anyType, resource.getKey(), modelObject.getFiql(), e);\n+                                anyType, resource.getKey(), modelObject.getFiql(), e);\n \n                         SyncopeConsoleSession.get().onException(e);\n                         ((BasePage) pageRef.getPage()).getNotificationPanel().refresh(target);\n@@ -298,13 +301,14 @@ protected abstract void pullConnObject(\n             boolean isOnSyncope,\n             PageReference pageRef);\n \n-    private List<ConnObjectTO> reloadItems(\n+    protected List<ConnObjectTO> reloadItems(\n             final String resource,\n             final String anyType,\n             final String cookie,\n             final String fiql) {\n \n-        Pair<String, List<ConnObjectTO>> items = new ResourceRestClient().searchConnObjects(resource,\n+        Pair<String, List<ConnObjectTO>> items = new ResourceRestClient().searchConnObjects(\n+                resource,\n                 anyType,\n                 new ConnObjectTOQuery.Builder().\n                         size(SIZE).\n@@ -316,7 +320,7 @@ private List<ConnObjectTO> reloadItems(\n         return items.getRight();\n     }\n \n-    private AbstractSearchPanel getSearchPanel(final String id, final String anyType) {\n+    protected AbstractSearchPanel getSearchPanel(final String id, final String anyType) {\n         final List<SearchClause> clauses = new ArrayList<>();\n         final SearchClause clause = new SearchClause();\n         clauses.add(clause);\n@@ -331,10 +335,10 @@ private AbstractSearchPanel getSearchPanel(final String id, final String anyType\n                 : AnyTypeRestClient.read(anyType).getKind();\n \n         return new ConnObjectSearchPanel.Builder(resource, anyTypeKind, anyType,\n-                new ListModel<>(clauses)).required(true).enableSearch().build(id);\n+                new ListModel<>(clauses), pageRef).required(true).enableSearch().build(id);\n     }\n \n-    private String getFiql() {\n+    protected String getFiql() {\n         return SearchUtils.buildFIQL(\n                 searchPanel.getModel().getObject(),\n                 SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder(),"},{"sha":"3dc4f855e5690a547bca6e50b48e2df159340884","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/panels/search/ConnObjectSearchPanel.java","status":"modified","additions":21,"deletions":7,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FConnObjectSearchPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -23,10 +23,13 @@\n import java.util.function.Function;\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.ConnectorRestClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.ConnIdObjectClassTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.ResourceTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n@@ -52,9 +55,10 @@ public Builder(\n                 final ResourceTO resource,\n                 final AnyTypeKind anyType,\n                 final String type,\n-                final IModel<List<SearchClause>> model) {\n+                final IModel<List<SearchClause>> model,\n+                final PageReference pageRef) {\n \n-            super(model);\n+            super(model, pageRef);\n             this.resource = resource;\n             this.anyType = anyType;\n             this.typeName = type;\n@@ -76,6 +80,16 @@ protected ConnObjectSearchPanel(final String id, final AnyTypeKind kind, final S\n         this.resource = builder.resource;\n     }\n \n+    @Override\n+    protected AbstractFiqlSearchConditionBuilder<?, ?, ?> getSearchConditionBuilder() {\n+        return SyncopeClient.getConnObjectTOFiqlSearchConditionBuilder();\n+    }\n+\n+    @Override\n+    protected String getFIQLQueryTarget() {\n+        return \"CONN_OBJ\";\n+    }\n+\n     @Override\n     protected void populate() {\n         this.types = new LoadableDetachableModel<>() {\n@@ -105,11 +119,11 @@ protected Map<String, PlainSchemaTO> load() {\n             @Override\n             protected Map<String, PlainSchemaTO> load() {\n                 return connectorRestClient.buildObjectClassInfo(\n-                    connectorRestClient.read(resource.getConnector()), false).stream().\n-                    map(ConnIdObjectClassTO::getAttributes).\n-                    flatMap(List::stream).\n-                    collect(Collectors.toMap(PlainSchemaTO::getKey, Function.identity(),\n-                        (schema1, schema2) -> schema1));\n+                        connectorRestClient.read(resource.getConnector()), false).stream().\n+                        map(ConnIdObjectClassTO::getAttributes).\n+                        flatMap(List::stream).\n+                        collect(Collectors.toMap(PlainSchemaTO::getKey, Function.identity(),\n+                                (schema1, schema2) -> schema1));\n             }\n         };\n     }"},{"sha":"8ddf0bebf9d836647909c1353d3ff3d2c75a5891","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/topology/TopologyTogglePanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftopology%2FTopologyTogglePanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -23,7 +23,6 @@\n import java.io.Serializable;\n import java.text.MessageFormat;\n import java.util.Optional;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.audit.AuditHistoryModal;\n import org.apache.syncope.client.console.panels.ConnObjects;\n@@ -684,7 +683,7 @@ public void onEvent(final IEvent<?> event) {\n             if (result != null && result instanceof ConnInstanceTO && target.isPresent()) {\n                 // update Toggle Panel header\n                 ConnInstanceTO conn = ConnInstanceTO.class.cast(result);\n-                setHeader(target.get(), StringUtils.abbreviate(conn.getDisplayName(), HEADER_FIRST_ABBREVIATION));\n+                setHeader(target.get(), conn.getDisplayName());\n             }\n         }\n     }"},{"sha":"19d8ac255847c0e0ebb658a75fc95d4422c749c8","filename":"client/idm/console/src/main/java/org/apache/syncope/client/console/wizards/any/MergeLinkedAccountsSearchPanel.java","status":"modified","additions":7,"deletions":6,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidm%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FMergeLinkedAccountsSearchPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -72,7 +72,8 @@ public MergeLinkedAccountsSearchPanel(final MergeLinkedAccountsWizardModel model\n \n         userSearchFragment = new Fragment(\"search\", \"userSearchFragment\", this);\n         userSearchPanel = UserSearchPanel.class.cast(new UserSearchPanel.Builder(\n-                new ListModel<>(new ArrayList<>())).required(false).enableSearch(MergeLinkedAccountsSearchPanel.this).\n+                new ListModel<>(new ArrayList<>()), pageRef).\n+                required(false).enableSearch(MergeLinkedAccountsSearchPanel.this).\n                 build(\"usersearch\"));\n         userSearchFragment.add(userSearchPanel);\n \n@@ -88,17 +89,17 @@ public MergeLinkedAccountsSearchPanel(final MergeLinkedAccountsWizardModel model\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {\n-            final AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n-            final String fiql = \"username!~\" + this.wizardModel.getBaseUser().getUsername() + ';'\n+            AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n+            String fiql = \"username!~\" + wizardModel.getBaseUser().getUsername() + ';'\n                     + SearchUtils.buildFIQL(userSearchPanel.getModel().getObject(),\n                             SyncopeClient.getUserSearchConditionBuilder());\n             userDirectoryPanel.search(fiql, target);\n         } else if (event.getPayload() instanceof AnySelectionDirectoryPanel.ItemSelection) {\n-            AnySelectionDirectoryPanel.ItemSelection payload =\n+            AnySelectionDirectoryPanel.ItemSelection<?> payload =\n                     (AnySelectionDirectoryPanel.ItemSelection) event.getPayload();\n \n-            final AnyTO sel = payload.getSelection();\n-            this.wizardModel.setMergingUser(new UserRestClient().read(sel.getKey()));\n+            AnyTO sel = payload.getSelection();\n+            wizardModel.setMergingUser(new UserRestClient().read(sel.getKey()));\n \n             String tableId = ((Component) event.getSource()).\n                     get(\"container:content:searchContainer:resultTable:tablePanel:groupForm:checkgroup:dataTable\")."},{"sha":"8e24a69c2b22619b293853afa80531e95d4358cd","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/CommonUIProperties.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FCommonUIProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FCommonUIProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2FCommonUIProperties.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -24,6 +24,8 @@\n \n public abstract class CommonUIProperties extends SyncopeProperties {\n \n+    private String adminUser = \"admin\";\n+\n     private boolean xForward = true;\n \n     private String xForwardProtocolHeader = \"X-Forwarded-Proto\";\n@@ -40,6 +42,14 @@ public abstract class CommonUIProperties extends SyncopeProperties {\n \n     private final Map<String, String> securityHeaders = new HashMap<>();\n \n+    public String getAdminUser() {\n+        return adminUser;\n+    }\n+\n+    public void setAdminUser(final String adminUser) {\n+        this.adminUser = adminUser;\n+    }\n+\n     public boolean isxForward() {\n         return xForward;\n     }"},{"sha":"037f64537f45c5b8357d784870a812389925902a","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AbstractFieldPanel.java","status":"modified","additions":5,"deletions":11,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.client.ui.commons.markup.html.form;\n \n+import java.util.Optional;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.wicket.Component;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -61,17 +62,12 @@ public final AbstractFieldPanel<T> addLabel(final String name) {\n     }\n \n     public AbstractFieldPanel<T> hideLabel() {\n-        final Component label = get(LABEL);\n-\n-        if (label != null) {\n-            label.setVisible(false);\n-        }\n-\n+        Optional.ofNullable(get(LABEL)).ifPresent(label -> label.setVisible(false));\n         return this;\n     }\n \n     public AbstractFieldPanel<T> showExternAction(final Component component) {\n-        final Fragment fragment = new Fragment(\"externalAction\", \"externalActionFragment\", AbstractFieldPanel.this);\n+        Fragment fragment = new Fragment(\"externalAction\", \"externalActionFragment\", AbstractFieldPanel.this);\n         addOrReplace(fragment);\n         fragment.add(component.setRenderBodyOnly(false));\n         return this;\n@@ -90,7 +86,7 @@ public AbstractFieldPanel<T> addRequiredLabel() {\n             setRequired(true);\n         }\n \n-        final Fragment fragment = new Fragment(\"required\", \"requiredFragment\", this);\n+        Fragment fragment = new Fragment(\"required\", \"requiredFragment\", this);\n         fragment.add(new Label(\"requiredLabel\", \"*\"));\n         replace(fragment);\n \n@@ -104,9 +100,7 @@ public AbstractFieldPanel<T> removeRequiredLabel() {\n             setRequired(false);\n         }\n \n-        final Fragment fragment = new Fragment(\"required\", \"emptyFragment\", this);\n-\n-        replace(fragment);\n+        replace(new Fragment(\"required\", \"emptyFragment\", this));\n \n         this.isRequiredLabelAdded = false;\n "},{"sha":"1e317eeea4de52adaa868af0162ca1203bc7d960","filename":"client/idrepo/common-ui/src/main/java/org/apache/syncope/client/ui/commons/markup/html/form/AbstractMultiPanel.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractMultiPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractMultiPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fcommon-ui%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fui%2Fcommons%2Fmarkup%2Fhtml%2Fform%2FAbstractMultiPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -65,8 +65,7 @@ public AbstractMultiPanel(\n \n         view = new InnerView(\"view\", name, model);\n \n-        List<INNER> obj = model.getObject();\n-        if (CollectionUtils.isEmpty(obj)) {\n+        if (CollectionUtils.isEmpty(model.getObject())) {\n             form.addOrReplace(getNoDataFragment(model, name));\n         } else {\n             form.addOrReplace(getDataFragment());"},{"sha":"30764ebf2fdfb86ed53fb44e0db37005c42e80eb","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/ConsoleProperties.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FConsoleProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FConsoleProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FConsoleProperties.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -61,6 +61,8 @@ public void setQueueCapacity(final int queueCapacity) {\n         }\n     }\n \n+    private String adminUser = \"admin\";\n+\n     private String reconciliationReportKey;\n \n     private final Map<String, Class<? extends BasePage>> page = new HashMap<>();\n@@ -69,6 +71,16 @@ public void setQueueCapacity(final int queueCapacity) {\n \n     private final Topology topology = new Topology();\n \n+    @Override\n+    public String getAdminUser() {\n+        return adminUser;\n+    }\n+\n+    @Override\n+    public void setAdminUser(final String adminUser) {\n+        this.adminUser = adminUser;\n+    }\n+\n     public String getReconciliationReportKey() {\n         return reconciliationReportKey;\n     }"},{"sha":"2bb4daead59ccc4db65a44f67da70cf6efee6892","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeWebApplication.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeWebApplication.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -261,6 +261,10 @@ public String getDefaultAnyPanelClass() {\n         return props.getDefaultAnyPanelClass();\n     }\n \n+    public String getAdminUser() {\n+        return props.getAdminUser();\n+    }\n+\n     public String getAnonymousUser() {\n         return props.getAnonymousUser();\n     }"},{"sha":"ff5b475e597e7543fc87333edb50ca4ca4335dfa","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/IdRepoConstants.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FIdRepoConstants.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -82,9 +82,9 @@ public final class IdRepoConstants {\n \n     public static final String PREF_PROPAGATION_TASKS_PAGINATOR_ROWS = \"proagationtasks.paginator.rows\";\n \n-    public static final String PREF_REPORT_TASKS_PAGINATOR_ROWS = \"report.paginator.rows\";\n+    public static final String PREF_REPORTLET_PAGINATOR_ROWS = \"reportlet.paginator.rows\";\n \n-    public static final String PREF_REPORTLET_TASKS_PAGINATOR_ROWS = \"reportlet.paginator.rows\";\n+    public static final String PREF_FIQL_QUERIES_PAGINATOR_ROWS = \"reportlet.paginator.rows\";\n \n     public static final String PREF_POLICY_RULE_PAGINATOR_ROWS = \"policy.rules.paginator.rows\";\n "},{"sha":"c915198ebc2e9b4554205ef3302bbd5976db18c0","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/notifications/NotificationWizardBuilder.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fnotifications%2FNotificationWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -183,7 +183,7 @@ protected List<String> getChangeAuthRoles() {\n         }\n     }\n \n-    public static class About extends Panel {\n+    public class About extends Panel {\n \n         private static final long serialVersionUID = -9149543787708482882L;\n \n@@ -252,15 +252,15 @@ private AbstractSearchPanel.Builder<?> getClauseBuilder(\n \n             switch (type) {\n                 case \"USER\":\n-                    clause = new UserSearchPanel.Builder(clauseModel);\n+                    clause = new UserSearchPanel.Builder(clauseModel, pageRef);\n                     break;\n \n                 case \"GROUP\":\n-                    clause = new GroupSearchPanel.Builder(clauseModel);\n+                    clause = new GroupSearchPanel.Builder(clauseModel, pageRef);\n                     break;\n \n                 default:\n-                    clause = new AnyObjectSearchPanel.Builder(type, clauseModel);\n+                    clause = new AnyObjectSearchPanel.Builder(type, clauseModel, pageRef);\n             }\n \n             return clause;\n@@ -321,7 +321,7 @@ protected void sendError(final String message) {\n         }\n     }\n \n-    public static class Recipients extends WizardStep {\n+    public class Recipients extends WizardStep {\n \n         private static final long serialVersionUID = -7709805590497687958L;\n \n@@ -363,7 +363,7 @@ public Recipients(final NotificationWrapper modelObject) {\n                     build(\"staticRecipients\", \"staticRecipients\", staticRecipientsFieldPanel).hideLabel());\n \n             add(new UserSearchPanel.Builder(\n-                    new PropertyModel<>(modelObject, \"recipientClauses\")).\n+                    new PropertyModel<>(modelObject, \"recipientClauses\"), pageRef).\n                     required(false).build(\"recipients\"));\n \n             AjaxDropDownChoicePanel<String> recipientsProvider = new AjaxDropDownChoicePanel<>("},{"sha":"adfbf00cd6cd84b0d0ca209507f930e6cc76e94d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":3,"deletions":3,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -314,7 +314,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n                 clause.setProperty(Constants.USERNAME_FIELD_NAME);\n \n                 panel = new UserSearchPanel.Builder(\n-                        new ListModel<>(clauses)).required(true).enableSearch().build(id);\n+                        new ListModel<>(clauses), pageRef).required(true).enableSearch().build(id);\n                 break;\n \n             case GROUP:\n@@ -323,7 +323,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n                 clause.setProperty(Constants.NAME_FIELD_NAME);\n \n                 panel = new GroupSearchPanel.Builder(\n-                        new ListModel<>(clauses)).required(true).enableSearch().build(id);\n+                        new ListModel<>(clauses), pageRef).required(true).enableSearch().build(id);\n                 break;\n \n             case ANY_OBJECT:\n@@ -332,7 +332,7 @@ protected AbstractSearchPanel getSearchPanel(final String id) {\n                 clause.setProperty(Constants.NAME_FIELD_NAME);\n \n                 panel = new AnyObjectSearchPanel.Builder(anyTypeTO.getKey(),\n-                        new ListModel<>(clauses)).required(true).enableSearch().build(id);\n+                        new ListModel<>(clauses), pageRef).required(true).enableSearch().build(id);\n                 break;\n \n             default:"},{"sha":"9742abb68b112635169e0d3fefc51272c0a705e8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/BeanPanel.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FBeanPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -56,6 +56,7 @@\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.core.util.lang.PropertyResolver;\n import org.apache.wicket.core.util.lang.PropertyResolverConverter;\n import org.apache.wicket.markup.html.basic.Label;\n@@ -84,14 +85,15 @@\n \n     private final Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> sCondWrapper;\n \n-    public BeanPanel(final String id, final IModel<T> bean, final String... excluded) {\n-        this(id, bean, null, excluded);\n+    public BeanPanel(final String id, final IModel<T> bean, final PageReference pageRef, final String... excluded) {\n+        this(id, bean, null, pageRef, excluded);\n     }\n \n     public BeanPanel(\n             final String id,\n             final IModel<T> bean,\n             final Map<String, Pair<AbstractFiqlSearchConditionBuilder<?, ?, ?>, List<SearchClause>>> sCondWrapper,\n+            final PageReference pageRef,\n             final String... excluded) {\n \n         super(id, bean);\n@@ -153,32 +155,30 @@ protected void populateItem(final ListItem<String> item) {\n                     switch (scondAnnot.type()) {\n                         case \"USER\":\n                             panel = new UserSearchPanel.Builder(\n-                                    new ListModel<>(clauses)).required(false).build(\"value\");\n+                                    new ListModel<>(clauses), pageRef).required(false).build(\"value\");\n                             builder = SyncopeClient.getUserSearchConditionBuilder();\n                             break;\n \n                         case \"GROUP\":\n                             panel = new GroupSearchPanel.Builder(\n-                                    new ListModel<>(clauses)).required(false).build(\"value\");\n+                                    new ListModel<>(clauses), pageRef).required(false).build(\"value\");\n                             builder = SyncopeClient.getGroupSearchConditionBuilder();\n                             break;\n \n                         default:\n                             panel = new AnyObjectSearchPanel.Builder(\n                                     scondAnnot.type(),\n-                                    new ListModel<>(clauses)).required(false).build(\"value\");\n-                            builder = SyncopeClient.getAnyObjectSearchConditionBuilder(null);\n+                                    new ListModel<>(clauses), pageRef).required(false).build(\"value\");\n+                            builder = SyncopeClient.getAnyObjectSearchConditionBuilder(scondAnnot.type());\n                     }\n \n                     if (BeanPanel.this.sCondWrapper != null) {\n                         BeanPanel.this.sCondWrapper.put(fieldName, Pair.of(builder, clauses));\n                     }\n                 } else if (List.class.equals(field.getType())) {\n-                    Class<?> listItemType = String.class;\n-                    if (field.getGenericType() instanceof ParameterizedType) {\n-                        listItemType = (Class<?>) ((ParameterizedType) field.getGenericType()).\n-                                getActualTypeArguments()[0];\n-                    }\n+                    Class<?> listItemType = field.getGenericType() instanceof ParameterizedType\n+                            ? (Class<?>) ((ParameterizedType) field.getGenericType()).getActualTypeArguments()[0]\n+                            : String.class;\n \n                     if (listItemType.equals(String.class) && schemaAnnot != null) {\n                         List<SchemaTO> choices = new ArrayList<>();"},{"sha":"fab7e51f381c928b1ffb2677a56d23e91b2d9f52","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DelegationDirectoryPanel.java","status":"modified","additions":11,"deletions":7,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationDirectoryPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -97,11 +97,13 @@ protected List<IColumn<DelegationTO, String>> getColumns() {\n \n         columns.add(new AbstractColumn<>(new ResourceModel(\"delegating\"), \"delegating\") {\n \n+            private static final long serialVersionUID = -7835464045129401360L;\n+\n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<DelegationTO>> cellItem,\n-                final String componentId,\n-                final IModel<DelegationTO> rowModel) {\n+                    final Item<ICellPopulator<DelegationTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<DelegationTO> rowModel) {\n \n                 String delegating = rowModel.getObject().getDelegating();\n                 if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.USER_READ)) {\n@@ -116,11 +118,13 @@ public void populateItem(\n \n         columns.add(new AbstractColumn<>(new ResourceModel(\"delegated\"), \"delegated\") {\n \n+            private static final long serialVersionUID = -7835464045129401360L;\n+\n             @Override\n             public void populateItem(\n-                final Item<ICellPopulator<DelegationTO>> cellItem,\n-                final String componentId,\n-                final IModel<DelegationTO> rowModel) {\n+                    final Item<ICellPopulator<DelegationTO>> cellItem,\n+                    final String componentId,\n+                    final IModel<DelegationTO> rowModel) {\n \n                 String delegated = rowModel.getObject().getDelegated();\n                 if (SyncopeConsoleSession.get().owns(IdRepoEntitlement.USER_READ)) {\n@@ -153,7 +157,7 @@ public ActionsPanel<DelegationTO> getActions(final IModel<DelegationTO> model) {\n             @Override\n             public void onClick(final AjaxRequestTarget target, final DelegationTO ignore) {\n                 send(DelegationDirectoryPanel.this, Broadcast.EXACT,\n-                    new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n+                        new AjaxWizard.EditItemActionEvent<>(model.getObject(), target));\n             }\n         }, ActionLink.ActionType.EDIT, StringUtils.EMPTY);\n         panel.add(new ActionLink<>() {"},{"sha":"177430975abd67c7d450a868410da37416d1e48a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DelegationSelectionPanel.java","status":"modified","additions":15,"deletions":13,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationSelectionPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationSelectionPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDelegationSelectionPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -34,22 +34,24 @@ public DelegationSelectionPanel(final String id, final String delegating) {\n         super(id);\n \n         IndicatingOnConfirmAjaxLink<String> link =\n-            new IndicatingOnConfirmAjaxLink<>(\"link\", \"confirmDelegation\", true) {\n+                new IndicatingOnConfirmAjaxLink<>(\"link\", \"confirmDelegation\", true) {\n \n-                @Override\n-                public void onClick(final AjaxRequestTarget target) {\n-                    SyncopeConsoleSession.get().setDelegatedBy(delegating);\n-                    setResponsePage(Dashboard.class);\n-                }\n+            private static final long serialVersionUID = 6611857585742411796L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target) {\n+                SyncopeConsoleSession.get().setDelegatedBy(delegating);\n+                setResponsePage(Dashboard.class);\n+            }\n \n-                @Override\n-                protected void onComponentTag(final ComponentTag tag) {\n-                    super.onComponentTag(tag);\n-                    if (delegating.equals(SyncopeConsoleSession.get().getDelegatedBy())) {\n-                        tag.append(\"class\", \"disabled\", \" \");\n-                    }\n+            @Override\n+            protected void onComponentTag(final ComponentTag tag) {\n+                super.onComponentTag(tag);\n+                if (delegating.equals(SyncopeConsoleSession.get().getDelegatedBy())) {\n+                    tag.append(\"class\", \"disabled\", \" \");\n                 }\n-            };\n+            }\n+        };\n         add(link);\n         link.setOutputMarkupId(true);\n         link.add(new Label(\"label\", delegating));"},{"sha":"dabfeda6c5ff073f02a2e628982cb3824d239e5f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDirectoryPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -66,7 +66,7 @@\n     /**\n      * Number of rows per page.\n      */\n-    protected int rows;\n+    protected Integer rows;\n \n     /**\n      * Container used to refresh table.\n@@ -274,8 +274,8 @@ protected void updateResultTable(final boolean create) {\n     protected void updateResultTable(final boolean create, final int rows) {\n         dataProvider = dataProvider();\n \n-        final int currentPage = Optional.ofNullable(resultTable)\n-                .map(table -> (create ? (int) table.getPageCount() - 1 : (int) table.getCurrentPage())).orElse(0);\n+        int currentPage = Optional.ofNullable(resultTable).\n+                map(table -> (create ? (int) table.getPageCount() - 1 : (int) table.getCurrentPage())).orElse(0);\n \n         // take care of restClient handle: maybe not useful to keep into\n         AjaxDataTablePanel.Builder<T, String> resultTableBuilder = new AjaxDataTablePanel.Builder<>(\n@@ -326,7 +326,7 @@ public DirectoryPanel<T, W, DP, E> disableCheckBoxes() {\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof EventDataWrapper) {\n-            final EventDataWrapper data = (EventDataWrapper) event.getPayload();\n+            EventDataWrapper data = (EventDataWrapper) event.getPayload();\n \n             if (data.getRows() < 1) {\n                 updateResultTable(data.isCreate());\n@@ -343,7 +343,7 @@ public void onEvent(final IEvent<?> event) {\n \n     @Override\n     protected void customActionOnFinishCallback(final AjaxRequestTarget target) {\n-        final EventDataWrapper data = new EventDataWrapper();\n+        EventDataWrapper data = new EventDataWrapper();\n         data.setTarget(target);\n         data.setRows(rows);\n         send(getParent(), Broadcast.BREADTH, data);"},{"sha":"f60b411c4d69f5c57221d04229470eac09a90de8","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/DynRealmModalPanel.java","status":"modified","additions":18,"deletions":18,"changes":36,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FDynRealmModalPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -89,33 +89,33 @@ protected List<AnyTypeTO> load() {\n             protected void populateItem(final ListItem<AnyTypeTO> item) {\n                 final String key = item.getModelObject().getKey();\n                 item.add(new Accordion(\"dynMembershipCond\", List.of(\n-                    new AbstractTab(Model.of(key + \" Dynamic Condition\")) {\n+                        new AbstractTab(Model.of(key + \" Dynamic Condition\")) {\n \n-                        private static final long serialVersionUID = 1037272333056449378L;\n+                    private static final long serialVersionUID = 1037272333056449378L;\n \n-                        @Override\n-                        public Panel getPanel(final String panelId) {\n-                            switch (item.getModelObject().getKind()) {\n-                                case USER:\n-                                    return new UserSearchPanel.Builder(\n-                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key)).\n+                    @Override\n+                    public Panel getPanel(final String panelId) {\n+                        switch (item.getModelObject().getKind()) {\n+                            case USER:\n+                                return new UserSearchPanel.Builder(\n+                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key), pageRef).\n                                         required(false).build(panelId);\n \n-                                case GROUP:\n-                                    return new GroupSearchPanel.Builder(\n-                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key)).\n+                            case GROUP:\n+                                return new GroupSearchPanel.Builder(\n+                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key), pageRef).\n                                         required(false).build(panelId);\n \n-                                case ANY_OBJECT:\n-                                default:\n-                                    return new AnyObjectSearchPanel.Builder(\n+                            case ANY_OBJECT:\n+                            default:\n+                                return new AnyObjectSearchPanel.Builder(\n                                         key,\n-                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key)).\n+                                        new MapOfListModel<>(dynRealmWrapper, \"dynClauses\", key), pageRef).\n                                         required(false).build(panelId);\n-                            }\n                         }\n-                    }), Model.of(StringUtils.isBlank(dynRealmWrapper.getDynMembershipConds().get(key)) ? -1 : 0)).\n-                    setOutputMarkupId(true));\n+                    }\n+                }), Model.of(StringUtils.isBlank(dynRealmWrapper.getDynMembershipConds().get(key)) ? -1 : 0)).\n+                        setOutputMarkupId(true));\n             }\n         });\n     }"},{"sha":"6e03afccd61410b1d3ec7b4bc609c99092d5529b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":10,"deletions":3,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -28,9 +28,11 @@\n import java.util.Collection;\n import java.util.Comparator;\n import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Set;\n import java.util.stream.Collectors;\n import java.util.stream.Stream;\n import org.apache.commons.lang3.StringUtils;\n@@ -160,7 +162,12 @@ protected List<DynRealmTO> load() {\n                         placeholder.setFullPath(rootRealm);\n                         return placeholder;\n                     });\n-        }).orElseGet(RealmTO::new);\n+        }).orElseGet(() -> {\n+            RealmTO root = new RealmTO();\n+            root.setName(SyncopeConstants.ROOT_REALM);\n+            root.setFullPath(SyncopeConstants.ROOT_REALM);\n+            return root;\n+        });\n \n         model = Model.of(realm);\n         searchQuery = realm.getName();\n@@ -202,7 +209,7 @@ protected void setBreadcrumb(final RealmTO realm) {\n         if (SyncopeConstants.ROOT_REALM.equals(realm.getFullPath())) {\n             breadcrumb.setList(List.of(realm.getFullPath()));\n         } else {\n-            List<String> bcitems = new ArrayList<>();\n+            Set<String> bcitems = new HashSet<>();\n             bcitems.add(SyncopeConstants.ROOT_REALM);\n \n             String[] split = realm.getFullPath().split(\"/\");\n@@ -214,7 +221,7 @@ protected void setBreadcrumb(final RealmTO realm) {\n                 bcitems.add(bcitem.toString());\n             }\n \n-            breadcrumb.setList(bcitems);\n+            breadcrumb.setList(bcitems.stream().sorted().collect(Collectors.toList()));\n         }\n     }\n "},{"sha":"5f8d8aff7b83317cbc832510805ffb03e86d1bb1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/TogglePanel.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FTogglePanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -96,7 +96,7 @@ public TogglePanel(final String id, final PageReference pageRef) {\n     public TogglePanel(final String id, final String markupId, final PageReference pageRef) {\n         super(id, true);\n         this.activeId = markupId;\n-        final String containerID = StringUtils.isBlank(markupId) ? id : markupId;\n+        String containerID = StringUtils.isBlank(markupId) ? id : markupId;\n \n         setRenderBodyOnly(true);\n         setOutputMarkupId(true);\n@@ -149,8 +149,8 @@ public TogglePanel<T> addInnerObject(final Component... childs) {\n     }\n \n     protected void setHeader(final AjaxRequestTarget target, final String header) {\n-        this.header.setDefaultModelObject(Optional.ofNullable(header).map(s -> s.length() >= 40\n-                ? (s.substring(0, 30) + \" ... \") : s).orElse(StringUtils.EMPTY));\n+        this.header.setDefaultModelObject(Optional.ofNullable(header).\n+                map(s -> StringUtils.abbreviate(s, HEADER_FIRST_ABBREVIATION)).orElse(StringUtils.EMPTY));\n         target.add(this.header);\n     }\n \n@@ -191,7 +191,7 @@ protected String getTargetKey(final Serializable modelObject) {\n         return key;\n     }\n \n-    private void updateLabelKeyValue(final Serializable modelObject) {\n+    protected void updateLabelKeyValue(final Serializable modelObject) {\n         header.add(new AttributeModifier(LABEL_DATA_VALUE, getTargetKey(modelObject)));\n     }\n "},{"sha":"403dc8015f8998e44dffba8931bc2c2671354182","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.java","status":"modified","additions":60,"deletions":13,"changes":73,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -23,18 +23,24 @@\n import java.util.List;\n import java.util.Map;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n import org.apache.syncope.client.console.rest.AnyTypeClassRestClient;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n import org.apache.syncope.client.console.wicket.markup.html.form.MultiFieldPanel;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.search.SearchableFields;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.event.IEventSink;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.panel.Panel;\n@@ -74,10 +80,6 @@ public abstract class AbstractSearchPanel extends Panel {\n \n     protected final String type;\n \n-    protected final boolean required;\n-\n-    protected final boolean enableSearch;\n-\n     protected final GroupRestClient groupRestClient = new GroupRestClient();\n \n     public abstract static class Builder<T extends AbstractSearchPanel> implements Serializable {\n@@ -86,6 +88,8 @@ public abstract class AbstractSearchPanel extends Panel {\n \n         protected final IModel<List<SearchClause>> model;\n \n+        protected PageReference pageRef;\n+\n         protected boolean required = true;\n \n         protected boolean enableSearch = false;\n@@ -98,8 +102,9 @@ public abstract class AbstractSearchPanel extends Panel {\n \n         protected IEventSink resultContainer;\n \n-        public Builder(final IModel<List<SearchClause>> model) {\n+        public Builder(final IModel<List<SearchClause>> model, final PageReference pageRef) {\n             this.model = model;\n+            this.pageRef = pageRef;\n         }\n \n         public Builder<T> enableSearch(final IEventSink resultContainer) {\n@@ -133,13 +138,12 @@ protected AbstractSearchPanel(\n             final String id, final AnyTypeKind kind, final String type, final Builder<?> builder) {\n \n         super(id);\n+\n         populate();\n \n         this.model = builder.model;\n         this.typeKind = kind;\n         this.type = type;\n-        this.required = builder.required;\n-        this.enableSearch = builder.enableSearch;\n \n         setOutputMarkupId(true);\n \n@@ -161,26 +165,69 @@ protected Integer load() {\n                 : Pair.of(groupNames, Model.of(0));\n         SearchClausePanel searchClausePanel = new SearchClausePanel(\"panel\", \"panel\",\n                 Model.of(new SearchClause()),\n-                required,\n+                builder.required,\n                 types,\n                 builder.customizer,\n                 anames, dnames, groupInfo, roleNames, privilegeNames, auxClassNames, resourceNames);\n-\n-        if (enableSearch) {\n+        if (builder.enableSearch) {\n             searchClausePanel.enableSearch(builder.resultContainer);\n         }\n \n-        MultiFieldPanel.Builder<SearchClause> searchView = new MultiFieldPanel.Builder<>(model) {\n+        searchFormContainer.add(new MultiFieldPanel.Builder<>(model) {\n \n             private static final long serialVersionUID = 1343431509987473047L;\n \n             @Override\n             protected SearchClause newModelObject() {\n                 return new SearchClause();\n             }\n-        };\n+        }.build(\"search\", \"search\", searchClausePanel).hideLabel().setOutputMarkupId(true));\n+\n+        FIQLQueries fiqlQueries = new FIQLQueries(\"fiqlQueries\", this, getFIQLQueryTarget(), builder.pageRef);\n+        add(fiqlQueries);\n+\n+        SaveFIQLQuery saveFIQLQuery = new SaveFIQLQuery(\"saveFIQLQuery\", getFIQLQueryTarget(), builder.pageRef);\n+        add(saveFIQLQuery);\n+\n+        ActionsPanel<Serializable> fiqlQueryActionsPanel = new ActionsPanel<>(\"fiqlQueryActionsPanel\", null);\n+        fiqlQueryActionsPanel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = 2041211756396714619L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n+                saveFIQLQuery.setFiql(\n+                        SearchUtils.buildFIQL(AbstractSearchPanel.this.getModel().getObject(),\n+                                getSearchConditionBuilder()).\n+                                replaceAll(SearchUtils.getTypeConditionPattern(type).pattern(), \"\"));\n+                saveFIQLQuery.toggle(target, true);\n+            }\n+        }, ActionLink.ActionType.EXPORT, StringUtils.EMPTY).hideLabel();\n+        fiqlQueryActionsPanel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -7978723352517770644L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final Serializable ignore) {\n+                fiqlQueries.toggle(target, true);\n+            }\n+        }, ActionLink.ActionType.SELECT, StringUtils.EMPTY).hideLabel();\n+        fiqlQueryActionsPanel.setVisible(\n+                builder.enableSearch\n+                && !model.getObject().isEmpty()\n+                && !SyncopeConsoleSession.get().getSelfTO().getUsername().\n+                        equals(SyncopeWebApplication.get().getAdminUser()));\n+        add(fiqlQueryActionsPanel.setOutputMarkupPlaceholderTag(true));\n+    }\n+\n+    protected abstract AbstractFiqlSearchConditionBuilder<?, ?, ?> getSearchConditionBuilder();\n+\n+    protected abstract String getFIQLQueryTarget();\n \n-        searchFormContainer.add(searchView.build(\"search\", \"search\", searchClausePanel).hideLabel());\n+    protected void updateFIQL(final AjaxRequestTarget target, final String fiql) {\n+        model.setObject(SearchUtils.getSearchClauses(\n+                fiql.replaceAll(SearchUtils.getTypeConditionPattern(type).pattern(), \"\")));\n+        target.add(searchFormContainer);\n     }\n \n     protected void populate() {"},{"sha":"1847fddec54308ac3a025f96168226a3137892d6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/AnyObjectSearchPanel.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAnyObjectSearchPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -25,13 +25,16 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.markup.html.repeater.util.SortParam;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n@@ -46,8 +49,8 @@ public static class Builder extends AbstractSearchPanel.Builder<AnyObjectSearchP\n \n         private final String type;\n \n-        public Builder(final String type, final IModel<List<SearchClause>> model) {\n-            super(model);\n+        public Builder(final String type, final IModel<List<SearchClause>> model, final PageReference pageRef) {\n+            super(model, pageRef);\n             this.type = type;\n         }\n \n@@ -65,6 +68,16 @@ protected AnyObjectSearchPanel(final String id, final AnyTypeKind kind, final St\n         super(id, kind, type, builder);\n     }\n \n+    @Override\n+    protected AbstractFiqlSearchConditionBuilder<?, ?, ?> getSearchConditionBuilder() {\n+        return SyncopeClient.getAnyObjectSearchConditionBuilder(type);\n+    }\n+\n+    @Override\n+    protected String getFIQLQueryTarget() {\n+        return type;\n+    }\n+\n     @Override\n     protected void populate() {\n         super.populate();"},{"sha":"9c835970b419df788eae0da7da4a564f2e4e1e79","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/FIQLQueries.java","status":"added","additions":53,"deletions":0,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,53 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.client.console.panels.TogglePanel;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+\n+public class FIQLQueries extends TogglePanel<Serializable> {\n+\n+    private static final long serialVersionUID = -6210866598876608258L;\n+\n+    public FIQLQueries(\n+            final String id,\n+            final AbstractSearchPanel searchPanel,\n+            final String target,\n+            final PageReference pageRef) {\n+\n+        super(id, pageRef);\n+\n+        addInnerObject(new FIQLQueryDirectoryPanel(\"fiqlQueryDirectoryPanel\", searchPanel, target, this, pageRef));\n+    }\n+\n+    @Override\n+    protected String getTargetKey(final Serializable modelObject) {\n+        return getString(\"fiqlQueries\");\n+    }\n+\n+    @Override\n+    public void toggle(final AjaxRequestTarget target, final boolean toggle) {\n+        if (toggle) {\n+            setHeader(target, getString(\"fiqlQueries\"));\n+        }\n+        super.toggle(target, toggle);\n+    }\n+}"},{"sha":"e0c5561012ba6c0b9363f085b1aea1763fe52cd1","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/FIQLQueryDirectoryPanel.java","status":"added","additions":176,"deletions":0,"changes":176,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueryDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueryDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueryDirectoryPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,176 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.util.ArrayList;\n+import java.util.Collection;\n+import java.util.Iterator;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.commons.IdRepoConstants;\n+import org.apache.syncope.client.console.commons.SortableDataProviderComparator;\n+import org.apache.syncope.client.console.panels.DirectoryPanel;\n+import org.apache.syncope.client.console.rest.FIQLQueryRestClient;\n+import org.apache.syncope.client.console.wicket.extensions.markup.html.repeater.data.table.KeyPropertyColumn;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionLink;\n+import org.apache.syncope.client.console.wicket.markup.html.form.ActionsPanel;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.DirectoryDataProvider;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.markup.html.repeater.data.sort.SortOrder;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.IColumn;\n+import org.apache.wicket.extensions.markup.html.repeater.data.table.PropertyColumn;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.StringResourceModel;\n+\n+public class FIQLQueryDirectoryPanel extends DirectoryPanel<\n+        FIQLQueryTO, FIQLQueryTO, DirectoryDataProvider<FIQLQueryTO>, FIQLQueryRestClient> {\n+\n+    private static final long serialVersionUID = -913956855318099854L;\n+\n+    private final AbstractSearchPanel searchPanel;\n+\n+    private final String target;\n+\n+    private final FIQLQueries parent;\n+\n+    public FIQLQueryDirectoryPanel(\n+            final String id,\n+            final AbstractSearchPanel searchPanel,\n+            final String target,\n+            final FIQLQueries parent,\n+            final PageReference pageRef) {\n+\n+        super(id, pageRef, false);\n+        this.target = target;\n+        this.searchPanel = searchPanel;\n+        this.parent = parent;\n+\n+        disableCheckBoxes();\n+\n+        initResultTable();\n+    }\n+\n+    @Override\n+    protected List<IColumn<FIQLQueryTO, String>> getColumns() {\n+        List<IColumn<FIQLQueryTO, String>> columns = new ArrayList<>();\n+\n+        columns.add(new KeyPropertyColumn<>(\n+                new StringResourceModel(Constants.KEY_FIELD_NAME, this), Constants.KEY_FIELD_NAME));\n+\n+        columns.add(new PropertyColumn<>(new StringResourceModel(\n+                Constants.NAME_FIELD_NAME, this), Constants.NAME_FIELD_NAME, Constants.NAME_FIELD_NAME));\n+\n+        columns.add(new PropertyColumn<>(Model.of(\"FIQL\"), \"fiql\"));\n+\n+        return columns;\n+    }\n+\n+    @Override\n+    protected ActionsPanel<FIQLQueryTO> getActions(final IModel<FIQLQueryTO> model) {\n+        ActionsPanel<FIQLQueryTO> panel = super.getActions(model);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final FIQLQueryTO ignore) {\n+                searchPanel.updateFIQL(target, model.getObject().getFiql());\n+                parent.close(target);\n+            }\n+        }, ActionLink.ActionType.SELECT, StringUtils.EMPTY);\n+\n+        panel.add(new ActionLink<>() {\n+\n+            private static final long serialVersionUID = -3722207913631435501L;\n+\n+            @Override\n+            public void onClick(final AjaxRequestTarget target, final FIQLQueryTO ignore) {\n+                try {\n+                    FIQLQueryRestClient.delete(model.getObject().getKey());\n+\n+                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                    customActionOnFinishCallback(target);\n+                } catch (SyncopeClientException e) {\n+                    LOG.error(\"While deleting {}\", model.getObject().getName(), e);\n+                    SyncopeConsoleSession.get().onException(e);\n+                }\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        }, ActionLink.ActionType.DELETE, StringUtils.EMPTY);\n+\n+        return panel;\n+    }\n+\n+    @Override\n+    protected Collection<ActionLink.ActionType> getBatches() {\n+        return Set.of();\n+    }\n+\n+    @Override\n+    protected DirectoryDataProvider<FIQLQueryTO> dataProvider() {\n+        return new FIQLQueryDataProvider(rows);\n+    }\n+\n+    @Override\n+    protected String paginatorRowsKey() {\n+        return IdRepoConstants.PREF_FIQL_QUERIES_PAGINATOR_ROWS;\n+    }\n+\n+    protected class FIQLQueryDataProvider extends DirectoryDataProvider<FIQLQueryTO> {\n+\n+        private static final long serialVersionUID = 4725679400450513556L;\n+\n+        private final SortableDataProviderComparator<FIQLQueryTO> comparator;\n+\n+        public FIQLQueryDataProvider(final int paginatorRows) {\n+            super(paginatorRows);\n+\n+            //Default sorting\n+            setSort(Constants.NAME_FIELD_NAME, SortOrder.ASCENDING);\n+            comparator = new SortableDataProviderComparator<>(this);\n+        }\n+\n+        @Override\n+        public Iterator<FIQLQueryTO> iterator(final long first, final long count) {\n+            List<FIQLQueryTO> list = FIQLQueryRestClient.list(target);\n+            list.sort(comparator);\n+            return list.subList((int) first, (int) (first + count)).iterator();\n+        }\n+\n+        @Override\n+        public long size() {\n+            return FIQLQueryRestClient.list(target).size();\n+        }\n+\n+        @Override\n+        public IModel<FIQLQueryTO> model(final FIQLQueryTO object) {\n+            return new CompoundPropertyModel<>(object);\n+        }\n+    }\n+}"},{"sha":"68752d515c1b278c2e3934aee8b9098d7a142cbf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/GroupSearchPanel.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FGroupSearchPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -25,10 +25,13 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.console.rest.SchemaRestClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n import org.apache.syncope.common.lib.to.SchemaTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.SchemaType;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n@@ -40,8 +43,8 @@ public static class Builder extends AbstractSearchPanel.Builder<GroupSearchPanel\n \n         private static final long serialVersionUID = 6308997285778809578L;\n \n-        public Builder(final IModel<List<SearchClause>> model) {\n-            super(model);\n+        public Builder(final IModel<List<SearchClause>> model, final PageReference pageRef) {\n+            super(model, pageRef);\n         }\n \n         @Override\n@@ -54,6 +57,16 @@ protected GroupSearchPanel(final String id, final GroupSearchPanel.Builder build\n         super(id, AnyTypeKind.GROUP, builder);\n     }\n \n+    @Override\n+    protected AbstractFiqlSearchConditionBuilder<?, ?, ?> getSearchConditionBuilder() {\n+        return SyncopeClient.getGroupSearchConditionBuilder();\n+    }\n+\n+    @Override\n+    protected String getFIQLQueryTarget() {\n+        return AnyTypeKind.GROUP.name();\n+    }\n+\n     @Override\n     protected void populate() {\n         super.populate();"},{"sha":"8080a216f402de8223121085f5a704e3076db9cf","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SaveFIQLQuery.java","status":"added","additions":97,"deletions":0,"changes":97,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,97 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.panels.search;\n+\n+import java.io.Serializable;\n+import org.apache.syncope.client.console.SyncopeConsoleSession;\n+import org.apache.syncope.client.console.panels.TogglePanel;\n+import org.apache.syncope.client.console.rest.FIQLQueryRestClient;\n+import org.apache.syncope.client.ui.commons.Constants;\n+import org.apache.syncope.client.ui.commons.pages.BaseWebPage;\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.wicket.PageReference;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.form.AjaxSubmitLink;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.TextField;\n+import org.apache.wicket.model.Model;\n+\n+public class SaveFIQLQuery extends TogglePanel<Serializable> {\n+\n+    private static final long serialVersionUID = -1519998802447270269L;\n+\n+    private String fiql;\n+\n+    private TextField<String> name;\n+\n+    public SaveFIQLQuery(final String id, final String target, final PageReference pageRef) {\n+        super(id, pageRef);\n+\n+        Form<?> form = new Form<>(\"form\");\n+        addInnerObject(form);\n+\n+        name = new TextField<>(\"name\", new Model<>());\n+        form.add(name);\n+\n+        form.add(new AjaxSubmitLink(\"submit\", form) {\n+\n+            private static final long serialVersionUID = -5697330186048290602L;\n+\n+            @Override\n+            protected void onSubmit(final AjaxRequestTarget art) {\n+                try {\n+                    FIQLQueryTO query = new FIQLQueryTO();\n+                    query.setName(name.getModelObject());\n+                    query.setTarget(target);\n+                    query.setFiql(fiql);\n+\n+                    FIQLQueryRestClient.create(query);\n+\n+                    name.getModel().setObject(null);\n+                    name.setRequired(false);\n+\n+                    SyncopeConsoleSession.get().success(getString(Constants.OPERATION_SUCCEEDED));\n+                    toggle(art, false);\n+                } catch (Exception e) {\n+                    LOG.error(\"While creating new FIQL query\", e);\n+                    SyncopeConsoleSession.get().onException(e);\n+                }\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(art);\n+            }\n+\n+            @Override\n+            protected void onError(final AjaxRequestTarget target) {\n+                ((BaseWebPage) pageRef.getPage()).getNotificationPanel().refresh(target);\n+            }\n+        });\n+    }\n+\n+    public void setFiql(final String fiql) {\n+        this.fiql = fiql;\n+        this.name.setRequired(true);\n+    }\n+\n+    @Override\n+    public void toggle(final AjaxRequestTarget target, final boolean toggle) {\n+        if (toggle) {\n+            setHeader(target, getString(\"newFIQLQuery\"));\n+        }\n+        super.toggle(target, toggle);\n+    }\n+}"},{"sha":"aa85f762d315a8adc3c94213211ce19a5d883f91","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchClausePanel.java","status":"modified","additions":6,"deletions":10,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -57,7 +57,6 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.wicket.AttributeModifier;\n import org.apache.wicket.Component;\n-import org.apache.wicket.MarkupContainer;\n import org.apache.wicket.ajax.AjaxEventBehavior;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.attributes.AjaxCallListener;\n@@ -291,12 +290,14 @@ protected List<String> load() {\n                         return groupInfo.getLeft().getObject();\n \n                     case ROLE_MEMBERSHIP:\n-                        return roleNames.getObject().stream().\n-                                sorted().collect(Collectors.toList());\n+                        return Optional.ofNullable(roleNames).\n+                                map(r -> r.getObject().stream().sorted().collect(Collectors.toList())).\n+                                orElse(List.of());\n \n                     case PRIVILEGE:\n-                        return privilegeNames.getObject().stream().\n-                                sorted().collect(Collectors.toList());\n+                        return Optional.ofNullable(privilegeNames).\n+                                map(p -> p.getObject().stream().sorted().collect(Collectors.toList())).\n+                                orElse(List.of());\n \n                     case AUX_CLASS:\n                         return auxClassNames.getObject().stream().\n@@ -371,11 +372,6 @@ public FieldPanel<SearchClause> setNewModel(final IModel<SearchClause> model) {\n         return super.setNewModel(model);\n     }\n \n-    @Override\n-    public final MarkupContainer add(final Component... childs) {\n-        return super.add(childs);\n-    }\n-\n     @Override\n     @SuppressWarnings({ \"rawtypes\", \"unchecked\" })\n     public FieldPanel<SearchClause> settingsDependingComponents() {"},{"sha":"e5be686b1c4c60b9c19774752bf8f18d2898527d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/SearchUtils.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchUtils.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -65,7 +65,7 @@ public final class SearchUtils implements Serializable {\n         }\n     };\n \n-    private static Pattern getTypeConditionPattern(final String type) {\n+    public static Pattern getTypeConditionPattern(final String type) {\n         return Pattern.compile(String.format(\";\\\\$type==%s|\\\\$type==%s;\", type, type));\n     }\n "},{"sha":"3e4e95e623c785b86793b6b88f2d1336b2ac945f","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/search/UserSearchPanel.java","status":"modified","additions":15,"deletions":2,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -23,8 +23,11 @@\n import java.util.stream.Collectors;\n import org.apache.syncope.client.console.rest.ApplicationRestClient;\n import org.apache.syncope.client.console.rest.RoleRestClient;\n+import org.apache.syncope.client.lib.SyncopeClient;\n+import org.apache.syncope.common.lib.search.AbstractFiqlSearchConditionBuilder;\n import org.apache.syncope.common.lib.to.EntityTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.LoadableDetachableModel;\n \n@@ -36,8 +39,8 @@ public static class Builder extends AnyObjectSearchPanel.Builder {\n \n         private static final long serialVersionUID = 6308997285778809578L;\n \n-        public Builder(final IModel<List<SearchClause>> model) {\n-            super(AnyTypeKind.USER.name(), model);\n+        public Builder(final IModel<List<SearchClause>> model, final PageReference pageRef) {\n+            super(AnyTypeKind.USER.name(), model, pageRef);\n         }\n \n         @Override\n@@ -50,6 +53,16 @@ protected UserSearchPanel(final String id, final Builder builder) {\n         super(id, AnyTypeKind.USER, builder);\n     }\n \n+    @Override\n+    protected AbstractFiqlSearchConditionBuilder<?, ?, ?> getSearchConditionBuilder() {\n+        return SyncopeClient.getUserSearchConditionBuilder();\n+    }\n+\n+    @Override\n+    protected String getFIQLQueryTarget() {\n+        return AnyTypeKind.USER.name();\n+    }\n+\n     @Override\n     protected void populate() {\n         super.populate();"},{"sha":"b2a38d56aa4df267749d4620c30885fe5af09a9d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/policies/PolicyRuleWizardBuilder.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpolicies%2FPolicyRuleWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -171,7 +171,7 @@ public void applyState() {\n         }\n     }\n \n-    public static class Configuration extends WizardStep {\n+    public class Configuration extends WizardStep {\n \n         private static final long serialVersionUID = -785981096328637758L;\n \n@@ -185,7 +185,7 @@ protected Serializable load() {\n                     return rule.getConf();\n                 }\n             };\n-            add(new BeanPanel<>(\"bean\", bean).setRenderBodyOnly(true));\n+            add(new BeanPanel<>(\"bean\", bean, pageRef).setRenderBodyOnly(true));\n         }\n     }\n }"},{"sha":"1c3375ddd2e300a5f449121d4b965fa15503d785","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportDirectoryPanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportDirectoryPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -275,7 +275,7 @@ protected ReportDataProvider dataProvider() {\n \n     @Override\n     protected String paginatorRowsKey() {\n-        return IdRepoConstants.PREF_REPORT_TASKS_PAGINATOR_ROWS;\n+        return IdRepoConstants.PREF_REPORT_PAGINATOR_ROWS;\n     }\n \n     protected abstract void viewReport(ReportTO reportTO, AjaxRequestTarget target);"},{"sha":"9bd23ea6f48b92d64828b39edfcdf59536f553ac","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletDirectoryPanel.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletDirectoryPanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -97,7 +97,7 @@ public ReportletDirectoryPanel(\n \n     @Override\n     protected List<IColumn<ReportletWrapper, String>> getColumns() {\n-        final List<IColumn<ReportletWrapper, String>> columns = new ArrayList<>();\n+        List<IColumn<ReportletWrapper, String>> columns = new ArrayList<>();\n \n         columns.add(new PropertyColumn<>(\n                 new StringResourceModel(\"reportlet\", this), \"implementationKey\", \"implementationKey\"));\n@@ -126,7 +126,7 @@ public void populateItem(\n \n     @Override\n     public ActionsPanel<ReportletWrapper> getActions(final IModel<ReportletWrapper> model) {\n-        final ActionsPanel<ReportletWrapper> panel = super.getActions(model);\n+        ActionsPanel<ReportletWrapper> panel = super.getActions(model);\n \n         panel.add(new ActionLink<>() {\n \n@@ -151,7 +151,7 @@ public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignor\n             public void onClick(final AjaxRequestTarget target, final ReportletWrapper ignore) {\n                 final ReportletConf reportlet = model.getObject().getConf();\n                 try {\n-                    final ReportTO actual = ReportRestClient.read(report);\n+                    ReportTO actual = ReportRestClient.read(report);\n                     actual.getReportlets().remove(model.getObject().getImplementationKey());\n                     ReportRestClient.update(actual);\n \n@@ -198,7 +198,7 @@ protected ReportDataProvider dataProvider() {\n \n     @Override\n     protected String paginatorRowsKey() {\n-        return IdRepoConstants.PREF_REPORTLET_TASKS_PAGINATOR_ROWS;\n+        return IdRepoConstants.PREF_REPORTLET_PAGINATOR_ROWS;\n     }\n \n     protected class ReportDataProvider extends DirectoryDataProvider<ReportletWrapper> {\n@@ -237,7 +237,7 @@ private List<ReportletWrapper> getReportletWrappers(final ReportTO reportTO) {\n \n         @Override\n         public Iterator<ReportletWrapper> iterator(final long first, final long count) {\n-            final ReportTO actual = ReportRestClient.read(report);\n+            ReportTO actual = ReportRestClient.read(report);\n \n             List<ReportletWrapper> reportlets = getReportletWrappers(actual);\n "},{"sha":"ddfd3011195433abf43287b4fea1b787067206d2","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/reports/ReportletWizardBuilder.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Freports%2FReportletWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -62,9 +62,8 @@ public ReportletWizardBuilder(final String report, final ReportletWrapper report\n     protected Serializable onApplyInternal(final ReportletWrapper modelObject) {\n         if (modelObject.getImplementationEngine() == ImplementationEngine.JAVA) {\n             BeanWrapper confWrapper = PropertyAccessorFactory.forBeanPropertyAccess(modelObject.getConf());\n-            modelObject.getSCondWrapper().forEach((fieldName, pair) -> {\n-                confWrapper.setPropertyValue(fieldName, SearchUtils.buildFIQL(pair.getRight(), pair.getLeft()));\n-            });\n+            modelObject.getSCondWrapper().forEach((fieldName, pair) -> confWrapper.setPropertyValue(\n+                    fieldName, SearchUtils.buildFIQL(pair.getRight(), pair.getLeft())));\n             ImplementationTO reportlet = ImplementationRestClient.read(\n                     IdRepoImplementationType.REPORTLET, modelObject.getImplementationKey());\n             try {\n@@ -127,7 +126,7 @@ protected void onEvent(final AjaxRequestTarget target) {\n         }\n     }\n \n-    public static class Configuration extends WizardStep {\n+    public class Configuration extends WizardStep {\n \n         private static final long serialVersionUID = -785981096328637758L;\n \n@@ -141,7 +140,8 @@ protected Serializable load() {\n                     return reportlet.getConf();\n                 }\n             };\n-            add(new BeanPanel<>(\"bean\", bean, reportlet.getSCondWrapper(), Constants.NAME_FIELD_NAME, \"reportlet\").\n+            add(new BeanPanel<>(\n+                    \"bean\", bean, reportlet.getSCondWrapper(), pageRef, Constants.NAME_FIELD_NAME, \"reportlet\").\n                     setRenderBodyOnly(true));\n         }\n     }"},{"sha":"ad45f71f72bd8ec528af601f8616bd295eaaa289","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/FIQLQueryRestClient.java","status":"added","additions":48,"deletions":0,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FFIQLQueryRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FFIQLQueryRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FFIQLQueryRestClient.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,48 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.client.console.rest;\n+\n+import java.util.List;\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.syncope.common.rest.api.service.FIQLQueryService;\n+\n+public class FIQLQueryRestClient extends BaseRestClient {\n+\n+    private static final long serialVersionUID = -3161863874876938094L;\n+\n+    public static void delete(final String key) {\n+        getService(FIQLQueryService.class).delete(key);\n+    }\n+\n+    public static FIQLQueryTO read(final String key) {\n+        return getService(FIQLQueryService.class).read(key);\n+    }\n+\n+    public static void update(final FIQLQueryTO roleTO) {\n+        getService(FIQLQueryService.class).update(roleTO);\n+    }\n+\n+    public static void create(final FIQLQueryTO roleTO) {\n+        getService(FIQLQueryService.class).create(roleTO);\n+    }\n+\n+    public static List<FIQLQueryTO> list(final String target) {\n+        return getService(FIQLQueryService.class).list(target);\n+    }\n+}"},{"sha":"76252347f630b238a76c65561933eaed26c69f5d","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/AbstractPropagationTasks.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAbstractPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAbstractPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAbstractPropagationTasks.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -25,5 +25,4 @@ public abstract class AbstractPropagationTasks extends AbstractTasks {\n     public AbstractPropagationTasks(final String id) {\n         super(id);\n     }\n-\n }"},{"sha":"25f6f0d301e5c320484e632cdd498e2e99432a4b","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/AnyPropagationTasks.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FAnyPropagationTasks.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -41,7 +41,7 @@ public <T extends AnyTO> AnyPropagationTasks(\n \n         super(BaseModal.CONTENT_ID);\n \n-        final MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n+        MultilevelPanel mlp = new MultilevelPanel(\"tasks\");\n         mlp.setFirstLevel(new AnyPropagationTaskDirectoryPanel(baseModal, mlp, anyTypeKind, entityKey, pageRef) {\n \n             private static final long serialVersionUID = -2195387360323687302L;"},{"sha":"015620f90494119d395ee88cf6373d102bc63f97","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/PushTaskFilters.java","status":"modified","additions":12,"deletions":11,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FPushTaskFilters.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.client.console.rest.AnyTypeRestClient;\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -38,7 +39,7 @@ public class PushTaskFilters extends WizardStep {\n \n     private static final long serialVersionUID = 855618618337931784L;\n \n-    public PushTaskFilters(final PushTaskWrapper pushTaskWrapper) {\n+    public PushTaskFilters(final PushTaskWrapper pushTaskWrapper, final PageReference pageRef) {\n         super();\n \n         final LoadableDetachableModel<List<AnyTypeTO>> types = new LoadableDetachableModel<>() {\n@@ -59,19 +60,19 @@ protected List<AnyTypeTO> load() {\n             protected void populateItem(final ListItem<AnyTypeTO> item) {\n                 final String key = item.getModelObject().getKey();\n                 item.add(new Accordion(\"filters\", List.of(\n-                    new AbstractTab(new StringResourceModel(\n-                        \"filters\", this, new Model<>(item.getModelObject()))) {\n+                        new AbstractTab(new StringResourceModel(\n+                                \"filters\", this, new Model<>(item.getModelObject()))) {\n \n-                        private static final long serialVersionUID = 1037272333056449378L;\n+                    private static final long serialVersionUID = 1037272333056449378L;\n \n-                        @Override\n-                        public Panel getPanel(final String panelId) {\n-                            return new AnyObjectSearchPanel.Builder(\n-                                key, new MapOfListModel<>(pushTaskWrapper, \"filterClauses\", key)).\n+                    @Override\n+                    public Panel getPanel(final String panelId) {\n+                        return new AnyObjectSearchPanel.Builder(\n+                                key, new MapOfListModel<>(pushTaskWrapper, \"filterClauses\", key), pageRef).\n                                 required(false).build(panelId);\n-                        }\n-                    }), Model.of(StringUtils.isBlank(pushTaskWrapper.getFilters().get(key)) ? -1 : 0))\n-                    .setOutputMarkupId(true));\n+                    }\n+                }), Model.of(StringUtils.isBlank(pushTaskWrapper.getFilters().get(key)) ? -1 : 0))\n+                        .setOutputMarkupId(true));\n             }\n         });\n     }"},{"sha":"cbf73b6c8d579e6c340be8ee6e9921411717e384","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/tasks/SchedTaskWizardBuilder.java","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Ftasks%2FSchedTaskWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -93,7 +93,7 @@ protected WizardModel buildModelSteps(final SchedTaskTO modelObject, final Wizar\n         wizardModel.add(new Profile(modelObject));\n         if (modelObject instanceof PushTaskTO) {\n             wrapper = new PushTaskWrapper(PushTaskTO.class.cast(modelObject));\n-            wizardModel.add(new PushTaskFilters(wrapper));\n+            wizardModel.add(new PushTaskFilters(wrapper, pageRef));\n         }\n         wizardModel.add(new Schedule(modelObject));\n         return wizardModel;\n@@ -197,7 +197,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n             final AjaxSearchFieldPanel destinationRealm =\n                     new AjaxSearchFieldPanel(\"destinationRealm\", \"destinationRealm\",\n-                        new PropertyModel<>(taskTO, \"destinationRealm\"), settings) {\n+                            new PropertyModel<>(taskTO, \"destinationRealm\"), settings) {\n \n                 private static final long serialVersionUID = -6390474600233486704L;\n \n@@ -233,7 +233,7 @@ protected Iterator<String> getChoices(final String input) {\n             }\n \n             final AjaxSearchFieldPanel sourceRealm = new AjaxSearchFieldPanel(\"sourceRealm\", \"sourceRealm\",\n-                new PropertyModel<>(taskTO, \"sourceRealm\"), settings) {\n+                    new PropertyModel<>(taskTO, \"sourceRealm\"), settings) {\n \n                 private static final long serialVersionUID = -6390474600233486704L;\n \n@@ -265,7 +265,7 @@ protected Iterator<String> getChoices(final String input) {\n             AjaxPalettePanel<String> actions = new AjaxPalettePanel.Builder<String>().\n                     setAllowMoveAll(true).setAllowOrder(true).\n                     build(\"actions\",\n-                        new PropertyModel<>(taskTO, \"actions\"),\n+                            new PropertyModel<>(taskTO, \"actions\"),\n                             new ListModel<>(taskTO instanceof PushTaskTO\n                                     ? pushActions.getObject() : pullActions.getObject()));\n             actions.setOutputMarkupId(true);"},{"sha":"b22eb5c37b44d78fb43d3f7ba37cdba522fbe814","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wicket/markup/html/form/ActionLinksTogglePanel.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FActionLinksTogglePanel.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -119,7 +119,7 @@ public void updateHeader(final AjaxRequestTarget target, final Serializable mode\n             header = new ResourceModel(\"actions\", StringUtils.EMPTY).getObject();\n         }\n \n-        setHeader(target, StringUtils.abbreviate(header, HEADER_FIRST_ABBREVIATION));\n+        setHeader(target, header);\n     }\n \n     public void toggleWithContent("},{"sha":"13f85e3f24efeac05e9229d37e5701e532b8e4fd","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/UserSelectionWizardStep.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FUserSelectionWizardStep.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FUserSelectionWizardStep.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2FUserSelectionWizardStep.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -58,7 +58,7 @@ public UserSelectionWizardStep(\n         setTitleModel(title);\n \n         userSearchPanel = UserSearchPanel.class.cast(new UserSearchPanel.Builder(\n-                new ListModel<>(new ArrayList<>())).required(false).enableSearch(UserSelectionWizardStep.this).\n+                new ListModel<>(new ArrayList<>()), pageRef).required(false).enableSearch(UserSelectionWizardStep.this).\n                 build(\"usersearch\"));\n         add(userSearchPanel);\n "},{"sha":"a394edf82764326cec13a8c9710fcbf75cd20c00","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyWizardBuilder.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -102,7 +102,7 @@ protected WizardModel buildModelSteps(final AnyWrapper<A> modelObject, final Wiz\n                 wizardModel.add(new Ownership(GroupWrapper.class.cast(modelObject), pageRef));\n             }\n             if (groupFormLayoutInfo.isDynamicMemberships()) {\n-                wizardModel.add(new DynamicMemberships(GroupWrapper.class.cast(modelObject)));\n+                wizardModel.add(new DynamicMemberships(GroupWrapper.class.cast(modelObject), pageRef));\n             }\n         }\n "},{"sha":"d84eba0b99eef75076acd531353c5cd4a78aac22","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/DynamicMemberships.java","status":"modified","additions":4,"deletions":3,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FDynamicMemberships.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.client.ui.commons.wicket.markup.html.bootstrap.tabs.Accordion;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.extensions.markup.html.tabs.AbstractTab;\n import org.apache.wicket.extensions.wizard.WizardStep;\n import org.apache.wicket.markup.html.list.ListItem;\n@@ -43,7 +44,7 @@ public class DynamicMemberships extends WizardStep {\n \n     private static final long serialVersionUID = 855618618337931784L;\n \n-    public DynamicMemberships(final GroupWrapper groupWrapper) {\n+    public DynamicMemberships(final GroupWrapper groupWrapper, final PageReference pageRef) {\n         super();\n \n         final LoadableDetachableModel<List<AnyTypeTO>> types = new LoadableDetachableModel<>() {\n@@ -68,7 +69,7 @@ protected List<AnyTypeTO> load() {\n \n             @Override\n             public Panel getPanel(final String panelId) {\n-                return new UserSearchPanel.Builder(new PropertyModel<>(groupWrapper, \"uDynClauses\")).\n+                return new UserSearchPanel.Builder(new PropertyModel<>(groupWrapper, \"uDynClauses\"), pageRef).\n                         required(true).build(panelId);\n             }\n         }), Model.of(StringUtils.isBlank(groupWrapper.getUDynMembershipCond()) ? -1 : 0)).setOutputMarkupId(true));\n@@ -93,7 +94,7 @@ protected void populateItem(final ListItem<AnyTypeTO> item) {\n                         @Override\n                         public Panel getPanel(final String panelId) {\n                             return new AnyObjectSearchPanel.Builder(\n-                                key, new MapOfListModel<>(groupWrapper, \"aDynClauses\", key)).\n+                                key, new MapOfListModel<>(groupWrapper, \"aDynClauses\", key), pageRef).\n                                 required(false).build(panelId);\n                         }\n                     }), Model.of(StringUtils.isBlank(groupWrapper.getADynMembershipConds().get(key)) ? -1 : 0))."},{"sha":"b1fd4fa6043ddd83f4b978fd1489e027c4604f97","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Ownership.java","status":"modified","additions":22,"deletions":27,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FOwnership.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -99,7 +99,7 @@ public Ownership(final GroupWrapper groupWrapper, final PageReference pageRef) {\n         // -----------------------------------------------------------------\n         // Pre-Authorizations\n         // -----------------------------------------------------------------\n-        final ActionPermissions permissions = new ActionPermissions();\n+        ActionPermissions permissions = new ActionPermissions();\n         setMetaData(MetaDataRoleAuthorizationStrategy.ACTION_PERMISSIONS, permissions);\n         permissions.authorize(RENDER, new Roles(IdRepoEntitlement.USER_SEARCH));\n         // -----------------------------------------------------------------\n@@ -109,7 +109,7 @@ public Ownership(final GroupWrapper groupWrapper, final PageReference pageRef) {\n \n         isGroupOwnership = Model.of(groupWrapper.getInnerObject().getGroupOwner() != null);\n \n-        final BootstrapToggleConfig config = new BootstrapToggleConfig().\n+        BootstrapToggleConfig config = new BootstrapToggleConfig().\n                 withOnStyle(BootstrapToggleConfig.Style.info).\n                 withOffStyle(BootstrapToggleConfig.Style.warning).\n                 withSize(BootstrapToggleConfig.Size.mini);\n@@ -166,32 +166,27 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         groupSearchFragment = new Fragment(\"search\", \"groupSearchFragment\", this);\n         groupSearchPanel = new GroupSearchPanel.Builder(\n-                new ListModel<>(new ArrayList<>())).required(false).enableSearch(Ownership.this).\n+                new ListModel<>(new ArrayList<>()), pageRef).required(false).enableSearch(Ownership.this).\n                 build(\"groupsearch\");\n         groupSearchFragment.add(groupSearchPanel.setRenderBodyOnly(true));\n \n         AnyTypeTO anyTypeTO = AnyTypeRestClient.read(AnyTypeKind.GROUP.name());\n-\n         groupDirectoryPanel = GroupSelectionDirectoryPanel.class.cast(new GroupSelectionDirectoryPanel.Builder(\n                 AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n                 anyTypeTO.getKey(),\n                 pageRef).build(\"searchResult\"));\n-\n         groupSearchFragment.add(groupDirectoryPanel);\n \n         userSearchFragment = new Fragment(\"search\", \"userSearchFragment\", this);\n         userSearchPanel = UserSearchPanel.class.cast(new UserSearchPanel.Builder(\n-                new ListModel<>(new ArrayList<>())).required(false).enableSearch(Ownership.this).\n+                new ListModel<>(new ArrayList<>()), pageRef).required(false).enableSearch(Ownership.this).\n                 build(\"usersearch\"));\n         userSearchFragment.add(userSearchPanel.setRenderBodyOnly(true));\n \n         anyTypeTO = AnyTypeRestClient.read(AnyTypeKind.USER.name());\n-\n         userDirectoryPanel = UserSelectionDirectoryPanel.class.cast(new UserSelectionDirectoryPanel.Builder(\n-                AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n-                anyTypeTO.getKey(),\n-                pageRef).build(\"searchResult\"));\n-\n+                AnyTypeClassRestClient.list(anyTypeTO.getClasses()), anyTypeTO.getKey(), pageRef).\n+                build(\"searchResult\"));\n         userSearchFragment.add(userDirectoryPanel);\n \n         if (isGroupOwnership.getObject()) {\n@@ -200,7 +195,7 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             ownerContainer.add(userSearchFragment);\n         }\n \n-        final AjaxTextFieldPanel userOwner = new AjaxTextFieldPanel(\n+        AjaxTextFieldPanel userOwner = new AjaxTextFieldPanel(\n                 \"userOwner\", \"userOwner\", new PropertyModel<>(groupWrapper.getInnerObject(), \"userOwner\") {\n \n             private static final long serialVersionUID = -3743432456095828573L;\n@@ -209,22 +204,22 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             public String getObject() {\n                 if (groupWrapper.getInnerObject().getUserOwner() == null) {\n                     return StringUtils.EMPTY;\n-                } else {\n-                    UserTO userTO = userRestClient.read(groupWrapper.getInnerObject().getUserOwner());\n-                    if (userTO == null) {\n-                        return StringUtils.EMPTY;\n-                    } else {\n-                        return String.format(\"[%s] %s\", userTO.getKey(), userTO.getUsername());\n-                    }\n                 }\n+\n+                UserTO userTO = userRestClient.read(groupWrapper.getInnerObject().getUserOwner());\n+                if (userTO == null) {\n+                    return StringUtils.EMPTY;\n+                }\n+\n+                return String.format(\"[%s] %s\", userTO.getKey(), userTO.getUsername());\n             }\n \n             @Override\n             public void setObject(final String object) {\n                 if (StringUtils.isBlank(object)) {\n                     groupWrapper.getInnerObject().setUserOwner(null);\n                 } else {\n-                    final Matcher matcher = owner.matcher(object);\n+                    Matcher matcher = owner.matcher(object);\n                     if (matcher.matches()) {\n                         groupWrapper.getInnerObject().setUserOwner(matcher.group(1));\n                     }\n@@ -236,7 +231,7 @@ public void setObject(final String object) {\n         userOwner.setReadOnly(true).setOutputMarkupId(true);\n         userSearchFragment.add(userOwner);\n \n-        final IndicatingAjaxLink<Void> userOwnerReset = new IndicatingAjaxLink<>(\"userOwnerReset\") {\n+        IndicatingAjaxLink<Void> userOwnerReset = new IndicatingAjaxLink<>(\"userOwnerReset\") {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -253,7 +248,7 @@ public String getAjaxIndicatorMarkupId() {\n         };\n         userSearchFragment.add(userOwnerReset);\n \n-        final AjaxTextFieldPanel groupOwner = new AjaxTextFieldPanel(\n+        AjaxTextFieldPanel groupOwner = new AjaxTextFieldPanel(\n                 \"groupOwner\", \"groupOwner\", new PropertyModel<>(groupWrapper.getInnerObject(), \"groupOwner\") {\n \n             private static final long serialVersionUID = -3743432456095828573L;\n@@ -289,7 +284,7 @@ public void setObject(final String object) {\n         groupOwner.setReadOnly(true).setOutputMarkupId(true);\n         groupSearchFragment.add(groupOwner);\n \n-        final IndicatingAjaxLink<Void> groupOwnerReset = new IndicatingAjaxLink<>(\"groupOwnerReset\") {\n+        IndicatingAjaxLink<Void> groupOwnerReset = new IndicatingAjaxLink<>(\"groupOwnerReset\") {\n \n             private static final long serialVersionUID = -7978723352517770644L;\n \n@@ -310,18 +305,18 @@ public String getAjaxIndicatorMarkupId() {\n     @Override\n     public void onEvent(final IEvent<?> event) {\n         if (event.getPayload() instanceof SearchClausePanel.SearchEvent) {\n-            final AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n+            AjaxRequestTarget target = SearchClausePanel.SearchEvent.class.cast(event.getPayload()).getTarget();\n             if (Ownership.this.isGroupOwnership.getObject()) {\n-                final String fiql = SearchUtils.buildFIQL(\n+                String fiql = SearchUtils.buildFIQL(\n                         groupSearchPanel.getModel().getObject(), SyncopeClient.getGroupSearchConditionBuilder());\n                 groupDirectoryPanel.search(fiql, target);\n             } else {\n-                final String fiql = SearchUtils.buildFIQL(\n+                String fiql = SearchUtils.buildFIQL(\n                         userSearchPanel.getModel().getObject(), SyncopeClient.getUserSearchConditionBuilder());\n                 userDirectoryPanel.search(fiql, target);\n             }\n         } else if (event.getPayload() instanceof AnySelectionDirectoryPanel.ItemSelection) {\n-            final AnyTO sel = ((AnySelectionDirectoryPanel.ItemSelection) event.getPayload()).getSelection();\n+            AnyTO sel = ((AnySelectionDirectoryPanel.ItemSelection) event.getPayload()).getSelection();\n             if (sel == null) {\n                 wrapper.getInnerObject().setUserOwner(null);\n                 wrapper.getInnerObject().setGroupOwner(null);"},{"sha":"1c29c5c9dfc10c8c16a823bd7438844b7d89ad99","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Relationships.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FRelationships.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -351,7 +351,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         protected void setupFragment(final AnyTypeTO anyType) {\n             anyObjectSearchPanel = new AnyObjectSearchPanel.Builder(\n                     anyType.getKey(),\n-                    new ListModel<>(new ArrayList<>())).\n+                    new ListModel<>(new ArrayList<>()),\n+                    pageRef).\n                     enableSearch(Specification.this).\n                     build(\"searchPanel\");\n             fragment.addOrReplace(anyObjectSearchPanel.setRenderBodyOnly(true));"},{"sha":"56d6a85457b91840b87aa99fa17b519cb3d1590e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/role/RoleWizardBuilder.java","status":"modified","additions":14,"deletions":14,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Frole%2FRoleWizardBuilder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -98,7 +98,7 @@ protected WizardModel buildModelSteps(final RoleWrapper modelObject, final Wizar\n         return wizardModel;\n     }\n \n-    public static class Details extends WizardStep {\n+    public class Details extends WizardStep {\n \n         private static final long serialVersionUID = 5514523040031722255L;\n \n@@ -120,7 +120,7 @@ public Details(final RoleWrapper modelObject) {\n                 @Override\n                 public Panel getPanel(final String panelId) {\n                     return new UserSearchPanel.Builder(\n-                            new PropertyModel<>(modelObject, \"dynClauses\")).\n+                            new PropertyModel<>(modelObject, \"dynClauses\"), pageRef).\n                             required(true).build(panelId);\n                 }\n             }), Model.of(StringUtils.isBlank(modelObject.getDynMembershipCond()) ? -1 : 0)).setOutputMarkupId(true));\n@@ -135,21 +135,21 @@ public static class Entitlements extends WizardStep {\n         public Entitlements(final RoleTO modelObject) {\n             setTitleModel(new ResourceModel(\"entitlements\"));\n             add(new AjaxPalettePanel.Builder<String>().build(\"entitlements\",\n-                new PropertyModel<>(modelObject, \"entitlements\") {\n+                    new PropertyModel<>(modelObject, \"entitlements\") {\n \n-                    private static final long serialVersionUID = -7809699384012595307L;\n+                private static final long serialVersionUID = -7809699384012595307L;\n \n-                    @Override\n-                    public List<String> getObject() {\n-                        return new ArrayList<>(modelObject.getEntitlements());\n-                    }\n+                @Override\n+                public List<String> getObject() {\n+                    return new ArrayList<>(modelObject.getEntitlements());\n+                }\n \n-                    @Override\n-                    public void setObject(final List<String> object) {\n-                        modelObject.getEntitlements().clear();\n-                        modelObject.getEntitlements().addAll(object);\n-                    }\n-                }, new ListModel<>(RoleRestClient.getAllAvailableEntitlements())).\n+                @Override\n+                public void setObject(final List<String> object) {\n+                    modelObject.getEntitlements().clear();\n+                    modelObject.getEntitlements().addAll(object);\n+                }\n+            }, new ListModel<>(RoleRestClient.getAllAvailableEntitlements())).\n                     hideLabel().setOutputMarkupId(true));\n         }\n     }"},{"sha":"33f4ac2f2f2e37493d5f93741db282241f0d43b7","filename":"client/idrepo/console/src/main/resources/console.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Fconsole.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -46,6 +46,8 @@ console.maxUploadFileSizeMB=5\n # Max wait time on apply changes from modals/wizards (given in seconds)\n console.maxWaitTimeOnApplyChanges=30\n \n+console.adminUser=${adminUser}\n+\n console.reconciliationReportKey=c3520ad9-179f-49e7-b315-d684d216dd97\n \n console.page.dashboard=org.apache.syncope.client.console.pages.Dashboard"},{"sha":"dc56fb61e5e1b12c6ef3ad6ee7fcd3a66fb7ee7f","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/AbstractSearchPanel.html","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FAbstractSearchPanel.html?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -22,6 +22,11 @@\n   </wicket:head>\n   <wicket:panel>\n     <span class=\"searchBox\">\n+      <div class=\"col-xs-12\" id=\"tablehandling\">\n+        <span wicket:id=\"saveFIQLQuery\"/>\n+        <span wicket:id=\"fiqlQueries\"/>\n+        <span wicket:id=\"fiqlQueryActionsPanel\"/>\n+      </div>\n       <div class=\"col-xs-12\">\n         <span wicket:id=\"searchFormContainer\">\n           <span wicket:id=\"search\">[SEARCH]</span>"},{"sha":"2c0506883e6ee6b984ec7ee2876fac19cfa74c73","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/FIQLQueries.html","status":"added","additions":25,"deletions":0,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.html?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,25 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <div id=\"startAtContainer\">\n+      <span wicket:id=\"fiqlQueryDirectoryPanel\"/>\n+    </div>\n+  </wicket:extend>\n+</html>"},{"sha":"d79efd2c1998e24c3d340458ec97773399f80cff","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/FIQLQueries.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+fiqlQueries=FIQL Queries"},{"sha":"d79efd2c1998e24c3d340458ec97773399f80cff","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/FIQLQueries_fr_CA.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_fr_CA.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+fiqlQueries=FIQL Queries"},{"sha":"e2272f8323d7abe26bac65ed21db4200c9c991e8","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/FIQLQueries_it.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_it.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+fiqlQueries=Query FIQL\n+"},{"sha":"d79efd2c1998e24c3d340458ec97773399f80cff","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/FIQLQueries_ja.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_ja.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+fiqlQueries=FIQL Queries"},{"sha":"1908727d1a7078985f8bf158a1ccb5645ff67059","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/FIQLQueries_pt_BR.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_pt_BR.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+fiqlQueries=FIQL Queries\n+"},{"sha":"1908727d1a7078985f8bf158a1ccb5645ff67059","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/FIQLQueries_ru.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FFIQLQueries_ru.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+fiqlQueries=FIQL Queries\n+"},{"sha":"c855844ecb339441ad8f0477403abef5458eedb6","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/SaveFIQLQuery.html","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.html?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,32 @@\n+<!--\n+Licensed to the Apache Software Foundation (ASF) under one\n+or more contributor license agreements.  See the NOTICE file\n+distributed with this work for additional information\n+regarding copyright ownership.  The ASF licenses this file\n+to you under the Apache License, Version 2.0 (the\n+\"License\"); you may not use this file except in compliance\n+with the License.  You may obtain a copy of the License at\n+\n+  http://www.apache.org/licenses/LICENSE-2.0\n+\n+Unless required by applicable law or agreed to in writing,\n+software distributed under the License is distributed on an\n+\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+KIND, either express or implied.  See the License for the\n+specific language governing permissions and limitations\n+under the License.\n+-->\n+<html xmlns=\"http://www.w3.org/1999/xhtml\" xmlns:wicket=\"http://wicket.apache.org\">\n+  <wicket:extend>\n+    <div id=\"startAtContainer\">\n+      <form wicket:id=\"form\">\n+        <div class=\"input-group\">\n+          <input wicket:id=\"name\"/>\n+          <div class=\"input-group-append input-group-text\">\n+            <a wicket:id=\"submit\"><i class=\"fas fa-archive\" alt=\"new\" title=\"new\"></i></a>\n+          </div>\n+        </div>\n+      </form>\n+    </div>\n+  </wicket:extend>\n+</html>"},{"sha":"3dd424d666324b9b57720038941f6ef5db4a021e","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/SaveFIQLQuery.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+newFIQLQuery=New FIQL Query"},{"sha":"3dd424d666324b9b57720038941f6ef5db4a021e","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/SaveFIQLQuery_fr_CA.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_fr_CA.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_fr_CA.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_fr_CA.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+newFIQLQuery=New FIQL Query"},{"sha":"1d6c4a17fbde934c65ba2a64b93abf6093980d16","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/SaveFIQLQuery_it.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_it.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+newFIQLQuery=Nuova Query FIQL\n+"},{"sha":"3dd424d666324b9b57720038941f6ef5db4a021e","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/SaveFIQLQuery_ja.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_ja.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_ja.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_ja.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+newFIQLQuery=New FIQL Query"},{"sha":"d87e548380dd8ad9c2dbb4180ce2c59cf1e51bf2","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/SaveFIQLQuery_pt_BR.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_pt_BR.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_pt_BR.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_pt_BR.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+newFIQLQuery=New FIQL Query\n+"},{"sha":"d87e548380dd8ad9c2dbb4180ce2c59cf1e51bf2","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/SaveFIQLQuery_ru.properties","status":"added","additions":18,"deletions":0,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_ru.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_ru.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSaveFIQLQuery_ru.properties?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,18 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+newFIQLQuery=New FIQL Query\n+"},{"sha":"56d11ac4735b91e8812e46df4d4601b95da44a5a","filename":"client/idrepo/console/src/main/resources/org/apache/syncope/client/console/panels/search/SearchClausePanel.html","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FSearchClausePanel.html?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -22,7 +22,7 @@\n       <label wicket:id=\"field-label\">[LABEL]</label><span wicket:id=\"required\"/>\n       <span wicket:id=\"externalAction\"/>\n     </wicket:enclosure>\n-    <span wicket:id=\"container\"  class=\"clause\">\n+    <span wicket:id=\"container\" class=\"clause\">\n       <div wicket:id=\"operatorContainer\" class=\"field operator\"><span wicket:id=\"operator\"/></div>\n       <span wicket:id=\"type\" class=\"field type\"/>\n       <span wicket:id=\"property\" class=\"field property\"/>"},{"sha":"4b7d50caa047ddfdf89c4187a5d6ff68a9fc25e6","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/AbstractTest.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FAbstractTest.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -72,6 +72,7 @@\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.rest.api.beans.SchemaQuery;\n import org.apache.syncope.common.rest.api.service.AnyTypeService;\n+import org.apache.syncope.common.rest.api.service.FIQLQueryService;\n import org.apache.syncope.common.rest.api.service.SchemaService;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n import org.apache.wicket.util.tester.WicketTester;\n@@ -211,6 +212,9 @@ public interface AnyTypeServiceClient extends AnyTypeService, Client {\n         public interface SchemaServiceClient extends SchemaService, Client {\n         }\n \n+        public interface FIQLQueryServiceClient extends FIQLQueryService, Client {\n+        }\n+\n         private SyncopeService getSyncopeService() {\n             SyncopeServiceClient service = mock(SyncopeServiceClient.class);\n             when(service.type(anyString())).thenReturn(service);\n@@ -248,6 +252,15 @@ private AnyTypeService getAnyTypeService() {\n             return service;\n         }\n \n+        private FIQLQueryService getFIQLQueryService() {\n+            FIQLQueryServiceClient service = mock(FIQLQueryServiceClient.class);\n+\n+            when(service.type(anyString())).thenReturn(service);\n+            when(service.accept(anyString())).thenReturn(service);\n+\n+            return service;\n+        }\n+\n         private UserTO getUserTO() {\n             UserTO userTO = new UserTO();\n             userTO.setUsername(\"username\");\n@@ -298,6 +311,9 @@ public SyncopeClientFactoryBean newClientFactory() {\n             AnyTypeService anyTypeService = getAnyTypeService();\n             when(client.getService(AnyTypeService.class)).thenReturn(anyTypeService);\n \n+            FIQLQueryService fiqlQueryService = getFIQLQueryService();\n+            when(client.getService(FIQLQueryService.class)).thenReturn(fiqlQueryService);\n+\n             SyncopeClientFactoryBean clientFactory = mock(SyncopeClientFactoryBean.class);\n             when(clientFactory.setDomain(any())).thenReturn(clientFactory);\n             when(clientFactory.create(any(AuthenticationHandler.class))).thenReturn(client);"},{"sha":"f6e26c379d2547e4a31a47114018a83b13282c4a","filename":"client/idrepo/console/src/test/java/org/apache/syncope/client/console/panels/search/UserSearchPanelTest.java","status":"modified","additions":10,"deletions":1,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanelTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanelTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2Fsearch%2FUserSearchPanelTest.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -20,11 +20,15 @@\n \n import static org.junit.jupiter.api.Assertions.assertEquals;\n import static org.junit.jupiter.api.Assertions.assertNull;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n \n import java.util.List;\n import org.apache.syncope.client.console.AbstractAdminTest;\n+import org.apache.syncope.client.console.pages.BasePage;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.wicket.Component;\n+import org.apache.wicket.PageReference;\n import org.apache.wicket.model.util.ListModel;\n import org.apache.wicket.util.tester.FormTester;\n import org.junit.jupiter.api.Test;\n@@ -33,13 +37,18 @@ public class UserSearchPanelTest extends AbstractAdminTest {\n \n     @Test\n     public void test() {\n+        BasePage page = new BasePage();\n+        PageReference pageRef = mock(PageReference.class);\n+        when(pageRef.getPage()).thenReturn(page);\n+\n         SearchClause clause = new SearchClause();\n         clause.setComparator(SearchClause.Comparator.EQUALS);\n         clause.setType(SearchClause.Type.ATTRIBUTE);\n         clause.setProperty(\"username\");\n \n         TESTER.startComponentInPage(new UserSearchPanel.Builder(\n-                new ListModel<>(List.of(clause))).required(true).enableSearch().build(\"content\"));\n+                new ListModel<>(List.of(clause)), pageRef).\n+                required(true).enableSearch().build(\"content\"));\n \n         FormTester formTester = TESTER.newFormTester(\n                 \"content:searchFormContainer:search:multiValueContainer:innerForm\");"},{"sha":"e2d75919a3f956f5932541f29d43143b88ee09d2","filename":"client/idrepo/enduser/src/main/java/org/apache/syncope/client/enduser/EnduserProperties.java","status":"modified","additions":0,"deletions":10,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FEnduserProperties.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FEnduserProperties.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FEnduserProperties.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -28,8 +28,6 @@\n @ConfigurationProperties(\"enduser\")\n public class EnduserProperties extends CommonUIProperties {\n \n-    private String adminUser;\n-\n     private Class<? extends Sidebar> sidebar = Sidebar.class;\n \n     private String customFormLayout = \"classpath:/customFormLayout.json\";\n@@ -38,14 +36,6 @@ public class EnduserProperties extends CommonUIProperties {\n \n     private final Map<String, Class<? extends BasePage>> page = new HashMap<>();\n \n-    public String getAdminUser() {\n-        return adminUser;\n-    }\n-\n-    public void setAdminUser(final String adminUser) {\n-        this.adminUser = adminUser;\n-    }\n-\n     public Class<? extends Sidebar> getSidebar() {\n         return sidebar;\n     }"},{"sha":"beafb2d83ec46b132804553034bd29a492510abf","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/to/FIQLQueryTO.java","status":"added","additions":107,"deletions":0,"changes":107,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FFIQLQueryTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FFIQLQueryTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2Fto%2FFIQLQueryTO.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,107 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib.to;\n+\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import javax.ws.rs.PathParam;\n+import org.apache.commons.lang3.builder.EqualsBuilder;\n+import org.apache.commons.lang3.builder.HashCodeBuilder;\n+\n+public class FIQLQueryTO implements NamedEntityTO {\n+\n+    private static final long serialVersionUID = -4467481248062334069L;\n+\n+    private String key;\n+\n+    private String name;\n+\n+    private String target;\n+\n+    private String fiql;\n+\n+    @Schema(accessMode = Schema.AccessMode.READ_ONLY)\n+    @Override\n+    public String getKey() {\n+        return key;\n+    }\n+\n+    @PathParam(\"key\")\n+    @Override\n+    public void setKey(final String key) {\n+        this.key = key;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    public String getTarget() {\n+        return target;\n+    }\n+\n+    public void setTarget(final String target) {\n+        this.target = target;\n+    }\n+\n+    public String getFiql() {\n+        return fiql;\n+    }\n+\n+    public void setFiql(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+\n+    @Override\n+    public int hashCode() {\n+        return new HashCodeBuilder().\n+                appendSuper(super.hashCode()).\n+                append(key).\n+                append(name).\n+                append(target).\n+                append(fiql).\n+                build();\n+    }\n+\n+    @Override\n+    public boolean equals(final Object obj) {\n+        if (this == obj) {\n+            return true;\n+        }\n+        if (obj == null) {\n+            return false;\n+        }\n+        if (getClass() != obj.getClass()) {\n+            return false;\n+        }\n+        final FIQLQueryTO other = (FIQLQueryTO) obj;\n+        return new EqualsBuilder().\n+                appendSuper(super.equals(obj)).\n+                append(key, other.key).\n+                append(name, other.name).\n+                append(target, other.target).\n+                append(fiql, other.fiql).\n+                build();\n+    }\n+}"},{"sha":"83e2a3c4569b36b480bc363fa4bc89346eb061a7","filename":"common/idrepo/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/FIQLQueryService.java","status":"added","additions":124,"deletions":0,"changes":124,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FFIQLQueryService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FFIQLQueryService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FFIQLQueryService.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,124 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.rest.api.service;\n+\n+import io.swagger.v3.oas.annotations.Parameter;\n+import io.swagger.v3.oas.annotations.enums.ParameterIn;\n+import io.swagger.v3.oas.annotations.headers.Header;\n+import io.swagger.v3.oas.annotations.media.Schema;\n+import io.swagger.v3.oas.annotations.responses.ApiResponse;\n+import io.swagger.v3.oas.annotations.responses.ApiResponses;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirement;\n+import io.swagger.v3.oas.annotations.security.SecurityRequirements;\n+import io.swagger.v3.oas.annotations.tags.Tag;\n+import java.util.List;\n+import javax.validation.constraints.NotNull;\n+import javax.ws.rs.Consumes;\n+import javax.ws.rs.DELETE;\n+import javax.ws.rs.GET;\n+import javax.ws.rs.POST;\n+import javax.ws.rs.PUT;\n+import javax.ws.rs.Path;\n+import javax.ws.rs.PathParam;\n+import javax.ws.rs.Produces;\n+import javax.ws.rs.QueryParam;\n+import javax.ws.rs.core.HttpHeaders;\n+import javax.ws.rs.core.MediaType;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+\n+/**\n+ * REST operations for FIQL queries.\n+ */\n+@Tag(name = \"FIQLQueries\")\n+@SecurityRequirements({\n+    @SecurityRequirement(name = \"BasicAuthentication\"),\n+    @SecurityRequirement(name = \"Bearer\") })\n+@Path(\"fiqlQueries\")\n+public interface FIQLQueryService extends JAXRSService {\n+\n+    /**\n+     * Returns a list of all FIQL queries for the calling user, matching the given target if provided.\n+     *\n+     * @param target FIQL query target\n+     * @return list of all FIQL queries for the calling user, matching the given target if provided\n+     */\n+    @GET\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    List<FIQLQueryTO> list(@QueryParam(\"target\") String target);\n+\n+    /**\n+     * Returns FIQL querywith matching key.\n+     *\n+     * @param key FIQL querykey to be read\n+     * @return FIQL querywith matching key\n+     */\n+    @GET\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    FIQLQueryTO read(@NotNull @PathParam(\"key\") String key);\n+\n+    /**\n+     * Creates a new fiqlQuery.\n+     *\n+     * @param fiqlQueryTO FIQL queryto be created\n+     * @return Response object featuring Location header of created fiqlQuery\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"201\",\n+                    description = \"FIQLQuery successfully created\", headers = {\n+                @Header(name = RESTHeaders.RESOURCE_KEY, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"Key value for the entity created\"),\n+                @Header(name = HttpHeaders.LOCATION, schema =\n+                        @Schema(type = \"string\"),\n+                        description = \"URL of the entity created\") }))\n+    @POST\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    Response create(@NotNull FIQLQueryTO fiqlQueryTO);\n+\n+    /**\n+     * Updates the FIQL querymatching the provided key.\n+     *\n+     * @param fiqlQueryTO FIQL queryto be stored\n+     */\n+    @Parameter(name = \"key\", description = \"FIQLQuery's key\", in = ParameterIn.PATH, schema =\n+            @Schema(type = \"string\"))\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @PUT\n+    @Path(\"{key}\")\n+    @Consumes({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void update(@NotNull FIQLQueryTO fiqlQueryTO);\n+\n+    /**\n+     * Deletes the FIQL querymatching the provided key.\n+     *\n+     * @param key FIQL querykey to be deleted\n+     */\n+    @ApiResponses(\n+            @ApiResponse(responseCode = \"204\", description = \"Operation was successful\"))\n+    @DELETE\n+    @Path(\"{key}\")\n+    @Produces({ MediaType.APPLICATION_JSON, RESTHeaders.APPLICATION_YAML, MediaType.APPLICATION_XML })\n+    void delete(@NotNull @PathParam(\"key\") String key);\n+}"},{"sha":"a9f0c967e82f9434f32636d9a70f2e707c6e86f0","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/DelegationLogic.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDelegationLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDelegationLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FDelegationLogic.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -127,7 +127,6 @@ public DelegationTO delete(final String key) {\n         Delegation delegation = delegationDAO.find(key);\n         if (delegation == null) {\n             LOG.error(\"Could not find delegation '\" + key + \"'\");\n-\n             throw new NotFoundException(key);\n         }\n "},{"sha":"0ec7da4e6bb57744a283a8c3d9c49806452af78a","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/FIQLQueryLogic.java","status":"added","additions":143,"deletions":0,"changes":143,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FFIQLQueryLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FFIQLQueryLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FFIQLQueryLogic.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,143 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.logic;\n+\n+import java.lang.reflect.Method;\n+import java.util.List;\n+import java.util.stream.Collectors;\n+import org.apache.commons.lang3.ArrayUtils;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n+import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n+import org.apache.syncope.core.provisioning.api.data.FIQLQueryDataBinder;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.transaction.annotation.Transactional;\n+\n+public class FIQLQueryLogic extends AbstractTransactionalLogic<FIQLQueryTO> {\n+\n+    protected final FIQLQueryDataBinder binder;\n+\n+    protected final FIQLQueryDAO fiqlQueryDAO;\n+\n+    protected final UserDAO userDAO;\n+\n+    public FIQLQueryLogic(\n+            final FIQLQueryDataBinder binder,\n+            final FIQLQueryDAO fiqlQueryDAO,\n+            final UserDAO userDAO) {\n+\n+        this.binder = binder;\n+        this.fiqlQueryDAO = fiqlQueryDAO;\n+        this.userDAO = userDAO;\n+    }\n+\n+    protected void securityChecks(final String owner) {\n+        if (!AuthContextUtils.getUsername().equals(owner)) {\n+            throw new DelegatedAdministrationException(SyncopeConstants.ROOT_REALM, AnyTypeKind.USER.name(), owner);\n+        }\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n+    public FIQLQueryTO read(final String key) {\n+        FIQLQuery fiqlQuery = fiqlQueryDAO.find(key);\n+        if (fiqlQuery == null) {\n+            LOG.error(\"Could not find fiqlQuery '\" + key + \"'\");\n+            throw new NotFoundException(key);\n+        }\n+\n+        securityChecks(fiqlQuery.getOwner().getUsername());\n+\n+        return binder.getFIQLQueryTO(fiqlQuery);\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    @Transactional(readOnly = true)\n+    public List<FIQLQueryTO> list(final String target) {\n+        return fiqlQueryDAO.findByOwner(userDAO.findByUsername(AuthContextUtils.getUsername()), target).stream().\n+                map(binder::getFIQLQueryTO).collect(Collectors.toList());\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public FIQLQueryTO create(final FIQLQueryTO fiqlQueryTO) {\n+        return binder.getFIQLQueryTO(fiqlQueryDAO.save(binder.create(fiqlQueryTO)));\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public FIQLQueryTO update(final FIQLQueryTO fiqlQueryTO) {\n+        FIQLQuery fiqlQuery = fiqlQueryDAO.find(fiqlQueryTO.getKey());\n+        if (fiqlQuery == null) {\n+            LOG.error(\"Could not find fiqlQuery '\" + fiqlQueryTO.getKey() + \"'\");\n+            throw new NotFoundException(fiqlQueryTO.getKey());\n+        }\n+\n+        securityChecks(fiqlQuery.getOwner().getUsername());\n+\n+        return binder.getFIQLQueryTO(fiqlQueryDAO.save(binder.update(fiqlQuery, fiqlQueryTO)));\n+    }\n+\n+    @PreAuthorize(\"isAuthenticated()\")\n+    public FIQLQueryTO delete(final String key) {\n+        FIQLQuery fiqlQuery = fiqlQueryDAO.find(key);\n+        if (fiqlQuery == null) {\n+            LOG.error(\"Could not find fiqlQuery '\" + key + \"'\");\n+            throw new NotFoundException(key);\n+        }\n+\n+        securityChecks(fiqlQuery.getOwner().getUsername());\n+\n+        FIQLQueryTO deleted = binder.getFIQLQueryTO(fiqlQuery);\n+        fiqlQueryDAO.delete(key);\n+        return deleted;\n+    }\n+\n+    @Override\n+    protected FIQLQueryTO resolveReference(final Method method, final Object... args)\n+            throws UnresolvedReferenceException {\n+\n+        String key = null;\n+\n+        if (ArrayUtils.isNotEmpty(args)) {\n+            for (int i = 0; key == null && i < args.length; i++) {\n+                if (args[i] instanceof String) {\n+                    key = (String) args[i];\n+                } else if (args[i] instanceof FIQLQueryTO) {\n+                    key = ((FIQLQueryTO) args[i]).getKey();\n+                }\n+            }\n+        }\n+\n+        if (key != null) {\n+            try {\n+                return binder.getFIQLQueryTO(fiqlQueryDAO.find(key));\n+            } catch (Throwable ignore) {\n+                LOG.debug(\"Unresolved reference\", ignore);\n+                throw new UnresolvedReferenceException(ignore);\n+            }\n+        }\n+\n+        throw new UnresolvedReferenceException();\n+    }\n+}"},{"sha":"1c38c68d3e66266b01b5f8d2bb9971d71c0605a7","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/IdRepoLogicContext.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FIdRepoLogicContext.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -38,6 +38,7 @@\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n@@ -70,6 +71,7 @@\n import org.apache.syncope.core.provisioning.api.data.AuditDataBinder;\n import org.apache.syncope.core.provisioning.api.data.DelegationDataBinder;\n import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.FIQLQueryDataBinder;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n import org.apache.syncope.core.provisioning.api.data.NotificationDataBinder;\n@@ -231,6 +233,16 @@ public AuditLogic auditLogic(\n                 auditManager);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public FIQLQueryLogic fiqlQueryLogic(\n+            final FIQLQueryDataBinder binder,\n+            final UserDAO userDAO,\n+            final FIQLQueryDAO fiqlQueryDAO) {\n+\n+        return new FIQLQueryLogic(binder, fiqlQueryDAO, userDAO);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public DelegationLogic delegationLogic("},{"sha":"398ae2013b0bcf12259cf2af81798e392cdd819b","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/IdRepoRESTCXFContext.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2FIdRepoRESTCXFContext.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -54,6 +54,7 @@\n import org.apache.syncope.common.rest.api.service.AuditService;\n import org.apache.syncope.common.rest.api.service.DelegationService;\n import org.apache.syncope.common.rest.api.service.DynRealmService;\n+import org.apache.syncope.common.rest.api.service.FIQLQueryService;\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.common.rest.api.service.ImplementationService;\n import org.apache.syncope.common.rest.api.service.MailTemplateService;\n@@ -78,6 +79,7 @@\n import org.apache.syncope.core.logic.AuditLogic;\n import org.apache.syncope.core.logic.DelegationLogic;\n import org.apache.syncope.core.logic.DynRealmLogic;\n+import org.apache.syncope.core.logic.FIQLQueryLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n import org.apache.syncope.core.logic.ImplementationLogic;\n import org.apache.syncope.core.logic.MailTemplateLogic;\n@@ -108,6 +110,7 @@\n import org.apache.syncope.core.rest.cxf.service.AuditServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.DelegationServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.DynRealmServiceImpl;\n+import org.apache.syncope.core.rest.cxf.service.FIQLQueryServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.GroupServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.ImplementationServiceImpl;\n import org.apache.syncope.core.rest.cxf.service.MailTemplateServiceImpl;\n@@ -372,6 +375,12 @@ public AuditService auditService(final AuditLogic auditLogic) {\n         return new AuditServiceImpl(auditLogic);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public FIQLQueryService fiqlQueryService(final FIQLQueryLogic fiqlQueryLogic) {\n+        return new FIQLQueryServiceImpl(fiqlQueryLogic);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public DelegationService delegationService(final DelegationLogic delegationLogic) {"},{"sha":"1fbe159cb980ab9031d35f9a92990977d1310d99","filename":"core/idrepo/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/FIQLQueryServiceImpl.java","status":"added","additions":67,"deletions":0,"changes":67,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FFIQLQueryServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FFIQLQueryServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FFIQLQueryServiceImpl.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,67 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.cxf.service;\n+\n+import java.net.URI;\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.FIQLQueryService;\n+import org.apache.syncope.core.logic.FIQLQueryLogic;\n+import org.springframework.stereotype.Service;\n+\n+@Service\n+public class FIQLQueryServiceImpl extends AbstractService implements FIQLQueryService {\n+\n+    protected final FIQLQueryLogic logic;\n+\n+    public FIQLQueryServiceImpl(final FIQLQueryLogic logic) {\n+        this.logic = logic;\n+    }\n+\n+    @Override\n+    public List<FIQLQueryTO> list(final String target) {\n+        return logic.list(target);\n+    }\n+\n+    @Override\n+    public FIQLQueryTO read(final String key) {\n+        return logic.read(key);\n+    }\n+\n+    @Override\n+    public Response create(final FIQLQueryTO applicationTO) {\n+        FIQLQueryTO created = logic.create(applicationTO);\n+        URI location = uriInfo.getAbsolutePathBuilder().path(created.getKey()).build();\n+        return Response.created(location).\n+                header(RESTHeaders.RESOURCE_KEY, created.getKey()).\n+                build();\n+    }\n+\n+    @Override\n+    public void update(final FIQLQueryTO applicationTO) {\n+        logic.update(applicationTO);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        logic.delete(key);\n+    }\n+}"},{"sha":"41e2e65d2a1ce339196a23a534db427a26c830bf","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/DelegationDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDelegationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDelegationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FDelegationDAO.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -42,5 +42,7 @@ public interface DelegationDAO extends DAO<Delegation> {\n \n     Delegation save(Delegation delegation);\n \n+    void delete(Delegation delegation);\n+\n     void delete(String key);\n }"},{"sha":"b76380f8b3ce532245b8a2c60cfb388811484ca8","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/FIQLQueryDAO.java","status":"added","additions":38,"deletions":0,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FFIQLQueryDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FFIQLQueryDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FFIQLQueryDAO.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,38 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.dao;\n+\n+import java.util.List;\n+import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+\n+public interface FIQLQueryDAO extends DAO<FIQLQuery> {\n+\n+    FIQLQuery find(String key);\n+\n+    List<FIQLQuery> findByOwner(User user, String target);\n+\n+    List<FIQLQuery> findAll();\n+\n+    FIQLQuery save(FIQLQuery fiqlQuery);\n+\n+    void delete(FIQLQuery fiqlQuery);\n+\n+    void delete(String key);\n+}"},{"sha":"c4c354017b9047ca5ab696b3615eff400398ec27","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/PushCorrelationRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FPushCorrelationRule.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -59,7 +59,7 @@ default void setConf(PushCorrelationRuleConf conf) {\n      * @param provision resource provision\n      * @return fiql\n      */\n-    default String getFiql(ConnectorObject connectorObject, Provision provision) {\n+    default String getFIQL(ConnectorObject connectorObject, Provision provision) {\n         return DEFAULT_FIQL_BUILDER.apply(connectorObject, provision);\n     }\n }"},{"sha":"3023fa9a1066aa9b9523beb84df61d4433f994ce","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/FIQLQuery.java","status":"added","additions":40,"deletions":0,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FFIQLQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FFIQLQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FFIQLQuery.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,40 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+\n+public interface FIQLQuery extends Entity {\n+\n+    String getName();\n+\n+    void setName(String name);\n+\n+    User getOwner();\n+\n+    void setOwner(User owner);\n+\n+    String getTarget();\n+\n+    void setTarget(String target);\n+\n+    String getFIQL();\n+\n+    void setFIQL(String fiql);\n+}"},{"sha":"71be82c43b469d58beeafed46a464b601e90075e","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/JPAJSONPersistenceContext.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FJPAJSONPersistenceContext.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -25,6 +25,7 @@\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n@@ -130,6 +131,7 @@ public UserDAO userDAO(\n             final @Lazy RealmDAO realmDAO,\n             final @Lazy GroupDAO groupDAO,\n             final @Lazy DelegationDAO delegationDAO,\n+            final @Lazy FIQLQueryDAO fiqlQueryDAO,\n             final @Lazy JPAJSONAnyDAO anyDAO) {\n \n         return new JPAJSONUserDAO(\n@@ -142,6 +144,7 @@ public UserDAO userDAO(\n                 realmDAO,\n                 groupDAO,\n                 delegationDAO,\n+                fiqlQueryDAO,\n                 securityProperties,\n                 anyDAO);\n     }"},{"sha":"9d61c68015e47a59cd3c6a37a1af1f749064e4f9","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAJSONUserDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAJSONUserDAO.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -27,6 +27,7 @@\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.JPAJSONAnyDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n@@ -56,6 +57,7 @@ public JPAJSONUserDAO(\n             final RealmDAO realmDAO,\n             final GroupDAO groupDAO,\n             final DelegationDAO delegationDAO,\n+            final FIQLQueryDAO fiqlQueryDAO,\n             final SecurityProperties securityProperties,\n             final JPAJSONAnyDAO anyDAO) {\n \n@@ -68,6 +70,7 @@ public JPAJSONUserDAO(\n                 realmDAO,\n                 groupDAO,\n                 delegationDAO,\n+                fiqlQueryDAO,\n                 securityProperties);\n         this.anyDAO = anyDAO;\n     }"},{"sha":"b2e7b2cc5ba7192a0d89bcf9ac78633ad85e5edc","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/PersistenceContext.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2FPersistenceContext.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -45,6 +45,7 @@\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n import org.apache.syncope.core.persistence.api.dao.EntityCacheDAO;\n import org.apache.syncope.core.persistence.api.dao.ExternalResourceDAO;\n+import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.MailTemplateDAO;\n@@ -100,6 +101,7 @@\n import org.apache.syncope.core.persistence.jpa.dao.JPADynRealmDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAEntityCacheDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAExternalResourceDAO;\n+import org.apache.syncope.core.persistence.jpa.dao.JPAFIQLQueryDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAGroupDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAImplementationDAO;\n import org.apache.syncope.core.persistence.jpa.dao.JPAMailTemplateDAO;\n@@ -433,6 +435,12 @@ public DelegationDAO delegationDAO() {\n         return new JPADelegationDAO();\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public FIQLQueryDAO fiqlQueryDAO() {\n+        return new JPAFIQLQueryDAO();\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public DerSchemaDAO derSchemaDAO(final @Lazy ExternalResourceDAO resourceDAO) {\n@@ -674,7 +682,8 @@ public UserDAO userDAO(\n             final AccessTokenDAO accessTokenDAO,\n             final RealmDAO realmDAO,\n             final @Lazy GroupDAO groupDAO,\n-            final DelegationDAO delegationDAO) {\n+            final DelegationDAO delegationDAO,\n+            final FIQLQueryDAO fiqlQueryDAO) {\n \n         return new JPAUserDAO(\n                 anyUtilsFactory,\n@@ -686,6 +695,7 @@ public UserDAO userDAO(\n                 realmDAO,\n                 groupDAO,\n                 delegationDAO,\n+                fiqlQueryDAO,\n                 securityProperties);\n     }\n "},{"sha":"fc2dc9f50e3f246a5cfd52d56e7077e763eb41bd","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/DefaultPushCorrelationRule.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FDefaultPushCorrelationRule.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -104,7 +104,7 @@ public Filter getFilter(final Any<?> any, final Provision provision) {\n     }\n \n     @Override\n-    public String getFiql(final ConnectorObject connectorObject, final Provision provision) {\n+    public String getFIQL(final ConnectorObject connectorObject, final Provision provision) {\n         List<CompleteCondition> conditions = new ArrayList<>();\n \n         provision.getMapping().getItems().stream().filter("},{"sha":"29f44666a25e27bf706abcfadb4ea0a0e0b6c659","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPADelegationDAO.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPADelegationDAO.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -104,13 +104,18 @@ public Delegation save(final Delegation delegation) {\n         return entityManager().merge(delegation);\n     }\n \n+    @Override\n+    public void delete(final Delegation delegation) {\n+        entityManager().remove(delegation);\n+    }\n+\n     @Override\n     public void delete(final String key) {\n         Delegation delegation = find(key);\n         if (delegation == null) {\n             return;\n         }\n \n-        entityManager().remove(delegation);\n+        delete(delegation);\n     }\n }"},{"sha":"9c8a1fb2804cdfe174a8b76481f512afb6408751","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAFIQLQueryDAO.java","status":"added","additions":79,"deletions":0,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAFIQLQueryDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAFIQLQueryDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAFIQLQueryDAO.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,79 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import java.util.List;\n+import javax.persistence.TypedQuery;\n+import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n+import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAFIQLQuery;\n+\n+public class JPAFIQLQueryDAO extends AbstractDAO<FIQLQuery> implements FIQLQueryDAO {\n+\n+    @Override\n+    public FIQLQuery find(final String key) {\n+        return entityManager().find(JPAFIQLQuery.class, key);\n+    }\n+\n+    @Override\n+    public List<FIQLQuery> findByOwner(final User user, final String target) {\n+        StringBuilder queryString = new StringBuilder(\"SELECT e FROM \").\n+                append(JPAFIQLQuery.class.getSimpleName()).append(\" e WHERE e.owner=:user\");\n+        if (StringUtils.isNotBlank(target)) {\n+            queryString.append(\" AND e.target=:target\");\n+        }\n+\n+        TypedQuery<FIQLQuery> query = entityManager().createQuery(queryString.toString(), FIQLQuery.class);\n+        query.setParameter(\"user\", user);\n+        if (StringUtils.isNotBlank(target)) {\n+            query.setParameter(\"target\", target);\n+        }\n+\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public List<FIQLQuery> findAll() {\n+        TypedQuery<FIQLQuery> query = entityManager().createQuery(\n+                \"SELECT e FROM \" + JPAFIQLQuery.class.getSimpleName() + \" e \", FIQLQuery.class);\n+        return query.getResultList();\n+    }\n+\n+    @Override\n+    public FIQLQuery save(final FIQLQuery fiqlQuery) {\n+        return entityManager().merge(fiqlQuery);\n+    }\n+\n+    @Override\n+    public void delete(final FIQLQuery fiqlQuery) {\n+        entityManager().remove(fiqlQuery);\n+    }\n+\n+    @Override\n+    public void delete(final String key) {\n+        FIQLQuery fiqlQuery = find(key);\n+        if (fiqlQuery == null) {\n+            return;\n+        }\n+\n+        delete(fiqlQuery);\n+    }\n+}"},{"sha":"8235a98479288078edd97c5d2b2bbfe1e94d7daa","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":10,"deletions":12,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -41,15 +41,14 @@\n import org.apache.syncope.core.persistence.api.dao.DelegationDAO;\n import org.apache.syncope.core.persistence.api.dao.DerSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.FIQLQueryDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n-import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n-import org.apache.syncope.core.persistence.api.entity.Delegation;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Membership;\n@@ -90,6 +89,8 @@ public class JPAUserDAO extends AbstractAnyDAO<User> implements UserDAO {\n \n     protected final DelegationDAO delegationDAO;\n \n+    protected final FIQLQueryDAO fiqlQueryDAO;\n+\n     protected final SecurityProperties securityProperties;\n \n     public JPAUserDAO(\n@@ -102,6 +103,7 @@ public JPAUserDAO(\n             final RealmDAO realmDAO,\n             final GroupDAO groupDAO,\n             final DelegationDAO delegationDAO,\n+            final FIQLQueryDAO fiqlQueryDAO,\n             final SecurityProperties securityProperties) {\n \n         super(anyUtilsFactory, plainSchemaDAO, derSchemaDAO, dynRealmDAO);\n@@ -110,6 +112,7 @@ public JPAUserDAO(\n         this.realmDAO = realmDAO;\n         this.groupDAO = groupDAO;\n         this.delegationDAO = delegationDAO;\n+        this.fiqlQueryDAO = fiqlQueryDAO;\n         this.securityProperties = securityProperties;\n     }\n \n@@ -482,17 +485,12 @@ public void delete(final User user) {\n         groupDAO.removeDynMemberships(user);\n         dynRealmDAO.removeDynMemberships(user.getKey());\n \n-        Set<String> delegations = delegationDAO.findByDelegating(user).stream().\n-                map(Delegation::getKey).collect(Collectors.toSet());\n-        delegations.forEach(delegationDAO::delete);\n-        delegations = delegationDAO.findByDelegated(user).stream().\n-                map(Delegation::getKey).collect(Collectors.toSet());\n-        delegations.forEach(delegationDAO::delete);\n+        delegationDAO.findByDelegating(user).forEach(delegationDAO::delete);\n+        delegationDAO.findByDelegated(user).forEach(delegationDAO::delete);\n \n-        AccessToken accessToken = accessTokenDAO.findByOwner(user.getUsername());\n-        if (accessToken != null) {\n-            accessTokenDAO.delete(accessToken);\n-        }\n+        fiqlQueryDAO.findByOwner(user, null).forEach(fiqlQueryDAO::delete);\n+\n+        Optional.ofNullable(accessTokenDAO.findByOwner(user.getUsername())).ifPresent(accessTokenDAO::delete);\n \n         entityManager().remove(user);\n     }"},{"sha":"bb2ce3a3c6cd2ed1f083a10564758a6f3c9b7140","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPADelegation.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADelegation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADelegation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPADelegation.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -42,10 +42,10 @@\n @DelegationCheck\n public class JPADelegation extends AbstractGeneratedKeyEntity implements Delegation {\n \n-    public static final String TABLE = \"Delegation\";\n-\n     private static final long serialVersionUID = 17988340419552L;\n \n+    public static final String TABLE = \"Delegation\";\n+\n     @ManyToOne(optional = false)\n     private JPAUser delegating;\n "},{"sha":"4791df49440699208e1714c5856cfb64b0fd81c4","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAEntityFactory.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAEntityFactory.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.persistence.api.entity.DynRealmMembership;\n import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.MailTemplate;\n import org.apache.syncope.core.persistence.api.entity.Notification;\n@@ -328,6 +329,8 @@ public <E extends Entity> E newEntity(final Class<E> reference) {\n             result = (E) new JPABatch();\n         } else if (reference.equals(Delegation.class)) {\n             result = (E) new JPADelegation();\n+        } else if (reference.equals(FIQLQuery.class)) {\n+            result = (E) new JPAFIQLQuery();\n         } else if (reference.equals(SRARoute.class)) {\n             result = (E) new JPASRARoute();\n         } else if (reference.equals(AuthModule.class)) {"},{"sha":"12ff08969e4e37c921639ee91eae28971b001503","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAFIQLQuery.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAFIQLQuery.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAFIQLQuery.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAFIQLQuery.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.entity;\n+\n+import javax.persistence.Entity;\n+import javax.persistence.ManyToOne;\n+import javax.persistence.Table;\n+import javax.persistence.UniqueConstraint;\n+import javax.validation.constraints.NotNull;\n+import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n+import org.apache.syncope.core.persistence.api.entity.user.User;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+\n+@Entity\n+@Table(name = JPAFIQLQuery.TABLE, uniqueConstraints =\n+        @UniqueConstraint(columnNames = { \"owner_id\", \"name\" }))\n+public class JPAFIQLQuery extends AbstractGeneratedKeyEntity implements FIQLQuery {\n+\n+    private static final long serialVersionUID = -8800817340585235280L;\n+\n+    public static final String TABLE = \"FIQLQuery\";\n+\n+    @ManyToOne(optional = false)\n+    private JPAUser owner;\n+\n+    @NotNull\n+    private String name;\n+\n+    @NotNull\n+    private String target;\n+\n+    @NotNull\n+    private String fiql;\n+\n+    @Override\n+    public JPAUser getOwner() {\n+        return owner;\n+    }\n+\n+    @Override\n+    public void setOwner(final User owner) {\n+        checkType(owner, JPAUser.class);\n+        this.owner = (JPAUser) owner;\n+    }\n+\n+    @Override\n+    public String getName() {\n+        return name;\n+    }\n+\n+    @Override\n+    public void setName(final String name) {\n+        this.name = name;\n+    }\n+\n+    @Override\n+    public String getTarget() {\n+        return target;\n+    }\n+\n+    @Override\n+    public void setTarget(final String target) {\n+        this.target = target;\n+    }\n+\n+    @Override\n+    public String getFIQL() {\n+        return fiql;\n+    }\n+\n+    @Override\n+    public void setFIQL(final String fiql) {\n+        this.fiql = fiql;\n+    }\n+}"},{"sha":"dc7f3559e2bf7fd593294a23aed11f9e489e7a4a","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/FIQLQueryDataBinder.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FFIQLQueryDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FFIQLQueryDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FFIQLQueryDataBinder.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,31 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.api.data;\n+\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n+\n+public interface FIQLQueryDataBinder {\n+\n+    FIQLQuery create(FIQLQueryTO fiqlQueryTO);\n+\n+    FIQLQuery update(FIQLQuery fiqlQuery, FIQLQueryTO fiqlQueryTO);\n+\n+    FIQLQueryTO getFIQLQueryTO(FIQLQuery fiqlQuery);\n+}"},{"sha":"9ffc0147decd6b765c1e39a7b909da3f10ad346f","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/ProvisioningContext.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2FProvisioningContext.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -97,6 +97,7 @@\n import org.apache.syncope.core.provisioning.api.data.ConnInstanceDataBinder;\n import org.apache.syncope.core.provisioning.api.data.DelegationDataBinder;\n import org.apache.syncope.core.provisioning.api.data.DynRealmDataBinder;\n+import org.apache.syncope.core.provisioning.api.data.FIQLQueryDataBinder;\n import org.apache.syncope.core.provisioning.api.data.GroupDataBinder;\n import org.apache.syncope.core.provisioning.api.data.ImplementationDataBinder;\n import org.apache.syncope.core.provisioning.api.data.NotificationDataBinder;\n@@ -137,6 +138,7 @@\n import org.apache.syncope.core.provisioning.java.data.ConnInstanceDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.DelegationDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.DynRealmDataBinderImpl;\n+import org.apache.syncope.core.provisioning.java.data.FIQLQueryDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.GroupDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.ImplementationDataBinderImpl;\n import org.apache.syncope.core.provisioning.java.data.NotificationDataBinderImpl;\n@@ -945,6 +947,16 @@ public DelegationDataBinder delegationDataBinder(\n         return new DelegationDataBinderImpl(userDAO, roleDAO, entityFactory);\n     }\n \n+    @ConditionalOnMissingBean\n+    @Bean\n+    public FIQLQueryDataBinder fiqlQueryDataBinder(\n+            final SearchCondVisitor searchCondVisitor,\n+            final UserDAO userDAO,\n+            final EntityFactory entityFactory) {\n+\n+        return new FIQLQueryDataBinderImpl(searchCondVisitor, userDAO, entityFactory);\n+    }\n+\n     @ConditionalOnMissingBean\n     @Bean\n     public DynRealmDataBinder dynRealmDataBinder("},{"sha":"a6ae6d457b58a0438e77e597b9db00dccfbee67b","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/FIQLQueryDataBinderImpl.java","status":"added","additions":91,"deletions":0,"changes":91,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FFIQLQueryDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FFIQLQueryDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FFIQLQueryDataBinderImpl.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,91 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.provisioning.java.data;\n+\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.FIQLQuery;\n+import org.apache.syncope.core.persistence.api.search.SearchCondConverter;\n+import org.apache.syncope.core.persistence.api.search.SearchCondVisitor;\n+import org.apache.syncope.core.provisioning.api.data.FIQLQueryDataBinder;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public class FIQLQueryDataBinderImpl implements FIQLQueryDataBinder {\n+\n+    protected static final Logger LOG = LoggerFactory.getLogger(FIQLQueryDataBinder.class);\n+\n+    protected final SearchCondVisitor searchCondVisitor;\n+\n+    protected final UserDAO userDAO;\n+\n+    protected final EntityFactory entityFactory;\n+\n+    public FIQLQueryDataBinderImpl(\n+            final SearchCondVisitor searchCondVisitor,\n+            final UserDAO userDAO,\n+            final EntityFactory entityFactory) {\n+\n+        this.searchCondVisitor = searchCondVisitor;\n+        this.userDAO = userDAO;\n+        this.entityFactory = entityFactory;\n+    }\n+\n+    @Override\n+    public FIQLQuery create(final FIQLQueryTO fiqlQueryTO) {\n+        FIQLQuery fiqlQuery = entityFactory.newEntity(FIQLQuery.class);\n+\n+        fiqlQuery.setOwner(userDAO.findByUsername(AuthContextUtils.getUsername()));\n+\n+        return update(fiqlQuery, fiqlQueryTO);\n+    }\n+\n+    @Override\n+    public FIQLQuery update(final FIQLQuery fiqlQuery, final FIQLQueryTO fiqlQueryTO) {\n+        fiqlQuery.setName(fiqlQueryTO.getName());\n+        fiqlQuery.setTarget(fiqlQueryTO.getTarget());\n+\n+        SearchCond cond = SearchCondConverter.convert(searchCondVisitor, fiqlQueryTO.getFiql());\n+        if (!cond.isValid()) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidSearchParameters);\n+            sce.getElements().add(fiqlQueryTO.getFiql());\n+            throw sce;\n+        }\n+        fiqlQuery.setFIQL(fiqlQueryTO.getFiql());\n+\n+        return fiqlQuery;\n+    }\n+\n+    @Override\n+    public FIQLQueryTO getFIQLQueryTO(final FIQLQuery fiqlQuery) {\n+        FIQLQueryTO fiqlQueryTO = new FIQLQueryTO();\n+\n+        fiqlQueryTO.setKey(fiqlQuery.getKey());\n+        fiqlQueryTO.setName(fiqlQuery.getName());\n+        fiqlQueryTO.setTarget(fiqlQuery.getTarget());\n+        fiqlQueryTO.setFiql(fiqlQuery.getFIQL());\n+\n+        return fiqlQueryTO;\n+    }\n+}"},{"sha":"33e1c92ebe66edcc972dc29805b9ac70dc6ad8a0","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/pushpull/OutboundMatcher.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fpushpull%2FOutboundMatcher.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -101,7 +101,7 @@ protected Optional<PushCorrelationRule> rule(final Provision provision) {\n \n     public String getFIQL(final ConnectorObject connectorObject, final Provision provision) {\n         return rule(provision).\n-                map(rule -> rule.getFiql(connectorObject, provision)).\n+                map(rule -> rule.getFIQL(connectorObject, provision)).\n                 orElseGet(() -> PushCorrelationRule.DEFAULT_FIQL_BUILDER.apply(connectorObject, provision));\n     }\n "},{"sha":"176a17532f49d9cff699227f3dbcddec2bbbafe7","filename":"ext/flowable/client-console/src/main/java/org/apache/syncope/client/console/panels/NewBpmnProcess.java","status":"modified","additions":2,"deletions":4,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNewBpmnProcess.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNewBpmnProcess.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fflowable%2Fclient-console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FNewBpmnProcess.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -38,15 +38,13 @@ public class NewBpmnProcess extends TogglePanel<Serializable> {\n \n     private static final long serialVersionUID = -4886361549305302161L;\n \n-    private final Form<?> form;\n-\n     public NewBpmnProcess(final String id, final WebMarkupContainer container, final PageReference pageRef) {\n         super(id, pageRef);\n \n-        form = new Form<>(\"form\");\n+        Form<?> form = new Form<>(\"form\");\n         addInnerObject(form);\n \n-        final TextField<String> key = new TextField<>(\"key\", new Model<>());\n+        TextField<String> key = new TextField<>(\"key\", new Model<>());\n         key.setRequired(true);\n         form.add(key);\n "},{"sha":"f4b003af94770c27efcbc7332f4df43302f8dc12","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/FIQLQueryITCase.java","status":"added","additions":87,"deletions":0,"changes":87,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FFIQLQueryITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FFIQLQueryITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FFIQLQueryITCase.java?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -0,0 +1,87 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.fit.core;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.junit.jupiter.api.Assertions.assertNotNull;\n+import static org.junit.jupiter.api.Assertions.assertTrue;\n+import static org.junit.jupiter.api.Assertions.fail;\n+\n+import java.util.List;\n+import javax.ws.rs.core.Response;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.to.FIQLQueryTO;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.common.rest.api.RESTHeaders;\n+import org.apache.syncope.common.rest.api.service.FIQLQueryService;\n+import org.apache.syncope.fit.AbstractITCase;\n+import org.junit.jupiter.api.Test;\n+\n+public class FIQLQueryITCase extends AbstractITCase {\n+\n+    @Test\n+    public void crud() {\n+        FIQLQueryService fiqlQueryService =\n+                CLIENT_FACTORY.create(\"bellini\", \"password\").getService(FIQLQueryService.class);\n+\n+        int before = fiqlQueryService.list(AnyTypeKind.USER.name()).size();\n+\n+        FIQLQueryTO query = new FIQLQueryTO();\n+        query.setFiql(\"INVALID\");\n+        query.setName(\"fancy name\");\n+        query.setTarget(AnyTypeKind.USER.name());\n+\n+        try {\n+            fiqlQueryService.create(query);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.InvalidSearchParameters, e.getType());\n+        }\n+\n+        query.setFiql(\"username=~*one*\");\n+        Response response = fiqlQueryService.create(query);\n+        String key = response.getHeaderString(RESTHeaders.RESOURCE_KEY);\n+        assertNotNull(key);\n+\n+        query = fiqlQueryService.read(key);\n+        assertNotNull(query.getKey());\n+        assertEquals(\"username=~*one*\", query.getFiql());\n+        assertEquals(\"fancy name\", query.getName());\n+\n+        List<FIQLQueryTO> queries = fiqlQueryService.list(AnyTypeKind.USER.name());\n+        assertEquals(before + 1, queries.size());\n+        assertTrue(queries.stream().anyMatch(q -> key.equals(q.getKey())));\n+\n+        query.setFiql(\"email==ciao@bao.it\");\n+        query.setName(\"not so fancy\");\n+        fiqlQueryService.update(query);\n+\n+        query = fiqlQueryService.read(key);\n+        assertEquals(\"email==ciao@bao.it\", query.getFiql());\n+        assertEquals(\"not so fancy\", query.getName());\n+\n+        fiqlQueryService.delete(key);\n+\n+        queries = fiqlQueryService.list(AnyTypeKind.USER.name());\n+        assertEquals(before, queries.size());\n+        assertFalse(queries.contains(query));\n+    }\n+}"},{"sha":"39a6681d4aa0c7005edc0aaaa2227b2605a9888d","filename":"pom.xml","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b97e4af9f1eb728051d719ea2bd52c28a897293d/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b97e4af9f1eb728051d719ea2bd52c28a897293d/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=b97e4af9f1eb728051d719ea2bd52c28a897293d","patch":"@@ -426,11 +426,11 @@ under the License.\n \n     <flowable.version>6.7.2</flowable.version>\n \n-    <camel.version>3.17.0</camel.version>\n+    <camel.version>3.18.0</camel.version>\n \n     <slf4j.version>1.7.36</slf4j.version>\n \n-    <elasticsearch.version>8.3.1</elasticsearch.version>\n+    <elasticsearch.version>8.3.2</elasticsearch.version>\n \n     <apacheds.version>2.0.0.AM26</apacheds.version>\n     <apachedirapi.version>2.0.0</apachedirapi.version>"}]}