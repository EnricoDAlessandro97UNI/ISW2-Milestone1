{"sha":"7ad5d19b91e01544f076b980c1b26deae0184a79","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdhZDVkMTliOTFlMDE1NDRmMDc2Yjk4MGMxYjI2ZGVhZTAxODRhNzk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-31T14:48:59Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-07-31T14:49:10Z"},"message":"[SYNCOPE-1180] Allowing more flexible SMTP configuration, fixing mail debug option, improving docs with examples; side effect: fixing properties file lookup for Encryptor","tree":{"sha":"d702019cebdd845b71ad735069c8dce7a70ca486","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/d702019cebdd845b71ad735069c8dce7a70ca486"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7ad5d19b91e01544f076b980c1b26deae0184a79","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7ad5d19b91e01544f076b980c1b26deae0184a79","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7ad5d19b91e01544f076b980c1b26deae0184a79","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7ad5d19b91e01544f076b980c1b26deae0184a79/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"aa85d990087bc16c3496f273629fb187a488bcfe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/aa85d990087bc16c3496f273629fb187a488bcfe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/aa85d990087bc16c3496f273629fb187a488bcfe"}],"stats":{"total":455,"additions":343,"deletions":112},"files":[{"sha":"427e364458bb99e53f297d59ea86bf34dc296264","filename":"client/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleApplication.java","status":"modified","additions":3,"deletions":18,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleApplication.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -22,8 +22,6 @@\n import de.agilecoders.wicket.core.settings.BootstrapSettings;\n import de.agilecoders.wicket.core.settings.IBootstrapSettings;\n import de.agilecoders.wicket.core.settings.SingleThemeProvider;\n-import java.io.File;\n-import java.io.InputStream;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collections;\n@@ -35,7 +33,6 @@\n import java.util.Properties;\n import org.apache.commons.collections4.CollectionUtils;\n import org.apache.commons.collections4.ListUtils;\n-import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.ClassUtils;\n import org.apache.commons.lang3.StringUtils;\n@@ -52,12 +49,12 @@\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n import org.apache.syncope.common.lib.EntityTOUtils;\n+import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.DomainTO;\n import org.apache.syncope.common.lib.types.StandardEntitlement;\n import org.apache.syncope.common.rest.api.service.DomainService;\n import org.apache.wicket.Page;\n-import org.apache.wicket.WicketRuntimeException;\n import org.apache.wicket.authroles.authentication.AbstractAuthenticatedWebSession;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebApplication;\n import org.apache.wicket.authroles.authentication.AuthenticatedWebSession;\n@@ -141,20 +138,8 @@ protected void init() {\n         super.init();\n \n         // read console.properties\n-        Properties props = new Properties();\n-        try (InputStream is = getClass().getResourceAsStream(\"/\" + CONSOLE_PROPERTIES)) {\n-            props.load(is);\n-            File consoleDir = new File(props.getProperty(\"console.directory\"));\n-            if (consoleDir.exists() && consoleDir.canRead() && consoleDir.isDirectory()) {\n-                File consoleDirProps = FileUtils.getFile(consoleDir, CONSOLE_PROPERTIES);\n-                if (consoleDirProps.exists() && consoleDirProps.canRead() && consoleDirProps.isFile()) {\n-                    props.clear();\n-                    props.load(FileUtils.openInputStream(consoleDirProps));\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw new WicketRuntimeException(\"Could not read \" + CONSOLE_PROPERTIES, e);\n-        }\n+        Properties props = PropertyUtils.read(getClass(), CONSOLE_PROPERTIES, \"console.directory\").getLeft();\n+\n         version = props.getProperty(\"version\");\n         Args.notNull(version, \"<version>\");\n         site = props.getProperty(\"site\");"},{"sha":"5e42000b990685504ee952a145bf88ed18f21a3c","filename":"client/enduser/src/main/java/org/apache/syncope/client/enduser/SyncopeEnduserApplication.java","status":"modified","additions":3,"deletions":14,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fenduser%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fenduser%2FSyncopeEnduserApplication.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -42,6 +42,7 @@\n import org.apache.syncope.client.enduser.model.CustomAttributesInfo;\n import org.apache.syncope.client.enduser.resources.CaptchaResource;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.wicket.Page;\n import org.apache.wicket.Session;\n@@ -99,20 +100,8 @@ protected void init() {\n         super.init();\n \n         // read enduser.properties\n-        Properties props = new Properties();\n-        try (InputStream is = getClass().getResourceAsStream(\"/\" + ENDUSER_PROPERTIES)) {\n-            props.load(is);\n-            File enduserDir = new File(props.getProperty(\"enduser.directory\"));\n-            if (enduserDir.exists() && enduserDir.canRead() && enduserDir.isDirectory()) {\n-                File enduserDirProps = FileUtils.getFile(enduserDir, ENDUSER_PROPERTIES);\n-                if (enduserDirProps.exists() && enduserDirProps.canRead() && enduserDirProps.isFile()) {\n-                    props.clear();\n-                    props.load(FileUtils.openInputStream(enduserDirProps));\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw new WicketRuntimeException(\"Could not read \" + ENDUSER_PROPERTIES, e);\n-        }\n+        Properties props = PropertyUtils.read(getClass(), ENDUSER_PROPERTIES, \"enduser.directory\").getLeft();\n+\n         version = props.getProperty(\"version\");\n         Args.notNull(version, \"<version>\");\n         site = props.getProperty(\"site\");"},{"sha":"5087f95c58a16c8060c8b7e0d42ba74bbc93a1d1","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/LogOutputStream.java","status":"added","additions":141,"deletions":0,"changes":141,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FLogOutputStream.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FLogOutputStream.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FLogOutputStream.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -0,0 +1,141 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import java.io.ByteArrayOutputStream;\n+import java.io.IOException;\n+import java.io.OutputStream;\n+import org.slf4j.Logger;\n+\n+/**\n+ * Delegates output stream writing onto an SLF4J logger.\n+ * Inspired by {@code}org.apache.commons.exec.LogOutputStream{@code}\n+ */\n+public class LogOutputStream extends OutputStream {\n+\n+    /** Initial buffer size. */\n+    private static final int INTIAL_SIZE = 132;\n+\n+    /** Carriage return. */\n+    private static final int CR = 0x0d;\n+\n+    /** Linefeed. */\n+    private static final int LF = 0x0a;\n+\n+    /** The internal buffer. */\n+    private final ByteArrayOutputStream buffer = new ByteArrayOutputStream(INTIAL_SIZE);\n+\n+    /**\n+     * The delegate logger.\n+     */\n+    private final Logger logger;\n+\n+    private boolean skip = false;\n+\n+    public LogOutputStream(final Logger logger) {\n+        this.logger = logger;\n+    }\n+\n+    /**\n+     * Write the data to the buffer and flush the buffer, if a line separator is\n+     * detected.\n+     *\n+     * @param cc data to log (byte).\n+     * @see java.io.OutputStream#write(int)\n+     */\n+    @Override\n+    public void write(final int cc) {\n+        final byte c = (byte) cc;\n+        if (c == '\\n' || c == '\\r') {\n+            if (!skip) {\n+                processBuffer();\n+            }\n+        } else {\n+            buffer.write(cc);\n+        }\n+        skip = c == '\\r';\n+    }\n+\n+    /**\n+     * Flush this log stream.\n+     *\n+     * @see java.io.OutputStream#flush()\n+     */\n+    @Override\n+    public void flush() {\n+        if (buffer.size() > 0) {\n+            processBuffer();\n+        }\n+    }\n+\n+    /**\n+     * Writes all remaining data from the buffer.\n+     *\n+     * @throws java.io.IOException\n+     * @see java.io.OutputStream#close()\n+     */\n+    @Override\n+    public void close() throws IOException {\n+        if (buffer.size() > 0) {\n+            processBuffer();\n+        }\n+        super.close();\n+    }\n+\n+    /**\n+     * Write a block of characters to the output stream\n+     *\n+     * @param b the array containing the data\n+     * @param off the offset into the array where data starts\n+     * @param len the length of block\n+     * @see java.io.OutputStream#write(byte[], int, int)\n+     */\n+    @Override\n+    public void write(final byte[] b, final int off, final int len) {\n+        // find the line breaks and pass other chars through in blocks\n+        int offset = off;\n+        int blockStartOffset = offset;\n+        int remaining = len;\n+        while (remaining > 0) {\n+            while (remaining > 0 && b[offset] != LF && b[offset] != CR) {\n+                offset++;\n+                remaining--;\n+            }\n+            // either end of buffer or a line separator char\n+            final int blockLength = offset - blockStartOffset;\n+            if (blockLength > 0) {\n+                buffer.write(b, blockStartOffset, blockLength);\n+            }\n+            while (remaining > 0 && (b[offset] == LF || b[offset] == CR)) {\n+                write(b[offset]);\n+                offset++;\n+                remaining--;\n+            }\n+            blockStartOffset = offset;\n+        }\n+    }\n+\n+    /**\n+     * Converts the buffer to a string and sends it to internal logger.\n+     */\n+    private void processBuffer() {\n+        logger.debug(buffer.toString());\n+        buffer.reset();\n+    }\n+}"},{"sha":"1dd90662f1d1fc52ba79bd2d49206bbffaa57244","filename":"common/lib/src/main/java/org/apache/syncope/common/lib/PropertyUtils.java","status":"added","additions":64,"deletions":0,"changes":64,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FPropertyUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FPropertyUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FPropertyUtils.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -0,0 +1,64 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.common.lib;\n+\n+import java.io.File;\n+import java.io.FileInputStream;\n+import java.io.InputStream;\n+import java.util.Properties;\n+import org.apache.commons.lang3.tuple.Pair;\n+\n+/**\n+ * Utility class for manipulating properties files.\n+ */\n+public final class PropertyUtils {\n+\n+    public static Pair<Properties, String> read(\n+            final Class<?> clazz, final String propertiesFileName, final String confDirProp) {\n+\n+        Properties props = new Properties();\n+        String confDirName = null;\n+\n+        try (InputStream is = clazz.getResourceAsStream(\"/\" + propertiesFileName)) {\n+            props.load(is);\n+\n+            confDirName = props.getProperty(confDirProp);\n+            if (confDirName != null) {\n+                File confDir = new File(confDirName);\n+                if (confDir.exists() && confDir.canRead() && confDir.isDirectory()) {\n+                    File confDirProps = new File(confDir, propertiesFileName);\n+                    if (confDirProps.exists() && confDirProps.canRead() && confDirProps.isFile()) {\n+                        props.clear();\n+                        props.load(new FileInputStream(confDirProps));\n+                    }\n+                }\n+            }\n+        } catch (Exception e) {\n+            throw new RuntimeException(\"Could not read \" + propertiesFileName, e);\n+        }\n+\n+        return Pair.of(props, confDirName);\n+    }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private PropertyUtils() {\n+    }\n+}"},{"sha":"c019639b8223bd4b44483b6d58acdf2a9403369e","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/job/notification/NotificationJobDelegate.java","status":"modified","additions":36,"deletions":14,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJobDelegate.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJobDelegate.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fjob%2Fnotification%2FNotificationJobDelegate.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -18,10 +18,16 @@\n  */\n package org.apache.syncope.core.provisioning.java.job.notification;\n \n+import java.io.PrintStream;\n import java.util.Date;\n+import java.util.Enumeration;\n import java.util.Properties;\n+import javax.mail.Session;\n import javax.mail.internet.MimeMessage;\n+import org.apache.commons.lang3.BooleanUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.LogOutputStream;\n+import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.common.lib.types.AuditElements;\n import org.apache.syncope.common.lib.types.TaskType;\n import org.apache.syncope.common.lib.types.TraceLevel;\n@@ -32,9 +38,11 @@\n import org.apache.syncope.core.persistence.api.entity.task.TaskExec;\n import org.apache.syncope.core.provisioning.api.AuditManager;\n import org.apache.syncope.core.provisioning.api.notification.NotificationManager;\n+import org.apache.syncope.core.spring.security.Encryptor;\n import org.quartz.JobExecutionException;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.InitializingBean;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.mail.javamail.JavaMailSender;\n import org.springframework.mail.javamail.JavaMailSenderImpl;\n@@ -43,7 +51,7 @@\n import org.springframework.transaction.annotation.Transactional;\n \n @Component\n-public class NotificationJobDelegate {\n+public class NotificationJobDelegate implements InitializingBean {\n \n     private static final Logger LOG = LoggerFactory.getLogger(NotificationJobDelegate.class);\n \n@@ -62,24 +70,38 @@ public class NotificationJobDelegate {\n     @Autowired\n     private NotificationManager notificationManager;\n \n-    private long maxRetries;\n+    @Override\n+    public void afterPropertiesSet() throws Exception {\n+        if (mailSender instanceof JavaMailSenderImpl) {\n+            JavaMailSenderImpl javaMailSender = (JavaMailSenderImpl) mailSender;\n \n-    private void init() {\n-        maxRetries = notificationManager.getMaxRetries();\n+            Properties javaMailProperties = javaMailSender.getJavaMailProperties();\n \n-        if (mailSender instanceof JavaMailSenderImpl\n-                && StringUtils.isNotBlank(((JavaMailSenderImpl) mailSender).getUsername())) {\n+            Properties props = PropertyUtils.read(Encryptor.class, \"mail.properties\", \"conf.directory\").getLeft();\n+            for (Enumeration<?> e = props.propertyNames(); e.hasMoreElements();) {\n+                String prop = (String) e.nextElement();\n+                if (prop.startsWith(\"mail.smtp.\")) {\n+                    javaMailProperties.setProperty(prop, props.getProperty(prop));\n+                }\n+            }\n+\n+            if (StringUtils.isNotBlank(javaMailSender.getUsername())) {\n+                javaMailProperties.setProperty(\"mail.smtp.auth\", \"true\");\n+            }\n \n-            Properties javaMailProperties = ((JavaMailSenderImpl) mailSender).getJavaMailProperties();\n-            javaMailProperties.setProperty(\"mail.smtp.auth\", \"true\");\n-            ((JavaMailSenderImpl) mailSender).setJavaMailProperties(javaMailProperties);\n+            javaMailSender.setJavaMailProperties(javaMailProperties);\n+\n+            String mailDebug = props.getProperty(\"mail.debug\", \"false\");\n+            if (BooleanUtils.toBoolean(mailDebug)) {\n+                Session session = javaMailSender.getSession();\n+                session.setDebug(true);\n+                session.setDebugOut(new PrintStream(new LogOutputStream(LOG)));\n+            }\n         }\n     }\n \n     @Transactional\n     public TaskExec executeSingle(final NotificationTask task) {\n-        init();\n-\n         TaskExec execution = entityFactory.newEntity(TaskExec.class);\n         execution.setTask(task);\n         execution.setStart(new Date());\n@@ -216,16 +238,16 @@ private boolean hasToBeRegistered(final TaskExec execution) {\n     }\n \n     private void handleRetries(final TaskExec execution) {\n-        if (maxRetries <= 0) {\n+        if (notificationManager.getMaxRetries() <= 0) {\n             return;\n         }\n \n         long failedExecutionsCount = notificationManager.countExecutionsWithStatus(\n                 execution.getTask().getKey(), NotificationJob.Status.NOT_SENT.name());\n \n-        if (failedExecutionsCount <= maxRetries) {\n+        if (failedExecutionsCount <= notificationManager.getMaxRetries()) {\n             LOG.debug(\"Execution of notification task {} will be retried [{}/{}]\",\n-                    execution.getTask(), failedExecutionsCount, maxRetries);\n+                    execution.getTask(), failedExecutionsCount, notificationManager.getMaxRetries());\n             notificationManager.setTaskExecuted(execution.getTask().getKey(), false);\n \n             auditManager.audit("},{"sha":"e0cb1b0db0c23b82f1ed69d21fec754b4a2ebe3a","filename":"core/provisioning-java/src/main/resources/mail.properties","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fmail.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fmail.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2Fmail.properties?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -14,11 +14,17 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+conf.directory=${conf.directory}\n+\n smtpHost=none.syncope.apache.org\n smtpPort=25\n smtpUser=\n smtpPassword=\n smtpProtocol=smtp\n smtpEncoding=UTF-8\n-smtpConnectionTimeout=3000\n-mailDebug=false\n+mail.debug=false\n+\n+# Add more properties starting with mail.smtp.* from\n+# https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html#properties\n+mail.smtp.connectiontimeout=3000\n+mail.smtp.starttls.enable=false"},{"sha":"023d23416bea20f019f15877c836e470434023e4","filename":"core/provisioning-java/src/main/resources/provisioningContext.xml","status":"modified","additions":0,"deletions":7,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fresources%2FprovisioningContext.xml?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -104,13 +104,6 @@ under the License.\n     <property name=\"username\" value=\"${smtpUser}\"/>\n     <property name=\"password\" value=\"${smtpPassword}\"/>\n     <property name=\"protocol\" value=\"${smtpProtocol}\"/>\n-\n-    <property name=\"javaMailProperties\">\n-      <props>\n-        <prop key=\"mail.smtp.connectiontimeout\">${smtpConnectionTimeout}</prop>\n-        <prop key=\"mail.debug\">${mailDebug}</prop>\n-      </props>\n-    </property>\n   </bean>\n \n   <bean class=\"org.apache.syncope.core.provisioning.java.propagation.PropagationManagerImpl\"/>"},{"sha":"91cf40a365755e78cc4a19cbbb01d1d210dee4c2","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/Encryptor.java","status":"modified","additions":4,"deletions":10,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FEncryptor.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -18,7 +18,6 @@\n  */\n package org.apache.syncope.core.spring.security;\n \n-import java.io.InputStream;\n import java.io.UnsupportedEncodingException;\n import java.nio.charset.StandardCharsets;\n import java.security.InvalidKeyException;\n@@ -31,9 +30,9 @@\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n import javax.crypto.spec.SecretKeySpec;\n-import org.apache.commons.io.IOUtils;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.common.lib.types.CipherAlgorithm;\n import org.jasypt.commons.CommonUtils;\n import org.jasypt.digest.StandardStringDigester;\n@@ -88,11 +87,8 @@ public final class Encryptor {\n     private static Boolean ULSSC;\n \n     static {\n-        InputStream propStream = null;\n         try {\n-            propStream = Encryptor.class.getResourceAsStream(\"/security.properties\");\n-            Properties props = new Properties();\n-            props.load(propStream);\n+            Properties props = PropertyUtils.read(Encryptor.class, \"security.properties\", \"conf.directory\").getLeft();\n \n             SECRET_KEY = props.getProperty(\"secretKey\");\n             SALT_ITERATIONS = Integer.valueOf(props.getProperty(\"digester.saltIterations\"));\n@@ -102,8 +98,6 @@ public final class Encryptor {\n             ULSSC = Boolean.valueOf(props.getProperty(\"digester.useLenientSaltSizeCheck\"));\n         } catch (Exception e) {\n             LOG.error(\"Could not read security parameters\", e);\n-        } finally {\n-            IOUtils.closeQuietly(propStream);\n         }\n \n         if (SECRET_KEY == null) {\n@@ -160,8 +154,8 @@ private Encryptor(final String secretKey) {\n             actualKeyPadding.append(randomChars);\n             actualKey = actualKeyPadding.toString();\n             LOG.warn(\"The secret key is too short (< 16), adding some random characters. \"\n-                     + \"Passwords encrypted with AES and this key will not be recoverable \"\n-                     + \"as a result if the container is restarted.\");\n+                    + \"Passwords encrypted with AES and this key will not be recoverable \"\n+                    + \"as a result if the container is restarted.\");\n         }\n \n         try {"},{"sha":"870d853debbf4c26800829958c4601a3614149e4","filename":"core/spring/src/main/resources/security.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fresources%2Fsecurity.properties?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -14,6 +14,8 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+conf.directory=${conf.directory}\n+\n adminUser=${adminUser}\n adminPassword=${adminPassword}\n adminPasswordAlgorithm=SSHA256"},{"sha":"870f4b6806eb06a9e82d007b6aa6854c5a07b26a","filename":"ext/saml2sp/agent/src/main/java/org/apache/syncope/ext/saml2lsp/agent/SAML2SPAgentSetup.java","status":"modified","additions":2,"deletions":17,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Fagent%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Fsaml2lsp%2Fagent%2FSAML2SPAgentSetup.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -18,16 +18,14 @@\n  */\n package org.apache.syncope.ext.saml2lsp.agent;\n \n-import java.io.File;\n-import java.io.InputStream;\n import java.util.Properties;\n import javax.servlet.ServletContextEvent;\n import javax.servlet.ServletContextListener;\n import javax.servlet.annotation.WebListener;\n-import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.BooleanUtils;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n+import org.apache.syncope.common.lib.PropertyUtils;\n \n @WebListener\n public class SAML2SPAgentSetup implements ServletContextListener {\n@@ -44,20 +42,7 @@ private static <T> T assertNotNull(final T argument, final String name) {\n     @Override\n     public void contextInitialized(final ServletContextEvent sce) {\n         // read saml2spagent.properties\n-        Properties props = new Properties();\n-        try (InputStream is = getClass().getResourceAsStream(\"/\" + SAML2SP_AGENT_PROPERTIES)) {\n-            props.load(is);\n-            File confDir = new File(props.getProperty(\"conf.directory\"));\n-            if (confDir.exists() && confDir.canRead() && confDir.isDirectory()) {\n-                File consoleDirProps = FileUtils.getFile(confDir, SAML2SP_AGENT_PROPERTIES);\n-                if (consoleDirProps.exists() && consoleDirProps.canRead() && consoleDirProps.isFile()) {\n-                    props.clear();\n-                    props.load(FileUtils.openInputStream(consoleDirProps));\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Could not read \" + SAML2SP_AGENT_PROPERTIES, e);\n-        }\n+        Properties props = PropertyUtils.read(getClass(), SAML2SP_AGENT_PROPERTIES, \"conf.directory\").getLeft();\n \n         String anonymousUser = props.getProperty(\"anonymousUser\");\n         assertNotNull(anonymousUser, \"<anonymousUser>\");"},{"sha":"a4230b2c5ff0646abc1b2c7a19d1c3a8e1d73ba9","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/init/SAML2SPLoader.java","status":"modified","additions":5,"deletions":21,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Finit%2FSAML2SPLoader.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -18,15 +18,15 @@\n  */\n package org.apache.syncope.core.logic.init;\n \n-import java.io.File;\n import java.io.InputStream;\n import java.security.KeyStore;\n import java.util.HashMap;\n import java.util.Map;\n import java.util.Properties;\n import net.shibboleth.utilities.java.support.resolver.CriteriaSet;\n-import org.apache.commons.io.FileUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.commons.lang3.tuple.Pair;\n+import org.apache.syncope.common.lib.PropertyUtils;\n import org.apache.syncope.core.persistence.api.SyncopeLoader;\n import org.apache.syncope.core.provisioning.api.EntitlementsHolder;\n import org.apache.syncope.common.lib.types.SAML2SPEntitlement;\n@@ -80,25 +80,9 @@ public Integer getPriority() {\n     public void load() {\n         EntitlementsHolder.getInstance().init(SAML2SPEntitlement.values());\n \n-        String confDirectory = null;\n-\n-        Properties props = new Properties();\n-        try (InputStream is = getClass().getResourceAsStream(\"/\" + SAML2SP_LOGIC_PROPERTIES)) {\n-            props.load(is);\n-            confDirectory = props.getProperty(\"conf.directory\");\n-\n-            File confDir = new File(confDirectory);\n-            if (confDir.exists() && confDir.canRead() && confDir.isDirectory()) {\n-                File confDirProps = FileUtils.getFile(confDir, SAML2SP_LOGIC_PROPERTIES);\n-                if (confDirProps.exists() && confDirProps.canRead() && confDirProps.isFile()) {\n-                    props.clear();\n-                    props.load(FileUtils.openInputStream(confDirProps));\n-                    confDirectory = props.getProperty(\"conf.directory\");\n-                }\n-            }\n-        } catch (Exception e) {\n-            throw new RuntimeException(\"Could not read \" + SAML2SP_LOGIC_PROPERTIES, e);\n-        }\n+        Pair<Properties, String> init = PropertyUtils.read(getClass(), SAML2SP_LOGIC_PROPERTIES, \"conf.directory\");\n+        Properties props = init.getLeft();\n+        String confDirectory = init.getRight();\n \n         assertNotNull(confDirectory, \"<conf.directory>\");\n "},{"sha":"5dde70c0273e6d03a418602a19e6c23b2a1e5d37","filename":"fit/core-reference/src/main/resources/log4j2.xml","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Flog4j2.xml?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -189,6 +189,16 @@ under the License.\n       <appender-ref ref=\"main\"/>\n     </asyncLogger>\n     \n+    <!-- To enable when setting 'mail.debug=true' in mail.properties -->\n+    <!--<asyncLogger name=\"org.apache.syncope.core.provisioning.java.job.notification\" additivity=\"false\" level=\"DEBUG\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>\n+    <asyncLogger name=\"javax.mail\" additivity=\"false\" level=\"DEBUG\">\n+      <appender-ref ref=\"mainFile\"/>\n+      <appender-ref ref=\"main\"/>\n+    </asyncLogger>-->\n+    \n     <root level=\"INFO\">\n       <appender-ref ref=\"mainFile\"/>\n       <appender-ref ref=\"main\"/>"},{"sha":"f8e1c05c5878069f9fc611e778c90ba07be5e234","filename":"fit/core-reference/src/main/resources/mail.properties","status":"modified","additions":8,"deletions":2,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Fmain%2Fresources%2Fmail.properties?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -14,11 +14,17 @@\n # KIND, either express or implied.  See the License for the\n # specific language governing permissions and limitations\n # under the License.\n+conf.directory=${conf.directory}\n+\n smtpHost=localhost\n smtpPort=2525\n smtpUser=\n smtpPassword=\n smtpProtocol=smtp\n smtpEncoding=UTF-8\n-smtpConnectionTimeout=3000\n-mailDebug=false\n+mail.debug=false\n+\n+# Add more properties starting with mail.smtp.* from\n+# https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html#properties\n+mail.smtp.connectiontimeout=3000\n+mail.smtp.starttls.enable=false"},{"sha":"a4ca1f44c82a9dfdd2780f51b87dbe1681900796","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/NotificationTaskITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FNotificationTaskITCase.java?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -103,15 +103,15 @@ public void notifyByMailWithRetry() throws Exception {\n             NotificationTaskTO taskTO = findNotificationTask(created.getLeft(), 50);\n             assertNotNull(taskTO);\n             assertNotNull(taskTO.getNotification());\n-            assertTrue(taskTO.getExecutions().isEmpty());\n+            int preExecs = taskTO.getExecutions().size();\n \n             // 4. verify notification could not be delivered\n             execTask(taskService, taskTO.getKey(), NotificationJob.Status.NOT_SENT.name(), 5, false);\n \n             taskTO = taskService.read(taskTO.getKey(), true);\n             assertNotNull(taskTO);\n             assertFalse(taskTO.isExecuted());\n-            assertFalse(taskTO.getExecutions().isEmpty());\n+            assertTrue(preExecs <= taskTO.getExecutions().size());\n             for (ExecTO exec : taskTO.getExecutions()) {\n                 assertEquals(NotificationJob.Status.NOT_SENT.name(), exec.getStatus());\n             }"},{"sha":"9787dc351b0caa1a535a98fefc24a24a6bae5e02","filename":"src/main/asciidoc/reference-guide/workingwithapachesyncope/systemadministration/emailconfiguration.adoc","status":"modified","additions":55,"deletions":5,"changes":60,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7ad5d19b91e01544f076b980c1b26deae0184a79/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Femailconfiguration.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7ad5d19b91e01544f076b980c1b26deae0184a79/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Femailconfiguration.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fworkingwithapachesyncope%2Fsystemadministration%2Femailconfiguration.adoc?ref=7ad5d19b91e01544f076b980c1b26deae0184a79","patch":"@@ -18,18 +18,68 @@\n //\n ==== E-mail Configuration\n \n-The `mail.properties` holds the configuration options to enable the effective delivery of <<notifications,notification>>\n-e-mails:\n+The `mail.properties` file holds the configuration options to enable the effective delivery of\n+<<notifications,notification>> e-mails:\n \n * `smtpHost` - the mail server host, typically an SMTP host;\n * `smtpPort` - the mail server port;\n * `smtpUser` - (optional) the username for the account at the mail host;\n * `smtpPassword` - (optional) the password for the account at the mail host;\n * `smtpProtocol` - the mail protocol;\n * `smtpEncoding` - the default encoding to use for MIME messages;\n-* `smtpConnectionTimeout` - the connection timeout value in milliseconds, to the mail host;\n-* `mailDebug` - when `true`, enable the debugging of email, including the handshake, authentication, delivery and\n-disconnection.\n+* `mail.smtp.starttls.enable` - when `true`, enable the use of the `STARTTLS` command to switch the connection to a\n+TLS-protected connection before issuing any login commands;\n+* `mail.smtp.connectiontimeout` - the connection timeout value in milliseconds, to the mail host;\n+* `mail.debug` - when `true`, enable the debugging of email processing including the handshake, authentication, delivery\n+ and disconnection; in order for this setting to be effective, it is also required to add the following elements to the\n+`log4j2.xml` configuration file:\n+[source,xml]\n+<asyncLogger name=\"org.apache.syncope.core.provisioning.java.job.notification\"\n+             additivity=\"false\" level=\"DEBUG\">\n+  <appender-ref ref=\"mainFile\"/>\n+  <appender-ref ref=\"main\"/>\n+</asyncLogger>\n+<asyncLogger name=\"javax.mail\" additivity=\"false\" level=\"DEBUG\">\n+  <appender-ref ref=\"mainFile\"/>\n+  <appender-ref ref=\"main\"/>\n+</asyncLogger>\n+\n+All the https://javaee.github.io/javamail/docs/api/com/sun/mail/smtp/package-summary.html#properties[JavaMail(TM) properties^]\n+are available for usage.\n+\n+.Basic configuration, no authentication\n+====\n+....\n+conf.directory=${conf.directory}\n+\n+smtpHost=your.local.smtp.server\n+smtpPort=25\n+smtpUser=\n+smtpPassword=\n+smtpProtocol=smtp\n+smtpEncoding=UTF-8\n+mail.debug=false\n+mail.smtp.connectiontimeout=3000\n+mail.smtp.starttls.enable=false\n+....\n+====\n+\n+.STARTTLS configuration, with authentication\n+====\n+....\n+conf.directory=${conf.directory}\n+\n+smtpHost=smtp.gmail.com\n+smtpPort=587\n+smtpUser=your_username@gmail.com\n+smtpPassword=your_password\n+smtpProtocol=smtp\n+smtpEncoding=UTF-8\n+mail.debug=false\n+mail.smtp.connectiontimeout=3000\n+mail.smtp.starttls.enable=true\n+....\n+====\n \n [NOTE]\n In order to make the changes to `mail.properties` effective, the Java EE container needs to be restarted."}]}