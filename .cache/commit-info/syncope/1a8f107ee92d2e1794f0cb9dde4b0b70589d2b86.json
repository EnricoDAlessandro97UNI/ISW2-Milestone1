{"sha":"1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjFhOGYxMDdlZTkyZDJlMTc5NGYwY2I5ZGRlNGIwYjcwNTg5ZDJiODY=","commit":{"author":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-28T16:08:27Z"},"committer":{"name":"Jan Bernhardt","email":"jbernhardt@apache.org","date":"2013-01-28T16:08:27Z"},"message":"[SYNCOPE-231]\n* Adding (fixing) JAX-B Annotations\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1439469 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"ab6679a9836b6545f88ab688e2b0ea34d342211d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/ab6679a9836b6545f88ab688e2b0ea34d342211d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/comments","author":null,"committer":null,"parents":[{"sha":"dc2a9e22ea07f92f32a10b2b3413fc845b28af21","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/dc2a9e22ea07f92f32a10b2b3413fc845b28af21","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/dc2a9e22ea07f92f32a10b2b3413fc845b28af21"}],"stats":{"total":109,"additions":57,"deletions":52},"files":[{"sha":"8bea668fb25c3f444b17427fa1a4fbf37ca17795","filename":"common/src/main/java/org/apache/syncope/common/report/StaticReportletConf.java","status":"modified","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FStaticReportletConf.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -22,11 +22,15 @@\n import java.util.Date;\r\n import java.util.List;\r\n \r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.types.TraceLevel;\r\n \r\n @XmlRootElement\r\n+@XmlType\r\n public class StaticReportletConf extends AbstractReportletConf {\r\n \r\n     private static final long serialVersionUID = -4814950086361753689L;\r\n@@ -72,6 +76,8 @@ public void setDoubleField(Double doubleField) {\n         this.doubleField = doubleField;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"listField\")\r\n+    @XmlElement(name = \"field\")\r\n     public List<String> getListField() {\r\n         return listField;\r\n     }\r"},{"sha":"8aa142143cef5bd86a4c14155be2de70bce4b5d9","filename":"common/src/main/java/org/apache/syncope/common/report/UserReportletConf.java","status":"modified","additions":16,"deletions":1,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Freport%2FUserReportletConf.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -21,15 +21,22 @@\n import java.util.ArrayList;\r\n import java.util.List;\r\n \r\n+import javax.xml.bind.annotation.XmlElement;\r\n+import javax.xml.bind.annotation.XmlElementWrapper;\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n import javax.xml.bind.annotation.XmlRootElement;\r\n+import javax.xml.bind.annotation.XmlType;\r\n \r\n import org.apache.syncope.common.annotation.FormAttributeField;\r\n import org.apache.syncope.common.search.NodeCond;\r\n import org.apache.syncope.common.types.IntMappingType;\r\n \r\n-@XmlRootElement\r\n+@XmlRootElement(name = \"UserReportletConfiguration\")\r\n+@XmlType\r\n public class UserReportletConf extends AbstractReportletConf {\r\n \r\n+    @XmlEnum\r\n+    @XmlType(name = \"UserReportletConfigurationFeature\")\r\n     public enum Feature {\r\n \r\n         id,\r\n@@ -74,6 +81,8 @@ public UserReportletConf(final String name) {\n         features = new ArrayList<Feature>();\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"normalAttributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n     public List<String> getAttrs() {\r\n         return attrs;\r\n     }\r\n@@ -82,6 +91,8 @@ public void setAttrs(List<String> attrs) {\n         this.attrs = attrs;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"derivedAttributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n     public List<String> getDerAttrs() {\r\n         return derAttrs;\r\n     }\r\n@@ -90,6 +101,8 @@ public void setDerAttrs(List<String> derAttrs) {\n         this.derAttrs = derAttrs;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"features\")\r\n+    @XmlElement(name = \"feature\")\r\n     public List<Feature> getFeatures() {\r\n         return features;\r\n     }\r\n@@ -106,6 +119,8 @@ public void setMatchingCond(NodeCond matchingCond) {\n         this.matchingCond = matchingCond;\r\n     }\r\n \r\n+    @XmlElementWrapper(name = \"virtualAttributes\")\r\n+    @XmlElement(name = \"attribute\")\r\n     public List<String> getVirAttrs() {\r\n         return virAttrs;\r\n     }\r"},{"sha":"6abb9b5bf0de2455c234a361341d17cb03f10707","filename":"console/src/main/java/org/apache/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":3,"deletions":20,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -37,31 +37,12 @@ public class PolicyRestClient extends BaseRestClient {\n \n     private static final long serialVersionUID = -1392090291817187902L;\n \n-    @SuppressWarnings(\"unchecked\")\n     public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n-\n         T policy = null;\n-\n         try {\n             policy = getService(PolicyService.class).readGlobal(type);\n         } catch (Exception e) {\n             LOG.warn(\"No global \" + type + \" policy found\", e);\n-            switch (type) {\n-            case ACCOUNT:\n-            case GLOBAL_ACCOUNT:\n-                policy = (T) new AccountPolicyTO();\n-                break;\n-            case PASSWORD:\n-            case GLOBAL_PASSWORD:\n-                policy = (T) new PasswordPolicyTO();\n-                break;\n-            case SYNC:\n-            case GLOBAL_SYNC:\n-                policy = (T) new SyncPolicyTO();\n-                break;\n-            default:\n-                LOG.warn(\"Invalid policy type\");\n-            }\n         }\n         return policy;\n     }\n@@ -81,7 +62,9 @@ public <T extends PolicyTO> List<T> getPolicies(final PolicyType type, final boo\n         if (includeGlobal) {\n             try {\n                 PolicyTO globalPolicy = getGlobalPolicy(type);\n-                res.add(0, (T) globalPolicy);\n+                if (globalPolicy != null) {\n+                    res.add(0, (T) globalPolicy);\n+                }\n             } catch (Exception ignore) {\n                 LOG.warn(\"No global policy found\", ignore);\n             }"},{"sha":"4ea90e5a7b84673db3042e669553b7308074f850","filename":"core/src/main/java/org/apache/syncope/core/services/ReportServiceImpl.java","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fservices%2FReportServiceImpl.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -24,13 +24,11 @@\n import java.util.List;\n import java.util.Set;\n \n-import javax.ws.rs.DefaultValue;\n-import javax.ws.rs.PathParam;\n-import javax.ws.rs.QueryParam;\n import javax.ws.rs.core.Response;\n import javax.ws.rs.core.StreamingOutput;\n import javax.ws.rs.core.UriInfo;\n \n+import org.apache.syncope.common.SyncopeConstants;\n import org.apache.syncope.common.services.ReportService;\n import org.apache.syncope.common.to.ReportExecTO;\n import org.apache.syncope.common.to.ReportTO;\n@@ -44,23 +42,24 @@\n \n @Service\n public class ReportServiceImpl implements ReportService, ContextAware {\n+\n     @Autowired\n-    ReportController reportController;\n-    \n+    private ReportController reportController;\n+\n     @Autowired\n     private ReportDAO reportDAO;\n-    \n+\n     private UriInfo uriInfo;\n \n     @Override\n-    public Response create(ReportTO reportTO) {\n+    public Response create(final ReportTO reportTO) {\n         ReportTO createdReportTO = reportController.createInternal(reportTO);\n         URI location = uriInfo.getAbsolutePathBuilder().path(\"\" + createdReportTO.getId()).build();\n-        return Response.created(location).build();\n+        return Response.created(location).header(SyncopeConstants.REST_HEADER_ID, createdReportTO.getId()).build();\n     }\n \n     @Override\n-    public void update(@PathParam(\"reportId\") Long reportId, ReportTO reportTO) {\n+    public void update(final Long reportId, final ReportTO reportTO) {\n         try {\n             reportController.update(reportTO);\n         } catch (NotFoundException e) {\n@@ -79,8 +78,7 @@ public List<ReportTO> list() {\n     }\n \n     @Override\n-    public List<ReportTO> list(@QueryParam(\"page\") int page,\n-            @QueryParam(\"size\") @DefaultValue(\"25\") int size) {\n+    public List<ReportTO> list(final int page, final int size) {\n         return reportController.list(page, size);\n     }\n \n@@ -95,16 +93,16 @@ public Set<String> getReportletConfClasses() {\n     }\n \n     @Override\n-    public ReportTO read(@PathParam(\"reportId\") Long reportId) {\n+    public ReportTO read(final Long reportId) {\n         try {\n             return reportController.read(reportId);\n         } catch (NotFoundException e) {\n-            throw new javax.ws.rs.NotFoundException();\n+            throw new javax.ws.rs.NotFoundException(e);\n         }\n     }\n \n     @Override\n-    public ReportExecTO readExecution(@PathParam(\"executionId\") Long executionId) {\n+    public ReportExecTO readExecution(final Long executionId) {\n         try {\n             return reportController.readExecution(executionId);\n         } catch (NotFoundException e) {\n@@ -113,12 +111,14 @@ public ReportExecTO readExecution(@PathParam(\"executionId\") Long executionId) {\n     }\n \n     @Override\n-    public Response exportExecutionResult(final @PathParam(\"executionId\") Long executionId,\n-            final @QueryParam(\"format\") ReportExecExportFormat fmt) {\n-        final ReportExecExportFormat format = (fmt == null) ? ReportExecExportFormat.XML : fmt;\n+    public Response exportExecutionResult(final Long executionId, final ReportExecExportFormat fmt) {\n+        final ReportExecExportFormat format = (fmt == null)\n+                ? ReportExecExportFormat.XML\n+                : fmt;\n         try {\n             final ReportExec reportExec = reportController.getAndCheckReportExecInternal(executionId);\n             return Response.ok(new StreamingOutput() {\n+                @Override\n                 public void write(final OutputStream os) throws IOException {\n                     reportController.exportExecutionResultInternal(os, reportExec, format);\n                 }\n@@ -129,7 +129,7 @@ public void write(final OutputStream os) throws IOException {\n     }\n \n     @Override\n-    public ReportExecTO execute(@PathParam(\"reportId\") Long reportId) {\n+    public ReportExecTO execute(final Long reportId) {\n         try {\n             return reportController.execute(reportId);\n         } catch (NotFoundException e) {\n@@ -138,7 +138,7 @@ public ReportExecTO execute(@PathParam(\"reportId\") Long reportId) {\n     }\n \n     @Override\n-    public void delete(@PathParam(\"reportId\") Long reportId) {\n+    public void delete(final Long reportId) {\n         try {\n             reportController.delete(reportId);\n         } catch (NotFoundException e) {\n@@ -147,7 +147,7 @@ public void delete(@PathParam(\"reportId\") Long reportId) {\n     }\n \n     @Override\n-    public void deleteExecution(@PathParam(\"executionId\") Long executionId) {\n+    public void deleteExecution(final Long executionId) {\n         try {\n             reportController.deleteExecution(executionId);\n         } catch (NotFoundException e) {\n@@ -156,7 +156,7 @@ public void deleteExecution(@PathParam(\"executionId\") Long executionId) {\n     }\n \n     @Override\n-    public void setUriInfo(UriInfo uriInfo) {\n+    public void setUriInfo(final UriInfo uriInfo) {\n         this.uriInfo = uriInfo;\n     }\n "},{"sha":"c5950ce621242fe1c802e13e07619d525e235ee6","filename":"core/src/test/java/org/apache/syncope/core/rest/AbstractTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FAbstractTest.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -93,7 +93,7 @@ public abstract class AbstractTest {\n     protected static final String ADMIN_PWD = \"password\";\n \n     public static final String CONTENT_TYPE_JSON = \"application/json\";\n-    public static final String CONTENT_TYPE_XML = \"text/xml\";\n+    public static final String CONTENT_TYPE_XML = \"application/xml\";\n     public static final String DEFAULT_CONTENT_TYPE = CONTENT_TYPE_JSON;\n \n     private static final String ENV_KEY_CONTENT_TYPE = \"jaxrsContentType\";"},{"sha":"834dd2671b503a345c1c9c59a0738d549135ebe7","filename":"core/src/test/java/org/apache/syncope/core/rest/ReportTestITCase.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FReportTestITCase.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -46,11 +46,10 @@\n \n @FixMethodOrder(MethodSorters.JVM)\n public class ReportTestITCase extends AbstractTest {\n-    \n-    ReportTO createReport(ReportTO report) {\n+\n+    ReportTO createReport(final ReportTO report) {\n         Response response = reportService.create(report);\n-        Long reportId = (Long) response.getEntity();\n-        return reportService.read(reportId);\n+        return getObject(response, ReportTO.class, reportService);\n     }\n \n     @Test"},{"sha":"ecc25ee44b54f75c9b52d028791edf080c43b05d","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/EntitlementTestITCaseJAXRS.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FEntitlementTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FEntitlementTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FEntitlementTestITCaseJAXRS.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -28,6 +28,6 @@ public class EntitlementTestITCaseJAXRS extends AuthenticationTestITCase {\n     public EntitlementTestITCaseJAXRS() {\r\n        setEnabledCXF(true);\r\n        //JSON is currently not working (fix after CXF migration is complete)\r\n-       setContentType(super.CONTENT_TYPE_XML);\r\n+       setContentType(CONTENT_TYPE_XML);\r\n     }\r\n }\r"},{"sha":"1049efd820ea9f8af39d6c03523f7b786b4b4c1f","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/PolicyTestITCaseJAXRS.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FPolicyTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FPolicyTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FPolicyTestITCaseJAXRS.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -28,6 +28,6 @@ public class PolicyTestITCaseJAXRS extends PolicyTestITCase {\n     public PolicyTestITCaseJAXRS() {\r\n         setEnabledCXF(true);\r\n         // JSON is currently not working (fix after CXF migration is complete)\r\n-        setContentType(super.CONTENT_TYPE_XML);\r\n+        setContentType(CONTENT_TYPE_XML);\r\n     }\r\n }\r"},{"sha":"606d899374a95743031919697bc7519fc0e72eb1","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/ReportTestITCaseJAXRS.java","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FReportTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FReportTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FReportTestITCaseJAXRS.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -24,8 +24,10 @@\n \r\n @FixMethodOrder(MethodSorters.JVM)\r\n public class ReportTestITCaseJAXRS extends ReportTestITCase {\r\n-    \r\n+\r\n     public ReportTestITCaseJAXRS() {\r\n-       setEnabledCXF(true);\r\n+        setEnabledCXF(true);\r\n+        // JSON is currently not working (fix after CXF migration is complete)\r\n+        setContentType(CONTENT_TYPE_XML);\r\n     }\r\n }\r"},{"sha":"8753fef2948778c5173334cc224c9564034a8cb5","filename":"core/src/test/java/org/apache/syncope/core/rest/jaxrs/SchemaTestITCaseJAXRS.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSchemaTestITCaseJAXRS.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSchemaTestITCaseJAXRS.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fjaxrs%2FSchemaTestITCaseJAXRS.java?ref=1a8f107ee92d2e1794f0cb9dde4b0b70589d2b86","patch":"@@ -28,6 +28,6 @@ public class SchemaTestITCaseJAXRS extends SchemaTestITCase {\n     public SchemaTestITCaseJAXRS() {\r\n         setEnabledCXF(true);\r\n         // JSON is currently not working (fix after CXF migration is complete)\r\n-        setContentType(super.CONTENT_TYPE_XML);\r\n+        setContentType(CONTENT_TYPE_XML);\r\n     }\r\n }\r"}]}