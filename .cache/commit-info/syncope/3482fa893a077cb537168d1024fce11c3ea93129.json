{"sha":"3482fa893a077cb537168d1024fce11c3ea93129","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjM0ODJmYTg5M2EwNzdjYjUzNzE2OGQxMDI0ZmNlMTFjM2VhOTMxMjk=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@users.noreply.github.com","date":"2021-05-11T07:35:07Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2021-05-11T09:29:10Z"},"message":"[SYNCOPE-1630] (1) centralize security checks in DAOs (2) improve JPAAnySearchDAO and (3) adjust Console","tree":{"sha":"61c82ab4980ae381760f59db297c1ed3f597759d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/61c82ab4980ae381760f59db297c1ed3f597759d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/3482fa893a077cb537168d1024fce11c3ea93129","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3482fa893a077cb537168d1024fce11c3ea93129","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/3482fa893a077cb537168d1024fce11c3ea93129","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/3482fa893a077cb537168d1024fce11c3ea93129/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"cb34368513af1912152851192fa6e9cb38d00896","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/cb34368513af1912152851192fa6e9cb38d00896","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/cb34368513af1912152851192fa6e9cb38d00896"}],"stats":{"total":2453,"additions":1453,"deletions":1000},"files":[{"sha":"d18fc34ce57444764fe6b97f689688fa0f29c0d6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/SyncopeConsoleSession.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2FSyncopeConsoleSession.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -41,6 +41,7 @@\n import org.apache.commons.lang3.time.FastDateFormat;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.cxf.jaxrs.client.WebClient;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.lib.AnonymousAuthenticationHandler;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.lib.SyncopeClientFactoryBean;\n@@ -311,7 +312,8 @@ public boolean owns(final String entitlements, final String... realms) {\n             if (auth.containsKey(entitlement)) {\n                 boolean owns = false;\n \n-                Set<String> owned = auth.get(entitlement);\n+                Set<String> owned = auth.get(entitlement).stream().\n+                        map(RealmsUtils::getFullPath).collect(Collectors.toSet());\n                 if (requested.isEmpty()) {\n                     return !owned.isEmpty();\n                 } else {"},{"sha":"bfef5acc9d11ea35839731f1134732c7a0a83ea7","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/commons/RealmsUtils.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fcommons%2FRealmsUtils.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -33,6 +33,14 @@ private RealmsUtils() {\n         // private constructor for static utility class\n     }\n \n+    public static String getFullPath(final String fullpath) {\n+        String display = fullpath;\n+        if (display.indexOf('@') != -1) {\n+            display = StringUtils.substringBefore(display, \"@\");\n+        }\n+        return display;\n+    }\n+\n     public static boolean isSearchEnabled() {\n         return isSearchEnabled(SyncopeConsoleSession.get().getAuthRealms());\n     }"},{"sha":"efb5b91e68bdea0035fb4e37ce9007d6e2b97a1e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/AnyPanel.java","status":"modified","additions":8,"deletions":7,"changes":15,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FAnyPanel.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -21,6 +21,7 @@\n import java.util.ArrayList;\n import java.util.List;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.layout.AnyLayout;\n import org.apache.syncope.client.console.layout.AnyLayoutUtils;\n import org.apache.syncope.client.console.panels.search.AbstractSearchPanel;\n@@ -85,13 +86,13 @@ Panel supply(\n     protected static DirectoryPanelSupplier DEFAULT_DIRECTORYPANEL_SUPPLIER =\n             (id, anyTypeTO, realmTO, anyLayout, pageRef) -> {\n \n-                final Panel panel;\n+                Panel panel;\n                 String fiql;\n \n-                final String realm;\n-                final String dynRealm;\n+                String realm;\n+                String dynRealm;\n                 if (StringUtils.startsWith(realmTO.getFullPath(), SyncopeConstants.ROOT_REALM)) {\n-                    realm = realmTO.getFullPath();\n+                    realm = RealmsUtils.getFullPath(realmTO.getFullPath());\n                     dynRealm = null;\n                 } else {\n                     realm = SyncopeConstants.ROOT_REALM;\n@@ -107,7 +108,7 @@ Panel supply(\n                                         inDynRealms(dynRealm).query();\n \n                         UserTO userTO = new UserTO();\n-                        userTO.setRealm(realmTO.getFullPath());\n+                        userTO.setRealm(RealmsUtils.getFullPath(realmTO.getFullPath()));\n                         panel = new UserDirectoryPanel.Builder(\n                                 AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n                                 anyTypeTO.getKey(),\n@@ -127,7 +128,7 @@ Panel supply(\n                                 : SyncopeClient.getGroupSearchConditionBuilder().inDynRealms(dynRealm).query();\n \n                         GroupTO groupTO = new GroupTO();\n-                        groupTO.setRealm(realmTO.getFullPath());\n+                        groupTO.setRealm(RealmsUtils.getFullPath(realmTO.getFullPath()));\n                         panel = new GroupDirectoryPanel.Builder(\n                                 AnyTypeClassRestClient.list(anyTypeTO.getClasses()),\n                                 anyTypeTO.getKey(),\n@@ -147,7 +148,7 @@ Panel supply(\n                                         inDynRealms(dynRealm).query();\n \n                         AnyObjectTO anyObjectTO = new AnyObjectTO();\n-                        anyObjectTO.setRealm(realmTO.getFullPath());\n+                        anyObjectTO.setRealm(RealmsUtils.getFullPath(realmTO.getFullPath()));\n                         anyObjectTO.setType(anyTypeTO.getKey());\n                         panel = new AnyObjectDirectoryPanel.Builder(\n                                 AnyTypeClassRestClient.list(anyTypeTO.getClasses()),"},{"sha":"51e7a4f3f74b000be1fea3bfa0c2f2e44e93ba2e","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/panels/RealmChoicePanel.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fpanels%2FRealmChoicePanel.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -142,10 +142,9 @@ protected List<DynRealmTO> load() {\n                         return left.getKey().compareTo(right.getKey());\n                     }\n                 });\n-                return dynRealms.stream().filter(dynRealm\n-                        -> availableRealms.stream().anyMatch(\n-                                availableRealm -> SyncopeConstants.ROOT_REALM.equals(availableRealm)\n-                                || dynRealm.getKey().equals(availableRealm))).collect(Collectors.toList());\n+                return dynRealms.stream().filter(dynRealm -> availableRealms.stream().\n+                        anyMatch(availableRealm -> SyncopeConstants.ROOT_REALM.equals(availableRealm)\n+                        || dynRealm.getKey().equals(availableRealm))).collect(Collectors.toList());\n             }\n         };\n \n@@ -174,7 +173,7 @@ protected List<DynRealmTO> load() {\n     }\n \n     public final void reloadRealmTree() {\n-        final Label realmLabel = new Label(\"realmLabel\", new Model<>());\n+        Label realmLabel = new Label(\"realmLabel\", new Model<>());\n         realmLabel.setOutputMarkupId(true);\n \n         container.addOrReplace(realmLabel);\n@@ -185,7 +184,7 @@ public final void reloadRealmTree() {\n             realmLabel.setDefaultModel(new ResourceModel(\"dynRealmLabel\", \"Dynamic Realm\"));\n         }\n \n-        final Label label = new Label(\"realm\", model.getObject().getFullPath());\n+        Label label = new Label(\"realm\", RealmsUtils.getFullPath(model.getObject().getFullPath()));\n         label.setOutputMarkupId(true);\n         container.addOrReplace(label);\n "},{"sha":"89ade33e08f48c7898151c9fbf22f7240b3f9db6","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/rest/SyncopeRestClient.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Frest%2FSyncopeRestClient.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -19,8 +19,10 @@\n package org.apache.syncope.client.console.rest;\n \n import javax.ws.rs.core.Response;\n+import java.util.List;\n import org.apache.syncope.common.lib.info.NumbersInfo;\n import org.apache.syncope.common.lib.info.SystemInfo;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.rest.api.service.SyncopeService;\n \n public class SyncopeRestClient extends BaseRestClient {\n@@ -38,4 +40,13 @@ public static SystemInfo system() {\n     public static Response exportInternalStorageContent() {\n         return getService(SyncopeService.class).exportInternalStorageContent();\n     }\n+\n+    public static List<GroupTO> searchAssignableGroups(\n+            final String realm,\n+            final String term,\n+            final int page,\n+            final int size) {\n+\n+        return getService(SyncopeService.class).searchAssignableGroups(realm, term, page, size).getResult();\n+    }\n }"},{"sha":"5d081baeb6b98fb52b4a9b543fb042ef20ffa90a","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/AnyObjectTemplateWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectTemplateWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectTemplateWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FAnyObjectTemplateWizardBuilder.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.util.List;\n import java.util.Optional;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.layout.AnyObjectFormLayoutInfo;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n@@ -50,7 +51,8 @@ public AnyObjectTemplateWizardBuilder(\n             AnyObjectTO anyObjectTO = new AnyObjectTO();\n             anyObjectTO.setType(anyType);\n             if (templatable instanceof RealmTO) {\n-                anyObjectTO.setRealm(String.format(\"'%s'\", RealmTO.class.cast(templatable).getFullPath()));\n+                anyObjectTO.setRealm(\n+                        String.format(\"'%s'\", RealmsUtils.getFullPath(RealmTO.class.cast(templatable).getFullPath())));\n             }\n             setItem(new AnyWrapper<>(anyObjectTO));\n         }"},{"sha":"032d1d3585aa5f0913dadc3a30b86ea11de61317","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/GroupTemplateWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupTemplateWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupTemplateWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroupTemplateWizardBuilder.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -21,6 +21,7 @@\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.util.List;\n import java.util.Optional;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.layout.GroupFormLayoutInfo;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.GroupTO;\n@@ -48,7 +49,8 @@ public GroupTemplateWizardBuilder(\n         } else {\n             GroupTO groupTO = new GroupTO();\n             if (templatable instanceof RealmTO) {\n-                groupTO.setRealm(String.format(\"'%s'\", RealmTO.class.cast(templatable).getFullPath()));\n+                groupTO.setRealm(\n+                        String.format(\"'%s'\", RealmsUtils.getFullPath(RealmTO.class.cast(templatable).getFullPath())));\n             }\n             setItem(new GroupWrapper(groupTO));\n         }"},{"sha":"71a1dd889fb01d92e205540f156a73d007172381","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/Groups.java","status":"modified","additions":17,"deletions":26,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FGroups.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -23,13 +23,14 @@\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import java.util.function.Function;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.cxf.jaxrs.ext.search.client.CompleteCondition;\n import org.apache.syncope.client.console.SyncopeConsoleSession;\n import org.apache.syncope.client.console.SyncopeWebApplication;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.rest.GroupRestClient;\n+import org.apache.syncope.client.console.rest.SyncopeRestClient;\n import org.apache.syncope.client.lib.SyncopeClient;\n import org.apache.syncope.client.ui.commons.Constants;\n import org.apache.syncope.client.ui.commons.markup.html.form.AjaxPalettePanel;\n@@ -149,13 +150,8 @@ public List<MembershipTO> execute(final String filter) {\n                             ? List.of()\n                             : (\"*\".equals(filter)\n                                     ? groupsModel.getObject()\n-                                    : groupRestClient.search(\n-                                            anyTO.getRealm(),\n-                                            SyncopeClient.getGroupSearchConditionBuilder().isAssignable().\n-                                                    and(Constants.NAME_FIELD_NAME).equalToIgnoreCase(filter).query(),\n-                                            1, Constants.MAX_GROUP_LIST_SIZE,\n-                                            new SortParam<>(Constants.NAME_FIELD_NAME, true),\n-                                            null)).stream().\n+                                    : SyncopeRestClient.searchAssignableGroups(\n+                                            anyTO.getRealm(), filter, 1, Constants.MAX_GROUP_LIST_SIZE)).stream().\n                                     map(group -> new MembershipTO.Builder(group.getKey()).\n                                     groupName(group.getName()).build()).\n                                     collect(Collectors.toList());\n@@ -217,12 +213,11 @@ public List<GroupTO> getObject() {\n          */\n         @Override\n         protected void reloadObject() {\n-            groupsObj = groupRestClient.search(realmObj,\n-                    SyncopeClient.getGroupSearchConditionBuilder().isAssignable().query(),\n+            groupsObj = SyncopeRestClient.searchAssignableGroups(\n+                    realmObj,\n+                    null,\n                     1,\n-                    Constants.MAX_GROUP_LIST_SIZE,\n-                    new SortParam<>(Constants.NAME_FIELD_NAME, true),\n-                    null);\n+                    Constants.MAX_GROUP_LIST_SIZE);\n         }\n \n         @Override\n@@ -237,7 +232,7 @@ public List<MembershipTO> getMemberships() {\n         @Override\n         protected void reloadMemberships() {\n             // this is to be sure to have group names (required to see membership details in approval page)\n-            Map<String, GroupTO> assignedGroups = new HashMap<>();\n+            Map<String, String> assignedGroups = new HashMap<>();\n \n             int total = GroupableRelatableTO.class.cast(anyTO).getMemberships().size();\n             int pages = (total / Constants.MAX_GROUP_LIST_SIZE) + 1;\n@@ -253,25 +248,21 @@ protected void reloadMemberships() {\n                         collect(Collectors.toList());\n \n                 if (!conditions.isEmpty()) {\n-                    assignedGroups.putAll(groupRestClient.search(realmObj,\n+                    assignedGroups.putAll(groupRestClient.search(\n+                            realmObj,\n                             builder.isAssignable().and().or(conditions).query(),\n                             1,\n                             Constants.MAX_GROUP_LIST_SIZE,\n                             sort,\n-                            null).stream().collect(Collectors.toMap(GroupTO::getKey, Function.identity())));\n+                            null).stream().collect(Collectors.toMap(GroupTO::getKey, GroupTO::getName)));\n                 }\n             }\n \n             // set group names in membership TOs and remove membership not assignable\n-            List<MembershipTO> toBeRemoved = new ArrayList<>();\n-            GroupableRelatableTO.class.cast(anyTO).getMemberships().forEach(membership -> {\n-                if (assignedGroups.containsKey(membership.getGroupKey())) {\n-                    membership.setGroupName(assignedGroups.get(membership.getGroupKey()).getName());\n-                } else {\n-                    toBeRemoved.add(membership);\n-                }\n-            });\n-            GroupableRelatableTO.class.cast(anyTO).getMemberships().removeAll(toBeRemoved);\n+            GroupableRelatableTO.class.cast(anyTO).getMemberships().stream().\n+                    filter(m -> m.getGroupName() == null && assignedGroups.containsKey(m.getGroupKey())).\n+                    forEach(m -> m.setGroupName(assignedGroups.get(m.getGroupKey())));\n+            GroupableRelatableTO.class.cast(anyTO).getMemberships().removeIf(m -> m.getGroupName() == null);\n \n             membershipsObj = GroupableRelatableTO.class.cast(anyTO).getMemberships();\n             membershipsObj.sort(Comparator.comparing(MembershipTO::getGroupName));\n@@ -318,7 +309,7 @@ protected void reload() {\n                 realmObj = SyncopeConstants.ROOT_REALM;\n             } else {\n                 reload = !Groups.this.anyTO.getRealm().equalsIgnoreCase(realmObj);\n-                realmObj = Groups.this.anyTO.getRealm();\n+                realmObj = RealmsUtils.getFullPath(Groups.this.anyTO.getRealm());\n             }\n \n             if (reload) {"},{"sha":"d29b57fb5597400ec06b7b6ee686ae07f487d9c9","filename":"client/idrepo/console/src/main/java/org/apache/syncope/client/console/wizards/any/UserTemplateWizardBuilder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fidrepo%2Fconsole%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fclient%2Fconsole%2Fwizards%2Fany%2FUserTemplateWizardBuilder.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -22,6 +22,7 @@\n import org.apache.syncope.client.ui.commons.wizards.any.AnyWrapper;\n import java.util.List;\n import java.util.Optional;\n+import org.apache.syncope.client.console.commons.RealmsUtils;\n import org.apache.syncope.client.console.layout.UserFormLayoutInfo;\n import org.apache.syncope.client.ui.commons.wizards.AjaxWizard;\n import org.apache.syncope.common.lib.to.RealmTO;\n@@ -66,7 +67,8 @@ public UserTemplateWizardBuilder(\n         } else {\n             UserTO userTO = new UserTO();\n             if (templatable instanceof RealmTO) {\n-                userTO.setRealm(String.format(\"'%s'\", RealmTO.class.cast(templatable).getFullPath()));\n+                userTO.setRealm(\n+                        String.format(\"'%s'\", RealmsUtils.getFullPath(RealmTO.class.cast(templatable).getFullPath())));\n             }\n             setItem(new UserWrapper(userTO));\n         }"},{"sha":"770f7fd81e420a0cec3c3d9d91be10c054bd435f","filename":"common/idrepo/lib/src/main/java/org/apache/syncope/common/lib/SyncopeConstants.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fidrepo%2Flib%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Flib%2FSyncopeConstants.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -49,6 +49,8 @@ public final class SyncopeConstants {\n \n     public static final String ROOT_LOGGER = \"ROOT\";\n \n+    public static final String GROUP_OWNER_ROLE = \"GROUP_OWNER\";\n+\n     public static final Pattern EMAIL_PATTERN = Pattern.compile(\n             \"^[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\\\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*\"\n             + \"@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\\\\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?$\","},{"sha":"c14d668ea822ade7b73b63c2bc27af3920282820","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":1,"deletions":57,"changes":58,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -19,9 +19,7 @@\n package org.apache.syncope.core.logic;\n \n import java.util.ArrayList;\n-import java.util.HashSet;\n import java.util.List;\n-import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AnyCR;\n@@ -32,22 +30,15 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n-import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n-import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.provisioning.java.utils.TemplateUtils;\n-import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n-import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n-import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n import org.apache.syncope.core.provisioning.api.LogicActions;\n-import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.springframework.beans.factory.annotation.Autowired;\n \n@@ -56,15 +47,6 @@\n \n     protected static final String REST_CONTEXT = \"REST\";\n \n-    @Autowired\n-    protected UserDAO userDAO;\n-\n-    @Autowired\n-    protected GroupDAO groupDAO;\n-\n-    @Autowired\n-    protected AnyObjectDAO anyObjectDAO;\n-\n     @Autowired\n     private RealmDAO realmDAO;\n \n@@ -186,20 +168,7 @@ protected ProvisioningResult<TO> afterCreate(\n     protected ProvisioningResult<TO> afterUpdate(\n             final TO input,\n             final List<PropagationStatus> statuses,\n-            final List<LogicActions> actions,\n-            final boolean authDynRealms,\n-            final Set<String> dynRealmsBefore) {\n-\n-        Set<String> dynRealmsAfter = new HashSet<>(input.getDynRealms());\n-        if (authDynRealms && !dynRealmsBefore.equals(dynRealmsAfter)) {\n-            throw new DelegatedAdministrationException(\n-                    this instanceof UserLogic\n-                            ? AnyTypeKind.USER\n-                            : this instanceof GroupLogic\n-                                    ? AnyTypeKind.GROUP\n-                                    : AnyTypeKind.ANY_OBJECT,\n-                    input.getKey());\n-        }\n+            final List<LogicActions> actions) {\n \n         TO any = input;\n \n@@ -231,31 +200,6 @@ protected ProvisioningResult<TO> afterDelete(\n         return result;\n     }\n \n-    protected boolean securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = effectiveRealms.stream().anyMatch(realm::startsWith);\n-        if (!authorized) {\n-            AnyDAO<?> anyDAO = this instanceof UserLogic\n-                    ? userDAO\n-                    : this instanceof GroupLogic\n-                            ? groupDAO\n-                            : anyObjectDAO;\n-            authorized = anyDAO.findDynRealms(key).stream().\n-                    anyMatch(effectiveRealms::contains);\n-        }\n-        if (!authorized) {\n-            throw new DelegatedAdministrationException(\n-                    realm,\n-                    (this instanceof UserLogic\n-                            ? AnyTypeKind.USER\n-                            : this instanceof GroupLogic\n-                                    ? AnyTypeKind.GROUP\n-                                    : AnyTypeKind.ANY_OBJECT).name(),\n-                    key);\n-        }\n-\n-        return effectiveRealms.stream().anyMatch(new RealmUtils.DynRealmsPredicate());\n-    }\n-\n     public abstract TO read(String key);\n \n     public abstract Pair<Integer, List<TO>> search("},{"sha":"e4dc745916fdde138a559739c40da888906a3290","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":89,"deletions":73,"changes":162,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -20,24 +20,26 @@\n \n import java.lang.reflect.Method;\n import java.util.Collection;\n-import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.to.AnyObjectTO;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -59,6 +61,9 @@\n @Component\n public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectCR, AnyObjectUR> {\n \n+    @Autowired\n+    protected AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     protected AnySearchDAO searchDAO;\n \n@@ -86,14 +91,14 @@ public Pair<Integer, List<AnyObjectTO>> search(\n             throw new UnsupportedOperationException(\"Need to specify \" + AnyType.class.getSimpleName());\n         }\n \n-        Set<String> adminRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.SEARCH.getFor(searchCond.hasAnyTypeCond())),\n                 realm);\n \n-        int count = searchDAO.count(adminRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n+        int count = searchDAO.count(authRealms, searchCond, AnyTypeKind.ANY_OBJECT);\n \n         List<AnyObject> matching = searchDAO.search(\n-                adminRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n+                authRealms, searchCond, page, size, orderBy, AnyTypeKind.ANY_OBJECT);\n         List<AnyObjectTO> result = matching.stream().\n                 map(anyObject -> binder.getAnyObjectTO(anyObject, details)).\n                 collect(Collectors.toList());\n@@ -111,95 +116,126 @@ public ProvisioningResult<AnyObjectTO> create(final AnyObjectCR createReq, final\n             throw SyncopeClientException.build(ClientExceptionType.InvalidAnyType);\n         }\n \n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.CREATE.getFor(before.getLeft().getType())),\n                 before.getLeft().getRealm());\n-        securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n+        anyObjectDAO.securityChecks(\n+                authRealms,\n+                null,\n+                before.getLeft().getRealm(),\n+                before.getLeft().getMemberships().stream().filter(Objects::nonNull).\n+                        map(MembershipTO::getGroupKey).filter(Objects::nonNull).\n+                        collect(Collectors.toSet()));\n \n         Pair<String, List<PropagationStatus>> created = provisioningManager.create(\n                 before.getLeft(), nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n         return afterCreate(binder.getAnyObjectTO(created.getKey()), created.getRight(), before.getRight());\n     }\n \n+    protected Set<String> groups(final AnyObjectTO anyObjectTO) {\n+        return anyObjectTO.getMemberships().stream().filter(Objects::nonNull).\n+                map(MembershipTO::getGroupKey).filter(Objects::nonNull).\n+                collect(Collectors.toSet());\n+    }\n+\n     @Override\n     public ProvisioningResult<AnyObjectTO> update(\n             final AnyObjectUR updateReq, final boolean nullPriorityAsync) {\n \n         AnyObjectTO anyObjectTO = binder.getAnyObjectTO(updateReq.getKey());\n-        Set<String> dynRealmsBefore = new HashSet<>(anyObjectTO.getDynRealms());\n         Pair<AnyObjectUR, List<LogicActions>> before = beforeUpdate(updateReq, anyObjectTO.getRealm());\n \n-        String realm =\n-                before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())\n-                ? before.getLeft().getRealm().getValue()\n-                : anyObjectTO.getRealm();\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n-                realm);\n-        boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n+                anyObjectTO.getRealm());\n+\n+        Set<String> groups = groups(anyObjectTO);\n+        groups.removeAll(updateReq.getMemberships().stream().filter(Objects::nonNull).\n+                filter(m -> m.getOperation() == PatchOperation.DELETE).\n+                map(MembershipUR::getGroup).filter(Objects::nonNull).\n+                collect(Collectors.toSet()));\n \n-        Pair<AnyObjectUR, List<PropagationStatus>> updated =\n+        anyObjectDAO.securityChecks(\n+                authRealms,\n+                before.getLeft().getKey(),\n+                anyObjectTO.getRealm(),\n+                groups);\n+\n+        Pair<AnyObjectUR, List<PropagationStatus>> after =\n                 provisioningManager.update(updateReq, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n-        return afterUpdate(\n-                binder.getAnyObjectTO(updated.getLeft().getKey()),\n-                updated.getRight(),\n-                before.getRight(),\n-                authDynRealms,\n-                dynRealmsBefore);\n+        ProvisioningResult<AnyObjectTO> result = afterUpdate(\n+                binder.getAnyObjectTO(after.getLeft().getKey()),\n+                after.getRight(),\n+                before.getRight());\n+\n+        return result;\n     }\n \n     @Override\n     public ProvisioningResult<AnyObjectTO> delete(final String key, final boolean nullPriorityAsync) {\n-        AnyObjectTO anyObject = binder.getAnyObjectTO(key);\n-        Pair<AnyObjectTO, List<LogicActions>> before = beforeDelete(anyObject);\n+        Pair<AnyObjectTO, List<LogicActions>> before = beforeDelete(binder.getAnyObjectTO(key));\n \n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(AnyEntitlement.DELETE.getFor(before.getLeft().getType())),\n                 before.getLeft().getRealm());\n-        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+        anyObjectDAO.securityChecks(\n+                authRealms,\n+                before.getLeft().getKey(),\n+                before.getLeft().getRealm(),\n+                groups(before.getLeft()));\n \n         List<PropagationStatus> statuses = provisioningManager.delete(\n                 before.getLeft().getKey(), nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n-        AnyObjectTO anyObjectTO = new AnyObjectTO();\n-        anyObjectTO.setKey(before.getLeft().getKey());\n+        AnyObjectTO deletedTO;\n+        if (anyObjectDAO.find(before.getLeft().getKey()) == null) {\n+            deletedTO = new AnyObjectTO();\n+            deletedTO.setKey(before.getLeft().getKey());\n+        } else {\n+            deletedTO = binder.getAnyObjectTO(before.getLeft().getKey());\n+        }\n+\n+        return afterDelete(deletedTO, statuses, before.getRight());\n+    }\n \n-        return afterDelete(anyObjectTO, statuses, before.getRight());\n+    protected void updateChecks(final String key) {\n+        AnyObject anyObject = anyObjectDAO.authFind(key);\n+\n+        Set<String> authRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObject.getType().getKey())),\n+                anyObject.getRealm().getFullPath());\n+        anyObjectDAO.securityChecks(\n+                authRealms,\n+                anyObject.getKey(),\n+                anyObject.getRealm().getFullPath(),\n+                anyObject.getMemberships().stream().\n+                        map(m -> m.getRightEnd().getKey()).\n+                        collect(Collectors.toSet()));\n     }\n \n     @Override\n     public AnyObjectTO unlink(final String key, final Collection<String> resources) {\n-        // security checks\n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n-                anyObjectTO.getRealm());\n-        securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n+        updateChecks(key);\n \n         AnyObjectUR req = new AnyObjectUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(r).build()).\n                 collect(Collectors.toList()));\n \n         return binder.getAnyObjectTO(provisioningManager.unlink(req, AuthContextUtils.getUsername(), REST_CONTEXT));\n     }\n \n     @Override\n     public AnyObjectTO link(final String key, final Collection<String> resources) {\n-        // security checks\n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n-                anyObjectTO.getRealm());\n-        securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n+        updateChecks(key);\n \n         AnyObjectUR req = new AnyObjectUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(r).build()).\n                 collect(Collectors.toList()));\n \n         return binder.getAnyObjectTO(provisioningManager.link(req, AuthContextUtils.getUsername(), REST_CONTEXT));\n@@ -209,17 +245,12 @@ public AnyObjectTO link(final String key, final Collection<String> resources) {\n     public ProvisioningResult<AnyObjectTO> unassign(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        // security checks\n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n-                anyObjectTO.getRealm());\n-        securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n+        updateChecks(key);\n \n         AnyObjectUR req = new AnyObjectUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(r).build()).\n                 collect(Collectors.toList()));\n \n         return update(req, nullPriorityAsync);\n@@ -233,17 +264,12 @@ public ProvisioningResult<AnyObjectTO> assign(\n             final String password,\n             final boolean nullPriorityAsync) {\n \n-        // security checks\n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n-                anyObjectTO.getRealm());\n-        securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n+        updateChecks(key);\n \n         AnyObjectUR req = new AnyObjectUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(r).build()).\n                 collect(Collectors.toList()));\n \n         return update(req, nullPriorityAsync);\n@@ -253,12 +279,7 @@ public ProvisioningResult<AnyObjectTO> assign(\n     public ProvisioningResult<AnyObjectTO> deprovision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        // security checks\n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n-                anyObjectTO.getRealm());\n-        securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n+        updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(\n                 key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n@@ -277,12 +298,7 @@ public ProvisioningResult<AnyObjectTO> provision(\n             final String password,\n             final boolean nullPriorityAsync) {\n \n-        // security checks\n-        AnyObjectTO anyObjectTO = binder.getAnyObjectTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(AnyEntitlement.UPDATE.getFor(anyObjectTO.getType())),\n-                anyObjectTO.getRealm());\n-        securityChecks(effectiveRealms, anyObjectTO.getRealm(), anyObjectTO.getKey());\n+        updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.provision(\n                 key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);"},{"sha":"b39c0074bf306295e8923f64b545043db0f653ee","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":75,"deletions":91,"changes":166,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -21,14 +21,12 @@\n import java.lang.reflect.Method;\n import java.util.Collection;\n import java.util.Date;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeClientException;\n@@ -48,9 +46,11 @@\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.ImplementationDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.TaskDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n@@ -67,7 +67,6 @@\n import org.apache.syncope.core.provisioning.java.job.GroupMemberProvisionTaskJobDelegate;\n import org.apache.syncope.core.provisioning.java.job.TaskJob;\n import org.apache.syncope.core.spring.security.AuthContextUtils;\n-import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.quartz.JobDataMap;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.scheduling.quartz.SchedulerFactoryBean;\n@@ -82,6 +81,12 @@\n @Component\n public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupCR, GroupUR> {\n \n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n \n@@ -115,21 +120,6 @@ public class GroupLogic extends AbstractAnyLogic<GroupTO, GroupCR, GroupUR> {\n     @Autowired\n     protected EntityFactory entityFactory;\n \n-    @Override\n-    protected boolean securityChecks(final Set<String> effectiveRealms, final String realm, final String key) {\n-        boolean authorized = effectiveRealms.stream().anyMatch(ownedRealm\n-                -> realm.startsWith(ownedRealm) || ownedRealm.equals(RealmUtils.getGroupOwnerRealm(realm, key)));\n-        if (!authorized) {\n-            authorized = groupDAO.findDynRealms(key).stream().\n-                    anyMatch(effectiveRealms::contains);\n-        }\n-        if (!authorized) {\n-            throw new DelegatedAdministrationException(realm, AnyTypeKind.GROUP.name(), key);\n-        }\n-\n-        return effectiveRealms.stream().anyMatch(new RealmUtils.DynRealmsPredicate());\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override\n@@ -157,15 +147,15 @@ public Pair<Integer, List<GroupTO>> search(\n             final String realm,\n             final boolean details) {\n \n-        Set<String> adminRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_SEARCH), realm);\n \n         SearchCond effectiveCond = searchCond == null ? groupDAO.getAllMatchingCond() : searchCond;\n \n-        int count = searchDAO.count(adminRealms, effectiveCond, AnyTypeKind.GROUP);\n+        int count = searchDAO.count(authRealms, effectiveCond, AnyTypeKind.GROUP);\n \n         List<Group> matching = searchDAO.search(\n-                adminRealms, effectiveCond, page, size, orderBy, AnyTypeKind.GROUP);\n+                authRealms, effectiveCond, page, size, orderBy, AnyTypeKind.GROUP);\n         List<GroupTO> result = matching.stream().\n                 map(group -> binder.getGroupTO(group, details)).\n                 collect(Collectors.toList());\n@@ -181,10 +171,13 @@ public ProvisioningResult<GroupTO> create(final GroupCR createReq, final boolean\n             throw SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n         }\n \n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_CREATE),\n                 before.getLeft().getRealm());\n-        securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n+        groupDAO.securityChecks(\n+                authRealms,\n+                null,\n+                before.getLeft().getRealm());\n \n         Pair<String, List<PropagationStatus>> created = provisioningManager.create(\n                 before.getLeft(), nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n@@ -196,27 +189,31 @@ public ProvisioningResult<GroupTO> create(final GroupCR createReq, final boolean\n     @Override\n     public ProvisioningResult<GroupTO> update(final GroupUR req, final boolean nullPriorityAsync) {\n         GroupTO groupTO = binder.getGroupTO(req.getKey());\n-        Set<String> dynRealmsBefore = new HashSet<>(groupTO.getDynRealms());\n         Pair<GroupUR, List<LogicActions>> before = beforeUpdate(req, groupTO.getRealm());\n \n-        String realm =\n-                before.getLeft().getRealm() != null && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())\n-                ? before.getLeft().getRealm().getValue()\n-                : groupTO.getRealm();\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n-                realm);\n-        boolean authDynRealms = securityChecks(effectiveRealms, realm, before.getLeft().getKey());\n+                groupTO.getRealm());\n+        groupDAO.securityChecks(\n+                authRealms,\n+                before.getLeft().getKey(),\n+                groupTO.getRealm());\n \n-        Pair<GroupUR, List<PropagationStatus>> updated =\n+        Pair<GroupUR, List<PropagationStatus>> after =\n                 provisioningManager.update(req, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n-        return afterUpdate(\n-                binder.getGroupTO(updated.getLeft().getKey()),\n-                updated.getRight(),\n-                before.getRight(),\n-                authDynRealms,\n-                dynRealmsBefore);\n+        ProvisioningResult<GroupTO> result = afterUpdate(\n+                binder.getGroupTO(after.getLeft().getKey()),\n+                after.getRight(),\n+                before.getRight());\n+\n+        // check if group can still be managed by the caller\n+        groupDAO.securityChecks(\n+                authRealms,\n+                after.getLeft().getKey(),\n+                result.getEntity().getRealm());\n+\n+        return result;\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_DELETE + \"')\")\n@@ -225,10 +222,13 @@ public ProvisioningResult<GroupTO> delete(final String key, final boolean nullPr\n         GroupTO group = binder.getGroupTO(key);\n         Pair<GroupTO, List<LogicActions>> before = beforeDelete(group);\n \n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_DELETE),\n                 before.getLeft().getRealm());\n-        securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+        groupDAO.securityChecks(\n+                authRealms,\n+                before.getLeft().getKey(),\n+                before.getLeft().getRealm());\n \n         List<Group> ownedGroups = groupDAO.findOwnedByGroup(before.getLeft().getKey());\n         if (!ownedGroups.isEmpty()) {\n@@ -247,44 +247,48 @@ public ProvisioningResult<GroupTO> delete(final String key, final boolean nullPr\n         return afterDelete(groupTO, statuses, before.getRight());\n     }\n \n-    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n-    @Override\n-    public GroupTO unlink(final String key, final Collection<String> resources) {\n-        // security checks\n+    protected GroupTO updateChecks(final String key) {\n         GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n                 group.getRealm());\n-        securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n+        groupDAO.securityChecks(\n+                authRealms,\n+                group.getKey(),\n+                group.getRealm());\n+\n+        return group;\n+    }\n+\n+    @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n+    @Override\n+    public GroupTO unlink(final String key, final Collection<String> resources) {\n+        GroupTO groupTO = updateChecks(key);\n \n         GroupUR req = new GroupUR();\n         req.setKey(key);\n         req.getResources().addAll(resources.stream().\n-                map(resource -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(r).build()).\n                 collect(Collectors.toList()));\n-        req.setUDynMembershipCond(group.getUDynMembershipCond());\n-        req.getADynMembershipConds().putAll(group.getADynMembershipConds());\n+        req.setUDynMembershipCond(groupTO.getUDynMembershipCond());\n+        req.getADynMembershipConds().putAll(groupTO.getADynMembershipConds());\n \n         return binder.getGroupTO(provisioningManager.unlink(req, AuthContextUtils.getUsername(), REST_CONTEXT));\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.GROUP_UPDATE + \"')\")\n     @Override\n     public GroupTO link(final String key, final Collection<String> resources) {\n-        // security checks\n-        GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n-                group.getRealm());\n-        securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n+        GroupTO groupTO = updateChecks(key);\n \n         GroupUR req = new GroupUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(r).build()).\n                 collect(Collectors.toList()));\n-        req.getADynMembershipConds().putAll(group.getADynMembershipConds());\n-        req.setUDynMembershipCond(group.getUDynMembershipCond());\n+        req.getADynMembershipConds().putAll(groupTO.getADynMembershipConds());\n+        req.setUDynMembershipCond(groupTO.getUDynMembershipCond());\n \n         return binder.getGroupTO(provisioningManager.link(req, AuthContextUtils.getUsername(), REST_CONTEXT));\n     }\n@@ -294,20 +298,15 @@ public GroupTO link(final String key, final Collection<String> resources) {\n     public ProvisioningResult<GroupTO> unassign(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        // security checks\n-        GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n-                group.getRealm());\n-        securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n+        GroupTO groupTO = updateChecks(key);\n \n         GroupUR req = new GroupUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(r).build()).\n                 collect(Collectors.toList()));\n-        req.getADynMembershipConds().putAll(group.getADynMembershipConds());\n-        req.setUDynMembershipCond(group.getUDynMembershipCond());\n+        req.getADynMembershipConds().putAll(groupTO.getADynMembershipConds());\n+        req.setUDynMembershipCond(groupTO.getUDynMembershipCond());\n \n         return update(req, nullPriorityAsync);\n     }\n@@ -321,20 +320,15 @@ public ProvisioningResult<GroupTO> assign(\n             final String password,\n             final boolean nullPriorityAsync) {\n \n-        // security checks\n-        GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n-                group.getRealm());\n-        securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n+        GroupTO groupTO = updateChecks(key);\n \n         GroupUR req = new GroupUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(r).build()).\n                 collect(Collectors.toList()));\n-        req.getADynMembershipConds().putAll(group.getADynMembershipConds());\n-        req.setUDynMembershipCond(group.getUDynMembershipCond());\n+        req.getADynMembershipConds().putAll(groupTO.getADynMembershipConds());\n+        req.setUDynMembershipCond(groupTO.getUDynMembershipCond());\n \n         return update(req, nullPriorityAsync);\n     }\n@@ -344,12 +338,7 @@ public ProvisioningResult<GroupTO> assign(\n     public ProvisioningResult<GroupTO> deprovision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        // security checks\n-        GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n-                group.getRealm());\n-        securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n+        updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(\n                 key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n@@ -369,12 +358,7 @@ public ProvisioningResult<GroupTO> provision(\n             final String password,\n             final boolean nullPriorityAsync) {\n \n-        // security checks\n-        GroupTO group = binder.getGroupTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_UPDATE),\n-                group.getRealm());\n-        securityChecks(effectiveRealms, group.getRealm(), group.getKey());\n+        updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.provision(\n                 key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);"},{"sha":"5a092532f3529253d90d58cb7a4255a767c046fe","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/RoleLogic.java","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FRoleLogic.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -23,8 +23,11 @@\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n+import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.to.RoleTO;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n+import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.entity.Role;\n@@ -80,6 +83,12 @@ public RoleTO update(final RoleTO roleTO) {\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.ROLE_DELETE + \"')\")\n     public RoleTO delete(final String key) {\n+        if (SyncopeConstants.GROUP_OWNER_ROLE.equals(key)) {\n+            SyncopeClientException sce = SyncopeClientException.build(ClientExceptionType.InvalidRole);\n+            sce.getElements().add(\"This Role cannot be deleted\");\n+            throw sce;\n+        }\n+\n         Role role = roleDAO.find(key);\n         if (role == null) {\n             LOG.error(\"Could not find role '\" + key + '\\'');"},{"sha":"c2e0e9119b5d87966818f3d1937275d28a912a79","filename":"core/idrepo/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":96,"deletions":84,"changes":180,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fidrepo%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -20,22 +20,22 @@\n \n import java.lang.reflect.Method;\n import java.util.Collection;\n-import java.util.Collections;\n-import java.util.HashSet;\n import java.util.List;\n+import java.util.Objects;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.ArrayUtils;\n-import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.keymaster.client.api.ConfParamOps;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.request.BooleanReplacePatchItem;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StatusR;\n import org.apache.syncope.common.lib.request.StringPatchItem;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PropagationStatus;\n import org.apache.syncope.common.lib.to.ProvisioningResult;\n import org.apache.syncope.common.lib.to.UserTO;\n@@ -45,7 +45,9 @@\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n@@ -68,6 +70,12 @@\n @Component\n public class UserLogic extends AbstractAnyLogic<UserTO, UserCR, UserUR> {\n \n+    @Autowired\n+    protected UserDAO userDAO;\n+\n+    @Autowired\n+    protected GroupDAO groupDAO;\n+\n     @Autowired\n     protected AnySearchDAO searchDAO;\n \n@@ -110,14 +118,14 @@ public Pair<Integer, List<UserTO>> search(\n             final String realm,\n             final boolean details) {\n \n-        Set<String> adminRealms = RealmUtils.getEffective(\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_SEARCH), realm);\n \n         SearchCond effectiveCond = searchCond == null ? userDAO.getAllMatchingCond() : searchCond;\n \n-        int count = searchDAO.count(adminRealms, effectiveCond, AnyTypeKind.USER);\n+        int count = searchDAO.count(authRealms, effectiveCond, AnyTypeKind.USER);\n \n-        List<User> matching = searchDAO.search(adminRealms, effectiveCond, page, size, orderBy, AnyTypeKind.USER);\n+        List<User> matching = searchDAO.search(authRealms, effectiveCond, page, size, orderBy, AnyTypeKind.USER);\n         List<UserTO> result = matching.stream().\n                 map(user -> binder.returnUserTO(binder.getUserTO(user, details))).\n                 collect(Collectors.toList());\n@@ -147,10 +155,16 @@ protected ProvisioningResult<UserTO> doCreate(\n         }\n \n         if (!self) {\n-            Set<String> effectiveRealms = RealmUtils.getEffective(\n+            Set<String> authRealms = RealmUtils.getEffective(\n                     AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_CREATE),\n                     before.getLeft().getRealm());\n-            securityChecks(effectiveRealms, before.getLeft().getRealm(), null);\n+            userDAO.securityChecks(\n+                    authRealms,\n+                    null,\n+                    before.getLeft().getRealm(),\n+                    before.getLeft().getMemberships().stream().filter(Objects::nonNull).\n+                            map(MembershipTO::getGroupKey).filter(Objects::nonNull).\n+                            collect(Collectors.toSet()));\n         }\n \n         Pair<String, List<PropagationStatus>> created = provisioningManager.create(\n@@ -188,34 +202,44 @@ public ProvisioningResult<UserTO> update(final UserUR userUR, final boolean null\n         return doUpdate(userUR, false, nullPriorityAsync);\n     }\n \n+    protected Set<String> groups(final UserTO userTO) {\n+        return userTO.getMemberships().stream().filter(Objects::nonNull).\n+                map(MembershipTO::getGroupKey).filter(Objects::nonNull).\n+                collect(Collectors.toSet());\n+    }\n+\n     protected ProvisioningResult<UserTO> doUpdate(\n             final UserUR userUR, final boolean self, final boolean nullPriorityAsync) {\n \n         UserTO userTO = binder.getUserTO(userUR.getKey());\n-        Set<String> dynRealmsBefore = new HashSet<>(userTO.getDynRealms());\n         Pair<UserUR, List<LogicActions>> before = beforeUpdate(userUR, userTO.getRealm());\n \n-        boolean authDynRealms = false;\n-        if (!self\n-                && before.getLeft().getRealm() != null\n-                && StringUtils.isNotBlank(before.getLeft().getRealm().getValue())) {\n-\n-            Set<String> effectiveRealms = RealmUtils.getEffective(\n-                    AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n-                    before.getLeft().getRealm().getValue());\n-            authDynRealms =\n-                    securityChecks(effectiveRealms, before.getLeft().getRealm().getValue(), before.getLeft().getKey());\n+        Set<String> authRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n+                userTO.getRealm());\n+        if (!self) {\n+            Set<String> groups = groups(userTO);\n+            groups.removeAll(userUR.getMemberships().stream().filter(Objects::nonNull).\n+                    filter(m -> m.getOperation() == PatchOperation.DELETE).\n+                    map(MembershipUR::getGroup).filter(Objects::nonNull).\n+                    collect(Collectors.toSet()));\n+\n+            userDAO.securityChecks(\n+                    authRealms,\n+                    before.getLeft().getKey(),\n+                    userTO.getRealm(),\n+                    groups);\n         }\n \n-        Pair<UserUR, List<PropagationStatus>> updated = provisioningManager.update(\n+        Pair<UserUR, List<PropagationStatus>> after = provisioningManager.update(\n                 before.getLeft(), nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n \n-        return afterUpdate(\n-                binder.returnUserTO(binder.getUserTO(updated.getLeft().getKey())),\n-                updated.getRight(),\n-                before.getRight(),\n-                authDynRealms,\n-                dynRealmsBefore);\n+        ProvisioningResult<UserTO> result = afterUpdate(\n+                binder.returnUserTO(binder.getUserTO(after.getLeft().getKey())),\n+                after.getRight(),\n+                before.getRight());\n+\n+        return result;\n     }\n \n     protected Pair<String, List<PropagationStatus>> setStatusOnWfAdapter(\n@@ -249,10 +273,15 @@ protected Pair<String, List<PropagationStatus>> setStatusOnWfAdapter(\n     public ProvisioningResult<UserTO> status(final StatusR statusR, final boolean nullPriorityAsync) {\n         // security checks\n         UserTO toUpdate = binder.getUserTO(statusR.getKey());\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n+\n+        Set<String> authRealms = RealmUtils.getEffective(\n                 AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n                 toUpdate.getRealm());\n-        securityChecks(effectiveRealms, toUpdate.getRealm(), toUpdate.getKey());\n+        userDAO.securityChecks(\n+                authRealms,\n+                toUpdate.getKey(),\n+                toUpdate.getRealm(),\n+                groups(toUpdate));\n \n         // ensures the actual user key is effectively on the request - as the binder.getUserTO(statusR.getKey())\n         // call above works with username as well\n@@ -262,9 +291,7 @@ public ProvisioningResult<UserTO> status(final StatusR statusR, final boolean nu\n         return afterUpdate(\n                 binder.returnUserTO(binder.getUserTO(updated.getKey())),\n                 updated.getRight(),\n-                Collections.<LogicActions>emptyList(),\n-                false,\n-                Set.of());\n+                List.of());\n     }\n \n     @PreAuthorize(\"isAuthenticated() and not(hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n@@ -275,9 +302,7 @@ public ProvisioningResult<UserTO> selfStatus(final StatusR statusR, final boolea\n         return afterUpdate(\n                 binder.returnUserTO(binder.getUserTO(updated.getKey())),\n                 updated.getRight(),\n-                Collections.<LogicActions>emptyList(),\n-                false,\n-                Set.of());\n+                List.of());\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"')\")\n@@ -324,15 +349,13 @@ public void confirmPasswordReset(final String token, final String password) {\n             + \"and not(hasRole('\" + IdRepoEntitlement.ANONYMOUS + \"')) \"\n             + \"and not(hasRole('\" + IdRepoEntitlement.MUST_CHANGE_PASSWORD + \"'))\")\n     public ProvisioningResult<UserTO> selfDelete(final boolean nullPriorityAsync) {\n-        UserTO userTO = binder.getAuthenticatedUserTO();\n-        return doDelete(userTO, true, nullPriorityAsync);\n+        return doDelete(binder.getAuthenticatedUserTO(), true, nullPriorityAsync);\n     }\n \n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_DELETE + \"')\")\n     @Override\n     public ProvisioningResult<UserTO> delete(final String key, final boolean nullPriorityAsync) {\n-        UserTO userTO = binder.getUserTO(key);\n-        return doDelete(userTO, false, nullPriorityAsync);\n+        return doDelete(binder.getUserTO(key), false, nullPriorityAsync);\n     }\n \n     protected ProvisioningResult<UserTO> doDelete(\n@@ -341,10 +364,14 @@ protected ProvisioningResult<UserTO> doDelete(\n         Pair<UserTO, List<LogicActions>> before = beforeDelete(userTO);\n \n         if (!self) {\n-            Set<String> effectiveRealms = RealmUtils.getEffective(\n+            Set<String> authRealms = RealmUtils.getEffective(\n                     AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_DELETE),\n                     before.getLeft().getRealm());\n-            securityChecks(effectiveRealms, before.getLeft().getRealm(), before.getLeft().getKey());\n+            userDAO.securityChecks(\n+                    authRealms,\n+                    before.getLeft().getKey(),\n+                    before.getLeft().getRealm(),\n+                    groups(before.getLeft()));\n         }\n \n         List<Group> ownedGroups = groupDAO.findOwnedByUser(before.getLeft().getKey());\n@@ -369,20 +396,30 @@ protected ProvisioningResult<UserTO> doDelete(\n         return afterDelete(binder.returnUserTO(deletedTO), statuses, before.getRight());\n     }\n \n+    protected void updateChecks(final String key) {\n+        User user = userDAO.authFind(key);\n+\n+        Set<String> authRealms = RealmUtils.getEffective(\n+                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n+                user.getRealm().getFullPath());\n+        userDAO.securityChecks(\n+                authRealms,\n+                user.getKey(),\n+                user.getRealm().getFullPath(),\n+                user.getMemberships().stream().\n+                        map(m -> m.getRightEnd().getKey()).\n+                        collect(Collectors.toSet()));\n+    }\n+\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO unlink(final String key, final Collection<String> resources) {\n-        // security checks\n-        UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n-                user.getRealm());\n-        securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n+        updateChecks(key);\n \n         UserUR req = new UserUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(r).build()).\n                 collect(Collectors.toList()));\n \n         return binder.returnUserTO(binder.getUserTO(\n@@ -392,17 +429,12 @@ public UserTO unlink(final String key, final Collection<String> resources) {\n     @PreAuthorize(\"hasRole('\" + IdRepoEntitlement.USER_UPDATE + \"')\")\n     @Override\n     public UserTO link(final String key, final Collection<String> resources) {\n-        // security checks\n-        UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n-                user.getRealm());\n-        securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n+        updateChecks(key);\n \n         UserUR req = new UserUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(r).build()).\n                 collect(Collectors.toList()));\n \n         return binder.returnUserTO(binder.getUserTO(\n@@ -414,17 +446,12 @@ public UserTO link(final String key, final Collection<String> resources) {\n     public ProvisioningResult<UserTO> unassign(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        // security checks\n-        UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n-                user.getRealm());\n-        securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n+        updateChecks(key);\n \n         UserUR req = new UserUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.DELETE).value(r).build()).\n                 collect(Collectors.toList()));\n \n         return update(req, nullPriorityAsync);\n@@ -439,17 +466,12 @@ public ProvisioningResult<UserTO> assign(\n             final String password,\n             final boolean nullPriorityAsync) {\n \n-        // security checks\n-        UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n-                user.getRealm());\n-        securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n+        updateChecks(key);\n \n         UserUR req = new UserUR();\n         req.setKey(key);\n-        req.getResources().addAll(resources.stream().map(resource\n-                -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(resource).build()).\n+        req.getResources().addAll(resources.stream().\n+                map(r -> new StringPatchItem.Builder().operation(PatchOperation.ADD_REPLACE).value(r).build()).\n                 collect(Collectors.toList()));\n \n         if (changepwd) {\n@@ -465,12 +487,7 @@ public ProvisioningResult<UserTO> assign(\n     public ProvisioningResult<UserTO> deprovision(\n             final String key, final Collection<String> resources, final boolean nullPriorityAsync) {\n \n-        // security checks\n-        UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n-                user.getRealm());\n-        securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n+        updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.deprovision(\n                 key, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);\n@@ -490,12 +507,7 @@ public ProvisioningResult<UserTO> provision(\n             final String password,\n             final boolean nullPriorityAsync) {\n \n-        // security checks\n-        UserTO user = binder.getUserTO(key);\n-        Set<String> effectiveRealms = RealmUtils.getEffective(\n-                AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.USER_UPDATE),\n-                user.getRealm());\n-        securityChecks(effectiveRealms, user.getRealm(), user.getKey());\n+        updateChecks(key);\n \n         List<PropagationStatus> statuses = provisioningManager.provision(\n                 key, changePwd, password, resources, nullPriorityAsync, AuthContextUtils.getUsername(), REST_CONTEXT);"},{"sha":"15fc6dcd7ee2c9c6a1870ff4331cbe183222dfed","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -33,6 +33,17 @@\n \n public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n+    /**\n+     * Checks if the calling user is authorized to access the Any Object matching the provided key, under the given\n+     * realm.\n+     *\n+     * @param authRealms realms for which the calling user owns entitlement(s) to check\n+     * @param key Any Object key\n+     * @param realm Any Object's realm full path\n+     * @param groups group the Any Object is member of\n+     */\n+    void securityChecks(Set<String> authRealms, String key, String realm, Collection<String> groups);\n+\n     /**\n      * Counts the number of instances for each type.\n      * The returned map is expected to be sorted on values."},{"sha":"fa50c00e0b200a7eb9a8b09c6940bc12b7cd8261","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -33,6 +33,16 @@\n \n public interface GroupDAO extends AnyDAO<Group> {\n \n+    /**\n+     * Checks if the calling user is authorized to access the Group matching the provided key, under the given\n+     * realm.\n+     *\n+     * @param authRealms realms for which the calling user owns entitlement(s) to check\n+     * @param key Group key\n+     * @param realm Group's realm full path\n+     */\n+    void securityChecks(Set<String> authRealms, String key, String realm);\n+\n     Map<String, Integer> countByRealm();\n \n     Group findByName(String name);"},{"sha":"471182d54060a61b85fa1a6f7ee9b8500e2297dd","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -35,6 +35,17 @@\n \n public interface UserDAO extends AnyDAO<User> {\n \n+    /**\n+     * Checks if the calling user is authorized to access the User matching the provided key, under the given\n+     * realm.\n+     *\n+     * @param authRealms realms for which the calling user owns entitlement(s) to check\n+     * @param key User key\n+     * @param realm User's realm full path\n+     * @param groups group the User is member of\n+     */\n+    void securityChecks(Set<String> authRealms, String key, String realm, Collection<String> groups);\n+\n     Map<String, Integer> countByRealm();\n \n     Map<String, Integer> countByStatus();"},{"sha":"92e4e3e51c4dc7dc3ebbc593dca21987c4c913dd","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractJPAJSONAnySearchDAO.java","status":"removed","additions":0,"deletions":82,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/cb34368513af1912152851192fa6e9cb38d00896/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/cb34368513af1912152851192fa6e9cb38d00896/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractJPAJSONAnySearchDAO.java?ref=cb34368513af1912152851192fa6e9cb38d00896","patch":"@@ -1,82 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one\n- * or more contributor license agreements.  See the NOTICE file\n- * distributed with this work for additional information\n- * regarding copyright ownership.  The ASF licenses this file\n- * to you under the Apache License, Version 2.0 (the\n- * \"License\"); you may not use this file except in compliance\n- * with the License.  You may obtain a copy of the License at\n- *\n- *   http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing,\n- * software distributed under the License is distributed on an\n- * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n- * KIND, either express or implied.  See the License for the\n- * specific language governing permissions and limitations\n- * under the License.\n- */\n-package org.apache.syncope.core.persistence.jpa.dao;\n-\n-import org.apache.syncope.common.lib.types.AnyTypeKind;\n-import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n-\n-abstract class AbstractJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n-\n-    @Override\n-    SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n-        return new SearchSupport(kind);\n-    }\n-\n-    protected void appendOp(final StringBuilder query, final AttrCond.Type condType, final boolean not) {\n-        switch (condType) {\n-            case LIKE:\n-            case ILIKE:\n-                if (not) {\n-                    query.append(\"NOT \");\n-                }\n-                query.append(\" LIKE \");\n-                break;\n-\n-            case GE:\n-                if (not) {\n-                    query.append('<');\n-                } else {\n-                    query.append(\">=\");\n-                }\n-                break;\n-\n-            case GT:\n-                if (not) {\n-                    query.append(\"<=\");\n-                } else {\n-                    query.append('>');\n-                }\n-                break;\n-\n-            case LE:\n-                if (not) {\n-                    query.append('>');\n-                } else {\n-                    query.append(\"<=\");\n-                }\n-                break;\n-\n-            case LT:\n-                if (not) {\n-                    query.append(\">=\");\n-                } else {\n-                    query.append('<');\n-                }\n-                break;\n-\n-            case EQ:\n-            case IEQ:\n-            default:\n-                if (not) {\n-                    query.append('!');\n-                }\n-                query.append('=');\n-        }\n-    }\n-}"},{"sha":"3900d9fb96115c94fb489c68816a5db9ec202289","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/MyJPAJSONAnySearchDAO.java","status":"modified","additions":51,"deletions":29,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FMyJPAJSONAnySearchDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -35,33 +35,7 @@\n import org.apache.syncope.core.provisioning.api.serialization.POJOHelper;\n import org.apache.syncope.core.persistence.api.entity.JSONPlainAttr;\n \n-public class MyJPAJSONAnySearchDAO extends AbstractJPAJSONAnySearchDAO {\n-\n-    @Override\n-    protected String buildAdminRealmsFilter(\n-            final Set<String> realmKeys,\n-            final SearchSupport svs,\n-            final List<Object> parameters) {\n-\n-        StringBuilder adminRealmsFilter = new StringBuilder(\"u.any_id IN (\").\n-                append(\"SELECT any_id FROM \").append(svs.field().name).\n-                append(\" WHERE realm_id IN (SELECT id AS realm_id FROM Realm\");\n-\n-        boolean firstRealm = true;\n-        for (String realmKey : realmKeys) {\n-            if (firstRealm) {\n-                adminRealmsFilter.append(\" WHERE\");\n-                firstRealm = false;\n-            } else {\n-                adminRealmsFilter.append(\" OR\");\n-            }\n-            adminRealmsFilter.append(\" id=?\").append(setParameter(parameters, realmKey));\n-        }\n-\n-        adminRealmsFilter.append(\"))\");\n-\n-        return adminRealmsFilter.toString();\n-    }\n+public class MyJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n \n     @Override\n     protected void processOBS(\n@@ -186,9 +160,57 @@ protected void fillAttrQuery(\n                         append(schema.isUniqueConstraint()\n                                 ? \"attrUniqueValue ->> '$.\" + key + '\\''\n                                 : key).\n-                        append(lower ? \")\" : \"\");\n+                        append(lower ? ')' : \"\");\n+\n+                switch (cond.getType()) {\n+                    case LIKE:\n+                    case ILIKE:\n+                        if (not) {\n+                            query.append(\"NOT \");\n+                        }\n+                        query.append(\" LIKE \");\n+                        break;\n \n-                appendOp(query, cond.getType(), not);\n+                    case GE:\n+                        if (not) {\n+                            query.append('<');\n+                        } else {\n+                            query.append(\">=\");\n+                        }\n+                        break;\n+\n+                    case GT:\n+                        if (not) {\n+                            query.append(\"<=\");\n+                        } else {\n+                            query.append('>');\n+                        }\n+                        break;\n+\n+                    case LE:\n+                        if (not) {\n+                            query.append('>');\n+                        } else {\n+                            query.append(\"<=\");\n+                        }\n+                        break;\n+\n+                    case LT:\n+                        if (not) {\n+                            query.append(\">=\");\n+                        } else {\n+                            query.append('<');\n+                        }\n+                        break;\n+\n+                    case EQ:\n+                    case IEQ:\n+                    default:\n+                        if (not) {\n+                            query.append('!');\n+                        }\n+                        query.append('=');\n+                }\n \n                 query.append(lower ? \"LOWER(\" : \"\").\n                         append('?').append(setParameter(parameters, value))."},{"sha":"3b96a5670f65996af5637fe171835e51d4a884a7","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":82,"deletions":298,"changes":380,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -19,24 +19,17 @@\n package org.apache.syncope.core.persistence.jpa.dao;\n \n import java.util.ArrayList;\n-import java.util.Date;\n-import java.util.HashSet;\n import java.util.List;\n import java.util.Optional;\n import java.util.Set;\n-import java.util.regex.Matcher;\n-import java.util.regex.Pattern;\n import java.util.stream.Collectors;\n import javax.persistence.Query;\n-import javax.persistence.TemporalType;\n-import org.apache.commons.lang3.ArrayUtils;\n import org.apache.commons.lang3.StringUtils;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.commons.lang3.tuple.Triple;\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n@@ -53,14 +46,11 @@\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.DynRealm;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n \n-public class PGJPAJSONAnySearchDAO extends AbstractJPAJSONAnySearchDAO {\n+public class PGJPAJSONAnySearchDAO extends JPAAnySearchDAO {\n \n     protected static final String ALWAYS_FALSE_ASSERTION = \"1=2\";\n \n@@ -90,7 +80,19 @@ protected void parseOrderByForPlainSchema(\n \n         item.select = fieldName + \" -> 0 AS \" + fieldName;\n         item.where = StringUtils.EMPTY;\n-        item.orderBy = fieldName + \" \" + clause.getDirection().name();\n+        item.orderBy = fieldName + ' ' + clause.getDirection().name();\n+    }\n+\n+    @Override\n+    protected void parseOrderByForField(\n+            final SearchSupport svs,\n+            final OrderBySupport.Item item,\n+            final String fieldName,\n+            final OrderByClause clause) {\n+\n+        item.select = svs.table().alias + '.' + fieldName;\n+        item.where = StringUtils.EMPTY;\n+        item.orderBy = svs.table().alias + '.' + fieldName + ' ' + clause.getDirection().name();\n     }\n \n     protected void fillAttrQuery(\n@@ -107,7 +109,7 @@ protected void fillAttrQuery(\n         if (not && !(cond instanceof AnyCond)) {\n             query.append(\"NOT (\");\n             fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n-            query.append(\")\");\n+            query.append(')');\n         } else if (not && cond.getType() == AttrCond.Type.ISNULL) {\n             cond.setType(AttrCond.Type.ISNOTNULL);\n             fillAttrQuery(anyUtils, query, attrValue, schema, cond, true, parameters, svs);\n@@ -241,12 +243,12 @@ protected String getQuery(\n \n         switch (cond.getType()) {\n             case ISNOTNULL:\n-                query.append(not ? \" NOT \" : \" \").\n+                query.append(not ? \" NOT \" : ' ').\n                         append(\"jsonb_path_exists(\").append(checked.getLeft().getKey()).append(\",'$[*]')\");\n                 break;\n \n             case ISNULL:\n-                query.append(not ? \" \" : \" NOT \").\n+                query.append(not ? ' ' : \" NOT \").\n                         append(\"jsonb_path_exists(\").append(checked.getLeft().getKey()).append(\",'$[*]')\");\n                 break;\n \n@@ -285,7 +287,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        StringBuilder query = new StringBuilder(\"(\");\n+        StringBuilder query = new StringBuilder().append('(');\n \n         if (not) {\n             query.append(\"id NOT IN (\");\n@@ -307,9 +309,9 @@ protected String getQuery(\n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dynrolemembership().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRole())).\n-                append(\")\");\n+                append(')');\n \n-        query.append(\")\");\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -321,7 +323,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        StringBuilder query = new StringBuilder(\"(\");\n+        StringBuilder query = new StringBuilder().append('(');\n \n         if (not) {\n             query.append(\"id NOT IN (\");\n@@ -343,9 +345,9 @@ protected String getQuery(\n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dynpriv().name).append(\" WHERE \").\n                 append(\"privilege_id=?\").append(setParameter(parameters, cond.getPrivilege())).\n-                append(\")\");\n+                append(')');\n \n-        query.append(\")\");\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -368,7 +370,7 @@ protected String getQuery(\n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dynrealmmembership().name).append(\" WHERE \").\n                 append(\"dynRealm_id=?\").append(setParameter(parameters, cond.getDynRealm())).\n-                append(\")\");\n+                append(')');\n \n         return query.toString();\n     }\n@@ -418,7 +420,7 @@ protected String getQuery(\n             return ALWAYS_FALSE_ASSERTION;\n         }\n \n-        StringBuilder query = new StringBuilder(\"(\");\n+        StringBuilder query = new StringBuilder().append('(');\n         if (cond.isFromGroup()) {\n             realmDAO.findDescendants(realm).forEach(current -> query.append(\"realm_id=?\").\n                     append(setParameter(parameters, current.getKey())).append(\" OR \"));\n@@ -430,7 +432,7 @@ protected String getQuery(\n             query.append(\"realm_id=?\").append(setParameter(parameters, realmDAO.getRoot().getKey()));\n         }\n \n-        query.append(\")\");\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -449,7 +451,7 @@ protected String getQuery(\n             return ALWAYS_FALSE_ASSERTION;\n         }\n \n-        StringBuilder query = new StringBuilder(\"(\");\n+        StringBuilder query = new StringBuilder().append('(');\n \n         if (not) {\n             query.append(\"id NOT IN (\");\n@@ -471,9 +473,9 @@ protected String getQuery(\n         query.append(\"SELECT DISTINCT group_id AS any_id FROM \").\n                 append(new SearchSupport(AnyTypeKind.ANY_OBJECT).membership().name).append(\" WHERE \").\n                 append(\"any_id=?\").append(setParameter(parameters, memberKey)).\n-                append(\")\");\n+                append(')');\n \n-        query.append(\")\");\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -485,7 +487,7 @@ protected String getQuery(\n             final List<Object> parameters,\n             final SearchSupport svs) {\n \n-        StringBuilder query = new StringBuilder(\"(\");\n+        StringBuilder query = new StringBuilder().append('(');\n \n         if (not) {\n             query.append(\"id NOT IN (\");\n@@ -501,7 +503,7 @@ protected String getQuery(\n                 append(\" WHERE type=?\").append(setParameter(parameters, cond.getRelationshipTypeKey())).\n                 append(')');\n \n-        query.append(\")\");\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -520,7 +522,7 @@ protected String getQuery(\n             return ALWAYS_FALSE_ASSERTION;\n         }\n \n-        StringBuilder query = new StringBuilder(\"(\");\n+        StringBuilder query = new StringBuilder().append('(');\n \n         if (not) {\n             query.append(\"id NOT IN (\");\n@@ -533,7 +535,7 @@ protected String getQuery(\n                 append(\"right_any_id=?\").append(setParameter(parameters, rightAnyObjectKey)).\n                 append(')');\n \n-        query.append(\")\");\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -556,7 +558,7 @@ protected String getQuery(\n                 map(key -> \"group_id=?\" + setParameter(parameters, key)).\n                 collect(Collectors.joining(\" OR \"));\n \n-        StringBuilder query = new StringBuilder(\"(\");\n+        StringBuilder query = new StringBuilder().append('(');\n \n         if (not) {\n             query.append(\"id NOT IN (\");\n@@ -566,7 +568,7 @@ protected String getQuery(\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.membership().name).append(\" WHERE \").\n-                append(\"(\").append(where).append(\")\").\n+                append('(').append(where).append(')').\n                 append(\") \");\n \n         if (not) {\n@@ -577,10 +579,10 @@ protected String getQuery(\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.dyngroupmembership().name).append(\" WHERE \").\n-                append(\"(\").append(where).append(\")\").\n-                append(\")\");\n+                append('(').append(where).append(')').\n+                append(')');\n \n-        query.append(\")\");\n+        query.append(')');\n \n         return query.toString();\n     }\n@@ -618,10 +620,14 @@ protected String buildAdminRealmsFilter(\n             final SearchSupport svs,\n             final List<Object> parameters) {\n \n+        if (realmKeys.isEmpty()) {\n+            return \"realm_id IS NOT NULL\";\n+        }\n+\n         String realmKeysArg = realmKeys.stream().\n                 map(realmKey -> \"?\" + setParameter(parameters, realmKey)).\n                 collect(Collectors.joining(\",\"));\n-        return \"realm_id IN (\" + realmKeysArg + \")\";\n+        return \"realm_id IN (\" + realmKeysArg + ')';\n     }\n \n     @Override\n@@ -630,17 +636,15 @@ protected int doCount(final Set<String> adminRealms, final SearchCond cond, fina\n \n         SearchSupport svs = buildSearchSupport(kind);\n \n-        Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+        Triple<String, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n         Pair<StringBuilder, Set<String>> queryInfo =\n-                getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n+                getQuery(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), parameters, svs);\n \n         StringBuilder queryString =\n-                new StringBuilder(\"SELECT count(\").append(svs.table().alias).append(\".id\").append(\")\");\n+                new StringBuilder(\"SELECT count(\").append(svs.table().alias).append(\".id\").append(')');\n \n-        buildFrom(queryString, queryInfo, svs, null);\n-\n-        buildWhere(queryString, queryInfo, filter, svs, null);\n+        buildFromAndWhere(queryString, queryInfo, filter.getLeft(), svs, null);\n \n         Query countQuery = entityManager().createNativeQuery(queryString.toString());\n         fillWithParameters(countQuery, parameters);\n@@ -663,9 +667,9 @@ protected <T extends Any<?>> List<T> doSearch(\n \n             SearchSupport svs = buildSearchSupport(kind);\n \n-            Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+            Triple<String, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n-            SearchCond effectiveCond = buildEffectiveCond(cond, filter.getRight());\n+            SearchCond effectiveCond = buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind);\n \n             // 1. get the query string from the search condition\n             Pair<StringBuilder, Set<String>> queryInfo = getQuery(effectiveCond, parameters, svs);\n@@ -674,11 +678,9 @@ protected <T extends Any<?>> List<T> doSearch(\n             OrderBySupport obs = parseOrderBy(svs, orderBy);\n \n             StringBuilder queryString = new StringBuilder(\"SELECT \").append(svs.table().alias).append(\".id\");\n-            obs.items.forEach(item -> queryString.append(\",\").append(item.select));\n-\n-            buildFrom(queryString, queryInfo, svs, obs);\n+            obs.items.forEach(item -> queryString.append(',').append(item.select));\n \n-            buildWhere(queryString, queryInfo, filter, svs, obs);\n+            buildFromAndWhere(queryString, queryInfo, filter.getLeft(), svs, obs);\n \n             LOG.debug(\"Query: {}, parameters: {}\", queryString, parameters);\n \n@@ -710,119 +712,21 @@ protected <T extends Any<?>> List<T> doSearch(\n         return List.of();\n     }\n \n-    protected StringBuilder buildOrderBy(final OrderBySupport obs) {\n-        StringBuilder orderBy = new StringBuilder();\n-\n-        if (!obs.items.isEmpty()) {\n-            obs.items.forEach(item -> orderBy.append(item.orderBy).append(','));\n-\n-            orderBy.insert(0, \" ORDER BY \");\n-            orderBy.deleteCharAt(orderBy.length() - 1);\n-        }\n-\n-        return orderBy;\n-    }\n-\n-    protected Pair<StringBuilder, Set<String>> getQuery(\n-            final SearchCond cond, final List<Object> parameters, final SearchSupport svs) {\n-\n-        boolean not = cond.getType() == SearchCond.Type.NOT_LEAF;\n-\n-        StringBuilder query = new StringBuilder();\n-        Set<String> involvedPlainAttrs = new HashSet<>();\n-\n-        switch (cond.getType()) {\n-            case LEAF:\n-            case NOT_LEAF:\n-                cond.getLeaf(AnyTypeCond.class).\n-                        filter(leaf -> AnyTypeKind.ANY_OBJECT == svs.anyTypeKind).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                cond.getLeaf(RelationshipTypeCond.class).\n-                        filter(leaf -> AnyTypeKind.GROUP != svs.anyTypeKind).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                cond.getLeaf(RelationshipCond.class).\n-                        filter(leaf -> AnyTypeKind.GROUP != svs.anyTypeKind).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                cond.getLeaf(MembershipCond.class).\n-                        filter(leaf -> AnyTypeKind.GROUP != svs.anyTypeKind).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                cond.getLeaf(MemberCond.class).\n-                        filter(leaf -> AnyTypeKind.GROUP == svs.anyTypeKind).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                cond.getLeaf(AssignableCond.class).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, parameters, svs)));\n-\n-                cond.getLeaf(RoleCond.class).\n-                        filter(leaf -> AnyTypeKind.USER == svs.anyTypeKind).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                cond.getLeaf(PrivilegeCond.class).\n-                        filter(leaf -> AnyTypeKind.USER == svs.anyTypeKind).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                cond.getLeaf(DynRealmCond.class).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                cond.getLeaf(ResourceCond.class).\n-                        ifPresent(leaf -> query.append(getQuery(leaf, not, parameters, svs)));\n-\n-                Optional<AnyCond> anyCond = cond.getLeaf(AnyCond.class);\n-                if (anyCond.isPresent()) {\n-                    query.append(getQuery(anyCond.get(), not, parameters, svs));\n-                } else {\n-                    cond.getLeaf(AttrCond.class).ifPresent(leaf -> {\n-                        query.append(getQuery(leaf, not, parameters, svs));\n-                        try {\n-                            involvedPlainAttrs.add(check(leaf, svs.anyTypeKind).getLeft().getKey());\n-                        } catch (IllegalArgumentException e) {\n-                            // ignore\n-                        }\n-                    });\n-                }\n-\n-                // allow for additional search conditions\n-                getQueryForCustomConds(cond, parameters, svs, not, query);\n-                break;\n-\n-            case AND:\n-                Pair<StringBuilder, Set<String>> leftAndInfo = getQuery(cond.getLeft(), parameters, svs);\n-                involvedPlainAttrs.addAll(leftAndInfo.getRight());\n-\n-                Pair<StringBuilder, Set<String>> rigthAndInfo = getQuery(cond.getRight(), parameters, svs);\n-                involvedPlainAttrs.addAll(rigthAndInfo.getRight());\n-\n-                query.append(\"(\").\n-                        append(leftAndInfo.getKey()).\n-                        append(\" AND \").\n-                        append(rigthAndInfo.getKey()).\n-                        append(\")\");\n-                break;\n-\n-            case OR:\n-                Pair<StringBuilder, Set<String>> leftOrInfo = getQuery(cond.getLeft(), parameters, svs);\n-                involvedPlainAttrs.addAll(leftOrInfo.getRight());\n-\n-                Pair<StringBuilder, Set<String>> rigthOrInfo = getQuery(cond.getRight(), parameters, svs);\n-                involvedPlainAttrs.addAll(rigthOrInfo.getRight());\n-\n-                query.append(\"(\").\n-                        append(leftOrInfo.getKey()).\n-                        append(\" OR \").\n-                        append(rigthOrInfo.getKey()).\n-                        append(\")\");\n-                break;\n-\n-            default:\n-        }\n-\n-        return Pair.of(query, involvedPlainAttrs);\n+    @Override\n+    protected void queryOp(\n+            final StringBuilder query,\n+            final String op,\n+            final Pair<StringBuilder, Set<String>> leftInfo,\n+            final Pair<StringBuilder, Set<String>> rightInfo) {\n+\n+        query.append('(').\n+                append(leftInfo.getKey()).\n+                append(' ').append(op).append(' ').\n+                append(rightInfo.getKey()).\n+                append(')');\n     }\n \n+    @Override\n     protected void fillAttrQuery(\n             final StringBuilder query,\n             final PlainAttrValue attrValue,\n@@ -836,7 +740,7 @@ protected void fillAttrQuery(\n         if (not && !(cond instanceof AnyCond)) {\n             query.append(\"NOT (\");\n             fillAttrQuery(query, attrValue, schema, cond, false, parameters, svs);\n-            query.append(\")\");\n+            query.append(')');\n         } else if (not && cond.getType() == AttrCond.Type.ISNULL) {\n             cond.setType(AttrCond.Type.ISNOTNULL);\n             fillAttrQuery(query, attrValue, schema, cond, true, parameters, svs);\n@@ -846,7 +750,7 @@ protected void fillAttrQuery(\n \n             String column = cond.getSchema();\n             if ((schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum) && lower) {\n-                column = \"LOWER (\" + column + \")\";\n+                column = \"LOWER (\" + column + ')';\n             }\n \n             switch (cond.getType()) {\n@@ -933,137 +837,27 @@ protected void fillAttrQuery(\n         }\n     }\n \n-    protected void fillWithParameters(final Query query, final List<Object> parameters) {\n-        for (int i = 0; i < parameters.size(); i++) {\n-            if (parameters.get(i) instanceof Date) {\n-                query.setParameter(i + 1, (Date) parameters.get(i), TemporalType.TIMESTAMP);\n-            } else if (parameters.get(i) instanceof Boolean) {\n-                query.setParameter(i + 1, ((Boolean) parameters.get(i))\n-                        ? 1\n-                        : 0);\n-            } else {\n-                query.setParameter(i + 1, parameters.get(i));\n-            }\n-        }\n-    }\n-\n-    protected OrderBySupport parseOrderBy(\n-            final SearchSupport svs,\n-            final List<OrderByClause> orderBy) {\n-\n-        AnyUtils anyUtils = anyUtilsFactory.getInstance(svs.anyTypeKind);\n-\n-        OrderBySupport obs = new OrderBySupport();\n-\n-        Set<String> orderByUniquePlainSchemas = new HashSet<>();\n-        Set<String> orderByNonUniquePlainSchemas = new HashSet<>();\n-        orderBy.forEach(clause -> {\n-            OrderBySupport.Item item = new OrderBySupport.Item();\n-\n-            parseOrderByForCustom(svs, clause, item, obs);\n-\n-            if (item.isEmpty()) {\n-                if (anyUtils.getField(clause.getField()) == null) {\n-                    PlainSchema schema = schemaDAO.find(clause.getField());\n-                    if (schema != null) {\n-                        if (schema.isUniqueConstraint()) {\n-                            orderByUniquePlainSchemas.add(schema.getKey());\n-                        } else {\n-                            orderByNonUniquePlainSchemas.add(schema.getKey());\n-                        }\n-                        if (orderByUniquePlainSchemas.size() > 1 || orderByNonUniquePlainSchemas.size() > 1) {\n-                            SyncopeClientException invalidSearch =\n-                                    SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n-                            invalidSearch.getElements().add(\"Order by more than one attribute is not allowed; \"\n-                                    + \"remove one from \" + (orderByUniquePlainSchemas.size() > 1\n-                                    ? orderByUniquePlainSchemas : orderByNonUniquePlainSchemas));\n-                            throw invalidSearch;\n-                        }\n-                        parseOrderByForPlainSchema(svs, obs, item, clause, schema, clause.getField());\n-                    }\n-                } else {\n-                    // Manage difference among external key attribute and internal JPA @Id\n-                    String fieldName = \"key\".equals(clause.getField()) ? \"id\" : clause.getField();\n-\n-                    // Adjust field name to column name\n-                    if (ArrayUtils.contains(RELATIONSHIP_FIELDS, fieldName)) {\n-                        fieldName += \"_id\";\n-                    }\n-\n-                    obs.views.add(svs.field());\n-\n-                    item.select = svs.table().alias + \".\" + fieldName;\n-                    item.where = StringUtils.EMPTY;\n-                    item.orderBy = svs.table().alias + \".\" + fieldName + \" \" + clause.getDirection().name();\n-                }\n-            }\n-\n-            if (item.isEmpty()) {\n-                LOG.warn(\"Cannot build any valid clause from {}\", clause);\n-            } else {\n-                obs.items.add(item);\n-            }\n-        });\n-\n-        return obs;\n-    }\n-\n-    protected Pair<String, Set<String>> getAdminRealmsFilter(\n-            final Set<String> adminRealms,\n-            final SearchSupport svs,\n-            final List<Object> parameters) {\n-\n-        Set<String> realmKeys = new HashSet<>();\n-        Set<String> dynRealmKeys = new HashSet<>();\n-        RealmUtils.normalize(adminRealms).forEach(realmPath -> {\n-            if (realmPath.startsWith(\"/\")) {\n-                Realm realm = realmDAO.findByFullPath(realmPath);\n-                if (realm == null) {\n-                    SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n-                    noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n-                    throw noRealm;\n-                } else {\n-                    realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n-                            map(Entity::getKey).collect(Collectors.toSet()));\n-                }\n-            } else {\n-                DynRealm dynRealm = dynRealmDAO.find(realmPath);\n-                if (dynRealm == null) {\n-                    LOG.warn(\"Ignoring invalid dynamic realm {}\", realmPath);\n-                } else {\n-                    dynRealmKeys.add(dynRealm.getKey());\n-                }\n-            }\n-        });\n-        if (!dynRealmKeys.isEmpty()) {\n-            realmKeys.addAll(realmDAO.findAll().stream().\n-                    map(Entity::getKey).collect(Collectors.toSet()));\n-        }\n-\n-        return Pair.of(buildAdminRealmsFilter(realmKeys, svs, parameters), dynRealmKeys);\n-    }\n-\n-    protected void buildFrom(\n-            final StringBuilder query,\n+    protected void buildFromAndWhere(\n+            final StringBuilder queryString,\n             final Pair<StringBuilder, Set<String>> queryInfo,\n+            final String realmsFilter,\n             final SearchSupport svs,\n             final OrderBySupport obs) {\n \n-        query.append(\" FROM \").append(svs.table().name).append(\" \").append(svs.table().alias);\n+        queryString.append(\" FROM \").append(svs.table().name).append(' ').append(svs.table().alias);\n \n         Set<String> schemas = queryInfo.getRight();\n \n         if (obs != null) {\n             obs.views.stream().\n                     filter(view -> !svs.field().name.equals(view.name) && !svs.table().name.equals(view.name)).\n-                    map(view -> view.name + \" \" + view.alias).\n-                    forEach(view -> query.append(',').append(view));\n+                    map(view -> view.name + ' ' + view.alias).\n+                    forEach(view -> queryString.append(',').append(view));\n \n-            Pattern pattern = Pattern.compile(\"(.*) -> 0 AS .*\");\n             obs.items.forEach(item -> {\n-                Matcher matcher = pattern.matcher(item.select);\n-                if (matcher.find()) {\n-                    schemas.add(matcher.group(1));\n+                String schema = StringUtils.substringBefore(item.orderBy, ' ');\n+                if (StringUtils.isNotBlank(schema)) {\n+                    schemas.add(schema);\n                 }\n             });\n         }\n@@ -1075,36 +869,26 @@ protected void buildFrom(\n                 // just to be sure\n                 LOG.warn(\"Ignoring invalid schema '{}'\", schema);\n             } else {\n-                query.append(\",\").\n+                queryString.append(',').\n                         append(\"jsonb_path_query_array(plainattrs, '$[*] ? (@.schema==\\\"\").\n                         append(schema).append(\"\\\").\").\n                         append(\"\\\"\").append(pschema.isUniqueConstraint() ? \"uniqueValue\" : \"values\").append(\"\\\"')\").\n                         append(\" AS \").append(schema);\n             }\n         });\n-    }\n-\n-    protected void buildWhere(\n-            final StringBuilder query,\n-            final Pair<StringBuilder, Set<String>> queryInfo,\n-            final Pair<String, Set<String>> realms,\n-            final SearchSupport svs,\n-            final OrderBySupport obs) {\n \n         StringBuilder where = new StringBuilder();\n \n         if (queryInfo.getLeft().length() > 0) {\n             where.append(\" WHERE \").append(queryInfo.getLeft());\n         }\n \n-        if (!realms.getLeft().isEmpty()) {\n-            if (queryInfo.getLeft().length() == 0) {\n-                where.append(\" WHERE \");\n-            } else {\n-                where.append(\" AND \");\n-            }\n-            where.append(realms.getLeft());\n+        if (queryInfo.getLeft().length() == 0) {\n+            where.append(\" WHERE \");\n+        } else {\n+            where.append(\" AND \");\n         }\n+        where.append(realmsFilter);\n \n         if (obs != null) {\n             String obsWhere = obs.views.stream().\n@@ -1121,6 +905,6 @@ protected void buildWhere(\n             }\n         }\n \n-        query.append(where);\n+        queryString.append(where);\n     }\n }"},{"sha":"d7f316da7340da6b03fa037546606855f91a2eec","filename":"core/persistence-jpa-json/src/main/resources/domains/MasterContent.xml","status":"modified","additions":17,"deletions":1,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -78,7 +78,7 @@ under the License.\n                mandatoryCondition=\"true\" multivalue=\"0\" uniqueConstraint=\"0\" readonly=\"0\"/>\n     \n   <SyncopeConf id=\"cd64d66f-6fff-4008-b966-a06b1cc1436d\"\n-               plainAttrs=\"[{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;SSHA256&quot;}],&quot;schema&quot;:&quot;password.cipher.algorithm&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;&quot;}],&quot;schema&quot;:&quot;notificationjob.cronExpression&quot;},{&quot;values&quot;:[{&quot;longValue&quot;:3}],&quot;schema&quot;:&quot;notification.maxRetries&quot;},{&quot;values&quot;:[{&quot;longValue&quot;:256}],&quot;schema&quot;:&quot;token.length&quot;},{&quot;values&quot;:[{&quot;longValue&quot;:60}],&quot;schema&quot;:&quot;token.expireTime&quot;},{&quot;values&quot;:[{&quot;booleanValue&quot;:true}],&quot;schema&quot;:&quot;selfRegistration.allowed&quot;},{&quot;values&quot;:[{&quot;booleanValue&quot;:true}],&quot;schema&quot;:&quot;passwordReset.allowed&quot;},{&quot;values&quot;:[{&quot;booleanValue&quot;:true}],&quot;schema&quot;:&quot;passwordReset.securityQuestion&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;username&quot;},{&quot;stringValue&quot;:&quot;email&quot;}],&quot;schema&quot;:&quot;authentication.attributes&quot;},{&quot;values&quot;:[{&quot;stringValue&quot;:&quot;created&quot;},{&quot;stringValue&quot;:&quot;active&quot;}],&quot;schema&quot;:&quot;authentication.statuses&quot;},{&quot;values&quot;:[{&quot;booleanValue&quot;:true}],&quot;schema&quot;:&quot;log.lastlogindate&quot;},{&quot;values&quot;:[{&quot;booleanValue&quot;:false}],&quot;schema&quot;:&quot;return.password.value&quot;},{&quot;values&quot;:[{&quot;longValue&quot;:120}],&quot;schema&quot;:&quot;jwt.lifetime.minutes&quot;},{&quot;values&quot;:[{&quot;longValue&quot;:10}]}]\"/>\n+               plainAttrs='[{\"values\":[{\"stringValue\":\"SSHA256\"}],\"schema\":\"password.cipher.algorithm\"},{\"values\":[{\"stringValue\":\"\"}],\"schema\":\"notificationjob.cronExpression\"},{\"values\":[{\"longValue\":3}],\"schema\":\"notification.maxRetries\"},{\"values\":[{\"longValue\":256}],\"schema\":\"token.length\"},{\"values\":[{\"longValue\":60}],\"schema\":\"token.expireTime\"},{\"values\":[{\"booleanValue\":true}],\"schema\":\"selfRegistration.allowed\"},{\"values\":[{\"booleanValue\":true}],\"schema\":\"passwordReset.allowed\"},{\"values\":[{\"booleanValue\":true}],\"schema\":\"passwordReset.securityQuestion\"},{\"values\":[{\"stringValue\":\"username\"},{\"stringValue\":\"email\"}],\"schema\":\"authentication.attributes\"},{\"values\":[{\"stringValue\":\"created\"},{\"stringValue\":\"active\"}],\"schema\":\"authentication.statuses\"},{\"values\":[{\"booleanValue\":true}],\"schema\":\"log.lastlogindate\"},{\"values\":[{\"booleanValue\":false}],\"schema\":\"return.password.value\"},{\"values\":[{\"longValue\":120}],\"schema\":\"jwt.lifetime.minutes\"}]'/>\n \n   <AnyType id=\"USER\" kind=\"USER\"/>\n   <AnyTypeClass id=\"BaseUser\"/>\n@@ -171,4 +171,20 @@ we are happy to inform you that the password request was successfully executed f\n                   body='{\"_class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n   <ReportReportlet report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" implementation_id=\"ReconciliationReportletConf\"/>\n \n+  <SyncopeRole id=\"GROUP_OWNER\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_CREATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_DELETE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"RELATIONSHIPTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"REALM_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n </dataset>"},{"sha":"0afe5240deca508ac8390b84140d290ddfc9aa47","filename":"core/persistence-jpa-json/src/test/resources/domains/MasterContent.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -2411,6 +2411,23 @@ $$ }&#10;\n             logout=\"0\" csrf=\"1\"\n             predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n+  <SyncopeRole id=\"GROUP_OWNER\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_CREATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_DELETE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"RELATIONSHIPTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"REALM_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n+\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AUTHENTICATION]:[validate]:[SUCCESS]\" logLevel=\"DEBUG\"/>"},{"sha":"141edb13b91e3738a8a231ff1092927a64ceeb9e","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnySearchDAO.java","status":"modified","additions":35,"deletions":5,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnySearchDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -20,6 +20,7 @@\n \n import java.lang.annotation.Annotation;\n import java.lang.reflect.Field;\n+import java.util.ArrayList;\n import java.util.Comparator;\n import java.util.List;\n import java.util.Optional;\n@@ -41,6 +42,7 @@\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AbstractSearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n@@ -94,15 +96,43 @@ public abstract class AbstractAnySearchDAO extends AbstractDAO<Any<?>> implement\n     @Autowired\n     protected AnyUtilsFactory anyUtilsFactory;\n \n-    protected static SearchCond buildEffectiveCond(final SearchCond cond, final Set<String> dynRealmKeys) {\n-        List<SearchCond> effectiveConds = dynRealmKeys.stream().map(dynRealmKey -> {\n+    protected static SearchCond buildEffectiveCond(\n+            final SearchCond cond,\n+            final Set<String> dynRealmKeys,\n+            final Set<String> groupOwners,\n+            final AnyTypeKind kind) {\n+\n+        List<SearchCond> result = new ArrayList<>();\n+        result.add(cond);\n+\n+        List<SearchCond> dynRealmConds = dynRealmKeys.stream().map(key -> {\n             DynRealmCond dynRealmCond = new DynRealmCond();\n-            dynRealmCond.setDynRealm(dynRealmKey);\n+            dynRealmCond.setDynRealm(key);\n             return SearchCond.getLeaf(dynRealmCond);\n         }).collect(Collectors.toList());\n-        effectiveConds.add(cond);\n+        if (!dynRealmConds.isEmpty()) {\n+            result.add(SearchCond.getOr(dynRealmConds));\n+        }\n+\n+        List<SearchCond> groupOwnerConds = groupOwners.stream().map(key -> {\n+            AbstractSearchCond asc;\n+            if (kind == AnyTypeKind.GROUP) {\n+                AnyCond anyCond = new AnyCond(AttrCond.Type.EQ);\n+                anyCond.setSchema(\"id\");\n+                anyCond.setExpression(key);\n+                asc = anyCond;\n+            } else {\n+                MembershipCond membershipCond = new MembershipCond();\n+                membershipCond.setGroup(key);\n+                asc = membershipCond;\n+            }\n+            return SearchCond.getLeaf(asc);\n+        }).collect(Collectors.toList());\n+        if (!groupOwnerConds.isEmpty()) {\n+            result.add(SearchCond.getOr(groupOwnerConds));\n+        }\n \n-        return SearchCond.getAnd(effectiveConds);\n+        return SearchCond.getAnd(result);\n     }\n \n     protected abstract int doCount(Set<String> adminRealms, SearchCond cond, AnyTypeKind kind);"},{"sha":"b50c9d28bbc4e7f57f135bc90ea385ce56e7d4cf","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":32,"deletions":16,"changes":48,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -26,6 +26,7 @@\n import java.util.LinkedHashMap;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.persistence.NoResultException;\n@@ -57,6 +58,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAURelationship;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n import org.springframework.transaction.annotation.Transactional;\n@@ -95,9 +97,7 @@ public Map<AnyType, Integer> countByType() {\n         List<Object[]> results = query.getResultList();\n \n         Map<AnyType, Integer> countByRealm = new LinkedHashMap<>(results.size());\n-        for (Object[] result : results) {\n-            countByRealm.put((AnyType) result[0], ((Number) result[1]).intValue());\n-        }\n+        results.forEach(result -> countByRealm.put((AnyType) result[0], ((Number) result[1]).intValue()));\n \n         return Collections.unmodifiableMap(countByRealm);\n     }\n@@ -116,23 +116,39 @@ public Map<String, Integer> countByRealm(final AnyType anyType) {\n                 result -> ((Number) result[1]).intValue()));\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n-    protected void securityChecks(final AnyObject anyObject) {\n-        Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n-        Set<String> authRealms = authorizations.containsKey(AnyEntitlement.READ.getFor(anyObject.getType().getKey()))\n-                ? authorizations.get(AnyEntitlement.READ.getFor(anyObject.getType().getKey()))\n-                : Set.of();\n-        boolean authorized = authRealms.stream().\n-                anyMatch(realm -> anyObject.getRealm().getFullPath().startsWith(realm));\n+    public void securityChecks(\n+            final Set<String> authRealms,\n+            final String key,\n+            final String realm,\n+            final Collection<String> groups) {\n+\n+        // 1. check if AuthContextUtils.getUsername() is owner of at least one group of which anyObject is member\n+        boolean authorized = authRealms.stream().map(RealmUtils::parseGroupOwnerRealm).filter(Optional::isPresent).\n+                anyMatch(pair -> groups.contains(pair.get().getRight()));\n+\n+        // 2. check if anyObject is in at least one DynRealm for which AuthContextUtils.getUsername() owns entitlement\n         if (!authorized) {\n-            authorized = findDynRealms(anyObject.getKey()).stream().\n-                    filter(authRealms::contains).\n-                    count() > 0;\n+            authorized = findDynRealms(key).stream().anyMatch(authRealms::contains);\n         }\n-        if (authRealms.isEmpty() || !authorized) {\n-            throw new DelegatedAdministrationException(\n-                    anyObject.getRealm().getFullPath(), AnyTypeKind.ANY_OBJECT.name(), anyObject.getKey());\n+\n+        // 3. check if anyObject is in Realm (or descendants) for which AuthContextUtils.getUsername() owns entitlement\n+        if (!authorized) {\n+            authorized = authRealms.stream().anyMatch(realm::startsWith);\n         }\n+\n+        if (!authorized) {\n+            throw new DelegatedAdministrationException(realm, AnyTypeKind.ANY_OBJECT.name(), key);\n+        }\n+    }\n+\n+    @Override\n+    protected void securityChecks(final AnyObject anyObject) {\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().\n+                getOrDefault(AnyEntitlement.READ.getFor(anyObject.getType().getKey()), Set.of());\n+\n+        securityChecks(authRealms, anyObject.getKey(), anyObject.getRealm().getFullPath(), findAllGroupKeys(anyObject));\n     }\n \n     @Override"},{"sha":"1d4761ab487e12399d4c661cd5312c5c1ef74a59","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":84,"deletions":61,"changes":145,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -35,28 +35,27 @@\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n+import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n+import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n+import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AnyTypeCond;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.DynRealmCond;\n import org.apache.syncope.core.persistence.api.dao.search.MemberCond;\n-import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n-import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.PrivilegeCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipCond;\n import org.apache.syncope.core.persistence.api.dao.search.RelationshipTypeCond;\n-import org.apache.syncope.core.persistence.api.dao.search.ResourceCond;\n-import org.apache.syncope.core.persistence.api.dao.search.RoleCond;\n-import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.Any;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n-import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n \n /**\n  * Search engine implementation for users, groups and any objects, based on self-updating SQL views.\n@@ -70,30 +69,39 @@ protected String buildAdminRealmsFilter(\n             final SearchSupport svs,\n             final List<Object> parameters) {\n \n-        List<String> realmKeyArgs = realmKeys.stream().\n+        if (realmKeys.isEmpty()) {\n+            return \"u.any_id IS NOT NULL\";\n+        }\n+\n+        String realmKeysArg = realmKeys.stream().\n                 map(realmKey -> \"?\" + setParameter(parameters, realmKey)).\n-                collect(Collectors.toList());\n+                collect(Collectors.joining(\",\"));\n         return \"u.any_id IN (SELECT any_id FROM \" + svs.field().name\n-                + \" WHERE realm_id IN (\" + StringUtils.join(realmKeyArgs, \", \") + \"))\";\n+                + \" WHERE realm_id IN (\" + realmKeysArg + \"))\";\n     }\n \n-    private Pair<String, Set<String>> getAdminRealmsFilter(\n+    protected Triple<String, Set<String>, Set<String>> getAdminRealmsFilter(\n             final Set<String> adminRealms,\n             final SearchSupport svs,\n             final List<Object> parameters) {\n \n         Set<String> realmKeys = new HashSet<>();\n         Set<String> dynRealmKeys = new HashSet<>();\n-        RealmUtils.normalize(adminRealms).forEach(realmPath -> {\n-            if (realmPath.startsWith(\"/\")) {\n+        Set<String> groupOwners = new HashSet<>();\n+\n+        adminRealms.forEach(realmPath -> {\n+            Optional<Pair<String, String>> goRealm = RealmUtils.parseGroupOwnerRealm(realmPath);\n+            if (goRealm.isPresent()) {\n+                groupOwners.add(goRealm.get().getRight());\n+            } else if (realmPath.startsWith(\"/\")) {\n                 Realm realm = realmDAO.findByFullPath(realmPath);\n                 if (realm == null) {\n                     SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n                     noRealm.getElements().add(\"Invalid realm specified: \" + realmPath);\n                     throw noRealm;\n                 } else {\n                     realmKeys.addAll(realmDAO.findDescendants(realm).stream().\n-                            map(Entity::getKey).collect(Collectors.toSet()));\n+                            map(Realm::getKey).collect(Collectors.toSet()));\n                 }\n             } else {\n                 DynRealm dynRealm = dynRealmDAO.find(realmPath);\n@@ -105,11 +113,10 @@ private Pair<String, Set<String>> getAdminRealmsFilter(\n             }\n         });\n         if (!dynRealmKeys.isEmpty()) {\n-            realmKeys.addAll(realmDAO.findAll().stream().\n-                    map(Entity::getKey).collect(Collectors.toSet()));\n+            realmKeys.clear();\n         }\n \n-        return Pair.of(buildAdminRealmsFilter(realmKeys, svs, parameters), dynRealmKeys);\n+        return Triple.of(buildAdminRealmsFilter(realmKeys, svs, parameters), dynRealmKeys, groupOwners);\n     }\n \n     SearchSupport buildSearchSupport(final AnyTypeKind kind) {\n@@ -122,11 +129,11 @@ protected int doCount(final Set<String> adminRealms, final SearchCond cond, fina\n \n         SearchSupport svs = buildSearchSupport(kind);\n \n-        Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+        Triple<String, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n         // 1. get the query string from the search condition\n         Pair<StringBuilder, Set<String>> queryInfo =\n-                getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n+                getQuery(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), parameters, svs);\n \n         StringBuilder queryString = queryInfo.getLeft();\n \n@@ -159,11 +166,11 @@ protected <T extends Any<?>> List<T> doSearch(\n \n             SearchSupport svs = buildSearchSupport(kind);\n \n-            Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n+            Triple<String, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n             // 1. get the query string from the search condition\n             Pair<StringBuilder, Set<String>> queryInfo =\n-                    getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n+                    getQuery(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), parameters, svs);\n \n             StringBuilder queryString = queryInfo.getLeft();\n \n@@ -208,12 +215,12 @@ protected <T extends Any<?>> List<T> doSearch(\n         return List.of();\n     }\n \n-    protected static int setParameter(final List<Object> parameters, final Object parameter) {\n+    protected int setParameter(final List<Object> parameters, final Object parameter) {\n         parameters.add(parameter);\n         return parameters.size();\n     }\n \n-    private static void fillWithParameters(final Query query, final List<Object> parameters) {\n+    protected void fillWithParameters(final Query query, final List<Object> parameters) {\n         for (int i = 0; i < parameters.size(); i++) {\n             if (parameters.get(i) instanceof Date) {\n                 query.setParameter(i + 1, (Date) parameters.get(i), TemporalType.TIMESTAMP);\n@@ -227,7 +234,7 @@ private static void fillWithParameters(final Query query, final List<Object> par\n         }\n     }\n \n-    private static StringBuilder buildSelect(final OrderBySupport obs) {\n+    protected StringBuilder buildSelect(final OrderBySupport obs) {\n         StringBuilder select = new StringBuilder(\"SELECT DISTINCT u.any_id\");\n \n         obs.items.forEach(item -> select.append(',').append(item.select));\n@@ -242,7 +249,7 @@ protected void processOBS(\n             final StringBuilder where) {\n \n         Set<String> attrs = obs.items.stream().\n-                map(item -> item.orderBy.substring(0, item.orderBy.indexOf(\" \"))).collect(Collectors.toSet());\n+                map(item -> item.orderBy.substring(0, item.orderBy.indexOf(' '))).collect(Collectors.toSet());\n \n         obs.views.forEach(searchView -> {\n             where.append(',');\n@@ -259,10 +266,10 @@ protected void processOBS(\n                         } else {\n                             attrWhere.append(\" OR \");\n                         }\n-                        attrWhere.append(\"schema_id='\").append(field).append('\\'');\n+                        attrWhere.append(\"schema_id='\").append(field).append(\"'\");\n \n                         nullAttrWhere.append(\" UNION SELECT any_id, \").\n-                                append('\\'').\n+                                append(\"'\").\n                                 append(field).\n                                 append(\"' AS schema_id, \").\n                                 append(\"null AS booleanvalue, \").\n@@ -287,35 +294,40 @@ protected void processOBS(\n         });\n     }\n \n-    private StringBuilder buildWhere(\n+    protected StringBuilder buildWhere(\n             final SearchSupport svs,\n             final OrderBySupport obs) {\n \n         StringBuilder where = new StringBuilder(\" u\");\n         processOBS(svs, obs, where);\n         where.append(\" WHERE \");\n-        obs.views.forEach(searchView -> where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \"));\n+        obs.views.forEach(searchView -> {\n+            where.append(\"u.any_id=\").append(searchView.alias).append(\".any_id AND \");\n+        });\n \n         obs.items.stream().\n                 filter(item -> StringUtils.isNotBlank(item.where)).\n-                forEachOrdered((item) -> where.append(item.where).append(\" AND \"));\n+                forEachOrdered((item) -> {\n+                    where.append(item.where).append(\" AND \");\n+                });\n \n         return where;\n     }\n \n-    private static StringBuilder buildOrderBy(final OrderBySupport obs) {\n+    protected StringBuilder buildOrderBy(final OrderBySupport obs) {\n         StringBuilder orderBy = new StringBuilder();\n \n-        obs.items.forEach(item -> orderBy.append(item.orderBy).append(','));\n         if (!obs.items.isEmpty()) {\n+            obs.items.forEach(item -> orderBy.append(item.orderBy).append(','));\n+\n             orderBy.insert(0, \" ORDER BY \");\n             orderBy.deleteCharAt(orderBy.length() - 1);\n         }\n \n         return orderBy;\n     }\n \n-    protected static String key(final AttrSchemaType schemaType) {\n+    protected String key(final AttrSchemaType schemaType) {\n         String key;\n         switch (schemaType) {\n             case Boolean:\n@@ -365,7 +377,7 @@ protected void parseOrderByForPlainSchema(\n                     append(\" AS \").append(fieldName).toString();\n             item.where = new StringBuilder().\n                     append(svs.asSearchViewSupport().uniqueAttr().alias).\n-                    append(\".schema_id='\").append(fieldName).append('\\'').toString();\n+                    append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n             item.orderBy = fieldName + ' ' + clause.getDirection().name();\n         } else {\n             obs.views.add(svs.asSearchViewSupport().attr());\n@@ -375,11 +387,22 @@ protected void parseOrderByForPlainSchema(\n                     append(\" AS \").append(fieldName).toString();\n             item.where = new StringBuilder().\n                     append(svs.asSearchViewSupport().attr().alias).\n-                    append(\".schema_id='\").append(fieldName).append('\\'').toString();\n+                    append(\".schema_id='\").append(fieldName).append(\"'\").toString();\n             item.orderBy = fieldName + ' ' + clause.getDirection().name();\n         }\n     }\n \n+    protected void parseOrderByForField(\n+            final SearchSupport svs,\n+            final OrderBySupport.Item item,\n+            final String fieldName,\n+            final OrderByClause clause) {\n+\n+        item.select = svs.field().alias + '.' + fieldName;\n+        item.where = StringUtils.EMPTY;\n+        item.orderBy = svs.field().alias + '.' + fieldName + ' ' + clause.getDirection().name();\n+    }\n+\n     protected void parseOrderByForCustom(\n             final SearchSupport svs,\n             final OrderByClause clause,\n@@ -389,7 +412,7 @@ protected void parseOrderByForCustom(\n         // do nothing by default, meant for subclasses\n     }\n \n-    private OrderBySupport parseOrderBy(\n+    protected OrderBySupport parseOrderBy(\n             final SearchSupport svs,\n             final List<OrderByClause> orderBy) {\n \n@@ -434,9 +457,7 @@ private OrderBySupport parseOrderBy(\n \n                     obs.views.add(svs.field());\n \n-                    item.select = svs.field().alias + '.' + fieldName;\n-                    item.where = StringUtils.EMPTY;\n-                    item.orderBy = svs.field().alias + '.' + fieldName + ' ' + clause.getDirection().name();\n+                    parseOrderByForField(svs, item, fieldName, clause);\n                 }\n             }\n \n@@ -460,7 +481,20 @@ protected void getQueryForCustomConds(\n         // do nothing by default, leave it open for subclasses\n     }\n \n-    private Pair<StringBuilder, Set<String>> getQuery(\n+    protected void queryOp(\n+            final StringBuilder query,\n+            final String op,\n+            final Pair<StringBuilder, Set<String>> leftInfo,\n+            final Pair<StringBuilder, Set<String>> rightInfo) {\n+\n+        String subQuery = leftInfo.getKey().toString();\n+        // Add extra parentheses\n+        subQuery = subQuery.replaceFirst(\"WHERE \", \"WHERE (\");\n+        query.append(subQuery).\n+                append(' ').append(op).append(\" any_id IN ( \").append(rightInfo.getKey()).append(\"))\");\n+    }\n+\n+    protected Pair<StringBuilder, Set<String>> getQuery(\n             final SearchCond cond, final List<Object> parameters, final SearchSupport svs) {\n \n         boolean not = cond.getType() == SearchCond.Type.NOT_LEAF;\n@@ -533,13 +567,7 @@ private Pair<StringBuilder, Set<String>> getQuery(\n                 Pair<StringBuilder, Set<String>> rigthAndInfo = getQuery(cond.getRight(), parameters, svs);\n                 involvedPlainAttrs.addAll(rigthAndInfo.getRight());\n \n-                String andSubQuery = leftAndInfo.getLeft().toString();\n-                // Add extra parentheses\n-                andSubQuery = andSubQuery.replaceFirst(\"WHERE \", \"WHERE (\");\n-                query.append(andSubQuery).\n-                        append(\" AND any_id IN ( \").\n-                        append(rigthAndInfo.getLeft()).\n-                        append(\"))\");\n+                queryOp(query, \"AND\", leftAndInfo, rigthAndInfo);\n                 break;\n \n             case OR:\n@@ -549,13 +577,7 @@ private Pair<StringBuilder, Set<String>> getQuery(\n                 Pair<StringBuilder, Set<String>> rigthOrInfo = getQuery(cond.getRight(), parameters, svs);\n                 involvedPlainAttrs.addAll(rigthOrInfo.getRight());\n \n-                String orSubQuery = leftOrInfo.getKey().toString();\n-                // Add extra parentheses\n-                orSubQuery = orSubQuery.replaceFirst(\"WHERE \", \"WHERE (\");\n-                query.append(orSubQuery).\n-                        append(\" OR any_id IN ( \").\n-                        append(rigthOrInfo.getKey()).\n-                        append(\"))\");\n+                queryOp(query, \"OR\", leftOrInfo, rigthOrInfo);\n                 break;\n \n             default:\n@@ -712,7 +734,7 @@ protected String getQuery(\n         }\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n-                append(SearchSupport.dynrolemembership().name).append(\" WHERE \").\n+                append(svs.dynrolemembership().name).append(\" WHERE \").\n                 append(\"role_id=?\").append(setParameter(parameters, cond.getRole())).\n                 append(\"))\");\n \n@@ -769,7 +791,7 @@ protected String getQuery(\n         }\n \n         query.append(\"SELECT DISTINCT any_id FROM \").\n-                append(SearchSupport.dynrealmmembership().name).append(\" WHERE \").\n+                append(svs.dynrealmmembership().name).append(\" WHERE \").\n                 append(\"dynRealm_id=?\").append(setParameter(parameters, cond.getDynRealm())).\n                 append(\"))\");\n \n@@ -823,8 +845,9 @@ protected String getQuery(\n         StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n                 append(svs.field().name).append(\" WHERE (\");\n         if (cond.isFromGroup()) {\n-            realmDAO.findDescendants(realm).forEach(current -> query.append(\"realm_id=?\")\n-                    .append(setParameter(parameters, current.getKey())).append(\" OR \"));\n+            realmDAO.findDescendants(realm).forEach(current -> {\n+                query.append(\"realm_id=?\").append(setParameter(parameters, current.getKey())).append(\" OR \");\n+            });\n             query.setLength(query.length() - 4);\n         } else {\n             for (Realm current = realm; current.getParent() != null; current = current.getParent()) {\n@@ -878,7 +901,7 @@ protected String getQuery(\n         return query.toString();\n     }\n \n-    private static void fillAttrQuery(\n+    protected void fillAttrQuery(\n             final StringBuilder query,\n             final PlainAttrValue attrValue,\n             final PlainSchema schema,\n@@ -1029,7 +1052,7 @@ protected String getQuery(\n                 query.append(checked.getLeft().isUniqueConstraint()\n                         ? svs.asSearchViewSupport().uniqueAttr().name\n                         : svs.asSearchViewSupport().attr().name).\n-                        append(\" WHERE schema_id=\").append('\\'').append(checked.getLeft().getKey()).append('\\'');\n+                        append(\" WHERE schema_id=\").append(\"'\").append(checked.getLeft().getKey()).append(\"'\");\n                 break;\n \n             case ISNULL:\n@@ -1040,7 +1063,7 @@ protected String getQuery(\n                         append(checked.getLeft().isUniqueConstraint()\n                                 ? svs.asSearchViewSupport().uniqueAttr().name\n                                 : svs.asSearchViewSupport().attr().name).\n-                        append(\" WHERE schema_id=\").append('\\'').append(checked.getLeft().getKey()).append('\\'').\n+                        append(\" WHERE schema_id=\").append(\"'\").append(checked.getLeft().getKey()).append(\"'\").\n                         append(')');\n                 break;\n "},{"sha":"f367e9e300c989967eddca55f32007beb8c42276","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":22,"deletions":12,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -130,26 +130,36 @@ public Map<String, Integer> countByRealm() {\n                 result -> ((Number) result[1]).intValue()));\n     }\n \n+    @Transactional(readOnly = true)\n     @Override\n-    protected void securityChecks(final Group group) {\n-        Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n-        Set<String> authRealms = authorizations.containsKey(IdRepoEntitlement.GROUP_READ)\n-                ? authorizations.get(IdRepoEntitlement.GROUP_READ)\n-                : Set.of();\n+    public void securityChecks(\n+            final Set<String> authRealms,\n+            final String key,\n+            final String realm) {\n+\n+        // 1. check if AuthContextUtils.getUsername() is owner of the group, or\n+        // if group is in Realm (or descendants) for which AuthContextUtils.getUsername() owns entitlement\n+        boolean authorized = authRealms.stream().anyMatch(authRealm -> realm.startsWith(authRealm)\n+                || authRealm.equals(RealmUtils.getGroupOwnerRealm(realm, key)));\n \n-        boolean authorized = authRealms.stream().anyMatch(realm -> group.getRealm().getFullPath().startsWith(realm)\n-                || realm.equals(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())));\n+        // 2. check if groups is in at least one DynRealm for which AuthContextUtils.getUsername() owns entitlement\n         if (!authorized) {\n-            authorized = findDynRealms(group.getKey()).stream().\n-                    filter(authRealms::contains).\n-                    count() > 0;\n+            authorized = findDynRealms(key).stream().anyMatch(authRealms::contains);\n         }\n+\n         if (authRealms.isEmpty() || !authorized) {\n-            throw new DelegatedAdministrationException(\n-                    group.getRealm().getFullPath(), AnyTypeKind.GROUP.name(), group.getKey());\n+            throw new DelegatedAdministrationException(realm, AnyTypeKind.GROUP.name(), key);\n         }\n     }\n \n+    @Override\n+    protected void securityChecks(final Group group) {\n+        Set<String> authRealms = AuthContextUtils.getAuthorizations().\n+                getOrDefault(IdRepoEntitlement.GROUP_READ, Set.of());\n+\n+        securityChecks(authRealms, group.getKey(), group.getRealm().getFullPath());\n+    }\n+\n     @Override\n     public Group findByName(final String name) {\n         TypedQuery<Group> query = entityManager().createQuery("},{"sha":"0d6ee224fa4920e3651bd9b7e4edb54b2893dfdb","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":34,"deletions":18,"changes":52,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -50,7 +50,6 @@\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.Implementation;\n import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n@@ -68,6 +67,7 @@\n import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.provisioning.api.event.AnyCreatedUpdatedEvent;\n import org.apache.syncope.core.provisioning.api.event.AnyDeletedEvent;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.apache.syncope.core.spring.ImplementationManager;\n import org.apache.syncope.core.spring.policy.AccountPolicyException;\n import org.apache.syncope.core.spring.policy.PasswordPolicyException;\n@@ -149,28 +149,44 @@ public Map<String, Integer> countByStatus() {\n                 result -> ((Number) result[1]).intValue()));\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public void securityChecks(\n+            final Set<String> authRealms,\n+            final String key,\n+            final String realm,\n+            final Collection<String> groups) {\n+\n+        // 1. check if AuthContextUtils.getUsername() is owner of at least one group of which user is member\n+        boolean authorized = authRealms.stream().map(RealmUtils::parseGroupOwnerRealm).filter(Optional::isPresent).\n+                anyMatch(pair -> groups.contains(pair.get().getRight()));\n+\n+        // 2. check if user is in at least one DynRealm for which AuthContextUtils.getUsername() owns entitlement\n+        if (!authorized) {\n+            authorized = findDynRealms(key).stream().anyMatch(authRealms::contains);\n+        }\n+\n+        // 3. check if user is in Realm (or descendants) for which AuthContextUtils.getUsername() owns entitlement\n+        if (!authorized) {\n+            authorized = authRealms.stream().anyMatch(realm::startsWith);\n+        }\n+\n+        if (!authorized) {\n+            throw new DelegatedAdministrationException(realm, AnyTypeKind.USER.name(), key);\n+        }\n+    }\n+\n     @Override\n     protected void securityChecks(final User user) {\n         // Allows anonymous (during self-registration) and self (during self-update) to read own user,\n         // otherwise goes through security checks to see if required entitlements are owned\n         if (!AuthContextUtils.getUsername().equals(anonymousUser)\n                 && !AuthContextUtils.getUsername().equals(user.getUsername())) {\n \n-            Map<String, Set<String>> authorizations = AuthContextUtils.getAuthorizations();\n-            Set<String> authRealms = authorizations.containsKey(IdRepoEntitlement.USER_READ)\n-                    ? authorizations.get(IdRepoEntitlement.USER_READ)\n-                    : Set.of();\n-            boolean authorized = authRealms.stream().\n-                    anyMatch(realm -> user.getRealm().getFullPath().startsWith(realm));\n-            if (!authorized) {\n-                authorized = findDynRealms(user.getKey()).stream().\n-                        filter(authRealms::contains).\n-                        count() > 0;\n-            }\n-            if (authRealms.isEmpty() || !authorized) {\n-                throw new DelegatedAdministrationException(\n-                        user.getRealm().getFullPath(), AnyTypeKind.USER.name(), user.getKey());\n-            }\n+            Set<String> authRealms = AuthContextUtils.getAuthorizations().\n+                    getOrDefault(IdRepoEntitlement.USER_READ, Set.of());\n+\n+            securityChecks(authRealms, user.getKey(), user.getRealm().getFullPath(), findAllGroupKeys(user));\n         }\n     }\n \n@@ -520,7 +536,7 @@ public Collection<Group> findAllGroups(final User user) {\n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n     @Override\n     public Collection<String> findAllGroupKeys(final User user) {\n-        return findAllGroups(user).stream().map(Entity::getKey).collect(Collectors.toList());\n+        return findAllGroups(user).stream().map(Group::getKey).collect(Collectors.toList());\n     }\n \n     @Transactional(propagation = Propagation.REQUIRES_NEW, readOnly = true)\n@@ -542,7 +558,7 @@ public Collection<ExternalResource> findAllResources(final User user) {\n     @Transactional(readOnly = true)\n     @Override\n     public Collection<String> findAllResourceKeys(final String key) {\n-        return findAllResources(authFind(key)).stream().map(Entity::getKey).collect(Collectors.toList());\n+        return findAllResources(authFind(key)).stream().map(ExternalResource::getKey).collect(Collectors.toList());\n     }\n \n     @Transactional(readOnly = true)"},{"sha":"c62d1492cb618c0ff158ad2fa33a2df3a54f3b8c","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/validation/entity/RoleValidator.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fvalidation%2Fentity%2FRoleValidator.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -19,6 +19,7 @@\n package org.apache.syncope.core.persistence.jpa.validation.entity;\n \n import javax.validation.ConstraintValidatorContext;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.EntityViolationType;\n import org.apache.syncope.core.persistence.api.entity.Role;\n \n@@ -28,7 +29,10 @@ public class RoleValidator extends AbstractValidator<RoleCheck, Role> {\n     public boolean isValid(final Role role, final ConstraintValidatorContext context) {\n         context.disableDefaultConstraintViolation();\n \n-        if (role.getKey() == null || !KEY_PATTERN.matcher(role.getKey()).matches()) {\n+        if (role.getKey() == null\n+                || (!SyncopeConstants.GROUP_OWNER_ROLE.equals(role.getKey())\n+                && !KEY_PATTERN.matcher(role.getKey()).matches())) {\n+\n             context.buildConstraintViolationWithTemplate(\n                     getTemplate(EntityViolationType.InvalidKey, role.getKey())).\n                     addPropertyNode(\"key\").addConstraintViolation();"},{"sha":"13b5e223dcb3afd352505f15292d79f93c40fe36","filename":"core/persistence-jpa/src/main/resources/domains/MasterContent.xml","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -111,4 +111,20 @@ we are happy to inform you that the password request was successfully executed f\n                   body='{\"_class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n   <ReportReportlet report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" implementation_id=\"ReconciliationReportletConf\"/>\n \n+  <SyncopeRole id=\"GROUP_OWNER\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_CREATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_DELETE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"RELATIONSHIPTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"REALM_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n </dataset>"},{"sha":"c5457646596ed501c75eb6f7d9701a4851a485d7","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/inner/AnySearchTest.java","status":"modified","additions":65,"deletions":4,"changes":69,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Finner%2FAnySearchTest.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -25,19 +25,25 @@\n \n import java.text.ParseException;\n import java.util.ArrayList;\n+import java.util.HashMap;\n+import java.util.HashSet;\n import java.util.List;\n+import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import org.apache.commons.lang3.time.DateUtils;\n import java.util.stream.Stream;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.MembershipCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -59,8 +65,14 @@\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n import org.junit.jupiter.api.BeforeEach;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n+import org.apache.syncope.core.spring.security.SyncopeAuthenticationDetails;\n+import org.apache.syncope.core.spring.security.SyncopeGrantedAuthority;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n+import org.springframework.security.core.context.SecurityContextHolder;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n@@ -86,6 +98,9 @@ public class AnySearchTest extends AbstractTest {\n     @Autowired\n     private RealmDAO realmDAO;\n \n+    @Autowired\n+    private RoleDAO roleDAO;\n+\n     @BeforeEach\n     public void adjustLoginDateForLocalSystem() throws ParseException {\n         User rossini = userDAO.findByUsername(\"rossini\");\n@@ -224,15 +239,16 @@ public void searchByPageAndSize() {\n \n         assertTrue(cond.isValid());\n \n+        int count = searchDAO.count(SyncopeConstants.FULL_ADMIN_REALMS, cond, AnyTypeKind.USER);\n+        assertEquals(1, count);\n+\n         List<User> users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                cond, 1, 2, List.of(),\n-                AnyTypeKind.USER);\n+                cond, 1, 2, List.of(), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertEquals(1, users.size());\n \n         users = searchDAO.search(SyncopeConstants.FULL_ADMIN_REALMS,\n-                cond, 2, 2, List.of(),\n-                AnyTypeKind.USER);\n+                cond, 2, 2, List.of(), AnyTypeKind.USER);\n         assertNotNull(users);\n         assertTrue(users.isEmpty());\n     }\n@@ -583,6 +599,51 @@ public void member() {\n         assertTrue(groups.contains(groupDAO.findByName(\"otherchild\")));\n     }\n \n+    @Test\n+    public void asGroupOwner() {\n+        // prepare authentication\n+        Map<String, Set<String>> entForRealms = new HashMap<>();\n+        roleDAO.find(SyncopeConstants.GROUP_OWNER_ROLE).getEntitlements().forEach(entitlement -> {\n+            Set<String> realms = Optional.ofNullable(entForRealms.get(entitlement)).orElseGet(() -> {\n+                Set<String> r = new HashSet<>();\n+                entForRealms.put(entitlement, r);\n+                return r;\n+            });\n+\n+            realms.add(RealmUtils.getGroupOwnerRealm(\n+                    SyncopeConstants.ROOT_REALM, \"37d15e4c-cdc1-460b-a591-8505c8133806\"));\n+        });\n+\n+        Set<SyncopeGrantedAuthority> authorities = new HashSet<>();\n+        entForRealms.forEach((key, value) -> {\n+            SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(key);\n+            authority.addRealms(value);\n+            authorities.add(authority);\n+        });\n+\n+        UsernamePasswordAuthenticationToken auth = new UsernamePasswordAuthenticationToken(\n+                new org.springframework.security.core.userdetails.User(\n+                        \"poorGroupOwner\", \"FAKE_PASSWORD\", authorities), \"FAKE_PASSWORD\", authorities);\n+        auth.setDetails(new SyncopeAuthenticationDetails(SyncopeConstants.MASTER_DOMAIN));\n+\n+        SecurityContextHolder.getContext().setAuthentication(auth);\n+        try {\n+            // test count() and search()\n+            Set<String> authRealms = RealmUtils.getEffective(\n+                    AuthContextUtils.getAuthorizations().get(IdRepoEntitlement.GROUP_SEARCH),\n+                    SyncopeConstants.ROOT_REALM);\n+\n+            assertEquals(1, searchDAO.count(authRealms, groupDAO.getAllMatchingCond(), AnyTypeKind.GROUP));\n+\n+            List<Group> groups = searchDAO.search(\n+                    authRealms, groupDAO.getAllMatchingCond(), 1, 10, List.of(), AnyTypeKind.GROUP);\n+            assertEquals(1, groups.size());\n+            assertEquals(\"37d15e4c-cdc1-460b-a591-8505c8133806\", groups.get(0).getKey());\n+        } finally {\n+            SecurityContextHolder.getContext().setAuthentication(null);\n+        }\n+    }\n+\n     @Test\n     public void issue202() {\n         ResourceCond ws2 = new ResourceCond();"},{"sha":"dce7627b5fdfa17c7d6a66259d627e1425e75400","filename":"core/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/outer/AnySearchTest.java","status":"modified","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fouter%2FAnySearchTest.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -24,8 +24,10 @@\n import static org.junit.jupiter.api.Assertions.fail;\n \n import java.util.ArrayList;\n+import java.util.Collections;\n import java.util.List;\n import org.apache.syncope.common.lib.SyncopeClientException;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n@@ -34,6 +36,7 @@\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n import org.apache.syncope.core.persistence.api.dao.PlainSchemaDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n@@ -43,15 +46,20 @@\n import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.group.GPlainAttr;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n+import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.AbstractTest;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n import org.junit.jupiter.api.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Transactional;\n \n @Transactional(\"Master\")\n public class AnySearchTest extends AbstractTest {\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n     @Autowired\n     private GroupDAO groupDAO;\n \n@@ -98,6 +106,44 @@ public void searchByDynMembership() {\n         assertEquals(\"c9b2dec2-00a7-4855-97c0-d854842b4b24\", users.get(0).getKey());\n     }\n \n+    @Test\n+    public void searchAsGroupOwner() {\n+        // 1. define rossini as member of director\n+        User rossini = userDAO.findByUsername(\"rossini\");\n+        assertNotNull(rossini);\n+\n+        Group group = groupDAO.findByName(\"director\");\n+        assertNotNull(group);\n+\n+        UMembership membership = entityFactory.newEntity(UMembership.class);\n+        membership.setLeftEnd(rossini);\n+        membership.setRightEnd(group);\n+        rossini.add(membership);\n+\n+        userDAO.save(rossini);\n+        assertNotNull(rossini);\n+\n+        entityManager().flush();\n+\n+        // 2. search all users with root realm entitlements: all users are returned, including rossini\n+        AnyCond anyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n+        anyCond.setSchema(\"id\");\n+\n+        List<User> users = searchDAO.search(\n+                Collections.singleton(SyncopeConstants.ROOT_REALM),\n+                SearchCond.getLeaf(anyCond), 1, 100, Collections.emptyList(), AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertTrue(users.stream().anyMatch(user -> rossini.getKey().equals(user.getKey())));\n+\n+        // 3. search all users with director owner's entitlements: only rossini is returned\n+        users = searchDAO.search(\n+                Collections.singleton(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey())),\n+                SearchCond.getLeaf(anyCond), 1, 100, Collections.emptyList(), AnyTypeKind.USER);\n+        assertNotNull(users);\n+        assertEquals(1, users.size());\n+        assertEquals(rossini.getKey(), users.get(0).getKey());\n+    }\n+\n     @Test\n     public void issueSYNCOPE95() {\n         groupDAO.findAll(1, 100).forEach(group -> groupDAO.delete(group.getKey()));"},{"sha":"8f673be47b0ac2b19584355d189d745bf2e5d2f8","filename":"core/persistence-jpa/src/test/resources/domains/MasterContent.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Ftest%2Fresources%2Fdomains%2FMasterContent.xml?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -2498,6 +2498,23 @@ $$ }&#10;\n             logout=\"0\" csrf=\"1\" routeType=\"PROTECTED\"\n             predicates=\"[{&quot;cond&quot;:null,&quot;factory&quot;:&quot;METHOD&quot;,&quot;args&quot;:&quot;GET&quot;}]\"/>\n \n+  <SyncopeRole id=\"GROUP_OWNER\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_CREATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_DELETE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"RELATIONSHIPTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"REALM_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n+\n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[LOGIC]:[SyncopeLogic]:[]:[isSelfRegAllowed]:[SUCCESS]\" logLevel=\"DEBUG\"/>\n \n   <SyncopeLogger logType=\"AUDIT\" logName=\"syncope.audit.[WA]:[LoggerLogic]:[AUTHENTICATION]:[validate]:[SUCCESS]\" logLevel=\"DEBUG\"/>"},{"sha":"6b6f6ffe77d2fce896f7a233060217d732547310","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/utils/RealmUtils.java","status":"modified","additions":30,"deletions":9,"changes":39,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtils.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -18,18 +18,28 @@\n  */\n package org.apache.syncope.core.provisioning.api.utils;\n \n+import java.util.Arrays;\n import java.util.Collection;\n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.function.Predicate;\n import java.util.stream.Collectors;\n+import org.apache.commons.lang3.tuple.Pair;\n \n public final class RealmUtils {\n \n     public static String getGroupOwnerRealm(final String realmPath, final String groupKey) {\n         return realmPath + '@' + groupKey;\n     }\n \n+    public static Optional<Pair<String, String>> parseGroupOwnerRealm(final String input) {\n+        String[] split = input.split(\"@\");\n+        return split == null || split.length < 2\n+                ? Optional.empty()\n+                : Optional.of(Pair.of(split[0], split[1]));\n+    }\n+\n     public static boolean normalizingAddTo(final Set<String> realms, final String newRealm) {\n         boolean dontAdd = false;\n         Set<String> toRemove = new HashSet<>();\n@@ -48,13 +58,20 @@ public static boolean normalizingAddTo(final Set<String> realms, final String ne\n         return !dontAdd;\n     }\n \n-    public static Set<String> normalize(final Collection<String> realms) {\n+    public static Pair<Set<String>, Set<String>> normalize(final Collection<String> realms) {\n         Set<String> normalized = new HashSet<>();\n+        Set<String> groupOwnership = new HashSet<>();\n         if (realms != null) {\n-            realms.forEach(realm -> normalizingAddTo(normalized, realm));\n+            realms.forEach(realm -> {\n+                if (realm.indexOf('@') == -1) {\n+                    normalizingAddTo(normalized, realm);\n+                } else {\n+                    groupOwnership.add(realm);\n+                }\n+            });\n         }\n \n-        return normalized;\n+        return Pair.of(normalized, groupOwnership);\n     }\n \n     private static class StartsWithPredicate implements Predicate<String> {\n@@ -69,7 +86,6 @@ private static class StartsWithPredicate implements Predicate<String> {\n         public boolean test(final String realm) {\n             return targets.stream().anyMatch(realm::startsWith);\n         }\n-\n     }\n \n     public static class DynRealmsPredicate implements Predicate<String> {\n@@ -81,13 +97,18 @@ public boolean test(final String realm) {\n     }\n \n     public static Set<String> getEffective(final Set<String> allowedRealms, final String requestedRealm) {\n-        Set<String> allowed = RealmUtils.normalize(allowedRealms);\n-        Set<String> requested = new HashSet<>();\n-        requested.add(requestedRealm);\n+        Pair<Set<String>, Set<String>> normalized = normalize(allowedRealms);\n+\n+        Collection<String> requested = Arrays.asList(requestedRealm);\n \n         Set<String> effective = new HashSet<>();\n-        effective.addAll(requested.stream().filter(new StartsWithPredicate(allowed)).collect(Collectors.toSet()));\n-        effective.addAll(allowed.stream().filter(new StartsWithPredicate(requested)).collect(Collectors.toSet()));\n+        effective.addAll(requested.stream().\n+                filter(new StartsWithPredicate(normalized.getLeft())).collect(Collectors.toSet()));\n+        effective.addAll(normalized.getLeft().stream().\n+                filter(new StartsWithPredicate(requested)).collect(Collectors.toSet()));\n+\n+        // includes group ownership\n+        effective.addAll(normalized.getRight());\n \n         // includes dynamic realms\n         if (allowedRealms != null) {"},{"sha":"24096d25a2f10fa3abd0c3375b61a1a552bac88a","filename":"core/provisioning-api/src/test/java/org/apache/syncope/core/provisioning/api/utils/RealmUtilsTest.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtilsTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtilsTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Futils%2FRealmUtilsTest.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -23,7 +23,9 @@\n import static org.junit.jupiter.api.Assertions.assertTrue;\n \n import java.util.HashSet;\n+import java.util.Optional;\n import java.util.Set;\n+import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.core.provisioning.api.AbstractTest;\n import org.junit.jupiter.api.Test;\n \n@@ -36,6 +38,14 @@ public void getGroupOwnerRealm() {\n         assertEquals(realmPath + \"@\" + groupKey, RealmUtils.getGroupOwnerRealm(realmPath, groupKey));\n     }\n \n+    @Test\n+    public void parseGroupOwnerRealm() {\n+        assertEquals(\n+                Optional.of(Pair.of(\"realmPath\", \"groupKey\")),\n+                RealmUtils.parseGroupOwnerRealm(\"realmPath@groupKey\"));\n+        assertFalse(RealmUtils.parseGroupOwnerRealm(\"realmPath\").isPresent());\n+    }\n+\n     @Test\n     public void normalizingAddTo() {\n         Set<String> realms = new HashSet<>();\n@@ -52,7 +62,7 @@ public void normalizingAddTo() {\n         assertTrue(RealmUtils.normalizingAddTo(realms, newRealm));\n         assertEquals(2, realms.size());\n     }\n-    \n+\n     @Test\n     public void getEffective() {\n         Set<String> allowedRealms = new HashSet<>();"},{"sha":"75284aea5ebb52eec5a1a4a85bfed7346827d279","filename":"core/spring/src/main/java/org/apache/syncope/core/spring/security/AuthDataAccessor.java","status":"modified","additions":33,"deletions":20,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fspring%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fspring%2Fsecurity%2FAuthDataAccessor.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -24,6 +24,7 @@\n import java.util.Iterator;\n import java.util.List;\n import java.util.Map;\n+import java.util.Optional;\n import java.util.Set;\n import java.util.stream.Collectors;\n import javax.annotation.Resource;\n@@ -43,13 +44,15 @@\n import org.apache.syncope.core.persistence.api.dao.AnyTypeDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AccessToken;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.DynRealm;\n import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.api.entity.Role;\n import org.apache.syncope.core.persistence.api.entity.resource.ExternalResource;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -84,10 +87,6 @@ public class AuthDataAccessor {\n     protected static final Set<SyncopeGrantedAuthority> ANONYMOUS_AUTHORITIES =\n             Set.of(new SyncopeGrantedAuthority(IdRepoEntitlement.ANONYMOUS));\n \n-    protected static final String[] GROUP_OWNER_ENTITLEMENTS = new String[] {\n-        IdRepoEntitlement.GROUP_READ, IdRepoEntitlement.GROUP_UPDATE, IdRepoEntitlement.GROUP_DELETE\n-    };\n-\n     @Resource(name = \"adminUser\")\n     protected String adminUser;\n \n@@ -115,6 +114,9 @@ public class AuthDataAccessor {\n     @Autowired\n     private ConfParamOps confParamOps;\n \n+    @Autowired\n+    protected RoleDAO roleDAO;\n+\n     @Autowired\n     protected ConnectorFactory connFactory;\n \n@@ -299,35 +301,46 @@ protected Set<SyncopeGrantedAuthority> getUserAuthorities(final User user) {\n \n             // Give entitlements as assigned by roles (with static or dynamic realms, where applicable) - assigned\n             // either statically and dynamically\n-            userDAO.findAllRoles(user).forEach(role -> role.getEntitlements().forEach(entitlement -> {\n-                Set<String> realms = entForRealms.get(entitlement);\n-                if (realms == null) {\n-                    realms = new HashSet<>();\n-                    entForRealms.put(entitlement, realms);\n-                }\n+            userDAO.findAllRoles(user).stream().\n+                    filter(role -> !SyncopeConstants.GROUP_OWNER_ROLE.equals(role.getKey())).\n+                    forEach(role -> role.getEntitlements().forEach(entitlement -> {\n+                Set<String> realms = Optional.ofNullable(entForRealms.get(entitlement)).orElseGet(() -> {\n+                    Set<String> r = new HashSet<>();\n+                    entForRealms.put(entitlement, r);\n+                    return r;\n+                });\n+\n                 realms.addAll(role.getRealms().stream().map(Realm::getFullPath).collect(Collectors.toSet()));\n                 if (!entitlement.endsWith(\"_CREATE\") && !entitlement.endsWith(\"_DELETE\")) {\n                     realms.addAll(role.getDynRealms().stream().map(DynRealm::getKey).collect(Collectors.toList()));\n                 }\n             }));\n \n             // Give group entitlements for owned groups\n-            groupDAO.findOwnedByUser(user.getKey()).forEach((group) -> {\n-                for (String entitlement : GROUP_OWNER_ENTITLEMENTS) {\n-                    Set<String> realms = entForRealms.get(entitlement);\n-                    if (realms == null) {\n-                        realms = new HashSet<>();\n-                        entForRealms.put(entitlement, realms);\n-                    }\n-\n-                    realms.add(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+            groupDAO.findOwnedByUser(user.getKey()).forEach(group -> {\n+                Role groupOwnerRole = roleDAO.find(SyncopeConstants.GROUP_OWNER_ROLE);\n+                if (groupOwnerRole == null) {\n+                    LOG.warn(\"Role {} was not found\", SyncopeConstants.GROUP_OWNER_ROLE);\n+                } else {\n+                    groupOwnerRole.getEntitlements().forEach(entitlement -> {\n+                        Set<String> realms = Optional.ofNullable(entForRealms.get(entitlement)).orElseGet(() -> {\n+                            HashSet<String> r = new HashSet<>();\n+                            entForRealms.put(entitlement, r);\n+                            return r;\n+                        });\n+\n+                        realms.add(RealmUtils.getGroupOwnerRealm(group.getRealm().getFullPath(), group.getKey()));\n+                    });\n                 }\n             });\n \n             // Finally normalize realms for each given entitlement and generate authorities\n             entForRealms.forEach((key, value) -> {\n+                Pair<Set<String>, Set<String>> normalized = RealmUtils.normalize(value);\n+\n                 SyncopeGrantedAuthority authority = new SyncopeGrantedAuthority(key);\n-                authority.addRealms(RealmUtils.normalize(value));\n+                authority.addRealms(normalized.getLeft());\n+                authority.addRealms(normalized.getRight());\n                 authorities.add(authority);\n             });\n         }"},{"sha":"b273285174bf6975cb4400b28a7ffbc89bf48cff","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractAnyObjectWorkflowAdapter.java","status":"modified","additions":17,"deletions":2,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractAnyObjectWorkflowAdapter.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -18,13 +18,18 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import java.util.Collections;\n+import java.util.HashSet;\n+import java.util.Set;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n import org.apache.syncope.common.lib.request.AnyObjectUR;\n+import org.apache.syncope.common.lib.types.AnyEntitlement;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.provisioning.api.WorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.AnyObjectDataBinder;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.AnyObjectWorkflowAdapter;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.transaction.annotation.Propagation;\n@@ -65,8 +70,18 @@ public WorkflowResult<AnyObjectUR> update(\n         WorkflowResult<AnyObjectUR> result = doUpdate(\n                 anyObjectDAO.authFind(anyObjectUR.getKey()), anyObjectUR, updater, context);\n \n-        // re-read to ensure that requester's administration rights are still valid\n-        anyObjectDAO.authFind(anyObjectUR.getKey());\n+        AnyObject anyObject = anyObjectDAO.find(anyObjectUR.getKey());\n+        // ensure that requester's administration rights are still valid\n+        Set<String> authRealms = new HashSet<>();\n+        authRealms.addAll(AuthContextUtils.getAuthorizations().\n+                getOrDefault(AnyEntitlement.READ.getFor(anyObject.getType().getKey()), Collections.emptySet()));\n+        authRealms.addAll(AuthContextUtils.getAuthorizations().\n+                getOrDefault(AnyEntitlement.UPDATE.getFor(anyObject.getType().getKey()), Collections.emptySet()));\n+        anyObjectDAO.securityChecks(\n+                authRealms,\n+                anyObject.getKey(),\n+                anyObject.getRealm().getFullPath(),\n+                anyObjectDAO.findAllGroupKeys(anyObject));\n \n         return result;\n     }"},{"sha":"5cbafae817d8f1eed73f2fffa0ca702a0204a478","filename":"core/workflow-java/src/main/java/org/apache/syncope/core/workflow/java/AbstractUserWorkflowAdapter.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fworkflow-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2Fjava%2FAbstractUserWorkflowAdapter.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -18,14 +18,18 @@\n  */\n package org.apache.syncope.core.workflow.java;\n \n+import java.util.HashSet;\n+import java.util.Set;\n import org.apache.commons.lang3.tuple.Pair;\n import org.apache.syncope.common.lib.request.UserCR;\n import org.apache.syncope.common.lib.request.UserUR;\n+import org.apache.syncope.common.lib.types.IdRepoEntitlement;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.provisioning.api.UserWorkflowResult;\n import org.apache.syncope.core.provisioning.api.data.UserDataBinder;\n+import org.apache.syncope.core.spring.security.AuthContextUtils;\n import org.apache.syncope.core.workflow.api.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n@@ -92,8 +96,20 @@ public UserWorkflowResult<Pair<UserUR, Boolean>> update(\n         UserWorkflowResult<Pair<UserUR, Boolean>> result = doUpdate(\n                 userDAO.authFind(userUR.getKey()), userUR, updater, context);\n \n-        // re-read to ensure that requester's administration rights are still valid\n-        userDAO.authFind(userUR.getKey());\n+        User user = userDAO.find(userUR.getKey());\n+        if (!AuthContextUtils.getUsername().equals(user.getUsername())) {\n+            // ensure that requester's administration rights are still valid\n+            Set<String> authRealms = new HashSet<>();\n+            authRealms.addAll(AuthContextUtils.getAuthorizations().\n+                    getOrDefault(IdRepoEntitlement.USER_READ, Set.of()));\n+            authRealms.addAll(AuthContextUtils.getAuthorizations().\n+                    getOrDefault(IdRepoEntitlement.USER_UPDATE, Set.of()));\n+            userDAO.securityChecks(\n+                    authRealms,\n+                    user.getKey(),\n+                    user.getRealm().getFullPath(),\n+                    userDAO.findAllGroupKeys(user));\n+        }\n \n         return result;\n     }"},{"sha":"a883d04a010a78c2265b5a417e1eba22f967469e","filename":"docker/core/src/main/resources/domains/MasterContent.xml.all","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.all","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.all","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.all?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -111,4 +111,20 @@ we are happy to inform you that the password request was successfully executed f\n                   body='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n   <ReportReportlet report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" implementation_id=\"ReconciliationReportletConf\"/>\n \n+  <SyncopeRole id=\"GROUP_OWNER\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_CREATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_DELETE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"RELATIONSHIPTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"REALM_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n </dataset>"},{"sha":"86add553ccdcc58a040b4be036e1daa7c8bd9006","filename":"docker/core/src/main/resources/domains/MasterContent.xml.myjson","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.myjson","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.myjson","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.myjson?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -111,4 +111,20 @@ we are happy to inform you that the password request was successfully executed f\n                   body='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n   <ReportReportlet report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" implementation_id=\"ReconciliationReportletConf\"/>\n \n+  <SyncopeRole id=\"GROUP_OWNER\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_CREATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_DELETE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"RELATIONSHIPTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"REALM_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n </dataset>"},{"sha":"86add553ccdcc58a040b4be036e1daa7c8bd9006","filename":"docker/core/src/main/resources/domains/MasterContent.xml.pgjsonb","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.pgjsonb","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.pgjsonb","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/docker%2Fcore%2Fsrc%2Fmain%2Fresources%2Fdomains%2FMasterContent.xml.pgjsonb?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -111,4 +111,20 @@ we are happy to inform you that the password request was successfully executed f\n                   body='{\"@class\":\"org.apache.syncope.common.lib.report.ReconciliationReportletConf\",\"name\":\"dashboardReconciliationReportlet\",\"userMatchingCond\":null,\"groupMatchingCond\":null,\"anyObjectMatchingCond\":null,\"features\":[\"key\",\"username\",\"groupName\"]}'/>\n   <ReportReportlet report_id=\"c3520ad9-179f-49e7-b315-d684d216dd97\" implementation_id=\"ReconciliationReportletConf\"/>\n \n+  <SyncopeRole id=\"GROUP_OWNER\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_CREATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"USER_DELETE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPECLASS_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"RELATIONSHIPTYPE_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"ANYTYPE_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"REALM_LIST\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_SEARCH\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_READ\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_UPDATE\"/>\n+  <SyncopeRole_Entitlements role_id=\"GROUP_OWNER\" entitlement=\"GROUP_DELETE\"/>\n </dataset>"},{"sha":"faea20ac41ed70582cf15e320f03c2997ffa813a","filename":"ext/elasticsearch/client-elasticsearch/src/main/java/org/apache/syncope/ext/elasticsearch/client/ElasticsearchUtils.java","status":"modified","additions":21,"deletions":22,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fclient-elasticsearch%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fext%2Felasticsearch%2Fclient%2FElasticsearchUtils.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -20,6 +20,7 @@\n \n import java.io.IOException;\n import java.util.ArrayList;\n+import java.util.Collection;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -29,9 +30,8 @@\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.Any;\n-import org.apache.syncope.core.persistence.api.entity.Entity;\n import org.apache.syncope.core.persistence.api.entity.PlainAttr;\n-import org.apache.syncope.core.persistence.api.entity.PlainAttrValue;\n+import org.apache.syncope.core.persistence.api.entity.Privilege;\n import org.apache.syncope.core.persistence.api.entity.anyobject.AnyObject;\n import org.apache.syncope.core.persistence.api.entity.group.Group;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n@@ -172,38 +172,37 @@ public XContentBuilder builder(final Any<?> any) throws IOException {\n                     field(\"suspended\", user.isSuspended()).\n                     field(\"mustChangePassword\", user.isMustChangePassword());\n \n-            List<Object> roles = userDAO.findAllRoles(user).stream().\n-                    map(Entity::getKey).collect(Collectors.toList());\n+            List<String> roles = new ArrayList<>();\n+            Set<String> privileges = new HashSet<>();\n+            userDAO.findAllRoles(user).forEach(role -> {\n+                roles.add(role.getKey());\n+                privileges.addAll(role.getPrivileges().stream().map(Privilege::getKey).collect(Collectors.toSet()));\n+            });\n             builder = builder.field(\"roles\", roles);\n-\n-            Set<Object> privileges = userDAO.findAllRoles(user).stream().\n-                    flatMap(role -> role.getPrivileges().stream()).map(Entity::getKey).collect(Collectors.toSet());\n             builder = builder.field(\"privileges\", privileges);\n \n-            List<Object> memberships = new ArrayList<>(userDAO.findAllGroupKeys(user));\n+            Collection<String> memberships = userDAO.findAllGroupKeys(user);\n             builder = builder.field(\"memberships\", memberships);\n \n-            List<Object> relationships = new ArrayList<>();\n-            Set<Object> relationshipTypes = new HashSet<>();\n-            user.getRelationships().stream().map(relationship -> {\n+            List<String> relationships = new ArrayList<>();\n+            Set<String> relationshipTypes = new HashSet<>();\n+            user.getRelationships().forEach(relationship -> {\n                 relationships.add(relationship.getRightEnd().getKey());\n-                return relationship;\n-            }).forEachOrdered(relationship -> relationshipTypes.add(relationship.getType().getKey()));\n+                relationshipTypes.add(relationship.getType().getKey());\n+            });\n             builder = builder.field(\"relationships\", relationships);\n             builder = builder.field(\"relationshipTypes\", relationshipTypes);\n         }\n \n-        if (any.getPlainAttrs() != null) {\n-            for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n-                List<Object> values = plainAttr.getValues().stream().\n-                        map(PlainAttrValue::getValue).collect(Collectors.toList());\n-\n-                if (plainAttr.getUniqueValue() != null) {\n-                    values.add(plainAttr.getUniqueValue().getValue());\n-                }\n+        for (PlainAttr<?> plainAttr : any.getPlainAttrs()) {\n+            List<Object> values = plainAttr.getValues().stream().\n+                    map(value -> value.getValue()).collect(Collectors.toList());\n \n-                builder = builder.field(plainAttr.getSchema().getKey(), values.size() == 1 ? values.get(0) : values);\n+            if (plainAttr.getUniqueValue() != null) {\n+                values.add(plainAttr.getUniqueValue().getValue());\n             }\n+\n+            builder = builder.field(plainAttr.getSchema().getKey(), values.size() == 1 ? values.get(0) : values);\n         }\n \n         return builder.endObject();"},{"sha":"b9dcfcd1e3d5707ac6bcbd122415783bf6a71c46","filename":"ext/elasticsearch/persistence-jpa/pom.xml","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fpom.xml?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -49,6 +49,23 @@ under the License.\n       <artifactId>syncope-ext-elasticsearch-client</artifactId>\n       <version>${project.version}</version>\n     </dependency>\n+\n+    <!-- TEST -->\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-inline</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.junit.jupiter</groupId>\n+      <artifactId>junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n+    <dependency>\n+      <groupId>org.mockito</groupId>\n+      <artifactId>mockito-junit-jupiter</artifactId>\n+      <scope>test</scope>\n+    </dependency>\n   </dependencies>\n \n   <build>"},{"sha":"716ca14c571157ec80b742fadc7a49dbedf49dc2","filename":"ext/elasticsearch/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAO.java","status":"modified","additions":69,"deletions":58,"changes":127,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAO.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -79,20 +79,27 @@\n  */\n public class ElasticsearchAnySearchDAO extends AbstractAnySearchDAO {\n \n-    private static final QueryBuilder EMPTY_QUERY_BUILDER = new MatchNoneQueryBuilder();\n+    protected static final QueryBuilder MATCH_NONE_QUERY_BUILDER = new MatchNoneQueryBuilder();\n \n     @Autowired\n-    private RestHighLevelClient client;\n+    protected RestHighLevelClient client;\n \n     @Autowired\n-    private ElasticsearchUtils elasticsearchUtils;\n+    protected ElasticsearchUtils elasticsearchUtils;\n+\n+    protected Triple<Optional<QueryBuilder>, Set<String>, Set<String>> getAdminRealmsFilter(\n+            final Set<String> adminRealms) {\n \n-    private Pair<DisMaxQueryBuilder, Set<String>> adminRealmsFilter(final Set<String> adminRealms) {\n         DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n \n         Set<String> dynRealmKeys = new HashSet<>();\n-        RealmUtils.normalize(adminRealms).forEach(realmPath -> {\n-            if (realmPath.startsWith(\"/\")) {\n+        Set<String> groupOwners = new HashSet<>();\n+\n+        adminRealms.forEach(realmPath -> {\n+            Optional<Pair<String, String>> goRealm = RealmUtils.parseGroupOwnerRealm(realmPath);\n+            if (goRealm.isPresent()) {\n+                groupOwners.add(goRealm.get().getRight());\n+            } else if (realmPath.startsWith(\"/\")) {\n                 Realm realm = realmDAO.findByFullPath(realmPath);\n                 if (realm == null) {\n                     SyncopeClientException noRealm = SyncopeClientException.build(ClientExceptionType.InvalidRealm);\n@@ -112,29 +119,37 @@ private Pair<DisMaxQueryBuilder, Set<String>> adminRealmsFilter(final Set<String\n                 }\n             }\n         });\n-        if (!dynRealmKeys.isEmpty()) {\n-            realmDAO.findAll().forEach(\n-                    descendant -> builder.add(QueryBuilders.termQuery(\"realm\", descendant.getFullPath())));\n-        }\n \n-        return Pair.of(builder, dynRealmKeys);\n+        return Triple.of(\n+                dynRealmKeys.isEmpty() && groupOwners.isEmpty() ? Optional.of(builder) : Optional.empty(),\n+                dynRealmKeys,\n+                groupOwners);\n     }\n \n-    private SearchRequest searchRequest(\n+    protected SearchRequest searchRequest(\n             final Set<String> adminRealms,\n             final SearchCond cond,\n             final AnyTypeKind kind,\n             final int from,\n             final int size,\n             final List<SortBuilder<?>> sortBuilders) {\n \n-        Pair<DisMaxQueryBuilder, Set<String>> filter = adminRealmsFilter(adminRealms);\n+        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = getAdminRealmsFilter(adminRealms);\n+        QueryBuilder queryBuilder;\n+        if (SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)) {\n+            queryBuilder = getQueryBuilder(cond, kind);\n+        } else {\n+            queryBuilder = getQueryBuilder(buildEffectiveCond(cond, filter.getMiddle(), filter.getRight(), kind), kind);\n+\n+            if (filter.getLeft().isPresent()) {\n+                queryBuilder = QueryBuilders.boolQuery().\n+                        must(filter.getLeft().get()).\n+                        must(queryBuilder);\n+            }\n+        }\n+\n         SearchSourceBuilder sourceBuilder = new SearchSourceBuilder().\n-                query(SyncopeConstants.FULL_ADMIN_REALMS.equals(adminRealms)\n-                        ? getQueryBuilder(cond, kind)\n-                        : QueryBuilders.boolQuery().\n-                                must(filter.getLeft()).\n-                                must(getQueryBuilder(buildEffectiveCond(cond, filter.getRight()), kind))).\n+                query(queryBuilder).\n                 from(from).\n                 size(size);\n         sortBuilders.forEach(sourceBuilder::sort);\n@@ -155,7 +170,7 @@ protected int doCount(final Set<String> adminRealms, final SearchCond cond, fina\n         }\n     }\n \n-    private List<SortBuilder<?>> sortBuilders(\n+    protected List<SortBuilder<?>> sortBuilders(\n             final AnyTypeKind kind,\n             final List<OrderByClause> orderBy) {\n \n@@ -217,74 +232,74 @@ protected <T extends Any<?>> List<T> doSearch(\n                         .map(SearchHit::getId).collect(Collectors.toList()), kind);\n     }\n \n-    private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {\n+    protected QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind kind) {\n         QueryBuilder builder = null;\n \n         switch (cond.getType()) {\n             case LEAF:\n             case NOT_LEAF:\n                 builder = cond.getLeaf(AnyTypeCond.class).\n                         filter(leaf -> AnyTypeKind.ANY_OBJECT == kind).\n-                        map(leaf -> getQueryBuilder(leaf)).\n+                        map(this::getQueryBuilder).\n                         orElse(null);\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(RelationshipTypeCond.class).\n                             filter(leaf -> AnyTypeKind.GROUP != kind).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(RelationshipCond.class).\n                             filter(leaf -> AnyTypeKind.GROUP != kind).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(MembershipCond.class).\n                             filter(leaf -> AnyTypeKind.GROUP != kind).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(MemberCond.class).\n                             filter(leaf -> AnyTypeKind.GROUP == kind).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(AssignableCond.class).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(RoleCond.class).\n                             filter(leaf -> AnyTypeKind.USER == kind).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(PrivilegeCond.class).\n                             filter(leaf -> AnyTypeKind.USER == kind).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(DynRealmCond.class).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n                 if (builder == null) {\n                     builder = cond.getLeaf(ResourceCond.class).\n-                            map(leaf -> getQueryBuilder(leaf)).\n+                            map(this::getQueryBuilder).\n                             orElse(null);\n                 }\n \n@@ -300,9 +315,11 @@ private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind ki\n                 }\n \n                 if (builder == null) {\n-                    builder = EMPTY_QUERY_BUILDER;\n+                    builder = MATCH_NONE_QUERY_BUILDER;\n+                }\n+                if (cond.getType() == SearchCond.Type.NOT_LEAF) {\n+                    builder = QueryBuilders.boolQuery().mustNot(builder);\n                 }\n-                builder = checkNot(builder, cond.getType() == SearchCond.Type.NOT_LEAF);\n                 break;\n \n             case AND:\n@@ -323,37 +340,31 @@ private QueryBuilder getQueryBuilder(final SearchCond cond, final AnyTypeKind ki\n         return builder;\n     }\n \n-    private static QueryBuilder checkNot(final QueryBuilder builder, final boolean not) {\n-        return not\n-                ? QueryBuilders.boolQuery().mustNot(builder)\n-                : builder;\n-    }\n-\n-    private static QueryBuilder getQueryBuilder(final AnyTypeCond cond) {\n+    protected QueryBuilder getQueryBuilder(final AnyTypeCond cond) {\n         return QueryBuilders.termQuery(\"anyType\", cond.getAnyTypeKey());\n     }\n \n-    private static QueryBuilder getQueryBuilder(final RelationshipTypeCond cond) {\n+    protected QueryBuilder getQueryBuilder(final RelationshipTypeCond cond) {\n         return QueryBuilders.termQuery(\"relationshipTypes\", cond.getRelationshipTypeKey());\n     }\n \n-    private QueryBuilder getQueryBuilder(final RelationshipCond cond) {\n+    protected QueryBuilder getQueryBuilder(final RelationshipCond cond) {\n         String rightAnyObjectKey;\n         try {\n             rightAnyObjectKey = check(cond);\n         } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY_BUILDER;\n         }\n \n         return QueryBuilders.termQuery(\"relationships\", rightAnyObjectKey);\n     }\n \n-    private QueryBuilder getQueryBuilder(final MembershipCond cond) {\n+    protected QueryBuilder getQueryBuilder(final MembershipCond cond) {\n         List<String> groupKeys;\n         try {\n             groupKeys = check(cond);\n         } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY_BUILDER;\n         }\n \n         if (groupKeys.size() == 1) {\n@@ -365,12 +376,12 @@ private QueryBuilder getQueryBuilder(final MembershipCond cond) {\n         return builder;\n     }\n \n-    private QueryBuilder getQueryBuilder(final AssignableCond cond) {\n+    protected QueryBuilder getQueryBuilder(final AssignableCond cond) {\n         Realm realm;\n         try {\n             realm = check(cond);\n         } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY_BUILDER;\n         }\n \n         DisMaxQueryBuilder builder = QueryBuilders.disMaxQuery();\n@@ -387,34 +398,34 @@ private QueryBuilder getQueryBuilder(final AssignableCond cond) {\n         return builder;\n     }\n \n-    private static QueryBuilder getQueryBuilder(final RoleCond cond) {\n+    protected QueryBuilder getQueryBuilder(final RoleCond cond) {\n         return QueryBuilders.termQuery(\"roles\", cond.getRole());\n     }\n \n-    private static QueryBuilder getQueryBuilder(final PrivilegeCond cond) {\n+    protected QueryBuilder getQueryBuilder(final PrivilegeCond cond) {\n         return QueryBuilders.termQuery(\"privileges\", cond.getPrivilege());\n     }\n \n-    private static QueryBuilder getQueryBuilder(final DynRealmCond cond) {\n+    protected QueryBuilder getQueryBuilder(final DynRealmCond cond) {\n         return QueryBuilders.termQuery(\"dynRealms\", cond.getDynRealm());\n     }\n \n-    private QueryBuilder getQueryBuilder(final MemberCond cond) {\n+    protected QueryBuilder getQueryBuilder(final MemberCond cond) {\n         String memberKey;\n         try {\n             memberKey = check(cond);\n         } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY_BUILDER;\n         }\n \n         return QueryBuilders.termQuery(\"members\", memberKey);\n     }\n \n-    private static QueryBuilder getQueryBuilder(final ResourceCond cond) {\n+    protected QueryBuilder getQueryBuilder(final ResourceCond cond) {\n         return QueryBuilders.termQuery(\"resources\", cond.getResourceKey());\n     }\n \n-    private static QueryBuilder fillAttrQuery(\n+    protected QueryBuilder fillAttrQuery(\n             final PlainSchema schema,\n             final PlainAttrValue attrValue,\n             final AttrCond cond) {\n@@ -423,7 +434,7 @@ private static QueryBuilder fillAttrQuery(\n                 ? attrValue.getDateValue().getTime()\n                 : attrValue.getValue();\n \n-        QueryBuilder builder = EMPTY_QUERY_BUILDER;\n+        QueryBuilder builder = MATCH_NONE_QUERY_BUILDER;\n \n         switch (cond.getType()) {\n             case ISNOTNULL:\n@@ -485,23 +496,23 @@ private static QueryBuilder fillAttrQuery(\n         return builder;\n     }\n \n-    private QueryBuilder getQueryBuilder(final AttrCond cond, final AnyTypeKind kind) {\n+    protected QueryBuilder getQueryBuilder(final AttrCond cond, final AnyTypeKind kind) {\n         Pair<PlainSchema, PlainAttrValue> checked;\n         try {\n             checked = check(cond, kind);\n         } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY_BUILDER;\n         }\n \n         return fillAttrQuery(checked.getLeft(), checked.getRight(), cond);\n     }\n \n-    private QueryBuilder getQueryBuilder(final AnyCond cond, final AnyTypeKind kind) {\n+    protected QueryBuilder getQueryBuilder(final AnyCond cond, final AnyTypeKind kind) {\n         Triple<PlainSchema, PlainAttrValue, AnyCond> checked;\n         try {\n             checked = check(cond, kind);\n         } catch (IllegalArgumentException e) {\n-            return EMPTY_QUERY_BUILDER;\n+            return MATCH_NONE_QUERY_BUILDER;\n         }\n \n         return fillAttrQuery(checked.getLeft(), checked.getMiddle(), checked.getRight());"},{"sha":"6dd4d36c9c2af00adb68a00e3fbbd592f16a1943","filename":"ext/elasticsearch/persistence-jpa/src/test/java/org/apache/syncope/core/persistence/jpa/dao/ElasticsearchAnySearchDAOTest.java","status":"added","additions":163,"deletions":0,"changes":163,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Felasticsearch%2Fpersistence-jpa%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FElasticsearchAnySearchDAOTest.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -0,0 +1,163 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.jpa.dao;\n+\n+import static org.junit.jupiter.api.Assertions.assertEquals;\n+import static org.junit.jupiter.api.Assertions.assertFalse;\n+import static org.mockito.Mockito.mock;\n+import static org.mockito.Mockito.when;\n+\n+import java.io.IOException;\n+import java.util.List;\n+import java.util.Optional;\n+import java.util.Set;\n+import org.apache.commons.lang3.tuple.Triple;\n+import org.apache.syncope.common.lib.SyncopeConstants;\n+import org.apache.syncope.common.lib.types.AnyTypeKind;\n+import org.apache.syncope.core.persistence.api.dao.DynRealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n+import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n+import org.apache.syncope.core.persistence.api.dao.search.AttrCond;\n+import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n+import org.apache.syncope.core.persistence.api.entity.AnyUtilsFactory;\n+import org.apache.syncope.core.persistence.api.entity.DynRealm;\n+import org.apache.syncope.core.persistence.api.entity.EntityFactory;\n+import org.apache.syncope.core.persistence.api.entity.PlainSchema;\n+import org.apache.syncope.core.persistence.api.entity.Realm;\n+import org.apache.syncope.core.persistence.jpa.entity.JPAPlainSchema;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n+import org.apache.syncope.core.provisioning.api.utils.RealmUtils;\n+import org.apache.syncope.ext.elasticsearch.client.ElasticsearchUtils;\n+import org.elasticsearch.action.search.SearchRequest;\n+import org.elasticsearch.index.query.QueryBuilder;\n+import org.elasticsearch.index.query.QueryBuilders;\n+import org.junit.jupiter.api.Test;\n+import org.junit.jupiter.api.extension.ExtendWith;\n+import org.mockito.InjectMocks;\n+import org.mockito.Mock;\n+import org.mockito.MockedStatic;\n+import org.mockito.Mockito;\n+import org.mockito.junit.jupiter.MockitoExtension;\n+import org.springframework.util.ReflectionUtils;\n+\n+@ExtendWith(MockitoExtension.class)\n+public class ElasticsearchAnySearchDAOTest {\n+\n+    @Mock\n+    private RealmDAO realmDAO;\n+\n+    @Mock\n+    private DynRealmDAO dynRealmDAO;\n+\n+    @Mock\n+    private GroupDAO groupDAO;\n+\n+    @Mock\n+    private EntityFactory entityFactory;\n+\n+    @Mock\n+    private AnyUtilsFactory anyUtilsFactory;\n+\n+    @Mock\n+    private ElasticsearchUtils elasticsearchUtils;\n+\n+    @InjectMocks\n+    private ElasticsearchAnySearchDAO searchDAO;\n+\n+    @Test\n+    public void getAdminRealmsFilter_realm() {\n+        // 1. mock\n+        Realm root = mock(Realm.class);\n+        when(root.getFullPath()).thenReturn(SyncopeConstants.ROOT_REALM);\n+\n+        when(realmDAO.findByFullPath(SyncopeConstants.ROOT_REALM)).thenReturn(root);\n+        when(realmDAO.findDescendants(root)).thenReturn(List.of(root));\n+\n+        // 2. test\n+        Set<String> adminRealms = Set.of(SyncopeConstants.ROOT_REALM);\n+        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = searchDAO.getAdminRealmsFilter(adminRealms);\n+        assertEquals(\n+                QueryBuilders.disMaxQuery().add(QueryBuilders.termQuery(\"realm\", SyncopeConstants.ROOT_REALM)),\n+                filter.getLeft().get());\n+        assertEquals(Set.of(), filter.getMiddle());\n+        assertEquals(Set.of(), filter.getRight());\n+    }\n+\n+    @Test\n+    public void getAdminRealmsFilter_dynRealm() {\n+        // 1. mock\n+        DynRealm dyn = mock(DynRealm.class);\n+        when(dyn.getKey()).thenReturn(\"dyn\");\n+\n+        when(dynRealmDAO.find(\"dyn\")).thenReturn(dyn);\n+\n+        // 2. test\n+        Set<String> adminRealms = Set.of(\"dyn\");\n+        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = searchDAO.getAdminRealmsFilter(adminRealms);\n+        assertFalse(filter.getLeft().isPresent());\n+        assertEquals(Set.of(\"dyn\"), filter.getMiddle());\n+        assertEquals(Set.of(), filter.getRight());\n+    }\n+\n+    @Test\n+    public void getAdminRealmsFilter_groupOwner() {\n+        Set<String> adminRealms = Set.of(RealmUtils.getGroupOwnerRealm(\"/any\", \"groupKey\"));\n+        Triple<Optional<QueryBuilder>, Set<String>, Set<String>> filter = searchDAO.getAdminRealmsFilter(adminRealms);\n+        assertFalse(filter.getLeft().isPresent());\n+        assertEquals(Set.of(), filter.getMiddle());\n+        assertEquals(Set.of(\"groupKey\"), filter.getRight());\n+    }\n+\n+    @Test\n+    public void searchRequest_groupOwner() throws IOException {\n+        // 1. mock\n+        AnyUtils anyUtils = mock(AnyUtils.class);\n+        when(anyUtils.getField(\"id\")).thenReturn(ReflectionUtils.findField(JPAUser.class, \"id\"));\n+        when(anyUtils.newPlainAttrValue()).thenReturn(new JPAUPlainAttrValue());\n+\n+        when(anyUtilsFactory.getInstance(AnyTypeKind.USER)).thenReturn(anyUtils);\n+\n+        when(entityFactory.newEntity(PlainSchema.class)).thenReturn(new JPAPlainSchema());\n+\n+        when(groupDAO.findKey(\"groupKey\")).thenReturn(\"groupKey\");\n+\n+        try (MockedStatic<ElasticsearchUtils> utils = Mockito.mockStatic(ElasticsearchUtils.class)) {\n+            utils.when(() -> ElasticsearchUtils.getContextDomainName(\n+                    SyncopeConstants.MASTER_DOMAIN, AnyTypeKind.USER)).thenReturn(\"master_user\");\n+\n+            // 2. test\n+            Set<String> adminRealms = Set.of(RealmUtils.getGroupOwnerRealm(\"/any\", \"groupKey\"));\n+\n+            AnyCond anyCond = new AnyCond(AttrCond.Type.ISNOTNULL);\n+            anyCond.setSchema(\"id\");\n+\n+            SearchRequest searchRequest = searchDAO.searchRequest(\n+                    adminRealms, SearchCond.getLeaf(anyCond), AnyTypeKind.USER, 1, 10, List.of());\n+\n+            assertEquals(\n+                    QueryBuilders.boolQuery().\n+                            must(QueryBuilders.existsQuery(\"id\")).\n+                            must(QueryBuilders.termQuery(\"memberships\", \"groupKey\")),\n+                    searchRequest.source().query());\n+        }\n+    }\n+}"},{"sha":"1e7ca0bf4c08ce9218be41895c48477a7efa2494","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/AuthenticationITCase.java","status":"modified","additions":107,"deletions":1,"changes":108,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FAuthenticationITCase.java?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -39,6 +39,8 @@\n import org.apache.syncope.common.lib.SyncopeClientException;\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.request.AnyObjectCR;\n+import org.apache.syncope.common.lib.request.GroupCR;\n+import org.apache.syncope.common.lib.request.MembershipUR;\n import org.apache.syncope.common.lib.request.ResourceDR;\n import org.apache.syncope.common.lib.request.PasswordPatch;\n import org.apache.syncope.common.lib.request.StatusR;\n@@ -49,6 +51,7 @@\n import org.apache.syncope.common.lib.to.AnyTO;\n import org.apache.syncope.common.lib.to.AnyTypeClassTO;\n import org.apache.syncope.common.lib.to.AnyTypeTO;\n+import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.MembershipTO;\n import org.apache.syncope.common.lib.to.PagedResult;\n import org.apache.syncope.common.lib.to.PlainSchemaTO;\n@@ -73,6 +76,7 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.spring.security.Encryptor;\n import org.apache.syncope.fit.AbstractITCase;\n+import org.apache.syncope.fit.ElasticsearchDetector;\n import org.apache.syncope.fit.FlowableDetector;\n import org.junit.jupiter.api.Test;\n import org.springframework.jdbc.core.JdbcTemplate;\n@@ -404,7 +408,7 @@ public void checkUserSuspension() {\n \n     @Test\n     public void anyTypeEntitlement() {\n-        final String anyTypeKey = \"FOLDER \" + getUUIDString();\n+        String anyTypeKey = \"FOLDER \" + getUUIDString();\n \n         // 1. no entitlement exists (yet) for the any type to be created\n         assertFalse(syncopeService.platform().getEntitlements().stream().\n@@ -468,6 +472,108 @@ public void anyTypeEntitlement() {\n         belliniClient.getService(AnyObjectService.class).create(folder);\n     }\n \n+    @Test\n+    public void asGroupOwner() {\n+        // 0. prepare\n+        UserTO owner = createUser(UserITCase.getUniqueSample(\"owner@syncope.org\")).getEntity();\n+        assertNotNull(owner);\n+\n+        GroupCR groupCR = GroupITCase.getSample(\"forgroupownership\");\n+        groupCR.setUserOwner(owner.getKey());\n+        GroupTO group = createGroup(groupCR).getEntity();\n+        assertNotNull(group);\n+        assertEquals(owner.getKey(), group.getUserOwner());\n+\n+        UserCR memberCR = UserITCase.getUniqueSample(\"forgroupownership@syncope.org\");\n+        memberCR.getMemberships().add(new MembershipTO.Builder(group.getKey()).build());\n+        memberCR.getMemberships().add(new MembershipTO.Builder(\"37d15e4c-cdc1-460b-a591-8505c8133806\").build());\n+        UserTO member = createUser(memberCR).getEntity();\n+        assertEquals(2, member.getMemberships().size());\n+        String memberKey = member.getKey();\n+\n+        if (ElasticsearchDetector.isElasticSearchEnabled(syncopeService)) {\n+            try {\n+                Thread.sleep(2000);\n+            } catch (InterruptedException ex) {\n+                // ignore\n+            }\n+        }\n+\n+        PagedResult<UserTO> matching = userService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().inGroups(group.getKey()).query()).\n+                        page(1).size(1000).build());\n+        int fullMatchSize = matching.getResult().size();\n+        assertTrue(matching.getResult().stream().anyMatch(user -> memberKey.equals(user.getKey())));\n+\n+        UserService groupOwnerService = clientFactory.create(owner.getUsername(), \"password123\").\n+                getService(UserService.class);\n+\n+        // 1. search\n+        matching = groupOwnerService.search(\n+                new AnyQuery.Builder().realm(SyncopeConstants.ROOT_REALM).\n+                        fiql(SyncopeClient.getUserSearchConditionBuilder().isNotNull(\"key\").query()).\n+                        page(1).size(1000).build());\n+        assertEquals(fullMatchSize, matching.getResult().size());\n+        assertTrue(matching.getResult().stream().anyMatch(user -> memberKey.equals(user.getKey())));\n+\n+        // 2. update and read\n+        UserUR memberUR = new UserUR();\n+        memberUR.setKey(memberKey);\n+        memberUR.setUsername(new StringReplacePatchItem.Builder().value(\"new\" + getUUIDString()).build());\n+\n+        Response response = groupOwnerService.update(memberUR);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        member = groupOwnerService.read(memberKey);\n+        assertEquals(memberUR.getUsername().getValue(), member.getUsername());\n+        assertEquals(2, member.getMemberships().size());\n+\n+        // 3. update with membership removal -> fail\n+        memberUR.setUsername(null);\n+        memberUR.getMemberships().add(new MembershipUR.Builder(group.getKey()).\n+                operation(PatchOperation.DELETE).build());\n+        try {\n+            groupOwnerService.update(memberUR);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n+        }\n+\n+        // 4. update non-member -> fail\n+        UserTO nonmember = createUser(UserITCase.getUniqueSample(\"nonmember@syncope.org\")).getEntity();\n+        UserUR nonmemberUR = new UserUR();\n+        nonmemberUR.setKey(nonmember.getKey());\n+        nonmemberUR.setUsername(new StringReplacePatchItem.Builder().value(\"new\" + getUUIDString()).build());\n+        try {\n+            groupOwnerService.update(nonmemberUR);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.DelegatedAdministration, e.getType());\n+        }\n+\n+        // 5. update user under /even\n+        memberCR = UserITCase.getUniqueSample(\"forgroupownership2@syncope.org\");\n+        memberCR.setRealm(\"/even\");\n+        memberCR.getMemberships().add(new MembershipTO.Builder(group.getKey()).build());\n+        member = createUser(memberCR).getEntity();\n+\n+        memberUR = new UserUR();\n+        memberUR.setKey(member.getKey());\n+        memberUR.setUsername(new StringReplacePatchItem.Builder().value(\"new\" + getUUIDString()).build());\n+        response = groupOwnerService.update(memberUR);\n+        assertEquals(Response.Status.OK.getStatusCode(), response.getStatus());\n+\n+        // 6 delete\n+        groupOwnerService.delete(memberKey);\n+        try {\n+            userService.read(memberKey);\n+            fail();\n+        } catch (SyncopeClientException e) {\n+            assertEquals(ClientExceptionType.NotFound, e.getType());\n+        }\n+    }\n+\n     @Test\n     public void issueSYNCOPE434() {\n         assumeTrue(FlowableDetector.isFlowableEnabledForUserWorkflow(syncopeService));"},{"sha":"9f5073b2f1bb878e1aa297fa41dfc5fe4dc87f71","filename":"src/main/asciidoc/reference-guide/concepts/roles.adoc","status":"modified","additions":31,"deletions":10,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/3482fa893a077cb537168d1024fce11c3ea93129/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/3482fa893a077cb537168d1024fce11c3ea93129/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/src%2Fmain%2Fasciidoc%2Freference-guide%2Fconcepts%2Froles.adoc?ref=3482fa893a077cb537168d1024fce11c3ea93129","patch":"@@ -74,16 +74,6 @@ above:\n * Administrator C: `GROUP_UPDATE` on R~8~\n ====\n \n-[NOTE]\n-.Group Ownership\n-====\n-Groups can designate a user or another group as _owner_.\n-\n-The practical consequence of this setting is that Users owning a Group (either because they are directly set as owners\n-or members of the owning group) is that they are entitled to perform all operations (create, update, delete, ...) on the\n-owned group, regardless of the Realm.\n-====\n-\n [[delegated-administration-console]]\n [TIP]\n .Delegated Administration via Admin Console\n@@ -106,3 +96,34 @@ For example, the following entitlements are normally required to be granted for\n . `REALM_LIST`\n . `GROUP_SEARCH`\n ====\n+\n+===== Group Ownership\n+\n+Groups can designate a User or another Group as _owner_.\n+\n+The practical consequence of this setting is that Users owning a Group (either because they are directly set as owners\n+or members of the owning Group) is that they are entitled to\n+\n+* perform all operations (create, update, delete, ...) on the owned Group\n+* perform all operations (create, update, delete, ...) on all User and Any Object members of the owner Group, with\n+exception of removing members from the Group itself\n+\n+regardless of the Realm.\n+\n+The actual Entitlements are assigned through the predefined `GROUP_OWNER` Role:\n+\n+. `USER_SEARCH`\n+. `USER_READ`\n+. `USER_CREATE`\n+. `USER_UPDATE`\n+. `USER_DELETE`\n+. `ANYTYPECLASS_READ`\n+. `ANYTYPE_LIST`\n+. `ANYTYPECLASS_LIST`\n+. `RELATIONSHIPTYPE_LIST`\n+. `ANYTYPE_READ`\n+. `REALM_LIST`\n+. `GROUP_SEARCH`\n+. `GROUP_READ`\n+. `GROUP_UPDATE`\n+. `GROUP_DELETE`"}]}