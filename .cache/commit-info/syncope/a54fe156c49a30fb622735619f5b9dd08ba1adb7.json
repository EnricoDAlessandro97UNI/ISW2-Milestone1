{"sha":"a54fe156c49a30fb622735619f5b9dd08ba1adb7","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmE1NGZlMTU2YzQ5YTMwZmI2MjI3MzU2MTlmNWI5ZGQwOGJhMWFkYjc=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-09-01T13:17:23Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-09-01T13:17:23Z"},"message":"Global Password Policy implementation\n\nUpdate issue 78\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247105 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"407e7be8638076dc176a5e1d3df211464d5c2922","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/407e7be8638076dc176a5e1d3df211464d5c2922"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/a54fe156c49a30fb622735619f5b9dd08ba1adb7","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a54fe156c49a30fb622735619f5b9dd08ba1adb7","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/a54fe156c49a30fb622735619f5b9dd08ba1adb7","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/a54fe156c49a30fb622735619f5b9dd08ba1adb7/comments","author":null,"committer":null,"parents":[{"sha":"7808d37bb9cf9f70c334f85f1b7145f34d9816e6","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7808d37bb9cf9f70c334f85f1b7145f34d9816e6","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7808d37bb9cf9f70c334f85f1b7145f34d9816e6"}],"stats":{"total":4216,"additions":3428,"deletions":788},"files":[{"sha":"21bf28ca2d4fa968e72c9cd1e89dd0a1cb58e717","filename":"client/src/main/java/org/syncope/client/mod/AccountPolicyMod.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FAccountPolicyMod.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import org.syncope.types.PasswordPolicy;\n+\n+public class AccountPolicyMod extends PolicyMod {\n+\n+    private static final long serialVersionUID = 5410030012094184828L;\n+\n+    private PasswordPolicy specification;\n+\n+    public AccountPolicyMod() {\n+    }\n+\n+    public PasswordPolicy getSpecification() {\n+        return specification;\n+    }\n+\n+    public void setSpecification(PasswordPolicy specification) {\n+        this.specification = specification;\n+    }\n+}"},{"sha":"345e931e15a88ab05e980bbbeaefe53ed777b3c0","filename":"client/src/main/java/org/syncope/client/mod/PasswordPolicyMod.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPasswordPolicyMod.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import org.syncope.types.PasswordPolicy;\n+\n+public class PasswordPolicyMod extends PolicyMod {\n+\n+    private static final long serialVersionUID = -7948423277026280828L;\n+\n+    private PasswordPolicy specification;\n+\n+    public PasswordPolicyMod() {\n+    }\n+\n+    public PasswordPolicy getSpecification() {\n+        return specification;\n+    }\n+\n+    public void setSpecification(PasswordPolicy specification) {\n+        this.specification = specification;\n+    }\n+}"},{"sha":"8a53f8482c21cc3d55420563409c2b2c83af3056","filename":"client/src/main/java/org/syncope/client/mod/PolicyMod.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FPolicyMod.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,46 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.PolicyType;\n+\n+public abstract class PolicyMod extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -4188817853738067677L;\n+\n+    private long id;\n+\n+    private PolicyType type;\n+\n+    public PolicyMod() {\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public PolicyType getType() {\n+        return type;\n+    }\n+\n+    public void setType(PolicyType type) {\n+        this.type = type;\n+    }\n+}"},{"sha":"3429a5a4835c0d151be293cbc6f366bdc961be82","filename":"client/src/main/java/org/syncope/client/mod/SyncPolicyMod.java","status":"added","additions":35,"deletions":0,"changes":35,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FSyncPolicyMod.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,35 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.mod;\n+\n+import org.syncope.types.SyncPolicy;\n+\n+public class SyncPolicyMod extends PolicyMod {\n+\n+    private static final long serialVersionUID = 7438813240484903242L;\n+\n+    private SyncPolicy specification;\n+\n+    public SyncPolicyMod() {\n+    }\n+\n+    public SyncPolicy getSpecification() {\n+        return specification;\n+    }\n+\n+    public void setSpecification(SyncPolicy specification) {\n+        this.specification = specification;\n+    }\n+}"},{"sha":"9fa13f6fd16de2542e97f43ae1a0c8a069183ba9","filename":"client/src/main/java/org/syncope/client/to/AccountPolicyTO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAccountPolicyTO.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import org.syncope.types.AccountPolicy;\n+import org.syncope.types.PolicyType;\n+\n+public class AccountPolicyTO extends PolicyTO {\n+\n+    private static final long serialVersionUID = -1557150042828800134L;\n+\n+    private AccountPolicy specification;\n+\n+    public AccountPolicyTO() {\n+        setType(PolicyType.ACCOUNT);\n+    }\n+\n+    public AccountPolicy getSpecification() {\n+        return specification;\n+    }\n+\n+    public void setSpecification(AccountPolicy specification) {\n+        this.specification = specification;\n+    }\n+}"},{"sha":"c10ffeecffee6ae14a6f1a64e5ba2833eb13f092","filename":"client/src/main/java/org/syncope/client/to/ConfigurationTO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FConfigurationTO.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -18,6 +18,8 @@\n \n public class ConfigurationTO extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -3825039700228595590L;\n+\n     private String key;\n \n     private String value;"},{"sha":"bd7aacd45f7c663565457f4a8956344839157df0","filename":"client/src/main/java/org/syncope/client/to/PasswordPolicyTO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPasswordPolicyTO.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PolicyType;\n+\n+public class PasswordPolicyTO extends PolicyTO {\n+\n+    private static final long serialVersionUID = -5606086441294799690L;\n+\n+    private PasswordPolicy specification;\n+\n+    public PasswordPolicyTO() {\n+        setType(PolicyType.PASSWORD);\n+    }\n+\n+    public PasswordPolicy getSpecification() {\n+        return specification;\n+    }\n+\n+    public void setSpecification(PasswordPolicy specification) {\n+        this.specification = specification;\n+    }\n+}"},{"sha":"ad029090ff7501590f0fd9641a0ca63cd68c0068","filename":"client/src/main/java/org/syncope/client/to/PolicyTO.java","status":"added","additions":43,"deletions":0,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FPolicyTO.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,43 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import org.syncope.client.AbstractBaseBean;\n+import org.syncope.types.PolicyType;\n+\n+public abstract class PolicyTO extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = -2903888572649721035L;\n+\n+    private long id;\n+\n+    private PolicyType type;\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public PolicyType getType() {\n+        return type;\n+    }\n+\n+    public void setType(PolicyType type) {\n+        this.type = type;\n+    }\n+}"},{"sha":"af4c7821d757753e83bde49cff097d9d9504defb","filename":"client/src/main/java/org/syncope/client/to/SyncPolicyTO.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FSyncPolicyTO.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import org.syncope.types.PolicyType;\n+import org.syncope.types.SyncPolicy;\n+\n+public class SyncPolicyTO extends PolicyTO {\n+\n+    private static final long serialVersionUID = 993024634238024242L;\n+\n+    private SyncPolicy specification;\n+\n+    public SyncPolicyTO() {\n+        setType(PolicyType.SYNC);\n+    }\n+\n+    public SyncPolicy getSpecification() {\n+        return specification;\n+    }\n+\n+    public void setSpecification(SyncPolicy specification) {\n+        this.specification = specification;\n+    }\n+}"},{"sha":"8afec282cd13e1b8d566f7958068fe18bb688fb7","filename":"client/src/main/java/org/syncope/types/AbstractPolicy.java","status":"modified","additions":6,"deletions":1,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAbstractPolicy.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -16,5 +16,10 @@\n \n import org.syncope.client.AbstractBaseBean;\n \n-public abstract class AbstractPolicy extends AbstractBaseBean {\n+public class AbstractPolicy extends AbstractBaseBean {\n+\n+    private static final long serialVersionUID = 2740439904103716653L;\n+\n+    public AbstractPolicy() {\n+    }\n }"},{"sha":"fc6eb550b81b30e2071bf5a605fd91a21c6c660c","filename":"client/src/main/java/org/syncope/types/AccountPolicy.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicy.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,31 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public class AccountPolicy extends AbstractPolicy {\n+\n+    private static final long serialVersionUID = -6325902340423910118L;\n+    // TODO: To be defined\n+\n+    private String fake;\n+\n+    public String getFake() {\n+        return fake;\n+    }\n+\n+    public void setFake(String fake) {\n+        this.fake = fake;\n+    }\n+}"},{"sha":"9cb846b2133402c2b42b26ca68e903fc1d9682b6","filename":"client/src/main/java/org/syncope/types/PasswordPolicy.java","status":"renamed","additions":81,"deletions":1,"changes":82,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPasswordPolicy.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -17,7 +17,14 @@\n import java.util.ArrayList;\n import java.util.List;\n \n-public class SyntaxPolicy extends AbstractPolicy {\n+public class PasswordPolicy extends AbstractPolicy {\n+\n+    private static final long serialVersionUID = -7988778083915548547L;\n+\n+    /**\n+     * History length\n+     */\n+    private int historyLength;\n \n     /**\n      * Minimum length.\n@@ -44,6 +51,11 @@ public class SyntaxPolicy extends AbstractPolicy {\n      */\n     private boolean nonAlphanumericRequired;\n \n+    /**\n+     * Specify if one or more alphanumeric characters are required.\n+     */\n+    private boolean alphanumericRequired;\n+\n     /**\n      * Specify if one or more digits are required.\n      */\n@@ -84,21 +96,41 @@ public class SyntaxPolicy extends AbstractPolicy {\n      */\n     private boolean mustStartWithNonAlpha;\n \n+    /**\n+     * Specify if must start with a alphanumeric caracther.\n+     */\n+    private boolean mustStartWithAlpha;\n+\n     /**\n      * Specify if mustn't start with a non alphanumeric caracther.\n      */\n     private boolean mustntStartWithNonAlpha;\n \n+    /**\n+     * Specify if mustn't start with a alphanumeric caracther.\n+     */\n+    private boolean mustntStartWithAlpha;\n+\n     /**\n      * Specify if must end with a non alphanumeric caracther.\n      */\n     private boolean mustEndWithNonAlpha;\n \n+    /**\n+     * Specify if must end with a alphanumeric caracther.\n+     */\n+    private boolean mustEndWithAlpha;\n+\n     /**\n      * Specify if mustn't end with a non alphanumeric caracther.\n      */\n     private boolean mustntEndWithNonAlpha;\n \n+    /**\n+     * Specify if mustn't end with a alphanumeric caracther.\n+     */\n+    private boolean mustntEndWithAlpha;\n+\n     /**\n      * Substrings not permitted as prefix.\n      */\n@@ -264,4 +296,52 @@ public List<String> getWordsNotPermitted() {\n     public void setWordsNotPermitted(List<String> wordsNotPermitted) {\n         this.wordsNotPermitted = wordsNotPermitted;\n     }\n+\n+    public boolean isAlphanumericRequired() {\n+        return alphanumericRequired;\n+    }\n+\n+    public void setAlphanumericRequired(boolean alphanumericRequired) {\n+        this.alphanumericRequired = alphanumericRequired;\n+    }\n+\n+    public boolean isMustEndWithAlpha() {\n+        return mustEndWithAlpha;\n+    }\n+\n+    public void setMustEndWithAlpha(boolean mustEndWithAlpha) {\n+        this.mustEndWithAlpha = mustEndWithAlpha;\n+    }\n+\n+    public boolean isMustStartWithAlpha() {\n+        return mustStartWithAlpha;\n+    }\n+\n+    public void setMustStartWithAlpha(boolean mustStartWithAlpha) {\n+        this.mustStartWithAlpha = mustStartWithAlpha;\n+    }\n+\n+    public boolean isMustntEndWithAlpha() {\n+        return mustntEndWithAlpha;\n+    }\n+\n+    public void setMustntEndWithAlpha(boolean mustntEndWithAlpha) {\n+        this.mustntEndWithAlpha = mustntEndWithAlpha;\n+    }\n+\n+    public boolean isMustntStartWithAlpha() {\n+        return mustntStartWithAlpha;\n+    }\n+\n+    public void setMustntStartWithAlpha(boolean mustntStartWithAlpha) {\n+        this.mustntStartWithAlpha = mustntStartWithAlpha;\n+    }\n+\n+    public int getHistoryLength() {\n+        return historyLength;\n+    }\n+\n+    public void setHistoryLength(int historyLength) {\n+        this.historyLength = historyLength;\n+    }\n }","previous_filename":"client/src/main/java/org/syncope/types/SyntaxPolicy.java"},{"sha":"23dcd04171d94c638330b922171b25bcea2c9037","filename":"client/src/main/java/org/syncope/types/PolicyType.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -26,7 +26,7 @@ public enum PolicyType {\n      */\n     PASSWORD,\n     /**\n-     * Schema policy regarding attribute value syntax.\n+     * SYNC policy regarding account conflicts resolution.\n      */\n-    SCHEMA\n+    SYNC\n }"},{"sha":"5a3bc7b06d3b9b6f5daa480ec95f1729fa9cb951","filename":"client/src/main/java/org/syncope/types/SyncPolicy.java","status":"added","additions":31,"deletions":0,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicy.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,31 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.types;\n+\n+public class SyncPolicy extends AbstractPolicy {\n+\n+    private static final long serialVersionUID = -3144027171719498127L;\n+\n+    // TODO: To be defined\n+    private String fake;\n+\n+    public String getFake() {\n+        return fake;\n+    }\n+\n+    public void setFake(String fake) {\n+        this.fake = fake;\n+    }\n+}"},{"sha":"71722a50f1e71c93e9a6d0f3d89659a8f237f296","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -31,6 +31,9 @@ public enum SyncopeClientExceptionType {\n     InvalidPassword(\n     \"Syncope.InvalidPassword\",\n     \"Syncope.InvalidPassword.reason\"),\n+    InvalidPolicy(\n+    \"Syncope.InvalidPolicy\",\n+    \"Syncope.InvalidPolicy.reason\"),\n     IncompletePropagationTaskExec(\n     \"Syncope.IncompletePropagationTaskExec\",\n     \"Syncope.IncompletePropagationTaskExec.id\"),"},{"sha":"fb4de82fc4d57de6f2e9ac70100faa208989cdf4","filename":"console/src/main/java/org/syncope/console/commons/SelectChoiceRenderer.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fcommons%2FSelectChoiceRenderer.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -18,6 +18,8 @@\n \n public class SelectChoiceRenderer implements IChoiceRenderer {\n \n+    private static final long serialVersionUID = -3242441544405909243L;\n+\n     @Override\n     public Object getDisplayValue(Object obj) {\n         if (obj instanceof SelectOption) {"},{"sha":"30f411bb50de8dfece4f51bad06b8205f98cfba6","filename":"console/src/main/java/org/syncope/console/pages/BaseModalPage.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -32,6 +32,8 @@ public class BaseModalPage extends WebPage {\n     protected static final Logger LOG = LoggerFactory.getLogger(\n             BasePage.class);\n \n+    private static final long serialVersionUID = -1443079028368471943L;\n+\n     @SpringBean\n     protected XMLRolesReader xmlRolesReader;\n "},{"sha":"54f01b83dfdfcf17bfbf40e775674a4d3ffe0ca7","filename":"console/src/main/java/org/syncope/console/pages/Configuration.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -57,6 +57,7 @@\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.commons.SortableDataProviderComparator;\n+import org.syncope.console.pages.panels.PasswordPolicyPanel;\n import org.syncope.console.rest.ConfigurationRestClient;\n import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n@@ -273,6 +274,8 @@ protected void onUpdate(final AjaxRequestTarget target) {\n \n         add(paginatorForm);\n \n+        add(new PasswordPolicyPanel(\"passwordPolicy\"));\n+\n         // Logger stuff\n         PropertyListView coreLoggerList =\n                 new LoggerPropertyList(null,"},{"sha":"466b5b77810ba5db4b330f6e958bdd81faa07a92","filename":"console/src/main/java/org/syncope/console/pages/ConnectorModalPage.java","status":"modified","additions":18,"deletions":6,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConnectorModalPage.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -49,6 +49,7 @@\n import org.syncope.types.ConnConfProperty;\n import org.syncope.console.rest.ConnectorRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.syncope.console.wicket.markup.html.form.FieldPanel;\n import org.syncope.types.ConnConfPropSchema;\n import org.syncope.types.ConnectorCapability;\n \n@@ -57,6 +58,8 @@\n  */\n public class ConnectorModalPage extends BaseModalPage {\n \n+    private static final long serialVersionUID = -2025535531121434050L;\n+\n     @SpringBean\n     private ConnectorRestClient restClient;\n \n@@ -192,17 +195,26 @@ protected void onUpdate(final AjaxRequestTarget target) {\n             protected void populateItem(final ListItem<ConnConfProperty> item) {\n                 ConnConfProperty property = item.getModelObject();\n \n-                item.add(new Label(\"connPropAttrSchema\",\n+                Label label = new Label(\"connPropAttrSchema\",\n                         property.getSchema().getDisplayName() == null\n                         || property.getSchema().getDisplayName().isEmpty()\n                         ? property.getSchema().getName()\n-                        : property.getSchema().getDisplayName()));\n+                        : property.getSchema().getDisplayName());\n+\n+                item.add(label);\n \n-                item.add(new AjaxTextFieldPanel(\n-                        \"connPropAttrValue\", property.getSchema().getName(),\n+                final FieldPanel field = new AjaxTextFieldPanel(\n+                        \"connPropAttrValue\",\n+                        label.getDefaultModelObjectAsString(),\n                         new PropertyModel<String>(property, \"value\"),\n-                        property.getSchema().isRequired(),\n-                        property.getSchema().getHelpMessage()));\n+                        true).setRequired(property.getSchema().isRequired()).\n+                        setTitle(property.getSchema().getHelpMessage());\n+\n+                if (property.getSchema().isRequired()) {\n+                    field.addRequiredLabel();\n+                }\n+\n+                item.add(field);\n \n                 connectorTO.getConfiguration().add(property);\n             }"},{"sha":"624bf4ff032e3e1937359620a48c4b23ab32cdf1","filename":"console/src/main/java/org/syncope/console/pages/GTaskModalPage.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FGTaskModalPage.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -30,6 +30,8 @@\n  */\n public class GTaskModalPage extends SchedTaskModalPage {\n \n+    private static final long serialVersionUID = -2501860242590060867L;\n+\n     /**\n      *\n      * @param basePage base"},{"sha":"39cd69deffcf66bdf9ec5263ec55dbd6ac674752","filename":"console/src/main/java/org/syncope/console/pages/SchedTaskModalPage.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FSchedTaskModalPage.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -40,6 +40,8 @@\n  */\n public class SchedTaskModalPage extends TaskModalPage {\n \n+    private static final long serialVersionUID = 2892005971093059242L;\n+\n     protected WebMarkupContainer crontab;\n \n     /**"},{"sha":"acbe5a2d6cecc6b4e34c78ba4578c30be7ea1156","filename":"console/src/main/java/org/syncope/console/pages/TaskModalPage.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTaskModalPage.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -41,6 +41,7 @@\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.springframework.util.StringUtils;\n import org.syncope.client.to.PropagationTaskTO;\n import org.syncope.client.to.SchedTaskTO;\n import org.syncope.client.to.SyncTaskTO;\n@@ -149,6 +150,10 @@ public void onClick(final AjaxRequestTarget target) {\n                 panel.add(messageLink);\n \n                 cellItem.add(panel);\n+\n+                if (!StringUtils.hasText(model.getObject().getMessage())) {\n+                    messageLink.setEnabled(false);\n+                }\n             }\n         });\n "},{"sha":"f09b2af18d2cb2ee14257052733ecefd09acfe8c","filename":"console/src/main/java/org/syncope/console/pages/Tasks.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FTasks.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -60,6 +60,8 @@ public class Tasks extends BasePage {\n         \"Fire at 12am (midnight) every Monday\", \"0 0 0 ? * 2\")\n     };\n \n+    private static final long serialVersionUID = 5289215853622289061L;\n+\n     public Tasks(final PageParameters parameters) {\n         super();\n "},{"sha":"be3c97c0f8a89686a96e0b66bd042224248c9135","filename":"console/src/main/java/org/syncope/console/pages/Users.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FUsers.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -972,7 +972,9 @@ protected void populateItem(\n                         protected void onUpdate(\n                                 final AjaxRequestTarget target) {\n \n-                            filterNameChooser.setChoices(searchCondition.getFilterType() == FilterType.ATTRIBUTE\n+                            filterNameChooser.setChoices(\n+                                    searchCondition.getFilterType() ==\n+                                    FilterType.ATTRIBUTE\n                                     ? schemaNames : roleNames);\n                             target.addComponent(filterNameChooser);\n                             target.addComponent(searchFormContainer);"},{"sha":"2ade87a5e7d0e399c54be78e609598e6a498696b","filename":"console/src/main/java/org/syncope/console/pages/panels/AttributesPanel.java","status":"modified","additions":69,"deletions":140,"changes":209,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -14,24 +14,15 @@\n  */\n package org.syncope.console.pages.panels;\n \n-import java.io.Serializable;\n-import java.text.DateFormat;\n-import java.text.Format;\n-import java.text.ParseException;\n-import java.text.SimpleDateFormat;\n+import org.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n import java.util.ArrayList;\n import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.HashMap;\n import java.util.List;\n import java.util.Map;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.markup.html.form.AjaxButton;\n-import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.markup.html.WebMarkupContainer;\n import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.Form;\n import org.apache.wicket.markup.html.list.ListItem;\n import org.apache.wicket.markup.html.list.ListView;\n@@ -43,7 +34,6 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.springframework.util.StringUtils;\n import org.syncope.client.to.AbstractAttributableTO;\n import org.syncope.client.to.AttributeTO;\n import org.syncope.client.to.RoleTO;\n@@ -54,8 +44,9 @@\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.syncope.console.wicket.markup.html.form.DateFieldPanel;\n-import org.syncope.types.SchemaType;\n+import org.syncope.console.wicket.markup.html.form.DateTextFieldPanel;\n+import org.syncope.console.wicket.markup.html.form.DateTimeFieldPanel;\n+import org.syncope.console.wicket.markup.html.form.FieldPanel;\n \n public class AttributesPanel extends Panel {\n \n@@ -65,6 +56,8 @@ public class AttributesPanel extends Panel {\n     protected static final Logger LOG =\n             LoggerFactory.getLogger(AttributesPanel.class);\n \n+    private static final long serialVersionUID = 552437609667518888L;\n+\n     @SpringBean\n     private SchemaRestClient schemaRestClient;\n \n@@ -77,6 +70,9 @@ public <T extends AbstractAttributableTO> AttributesPanel(\n         final IModel<Map<String, SchemaTO>> schemas =\n                 new LoadableDetachableModel<Map<String, SchemaTO>>() {\n \n+                    private static final long serialVersionUID =\n+                            -2012833443695917883L;\n+\n                     @Override\n                     protected Map<String, SchemaTO> load() {\n                         final List<SchemaTO> schemaTOs;\n@@ -112,76 +108,35 @@ protected Map<String, SchemaTO> load() {\n                 \"schemas\", new PropertyModel<List<? extends AttributeTO>>(\n                 entityTO, \"attributes\")) {\n \n+            private static final long serialVersionUID = 9101744072914090143L;\n+\n             @Override\n             protected void populateItem(ListItem item) {\n                 final AttributeTO attributeTO =\n                         (AttributeTO) item.getDefaultModelObject();\n \n                 item.add(new Label(\"name\", attributeTO.getSchema()));\n \n-                item.add(new ListView(\n-                        \"fields\", attributeTO.getValues()) {\n-\n-                    @Override\n-                    protected void populateItem(final ListItem item) {\n-                        item.add(getFieldPanel(schemas.getObject().get(\n-                                attributeTO.getSchema()), form, item));\n-                    }\n-                });\n-\n-                final AjaxButton addButton =\n-                        new IndicatingAjaxButton(\"add\",\n-                        new Model(getString(\"add\"))) {\n-\n-                            @Override\n-                            protected void onSubmit(\n-                                    final AjaxRequestTarget target,\n-                                    final Form form) {\n-                                attributeTO.getValues().add(\"\");\n-                                target.addComponent(attributesContainer);\n-                            }\n-                        };\n-\n-                final AjaxButton dropButton =\n-                        new IndicatingAjaxButton(\"drop\",\n-                        new Model(getString(\"drop\"))) {\n-\n-                            @Override\n-                            protected void onSubmit(\n-                                    final AjaxRequestTarget target,\n-                                    final Form form) {\n-                                //Drop the last component added\n-                                attributeTO.getValues().remove(\n-                                        attributeTO.getValues().size() - 1);\n-\n-                                target.addComponent(attributesContainer);\n-                            }\n-                        };\n+                final Panel panel = getFieldPanel(\n+                        schemas.getObject().get(attributeTO.getSchema()),\n+                        form,\n+                        attributeTO);\n \n                 if (schemas.getObject().get(attributeTO.getSchema()).\n-                        getType() == SchemaType.Boolean) {\n-                    addButton.setVisible(false);\n-                    dropButton.setVisible(false);\n+                        isMultivalue()) {\n+\n+                    final MultiValueSelectorPanel multiFieldPanel =\n+                            new MultiValueSelectorPanel<String>(\n+                            \"panel\",\n+                            new PropertyModel(attributeTO, \"values\"),\n+                            String.class,\n+                            (FieldPanel) panel);\n+\n+                    item.add(multiFieldPanel);\n+                } else {\n+                    item.add(panel);\n                 }\n \n-                addButton.setVisible(\n-                        schemas.getObject().get(\n-                        attributeTO.getSchema()).isMultivalue());\n-                dropButton.setVisible(\n-                        schemas.getObject().get(\n-                        attributeTO.getSchema()).isMultivalue());\n-\n-                dropButton.setVisible(\n-                        attributeTO.getValues().size() > 1);\n-\n-                addButton.setEnabled(!attributeTO.isReadonly());\n-                dropButton.setEnabled(!attributeTO.isReadonly());\n-\n-                addButton.setDefaultFormProcessing(false);\n-                dropButton.setDefaultFormProcessing(false);\n-\n-                item.add(addButton);\n-                item.add(dropButton);\n             }\n         };\n \n@@ -228,101 +183,75 @@ private List<AttributeTO> initEntityData(\n     private Panel getFieldPanel(\n             final SchemaTO schemaTO,\n             final Form form,\n-            final ListItem item) {\n-        Panel panel;\n+            final AttributeTO attributeTO) {\n \n-        boolean required =\n+        final FieldPanel panel;\n+\n+        final boolean required =\n                 schemaTO.getMandatoryCondition().equalsIgnoreCase(\"true\");\n \n+        final boolean readOnly = schemaTO.isReadonly();\n+\n         switch (schemaTO.getType()) {\n             case Boolean:\n                 panel = new AjaxCheckBoxPanel(\n-                        \"panel\", schemaTO.getName(), new Model() {\n-\n-                    @Override\n-                    public Serializable getObject() {\n-                        return (String) item.getModelObject();\n-                    }\n+                        \"panel\", schemaTO.getName(), new Model(), true);\n \n-                    @Override\n-                    public void setObject(Serializable object) {\n-                        item.setModelObject(((Boolean) object).toString());\n-                    }\n-                }, required, schemaTO.isReadonly());\n+                panel.setRequired(required);\n \n                 break;\n+\n             case Date:\n-                panel = new DateFieldPanel(\n-                        \"panel\", schemaTO.getName(), new Model() {\n+                if (!schemaTO.getConversionPattern().contains(\"H\")) {\n+                    panel = new DateTextFieldPanel(\n+                            \"panel\", schemaTO.getName(), new Model(), true,\n+                            schemaTO.getConversionPattern());\n \n-                    @Override\n-                    public Serializable getObject() {\n-                        final DateFormat formatter = new SimpleDateFormat(\n-                                schemaTO.getConversionPattern());\n-                        Date date = null;\n-                        try {\n-                            String dateValue = (String) item.getModelObject();\n-                            //Default value:yyyy-MM-dd\n-                            if (StringUtils.hasText(dateValue)) {\n-                                date = formatter.parse(dateValue);\n-                            }\n-                        } catch (ParseException e) {\n-                            LOG.error(\"While parsing date\", e);\n-                        }\n-                        return date;\n+                    if (required) {\n+                        panel.addRequiredLabel();\n                     }\n-\n-                    @Override\n-                    public void setObject(Serializable object) {\n-                        if (object != null) {\n-                            final Format formatter = new SimpleDateFormat(\n-                                    schemaTO.getConversionPattern());\n-                            item.setModelObject(formatter.format((Date) object));\n-                        } else {\n-                            item.setModelObject(object);\n-                        }\n+                } else {\n+                    panel = new DateTimeFieldPanel(\n+                            \"panel\", schemaTO.getName(), new Model(), true,\n+                            schemaTO.getConversionPattern());\n+\n+                    if (required) {\n+                        panel.addRequiredLabel();\n+                        ((DateTimeFieldPanel) panel).setFormValidator(form);\n                     }\n-                }, schemaTO.getConversionPattern(),\n-                        required,\n-                        schemaTO.isReadonly(),\n-                        form);\n+\n+                    panel.setStyleShet(\"ui-widget-content ui-corner-all\");\n+                }\n+\n                 break;\n \n             case Enum:\n                 panel = new AjaxDropDownChoicePanel(\n-                        \"panel\", schemaTO.getName(), new Model() {\n+                        \"panel\", schemaTO.getName(), new Model(), true);\n \n-                    @Override\n-                    public Serializable getObject() {\n-                        return (String) item.getModelObject();\n-                    }\n+                ((AjaxDropDownChoicePanel) panel).setChoices(\n+                        Arrays.asList(schemaTO.getEnumerationValues().\n+                        split(Schema.enumValuesSeparator)));\n+\n+                if (required) {\n+                    panel.addRequiredLabel();\n+                }\n \n-                    @Override\n-                    public void setObject(Serializable object) {\n-                        item.setModelObject((String) object);\n-                    }\n-                }, Arrays.asList(schemaTO.getEnumerationValues().\n-                        split(Schema.enumValuesSeparator)),\n-                        new ChoiceRenderer(),\n-                        required);\n                 break;\n \n             default:\n                 panel = new AjaxTextFieldPanel(\n-                        \"panel\", schemaTO.getName(), new Model() {\n+                        \"panel\", schemaTO.getName(), new Model(), true);\n \n-                    @Override\n-                    public Serializable getObject() {\n-                        return (String) item.getModelObject();\n-                    }\n+                if (required) {\n+                    panel.addRequiredLabel();\n+                }\n \n-                    @Override\n-                    public void setObject(Serializable object) {\n-                        item.setModelObject((String) object);\n-                    }\n-                }, required, schemaTO.isReadonly());\n         }\n \n+        panel.setReadOnly(readOnly);\n+        panel.setNewModel(attributeTO.getValues());\n+\n         return panel;\n     }\n }"},{"sha":"cbbaa256597151297b31e9551ae20647e780781d","filename":"console/src/main/java/org/syncope/console/pages/panels/PasswordPolicyPanel.java","status":"added","additions":309,"deletions":0,"changes":309,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,309 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.pages.panels;\n+\n+import java.io.Serializable;\n+import java.lang.reflect.Field;\n+import java.lang.reflect.Method;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Set;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.CompoundPropertyModel;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.LoadableDetachableModel;\n+import org.apache.wicket.model.Model;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.util.StringUtils;\n+import org.syncope.client.mod.PasswordPolicyMod;\n+import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.SchemaTO;\n+import org.syncope.console.commons.XMLRolesReader;\n+import org.syncope.console.rest.PolicyRestClient;\n+import org.syncope.console.rest.SchemaRestClient;\n+import org.syncope.console.wicket.markup.html.form.AbstractFieldPanel;\n+import org.syncope.console.wicket.markup.html.form.MultiValueSelectorPanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxPalettePanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.syncope.console.wicket.markup.html.form.FieldPanel;\n+import org.syncope.types.PasswordPolicy;\n+\n+public class PasswordPolicyPanel extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(\n+            PasswordPolicyPanel.class);\n+\n+    private static final long serialVersionUID = -3035998190456928143L;\n+\n+    @SpringBean\n+    private SchemaRestClient schemaRestClient;\n+\n+    final IModel<List<String>> schemas =\n+            new LoadableDetachableModel<List<String>>() {\n+\n+                private static final long serialVersionUID =\n+                        -2012833443695917883L;\n+\n+                @Override\n+                protected List<String> load() {\n+                    final List<SchemaTO> schemaTOs;\n+                    schemaTOs = schemaRestClient.getSchemas(\"user\");\n+\n+                    final List<String> schemas = new ArrayList<String>();\n+\n+                    for (SchemaTO schemaTO : schemaTOs) {\n+                        schemas.add(schemaTO.getName());\n+                    }\n+\n+                    return schemas;\n+                }\n+            };\n+\n+    @SpringBean\n+    private PolicyRestClient policyRestClient;\n+\n+    @SpringBean\n+    protected XMLRolesReader xmlRolesReader;\n+\n+    public PasswordPolicyPanel(String id) {\n+        super(id);\n+\n+        final PasswordPolicyTO policyTO = policyRestClient.getPasswordPolicy();\n+\n+        final PasswordPolicy policy = policyTO.getSpecification() != null\n+                ? policyTO.getSpecification() : new PasswordPolicy();\n+\n+        final Form form = new Form(\"form\", new CompoundPropertyModel(policy));\n+        form.setOutputMarkupId(true);\n+\n+        final Field[] fields = policy.getClass().getDeclaredFields();\n+        List<Field> items = new ArrayList<Field>();\n+\n+        for (Field field : fields) {\n+            if (!\"serialVersionUID\".equals(field.getName())) {\n+                items.add(field);\n+            }\n+        }\n+\n+        final ListView<Field> policies = new ListView<Field>(\"policies\", items) {\n+\n+            private static final long serialVersionUID = 9101744072914090143L;\n+\n+            @Override\n+            protected void populateItem(ListItem<Field> item) {\n+\n+                final Field field = item.getModelObject();\n+\n+                item.add(new Label(\n+                        \"label\", new Model(getString(field.getName()))));\n+\n+                final AbstractFieldPanel component;\n+                Method method;\n+\n+                if (field.getType().equals(boolean.class)\n+                        || field.getType().equals(Boolean.class)) {\n+\n+                    item.add(new AjaxCheckBoxPanel(\n+                            \"check\",\n+                            field.getName(),\n+                            new PropertyModel(policy, field.getName()),\n+                            false));\n+\n+                    item.add(new Label(\"field\", new Model(null)));\n+\n+                } else if (field.getType().equals(List.class)\n+                        || field.getType().equals(Set.class)) {\n+                    try {\n+\n+                        method = policy.getClass().getMethod(\n+                                \"get\" + StringUtils.capitalize(field.getName()),\n+                                new Class[]{});\n+\n+                        if (\"schemasNotPermitted\".equals(field.getName())) {\n+                            component = new AjaxPalettePanel(\n+                                    \"field\",\n+                                    new PropertyModel(policy, field.getName()),\n+                                    new ListModel<String>(schemas.getObject()));\n+\n+                            item.add(component);\n+\n+                            item.add(getActivationControl(\n+                                    component,\n+                                    !((List) method.invoke(\n+                                    policy, new Object[]{})).isEmpty(),\n+                                    new ArrayList<String>(),\n+                                    new ArrayList<String>()));\n+                        } else {\n+                            final FieldPanel panel = new AjaxTextFieldPanel(\n+                                    \"panel\",\n+                                    field.getName(),\n+                                    new Model(null),\n+                                    true);\n+\n+                            panel.setRequired(true);\n+\n+                            component = new MultiValueSelectorPanel<String>(\n+                                    \"field\",\n+                                    new PropertyModel(policy, field.getName()),\n+                                    String.class,\n+                                    panel);\n+\n+                            item.add(component);\n+\n+                            final List<String> reinitializedValue =\n+                                    new ArrayList<String>();\n+\n+                            reinitializedValue.add(\"\");\n+\n+                            item.add(new AjaxCheckBoxPanel(\n+                                    \"check\",\n+                                    field.getName(),\n+                                    new Model(),\n+                                    false));\n+\n+                            item.add(getActivationControl(\n+                                    component,\n+                                    !((List<String>) method.invoke(\n+                                    policy, new Object[]{})).isEmpty(),\n+                                    (Serializable) new ArrayList<String>(),\n+                                    (Serializable) reinitializedValue));\n+                        }\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error retrieving password policy fields\", e);\n+                    }\n+                } else if (field.getType().equals(int.class)\n+                        || field.getType().equals(Integer.class)) {\n+                    try {\n+\n+                        method = policy.getClass().getMethod(\n+                                \"get\" + StringUtils.capitalize(field.getName()),\n+                                new Class[]{});\n+\n+                        component = new AjaxTextFieldPanel(\n+                                \"field\",\n+                                field.getName(),\n+                                new PropertyModel(policy, field.getName()),\n+                                false);\n+\n+                        item.add(getActivationControl(\n+                                component,\n+                                (Integer) method.invoke(\n+                                policy, new Object[]{}) > 0,\n+                                0,\n+                                0));\n+\n+                        item.add(component);\n+                    } catch (Exception e) {\n+                        LOG.error(\"Error retrieving password policy fields\", e);\n+                    }\n+                } else {\n+                    item.add(new AjaxCheckBoxPanel(\n+                            \"check\", field.getName(), new Model(), false));\n+                    item.add(new Label(\"field\", new Model(null)));\n+                }\n+            }\n+        };\n+\n+        form.add(policies);\n+\n+        final IndicatingAjaxButton submit = new IndicatingAjaxButton(\n+                \"apply\", new Model(getString(\"apply\"))) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(\n+                    final AjaxRequestTarget target,\n+                    final Form form) {\n+\n+                policyTO.setSpecification(policy);\n+\n+                if (policyTO.getId() > 0) {\n+                    final PasswordPolicyMod policyMod = new PasswordPolicyMod();\n+                    policyMod.setId(policyTO.getId());\n+                    policyMod.setType(policyTO.getType());\n+                    policyMod.setSpecification(policyTO.getSpecification());\n+\n+                    policyRestClient.updatePasswordPolicy(policyMod);\n+                } else {\n+                    policyRestClient.createPasswordPolicy(policyTO);\n+                }\n+\n+                info(getString(\"operation_succeded\"));\n+                target.addComponent(getPage().get(\"feedback\"));\n+            }\n+\n+            @Override\n+            protected void onError(AjaxRequestTarget target, Form form) {\n+                target.addComponent(getPage().get(\"feedback\"));\n+            }\n+        };\n+\n+        form.add(submit);\n+        add(form);\n+\n+        LOG.error(\"AAA {}\", policies.getPath());\n+    }\n+\n+    private <T extends Serializable> AjaxCheckBoxPanel getActivationControl(\n+            final AbstractFieldPanel panel,\n+            final Boolean checked,\n+            final T defaultModelObject,\n+            final T reinitializedValue) {\n+\n+        final AjaxCheckBoxPanel check = new AjaxCheckBoxPanel(\n+                \"check\",\n+                \"check\",\n+                new Model(checked),\n+                false);\n+\n+        panel.setEnabled(checked);\n+\n+        check.getField().add(new AjaxFormComponentUpdatingBehavior(\"onChange\") {\n+\n+            private static final long serialVersionUID = -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(AjaxRequestTarget target) {\n+                if (check.getModelObject()) {\n+                    panel.setEnabled(true);\n+                    panel.setModelObject(reinitializedValue);\n+                } else {\n+                    panel.setModelObject(defaultModelObject);\n+                    panel.setEnabled(false);\n+                }\n+\n+                target.addComponent(panel);\n+            }\n+        });\n+\n+        return check;\n+    }\n+}"},{"sha":"aa8839a7c8af2d98896139f10cb0ab486a08fa5a","filename":"console/src/main/java/org/syncope/console/pages/panels/VirtualAttributesPanel.java","status":"modified","additions":36,"deletions":7,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FVirtualAttributesPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -52,6 +52,8 @@ public class VirtualAttributesPanel extends Panel {\n     protected static final Logger LOG =\n             LoggerFactory.getLogger(VirtualAttributesPanel.class);\n \n+    private static final long serialVersionUID = -7982691107029848579L;\n+\n     @SpringBean\n     private SchemaRestClient schemaRestClient;\n \n@@ -65,6 +67,8 @@ public <T extends AbstractAttributableTO> VirtualAttributesPanel(\n         final IModel<List<String>> virtualSchemaNames =\n                 new LoadableDetachableModel<List<String>>() {\n \n+                    private static final long serialVersionUID = 5275935387613157437L;\n+\n                     @Override\n                     protected List<String> load() {\n                         if (entityTO instanceof RoleTO) {\n@@ -89,6 +93,8 @@ protected List<String> load() {\n         AjaxButton addAttributeBtn = new IndicatingAjaxButton(\n                 \"addAttributeBtn\", new Model(getString(\"addAttributeBtn\"))) {\n \n+            private static final long serialVersionUID = -4804368561204623354L;\n+\n             @Override\n             protected void onSubmit(final AjaxRequestTarget target,\n                     final Form form) {\n@@ -105,13 +111,18 @@ protected void onSubmit(final AjaxRequestTarget target,\n                 new PropertyModel<List<? extends AttributeTO>>(\n                 entityTO, \"virtualAttributes\")) {\n \n+            private static final long serialVersionUID = 9101744072914090143L;\n+\n             @Override\n             protected void populateItem(final ListItem<AttributeTO> item) {\n                 final AttributeTO attributeTO = item.getModelObject();\n \n                 item.add(new AjaxDecoratedCheckbox(\n                         \"toRemove\", new Model(Boolean.FALSE)) {\n \n+                    private static final long serialVersionUID =\n+                            7170946748485726506L;\n+\n                     @Override\n                     protected void onUpdate(final AjaxRequestTarget target) {\n                         entityTO.removeVirtualAttribute(attributeTO);\n@@ -123,6 +134,9 @@ protected IAjaxCallDecorator getAjaxCallDecorator() {\n                         return new AjaxPreprocessingCallDecorator(\n                                 super.getAjaxCallDecorator()) {\n \n+                            private static final long serialVersionUID =\n+                                    -7927968187160354605L;\n+\n                             @Override\n                             public CharSequence preDecorateScript(\n                                     final CharSequence script) {\n@@ -142,13 +156,18 @@ public CharSequence preDecorateScript(\n                         new PropertyModel<String>(attributeTO, \"schema\"),\n                         virtualSchemaNames);\n \n-                schemaChoice.add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n+                schemaChoice.add(\n+                        new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n \n-                    @Override\n-                    protected void onUpdate(AjaxRequestTarget art) {\n-                        attributeTO.setSchema(schemaChoice.getModelObject());\n-                    }\n-                });\n+                            private static final long serialVersionUID =\n+                                    -1107858522700306810L;\n+\n+                            @Override\n+                            protected void onUpdate(AjaxRequestTarget art) {\n+                                attributeTO.setSchema(\n+                                        schemaChoice.getModelObject());\n+                            }\n+                        });\n \n                 schemaChoice.setOutputMarkupId(true);\n                 schemaChoice.setRequired(true);\n@@ -162,6 +181,9 @@ protected void onUpdate(AjaxRequestTarget art) {\n                         \"values\", new PropertyModel<List<String>>(\n                         attributeTO, \"values\")) {\n \n+                    private static final long serialVersionUID =\n+                            9101744072914090143L;\n+\n                     @Override\n                     protected void populateItem(final ListItem<String> item) {\n \n@@ -170,7 +192,11 @@ protected void populateItem(final ListItem<String> item) {\n                                 item.getModel(),\n                                 String.class);\n \n-                        field.add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n+                        field.add(new AjaxFormComponentUpdatingBehavior(\n+                                \"onblur\") {\n+\n+                            private static final long serialVersionUID =\n+                                    -1107858522700306810L;\n \n                             @Override\n                             protected void onUpdate(AjaxRequestTarget art) {\n@@ -202,6 +228,9 @@ protected void onSubmit(\n                         AjaxButton addButton = new IndicatingAjaxButton(\"add\",\n                                 new Model(getString(\"add\"))) {\n \n+                            private static final long serialVersionUID =\n+                                    -4804368561204623354L;\n+\n                             @Override\n                             protected void onSubmit(\n                                     AjaxRequestTarget target, Form form) {"},{"sha":"1984c6325ff4d2046c701eb897639d4f77d62108","filename":"console/src/main/java/org/syncope/console/rest/PolicyRestClient.java","status":"added","additions":49,"deletions":0,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,49 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.rest;\n+\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.mod.PasswordPolicyMod;\n+import org.syncope.client.to.PasswordPolicyTO;\n+\n+/**\n+ * Console client for invoking Rest Policy services.\n+ */\n+@Component\n+public class PolicyRestClient extends AbstractBaseRestClient {\n+\n+    public PasswordPolicyTO getPasswordPolicy() {\n+        try {\n+            return restTemplate.getForObject(\n+                    baseURL + \"policy/password/read\", PasswordPolicyTO.class);\n+        } catch (Exception e) {\n+            LOG.debug(\"No password policy found\", e);\n+            return new PasswordPolicyTO();\n+        }\n+    }\n+\n+    public PasswordPolicyTO createPasswordPolicy(\n+            final PasswordPolicyTO policy) {\n+        return restTemplate.postForObject(baseURL + \"policy/password/create\",\n+                policy, PasswordPolicyTO.class);\n+    }\n+\n+    public PasswordPolicyTO updatePasswordPolicy(\n+            final PasswordPolicyMod policy) {\n+\n+        return restTemplate.postForObject(baseURL + \"policy/password/update\",\n+                policy, PasswordPolicyTO.class);\n+    }\n+}"},{"sha":"29f9e3f6f9e15269b9a0a1127df74d3a14c043f5","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AbstractFieldPanel.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAbstractFieldPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,41 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+import org.apache.wicket.markup.html.panel.Panel;\n+import org.apache.wicket.model.IModel;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+\n+public abstract class AbstractFieldPanel<T extends Serializable> extends Panel {\n+\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(\n+            AbstractFieldPanel.class);\n+\n+    private static final long serialVersionUID = 5958017546318855690L;\n+\n+    public AbstractFieldPanel(\n+            final String id,\n+            final IModel<T> model) {\n+\n+        super(id, model);\n+    }\n+\n+    public abstract AbstractFieldPanel setModelObject(T object);\n+}"},{"sha":"e573551ebf8eb0c49e8388fe4153fdf2fc691fd8","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxCheckBoxPanel.java","status":"modified","additions":25,"deletions":28,"changes":53,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -17,50 +17,47 @@\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n import org.apache.wicket.markup.html.form.CheckBox;\n-import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n \n-public class AjaxCheckBoxPanel extends Panel {\n+public class AjaxCheckBoxPanel extends FieldPanel<Boolean> {\n+\n+    private static final long serialVersionUID = 5664138233103884310L;\n \n     public AjaxCheckBoxPanel(\n             final String id,\n             final String name,\n             final IModel<Boolean> model,\n-            final boolean required) {\n+            final boolean active) {\n \n-        super(id, model);\n+        super(id, name, model, active);\n \n-        final CheckBox field = new CheckBox(\"checkboxField\", model);\n-        add(field.setLabel(new Model(name)));\n+        field = new CheckBox(\"checkboxField\", model);\n+        add(field.setLabel(new Model(name)).setOutputMarkupId(true));\n \n-        field.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+        if (active) {\n+            field.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-            @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n-                // nothing to do\n-            }\n-        });\n-    }\n+                private static final long serialVersionUID =\n+                        -1107858522700306810L;\n \n-    public AjaxCheckBoxPanel(\n-            final String id,\n-            final String name,\n-            final IModel<Boolean> model,\n-            final boolean required,\n-            final boolean readonly) {\n+                @Override\n+                protected void onUpdate(AjaxRequestTarget art) {\n+                    // nothing to do\n+                }\n+            });\n+        }\n+    }\n \n-        super(id, model);\n+    @Override\n+    public FieldPanel addRequiredLabel() {\n \n-        final CheckBox field = new CheckBox(\"checkboxField\", model);\n-        add(field.setLabel(new Model(name)).setEnabled(!readonly));\n+        if (!isRequired()) {\n+            setRequired(true);\n+        }\n \n-        field.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+        this.isRequiredLabelAdded = true;\n \n-            @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n-                // nothing to do\n-            }\n-        });\n+        return this;\n     }\n }"},{"sha":"99f9398037c3d4e6ca859f547551c16b0ae6e796","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxDropDownChoicePanel.java","status":"modified","additions":39,"deletions":41,"changes":80,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -14,68 +14,66 @@\n  */\n package org.syncope.console.wicket.markup.html.form;\n \n+import java.util.Collections;\n import java.util.List;\n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.ChoiceRenderer;\n import org.apache.wicket.markup.html.form.DropDownChoice;\n import org.apache.wicket.markup.html.form.IChoiceRenderer;\n-import org.apache.wicket.markup.html.form.TextField;\n-import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n \n-public class AjaxDropDownChoicePanel extends Panel {\n+public class AjaxDropDownChoicePanel extends FieldPanel<String> {\n \n-    public AjaxDropDownChoicePanel(final String id, final String name,\n-            final IModel model, final List choices,\n-            final IChoiceRenderer renderer, final boolean required) {\n+    private static final long serialVersionUID = -4716376580659196095L;\n \n-        super(id, model);\n+    public AjaxDropDownChoicePanel(\n+            final String id,\n+            final String name,\n+            final IModel<String> model,\n+            final boolean active) {\n \n-        if (required) {\n-            add(new Label(\"required\", \"*\"));\n-        } else {\n-            add(new Label(\"required\", \"\"));\n-        }\n+        super(id, name, model, active);\n \n-        final DropDownChoice field = new DropDownChoice(\n-                \"dropDownChoiceField\", model, choices, renderer);\n+        field = new DropDownChoice(\"dropDownChoiceField\", model,\n+                Collections.EMPTY_LIST, new ChoiceRenderer());\n \n-        add(field.setRequired(required).setLabel(new Model(name)));\n+        add(field.setLabel(new Model(name)).setOutputMarkupId(true));\n \n-        field.add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n+        if (active) {\n+            field.add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n \n-            @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n-                // nothing to do\n-            }\n-        });\n-    }\n+                private static final long serialVersionUID =\n+                        -1107858522700306810L;\n \n-    public AjaxDropDownChoicePanel(final String id, final String name,\n-            final IModel model,\n-            final boolean required, final boolean readonly) {\n+                @Override\n+                protected void onUpdate(AjaxRequestTarget art) {\n+                    // nothing to do\n+                }\n+            });\n+        }\n+    }\n \n-        super(id, model);\n+    public FieldPanel setChoiceRenderer(final IChoiceRenderer renderer) {\n+        ((DropDownChoice) field).setChoiceRenderer(renderer);\n+        return this;\n+    }\n \n-        if (required) {\n-            add(new Label(\"required\", \"*\"));\n-        } else {\n-            add(new Label(\"required\", \"\"));\n-        }\n+    public FieldPanel setChoices(final List<String> choices) {\n+        ((DropDownChoice) field).setChoices(choices);\n+        return this;\n+    }\n \n-        final TextField field = new TextField(\"dropDownChoiceField\", model);\n+    @Override\n+    public FieldPanel clone() {\n \n-        add(field.setRequired(\n-                required).setLabel(new Model(name)).setEnabled(!readonly));\n+        AjaxDropDownChoicePanel panel =\n+                (AjaxDropDownChoicePanel) super.clone();\n \n-        field.add(new AjaxFormComponentUpdatingBehavior(\"change\") {\n+        setChoices(((DropDownChoice) field).getChoices());\n+        setChoiceRenderer(((DropDownChoice) field).getChoiceRenderer());\n \n-            @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n-                // nothing to do\n-            }\n-        });\n+        return panel;\n     }\n }"},{"sha":"d6eecb9c8b2bbdc48fab2d919e3edd044ace855d","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxPalettePanel.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,54 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.wicket.extensions.markup.html.form.palette.Palette;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.util.ListModel;\n+import org.syncope.console.commons.SelectChoiceRenderer;\n+\n+public class AjaxPalettePanel extends AbstractFieldPanel {\n+\n+    private static final long serialVersionUID = 7738499668258805567L;\n+\n+    final Palette<String> palette;\n+\n+    public AjaxPalettePanel(\n+            final String id,\n+            final IModel<List<String>> model,\n+            final ListModel<String> choices) {\n+\n+        super(id, model);\n+\n+        palette = new Palette(\n+                \"paletteField\",\n+                model,\n+                choices,\n+                new SelectChoiceRenderer(),\n+                8,\n+                false);\n+\n+        add(palette.setOutputMarkupId(true));\n+        setOutputMarkupId(true);\n+    }\n+\n+    @Override\n+    public AbstractFieldPanel setModelObject(Serializable object) {\n+        palette.setDefaultModelObject(object);\n+        return this;\n+    }\n+}"},{"sha":"3883c2921a0cf0940ba56317dd6b8f87b7d8100d","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/AjaxTextFieldPanel.java","status":"modified","additions":17,"deletions":73,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -16,92 +16,36 @@\n \n import org.apache.wicket.ajax.AjaxRequestTarget;\n import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.behavior.SimpleAttributeModifier;\n-import org.apache.wicket.markup.html.basic.Label;\n import org.apache.wicket.markup.html.form.TextField;\n-import org.apache.wicket.markup.html.panel.Panel;\n import org.apache.wicket.model.IModel;\n import org.apache.wicket.model.Model;\n \n-public class AjaxTextFieldPanel extends Panel {\n+public class AjaxTextFieldPanel extends FieldPanel<String> {\n \n-    public AjaxTextFieldPanel(final String id, final String name,\n-            final IModel model, final boolean required, final String title) {\n-\n-        super(id, model);\n-\n-        if (required) {\n-            add(new Label(\"required\", \"*\"));\n-        } else {\n-            add(new Label(\"required\", \"\"));\n-        }\n-\n-        final TextField field = new TextField(\"textField\", model);\n-\n-        add(new TextField(\"textField\", model).setRequired(required).\n-                setLabel(new Model(name)).add(\n-                new SimpleAttributeModifier(\n-                \"title\", title != null ? title : \"\")));\n-\n-        field.add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n-\n-            @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n-                // nothing to do\n-            }\n-        });\n-    }\n-\n-    public AjaxTextFieldPanel(final String id, final String name,\n-            final IModel model, final boolean required) {\n-\n-        super(id, model);\n-\n-        if (required) {\n-            add(new Label(\"required\", \"*\"));\n-        } else {\n-            add(new Label(\"required\", \"\"));\n-        }\n-\n-        final TextField field = new TextField(\"textField\", model);\n-\n-        add(field.setRequired(required).setLabel(new Model(name)));\n-\n-        field.add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n-\n-            @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n-                // nothing to do\n-            }\n-        });\n-    }\n+    private static final long serialVersionUID = 238940918106696068L;\n \n     public AjaxTextFieldPanel(\n             final String id,\n             final String name,\n-            final IModel model,\n-            final boolean required,\n-            final boolean readonly) {\n+            final IModel<String> model,\n+            final boolean active) {\n \n-        super(id, model);\n+        super(id, name, model, active);\n \n-        if (required) {\n-            add(new Label(\"required\", \"*\"));\n-        } else {\n-            add(new Label(\"required\", \"\"));\n-        }\n+        field = new TextField(\"textField\", model);\n+        add(field.setLabel(new Model(name)).setOutputMarkupId(true));\n \n-        final TextField field = new TextField(\"textField\", model);\n+        if (active) {\n+            field.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n \n-        add(field.setRequired(required).\n-                setLabel(new Model(name)).setEnabled(!readonly));\n+                private static final long serialVersionUID =\n+                        -1107858522700306810L;\n \n-        field.add(new AjaxFormComponentUpdatingBehavior(\"onblur\") {\n-\n-            @Override\n-            protected void onUpdate(AjaxRequestTarget art) {\n-                // nothing to do\n-            }\n-        });\n+                @Override\n+                protected void onUpdate(AjaxRequestTarget art) {\n+                    // nothing to do\n+                }\n+            });\n+        }\n     }\n }"},{"sha":"6d25621c6ec26f234f7e4d0ec02e60dd90f30534","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/DateFieldPanel.java","status":"removed","additions":0,"deletions":240,"changes":240,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7808d37bb9cf9f70c334f85f1b7145f34d9816e6/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7808d37bb9cf9f70c334f85f1b7145f34d9816e6/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.java?ref=7808d37bb9cf9f70c334f85f1b7145f34d9816e6","patch":"@@ -1,240 +0,0 @@\n-/*\n- *  Licensed under the Apache License, Version 2.0 (the \"License\");\n- *  you may not use this file except in compliance with the License.\n- *  You may obtain a copy of the License at\n- *\n- *       http://www.apache.org/licenses/LICENSE-2.0\n- *\n- *  Unless required by applicable law or agreed to in writing, software\n- *  distributed under the License is distributed on an \"AS IS\" BASIS,\n- *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- *  See the License for the specific language governing permissions and\n- *  limitations under the License.\n- *  under the License.\n- */\n-package org.syncope.console.wicket.markup.html.form;\n-\n-import java.util.Calendar;\n-import java.util.Date;\n-import java.util.StringTokenizer;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n-import org.apache.wicket.markup.html.basic.Label;\n-import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.markup.html.form.FormComponent;\n-import org.apache.wicket.markup.html.panel.Panel;\n-import org.apache.wicket.model.IModel;\n-import org.apache.wicket.extensions.yui.calendar.DateTimeField;\n-import org.apache.wicket.markup.html.form.validation.AbstractFormValidator;\n-import org.apache.wicket.model.Model;\n-import org.apache.wicket.markup.html.panel.Fragment;\n-import org.apache.wicket.validation.IValidationError;\n-import org.apache.wicket.validation.ValidationError;\n-import org.apache.wicket.datetime.markup.html.form.DateTextField;\n-import org.apache.wicket.extensions.yui.calendar.DatePicker;\n-\n-public class DateFieldPanel extends Panel {\n-\n-    public DateFieldPanel(\n-            final String id,\n-            final String name,\n-            final IModel<Date> model,\n-            final String datePattern,\n-            final boolean required,\n-            final boolean readonly,\n-            final Form form) {\n-\n-        super(id, model);\n-\n-        if (required) {\n-            add(new Label(\"required\", \"*\"));\n-        } else {\n-            add(new Label(\"required\", \"\"));\n-        }\n-\n-        Fragment datePanel = null;\n-\n-        if (!datePattern.contains(\"H\")) {\n-            datePanel = new Fragment(\"datePanel\", \"dateField\", this);\n-\n-            final DateTextField field = DateTextField.forDatePattern(\n-                    \"field\", model, datePattern);\n-\n-            field.add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n-\n-                @Override\n-                protected void onUpdate(AjaxRequestTarget art) {\n-                    // nothing to do\n-                }\n-            });\n-\n-            field.add(getDatePicker());\n-\n-            field.setEnabled(!readonly);\n-            field.setLabel(new Model(name));\n-\n-            datePanel.add(field);\n-        } else {\n-            datePanel = new Fragment(\"datePanel\", \"dateTimeField\", this);\n-\n-            final DateTimeField field = new DateTimeField(\"field\", model);\n-\n-            final Calendar cal = Calendar.getInstance();\n-\n-            field.get(\"hours\").\n-                    add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n-\n-                @Override\n-                protected void onUpdate(AjaxRequestTarget art) {\n-                    // nothing to do\n-                    //cal.setTime(field.getModelObject());\n-                    if (field.getHours() > 12) {\n-                        cal.set(Calendar.HOUR_OF_DAY, field.getHours());\n-                    } else {\n-                        cal.set(Calendar.HOUR, field.getHours());\n-                    }\n-                    field.setModelObject(cal.getTime());\n-                }\n-            });\n-\n-            field.get(\"minutes\").\n-                    add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n-\n-                @Override\n-                protected void onUpdate(AjaxRequestTarget art) {\n-                    // nothing to do\n-                    //cal.setTime(field.getModelObject());\n-                    cal.set(Calendar.MINUTE, field.getMinutes());\n-                    field.setModelObject(cal.getTime());\n-                }\n-            });\n-\n-            field.get(\"date\").\n-                    add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n-\n-                @Override\n-                protected void onUpdate(AjaxRequestTarget art) {\n-                    // nothing to do\n-                    cal.setTime(field.getDate());\n-\n-                    if (\"PM\".equals(\"\" + field.getAmOrPm())) {\n-                        cal.set(Calendar.AM_PM, Calendar.PM);\n-                    } else {\n-                        cal.set(Calendar.AM_PM, Calendar.AM);\n-                    }\n-\n-                    field.setModelObject(cal.getTime());\n-                }\n-            });\n-\n-            field.get(\"amOrPmChoice\").\n-                    add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n-\n-                @Override\n-                protected void onUpdate(AjaxRequestTarget art) {\n-                    // nothing to do\n-                    //cal.setTime(field.getModelObject());\n-\n-                    if (\"PM\".equals(\"\" + field.getAmOrPm())) {\n-                        cal.set(Calendar.AM_PM, Calendar.PM);\n-                    } else {\n-                        cal.set(Calendar.AM_PM, Calendar.AM);\n-                    }\n-\n-                    field.setModelObject(cal.getTime());\n-                }\n-            });\n-\n-            field.setEnabled(!readonly);\n-            field.setLabel(new Model(name));\n-\n-            datePanel.add(field);\n-\n-            if (required) {\n-                form.add(new DateTimeFormValidator(field));\n-            }\n-        }\n-\n-        add(datePanel);\n-    }\n-\n-    /**\n-     * Setup a DatePicker component.\n-     */\n-    private DatePicker getDatePicker() {\n-        final DatePicker picker = new DatePicker() {\n-\n-            @Override\n-            protected boolean enableMonthYearSelection() {\n-                return true;\n-            }\n-        };\n-\n-        picker.setShowOnFieldClick(true);\n-\n-        return picker;\n-    }\n-\n-    /**\n-     * Custom form validator for registering and handling DateTimeField\n-     * components that are in it.\n-     */\n-    private class DateTimeFormValidator extends AbstractFormValidator {\n-\n-        private FormComponent[] dateTimeComponents;\n-\n-        public DateTimeFormValidator(DateTimeField dateTimeComponent) {\n-            if (dateTimeComponent == null) {\n-                throw new IllegalArgumentException(\n-                        \"argument dateTimeComponent cannot be null\");\n-            }\n-\n-            dateTimeComponents = new FormComponent[]{dateTimeComponent};\n-        }\n-\n-        @Override\n-        public FormComponent[] getDependentFormComponents() {\n-            return dateTimeComponents;\n-        }\n-\n-        /**\n-         * Validation rule : all 3 fields (date,hours,minutes) must be not-null.\n-         * @param form\n-         */\n-        @Override\n-        public void validate(Form form) {\n-            DateTimeField dateTimeField = (DateTimeField) dateTimeComponents[0];\n-\n-            // TODO: must be done better than this\n-            StringTokenizer inputDateTokenizer = new StringTokenizer(\n-                    dateTimeField.getInput(), \",\");\n-\n-            int tokens = inputDateTokenizer.countTokens();\n-\n-            boolean isValid = true;\n-\n-            if (tokens < 2) {\n-                isValid = false;\n-            } else {\n-                //First token = date\n-                inputDateTokenizer.nextToken();\n-\n-                //Second token = time\n-                StringTokenizer timeTokenizer = new StringTokenizer(\n-                        inputDateTokenizer.nextToken(), \":\");\n-\n-                if (timeTokenizer.countTokens() < 2) {\n-                    isValid = false;\n-                }\n-\n-            }\n-\n-            if (!isValid) {\n-                ValidationError ve = new ValidationError();\n-                ve.setVariables(DateTimeFormValidator.this.variablesMap());\n-                ve.addMessageKey(resourceKey());\n-                dateTimeComponents[0].error((IValidationError) ve);\n-            }\n-        }\n-    }\n-}"},{"sha":"ff74f2d4963b9f2999ef4b8029e513d28fa96a11","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/DateTextFieldPanel.java","status":"added","additions":201,"deletions":0,"changes":201,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,201 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Date;\n+import java.util.List;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.datetime.markup.html.form.DateTextField;\n+import org.apache.wicket.extensions.yui.calendar.DatePicker;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.model.Model;\n+import org.springframework.util.StringUtils;\n+\n+public class DateTextFieldPanel extends FieldPanel<Date> {\n+\n+    private static final long serialVersionUID = 1919852712185883648L;\n+\n+    final String datePattern;\n+\n+    public DateTextFieldPanel(\n+            final String id,\n+            final String name,\n+            final IModel<Date> model,\n+            final boolean active,\n+            final String datePattern) {\n+\n+        super(id, name, model, active);\n+\n+        this.datePattern = datePattern;\n+\n+        field = DateTextField.forDatePattern(\"field\", model, datePattern);\n+\n+        if (active) {\n+            field.add(\n+                    new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+                        private static final long serialVersionUID =\n+                                -1107858522700306810L;\n+\n+                        @Override\n+                        protected void onUpdate(AjaxRequestTarget art) {\n+                            // nothing to do\n+                        }\n+                    });\n+        }\n+\n+        field.add(getDatePicker());\n+\n+        add(field.setLabel(new Model(name)).setOutputMarkupId(true));\n+    }\n+\n+    /**\n+     * Setup a DatePicker component.\n+     */\n+    private DatePicker getDatePicker() {\n+        final DatePicker picker = new DatePicker() {\n+\n+            private static final long serialVersionUID = 4166072895162221956L;\n+\n+            @Override\n+            protected boolean enableMonthYearSelection() {\n+                return true;\n+            }\n+        };\n+\n+        picker.setShowOnFieldClick(true);\n+\n+        return picker;\n+    }\n+\n+    @Override\n+    public FieldPanel setNewModel(final ListItem item, final Class reference) {\n+        final DateFormat formatter = new SimpleDateFormat(datePattern);\n+\n+        IModel<Date> model = new Model() {\n+\n+            private static final long serialVersionUID =\n+                    6799404673615637845L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                Date date = null;\n+\n+                if (StringUtils.hasText((String) item.getModelObject())) {\n+                    if (reference.equals(String.class)) {\n+                        // Parse string using datePattern\n+                        try {\n+                            date = formatter.parse(\n+                                    (String) item.getModelObject());\n+                        } catch (ParseException e) {\n+                            LOG.error(\"While parsing date\", e);\n+                        }\n+                    } else if (reference.equals(Date.class)) {\n+                        // Don't parse anything\n+                        date = (Date) item.getModelObject();\n+                    } else {\n+                        // consider Long\n+                        date = new Date((Long) item.getModelObject());\n+                    }\n+                }\n+\n+                return date;\n+            }\n+\n+            @Override\n+            public void setObject(Serializable object) {\n+                if (object != null) {\n+                    if (reference.equals(String.class)) {\n+                        // Parse string using datePattern\n+                        item.setModelObject(\n+                                (String) formatter.format((Date) object));\n+                    } else if (reference.equals(Date.class)) {\n+                        // Don't parse anything\n+                        item.setModelObject(\n+                                (Date) object);\n+                    } else {\n+                        // consider Long\n+                        item.setModelObject(\n+                                new Long(((Date) object).getTime()));\n+                    }\n+                } else {\n+                    item.setModelObject(null);\n+                }\n+            }\n+        };\n+\n+        field.setModel(model);\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel setNewModel(final List<String> list) {\n+        setNewModel(new Model() {\n+\n+            private static final long serialVersionUID = 527651414610325237L;\n+\n+            final DateFormat formatter = new SimpleDateFormat(datePattern);\n+\n+            @Override\n+            public Serializable getObject() {\n+                Date date = null;\n+\n+                if (list != null && !list.isEmpty()\n+                        && StringUtils.hasText(list.get(0))) {\n+                    try {\n+                        // Parse string using datePattern\n+                        date = formatter.parse(list.get(0));\n+                    } catch (ParseException e) {\n+                        LOG.error(\"invalid parse exception\", e);\n+                    }\n+                }\n+\n+                return date;\n+            }\n+\n+            @Override\n+            public void setObject(Serializable object) {\n+                if (object != null) {\n+                    list.clear();\n+                    list.add((String) formatter.format((Date) object));\n+                }\n+            }\n+        });\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel clone() {\n+        final FieldPanel panel = new DateTextFieldPanel(\n+                id, name, new Model(null), active, datePattern);\n+\n+        panel.setRequired(isRequired());\n+        panel.setReadOnly(isReadOnly());\n+        panel.setTitle(title);\n+\n+        if (isRequiredLabelAdded) {\n+            panel.addRequiredLabel();\n+        }\n+\n+        return panel;\n+    }\n+}"},{"sha":"ab39050c2d4d1e23c2c23f085a87b9dc3726e659","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/DateTimeFieldPanel.java","status":"added","additions":324,"deletions":0,"changes":324,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,324 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+import java.text.DateFormat;\n+import java.text.ParseException;\n+import java.text.SimpleDateFormat;\n+import java.util.Calendar;\n+import java.util.Date;\n+import java.util.List;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.form.AjaxFormComponentUpdatingBehavior;\n+import org.apache.wicket.behavior.SimpleAttributeModifier;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.markup.html.form.FormComponent;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.extensions.yui.calendar.DateTimeField;\n+import org.apache.wicket.markup.html.form.validation.AbstractFormValidator;\n+import org.apache.wicket.validation.IValidationError;\n+import org.apache.wicket.validation.ValidationError;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.model.Model;\n+import org.springframework.util.StringUtils;\n+\n+public class DateTimeFieldPanel extends FieldPanel<Date> {\n+\n+    private static final long serialVersionUID = -428975732068281726L;\n+\n+    private Form form = null;\n+\n+    final String datePattern;\n+\n+    public DateTimeFieldPanel(\n+            final String id,\n+            final String name,\n+            final IModel<Date> model,\n+            final boolean active,\n+            final String datePattern) {\n+\n+        super(id, name, model, active);\n+\n+        this.datePattern = datePattern;\n+\n+        field = new DateTimeField(\"field\", model);\n+\n+        final Calendar cal = Calendar.getInstance();\n+\n+        field.get(\"hours\").\n+                add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+            private static final long serialVersionUID =\n+                    -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(AjaxRequestTarget art) {\n+                if (((DateTimeField) field).getHours() > 12) {\n+                    cal.set(Calendar.HOUR_OF_DAY,\n+                            ((DateTimeField) field).getHours());\n+                } else {\n+                    cal.set(Calendar.HOUR,\n+                            ((DateTimeField) field).getHours());\n+                }\n+                field.setModelObject(cal.getTime());\n+            }\n+        });\n+\n+        field.get(\"minutes\").\n+                add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+            private static final long serialVersionUID =\n+                    -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(AjaxRequestTarget art) {\n+                cal.set(Calendar.MINUTE, ((DateTimeField) field).getMinutes());\n+                field.setModelObject(cal.getTime());\n+            }\n+        });\n+\n+        field.get(\"date\").\n+                add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+            private static final long serialVersionUID =\n+                    -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(AjaxRequestTarget art) {\n+                cal.setTime(((DateTimeField) field).getDate());\n+\n+                if (\"PM\".equals(\"\" + ((DateTimeField) field).getAmOrPm())) {\n+                    cal.set(Calendar.AM_PM, Calendar.PM);\n+                } else {\n+                    cal.set(Calendar.AM_PM, Calendar.AM);\n+                }\n+\n+                field.setModelObject(cal.getTime());\n+            }\n+        });\n+\n+        field.get(\"amOrPmChoice\").\n+                add(new AjaxFormComponentUpdatingBehavior(\"onchange\") {\n+\n+            private static final long serialVersionUID =\n+                    -1107858522700306810L;\n+\n+            @Override\n+            protected void onUpdate(AjaxRequestTarget art) {\n+                if (\"PM\".equals(\"\" + ((DateTimeField) field).getAmOrPm())) {\n+                    cal.set(Calendar.AM_PM, Calendar.PM);\n+                } else {\n+                    cal.set(Calendar.AM_PM, Calendar.AM);\n+                }\n+\n+                field.setModelObject(cal.getTime());\n+            }\n+        });\n+\n+        add(field.setLabel(new Model(name)).setOutputMarkupId(true));\n+    }\n+\n+    /**\n+     * Custom form validator for registering and handling DateTimeField\n+     * components that are in it.\n+     */\n+    private class DateTimeFormValidator extends AbstractFormValidator {\n+\n+        private static final long serialVersionUID = 6842264694946633582L;\n+\n+        private FormComponent[] dateTimeComponents;\n+\n+        public DateTimeFormValidator(DateTimeField dateTimeComponent) {\n+            if (dateTimeComponent == null) {\n+                throw new IllegalArgumentException(\n+                        \"argument dateTimeComponent cannot be null\");\n+            }\n+\n+            dateTimeComponents = new FormComponent[]{dateTimeComponent};\n+        }\n+\n+        @Override\n+        public FormComponent[] getDependentFormComponents() {\n+            return dateTimeComponents;\n+        }\n+\n+        /**\n+         * Validation rule : all 3 fields (date,hours,minutes) must be not-null.\n+         * @param form\n+         */\n+        @Override\n+        public void validate(Form form) {\n+            final DateTimeField dateTimeField =\n+                    (DateTimeField) dateTimeComponents[0];\n+\n+            if (!(dateTimeField.getDate() != null\n+                    && dateTimeField.getHours() != null\n+                    && dateTimeField.getMinutes() != null)) {\n+\n+                ValidationError ve = new ValidationError();\n+                ve.setVariables(DateTimeFormValidator.this.variablesMap());\n+                ve.addMessageKey(resourceKey());\n+                dateTimeComponents[0].error((IValidationError) ve);\n+            }\n+        }\n+    }\n+\n+    public FieldPanel setFormValidator(final Form form) {\n+\n+        if (field == null) {\n+            LOG.error(\"Error setting form validator\");\n+        } else {\n+            form.add(new DateTimeFormValidator(((DateTimeField) field)));\n+            this.form = form;\n+        }\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel setNewModel(final ListItem item, final Class reference) {\n+        final DateFormat formatter = new SimpleDateFormat(datePattern);\n+\n+        IModel<Date> model = new Model() {\n+\n+            private static final long serialVersionUID =\n+                    6799404673615637845L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                Date date = null;\n+\n+                if (StringUtils.hasText((String) item.getModelObject())) {\n+                    if (reference.equals(String.class)) {\n+                        // Parse string using datePattern\n+                        try {\n+                            date = formatter.parse(\n+                                    (String) item.getModelObject());\n+                        } catch (ParseException e) {\n+                            LOG.error(\"While parsing date\", e);\n+                        }\n+                    } else if (reference.equals(Date.class)) {\n+                        // Don't parse anything\n+                        date = (Date) item.getModelObject();\n+                    } else {\n+                        // consider Long\n+                        date = new Date((Long) item.getModelObject());\n+                    }\n+                }\n+\n+                return date;\n+            }\n+\n+            @Override\n+            public void setObject(Serializable object) {\n+                if (object != null) {\n+                    if (reference.equals(String.class)) {\n+                        // Parse string using datePattern\n+                        item.setModelObject(\n+                                (String) formatter.format((Date) object));\n+                    } else if (reference.equals(Date.class)) {\n+                        // Don't parse anything\n+                        item.setModelObject(\n+                                (Date) object);\n+                    } else {\n+                        // consider Long\n+                        item.setModelObject(\n+                                new Long(((Date) object).getTime()));\n+                    }\n+                } else {\n+                    item.setModelObject(null);\n+                }\n+            }\n+        };\n+\n+        field.setModel(model);\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel setNewModel(final List<String> list) {\n+        setNewModel(new Model() {\n+\n+            private static final long serialVersionUID = 527651414610325237L;\n+\n+            final DateFormat formatter = new SimpleDateFormat(datePattern);\n+\n+            @Override\n+            public Serializable getObject() {\n+                Date date = null;\n+\n+                if (list != null && !list.isEmpty()\n+                        && StringUtils.hasText(list.get(0))) {\n+                    try {\n+                        // Parse string using datePattern\n+                        date = formatter.parse(list.get(0));\n+                    } catch (ParseException e) {\n+                        LOG.error(\"invalid parse exception\", e);\n+                    }\n+                }\n+\n+                return date;\n+            }\n+\n+            @Override\n+            public void setObject(Serializable object) {\n+                if (object != null) {\n+                    list.clear();\n+                    list.add((String) formatter.format((Date) object));\n+                }\n+            }\n+        });\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel setStyleShet(String classes) {\n+        field.get(\"date\").add(new SimpleAttributeModifier(\n+                \"class\", (classes != null ? classes : \"\") + \" date_size\"));\n+\n+        field.get(\"hours\").add(new SimpleAttributeModifier(\n+                \"class\", classes != null ? classes : \"\"));\n+\n+        field.get(\"minutes\").add(new SimpleAttributeModifier(\n+                \"class\", classes != null ? classes : \"\"));\n+\n+        field.get(\"amOrPmChoice\").add(new SimpleAttributeModifier(\n+                \"class\", classes != null ? classes : \"\"));\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel clone() {\n+        final FieldPanel panel = new DateTimeFieldPanel(\n+                id, name, new Model(null), active, datePattern);\n+\n+        panel.setRequired(isRequired());\n+        panel.setReadOnly(isReadOnly());\n+        panel.setTitle(title);\n+\n+        if (isRequiredLabelAdded) {\n+            panel.addRequiredLabel();\n+        }\n+\n+        if (form != null && isRequired()) {\n+            ((DateTimeFieldPanel) panel).setFormValidator(form);\n+        }\n+\n+        return panel;\n+    }\n+}"},{"sha":"e756595fcb3380969393c45eb4bb8224ddceab87","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/DeleteLinkPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDeleteLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDeleteLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDeleteLinkPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -18,11 +18,13 @@\n import org.apache.wicket.model.IModel;\n \n /**\n- * This empty class must exist because there not seems to be altrernative to\n+ * This empty class must exist because there not seems to be alternative to\n  * provide specialized HTML for delete links.\n  */\n public class DeleteLinkPanel extends Panel {\n \n+    private static final long serialVersionUID = -7575742209426851942L;\n+\n     public DeleteLinkPanel(final String componentId, final IModel<?> model) {\n         super(componentId, model);\n     }"},{"sha":"f734cdabdcaae7ca3620612cbd0d9a42a99e22a5","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/EditLinkPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FEditLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FEditLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FEditLinkPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -18,11 +18,13 @@\n import org.apache.wicket.model.IModel;\n \n /**\n- * This empty class must exist because there not seems to be altrernative to\n+ * This empty class must exist because there not seems to be alternative to\n  * provide specialized HTML for edit links.\n  */\n public class EditLinkPanel extends Panel {\n \n+    private static final long serialVersionUID = 322966537010107771L;\n+\n     public EditLinkPanel(final String componentId, final IModel<?> model) {\n         super(componentId, model);\n     }"},{"sha":"5f9a8eb5a9d60d551c535e0d743a1e5cb0a87ad6","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/FieldPanel.java","status":"added","additions":213,"deletions":0,"changes":213,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,213 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.wicket.behavior.SimpleAttributeModifier;\n+import org.apache.wicket.markup.html.basic.Label;\n+import org.apache.wicket.markup.html.form.FormComponent;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.model.IModel;\n+import org.apache.wicket.model.Model;\n+\n+public abstract class FieldPanel<T extends Serializable>\n+        extends AbstractFieldPanel<T> {\n+\n+    private static final long serialVersionUID = -198988924922541273L;\n+\n+    protected FormComponent field = null;\n+\n+    final protected boolean active;\n+\n+    final protected String id;\n+\n+    final protected String name;\n+\n+    protected String title = null;\n+\n+    protected boolean isRequiredLabelAdded = false;\n+\n+    public FieldPanel(\n+            final String id,\n+            final String name,\n+            final IModel<T> model,\n+            final boolean active) {\n+\n+        super(id, model);\n+\n+        this.id = id;\n+        this.name = name;\n+        this.active = active;\n+\n+        final Fragment fragment =\n+                new Fragment(\"required\", \"notRequiredFragment\", this);\n+\n+        add(fragment);\n+\n+        setOutputMarkupId(true);\n+    }\n+\n+    public FormComponent getField() {\n+        return field;\n+    }\n+\n+    public FieldPanel setTitle(String title) {\n+        field.add(new SimpleAttributeModifier(\n+                \"title\", title != null ? title : \"\"));\n+\n+        return this;\n+    }\n+\n+    public FieldPanel setStyleShet(String classes) {\n+        field.add(new SimpleAttributeModifier(\n+                \"class\", classes != null ? classes : \"\"));\n+\n+        return this;\n+    }\n+\n+    public FieldPanel setRequired(boolean required) {\n+        field.setRequired(required);\n+\n+        return this;\n+    }\n+\n+    public FieldPanel setReadOnly(boolean readOnly) {\n+        field.setEnabled(!readOnly);\n+\n+        return this;\n+    }\n+\n+    public FieldPanel setNewModel(final IModel<T> model) {\n+        field.setModel(model);\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel setModelObject(T object) {\n+        field.setModelObject(object);\n+        return this;\n+    }\n+\n+    public T getModelObject() {\n+        return (T) field.getModelObject();\n+    }\n+\n+    public boolean isRequired() {\n+        return field.isRequired();\n+    }\n+\n+    public boolean isReadOnly() {\n+        return !field.isEnabled();\n+    }\n+\n+    /**\n+     * Userd by MultiValueSelectorPanel to attach items.\n+     * @param <E> type of list items.\n+     * @param item item to attach.\n+     * @return updated FieldPanel object.\n+     */\n+    public FieldPanel setNewModel(\n+            final ListItem<T> item, final Class reference) {\n+\n+        setNewModel(new Model() {\n+\n+            private static final long serialVersionUID = 6799404673615637845L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                return item.getModelObject();\n+            }\n+\n+            @Override\n+            public void setObject(Serializable object) {\n+                item.setModelObject((T) object);\n+            }\n+        });\n+        return this;\n+    }\n+\n+    public FieldPanel setNewModel(final List<String> list) {\n+\n+        setNewModel(new Model() {\n+\n+            private static final long serialVersionUID = 1088212074765051906L;\n+\n+            @Override\n+            public Serializable getObject() {\n+                return list != null && !list.isEmpty() ? list.get(0) : null;\n+            }\n+\n+            @Override\n+            public void setObject(Serializable object) {\n+                if (object != null) {\n+                    list.clear();\n+                    list.add(object.toString());\n+                }\n+            }\n+        });\n+\n+        return this;\n+    }\n+\n+    @Override\n+    public FieldPanel clone() {\n+\n+        final FieldPanel panel;\n+\n+        try {\n+\n+            panel = this.getClass().getConstructor(new Class[]{\n+                        String.class,\n+                        String.class,\n+                        IModel.class,\n+                        boolean.class}).newInstance(\n+                    id, name, new Model(null), active);\n+\n+        } catch (Exception e) {\n+            LOG.error(\"Error cloning field panel\", e);\n+            return null;\n+        }\n+\n+        panel.setRequired(isRequired());\n+        panel.setReadOnly(isReadOnly());\n+        panel.setTitle(title);\n+\n+        if (isRequiredLabelAdded) {\n+            panel.addRequiredLabel();\n+        }\n+\n+        return panel;\n+    }\n+\n+    public FieldPanel addRequiredLabel() {\n+\n+        if (!isRequired()) {\n+            setRequired(true);\n+        }\n+\n+        final Fragment fragment =\n+                new Fragment(\"required\", \"requiredFragment\", this);\n+\n+        fragment.add(new Label(\"requiredLabel\", \"*\"));\n+\n+        replace(fragment);\n+\n+        this.isRequiredLabelAdded = true;\n+\n+        return this;\n+    }\n+}"},{"sha":"3bfd27a17ebe174788ba44eb99bb483a7b983830","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/LinkPanel.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FLinkPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -18,11 +18,13 @@\n import org.apache.wicket.model.IModel;\n \n /**\n- * This empty class must exist because there not seems to be altrernative to\n+ * This empty class must exist because there not seems to be alternative to\n  * provide specialized HTML for links.\n  */\n public class LinkPanel extends Panel {\n \n+    private static final long serialVersionUID = 4799005986804366330L;\n+\n     public LinkPanel(final String id) {\n         super(id);\n     }"},{"sha":"1f30d87fe144d99f83fe712c68ba7ca8d711c02b","filename":"console/src/main/java/org/syncope/console/wicket/markup/html/form/MultiValueSelectorPanel.java","status":"added","additions":133,"deletions":0,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,133 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.wicket.markup.html.form;\n+\n+import java.io.Serializable;\n+import java.util.List;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.ajax.markup.html.AjaxLink;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxLink;\n+import org.apache.wicket.markup.html.WebMarkupContainer;\n+import org.apache.wicket.markup.html.list.ListItem;\n+import org.apache.wicket.markup.html.list.ListView;\n+import org.apache.wicket.markup.html.panel.Fragment;\n+import org.apache.wicket.model.IModel;\n+\n+public class MultiValueSelectorPanel<E> extends AbstractFieldPanel {\n+\n+    private static final long serialVersionUID = -6322397761456513324L;\n+\n+    final ListView<E> view;\n+\n+    final WebMarkupContainer container;\n+\n+    public MultiValueSelectorPanel(\n+            final String id,\n+            final IModel<List<E>> model,\n+            final Class reference,\n+            final FieldPanel panelTemplate) {\n+\n+        super(id, model);\n+\n+        // -----------------------\n+        // Object container definition\n+        // -----------------------\n+        container = new WebMarkupContainer(\"multiValueContainer\");\n+        container.setOutputMarkupId(true);\n+        add(container);\n+        // -----------------------\n+\n+        view = new ListView<E>(\"view\", model) {\n+\n+            private static final long serialVersionUID = -9180479401817023838L;\n+\n+            @Override\n+            protected void populateItem(final ListItem<E> item) {\n+\n+                final FieldPanel fieldPanel = panelTemplate.clone();\n+                fieldPanel.setNewModel(item, reference);\n+                item.add(fieldPanel);\n+\n+                AjaxLink minus = new IndicatingAjaxLink(\"drop\") {\n+\n+                    private static final long serialVersionUID =\n+                            -7978723352517770644L;\n+\n+                    @Override\n+                    public void onClick(final AjaxRequestTarget target) {\n+                        //Drop current component\n+                        model.getObject().remove(item.getModelObject());\n+\n+                        target.addComponent(container);\n+                    }\n+                };\n+\n+                item.add(minus);\n+\n+                if (model.getObject().size() <= 1) {\n+                    minus.setVisible(false);\n+                    minus.setEnabled(false);\n+                } else {\n+                    minus.setVisible(true);\n+                    minus.setEnabled(true);\n+                }\n+\n+                if (item.getIndex() == model.getObject().size() - 1) {\n+                    final AjaxLink plus = new IndicatingAjaxLink(\"add\") {\n+\n+                        private static final long serialVersionUID =\n+                                -7978723352517770644L;\n+\n+                        @Override\n+                        public void onClick(final AjaxRequestTarget target) {\n+\n+                            //Add current component\n+                            model.getObject().add(null);\n+\n+                            target.addComponent(container);\n+                        }\n+                    };\n+\n+                    final Fragment fragment = new Fragment(\n+                            \"panelPlus\", \"fragmentPlus\", container);\n+\n+                    fragment.add(plus);\n+                    item.add(fragment);\n+                } else {\n+                    final Fragment fragment = new Fragment(\n+                            \"panelPlus\", \"emptyFragment\", container);\n+                    item.add(fragment);\n+                }\n+            }\n+        };\n+\n+        container.add(view.setOutputMarkupId(true));\n+        setOutputMarkupId(true);\n+    }\n+\n+    public ListView<E> getView() {\n+        return view;\n+    }\n+\n+    public WebMarkupContainer getContainer() {\n+        return container;\n+    }\n+\n+    @Override\n+    public MultiValueSelectorPanel<E> setModelObject(Serializable object) {\n+        view.setModelObject((List<E>) object);\n+        return this;\n+    }\n+}"},{"sha":"51c72b71d5071a2756afab617b8ff79440c42303","filename":"console/src/main/resources/org/syncope/console/pages/BaseModalPage.html","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBaseModalPage.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -26,6 +26,8 @@\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"css/ui.tabs.css\" media=\"all\"/>\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"css/stile_sy.css\" media=\"all\"/>\n \n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/fieldstyle.css\" />\n+\n         <script type=\"text/javascript\" src=\"scripts/jquery-1.4.2.min.js\"></script>\n         <script type=\"text/javascript\" src=\"scripts/jquery-ui-1.8.5.custom.min.js\"></script>\n \n@@ -52,6 +54,6 @@\n     <body>\n         <div wicket:id=\"feedback\"/>\n \n-         <wicket:child />\n-    </body>\n+    <wicket:child />\n+</body>\n </html>\n\\ No newline at end of file"},{"sha":"6343f111e3ffed4a391dcda60b76b2ad611de348","filename":"console/src/main/resources/org/syncope/console/pages/BasePage.html","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FBasePage.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -32,6 +32,8 @@\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"css/ui.tabs.css\" media=\"all\"/>\n         <link rel=\"stylesheet\" type=\"text/css\" href=\"css/stile_sy.css\" media=\"all\"/>\n \n+        <link rel=\"stylesheet\" type=\"text/css\" href=\"css/fieldstyle.css\" />\n+\n         <script type=\"text/javascript\" src=\"scripts/jquery-1.4.2.min.js\"></script>\n         <script type=\"text/javascript\" src=\"scripts/jquery-ui-1.8.5.custom.min.js\"></script>\n "},{"sha":"a34dde64263e33af8c6cbd04d6c4a8bda954f19d","filename":"console/src/main/resources/org/syncope/console/pages/Configuration.html","status":"modified","additions":7,"deletions":2,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -21,6 +21,7 @@\n             </li>\n             <li><a href=\"#tabs-2\"><span><wicket:message key=\"tab2\"/></span></a></li>\n             <li><a href=\"#tabs-3\"><span><wicket:message key=\"tab3\"/></span></a></li>\n+            <li><a href=\"#tabs-4\"><span><wicket:message key=\"tab4\"/></span></a></li>\n         </ul>\n         <div id=\"tabs-1\">\n \n@@ -42,11 +43,15 @@\n             <div wicket:id=\"createConfigurationWin\">[Show modal window for creating configuration]</div>\n             <div wicket:id=\"editConfigurationWin\">[Show modal window for editing configuration]</div>\n \n-            <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\" wicket:id=\"createConfigurationLink\">\n+            <a class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n+               wicket:id=\"createConfigurationLink\">\n                 <wicket:message key=\"create_configuration\"/>\n             </a>\n         </div>\n         <div id=\"tabs-2\">\n+            <span wicket:id=\"passwordPolicy\">[synchronization tasks]</span>\n+        </div>\n+        <div id=\"tabs-3\">\n \n             <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n                 <span wicket:id=\"coreLoggerContainer\">\n@@ -67,7 +72,7 @@\n                 </span>\n             </div>\n         </div>\n-        <div id=\"tabs-3\">\n+        <div id=\"tabs-4\">\n \n             <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n                 <span wicket:id=\"consoleLoggerContainer\">"},{"sha":"5b48179bb087c39639b7d8fa2738b3ae5198c00f","filename":"console/src/main/resources/org/syncope/console/pages/Configuration.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -1,8 +1,9 @@\n key=Key\n value=Value\n tab1=Parameters\n-tab2=Core Log\n-tab3=Console Log\n+tab2=Password Policy\n+tab3=Core Log\n+tab4=Console Log\n edit=Edit\n delete=Delete\n create_configuration=Create new configuration"},{"sha":"866e2e286773b68f94e3ee0488e367e95e038702","filename":"console/src/main/resources/org/syncope/console/pages/Configuration_it.properties","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration_it.properties?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -1,8 +1,9 @@\n key=Chiave\n value=Valore\n tab1=Parametri\n-tab2=Log Core\n-tab3=Log Console\n+tab2=Password Policy\n+tab3=Log Core\n+tab4=Log Console\n edit=Modifica\n delete=Elimina\n create_configuration=Crea nuova configurazione"},{"sha":"fb2eae0a581f32f8f33cf8381e3d14a1b443910c","filename":"console/src/main/resources/org/syncope/console/pages/panels/AttributesPanel.html","status":"modified","additions":2,"deletions":6,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FAttributesPanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -18,13 +18,9 @@\n             <tr wicket:id=\"schemas\">\n                 <td><span wicket:id=\"name\"/></td>\n                 <td>\n-                    <span wicket:id=\"fields\">\n-                        <span wicket:id=\"panel\">\n-                            [panel for dynamic input type markup]\n-                        </span>\n+                    <span wicket:id=\"panel\">\n+                        [panel for dynamic input type markup]\n                     </span>\n-                    <input type=\"button\" wicket:id=\"add\"/>\n-                    <input type=\"button\" wicket:id=\"drop\"/>\n                 </td>\n             </tr>\n             <!-- each time this table is rendered, stripe rows' color -->"},{"sha":"9e75068463eb029b8a0349e429d25a01a5799fbe","filename":"console/src/main/resources/org/syncope/console/pages/panels/PasswordPolicyPanel.html","status":"added","additions":65,"deletions":0,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,65 @@\n+<!--\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ under the License.\n+-->\n+<html>\n+    <wicket:head>\n+        <style type=\"text/css\">\n+            table.palette td.header {\n+                background:url(\"images/ui-bg_glass_75_e6e6e6_1x400.png\")\n+                    repeat-x scroll 50% 50% #E6E6E6 !important;\n+            }\n+            tr.alt td {\n+                background: #eff3ea;\n+            }\n+            .stripedTable{\n+                border:1px none #ffffff;\n+                font-size:1.1em;\n+                background-color: #ffffff;\n+                margin: 20px 0;\n+                padding: 1em 2em 1em 0\n+            }\n+        </style>\n+    </wicket:head>\n+    <wicket:panel>\n+        <form wicket:id=\"form\">\n+            <table class=\"stripedTable\" width=\"100%\">\n+                <tr wicket:id=\"policies\">\n+                    <td style=\"width: 15px; vertical-align: middle; text-align: center\">\n+                        <span wicket:id=\"check\">[check]</span>\n+                    </td>\n+                    <td style=\"width: 350px; vertical-align: middle; text-align: left\">\n+                        <label for=\"label\">\n+                            <span wicket:id=\"label\">[label]</span>\n+                        </label>\n+                    </td>\n+                    <td>\n+                        <span wicket:id=\"field\">[field]</span>\n+                    </td>\n+                </tr>\n+\n+                <script type=\"text/javascript\">\n+                    $(function() {\n+                        $('.stripedTable tr:even').addClass(\"alt\");\n+                    });\n+                </script>\n+            </table>\n+\n+            <div style=\"margin: 20px 10px 0\">\n+                <input type=\"submit\" \n+                       class=\"ui-button ui-widget ui-state-default ui-corner-all ui-button-text-only\"\n+                       wicket:id=\"apply\"/>\n+            </div>\n+        </form>\n+    </wicket:panel>\n+</html>"},{"sha":"9f1c7f45a8620a2b9d1474185024e2cb1f632d2a","filename":"console/src/main/resources/org/syncope/console/pages/panels/PasswordPolicyPanel.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel.properties?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,27 @@\n+minLength=Minimum size\n+maxLength=Maximum size\n+historyLength=History length\n+prefixesNotPermitted=Pefixes not permitted\n+suffixesNotPermitted=Suffixes not permitted\n+wordsNotPermitted=Substrings not permitted\n+schemasNotPermitted=Mustn't contain value of the following attributes\n+\n+digitRequired=Must contain one or more digits\n+nonAlphanumericRequired=Non alphanumeric character required\n+alphanumericRequired=Alphanumeric character required\n+lowercaseRequired=Lowercase required\n+uppercaseRequired=Uppercase required\n+mustStartWithDigit=Must start with digit\n+mustntStartWithDigit=Mustn't start with digit\n+mustEndWithDigit=Must end with digit\n+mustntEndWithDigit=Mustn't end with digit\n+mustStartWithNonAlpha=Must start with non alphanumeric character\n+mustStartWithAlpha=Must start with digit alphanumeric character\n+mustntStartWithNonAlpha=Mustn't start with non alphanumeric character\n+mustntStartWithAlpha=Mustn't start with digit alphanumeric character\n+mustEndWithNonAlpha=Must end with non alphanumeric character\n+mustEndWithAlpha=Must end with digit alphanumeric character\n+mustntEndWithNonAlpha=Mustn't end with non alphanumeric character\n+mustntEndWithAlpha=Mustn't end with digit alphanumeric character\n+\n+apply=Save"},{"sha":"4bf5c5f86e9609e37d990c5e82e8ba35641f1bee","filename":"console/src/main/resources/org/syncope/console/pages/panels/PasswordPolicyPanel_it.properties","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPasswordPolicyPanel_it.properties?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,27 @@\n+minLength=Lunghezza minima\n+maxLength=Lunghezza massima\n+historyLength=Lunghezza storico\n+prefixesNotPermitted=Prefissi non permessi\n+suffixesNotPermitted=Suffissi non permessi\n+wordsNotPermitted=Sottostringhe non permesse\n+schemasNotPermitted=Non deve contenere i valore dei seguenti attributi\n+\n+digitRequired=Numero richiesto\n+nonalfanumericiRequired=Carattere non alfanumerico richiesto\n+alfanumericiRequired=alfanumerici character required\n+lowercaseRequired=Lettera minuscola richiesta\n+uppercaseRequired=Lettera maiuscola richiesta\n+mustStartWithDigit=Deve iniziare con un numero\n+mustntStartWithDigit=Non deve iniziare con un numero\n+mustEndWithDigit=Deve terminare con un numero\n+mustntEndWithDigit=Non deve terminare con un numero\n+mustStartWithNonAlpha=Deve iniziare con un caratter non alfanumerico\n+mustStartWithAlpha=Deve iniziare con un caratter alfanumerico\n+mustntStartWithNonAlpha=Non deve iniziare con un caratter non alfanumerico\n+mustntStartWithAlpha=Non deve iniziare con un caratter alfanumerico\n+mustEndWithNonAlpha=Deve terminare con un caratter non alfanumerico\n+mustEndWithAlpha=Deve terminare con un caratter alfanumerico\n+mustntEndWithNonAlpha=Non deve terminare con un caratter non alfanumerico\n+mustntEndWithAlpha=Non deve terminare con un caratter alfanumerico\n+\n+apply=Salva\n\\ No newline at end of file"},{"sha":"0ab668a613412d96e8ea014dd81a46e7395fe38e","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/AjaxCheckBoxPanel.html","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxCheckBoxPanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -14,6 +14,6 @@\n -->\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-<wicket:panel>\n+<wicket:extend>\n     <input type=\"checkbox\" class=\"checkbox\" wicket:id=\"checkboxField\"/>\n-</wicket:panel>\n\\ No newline at end of file\n+</wicket:extend>\n\\ No newline at end of file"},{"sha":"eb789c5dbc3f4ad1e4d0056e3db10933d813e4e1","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/AjaxDropDownChoicePanel.html","status":"modified","additions":4,"deletions":7,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxDropDownChoicePanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -14,10 +14,7 @@\n -->\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-<wicket:panel>\n-    <select class=\"ui-widget-content ui-corner-all\"\n-            wicket:id=\"dropDownChoiceField\" style=\"width:80%\"/>\n-    <span wicket:id=\"required\"/>\n-    <br/>\n-    <br/>\n-</wicket:panel>\n\\ No newline at end of file\n+<wicket:extend>\n+    <select class=\"ui-widget-content ui-corner-all medium_dynamicsize\"\n+            wicket:id=\"dropDownChoiceField\"/>\n+</wicket:extend>\n\\ No newline at end of file"},{"sha":"d6c595e8ac6138be58c1a3c35462a478d37bdc4e","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/AjaxPalettePanel.html","status":"added","additions":21,"deletions":0,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxPalettePanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,21 @@\n+<!--\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ under the License.\n+-->\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n+    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<html>\n+    <wicket:panel>\n+        <span wicket:id=\"paletteField\">[Palette]</span>\n+    </wicket:panel>\n+</html>\n\\ No newline at end of file"},{"sha":"24b8dd39a740571fa83f826b3e0ec3113aadf299","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/AjaxTextFieldPanel.html","status":"modified","additions":4,"deletions":6,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FAjaxTextFieldPanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -14,10 +14,8 @@\n -->\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-<wicket:panel>\n-    <input type=\"text\" class=\"text ui-widget-content ui-corner-all\" \n-           style=\"margin-bottom:10px;width:95%;padding:.4em;\"\n+\n+<wicket:extend>\n+    <input type=\"text\" class=\"text ui-widget-content ui-corner-all long_dynamicsize\"\n            wicket:id=\"textField\"/>\n-    <span wicket:id=\"required\"/>\n-    <br/>\n-</wicket:panel>\n\\ No newline at end of file\n+</wicket:extend>\n\\ No newline at end of file"},{"sha":"875d9420839ad6b6b6e01962dcebc5e612486e92","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/DateFieldPanel.properties","status":"removed","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7808d37bb9cf9f70c334f85f1b7145f34d9816e6/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7808d37bb9cf9f70c334f85f1b7145f34d9816e6/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel.properties?ref=7808d37bb9cf9f70c334f85f1b7145f34d9816e6","patch":"@@ -1 +0,0 @@\n-field.DateFieldPanel$DateTimeFormValidator=Field '${label0}' must be fully valued"},{"sha":"e5d81046b745fae4521d2a94ada513f57a487346","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/DateFieldPanel_it.properties","status":"removed","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7808d37bb9cf9f70c334f85f1b7145f34d9816e6/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7808d37bb9cf9f70c334f85f1b7145f34d9816e6/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateFieldPanel_it.properties?ref=7808d37bb9cf9f70c334f85f1b7145f34d9816e6","patch":"@@ -1 +0,0 @@\n-field.DateFieldPanel$DateTimeFormValidator=Il campo '${label0}' dev'essere completamente valorizzato"},{"sha":"6125d3ff5b0d320f6fb0101754e9bb0c9312015f","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/DateTextFieldPanel.html","status":"renamed","additions":3,"deletions":16,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTextFieldPanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -14,20 +14,7 @@\n -->\n <!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n     \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n-<wicket:panel>\n-\n-<span wicket:id=\"datePanel\"/>\n-\n-<wicket:fragment wicket:id=\"dateField\">\n-    <input type=\"text\" class=\"text ui-widget-content ui-corner-all\"\n-           style=\"margin-bottom:10px;width:80%;padding:.4em;\"\n+<wicket:extend>\n+    <input type=\"text\" class=\"text ui-widget-content ui-corner-all date_size\"\n            wicket:id=\"field\"/>\n-</wicket:fragment>\n-\n-<wicket:fragment wicket:id=\"dateTimeField\">\n-    <span wicket:id=\"field\"/>\n-</wicket:fragment>\n-\n-<span wicket:id=\"required\"/>\n-<br/>\n-</wicket:panel>\n\\ No newline at end of file\n+</wicket:extend>\n\\ No newline at end of file","previous_filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/DateFieldPanel.html"},{"sha":"bc7fb5115abdc2854596e997a2e7e0264847843b","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/DateTimeFieldPanel.html","status":"added","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,19 @@\n+<!--\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ under the License.\n+-->\n+<!DOCTYPE html PUBLIC \"-//W3C//DTD XHTML 1.0 Transitional//EN\"\n+    \"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd\">\n+<wicket:extend>\n+    <span wicket:id=\"field\"/>\n+</wicket:extend>\n\\ No newline at end of file"},{"sha":"15caa63f52217b3f82776d4dfa2741def7b4a2c9","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/DateTimeFieldPanel.properties","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel.properties?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1 @@\n+field.DateTimeFieldPanel$DateTimeFormValidator=Field '${label0}' must be fully valued"},{"sha":"0fb3094e58ea59e108410c1ba1d90cb07afd925b","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/DateTimeFieldPanel_it.properties","status":"added","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FDateTimeFieldPanel_it.properties?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1 @@\n+field.DateTimeFieldPanel$DateTimeFormValidator=Il campo '${label0}' dev'essere completamente valorizzato"},{"sha":"3ccc959939021252032843eb95787a41266f96ca","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/FieldPanel.html","status":"added","additions":30,"deletions":0,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FFieldPanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,30 @@\n+<!--\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ under the License.\n+-->\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n+<html>\n+    <wicket:panel>\n+\n+        <wicket:fragment wicket:id=\"requiredFragment\">\n+            <span wicket:id=\"requiredLabel\"/>\n+        </wicket:fragment>\n+\n+        <wicket:fragment wicket:id=\"notRequiredFragment\">\n+        </wicket:fragment>\n+\n+        <wicket:child />\n+\n+        <span wicket:id=\"required\"/>\n+    </wicket:panel>\n+</html>"},{"sha":"a6f7f1d4934598110774f1ae1fc9157cb4372876","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/MultiValueSelectorPanel.html","status":"added","additions":32,"deletions":0,"changes":32,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.html?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,32 @@\n+<!--\n+ Licensed under the Apache License, Version 2.0 (the \"License\");\n+ you may not use this file except in compliance with the License.\n+ You may obtain a copy of the License at\n+\n+      http://www.apache.org/licenses/LICENSE-2.0\n+\n+ Unless required by applicable law or agreed to in writing, software\n+ distributed under the License is distributed on an \"AS IS\" BASIS,\n+ WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ See the License for the specific language governing permissions and\n+ limitations under the License.\n+ under the License.\n+-->\n+<!DOCTYPE HTML PUBLIC \"-//W3C//DTD HTML 4.01 Transitional//EN\">\n+<html>\n+    <wicket:panel>\n+        <span wicket:id=\"multiValueContainer\">\n+            <span wicket:id=\"view\">\n+                <span wicket:id=\"panel\">[form field]</span>\n+                <a wicket:id=\"drop\"><img src=\"img/minus-icon.png\" alt=\"remove icon\" class=\"drop_button\" /></a>\n+                <span wicket:id=\"panelPlus\">[plus]</span>\n+                <br />\n+            </span>\n+            <wicket:fragment wicket:id=\"fragmentPlus\">\n+                <a wicket:id=\"add\"><img src=\"img/plus-icon.png\" alt=\"add icon\" class=\"add_button\" /></a>\n+            </wicket:fragment>\n+            <wicket:fragment wicket:id=\"emptyFragment\">\n+            </wicket:fragment>\n+        </span>\n+    </wicket:panel>\n+</html>"},{"sha":"e3e9cf5a89939c09ea6b9362666a7ee0f31bb03f","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/MultiValueSelectorPanel.properties","status":"added","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel.properties?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,6 @@\n+minLength=Minimum password size\n+maxLength=Maximum password size\n+historyLength=Password history length\n+digitRequired=Password must contain one or more digits\n+prefixesNotPermitted=Password prefixes not permitted\n+apply=Save"},{"sha":"6230919e7d809275500705b327b88f9f905b4a24","filename":"console/src/main/resources/org/syncope/console/wicket/markup/html/form/MultiValueSelectorPanel_it.properties","status":"added","additions":6,"deletions":0,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fwicket%2Fmarkup%2Fhtml%2Fform%2FMultiValueSelectorPanel_it.properties?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,6 @@\n+minLength=Lunghezza minima password\n+maxLength=Lunghezza massima password\n+historyLength=Lunghezza storico password\n+digitRequired=La password deve contenere uno o pi\\u00f9 numeri\n+prefixesNotPermitted=Prefissi password non permessi\n+apply=Salva\n\\ No newline at end of file"},{"sha":"d220ffc17c7f91024f0988d9e779b1b35be2b789","filename":"console/src/main/webapp/css/fieldstyle.css","status":"added","additions":29,"deletions":0,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Ffieldstyle.css","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Ffieldstyle.css","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fwebapp%2Fcss%2Ffieldstyle.css?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,29 @@\n+.drop_button{\n+    vertical-align: middle;\n+    margin-left: 6px;\n+}\n+\n+.add_button{\n+    vertical-align: middle;\n+    margin-left: 6px;\n+}\n+\n+.date_size{\n+    width: 90px;\n+}\n+\n+.long_dynamicsize{\n+    width: 80%;\n+}\n+\n+.medium_dynamicsize{\n+    width: 50%;\n+}\n+\n+.long_fixedsize{\n+    width: 500px;\n+}\n+\n+.medium_fixedsize{\n+    width: 300px;\n+}\n\\ No newline at end of file"},{"sha":"720066de3bc07a4b5853472cae821ced4293b25a","filename":"console/src/main/webapp/img/minus-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fminus-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fminus-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fminus-icon.png?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7"},{"sha":"0ea124a744763ffe056b84a56b6100c45303068a","filename":"console/src/main/webapp/img/plus-icon.png","status":"added","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fplus-icon.png","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fplus-icon.png","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fwebapp%2Fimg%2Fplus-icon.png?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7"},{"sha":"8f050592a3311a7be9dfcb4a2171aed916d538e6","filename":"console/src/test/java/org/syncope/console/UserTestITCase.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FUserTestITCase.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -74,10 +74,10 @@ public void browseEditModal() {\n \n         assertEquals(\"testUsername\",\n                 selenium.getAttribute(\"//form/div[2]/div/span/table/tbody/\"\n-                + \"tr[2]/td[2]/span/span/input@value\"));\n+                + \"tr[2]/td[2]/span/input@value\"));\n         assertEquals(\"Doe\",\n                 selenium.getAttribute(\"//form/div[2]/div/span/table/tbody/\"\n-                + \"tr[6]/td[2]/span/span/input@value\"));\n+                + \"tr[6]/td[2]/span/input@value\"));\n         selenium.click(\"//div[@id='tabs']/ul/li[2]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n         selenium.click(\"//div[@id='tabs']/ul/li[4]/a/span\");"},{"sha":"7f25fa19f3360531ce46230548cd8f64648a14a9","filename":"core/pom.xml","status":"modified","additions":15,"deletions":15,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpom.xml?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -29,8 +29,8 @@\n     <packaging>war</packaging>\n \n     <properties>\n-        <jdbcdriver.groupId>org.hsqldb</jdbcdriver.groupId>    \n-        <jdbcdriver.artifactId>hsqldb</jdbcdriver.artifactId>    \n+        <jdbcdriver.groupId>org.hsqldb</jdbcdriver.groupId>\n+        <jdbcdriver.artifactId>hsqldb</jdbcdriver.artifactId>\n         \n         <cargo.servlet.port>9080</cargo.servlet.port>\n         <cargo.run.dir>${project.build.directory}/syncope-core-test</cargo.run.dir>\n@@ -436,7 +436,7 @@\n                         <configuration>\n                             <target>\n                                 <copy file=\"${project.build.directory}/test-classes/test.csv\" todir=\"${java.io.tmpdir}\" overwrite=\"true\"/>\n-                            </target>    \n+                            </target>\n                         </configuration>\n                         <goals>\n                             <goal>run</goal>\n@@ -636,8 +636,8 @@\n                 <directory>src/test/resources</directory>\n                 <filtering>true</filtering>\n                 <excludes>\n-                    <exclude>oracle/**</exclude>    \n-                    <exclude>postgres/**</exclude>    \n+                    <exclude>oracle/**</exclude>\n+                    <exclude>postgres/**</exclude>\n                 </excludes>\n             </testResource>\n         </testResources>\n@@ -649,7 +649,7 @@\n             <id>dev</id>\n             <properties>\n                 <maven.test.skip>true</maven.test.skip>\n-            </properties>    \n+            </properties>\n             <build>\n                 <defaultGoal>clean verify</defaultGoal>\n                 \n@@ -659,7 +659,7 @@\n                         <artifactId>cargo-maven2-plugin</artifactId>\n                         <inherited>true</inherited>\n                         <configuration>\n-                            <wait>true</wait>    \n+                            <wait>true</wait>\n                         </configuration>\n                     </plugin>\n                 </plugins>\n@@ -669,8 +669,8 @@\n         <profile>\n             <id>oracle-it</id>\n             <properties>\n-                <jdbcdriver.groupId>com.oracle</jdbcdriver.groupId>    \n-                <jdbcdriver.artifactId>ojdbc6</jdbcdriver.artifactId>    \n+                <jdbcdriver.groupId>com.oracle</jdbcdriver.groupId>\n+                <jdbcdriver.artifactId>ojdbc6</jdbcdriver.artifactId>\n             </properties>\n             <dependencies>\n                 <dependency>\n@@ -710,13 +710,13 @@\n                     </plugin>\n                 </plugins>\n             </build>\n-        </profile>    \n+        </profile>\n         \n         <profile>\n             <id>postgres-it</id>\n             <properties>\n-                <jdbcdriver.groupId>postgresql</jdbcdriver.groupId>    \n-                <jdbcdriver.artifactId>postgresql</jdbcdriver.artifactId>    \n+                <jdbcdriver.groupId>postgresql</jdbcdriver.groupId>\n+                <jdbcdriver.artifactId>postgresql</jdbcdriver.artifactId>\n             </properties>\n             <dependencies>\n                 <dependency>\n@@ -753,13 +753,13 @@\n                     </plugin>\n                 </plugins>\n             </build>\n-        </profile> \n+        </profile>\n         \n         <profile>\n             <id>mysql-it</id>\n             <properties>\n-                <jdbcdriver.groupId>mysql</jdbcdriver.groupId>    \n-                <jdbcdriver.artifactId>mysql-connector-java</jdbcdriver.artifactId>    \n+                <jdbcdriver.groupId>mysql</jdbcdriver.groupId>\n+                <jdbcdriver.artifactId>mysql-connector-java</jdbcdriver.artifactId>\n             </properties>\n             <dependencies>\n                 <dependency>"},{"sha":"734c9370caf0f8e532926a243bf2360610ec8d88","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractAttributable.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractAttributable.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -28,6 +28,8 @@\n @AttributableCheck\n public abstract class AbstractAttributable extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -4801685541488201119L;\n+\n     /**\n      * Provisioning target resources.\n      */"},{"sha":"d45da212ad1c4b4d3a43d66b8568f78fcc73a43a","filename":"core/src/main/java/org/syncope/core/persistence/beans/Policy.java","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPolicy.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -35,13 +35,19 @@\n @PolicyCheck\n public class Policy extends AbstractBaseBean {\n \n+    private static final long serialVersionUID = -5844833125843247458L;\n+\n     @Id\n     private Long id;\n \n     @Column(nullable = false)\n     @Enumerated(EnumType.STRING)\n     private PolicyType type;\n \n+    @Lob\n+    @Type(type = \"org.hibernate.type.StringClobType\")\n+    private String specification;\n+\n     public Long getId() {\n         return id;\n     }\n@@ -58,10 +64,6 @@ public void setType(PolicyType type) {\n         this.type = type;\n     }\n \n-    @Lob\n-    @Type(type = \"org.hibernate.type.StringClobType\")\n-    private String specification;\n-\n     public <T extends AbstractPolicy> T getSpecification() {\n         T result = null;\n "},{"sha":"627e305a4670fa2be19323011dbd60287a898b23","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":88,"deletions":34,"changes":122,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -14,6 +14,12 @@\n  */\n package org.syncope.core.persistence.beans.user;\n \n+import java.io.UnsupportedEncodingException;\n+import java.security.InvalidKeyException;\n+import java.security.NoSuchAlgorithmException;\n+import javax.crypto.BadPaddingException;\n+import javax.crypto.IllegalBlockSizeException;\n+import javax.crypto.NoSuchPaddingException;\n import static javax.persistence.EnumType.STRING;\n \n import java.security.MessageDigest;\n@@ -29,6 +35,7 @@\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n+import javax.persistence.ElementCollection;\n import javax.persistence.Entity;\n import javax.persistence.Enumerated;\n import javax.persistence.Id;\n@@ -103,13 +110,17 @@ public class SyncopeUser extends AbstractAttributable {\n     @Enumerated(STRING)\n     private CipherAlgorithm cipherAlgorithm;\n \n+    @ElementCollection\n+    private List<String> passwordHistory;\n+\n     public SyncopeUser() {\n         super();\n \n         memberships = new ArrayList<Membership>();\n         attributes = new ArrayList<UAttr>();\n         derivedAttributes = new ArrayList<UDerAttr>();\n         virtualAttributes = new ArrayList<UVirAttr>();\n+        passwordHistory = new ArrayList<String>();\n     }\n \n     @Override\n@@ -189,46 +200,15 @@ public String getClearPassword() {\n      */\n     public void setPassword(\n             final String password,\n-            final CipherAlgorithm cipherAlgoritm) {\n+            final CipherAlgorithm cipherAlgoritm,\n+            final int historySize) {\n \n         // clear password\n         clearPassword = password;\n \n         try {\n-            if (cipherAlgoritm == null\n-                    || cipherAlgoritm == CipherAlgorithm.AES) {\n-\n-                final byte[] cleartext = password.getBytes(\"UTF8\");\n-\n-                final Cipher cipher = Cipher.getInstance(\n-                        CipherAlgorithm.AES.getAlgorithm());\n-\n-                cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n-\n-                byte[] encoded = cipher.doFinal(cleartext);\n-\n-                this.password = new String(\n-                        Base64.encodeBase64(encoded));\n-\n-            } else {\n-\n-                MessageDigest algorithm = MessageDigest.getInstance(\n-                        cipherAlgoritm.getAlgorithm());\n-\n-                algorithm.reset();\n-                algorithm.update(password.getBytes());\n-\n-                byte messageDigest[] = algorithm.digest();\n-\n-                StringBuilder hexString = new StringBuilder();\n-                for (int i = 0; i < messageDigest.length; i++) {\n-                    hexString.append(\n-                            Integer.toHexString(0xFF & messageDigest[i]));\n-                }\n-\n-                this.password = hexString.toString();\n-            }\n \n+            this.password = encodePassword(password, cipherAlgoritm);\n             this.cipherAlgorithm = cipherAlgoritm;\n \n         } catch (Throwable t) {\n@@ -361,4 +341,78 @@ public CipherAlgorithm getCipherAlgoritm() {\n     public void setCipherAlgoritm(CipherAlgorithm cipherAlgoritm) {\n         this.cipherAlgorithm = cipherAlgoritm;\n     }\n+\n+    public List<String> getPasswordHistory() {\n+        return passwordHistory;\n+    }\n+\n+    private String encodePassword(\n+            final String password, final CipherAlgorithm cipherAlgoritm)\n+            throws NoSuchAlgorithmException,\n+            IllegalBlockSizeException,\n+            InvalidKeyException,\n+            BadPaddingException,\n+            NoSuchPaddingException,\n+            UnsupportedEncodingException {\n+\n+        String encodedPassword = null;\n+\n+        if (password != null) {\n+            if (cipherAlgoritm == null\n+                    || cipherAlgoritm == CipherAlgorithm.AES) {\n+\n+                final byte[] cleartext = password.getBytes(\"UTF8\");\n+\n+                final Cipher cipher = Cipher.getInstance(\n+                        CipherAlgorithm.AES.getAlgorithm());\n+\n+                cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n+\n+                byte[] encoded = cipher.doFinal(cleartext);\n+\n+                encodedPassword = new String(\n+                        Base64.encodeBase64(encoded));\n+\n+            } else {\n+\n+                MessageDigest algorithm = MessageDigest.getInstance(\n+                        cipherAlgoritm.getAlgorithm());\n+\n+                algorithm.reset();\n+                algorithm.update(password.getBytes());\n+\n+                byte messageDigest[] = algorithm.digest();\n+\n+                StringBuilder hexString = new StringBuilder();\n+                for (int i = 0; i < messageDigest.length; i++) {\n+                    hexString.append(\n+                            Integer.toHexString(0xFF & messageDigest[i]));\n+                }\n+\n+                encodedPassword = hexString.toString();\n+            }\n+        }\n+\n+        return encodedPassword;\n+    }\n+\n+    public boolean verifyPasswordHistory(final String password, final int size) {\n+        try {\n+\n+            boolean res = false;\n+\n+            if (size != 0) {\n+                res = passwordHistory.subList(size >= passwordHistory.size() ? 0\n+                        : passwordHistory.size() - size, passwordHistory.size()).\n+                        contains(cipherAlgorithm != null\n+                        ? encodePassword(password, cipherAlgorithm) : password);\n+            }\n+\n+            return res;\n+\n+        } catch (Throwable t) {\n+            LOG.error(\"Error evaluating password history\", t);\n+            return false;\n+        }\n+    }\n }"},{"sha":"b553b7ff50ffd89d56869a27c294eb1d32cb1d94","filename":"core/src/main/java/org/syncope/core/persistence/dao/PolicyDAO.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -16,13 +16,16 @@\n \n import java.util.List;\n import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.types.PolicyType;\n \n public interface PolicyDAO extends DAO {\n \n     Policy find(Long id);\n \n     Policy getPasswordPolicy();\n \n+    List<Policy> find(PolicyType type);\n+\n     Policy getAccountPolicy();\n \n     List<Policy> findAll();"},{"sha":"63a39112cf4780b0c06330d2ce0c6caa1d466b3c","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":14,"deletions":9,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -19,6 +19,7 @@\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.dao.PolicyDAO;\n+import org.syncope.types.PolicyType;\n \n @Repository\n public class PolicyDAOImpl extends AbstractDAOImpl\n@@ -30,12 +31,19 @@ public Policy find(final Long id) {\n     }\n \n     @Override\n-    public Policy getPasswordPolicy() {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM Policy e WHERE type='PASSWORD'\");\n+    public List<Policy> find(final PolicyType type) {\n+        final Query query = entityManager.createQuery(\n+                \"SELECT e FROM Policy e WHERE type=:type\");\n+\n+        query.setParameter(\"type\", type);\n+\n+        return query.getResultList();\n+    }\n \n-        final List<Policy> policies = query.getResultList();\n+    @Override\n+    public Policy getPasswordPolicy() {\n \n+        List<Policy> policies = find(PolicyType.PASSWORD);\n         if (policies != null && !policies.isEmpty()) {\n             return policies.get(0);\n         } else {\n@@ -45,16 +53,13 @@ public Policy getPasswordPolicy() {\n \n     @Override\n     public Policy getAccountPolicy() {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM Policy e WHERE type='ACCOUNT'\");\n-\n-        final List<Policy> policies = query.getResultList();\n-\n+        List<Policy> policies = find(PolicyType.ACCOUNT);\n         if (policies != null && !policies.isEmpty()) {\n             return policies.get(0);\n         } else {\n             return null;\n         }\n+\n     }\n \n     @Override"},{"sha":"c8c31c22f7c987e8c68271aa8017891a7d4fbf51","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/AttributableValidator.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FAttributableValidator.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -21,10 +21,10 @@\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.PolicyDAO;\n-import org.syncope.core.policy.PolicyEnforcer;\n+import org.syncope.core.policy.PasswordPolicyEnforcer;\n import org.syncope.core.policy.PolicyEvaluator;\n import org.syncope.types.EntityViolationType;\n-import org.syncope.types.SyntaxPolicy;\n+import org.syncope.types.PasswordPolicy;\n \n public class AttributableValidator extends AbstractValidator\n         implements ConstraintValidator<AttributableCheck, AbstractAttributable> {\n@@ -36,7 +36,7 @@ public class AttributableValidator extends AbstractValidator\n     private PolicyEvaluator evaluator;\n \n     @Autowired\n-    private PolicyEnforcer enforcer;\n+    private PasswordPolicyEnforcer enforcer;\n \n     @Override\n     public void initialize(final AttributableCheck constraintAnnotation) {\n@@ -47,9 +47,9 @@ public boolean isValid(\n             final AbstractAttributable object,\n             final ConstraintValidatorContext context) {\n \n-        boolean isValid = Boolean.TRUE;\n+        boolean isValid = true;\n         context.disableDefaultConstraintViolation();\n-        \n+\n         if (object instanceof SyncopeUser) {\n             // ------------------------------\n             // Verify password policy\n@@ -59,14 +59,14 @@ public boolean isValid(\n             final Policy policy = policyDAO.getPasswordPolicy();\n \n             // evaluate policy\n-            SyntaxPolicy syntaxPolicy = evaluator.evaluate(policy, object);\n+            PasswordPolicy passwordPolicy = evaluator.evaluate(policy, object);\n \n             try {\n                 final String password =\n                         ((SyncopeUser) object).getClearPassword();\n \n                 if (password != null) {\n-                    enforcer.enforce(syntaxPolicy, policy.getType(), password);\n+                    enforcer.enforce(passwordPolicy, policy.getType(), password);\n                 }\n \n             } catch (Exception e) {\n@@ -75,7 +75,7 @@ public boolean isValid(\n                 context.buildConstraintViolationWithTemplate(e.getMessage()).\n                         addNode(EntityViolationType.InvalidPassword.toString()).\n                         addConstraintViolation();\n-                isValid = Boolean.FALSE;\n+                isValid = false;\n             }\n             // ------------------------------\n         }"},{"sha":"1e62aba849d7956840ebbb0ea22873b368c2656f","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":28,"deletions":5,"changes":33,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -19,7 +19,11 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.dao.PolicyDAO;\n+import org.syncope.types.AccountPolicy;\n import org.syncope.types.EntityViolationType;\n+import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PolicyType;\n+import org.syncope.types.SyncPolicy;\n \n public class PolicyValidator extends AbstractValidator\n         implements ConstraintValidator<PolicyCheck, Policy> {\n@@ -36,42 +40,61 @@ public boolean isValid(\n             final Policy object,\n             final ConstraintValidatorContext context) {\n \n-        boolean isValid = Boolean.TRUE;\n         context.disableDefaultConstraintViolation();\n \n+        if (object.getSpecification() != null\n+                && ((object.getType() == PolicyType.PASSWORD\n+                && !(object.getSpecification() instanceof PasswordPolicy))\n+                || (object.getType() == PolicyType.ACCOUNT\n+                && !(object.getSpecification() instanceof AccountPolicy))\n+                || (object.getType() == PolicyType.SYNC\n+                && !(object.getSpecification() instanceof SyncPolicy)))) {\n+\n+            context.buildConstraintViolationWithTemplate(\n+                    \"Invalid password specification or password type\").\n+                    addNode(\n+                    EntityViolationType.InvalidPolicy.toString()).\n+                    addConstraintViolation();\n+\n+            return false;\n+        }\n+\n         switch (object.getType()) {\n             case PASSWORD:\n                 // just one policy with type PASSWORD\n                 Policy passwordPolicy = policyDAO.getPasswordPolicy();\n                 if (passwordPolicy != null\n                         && !passwordPolicy.getId().equals(object.getId())) {\n-                    isValid = Boolean.FALSE;\n \n                     context.buildConstraintViolationWithTemplate(\n                             \"Password policy already exists\").addNode(\n                             EntityViolationType.InvalidPolicy.toString()).\n                             addConstraintViolation();\n+\n+                    return false;\n                 }\n                 break;\n \n             case ACCOUNT:\n+\n                 // just one policy with type ACCOUNT\n                 Policy accountPolicy = policyDAO.getAccountPolicy();\n                 if (accountPolicy != null\n                         && !accountPolicy.getId().equals(object.getId())) {\n-                    isValid = Boolean.FALSE;\n \n                     context.buildConstraintViolationWithTemplate(\n                             \"Account policy already exists\").\n                             addNode(EntityViolationType.InvalidPolicy.toString()).\n                             addConstraintViolation();\n+\n+                    return false;\n                 }\n                 break;\n \n-            case SCHEMA:\n+            case SYNC:\n             default:\n         }\n \n-        return isValid;\n+        return true;\n     }\n }"},{"sha":"243ba102f534515947118a3b70b061b81e9a759b","filename":"core/src/main/java/org/syncope/core/policy/PasswordPolicyEnforcer.java","status":"added","additions":243,"deletions":0,"changes":243,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,243 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.policy;\n+\n+import java.io.InvalidObjectException;\n+import java.util.regex.Pattern;\n+import org.springframework.stereotype.Component;\n+import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PolicyType;\n+\n+@Component\n+public class PasswordPolicyEnforcer\n+        implements PolicyEnforcer<PasswordPolicy, String> {\n+\n+    private static final Pattern DIGIT = Pattern.compile(\".*\\\\d+.*\");\n+\n+    private static final Pattern ALPHA_LOWERCASE = Pattern.compile(\".*[a-z]+.*\");\n+\n+    private static final Pattern ALPHA_UPPERCASE = Pattern.compile(\".*[A-Z]+.*\");\n+\n+    private static final Pattern FIRSTDIGIT = Pattern.compile(\"\\\\d.*\");\n+\n+    private static final Pattern LASTDIGIT = Pattern.compile(\".*\\\\d\");\n+\n+    private static final Pattern ALPHANUMERIC = Pattern.compile(\".*\\\\w.*\");\n+\n+    private static final Pattern FIRSTALPHANUMERIC = Pattern.compile(\"\\\\w.*\");\n+\n+    private static final Pattern LASTALPHANUMERIC = Pattern.compile(\".*\\\\w\");\n+\n+    private static final Pattern NONALPHANUMERIC = Pattern.compile(\".*\\\\W.*\");\n+\n+    private static final Pattern FIRSTNONALPHANUMERIC = Pattern.compile(\"\\\\W.*\");\n+\n+    private static final Pattern LASTNONALPHANUMERIC = Pattern.compile(\".*\\\\W\");\n+\n+    @Override\n+    public void enforce(\n+            final PasswordPolicy policy,\n+            final PolicyType type,\n+            final String object) throws InvalidObjectException, Exception {\n+\n+        if (!(object instanceof String)) {\n+            throw new InvalidObjectException(\"Invalid object type\");\n+        }\n+\n+        // check length\n+        if (policy.getMinLength() > 0\n+                && policy.getMinLength() > object.length()) {\n+            throw new Exception(\"Password too short\");\n+        }\n+\n+        if (policy.getMaxLength() > 0\n+                && policy.getMaxLength() < object.length()) {\n+            throw new Exception(\"Password too long\");\n+        }\n+\n+        // check words not permitted\n+        for (String word : policy.getWordsNotPermitted()) {\n+            if (object.contains(word)) {\n+                throw new Exception(\"Used word(s) not permitted\");\n+            }\n+        }\n+\n+        // check digits occurrence\n+        if (policy.isDigitRequired()\n+                && !checkForDigit(object)) {\n+            throw new Exception(\"Password must contain digit(s)\");\n+        }\n+\n+        // check lowercase alphabetic characters occurrence\n+        if (policy.isLowercaseRequired()\n+                && !checkForLowercase(object)) {\n+            throw new Exception(\n+                    \"Password must contain lowercase alphabetic character(s)\");\n+        }\n+\n+        // check uppercase alphabetic characters occurrence\n+        if (policy.isUppercaseRequired()\n+                && !checkForUppercase(object)) {\n+            throw new Exception(\n+                    \"Password must contain uppercase alphabetic character(s)\");\n+        }\n+\n+        // check prefix\n+        for (String prefix : policy.getPrefixesNotPermitted()) {\n+            if (object.startsWith(prefix)) {\n+                throw new Exception(\"Prefix not permitted\");\n+            }\n+        }\n+\n+        // check suffix\n+        for (String suffix : policy.getSuffixesNotPermitted()) {\n+            if (object.endsWith(suffix)) {\n+                throw new Exception(\"Suffix not permitted\");\n+            }\n+        }\n+\n+        // check digit first occurrence\n+        if (policy.isMustStartWithDigit()\n+                && !checkForFirstDigit(object)) {\n+            throw new Exception(\"Password must start with a digit\");\n+        }\n+\n+        if (policy.isMustntStartWithDigit()\n+                && checkForFirstDigit(object)) {\n+            throw new Exception(\"Password mustn't start with a digit\");\n+        }\n+\n+        // check digit last occurrence\n+        if (policy.isMustEndWithDigit()\n+                && !checkForLastDigit(object)) {\n+            throw new Exception(\"Password must end with a digit\");\n+        }\n+\n+        if (policy.isMustntEndWithDigit()\n+                && checkForLastDigit(object)) {\n+            throw new Exception(\"Password mustn't end with a digit\");\n+        }\n+\n+        // check alphanumeric characters occurence\n+        if (policy.isAlphanumericRequired()\n+                && !checkForAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password must contain alphanumeric character(s)\");\n+        }\n+\n+        // check non alphanumeric characters occurence\n+        if (policy.isNonAlphanumericRequired()\n+                && !checkForNonAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password must contain non-alphanumeric character(s)\");\n+        }\n+\n+        // check alphanumeric character first occurrence\n+        if (policy.isMustStartWithAlpha()\n+                && !checkForFirstAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password must start with an alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntStartWithAlpha()\n+                && checkForFirstAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password mustn't start with an alphanumeric character\");\n+        }\n+\n+        // check alphanumeric character last occurrence\n+        if (policy.isMustEndWithAlpha()\n+                && !checkForLastAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password must end with an alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntEndWithAlpha()\n+                && checkForLastAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password mustn't end with an alphanumeric character\");\n+        }\n+\n+        // check non alphanumeric character first occurrence\n+        if (policy.isMustStartWithNonAlpha()\n+                && !checkForFirstNonAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password must start with a non-alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntStartWithNonAlpha()\n+                && checkForFirstNonAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password mustn't start with a non-alphanumeric character\");\n+        }\n+\n+        // check non alphanumeric character last occurrence\n+        if (policy.isMustEndWithNonAlpha()\n+                && !checkForLastNonAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password must end with a non-alphanumeric character\");\n+        }\n+\n+        if (policy.isMustntEndWithNonAlpha()\n+                && checkForLastNonAlphanumeric(object)) {\n+            throw new Exception(\n+                    \"Password mustn't end with a non-alphanumeric character\");\n+        }\n+    }\n+\n+    private boolean checkForDigit(String str) {\n+        return DIGIT.matcher((CharSequence) str).matches();\n+    }\n+\n+    private boolean checkForLowercase(String str) {\n+        return ALPHA_LOWERCASE.matcher((CharSequence) str).matches();\n+    }\n+\n+    private boolean checkForUppercase(String str) {\n+        return ALPHA_UPPERCASE.matcher((CharSequence) str).matches();\n+    }\n+\n+    private boolean checkForFirstDigit(String str) {\n+        return FIRSTDIGIT.matcher((CharSequence) str).matches();\n+    }\n+\n+    private boolean checkForLastDigit(String str) {\n+        return LASTDIGIT.matcher((CharSequence) str).matches();\n+    }\n+\n+    private boolean checkForAlphanumeric(String str) {\n+        return ALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForFirstAlphanumeric(String str) {\n+        return FIRSTALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLastAlphanumeric(String str) {\n+        return LASTALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForNonAlphanumeric(String str) {\n+        return NONALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForFirstNonAlphanumeric(String str) {\n+        return FIRSTNONALPHANUMERIC.matcher(str).matches();\n+    }\n+\n+    private boolean checkForLastNonAlphanumeric(String str) {\n+        return LASTNONALPHANUMERIC.matcher(str).matches();\n+    }\n+}"},{"sha":"08dd1b95388629b63786dcd7b296e493357305b0","filename":"core/src/main/java/org/syncope/core/policy/PolicyEnforcer.java","status":"modified","additions":3,"deletions":62,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -15,71 +15,12 @@\n package org.syncope.core.policy;\n \n import java.io.InvalidObjectException;\n-import org.springframework.stereotype.Component;\n-import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.types.AbstractPolicy;\n import org.syncope.types.PolicyType;\n-import org.syncope.types.SyntaxPolicy;\n \n-@Component\n-public class PolicyEnforcer<E> {\n+public interface PolicyEnforcer<T extends AbstractPolicy, E> {\n \n-    public <T extends AbstractPolicy> void enforce(\n+    public void enforce(\n             final T policy, final PolicyType type, final E object)\n-            throws InvalidObjectException, Exception {\n-\n-        switch (type) {\n-            case PASSWORD:\n-            case SCHEMA:\n-                if (!(object instanceof String)) {\n-                    throw new InvalidObjectException(\"Invalid object type\");\n-                }\n-                syntaxVerification((SyntaxPolicy) policy, (String) object);\n-                break;\n-            case ACCOUNT:\n-                if (!(object instanceof SyncopeUser)) {\n-                    throw new InvalidObjectException(\"Invalid object type\");\n-                }\n-                break;\n-            default:\n-        }\n-    }\n-\n-    private void syntaxVerification(\n-            final SyntaxPolicy policy, final String object) throws Exception {\n-\n-        // check length\n-        if (policy.getMinLength() > 0\n-                && policy.getMinLength() > object.length()) {\n-            throw new Exception(\"Password too short\");\n-        }\n-\n-        if (policy.getMaxLength() > 0\n-                && policy.getMaxLength() < object.length()) {\n-            throw new Exception(\"Password too long\");\n-        }\n-        // check words not permitted\n-\n-        // check non alphanumeric characters occurence\n-\n-        // check digits occurrence\n-\n-        // check lowercase alphabetic characters occurrence\n-\n-        // check uppercase alphabetic characters occurrence\n-\n-        // check prefix\n-\n-        // check suffix\n-\n-        // check non alphanumeric character first occurrence\n-\n-        // check digit first occurrence\n-\n-        // check non alphanumeric character last occurrence\n-\n-        // check digit last occurrence\n-\n-        // check schemas\n-    }\n+            throws InvalidObjectException, Exception;\n }"},{"sha":"80296e636e29b1d1553c4f913cc4a25ca026874c","filename":"core/src/main/java/org/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":45,"deletions":9,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -15,17 +15,26 @@\n package org.syncope.core.policy;\n \n import java.util.List;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.stereotype.Component;\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractAttributable;\n import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.types.AbstractPolicy;\n-import org.syncope.types.SyntaxPolicy;\n+import org.syncope.types.PasswordPolicy;\n \n @Component\n public class PolicyEvaluator {\n \n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG = LoggerFactory.getLogger(\n+            PolicyEvaluator.class);\n+\n     public <T extends AbstractPolicy> T evaluate(\n             final Policy policy, final AbstractAttributable attributable) {\n \n@@ -34,33 +43,60 @@ public <T extends AbstractPolicy> T evaluate(\n         if (policy != null) {\n             switch (policy.getType()) {\n                 case PASSWORD:\n-                case SCHEMA:\n-                    final SyntaxPolicy specification = policy.getSpecification();\n-                    final SyntaxPolicy syntaxPolicy = new SyntaxPolicy();\n+                    final PasswordPolicy spec = policy.getSpecification();\n+                    final PasswordPolicy passwordPolicy = new PasswordPolicy();\n \n                     BeanUtils.copyProperties(\n-                            specification,\n-                            syntaxPolicy,\n+                            spec,\n+                            passwordPolicy,\n                             new String[]{\"schemasNotPermitted\"});\n \n                     AbstractAttr attribute;\n                     List<String> values;\n-                    for (String schema : specification.getSchemasNotPermitted()) {\n+                    for (String schema : spec.getSchemasNotPermitted()) {\n                         attribute = attributable.getAttribute(schema);\n                         if (attribute != null) {\n                             values = attribute.getValuesAsStrings();\n                             if (values != null && !values.isEmpty()) {\n-                                syntaxPolicy.getWordsNotPermitted().add(\n+                                passwordPolicy.getWordsNotPermitted().add(\n                                         values.get(0));\n                             }\n                         }\n                     }\n \n-                    result = (T) syntaxPolicy;\n+                    // Password history verification and update\n+                    final String password =\n+                            ((SyncopeUser) attributable).getPassword();\n+\n+                    final List<String> passwordHistory =\n+                            ((SyncopeUser) attributable).getPasswordHistory();\n+\n+                    if (((SyncopeUser) attributable).verifyPasswordHistory(\n+                            ((SyncopeUser) attributable).getClearPassword(),\n+                            spec.getHistoryLength())) {\n+                        passwordPolicy.getWordsNotPermitted().add(\n+                                ((SyncopeUser) attributable).getClearPassword());\n+                    } else {\n+\n+                        if (spec.getHistoryLength() > 0 && password != null) {\n+                            passwordHistory.add(password);\n+                        }\n+\n+                        if (spec.getHistoryLength() < passwordHistory.size()) {\n+                            for (int i = 0; i < passwordHistory.size()\n+                                    - spec.getHistoryLength(); i++) {\n+                                passwordHistory.remove(i);\n+                            }\n+                        }\n+                    }\n+\n+                    result = (T) passwordPolicy;\n                     break;\n                 case ACCOUNT:\n                     result = null;\n                     break;\n+                case SYNC:\n+                    break;\n                 default:\n                     result = null;\n             }"},{"sha":"65ae55a0aa99835deaa17770c751a29b9618e30b","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"added","additions":368,"deletions":0,"changes":368,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,368 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.util.ArrayList;\n+import java.util.List;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import java.util.Map;\n+import java.util.Set;\n+import javassist.NotFoundException;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.security.access.prepost.PreAuthorize;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.syncope.client.mod.AccountPolicyMod;\n+import org.syncope.client.mod.PasswordPolicyMod;\n+import org.syncope.client.mod.SyncPolicyMod;\n+import org.syncope.client.to.AccountPolicyTO;\n+import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n+import org.syncope.client.to.SyncPolicyTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n+import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n+import org.syncope.types.AccountPolicy;\n+import org.syncope.types.EntityViolationType;\n+import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PolicyType;\n+import org.syncope.types.SyncPolicy;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+@Controller\n+@RequestMapping(\"/policy\")\n+public class PolicyController extends AbstractController {\n+\n+    @Autowired\n+    private PolicyDAO policyDAO;\n+\n+    @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/password/create\")\n+    public PasswordPolicyTO create(final HttpServletResponse response,\n+            final @RequestBody PasswordPolicyTO policyTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        Policy policy = new Policy();\n+        policy.setType(policyTO.getType());\n+        policy.setSpecification(policyTO.getSpecification());\n+\n+        return (PasswordPolicyTO) create(policy, policyTO);\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/account/create\")\n+    public AccountPolicyTO create(final HttpServletResponse response,\n+            final @RequestBody AccountPolicyTO policyTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        Policy policy = new Policy();\n+        policy.setType(policyTO.getType());\n+        policy.setSpecification(policyTO.getSpecification());\n+\n+        return (AccountPolicyTO) create(policy, policyTO);\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_CREATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/sync/create\")\n+    public SyncPolicyTO create(final HttpServletResponse response,\n+            final @RequestBody SyncPolicyTO policyTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        Policy policy = new Policy();\n+        policy.setType(policyTO.getType());\n+        policy.setSpecification(policyTO.getSpecification());\n+\n+        return (SyncPolicyTO) create(policy, policyTO);\n+\n+    }\n+\n+    private PolicyTO create(final Policy policy, final PolicyTO policyTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        LOG.debug(\"Creating policy \" + policyTO);\n+\n+        SyncopeClientCompositeErrorException scce =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        try {\n+\n+            Policy actual = policyDAO.save(policy);\n+            policyTO.setId(actual.getId());\n+\n+            return policyTO;\n+\n+        } catch (InvalidEntityException e) {\n+            LOG.error(\"Policy {} cannot be crated\", policy);\n+\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidPolicy);\n+\n+            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n+                    e.getViolations().entrySet()) {\n+\n+                for (EntityViolationType violationType : violation.getValue()) {\n+                    sce.addElement(violation.getClass().getSimpleName() + \": \"\n+                            + violationType);\n+                }\n+            }\n+\n+            scce.addException(sce);\n+            throw scce;\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/password/update\")\n+    public PasswordPolicyTO update(final HttpServletResponse response,\n+            final @RequestBody PasswordPolicyMod policyMod)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        LOG.debug(\"Updating policy \" + policyMod);\n+\n+        Policy policy = new Policy();\n+        policy.setId(policyMod.getId());\n+        policy.setType(policyMod.getType());\n+        policy.setSpecification(policyMod.getSpecification());\n+\n+        Policy actual = update(policy);\n+\n+        PasswordPolicyTO policyTO = new PasswordPolicyTO();\n+        policyTO.setId(actual.getId());\n+        policyTO.setType(actual.getType());\n+        policyTO.setSpecification((PasswordPolicy) actual.getSpecification());\n+\n+        return policyTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/account/update\")\n+    public AccountPolicyTO update(final HttpServletResponse response,\n+            final @RequestBody AccountPolicyMod policyMod)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        LOG.debug(\"Updating policy \" + policyMod);\n+\n+        Policy policy = new Policy();\n+        policy.setId(policyMod.getId());\n+        policy.setType(policyMod.getType());\n+        policy.setSpecification(policyMod.getSpecification());\n+\n+        Policy actual = update(policy);\n+\n+        AccountPolicyTO policyTO = new AccountPolicyTO();\n+        policyTO.setId(actual.getId());\n+        policyTO.setType(actual.getType());\n+        policyTO.setSpecification((AccountPolicy) actual.getSpecification());\n+\n+        return policyTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_UPDATE')\")\n+    @RequestMapping(method = RequestMethod.POST, value = \"/sync/update\")\n+    public SyncPolicyTO update(final HttpServletResponse response,\n+            final @RequestBody SyncPolicyMod policyMod)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        LOG.debug(\"Updating policy \" + policyMod);\n+\n+        Policy policy = new Policy();\n+        policy.setId(policyMod.getId());\n+        policy.setType(policyMod.getType());\n+        policy.setSpecification(policyMod.getSpecification());\n+\n+        Policy actual = update(policy);\n+\n+        SyncPolicyTO policyTO = new SyncPolicyTO();\n+        policyTO.setId(actual.getId());\n+        policyTO.setType(actual.getType());\n+        policyTO.setSpecification((SyncPolicy) actual.getSpecification());\n+\n+        return policyTO;\n+    }\n+\n+    private Policy update(final Policy policy)\n+            throws NotFoundException, SyncopeClientCompositeErrorException {\n+\n+        LOG.debug(\"Updating policy \" + policy.getId());\n+\n+        if (policy.getId() == null) {\n+            throw new NotFoundException(\"Policy with null id\");\n+        }\n+\n+        SyncopeClientCompositeErrorException scce =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+\n+        try {\n+\n+            return policyDAO.save(policy);\n+\n+        } catch (InvalidEntityException e) {\n+            LOG.error(\"Policy {} cannot be crated\", policy);\n+\n+            SyncopeClientException sce = new SyncopeClientException(\n+                    SyncopeClientExceptionType.InvalidPolicy);\n+\n+            for (Map.Entry<Class, Set<EntityViolationType>> violation :\n+                    e.getViolations().entrySet()) {\n+\n+                for (EntityViolationType violationType : violation.getValue()) {\n+                    sce.addElement(violation.getClass().getSimpleName() + \": \"\n+                            + violationType);\n+                }\n+            }\n+\n+            scce.addException(sce);\n+            throw scce;\n+        }\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_LIST')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/{kind}/list\")\n+    public List<PolicyTO> listByType(\n+            final HttpServletResponse response,\n+            @PathVariable(\"kind\") final String kind) {\n+\n+        LOG.debug(\"Listing policies\");\n+        List<Policy> policies =\n+                policyDAO.find(PolicyType.valueOf(kind.toUpperCase()));\n+\n+        final List<PolicyTO> policyTOs = new ArrayList<PolicyTO>();\n+        PolicyTO policyTO;\n+\n+        for (Policy policy : policies) {\n+            switch (policy.getType()) {\n+                case PASSWORD:\n+                    policyTO = new PasswordPolicyTO();\n+                    ((PasswordPolicyTO) policyTO).setSpecification(\n+                            (PasswordPolicy) policy.getSpecification());\n+                    break;\n+                case ACCOUNT:\n+                    policyTO = new AccountPolicyTO();\n+                    ((AccountPolicyTO) policyTO).setSpecification(\n+                            (AccountPolicy) policy.getSpecification());\n+                    break;\n+                default:\n+                    policyTO = new SyncPolicyTO();\n+                    ((SyncPolicyTO) policyTO).setSpecification(\n+                            (SyncPolicy) policy.getSpecification());\n+            }\n+\n+            policyTO.setId(policy.getId());\n+            policyTO.setType(policy.getType());\n+            policyTOs.add(policyTO);\n+        }\n+\n+        return policyTOs;\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_READ')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/password/read\")\n+    public PasswordPolicyTO getPasswordPolicy(\n+            final HttpServletResponse response) throws NotFoundException {\n+\n+        LOG.debug(\"Reading password policy\");\n+        Policy policy = policyDAO.getPasswordPolicy();\n+\n+        if (policy == null) {\n+            throw new NotFoundException(\"No password policy found\");\n+        }\n+\n+        PasswordPolicyTO policyTO = new PasswordPolicyTO();\n+        policyTO.setId(policy.getId());\n+        policyTO.setSpecification((PasswordPolicy) policy.getSpecification());\n+        policyTO.setType(policy.getType());\n+\n+        return policyTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_READ')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/account/read\")\n+    public AccountPolicyTO getAccountPolicy(\n+            final HttpServletResponse response) throws NotFoundException {\n+\n+        LOG.debug(\"Reading account policy\");\n+        Policy policy = policyDAO.getAccountPolicy();\n+\n+        if (policy == null) {\n+            throw new NotFoundException(\"No account policy found\");\n+        }\n+\n+        AccountPolicyTO policyTO = new AccountPolicyTO();\n+        policyTO.setId(policy.getId());\n+        policyTO.setSpecification((AccountPolicy) policy.getSpecification());\n+        policyTO.setType(policy.getType());\n+\n+        return policyTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_READ')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/read/{id}\")\n+    public PolicyTO read(\n+            final HttpServletResponse response,\n+            @PathVariable(\"id\") final Long id)\n+            throws NotFoundException {\n+\n+        LOG.debug(\"Reading policy\");\n+        Policy policy = policyDAO.find(id);\n+\n+        if (policy == null) {\n+            throw new NotFoundException(\"Policy \" + id + \" not found\");\n+        }\n+\n+        final PolicyTO policyTO;\n+\n+        switch (policy.getType()) {\n+            case PASSWORD:\n+                policyTO = new PasswordPolicyTO();\n+                ((PasswordPolicyTO) policyTO).setSpecification(\n+                        (PasswordPolicy) policy.getSpecification());\n+                break;\n+            case ACCOUNT:\n+                policyTO = new AccountPolicyTO();\n+                ((AccountPolicyTO) policyTO).setSpecification(\n+                        (AccountPolicy) policy.getSpecification());\n+                break;\n+            default:\n+                policyTO = new SyncPolicyTO();\n+                ((SyncPolicyTO) policyTO).setSpecification(\n+                        (SyncPolicy) policy.getSpecification());\n+\n+        }\n+\n+        policyTO.setId(policy.getId());\n+        policyTO.setType(policy.getType());\n+\n+        return policyTO;\n+    }\n+\n+    @PreAuthorize(\"hasRole('POLICY_DELETE')\")\n+    @RequestMapping(method = RequestMethod.DELETE, value = \"/delete/{id}\")\n+    public void delete(\n+            final HttpServletResponse response,\n+            @PathVariable(\"id\") final Long id)\n+            throws NotFoundException {\n+\n+        LOG.debug(\"Delete policy\");\n+        policyDAO.delete(id);\n+    }\n+}"},{"sha":"f94795a85e21df40c8eea917bc59f9bb2b058fa1","filename":"core/src/main/java/org/syncope/core/rest/controller/UserController.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -226,7 +226,7 @@ public ModelAndView verifyPassword(@PathVariable(\"userId\") Long userId,\n         SyncopeUser user = getUserFromId(userId);\n \n         SyncopeUser passwordUser = new SyncopeUser();\n-        passwordUser.setPassword(password, user.getCipherAlgoritm());\n+        passwordUser.setPassword(password, user.getCipherAlgoritm(), 0);\n \n         return new ModelAndView().addObject(user.getPassword().\n                 equalsIgnoreCase(passwordUser.getPassword()));"},{"sha":"b18c0a3b436a6e92d537c8ec62f410bfddcf6ac9","filename":"core/src/main/java/org/syncope/core/rest/data/AbstractAttributableDataBinder.java","status":"modified","additions":4,"deletions":0,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FAbstractAttributableDataBinder.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -51,6 +51,7 @@\n import org.syncope.core.persistence.dao.DerAttrDAO;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n import org.syncope.core.persistence.dao.MembershipDAO;\n+import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.persistence.dao.ResourceDAO;\n import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n@@ -106,6 +107,9 @@ public abstract class AbstractAttributableDataBinder {\n     @Autowired\n     protected MembershipDAO membershipDAO;\n \n+    @Autowired\n+    protected PolicyDAO policyDAO;\n+\n     @Autowired\n     private JexlUtil jexlUtil;\n "},{"sha":"a69ceb4018475d150df566f50bfd1d7fbaf5364a","filename":"core/src/main/java/org/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":29,"deletions":2,"changes":31,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -35,6 +35,7 @@\n import org.syncope.core.persistence.beans.AbstractAttr;\n import org.syncope.core.persistence.beans.AbstractDerAttr;\n import org.syncope.core.persistence.beans.AbstractVirAttr;\n+import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.TargetResource;\n import org.syncope.core.persistence.beans.membership.Membership;\n import org.syncope.core.persistence.beans.membership.MAttr;\n@@ -44,6 +45,7 @@\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.propagation.ResourceOperations;\n import org.syncope.types.CipherAlgorithm;\n+import org.syncope.types.PasswordPolicy;\n import org.syncope.types.ResourceOperationType;\n import org.syncope.types.SyncopeClientExceptionType;\n \n@@ -108,14 +110,26 @@ public void create(final SyncopeUser user, final UserTO userTO)\n                 HttpStatus.BAD_REQUEST);\n \n         // password\n+        int passwordHistorySize = 0;\n+\n+        try {\n+            Policy policy = policyDAO.getPasswordPolicy();\n+            PasswordPolicy passwordPolicy = policy.getSpecification();\n+            passwordHistorySize = passwordPolicy.getHistoryLength();\n+        } catch (Throwable ignore) {\n+            // ignore exceptions\n+        }\n+\n         SyncopeClientException invalidPassword = new SyncopeClientException(\n                 SyncopeClientExceptionType.InvalidPassword);\n+\n         if (userTO.getPassword() == null || userTO.getPassword().isEmpty()) {\n             LOG.error(\"No password provided\");\n \n             invalidPassword.addElement(\"Null password\");\n         } else {\n-            user.setPassword(userTO.getPassword(), getCipherAlgoritm());\n+            user.setPassword(userTO.getPassword(), getCipherAlgoritm(),\n+                    passwordHistorySize);\n         }\n \n         if (!invalidPassword.getElements().isEmpty()) {\n@@ -164,8 +178,21 @@ public ResourceOperations update(SyncopeUser user, UserMod userMod)\n                 HttpStatus.BAD_REQUEST);\n \n         // password\n+\n         if (userMod.getPassword() != null) {\n-            user.setPassword(userMod.getPassword(), getCipherAlgoritm());\n+\n+            int passwordHistorySize = 0;\n+\n+            try {\n+                Policy policy = policyDAO.getPasswordPolicy();\n+                PasswordPolicy passwordPolicy = policy.getSpecification();\n+                passwordHistorySize = passwordPolicy.getHistoryLength();\n+            } catch (Throwable ignore) {\n+                // ignore exceptions\n+            }\n+\n+            user.setPassword(userMod.getPassword(), getCipherAlgoritm(),\n+                    passwordHistorySize);\n         }\n \n         // attributes, derived attributes, virtual attributes and resources"},{"sha":"9afa2538c86df9fd994ccf01692f8d5e1e7ae947","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -81,7 +81,7 @@ public Authentication authenticate(final Authentication authentication)\n         if (adminUser.equals(authentication.getPrincipal())) {\n             passwordUser.setPassword(\n                     authentication.getCredentials().toString(),\n-                    CipherAlgorithm.MD5);\n+                    CipherAlgorithm.MD5, 0);\n \n             authenticated = adminMD5Password.equalsIgnoreCase(\n                     passwordUser.getPassword());\n@@ -102,7 +102,7 @@ public Authentication authenticate(final Authentication authentication)\n \n             passwordUser.setPassword(\n                     authentication.getCredentials().toString(),\n-                    user.getCipherAlgoritm());\n+                    user.getCipherAlgoritm(), 0);\n \n             authenticated = user.getPassword().equalsIgnoreCase(\n                     passwordUser.getPassword());"},{"sha":"bebc76db45ae93f7fd8b34510edeef5e6e61c45f","filename":"core/src/main/resources/content.xml","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Fcontent.xml?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -79,5 +79,10 @@\n     <Entitlement name=\"TASK_DELETE\"/>\n     <Entitlement name=\"LOG_LIST\"/>\n     <Entitlement name=\"LOG_SET_LEVEL\"/>\n+    <Entitlement name=\"POLICY_CREATE\"/>\n+    <Entitlement name=\"POLICY_LIST\"/>\n+    <Entitlement name=\"POLICY_READ\"/>\n+    <Entitlement name=\"POLICY_UPDATE\"/>\n+    <Entitlement name=\"POLICY_DELETE\"/>\n \n </dataset>"},{"sha":"e0449b1204615da2910ff56a79160db3ff2011c4","filename":"core/src/test/java/org/syncope/core/persistence/dao/EntitlementTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FEntitlementTest.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -36,7 +36,7 @@ public final void findAll() {\n         List<Entitlement> list = entitlementDAO.findAll();\n         // 41 real entitlements + 8 role entitlements\n         assertEquals(\"did not get expected number of entitlements \",\n-                50, list.size());\n+                55, list.size());\n     }\n \n     @Test"},{"sha":"ff11dc215fea4fec1629c4e6a26af41e9e38820f","filename":"core/src/test/java/org/syncope/core/persistence/dao/PolicyTest.java","status":"modified","additions":57,"deletions":22,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyTest.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -18,12 +18,14 @@\n import static org.junit.Assert.*;\n import org.junit.Test;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.test.annotation.ExpectedException;\n import org.springframework.transaction.annotation.Transactional;\n import org.syncope.core.persistence.AbstractTest;\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.validation.entity.InvalidEntityException;\n import org.syncope.types.PolicyType;\n-import org.syncope.types.SyntaxPolicy;\n+import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.SyncPolicy;\n \n @Transactional\n public class PolicyTest extends AbstractTest {\n@@ -42,9 +44,13 @@ public final void findAll() {\n     public final void findById() {\n         Policy policy = policyDAO.find(1L);\n         assertNotNull(\"findById did not work\", policy);\n+    }\n \n-        assertEquals(\"invalid policy values\",\n-                8, ((SyntaxPolicy) policy.getSpecification()).getMaxLength());\n+    @Test\n+    public final void findByType() {\n+        List<Policy> policies = policyDAO.find(PolicyType.SYNC);\n+        assertNotNull(\"findById did not work\", policies);\n+        assertFalse(policies.isEmpty());\n     }\n \n     @Test\n@@ -55,41 +61,70 @@ public final void findPasswordPolicy() {\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n \n         assertEquals(\"invalid policy values\",\n-                8, ((SyntaxPolicy) policy.getSpecification()).getMinLength());\n+                8, ((PasswordPolicy) policy.getSpecification()).getMinLength());\n+    }\n+\n+    @Test\n+    @ExpectedException(value = InvalidEntityException.class)\n+    public final void saveInvalidPolicy() {\n+\n+        PasswordPolicy passwordPolicy = new PasswordPolicy();\n+        passwordPolicy.setMaxLength(8);\n+        passwordPolicy.setMinLength(6);\n+\n+        Policy policy = new Policy();\n+        policy.setSpecification(passwordPolicy);\n+        policy.setType(PolicyType.SYNC);\n+\n+        policyDAO.save(policy);\n     }\n \n     @Test\n-    public final void save() {\n+    @ExpectedException(value = InvalidEntityException.class)\n+    public final void saveSecondPasswordPolicy() {\n \n-        SyntaxPolicy syntaxPolicy = new SyntaxPolicy();\n-        syntaxPolicy.setMaxLength(8);\n-        syntaxPolicy.setMinLength(6);\n+        PasswordPolicy passwordPolicy = new PasswordPolicy();\n+        passwordPolicy.setMaxLength(8);\n+        passwordPolicy.setMinLength(6);\n \n         Policy policy = new Policy();\n-        policy.setSpecification(syntaxPolicy);\n+        policy.setSpecification(passwordPolicy);\n         policy.setType(PolicyType.PASSWORD);\n \n-        Throwable t = null;\n-        try {\n-            policy = policyDAO.save(policy);\n-        } catch (InvalidEntityException e) {\n-            t = e;\n-        }\n-        assertNotNull(t);\n+        policyDAO.save(policy);\n+    }\n \n-        Policy passwordPolicy = policyDAO.getPasswordPolicy();\n-        assertNotNull(passwordPolicy);\n-        passwordPolicy.setSpecification(policy.getSpecification());\n+    @Test\n+    public final void create() {\n+        Policy policy = new Policy();\n+        policy.setType(PolicyType.SYNC);\n+        policy.setSpecification(new SyncPolicy());\n+\n+        policy = policyDAO.save(policy);\n+\n+        assertNotNull(policy);\n+        assertEquals(PolicyType.SYNC, policy.getType());\n+    }\n+\n+    @Test\n+    public final void update() {\n+        PasswordPolicy specification = new PasswordPolicy();\n+        specification.setMaxLength(8);\n+        specification.setMinLength(6);\n+\n+        Policy policy = policyDAO.getPasswordPolicy();\n+        assertNotNull(policy);\n+        policy.setSpecification(specification);\n \n \n-        policy = policyDAO.save(passwordPolicy);\n+        policy = policyDAO.save(policy);\n \n         assertNotNull(policy);\n         assertEquals(PolicyType.PASSWORD, policy.getType());\n         assertEquals(\n-                ((SyntaxPolicy) policy.getSpecification()).getMaxLength(), 8);\n+                ((PasswordPolicy) policy.getSpecification()).getMaxLength(), 8);\n         assertEquals(\n-                ((SyntaxPolicy) policy.getSpecification()).getMinLength(), 6);\n+                ((PasswordPolicy) policy.getSpecification()).getMinLength(), 6);\n     }\n \n     @Test"},{"sha":"67faeab01d0e74937584d52f4835f53fbda6a4d2","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":3,"deletions":2,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -132,7 +132,7 @@ public final void findById() {\n     public final void save() {\n         SyncopeUser user = new SyncopeUser();\n \n-        user.setPassword(\"pass\", CipherAlgorithm.SHA256);\n+        user.setPassword(\"pass\", CipherAlgorithm.SHA256, 0);\n \n         Throwable t = null;\n         try {\n@@ -143,10 +143,11 @@ public final void save() {\n \n         assertNotNull(t);\n \n-        user.setPassword(\"password\", CipherAlgorithm.SHA256);\n+        user.setPassword(\"password\", CipherAlgorithm.SHA256, 1);\n \n         SyncopeUser actual = userDAO.save(user);\n         assertNotNull(\"expected save to work\", actual);\n+        assertEquals(1, actual.getPasswordHistory().size());\n     }\n \n     @Test"},{"sha":"b43bfd7f8ad30b4df96d090fa5996f50e989f31b","filename":"core/src/test/java/org/syncope/core/rest/PolicyTestITCase.java","status":"added","additions":146,"deletions":0,"changes":146,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FPolicyTestITCase.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -0,0 +1,146 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest;\n+\n+import java.util.Arrays;\n+import static org.junit.Assert.*;\n+\n+import java.util.List;\n+import org.junit.Test;\n+import org.springframework.test.annotation.ExpectedException;\n+import org.syncope.client.mod.PasswordPolicyMod;\n+import org.syncope.client.to.AccountPolicyTO;\n+import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n+import org.syncope.client.to.SyncPolicyTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.types.PasswordPolicy;\n+import org.syncope.types.PolicyType;\n+import org.syncope.types.SyncPolicy;\n+\n+public class PolicyTestITCase extends AbstractTest {\n+\n+    @Test\n+    public final void listByType() {\n+        List<SyncPolicyTO> policyTOs = Arrays.asList(restTemplate.getForObject(\n+                BASE_URL + \"policy/{kind}/list\",\n+                SyncPolicyTO[].class, PolicyType.SYNC.toString()));\n+\n+        assertNotNull(policyTOs);\n+        assertFalse(policyTOs.isEmpty());\n+    }\n+\n+    @Test\n+    public final void read() {\n+        SyncPolicyTO policyTO = restTemplate.getForObject(\n+                BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 1L);\n+\n+        assertNotNull(policyTO);\n+    }\n+\n+    @Test\n+    public final void getPasswordPolicy() {\n+        PasswordPolicyTO policyTO = restTemplate.getForObject(\n+                BASE_URL + \"policy/password/read\", PasswordPolicyTO.class);\n+\n+        assertNotNull(policyTO);\n+        assertEquals(PolicyType.PASSWORD, policyTO.getType());\n+        assertEquals(8,\n+                ((PasswordPolicy) policyTO.getSpecification()).getMinLength());\n+    }\n+\n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public final void getAccountPolicy() {\n+        AccountPolicyTO policyTO = restTemplate.getForObject(\n+                BASE_URL + \"policy/account/read\", AccountPolicyTO.class);\n+\n+        assertNull(policyTO);\n+    }\n+\n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public final void saveWithException() {\n+\n+        PasswordPolicyTO policy = new PasswordPolicyTO();\n+        policy.setSpecification(new PasswordPolicy());\n+        policy.setType(PolicyType.PASSWORD);\n+\n+        restTemplate.postForObject(\n+                BASE_URL + \"policy/password/create\",\n+                policy, PasswordPolicyTO.class);\n+    }\n+\n+    @Test\n+    public final void create() {\n+        SyncPolicyTO policy = new SyncPolicyTO();\n+        policy.setSpecification(new SyncPolicy());\n+        policy.setType(PolicyType.SYNC);\n+\n+        SyncPolicyTO policyTO = restTemplate.postForObject(\n+                BASE_URL + \"policy/sync/create\", policy, SyncPolicyTO.class);\n+\n+        assertNotNull(policyTO);\n+        assertEquals(PolicyType.SYNC, policyTO.getType());\n+    }\n+\n+    @Test\n+    public final void update() {\n+\n+        PolicyTO policyTO = restTemplate.getForObject(\n+                BASE_URL + \"policy/read/{id}\", PasswordPolicyTO.class, 2L);\n+\n+        assertNotNull(\"find to update did not work\", policyTO);\n+\n+        PasswordPolicy policy = ((PasswordPolicyTO) policyTO).getSpecification();\n+        policy.setMaxLength(22);\n+\n+        PasswordPolicyMod policyMod = new PasswordPolicyMod();\n+        policyMod.setId(policyTO.getId());\n+        policyMod.setType(PolicyType.PASSWORD);\n+        policyMod.setSpecification(policy);\n+\n+        policyTO = restTemplate.postForObject(\n+                BASE_URL + \"policy/password/update\",\n+                policyMod, PasswordPolicyTO.class);\n+\n+        assertNotNull(policyTO);\n+        assertEquals(PolicyType.PASSWORD, policyTO.getType());\n+        assertEquals(22,\n+                ((PasswordPolicyTO) policyTO).getSpecification().getMaxLength());\n+        assertEquals(8,\n+                ((PasswordPolicyTO) policyTO).getSpecification().getMinLength());\n+    }\n+\n+    @Test\n+    public final void delete() {\n+        final PolicyTO policyTO = restTemplate.getForObject(\n+                BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 3L);\n+\n+        assertNotNull(\"find to delete did not work\", policyTO);\n+\n+        restTemplate.delete(BASE_URL + \"policy/delete/{id}\", 3L);\n+\n+        Throwable t = null;\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"policy/read/{id}\", SyncPolicyTO.class, 3L);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            t = e;\n+        }\n+\n+        assertNotNull(t);\n+    }\n+}"},{"sha":"afd8a3dc7a388324c91e94ca325aaea195590fa2","filename":"core/src/test/java/org/syncope/core/rest/SchemaTestITCase.java","status":"modified","additions":4,"deletions":15,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FSchemaTestITCase.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -32,7 +32,7 @@ public class SchemaTestITCase extends AbstractTest {\n     public void create() {\n         SchemaTO schemaTO = new SchemaTO();\n         schemaTO.setName(\"testAttribute\");\n-        schemaTO.setMandatoryCondition(\"true\");\n+        schemaTO.setMandatoryCondition(\"false\");\n         schemaTO.setType(SchemaType.String);\n \n         SchemaTO newSchemaTO = restTemplate.postForObject(BASE_URL\n@@ -47,25 +47,14 @@ public void create() {\n     @Test\n     public void delete() {\n         restTemplate.delete(BASE_URL + \"schema/user/delete/firstname.json\");\n-        SchemaTO username = null;\n+        SchemaTO firstname = null;\n         try {\n-            username = restTemplate.getForObject(BASE_URL\n+            firstname = restTemplate.getForObject(BASE_URL\n                     + \"schema/user/read/firstname.json\", SchemaTO.class);\n         } catch (HttpClientErrorException e) {\n             assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n         }\n-        assertNull(username);\n-\n-        restTemplate.delete(BASE_URL\n-                + \"schema/membership/delete/subscriptionDate.json\");\n-        SchemaTO subscriptionDate = null;\n-        try {\n-            subscriptionDate = restTemplate.getForObject(BASE_URL\n-                    + \"schema/membership/read/firstname.json\", SchemaTO.class);\n-        } catch (HttpClientErrorException e) {\n-            assertEquals(HttpStatus.NOT_FOUND, e.getStatusCode());\n-        }\n-        assertNull(subscriptionDate);\n+        assertNull(firstname);\n     }\n \n     @Test"},{"sha":"85065c8d7d73aa9a7d935b6772221c171c368227","filename":"core/src/test/java/org/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -218,6 +218,6 @@ public void sync() {\n                 BASE_URL + \"user/count.json\", Integer.class);\n         assertNotNull(usersPost);\n \n-        assertTrue(usersPost == usersPre + 10);\n+        assertTrue(\"created users \" + usersPost, usersPost == usersPre + 10);\n     }\n }"},{"sha":"79814e685efa467d29ebe6e4ca1f77db19b21a92","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":24,"deletions":1,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -719,6 +719,29 @@ public final void updateInvalidPassword() {\n                 BASE_URL + \"user/update\", userMod, UserTO.class);\n     }\n \n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public final void updateSamePassword() {\n+        UserTO userTO = getSampleTO(\"updatesame@password.com\");\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/activate\",\n+                userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.setPassword(\"password\");\n+\n+        restTemplate.postForObject(\n+                BASE_URL + \"user/update\", userMod, UserTO.class);\n+    }\n+\n     @Test\n     public final void update() {\n         UserTO userTO = getSampleTO(\"g.h@t.com\");\n@@ -771,7 +794,7 @@ public final void update() {\n                 userMod, UserTO.class);\n \n         SyncopeUser passwordTestUser = new SyncopeUser();\n-        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5);\n+        passwordTestUser.setPassword(\"newPassword\", CipherAlgorithm.MD5, 0);\n         assertEquals(passwordTestUser.getPassword(), userTO.getPassword());\n \n         assertEquals(1, userTO.getMemberships().size());"},{"sha":"503a57f55e6839772b9977cb4de9561888351343","filename":"core/src/test/resources/content.xml","status":"modified","additions":9,"deletions":3,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/a54fe156c49a30fb622735619f5b9dd08ba1adb7/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=a54fe156c49a30fb622735619f5b9dd08ba1adb7","patch":"@@ -326,7 +326,7 @@\n \n     <SchemaMapping id=\"115\" destAttrName=\"name\"\n                    resource_name=\"ws-target-resource-nopropagation\"\n-                   sourceAttrName=\"firstname\" sourceMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n+                   sourceAttrName=\"username\" sourceMappingType=\"UserSchema\" mandatoryCondition=\"true\"\n                    accountid=\"1\" password=\"0\"/>\n                    \n     <SchemaMapping id=\"116\" destAttrName=\"id\"\n@@ -379,8 +379,9 @@\n     <RDerAttr id=\"1002\" derivedSchema_name=\"displayProperty\" owner_id=\"4\"/>\n \n     <!-- sample policies -->\n-    <Policy id=\"1\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyntaxPolicy%22%3E+%0A++%3Cvoid+property%3D%22maxLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E%0A+%3C/object%3E+%0A%3C/java%3E+%0A\" type=\"SCHEMA\"/>\n-    <Policy id=\"2\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyntaxPolicy%22%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+%0A\" type=\"PASSWORD\"/>\n+    <Policy id=\"1\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicy%22/%3E%0A%3C/java%3E+%0A\" type=\"SYNC\"/>\n+    <Policy id=\"2\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicy%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E1%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E8%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\" type=\"PASSWORD\"/>\n+    <Policy id=\"3\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicy%22/%3E%0A%3C/java%3E+%0A\" type=\"SYNC\"/>\n \n     <!-- Authentication and authorization -->\n     <Entitlement name=\"base\"/>\n@@ -425,6 +426,11 @@\n     <Entitlement name=\"TASK_DELETE\"/>\n     <Entitlement name=\"LOG_LIST\"/>\n     <Entitlement name=\"LOG_SET_LEVEL\"/>\n+    <Entitlement name=\"POLICY_CREATE\"/>\n+    <Entitlement name=\"POLICY_LIST\"/>\n+    <Entitlement name=\"POLICY_READ\"/>\n+    <Entitlement name=\"POLICY_UPDATE\"/>\n+    <Entitlement name=\"POLICY_DELETE\"/>\n     <Entitlement name=\"ROLE_1\"/>\n     <Entitlement name=\"ROLE_2\"/>\n     <Entitlement name=\"ROLE_3\"/>"}]}