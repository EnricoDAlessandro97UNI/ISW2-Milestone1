{"sha":"15f6d19dc49006be90bdce1b3859510a4a471066","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjE1ZjZkMTlkYzQ5MDA2YmU5MGJkY2UxYjM4NTk1MTBhNGE0NzEwNjY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-22T13:19:00Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-10-22T13:19:00Z"},"message":"[SYNCOPE-709] Fixing build with Java 1.7","tree":{"sha":"5766601e87927485b803a5863f5f8ec8ebd08d0f","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5766601e87927485b803a5863f5f8ec8ebd08d0f"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/15f6d19dc49006be90bdce1b3859510a4a471066","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15f6d19dc49006be90bdce1b3859510a4a471066","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/15f6d19dc49006be90bdce1b3859510a4a471066","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/15f6d19dc49006be90bdce1b3859510a4a471066/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"55fdc58c959fae949cf660d008b9c670f97e37ae","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/55fdc58c959fae949cf660d008b9c670f97e37ae","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/55fdc58c959fae949cf660d008b9c670f97e37ae"}],"stats":{"total":251,"additions":142,"deletions":109},"files":[{"sha":"46fcedc83c7aed14eaa97c91986ba62c86c676fc","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/entity/LinkingMappingItem.java","status":"added","additions":140,"deletions":0,"changes":140,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15f6d19dc49006be90bdce1b3859510a4a471066/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15f6d19dc49006be90bdce1b3859510a4a471066/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fentity%2FLinkingMappingItem.java?ref=15f6d19dc49006be90bdce1b3859510a4a471066","patch":"@@ -0,0 +1,140 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.persistence.api.entity;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import org.apache.syncope.common.lib.types.IntMappingType;\n+import org.apache.syncope.common.lib.types.MappingPurpose;\n+import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n+import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n+\n+/**\n+ * {@link MappingItem} implementation for usage within {@link VirSchema#asLinkingMappingItem()} implementations.\n+ */\n+public class LinkingMappingItem implements MappingItem {\n+\n+    private static final long serialVersionUID = 327455459536715529L;\n+\n+    private final VirSchema virSchema;\n+\n+    public LinkingMappingItem(final VirSchema virSchema) {\n+        this.virSchema = virSchema;\n+    }\n+\n+    @Override\n+    public Long getKey() {\n+        return -1L;\n+    }\n+\n+    @Override\n+    public Mapping getMapping() {\n+        return virSchema.getProvision().getMapping();\n+    }\n+\n+    @Override\n+    public void setMapping(final Mapping mapping) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public String getExtAttrName() {\n+        return virSchema.getExtAttrName();\n+    }\n+\n+    @Override\n+    public void setExtAttrName(final String extAttrName) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public String getIntAttrName() {\n+        return virSchema.getKey();\n+    }\n+\n+    @Override\n+    public void setIntAttrName(final String intAttrName) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public IntMappingType getIntMappingType() {\n+        switch (virSchema.getProvision().getAnyType().getKind()) {\n+            case ANY_OBJECT:\n+                return IntMappingType.AnyObjectVirtualSchema;\n+\n+            case GROUP:\n+                return IntMappingType.GroupVirtualSchema;\n+\n+            case USER:\n+            default:\n+                return IntMappingType.UserVirtualSchema;\n+        }\n+    }\n+\n+    @Override\n+    public void setIntMappingType(final IntMappingType intMappingType) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public String getMandatoryCondition() {\n+        return virSchema.getMandatoryCondition();\n+    }\n+\n+    @Override\n+    public void setMandatoryCondition(final String condition) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public MappingPurpose getPurpose() {\n+        return virSchema.isReadonly() ? MappingPurpose.SYNCHRONIZATION : MappingPurpose.BOTH;\n+    }\n+\n+    @Override\n+    public void setPurpose(final MappingPurpose purpose) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public boolean isConnObjectKey() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setConnObjectKey(final boolean connObjectKey) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public boolean isPassword() {\n+        return false;\n+    }\n+\n+    @Override\n+    public void setPassword(final boolean password) {\n+        // RO instance, nothing to do\n+    }\n+\n+    @Override\n+    public List<String> getMappingItemTransformerClassNames() {\n+        return Collections.emptyList();\n+    }\n+}"},{"sha":"0ee16065816429afc257c807eb84bc9446ea1ba9","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/entity/JPAVirSchema.java","status":"modified","additions":2,"deletions":109,"changes":111,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/15f6d19dc49006be90bdce1b3859510a4a471066/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/15f6d19dc49006be90bdce1b3859510a4a471066/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fentity%2FJPAVirSchema.java?ref=15f6d19dc49006be90bdce1b3859510a4a471066","patch":"@@ -18,8 +18,6 @@\n  */\n package org.apache.syncope.core.persistence.jpa.entity;\n \n-import java.util.Collections;\n-import java.util.List;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.Entity;\n@@ -32,11 +30,9 @@\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n-import org.apache.syncope.common.lib.types.IntMappingType;\n-import org.apache.syncope.common.lib.types.MappingPurpose;\n import org.apache.syncope.core.persistence.api.entity.AnyTypeClass;\n+import org.apache.syncope.core.persistence.api.entity.LinkingMappingItem;\n import org.apache.syncope.core.persistence.api.entity.VirSchema;\n-import org.apache.syncope.core.persistence.api.entity.resource.Mapping;\n import org.apache.syncope.core.persistence.api.entity.resource.MappingItem;\n import org.apache.syncope.core.persistence.api.entity.resource.Provision;\n import org.apache.syncope.core.persistence.jpa.entity.resource.JPAProvision;\n@@ -150,110 +146,7 @@ public void setExtAttrName(final String extAttrName) {\n \n     @Override\n     public MappingItem asLinkingMappingItem() {\n-        return new MappingItem() {\n-\n-            private static final long serialVersionUID = 327455459536715529L;\n-\n-            @Override\n-            public Long getKey() {\n-                return -1L;\n-            }\n-\n-            @Override\n-            public Mapping getMapping() {\n-                return getProvision().getMapping();\n-            }\n-\n-            @Override\n-            public void setMapping(final Mapping mapping) {\n-                // RO instance, nothing to do\n-            }\n-\n-            @Override\n-            public String getExtAttrName() {\n-                return JPAVirSchema.this.getExtAttrName();\n-            }\n-\n-            @Override\n-            public void setExtAttrName(final String extAttrName) {\n-                // RO instance, nothing to do\n-            }\n-\n-            @Override\n-            public String getIntAttrName() {\n-                return JPAVirSchema.this.getKey();\n-            }\n-\n-            @Override\n-            public void setIntAttrName(final String intAttrName) {\n-                // RO instance, nothing to do\n-            }\n-\n-            @Override\n-            public IntMappingType getIntMappingType() {\n-                switch (getProvision().getAnyType().getKind()) {\n-                    case ANY_OBJECT:\n-                        return IntMappingType.AnyObjectVirtualSchema;\n-\n-                    case GROUP:\n-                        return IntMappingType.GroupVirtualSchema;\n-\n-                    case USER:\n-                    default:\n-                        return IntMappingType.UserVirtualSchema;\n-                }\n-            }\n-\n-            @Override\n-            public void setIntMappingType(final IntMappingType intMappingType) {\n-                // RO instance, nothing to do\n-            }\n-\n-            @Override\n-            public String getMandatoryCondition() {\n-                return JPAVirSchema.this.getMandatoryCondition();\n-            }\n-\n-            @Override\n-            public void setMandatoryCondition(final String condition) {\n-                // RO instance, nothing to do\n-            }\n-\n-            @Override\n-            public MappingPurpose getPurpose() {\n-                return JPAVirSchema.this.isReadonly() ? MappingPurpose.SYNCHRONIZATION : MappingPurpose.BOTH;\n-            }\n-\n-            @Override\n-            public void setPurpose(final MappingPurpose purpose) {\n-                // RO instance, nothing to do\n-            }\n-\n-            @Override\n-            public boolean isConnObjectKey() {\n-                return false;\n-            }\n-\n-            @Override\n-            public void setConnObjectKey(final boolean connObjectKey) {\n-                // RO instance, nothing to do\n-            }\n-\n-            @Override\n-            public boolean isPassword() {\n-                return false;\n-            }\n-\n-            @Override\n-            public void setPassword(final boolean password) {\n-                // RO instance, nothing to do\n-            }\n-\n-            @Override\n-            public List<String> getMappingItemTransformerClassNames() {\n-                return Collections.emptyList();\n-            }\n-        };\n+        return new LinkingMappingItem(this);\n     }\n \n }"}]}