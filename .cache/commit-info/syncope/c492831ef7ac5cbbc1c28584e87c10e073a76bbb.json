{"sha":"c492831ef7ac5cbbc1c28584e87c10e073a76bbb","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmM0OTI4MzFlZjdhYzVjYmJjMWMyODU4NGU4N2MxMGUwNzNhNzZiYmI=","commit":{"author":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-11T08:16:40Z"},"committer":{"name":"Fabio Martelli","email":"fmartelli@apache.org","date":"2014-06-11T08:16:40Z"},"message":"[SYNCOPE-471] Provides matching rule management for push and sync actions. Still missing for more integration tests.\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1601824 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"e9d3a2329c13058af083cd65add1a61bbb9c17a9","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/e9d3a2329c13058af083cd65add1a61bbb9c17a9"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/c492831ef7ac5cbbc1c28584e87c10e073a76bbb","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c492831ef7ac5cbbc1c28584e87c10e073a76bbb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c492831ef7ac5cbbc1c28584e87c10e073a76bbb","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"9fcaab6afb4f253937f65c2b470ce37b775e6e24","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9fcaab6afb4f253937f65c2b470ce37b775e6e24","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9fcaab6afb4f253937f65c2b470ce37b775e6e24"}],"stats":{"total":1046,"additions":928,"deletions":118},"files":[{"sha":"5637934edd00f22a751a4f55c6567d52180947b2","filename":"common/src/main/java/org/apache/syncope/common/to/AbstractSyncTaskTO.java","status":"modified","additions":22,"deletions":0,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FAbstractSyncTaskTO.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -21,6 +21,8 @@\n import javax.xml.bind.annotation.XmlRootElement;\r\n import javax.xml.bind.annotation.XmlSeeAlso;\r\n import javax.xml.bind.annotation.XmlType;\r\n+import org.apache.syncope.common.types.MatchingRule;\r\n+import org.apache.syncope.common.types.UnmatchingRule;\r\n \r\n @XmlRootElement(name = \"abstractSyncTask\")\r\n @XmlType\r\n@@ -41,6 +43,10 @@ public class AbstractSyncTaskTO extends SchedTaskTO {\n \r\n     private String actionsClassName;\r\n \r\n+    private UnmatchingRule unmatchigRule;\r\n+\r\n+    private MatchingRule matchigRule;\r\n+\r\n     public String getResource() {\r\n         return resource;\r\n     }\r\n@@ -88,4 +94,20 @@ public String getActionsClassName() {\n     public void setActionsClassName(final String actionsClassName) {\r\n         this.actionsClassName = actionsClassName;\r\n     }\r\n+\r\n+    public UnmatchingRule getUnmatchigRule() {\r\n+        return unmatchigRule;\r\n+    }\r\n+\r\n+    public void setUnmatchigRule(final UnmatchingRule unmatchigRule) {\r\n+        this.unmatchigRule = unmatchigRule;\r\n+    }\r\n+\r\n+    public MatchingRule getMatchigRule() {\r\n+        return matchigRule;\r\n+    }\r\n+\r\n+    public void setMatchigRule(final MatchingRule matchigRule) {\r\n+        this.matchigRule = matchigRule;\r\n+    }\r\n }\r"},{"sha":"b6e975c47f268eda28c5f2032c032ec5da1fa99a","filename":"common/src/main/java/org/apache/syncope/common/types/MatchingRule.java","status":"added","additions":54,"deletions":0,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FMatchingRule.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -0,0 +1,54 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+/**\r\n+ * Sync/Push task matching rule.\r\n+ */\r\n+@XmlEnum\r\n+public enum MatchingRule {\r\n+\r\n+    /**\r\n+     * Do not perform any action.\r\n+     */\r\n+    IGNORE,\r\n+    /**\r\n+     * Update matching entity.\r\n+     */\r\n+    UPDATE,\r\n+    /**\r\n+     * Delete resource entity.\r\n+     */\r\n+    DEPROVISION,\r\n+    /**\r\n+     * Unlink resource and delete resource entity.\r\n+     */\r\n+    UNASSIGN,\r\n+    /**\r\n+     * Just unlink resource without performing any (de-)provisioning operation.\r\n+     */\r\n+    UNLINK,\r\n+    /**\r\n+     * Just link resource without performing any (de-)provisioning operation.\r\n+     */\r\n+    LINK\r\n+\r\n+}\r"},{"sha":"7ead774a65a44cbe3c04f9b3b49c683150983cc6","filename":"common/src/main/java/org/apache/syncope/common/types/ResourceOperation.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FResourceOperation.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -25,6 +25,7 @@ public enum ResourceOperation {\n \r\n     CREATE,\r\n     UPDATE,\r\n-    DELETE\r\n+    DELETE,\r\n+    NONE\r\n \r\n }\r"},{"sha":"145392698f1542d18e2a06e8f381d50792f402b3","filename":"common/src/main/java/org/apache/syncope/common/types/UnmatchingRule.java","status":"added","additions":47,"deletions":0,"changes":47,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUnmatchingRule.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUnmatchingRule.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FUnmatchingRule.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -0,0 +1,47 @@\n+/*\r\n+ * Licensed to the Apache Software Foundation (ASF) under one\r\n+ * or more contributor license agreements.  See the NOTICE file\r\n+ * distributed with this work for additional information\r\n+ * regarding copyright ownership.  The ASF licenses this file\r\n+ * to you under the Apache License, Version 2.0 (the\r\n+ * \"License\"); you may not use this file except in compliance\r\n+ * with the License.  You may obtain a copy of the License at\r\n+ *\r\n+ *   http://www.apache.org/licenses/LICENSE-2.0\r\n+ *\r\n+ * Unless required by applicable law or agreed to in writing,\r\n+ * software distributed under the License is distributed on an\r\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\n+ * KIND, either express or implied.  See the License for the\r\n+ * specific language governing permissions and limitations\r\n+ * under the License.\r\n+ */\r\n+package org.apache.syncope.common.types;\r\n+\r\n+import javax.xml.bind.annotation.XmlEnum;\r\n+\r\n+/**\r\n+ * Sync/Push task un-matching rule.\r\n+ */\r\n+@XmlEnum\r\n+public enum UnmatchingRule {\r\n+\r\n+    /**\r\n+     * Do not perform any action.\r\n+     */\r\n+    IGNORE,\r\n+    /**\r\n+     * Link the resource and create entity.\r\n+     */\r\n+    ASSIGN,\r\n+    /**\r\n+     * Create entity without linking the resource.\r\n+     */\r\n+    PROVISION,\r\n+    /**\r\n+     * Just unlink resource without performing any (de-)provisioning operation.\r\n+     * In case of sync task UNLINK and IGNORE will coincide.\r\n+     */\r\n+    UNLINK\r\n+\r\n+}\r"},{"sha":"47e92ac26c5081aa5f8d33932166fc188544f0ef","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractSyncTask.java","status":"modified","additions":28,"deletions":0,"changes":28,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractSyncTask.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -19,10 +19,14 @@\n package org.apache.syncope.core.persistence.beans;\n \n import javax.persistence.Basic;\n+import javax.persistence.EnumType;\n+import javax.persistence.Enumerated;\n import javax.persistence.ManyToOne;\n import javax.persistence.MappedSuperclass;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n+import org.apache.syncope.common.types.MatchingRule;\n+import org.apache.syncope.common.types.UnmatchingRule;\n import org.apache.syncope.core.persistence.validation.entity.SyncTaskCheck;\n \n @MappedSuperclass\n@@ -59,6 +63,18 @@ public abstract class AbstractSyncTask extends SchedTask {\n \n     private String actionsClassName;\n \n+    /**\n+     * @see UnmatchingRule\n+     */\n+    @Enumerated(EnumType.STRING)\n+    protected UnmatchingRule unmatchigRule;\n+\n+    /**\n+     * @see MatchingRule\n+     */\n+    @Enumerated(EnumType.STRING)\n+    protected MatchingRule matchigRule;\n+\n     public AbstractSyncTask(final String jobClassName) {\n         super();\n         super.setJobClassName(jobClassName);\n@@ -116,4 +132,16 @@ public String getActionsClassName() {\n     public void setActionsClassName(final String actionsClassName) {\n         this.actionsClassName = actionsClassName;\n     }\n+\n+    public abstract UnmatchingRule getUnmatchigRule();\n+\n+    public void setUnmatchigRule(final UnmatchingRule unmatchigRule) {\n+        this.unmatchigRule = unmatchigRule;\n+    }\n+\n+    public abstract MatchingRule getMatchigRule();\n+\n+    public void setMatchigRule(final MatchingRule matchigRule) {\n+        this.matchigRule = matchigRule;\n+    }\n }"},{"sha":"7ed6234b57545cd0ca7dd613769072c3812da36b","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/PushTask.java","status":"modified","additions":20,"deletions":1,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FPushTask.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -19,12 +19,21 @@\n package org.apache.syncope.core.persistence.beans;\n \n import javax.persistence.Entity;\n+import javax.persistence.Transient;\n+import org.apache.syncope.common.types.MatchingRule;\n+import org.apache.syncope.common.types.UnmatchingRule;\n \n @Entity\n public class PushTask extends AbstractSyncTask {\n \n     private static final long serialVersionUID = -4141057723006682564L;\n \n+    @Transient\n+    private static UnmatchingRule DEF_UNMATCHIG_RULE = UnmatchingRule.ASSIGN;\n+\n+    @Transient\n+    private static MatchingRule DEF_MATCHIG_RULE = MatchingRule.UPDATE;\n+\n     private String userFilter;\n \n     private String roleFilter;\n@@ -48,7 +57,17 @@ public String getRoleFilter() {\n         return roleFilter;\n     }\n \n-    public void setRoleFilter(String roleFilter) {\n+    public void setRoleFilter(final String roleFilter) {\n         this.roleFilter = roleFilter;\n     }\n+\n+    @Override\n+    public UnmatchingRule getUnmatchigRule() {\n+        return this.unmatchigRule == null ? DEF_UNMATCHIG_RULE : unmatchigRule;\n+    }\n+\n+    @Override\n+    public MatchingRule getMatchigRule() {\n+        return this.matchigRule == null ? DEF_MATCHIG_RULE : this.matchigRule;\n+    }\n }"},{"sha":"fb2f7d69170b2ea5c863585813eaa3db75e28427","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":19,"deletions":0,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -21,10 +21,13 @@\n import javax.persistence.Basic;\n import javax.persistence.Entity;\n import javax.persistence.Lob;\n+import javax.persistence.Transient;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n+import org.apache.syncope.common.types.MatchingRule;\n+import org.apache.syncope.common.types.UnmatchingRule;\n import org.apache.syncope.core.sync.impl.SyncJob;\n import org.apache.syncope.core.util.XMLSerializer;\n \n@@ -33,6 +36,12 @@ public class SyncTask extends AbstractSyncTask {\n \n     private static final long serialVersionUID = -4141057723006682563L;\n \n+    @Transient\n+    private static UnmatchingRule DEF_UNMATCHIG_RULE = UnmatchingRule.PROVISION;\n+\n+    @Transient\n+    private static MatchingRule DEF_MATCHIG_RULE = MatchingRule.UPDATE;\n+\n     @Lob\n     private String userTemplate;\n \n@@ -78,4 +87,14 @@ public boolean isFullReconciliation() {\n     public void setFullReconciliation(final boolean fullReconciliation) {\n         this.fullReconciliation = getBooleanAsInteger(fullReconciliation);\n     }\n+\n+    @Override\n+    public UnmatchingRule getUnmatchigRule() {\n+        return this.unmatchigRule == null ? DEF_UNMATCHIG_RULE : unmatchigRule;\n+    }\n+\n+    @Override\n+    public MatchingRule getMatchigRule() {\n+        return this.matchigRule == null ? DEF_MATCHIG_RULE : this.matchigRule;\n+    }\n }"},{"sha":"8549d6b49ca889365223ea06d818d6137f075898","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/AbstractAttributableController.java","status":"added","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractAttributableController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractAttributableController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FAbstractAttributableController.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -0,0 +1,45 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one\n+ * or more contributor license agreements.  See the NOTICE file\n+ * distributed with this work for additional information\n+ * regarding copyright ownership.  The ASF licenses this file\n+ * to you under the Apache License, Version 2.0 (the\n+ * \"License\"); you may not use this file except in compliance\n+ * with the License.  You may obtain a copy of the License at\n+ *\n+ *   http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing,\n+ * software distributed under the License is distributed on an\n+ * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+ * KIND, either express or implied.  See the License for the\n+ * specific language governing permissions and limitations\n+ * under the License.\n+ */\n+package org.apache.syncope.core.rest.controller;\n+\n+import java.util.List;\n+import org.apache.syncope.common.mod.AbstractAttributableMod;\n+import org.apache.syncope.common.to.AbstractAttributableTO;\n+import org.apache.syncope.core.persistence.dao.search.OrderByClause;\n+import org.apache.syncope.core.persistence.dao.search.SearchCond;\n+\n+public abstract class AbstractAttributableController<T extends AbstractAttributableTO, V extends AbstractAttributableMod>\n+        extends AbstractResourceAssociator<T> {\n+\n+    public abstract T read(Long id);\n+\n+    public abstract int count();\n+\n+    public abstract T create(T attributableTO);\n+\n+    public abstract T update(V attributableMod);\n+\n+    public abstract T delete(Long id);\n+\n+    public abstract List<T> list(int page, int size, List<OrderByClause> orderBy);\n+\n+    public abstract List<T> search(SearchCond searchCondition, int page, int size, List<OrderByClause> orderBy);\n+\n+    public abstract int searchCount(SearchCond searchCondition);\n+}"},{"sha":"3439c77a5dc339f46deb0348db42cc8363c0df59","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/RoleController.java","status":"modified","additions":9,"deletions":1,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -66,7 +66,7 @@\n  * @see AbstractTransactionalController\n  */\n @Component\n-public class RoleController extends AbstractResourceAssociator<RoleTO> {\n+public class RoleController extends AbstractAttributableController<RoleTO, RoleMod> {\n \n     @Autowired\n     protected RoleDAO roleDAO;\n@@ -97,6 +97,7 @@ public class RoleController extends AbstractResourceAssociator<RoleTO> {\n \n     @PreAuthorize(\"hasAnyRole('ROLE_READ', T(org.apache.syncope.common.SyncopeConstants).ANONYMOUS_ENTITLEMENT)\")\n     @Transactional(readOnly = true)\n+    @Override\n     public RoleTO read(final Long roleId) {\n         SyncopeRole role;\n         // bypass role entitlements check\n@@ -177,12 +178,14 @@ public List<RoleTO> children(final Long roleId) {\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n     public int count() {\n         return roleDAO.count();\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n+    @Override\n     public List<RoleTO> list(final int page, final int size, final List<OrderByClause> orderBy) {\n         List<SyncopeRole> roles = roleDAO.findAll(page, size, orderBy);\n \n@@ -196,13 +199,15 @@ public List<RoleTO> list(final int page, final int size, final List<OrderByClaus\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n     public int searchCount(final SearchCond searchCondition) {\n         final Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n         return searchDAO.count(adminRoleIds, searchCondition, AttributableUtil.getInstance(AttributableType.ROLE));\n     }\n \n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n     public List<RoleTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy) {\n \n@@ -219,6 +224,7 @@ public List<RoleTO> search(final SearchCond searchCondition, final int page, fin\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_CREATE')\")\n+    @Override\n     public RoleTO create(final RoleTO roleTO) {\n         // Check that this operation is allowed to be performed by caller\n         Set<Long> allowedRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n@@ -253,6 +259,7 @@ public RoleTO create(final RoleTO roleTO) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_UPDATE')\")\n+    @Override\n     public RoleTO update(final RoleMod roleMod) {\n         // Check that this operation is allowed to be performed by caller\n         binder.getRoleFromId(roleMod.getId());\n@@ -282,6 +289,7 @@ public RoleTO update(final RoleMod roleMod) {\n     }\n \n     @PreAuthorize(\"hasRole('ROLE_DELETE')\")\n+    @Override\n     public RoleTO delete(final Long roleId) {\n         List<SyncopeRole> ownedRoles = roleDAO.findOwnedByRole(roleId);\n         if (!ownedRoles.isEmpty()) {"},{"sha":"63ca04186d5d1371ae7f3182ffcc746e3469b16f","filename":"core/src/main/java/org/apache/syncope/core/rest/controller/UserController.java","status":"modified","additions":9,"deletions":2,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FUserController.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -38,7 +38,6 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ClientExceptionType;\n import org.apache.syncope.common.SyncopeClientException;\n-import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.core.persistence.beans.PropagationTask;\n import org.apache.syncope.core.persistence.beans.role.SyncopeRole;\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n@@ -71,7 +70,7 @@\n  * @see AbstractTransactionalController\n  */\n @Component\n-public class UserController extends AbstractResourceAssociator<UserTO> {\n+public class UserController extends AbstractAttributableController<UserTO, UserMod> {\n \n     @Autowired\n     protected UserDAO userDAO;\n@@ -116,19 +115,22 @@ public Long getUserId(final String username) {\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n     public int count() {\n         return userDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()));\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n     public int searchCount(final SearchCond searchCondition) {\n         return searchDAO.count(EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames()),\n                 searchCondition, AttributableUtil.getInstance(AttributableType.USER));\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true, rollbackFor = { Throwable.class })\n+    @Override\n     public List<UserTO> list(final int page, final int size, final List<OrderByClause> orderBy) {\n         Set<Long> adminRoleIds = EntitlementUtil.getRoleIds(EntitlementUtil.getOwnedEntitlementNames());\n \n@@ -150,12 +152,14 @@ public UserTO readSelf() {\n \n     @PreAuthorize(\"hasRole('USER_READ')\")\n     @Transactional(readOnly = true)\n+    @Override\n     public UserTO read(final Long userId) {\n         return binder.getUserTO(userId);\n     }\n \n     @PreAuthorize(\"hasRole('USER_LIST')\")\n     @Transactional(readOnly = true)\n+    @Override\n     public List<UserTO> search(final SearchCond searchCondition, final int page, final int size,\n             final List<OrderByClause> orderBy) {\n \n@@ -183,6 +187,7 @@ public UserTO createSelf(final UserTO userTO) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_CREATE')\")\n+    @Override\n     public UserTO create(final UserTO userTO) {\n         Set<Long> requestRoleIds = new HashSet<Long>(userTO.getMemberships().size());\n         for (MembershipTO membership : userTO.getMemberships()) {\n@@ -236,6 +241,7 @@ public UserTO updateSelf(final UserMod userMod) {\n     }\n \n     @PreAuthorize(\"hasRole('USER_UPDATE')\")\n+    @Override\n     public UserTO update(final UserMod userMod) {\n         // AttributableMod transformation (if configured)\n         UserMod actual = attrTransformer.transform(userMod);\n@@ -332,6 +338,7 @@ public UserTO deleteSelf() {\n     }\n \n     @PreAuthorize(\"hasRole('USER_DELETE')\")\n+    @Override\n     public UserTO delete(final Long userId) {\n         List<SyncopeRole> ownedRoles = roleDAO.findOwnedByUser(userId);\n         if (!ownedRoles.isEmpty()) {"},{"sha":"e6588e17b6bac96cc0b01681a68f73d0e65b2469","filename":"core/src/main/java/org/apache/syncope/core/rest/data/TaskDataBinder.java","status":"modified","additions":3,"deletions":1,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FTaskDataBinder.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -103,6 +103,7 @@ private void fill(final AbstractSyncTask task, final AbstractSyncTaskTO taskTO)\n             final PushTaskTO pushTaskTO = (PushTaskTO) taskTO;\n \n             pushTask.setUserFilter(pushTaskTO.getUserFilter());\n+            pushTask.setRoleFilter(pushTaskTO.getRoleFilter());\n \n         } else if (task instanceof SyncTask && taskTO instanceof SyncTaskTO) {\n             final SyncTask syncTask = (SyncTask) task;\n@@ -152,7 +153,8 @@ private void fill(final AbstractSyncTask task, final AbstractSyncTaskTO taskTO)\n         task.setPerformUpdate(taskTO.isPerformUpdate());\n         task.setPerformDelete(taskTO.isPerformDelete());\n         task.setSyncStatus(taskTO.isSyncStatus());\n-\n+        task.setMatchigRule(taskTO.getMatchigRule());\n+        task.setUnmatchigRule(taskTO.getUnmatchigRule());\n         task.setActionsClassName(taskTO.getActionsClassName());\n     }\n "},{"sha":"6916f5b367746cdc3c9aaa91a94a15eeed3df639","filename":"core/src/main/java/org/apache/syncope/core/sync/AbstractSyncActions.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FAbstractSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FAbstractSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FAbstractSyncActions.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -22,7 +22,7 @@\n import org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler;\n import org.quartz.JobExecutionException;\n \n-public interface AbstractSyncActions<T extends AbstractSyncopeResultHandler> {\n+public interface AbstractSyncActions<T extends AbstractSyncopeResultHandler<?, ?>> {\n \n     /**\n      * Action to be executed before to start the synchronization task execution."},{"sha":"efb38fdefe3f24c8000405c05cd78ea361c4c7ba","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultPushActions.java","status":"modified","additions":49,"deletions":1,"changes":50,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultPushActions.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -37,7 +37,7 @@ public void beforeAll(final AbstractSyncopeResultHandler<?, ?> handler) throws J\n     }\n \n     @Override\n-    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeCreate(\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeAssign(\n             final AbstractSyncopeResultHandler<?, ?> handler,\n             final Map.Entry<String, Set<Attribute>> delta,\n             final T subject) throws JobExecutionException {\n@@ -61,6 +61,54 @@ public <T extends AbstractAttributable> void after(\n             SyncResult result) throws JobExecutionException {\n     }\n \n+    @Override\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeProvision(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException {\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeLink(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException {\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUnlink(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException {\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUnassign(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException {\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeDeprovision(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException {\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeDelete(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException {\n+        return delta;\n+    }\n+\n     @Override\n     public void afterAll(\n             final AbstractSyncopeResultHandler<?, ?> handler,"},{"sha":"26197d18d4ca68899fe8d8a0cff28fc9285e93fe","filename":"core/src/main/java/org/apache/syncope/core/sync/DefaultSyncActions.java","status":"modified","additions":45,"deletions":0,"changes":45,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FDefaultSyncActions.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -72,6 +72,51 @@ public <T extends AbstractAttributableTO> void after(\n             final SyncResult result) throws JobExecutionException {\n     }\n \n+    @Override\n+    public <T extends AbstractAttributableTO> SyncDelta beforeAssign(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n+\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> SyncDelta beforeUnassign(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n+\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> SyncDelta beforeDeprovision(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n+\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> SyncDelta beforeUnlink(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n+\n+        return delta;\n+    }\n+\n+    @Override\n+    public <T extends AbstractAttributableTO> SyncDelta beforeLink(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException {\n+\n+        return delta;\n+    }\n+\n     @Override\n     public void afterAll(\n             final AbstractSyncopeResultHandler<?, ?> handler,"},{"sha":"37c4a880f7f96b9efb158995f0ffe355f4759eaf","filename":"core/src/main/java/org/apache/syncope/core/sync/PushActions.java","status":"modified","additions":87,"deletions":3,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FPushActions.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -31,21 +31,35 @@\n public interface PushActions extends AbstractSyncActions<AbstractSyncopeResultHandler<?, ?>> {\n \n     /**\n-     * Action to be executed before to create a synchronized user locally.\n+     * Action to be executed before to assign (link & provision) a synchronized user to the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n      * @param subject user / role to be created.\n      * @return info to be pushed out (accountId, attributes).\n      * @throws JobExecutionException in case of generic failure\n      */\n-    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeCreate(\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeAssign(\n             final AbstractSyncopeResultHandler<?, ?> handler,\n             final Map.Entry<String, Set<Attribute>> delta,\n             final T subject) throws JobExecutionException;\n \n     /**\n-     * Action to be executed before to update a synchronized user locally.\n+     * Action to be executed before to provision a synchronized user to the resource.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta info to be pushed out (accountId, attributes).\n+     * @param subject user / role to be created.\n+     * @return info to be pushed out (accountId, attributes).\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeProvision(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before to update a synchronized user on the resource.\n      *\n      * @param handler synchronization handler being executed.\n      * @param delta info to be pushed out (accountId, attributes).\n@@ -58,6 +72,76 @@ <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUpdate(\n             final Map.Entry<String, Set<Attribute>> delta,\n             final T subject) throws JobExecutionException;\n \n+    /**\n+     * Action to be executed before to link a synchronized user to the resource.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta info to be pushed out (accountId, attributes).\n+     * @param subject user / role to be created.\n+     * @return info to be pushed out (accountId, attributes).\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeLink(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before to unlink a synchronized user from the resource.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta info to be pushed out (accountId, attributes).\n+     * @param subject user / role to be created.\n+     * @return info to be pushed out (accountId, attributes).\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUnlink(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before to unassign a synchronized user from the resource.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta info to be pushed out (accountId, attributes).\n+     * @param subject user / role to be created.\n+     * @return info to be pushed out (accountId, attributes).\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeUnassign(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before to unassign a synchronized user from the resource.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta info to be pushed out (accountId, attributes).\n+     * @param subject user / role to be created.\n+     * @return info to be pushed out (accountId, attributes).\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeDeprovision(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before delete a synchronized user locally and from the resource.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta info to be pushed out (accountId, attributes).\n+     * @param subject user / role to be created.\n+     * @return info to be pushed out (accountId, attributes).\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> beforeDelete(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final Map.Entry<String, Set<Attribute>> delta,\n+            final T subject) throws JobExecutionException;\n+\n     /**\n      * Action to be executed after each local user synchronization.\n      *"},{"sha":"633e96f1e41864d2125b37f479d2794e00a92ee9","filename":"core/src/main/java/org/apache/syncope/core/sync/SyncActions.java","status":"modified","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2FSyncActions.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -43,6 +43,76 @@ <T extends AbstractAttributableTO> SyncDelta beforeCreate(\n             final SyncDelta delta,\n             final T subject) throws JobExecutionException;\n \n+    /**\n+     * Action to be executed before creating (and linking to the resource) a synchronized user locally.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta retrieved synchronization information\n+     * @param subject user / role to be created\n+     * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributableTO> SyncDelta beforeAssign(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before unlinking resource from the synchronized user and de-provisioning.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta retrieved synchronization information\n+     * @param subject user / role to be created\n+     * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributableTO> SyncDelta beforeUnassign(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before de-provisioning action only.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta retrieved synchronization information\n+     * @param subject user / role to be created\n+     * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributableTO> SyncDelta beforeDeprovision(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before unlinking resource from the synchronized user.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta retrieved synchronization information\n+     * @param subject user / role to be created\n+     * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributableTO> SyncDelta beforeUnlink(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException;\n+\n+    /**\n+     * Action to be executed before linking resource to the synchronized user.\n+     *\n+     * @param handler synchronization handler being executed.\n+     * @param delta retrieved synchronization information\n+     * @param subject user / role to be created\n+     * @return synchronization information used for user status evaluation and to be passed to the 'after' method.\n+     * @throws JobExecutionException in case of generic failure\n+     */\n+    <T extends AbstractAttributableTO> SyncDelta beforeLink(\n+            final AbstractSyncopeResultHandler<?, ?> handler,\n+            final SyncDelta delta,\n+            final T subject) throws JobExecutionException;\n+\n     /**\n      * Action to be executed before to update a synchronized user locally.\n      *"},{"sha":"f5141d6d6f4bf34ddf837f0cffe1ca67145845f6","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/AbstractSyncopeResultHandler.java","status":"modified","additions":23,"deletions":0,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FAbstractSyncopeResultHandler.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -25,10 +25,14 @@\n import org.apache.syncope.core.notification.NotificationManager;\n import org.apache.syncope.core.persistence.beans.AbstractSyncTask;\n import org.apache.syncope.core.propagation.Connector;\n+import org.apache.syncope.core.rest.controller.RoleController;\n+import org.apache.syncope.core.rest.controller.UserController;\n import org.apache.syncope.core.rest.data.RoleDataBinder;\n import org.apache.syncope.core.rest.data.UserDataBinder;\n import org.apache.syncope.core.sync.AbstractSyncActions;\n import org.apache.syncope.core.sync.SyncResult;\n+import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n+import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.factory.annotation.Autowired;\n@@ -40,6 +44,13 @@\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(AbstractSyncopeResultHandler.class);\n \n+    \n+    @Autowired\n+    protected UserController userController;\n+\n+    @Autowired\n+    protected RoleController roleController;\n+    \n     /**\n      * User data binder.\n      */\n@@ -70,6 +81,18 @@\n     @Autowired\n     protected AuditManager auditManager;\n \n+    /**\n+     * User workflow adapter.\n+     */\n+    @Autowired\n+    protected UserWorkflowAdapter uwfAdapter;\n+\n+    /**\n+     * Role workflow adapter.\n+     */\n+    @Autowired\n+    protected RoleWorkflowAdapter rwfAdapter;\n+\n     /**\n      * Syncing connector.\n      */"},{"sha":"1d92dfbf34a947680b488640187655c4d902685c","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopePushResultHandler.java","status":"modified","additions":81,"deletions":20,"changes":101,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopePushResultHandler.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -35,6 +35,7 @@\n import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n import org.apache.syncope.core.propagation.TimeoutException;\n import org.apache.syncope.core.propagation.impl.AbstractPropagationTaskExecutor;\n+import org.apache.syncope.core.rest.controller.AbstractAttributableController;\n import org.apache.syncope.core.sync.PushActions;\n import org.apache.syncope.core.sync.SyncResult;\n import org.apache.syncope.core.util.AttributableUtil;\n@@ -86,6 +87,7 @@ protected final void doHandle(final AbstractAttributable attributable)\n         result.setId(attributable.getId());\n         result.setSubjectType(attrUtil.getType());\n \n+        final AbstractAttributableController<?, ?> controller;\n         final AbstractAttributable toBeHandled;\n         final Boolean enabled;\n \n@@ -95,10 +97,12 @@ protected final void doHandle(final AbstractAttributable attributable)\n             enabled = getSyncTask().isSyncStatus()\n                     ? ((SyncopeUser) toBeHandled).isSuspended() ? Boolean.FALSE : Boolean.TRUE\n                     : null;\n+            controller = userController;\n         } else {\n             toBeHandled = roleDataBinder.getRoleFromId(attributable.getId());\n             result.setName(((SyncopeRole) toBeHandled).getName());\n             enabled = null;\n+            controller = roleController;\n         }\n \n         LOG.debug(\"Propagating {} with ID {} towards {}\",\n@@ -109,6 +113,8 @@ protected final void doHandle(final AbstractAttributable attributable)\n         ConnectorObject beforeObj = null;\n         Map.Entry<String, Set<Attribute>> values = null;\n \n+        String operation = null;\n+\n         try {\n             values = MappingUtil.prepareAttributes(\n                     attrUtil, // attributable util\n@@ -129,26 +135,84 @@ protected final void doHandle(final AbstractAttributable attributable)\n             beforeObj = getRemoteObject(oclass, values.getKey(), getSyncTask().getResource().getName());\n \n             if (beforeObj == null) {\n-                result.setOperation(ResourceOperation.CREATE);\n-                actions.beforeCreate(this, values, toBeHandled);\n+                operation = getSyncTask().getUnmatchigRule().name().toLowerCase();\n+                switch (getSyncTask().getUnmatchigRule()) {\n+                    case ASSIGN:\n+                        result.setOperation(ResourceOperation.CREATE);\n+                        actions.beforeAssign(this, values, toBeHandled);\n+                        controller.assign(\n+                                toBeHandled.getId(),\n+                                Collections.singleton(getSyncTask().getResource().getName()), true, null);\n+                        break;\n+                    case PROVISION:\n+                        result.setOperation(ResourceOperation.CREATE);\n+                        actions.beforeProvision(this, values, toBeHandled);\n+                        controller.provision(\n+                                toBeHandled.getId(),\n+                                Collections.singleton(getSyncTask().getResource().getName()), true, null);\n+                        break;\n+                    case UNLINK:\n+                        result.setOperation(ResourceOperation.NONE);\n+                        actions.beforeUnlink(this, values, toBeHandled);\n+                        controller.unlink(\n+                                toBeHandled.getId(), Collections.singleton(getSyncTask().getResource().getName()));\n+                        break;\n+                    default:\n+                    // do nothing\n+                }\n+\n             } else {\n-                result.setOperation(ResourceOperation.UPDATE);\n-                actions.beforeUpdate(this, values, toBeHandled);\n-            }\n+                operation = getSyncTask().getMatchigRule().name().toLowerCase();\n+                switch (getSyncTask().getMatchigRule()) {\n+                    case UPDATE:\n+                        result.setOperation(ResourceOperation.UPDATE);\n+                        actions.beforeUpdate(this, values, toBeHandled);\n \n-            AbstractPropagationTaskExecutor.createOrUpdate(\n-                    oclass,\n-                    values.getKey(),\n-                    values.getValue(),\n-                    getSyncTask().getResource().getName(),\n-                    getSyncTask().getResource().getPropagationMode(),\n-                    beforeObj,\n-                    connector,\n-                    new HashSet<String>(),\n-                    connObjectUtil);\n+                        AbstractPropagationTaskExecutor.createOrUpdate(\n+                                oclass,\n+                                values.getKey(),\n+                                values.getValue(),\n+                                getSyncTask().getResource().getName(),\n+                                getSyncTask().getResource().getPropagationMode(),\n+                                beforeObj,\n+                                connector,\n+                                new HashSet<String>(),\n+                                connObjectUtil);\n+                        break;\n+                    case DEPROVISION:\n+                        result.setOperation(ResourceOperation.DELETE);\n+                        actions.beforeDeprovision(this, values, toBeHandled);\n+                        controller.deprovision(\n+                                toBeHandled.getId(), Collections.singleton(getSyncTask().getResource().getName()));\n+                        break;\n+                    case UNASSIGN:\n+                        result.setOperation(ResourceOperation.DELETE);\n+                        actions.beforeUnassign(this, values, toBeHandled);\n+                        controller.unlink(\n+                                toBeHandled.getId(), Collections.singleton(getSyncTask().getResource().getName()));\n+                        controller.deprovision(\n+                                toBeHandled.getId(), Collections.singleton(getSyncTask().getResource().getName()));\n+                        break;\n+                    case LINK:\n+                        result.setOperation(ResourceOperation.NONE);\n+                        actions.beforeLink(this, values, toBeHandled);\n+                        controller.link(\n+                                toBeHandled.getId(), Collections.singleton(getSyncTask().getResource().getName()));\n+                        break;\n+                    case UNLINK:\n+                        result.setOperation(ResourceOperation.NONE);\n+                        actions.beforeUnlink(this, values, toBeHandled);\n+                        controller.unlink(\n+                                toBeHandled.getId(), Collections.singleton(getSyncTask().getResource().getName()));\n+                        break;\n+                    default:\n+                    // do nothing\n+                }\n+            }\n \n             result.setStatus(SyncResult.Status.SUCCESS);\n             resultStatus = AuditElements.Result.SUCCESS;\n+            output = getRemoteObject(oclass, values.getKey(), getSyncTask().getResource().getName());\n         } catch (Exception e) {\n             result.setStatus(SyncResult.Status.FAILURE);\n             result.setMessage(e.getMessage());\n@@ -158,24 +222,21 @@ protected final void doHandle(final AbstractAttributable attributable)\n             LOG.warn(\"Error pushing {} towards {}\", toBeHandled, getSyncTask().getResource(), e);\n             throw new JobExecutionException(e);\n         } finally {\n-\n             actions.after(this, values, toBeHandled, result);\n-\n             notificationManager.createTasks(\n                     AuditElements.EventCategoryType.PUSH,\n                     AttributableType.USER.name().toLowerCase(),\n                     syncTask.getResource().getName(),\n-                    result.getOperation() == null ? null : result.getOperation().name().toLowerCase(),\n+                    operation,\n                     resultStatus,\n                     beforeObj,\n                     output,\n                     toBeHandled);\n-\n             auditManager.audit(\n                     AuditElements.EventCategoryType.PUSH,\n                     AttributableType.USER.name().toLowerCase(),\n                     syncTask.getResource().getName(),\n-                    result.getOperation() == null ? null : result.getOperation().name().toLowerCase(),\n+                    operation,\n                     resultStatus,\n                     beforeObj,\n                     output,"},{"sha":"bd6fe1a0665453a1b873f784c9252f16eea3bce1","filename":"core/src/main/java/org/apache/syncope/core/sync/impl/SyncopeSyncResultHandler.java","status":"modified","additions":297,"deletions":76,"changes":373,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsync%2Fimpl%2FSyncopeSyncResultHandler.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -18,6 +18,7 @@\n  */\n package org.apache.syncope.core.sync.impl;\n \n+import static org.apache.syncope.core.sync.impl.AbstractSyncopeResultHandler.LOG;\n import java.util.AbstractMap;\n import java.util.ArrayList;\n import java.util.Collections;\n@@ -64,6 +65,7 @@\n import org.apache.syncope.core.propagation.PropagationException;\n import org.apache.syncope.core.propagation.PropagationTaskExecutor;\n import org.apache.syncope.core.propagation.impl.PropagationManager;\n+import org.apache.syncope.core.rest.controller.AbstractAttributableController;\n import org.apache.syncope.core.rest.controller.UnauthorizedRoleException;\n import org.apache.syncope.core.rest.data.AttributableTransformer;\n import org.apache.syncope.core.sync.SyncActions;\n@@ -72,8 +74,6 @@\n import org.apache.syncope.core.util.AttributableUtil;\n import org.apache.syncope.core.util.EntitlementUtil;\n import org.apache.syncope.core.workflow.WorkflowResult;\n-import org.apache.syncope.core.workflow.role.RoleWorkflowAdapter;\n-import org.apache.syncope.core.workflow.user.UserWorkflowAdapter;\n import org.identityconnectors.framework.common.objects.Attribute;\n import org.identityconnectors.framework.common.objects.AttributeUtil;\n import org.identityconnectors.framework.common.objects.ConnectorObject;\n@@ -126,18 +126,6 @@ public class SyncopeSyncResultHandler extends AbstractSyncopeResultHandler<SyncT\n     @Autowired\n     protected AttributableSearchDAO searchDAO;\n \n-    /**\n-     * User workflow adapter.\n-     */\n-    @Autowired\n-    protected UserWorkflowAdapter uwfAdapter;\n-\n-    /**\n-     * Role workflow adapter.\n-     */\n-    @Autowired\n-    protected RoleWorkflowAdapter rwfAdapter;\n-\n     /**\n      * Propagation Manager.\n      */\n@@ -362,7 +350,7 @@ public Long findMatchingAttributableId(final ObjectClass objectClass, final Stri\n \n         final List<ConnectorObject> found = connector.search(objectClass,\n                 new EqualsFilter(new Name(name)), connector.getOperationOptions(\n-                        attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n+                attrUtil.getMappingItems(syncTask.getResource(), MappingPurpose.SYNCHRONIZATION)));\n \n         if (found.isEmpty()) {\n             LOG.debug(\"No {} found on {} with __NAME__ {}\", objectClass, syncTask.getResource(), name);\n@@ -400,7 +388,34 @@ protected Boolean readEnabled(final ConnectorObject connectorObject) {\n         return enabled;\n     }\n \n-    protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUtil, final boolean dryRun)\n+    protected List<SyncResult> assign(\n+            final SyncDelta delta, final AttributableUtil attrUtil, final boolean dryRun)\n+            throws JobExecutionException {\n+\n+        final AbstractAttributableTO subjectTO =\n+                connObjectUtil.getAttributableTO(delta.getObject(), syncTask, attrUtil);\n+\n+        subjectTO.getResources().add(getSyncTask().getResource().getName());\n+\n+        return create(subjectTO, actions.beforeAssign(this, delta, subjectTO), attrUtil, \"assign\", dryRun);\n+    }\n+\n+    protected List<SyncResult> create(\n+            final SyncDelta delta, final AttributableUtil attrUtil, final boolean dryRun)\n+            throws JobExecutionException {\n+\n+        final AbstractAttributableTO subjectTO =\n+                connObjectUtil.getAttributableTO(delta.getObject(), syncTask, attrUtil);\n+\n+        return create(subjectTO, actions.beforeCreate(this, delta, subjectTO), attrUtil, \"provision\", dryRun);\n+    }\n+\n+    private List<SyncResult> create(\n+            final AbstractAttributableTO subjectTO,\n+            SyncDelta delta,\n+            final AttributableUtil attrUtil,\n+            final String operation,\n+            final boolean dryRun)\n             throws JobExecutionException {\n \n         if (!syncTask.isPerformCreate()) {\n@@ -413,10 +428,6 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n         result.setSubjectType(attrUtil.getType());\n         result.setStatus(SyncResult.Status.SUCCESS);\n \n-        AbstractAttributableTO subjectTO = connObjectUtil.getAttributableTO(delta.getObject(), syncTask, attrUtil);\n-\n-        delta = actions.beforeCreate(this, delta, subjectTO);\n-\n         // Attributable transformation (if configured)\n         AbstractAttributableTO actual = attrTransformer.transform(subjectTO);\n         LOG.debug(\"Transformed: {}\", actual);\n@@ -430,7 +441,7 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                 result.setName(((RoleTO) actual).getName());\n             }\n         } else {\n-            Object output = null;\n+            Object output;\n             Result resultStatus;\n \n             try {\n@@ -489,19 +500,19 @@ protected List<SyncResult> create(SyncDelta delta, final AttributableUtil attrUt\n                     AuditElements.EventCategoryType.SYNCHRONIZATION,\n                     AttributableType.USER.name().toLowerCase(),\n                     syncTask.getResource().getName(),\n-                    \"create\",\n+                    operation,\n                     resultStatus,\n-                    null, // searching for before object is too much expensive ... \n+                    null,\n                     output,\n                     delta);\n \n             auditManager.audit(\n                     AuditElements.EventCategoryType.SYNCHRONIZATION,\n                     AttributableType.USER.name().toLowerCase(),\n                     syncTask.getResource().getName(),\n-                    \"create\",\n+                    operation,\n                     resultStatus,\n-                    null, // searching for before object is too much expensive ... \n+                    null,\n                     output,\n                     delta);\n         }\n@@ -635,7 +646,7 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n         for (Long id : subjects) {\n             LOG.debug(\"About to update {}\", id);\n \n-            Object output = null;\n+            Object output;\n             AbstractAttributableTO before = null;\n             Result resultStatus;\n \n@@ -705,6 +716,207 @@ protected List<SyncResult> update(SyncDelta delta, final List<Long> subjects, fi\n         return updResults;\n     }\n \n+    protected List<SyncResult> deprovision(\n+            SyncDelta delta,\n+            final List<Long> subjects,\n+            final AttributableUtil attrUtil,\n+            final boolean unlink,\n+            final boolean dryRun)\n+            throws JobExecutionException {\n+\n+        if (!syncTask.isPerformUpdate()) {\n+            LOG.debug(\"SyncTask not configured for update\");\n+            return Collections.<SyncResult>emptyList();\n+        }\n+\n+        LOG.debug(\"About to update {}\", subjects);\n+\n+        final List<SyncResult> updResults = new ArrayList<SyncResult>();\n+\n+        final AbstractAttributableController<?, ?> controller;\n+        if (AttributableType.USER == attrUtil.getType()) {\n+            controller = userController;\n+        } else {\n+            controller = roleController;\n+        }\n+\n+        for (Long id : subjects) {\n+            LOG.debug(\"About to unassign resource {}\", id);\n+\n+            Object output;\n+            Result resultStatus;\n+\n+            final SyncResult result = new SyncResult();\n+            result.setOperation(ResourceOperation.DELETE);\n+            result.setSubjectType(attrUtil.getType());\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+            result.setId(id);\n+\n+            final AbstractAttributableTO before = controller.read(id);\n+            result.setName(before instanceof UserTO ? UserTO.class.cast(before).getUsername()\n+                    : before instanceof RoleTO ? RoleTO.class.cast(before).getName() : null);\n+\n+            try {\n+                if (!dryRun) {\n+                    if (unlink) {\n+                        actions.beforeUnassign(this, delta, before);\n+                        controller.unlink(id, Collections.<String>singleton(getSyncTask().getResource().getName()));\n+                    } else {\n+                        actions.beforeDeprovision(this, delta, before);\n+                    }\n+\n+                    controller.deprovision(id, Collections.<String>singleton(getSyncTask().getResource().getName()));\n+\n+                    output = controller.read(id);\n+                    actions.after(this, delta, AbstractAttributableTO.class.cast(output), result);\n+                } else {\n+                    output = before;\n+                }\n+\n+                resultStatus = Result.SUCCESS;\n+            } catch (PropagationException e) {\n+                // A propagation failure doesn't imply a synchronization failure.\n+                // The propagation exception status will be reported into the propagation task execution.\n+                LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            } catch (Exception e) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(e.getMessage());\n+                LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            }\n+            updResults.add(result);\n+\n+            if (!dryRun) {\n+                notificationManager.createTasks(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        unlink ? \"unassign\" : \"deprovision\",\n+                        resultStatus,\n+                        before,\n+                        output,\n+                        delta);\n+\n+                auditManager.audit(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        unlink ? \"unassign\" : \"deprovision\",\n+                        resultStatus,\n+                        before,\n+                        output,\n+                        delta);\n+            }\n+\n+            LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n+        }\n+\n+        return updResults;\n+    }\n+\n+    protected List<SyncResult> link(\n+            SyncDelta delta,\n+            final List<Long> subjects,\n+            final AttributableUtil attrUtil,\n+            final boolean unlink,\n+            final boolean dryRun)\n+            throws JobExecutionException {\n+\n+        if (!syncTask.isPerformUpdate()) {\n+            LOG.debug(\"SyncTask not configured for update\");\n+            return Collections.<SyncResult>emptyList();\n+        }\n+\n+        LOG.debug(\"About to update {}\", subjects);\n+\n+        final List<SyncResult> updResults = new ArrayList<SyncResult>();\n+\n+        final AbstractAttributableController<?, ?> controller;\n+        if (AttributableType.USER == attrUtil.getType()) {\n+            controller = userController;\n+        } else {\n+            controller = roleController;\n+        }\n+\n+        for (Long id : subjects) {\n+            LOG.debug(\"About to unassign resource {}\", id);\n+\n+            Object output;\n+            Result resultStatus;\n+\n+            final SyncResult result = new SyncResult();\n+            result.setOperation(ResourceOperation.NONE);\n+            result.setSubjectType(attrUtil.getType());\n+            result.setStatus(SyncResult.Status.SUCCESS);\n+            result.setId(id);\n+\n+            final AbstractAttributableTO before = controller.read(id);\n+            result.setName(before instanceof UserTO ? UserTO.class.cast(before).getUsername()\n+                    : before instanceof RoleTO ? RoleTO.class.cast(before).getName() : null);\n+\n+            try {\n+                if (!dryRun) {\n+                    if (unlink) {\n+                        actions.beforeUnlink(this, delta, before);\n+                        controller.unlink(id, Collections.<String>singleton(getSyncTask().getResource().getName()));\n+                    } else {\n+                        actions.beforeLink(this, delta, before);\n+                        controller.link(id, Collections.<String>singleton(getSyncTask().getResource().getName()));\n+                    }\n+\n+                    output = controller.read(id);\n+                    actions.after(this, delta, AbstractAttributableTO.class.cast(output), result);\n+                } else {\n+                    output = before;\n+                }\n+\n+                resultStatus = Result.SUCCESS;\n+            } catch (PropagationException e) {\n+                // A propagation failure doesn't imply a synchronization failure.\n+                // The propagation exception status will be reported into the propagation task execution.\n+                LOG.error(\"Could not propagate {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            } catch (Exception e) {\n+                result.setStatus(SyncResult.Status.FAILURE);\n+                result.setMessage(e.getMessage());\n+                LOG.error(\"Could not update {} {}\", attrUtil.getType(), delta.getUid().getUidValue(), e);\n+                output = e;\n+                resultStatus = Result.FAILURE;\n+            }\n+            updResults.add(result);\n+\n+            if (!dryRun) {\n+                notificationManager.createTasks(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        unlink ? \"unlink\" : \"link\",\n+                        resultStatus,\n+                        before,\n+                        output,\n+                        delta);\n+\n+                auditManager.audit(\n+                        AuditElements.EventCategoryType.SYNCHRONIZATION,\n+                        attrUtil.getType().name().toLowerCase(),\n+                        syncTask.getResource().getName(),\n+                        unlink ? \"unlink\" : \"link\",\n+                        resultStatus,\n+                        before,\n+                        output,\n+                        delta);\n+            }\n+\n+            LOG.debug(\"{} {} successfully updated\", attrUtil.getType(), id);\n+        }\n+\n+        return updResults;\n+    }\n+\n     protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, final AttributableUtil attrUtil,\n             final boolean dryRun)\n             throws JobExecutionException {\n@@ -722,19 +934,22 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n             Object output = null;\n             Result resultStatus = Result.FAILURE;\n \n+            AbstractAttributableTO before = null;\n+\n             try {\n-                AbstractAttributableTO subjectTO = AttributableType.USER == attrUtil.getType()\n+                before = AttributableType.USER == attrUtil.getType()\n                         ? userDataBinder.getUserTO(id)\n                         : roleDataBinder.getRoleTO(id);\n-                delta = actions.beforeDelete(this, delta, subjectTO);\n+\n+                delta = actions.beforeDelete(this, delta, before);\n \n                 final SyncResult result = new SyncResult();\n                 result.setId(id);\n-                if (subjectTO instanceof UserTO) {\n-                    result.setName(((UserTO) subjectTO).getUsername());\n+                if (before instanceof UserTO) {\n+                    result.setName(((UserTO) before).getUsername());\n                 }\n-                if (subjectTO instanceof RoleTO) {\n-                    result.setName(((RoleTO) subjectTO).getName());\n+                if (before instanceof RoleTO) {\n+                    result.setName(((RoleTO) before).getName());\n                 }\n                 result.setOperation(ResourceOperation.DELETE);\n                 result.setSubjectType(attrUtil.getType());\n@@ -771,7 +986,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                     }\n                 }\n \n-                actions.after(this, delta, subjectTO, result);\n+                actions.after(this, delta, before, result);\n                 delResults.add(result);\n \n             } catch (NotFoundException e) {\n@@ -787,7 +1002,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                         syncTask.getResource().getName(),\n                         \"delete\",\n                         resultStatus,\n-                        null, // searching for before object is too much expensive ... \n+                        before,\n                         output,\n                         delta);\n \n@@ -797,7 +1012,7 @@ protected List<SyncResult> delete(SyncDelta delta, final List<Long> subjects, fi\n                         syncTask.getResource().getName(),\n                         \"delete\",\n                         resultStatus,\n-                        null, // searching for before object is too much expensive ... \n+                        before,\n                         output,\n                         delta);\n             }\n@@ -827,63 +1042,69 @@ protected final void doHandle(final SyncDelta delta)\n         final String uid = delta.getPreviousUid() == null\n                 ? delta.getUid().getUidValue()\n                 : delta.getPreviousUid().getUidValue();\n-        final List<Long> subjectIds = findExisting(uid, delta.getObject(), attrUtil);\n \n-        if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n-            if (subjectIds.isEmpty()) {\n-                results.addAll(create(delta, attrUtil, dryRun));\n-            } else if (subjectIds.size() == 1) {\n-                results.addAll(update(delta, subjectIds.subList(0, 1), attrUtil, dryRun));\n-            } else {\n+        try {\n+            List<Long> subjectIds = findExisting(uid, delta.getObject(), attrUtil);\n+            if (subjectIds.size() > 1) {\n                 switch (resAct) {\n                     case IGNORE:\n-                        LOG.error(\"More than one match {}\", subjectIds);\n-                        break;\n+                        throw new IllegalStateException(\"More than one match \" + subjectIds);\n \n                     case FIRSTMATCH:\n-                        results.addAll(update(delta, subjectIds.subList(0, 1), attrUtil, dryRun));\n+                        subjectIds = subjectIds.subList(0, 1);\n                         break;\n \n                     case LASTMATCH:\n-                        results.addAll(update(delta, subjectIds.subList(subjectIds.size() - 1, subjectIds.size()),\n-                                attrUtil, dryRun));\n-                        break;\n-\n-                    case ALL:\n-                        results.addAll(update(delta, subjectIds, attrUtil, dryRun));\n+                        subjectIds = subjectIds.subList(subjectIds.size() - 1, subjectIds.size());\n                         break;\n \n                     default:\n+                    // keep subjectIds as is\n                 }\n             }\n-        } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n-            if (subjectIds.isEmpty()) {\n-                LOG.debug(\"No match found for deletion\");\n-            } else if (subjectIds.size() == 1) {\n-                results.addAll(delete(delta, subjectIds, attrUtil, dryRun));\n-            } else {\n-                switch (resAct) {\n-                    case IGNORE:\n-                        LOG.error(\"More than one match {}\", subjectIds);\n-                        break;\n \n-                    case FIRSTMATCH:\n-                        results.addAll(delete(delta, subjectIds.subList(0, 1), attrUtil, dryRun));\n-                        break;\n-\n-                    case LASTMATCH:\n-                        results.addAll(delete(delta, subjectIds.subList(subjectIds.size() - 1, subjectIds.size()),\n-                                attrUtil,\n-                                dryRun));\n-                        break;\n-\n-                    case ALL:\n-                        results.addAll(delete(delta, subjectIds, attrUtil, dryRun));\n-                        break;\n-\n-                    default:\n+            if (SyncDeltaType.CREATE_OR_UPDATE == delta.getDeltaType()) {\n+                if (subjectIds.isEmpty()) {\n+                    switch (getSyncTask().getUnmatchigRule()) {\n+                        case ASSIGN:\n+                            results.addAll(assign(delta, attrUtil, dryRun));\n+                            break;\n+                        case PROVISION:\n+                            results.addAll(create(delta, attrUtil, dryRun));\n+                            break;\n+                        default:\n+                        // do nothing\n+                    }\n+                } else {\n+                    switch (getSyncTask().getMatchigRule()) {\n+                        case UPDATE:\n+                            results.addAll(update(delta, subjectIds, attrUtil, dryRun));\n+                            break;\n+                        case DEPROVISION:\n+                            results.addAll(deprovision(delta, subjectIds, attrUtil, false, dryRun));\n+                            break;\n+                        case UNASSIGN:\n+                            results.addAll(deprovision(delta, subjectIds, attrUtil, true, dryRun));\n+                            break;\n+                        case LINK:\n+                            results.addAll(link(delta, subjectIds, attrUtil, false, dryRun));\n+                            break;\n+                        case UNLINK:\n+                            results.addAll(link(delta, subjectIds, attrUtil, true, dryRun));\n+                            break;\n+                        default:\n+                        // do nothing\n+                    }\n+                }\n+            } else if (SyncDeltaType.DELETE == delta.getDeltaType()) {\n+                if (subjectIds.isEmpty()) {\n+                    LOG.debug(\"No match found for deletion\");\n+                } else {\n+                    results.addAll(delete(delta, subjectIds, attrUtil, dryRun));\n                 }\n             }\n+        } catch (IllegalStateException e) {\n+            LOG.warn(e.getMessage());\n         }\n     }\n }"},{"sha":"56301db287a6279c5ef1de4a5901a08ca51d7c64","filename":"core/src/test/java/org/apache/syncope/core/persistence/relationships/TaskTest.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Frelationships%2FTaskTest.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -119,8 +119,7 @@ public void addPropagationTaskExecution() {\n         task.addExec(execution);\n         execution.setStartDate(new Date());\n \n-        task = taskDAO.save(task);\n-\n+        taskDAO.save(task);\n         taskDAO.flush();\n \n         task = taskDAO.find(1L);\n@@ -142,8 +141,7 @@ public void addSyncTaskExecution() {\n         task.addExec(execution);\n         execution.setMessage(\"A message\");\n \n-        task = taskDAO.save(task);\n-\n+        taskDAO.save(task);\n         taskDAO.flush();\n \n         task = taskDAO.find(4L);\n@@ -165,8 +163,7 @@ public void addPushTaskExecution() {\n         task.addExec(execution);\n         execution.setMessage(\"A message\");\n \n-        task = taskDAO.save(task);\n-\n+        taskDAO.save(task);\n         taskDAO.flush();\n \n         task = taskDAO.find(13L);"},{"sha":"fb595cf3c67db7be0b85b067512af047ed7cd375","filename":"core/src/test/java/org/apache/syncope/core/rest/TaskTestITCase.java","status":"modified","additions":14,"deletions":5,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/c492831ef7ac5cbbc1c28584e87c10e073a76bbb/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FTaskTestITCase.java?ref=c492831ef7ac5cbbc1c28584e87c10e073a76bbb","patch":"@@ -55,6 +55,8 @@\n import org.apache.syncope.common.types.TraceLevel;\n import org.apache.syncope.common.SyncopeClientException;\n import org.apache.syncope.common.to.PushTaskTO;\n+import org.apache.syncope.common.types.MatchingRule;\n+import org.apache.syncope.common.types.UnmatchingRule;\n import org.apache.syncope.common.wrap.PushActionClass;\n import org.apache.syncope.core.sync.TestSyncActions;\n import org.apache.syncope.core.sync.TestSyncRule;\n@@ -148,6 +150,7 @@ public void createPushTask() {\n                 SyncopeClient.getUserSearchConditionBuilder().hasNotResources(RESOURCE_NAME_TESTDB2).query());\n         task.setRoleFilter(\n                 SyncopeClient.getRoleSearchConditionBuilder().isNotNull(\"cool\").query());\n+        task.setMatchigRule(MatchingRule.LINK);\n \n         final Response response = taskService.create(task);\n         final PushTaskTO actual = getObject(response.getLocation(), TaskService.class, PushTaskTO.class);\n@@ -159,6 +162,8 @@ public void createPushTask() {\n         assertEquals(task.getJobClassName(), actual.getJobClassName());\n         assertEquals(task.getUserFilter(), actual.getUserFilter());\n         assertEquals(task.getRoleFilter(), actual.getRoleFilter());\n+        assertEquals(UnmatchingRule.ASSIGN, actual.getUnmatchigRule());\n+        assertEquals(MatchingRule.LINK, actual.getMatchigRule());\n     }\n \n     @Test\n@@ -239,11 +244,15 @@ public void paginatedList() {\n \n     @Test\n     public void read() {\n-        PropagationTaskTO taskTO = taskService.read(3L);\n+        final PropagationTaskTO taskTO = taskService.read(3L);\n \n         assertNotNull(taskTO);\n         assertNotNull(taskTO.getExecutions());\n         assertTrue(taskTO.getExecutions().isEmpty());\n+        \n+        final PushTaskTO pushTaskTO = taskService.<PushTaskTO>read(13L);\n+        assertEquals(UnmatchingRule.ASSIGN, pushTaskTO.getUnmatchigRule());\n+        assertEquals(MatchingRule.UPDATE, pushTaskTO.getMatchigRule());\n     }\n \n     @Test\n@@ -969,9 +978,9 @@ public void pushUsers() {\n         // Read sync task\n         PushTaskTO task = taskService.<PushTaskTO>read(13L);\n         assertNotNull(task);\n-        \n+\n         assertEquals(\"Vivaldi\", userService.read(3L).getAttrMap().get(\"surname\").getValues().get(0));\n-        \n+\n         task.setUserFilter(SyncopeClient.getUserSearchConditionBuilder().is(\"surname\").equalTo(\"Vivaldi\").query());\n         taskService.update(13L, task);\n         assertEquals(task.getUserFilter(), taskService.<PushTaskTO>read(13L).getUserFilter());\n@@ -983,10 +992,10 @@ public void pushUsers() {\n         assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='bellini'\").size());\n         assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='rossini'\").size());\n         assertEquals(0, jdbcTemplate.queryForList(\"SELECT ID FROM test2 WHERE ID='puccini'\").size());\n-        \n+\n         assertEquals(\"vivaldi\",\n                 jdbcTemplate.queryForObject(\"SELECT ID FROM test2 WHERE ID=?\", String.class, \"vivaldi\"));\n-        \n+\n         jdbcTemplate.execute(\"DELETE FROM test2 WHERE ID='vivaldi'\");\n \n         task.setUserFilter(null);"}]}