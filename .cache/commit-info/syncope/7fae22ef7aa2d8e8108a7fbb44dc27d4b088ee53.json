{"sha":"7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjdmYWUyMmVmN2FhMmQ4ZTgxMDhhN2ZiYjQ0ZGMyN2Q0YjA4OGVlNTM=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-28T15:26:15Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2011-10-28T15:26:15Z"},"message":"Fixes issue 142\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1247171 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"b483ff477bb39028b6f5d79ae32dcdce68470d3a","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/b483ff477bb39028b6f5d79ae32dcdce68470d3a"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/comments","author":null,"committer":null,"parents":[{"sha":"b4252cf57d8d45a815dec981356a6da71b88b3af","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b4252cf57d8d45a815dec981356a6da71b88b3af","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b4252cf57d8d45a815dec981356a6da71b88b3af"}],"stats":{"total":1654,"additions":1287,"deletions":367},"files":[{"sha":"2e1ad6df106dc575c7b38c80e1be68a77f73cd6e","filename":"client/src/main/java/org/syncope/client/mod/ReferenceMod.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FReferenceMod.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FReferenceMod.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fmod%2FReferenceMod.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -18,6 +18,9 @@\n \n /**\n  * This class is used to specify the willing to modify an external reference id.\n+ * Use 'null' ReferenceMod to keep the current reference id; use a ReferenceMod\n+ * with a null id to try to reset the reference id; use a RefernceMod with a\n+ * not null id to specify a new reference id.\n  */\n public class ReferenceMod extends AbstractBaseBean {\n "},{"sha":"63c6e5c3b486620557f279902db5f28b737b2bc6","filename":"client/src/main/java/org/syncope/client/to/ResourceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FResourceTO.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -66,6 +66,8 @@ public class ResourceTO extends AbstractBaseBean {\n \n     private Long accountPolicy;\n \n+    private Long syncPolicy;\n+\n     private Set<ConnConfProperty> connectorConfigurationProperties;\n \n     public ResourceTO() {\n@@ -191,6 +193,14 @@ public void setAccountPolicy(Long accountPolicy) {\n         this.accountPolicy = accountPolicy;\n     }\n \n+    public Long getSyncPolicy() {\n+        return syncPolicy;\n+    }\n+\n+    public void setSyncPolicy(Long syncPolicy) {\n+        this.syncPolicy = syncPolicy;\n+    }\n+\n     public Set<ConnConfProperty> getConnectorConfigurationProperties() {\n         return connectorConfigurationProperties;\n     }"},{"sha":"ab5de72df58b76be50bd416da3ebf4aa5460afd0","filename":"client/src/main/java/org/syncope/types/AccountPolicySpec.java","status":"modified","additions":14,"deletions":0,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FAccountPolicySpec.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -61,6 +61,12 @@ public class AccountPolicySpec extends AbstractPolicySpec {\n      */\n     private boolean allLowerCase;\n \n+    /**\n+     * Specify if it must be propagate suspension in case of maximum subsequent\n+     * failed logins reached.\n+     */\n+    private boolean propagateSuspension;\n+\n     /**\n      * Number of permitted login retries.\n      * 0 disabled; >0 enabled.\n@@ -145,6 +151,14 @@ public void setWordsNotPermitted(List<String> wordsNotPermitted) {\n         this.wordsNotPermitted = wordsNotPermitted;\n     }\n \n+    public boolean isPropagateSuspension() {\n+        return propagateSuspension;\n+    }\n+\n+    public void setPropagateSuspension(boolean propagateSuspension) {\n+        this.propagateSuspension = propagateSuspension;\n+    }\n+\n     public int getPermittedLoginRetries() {\n         return permittedLoginRetries;\n     }"},{"sha":"d52b62aaf62e30dd6628032e74042a94a90ff6ab","filename":"client/src/main/java/org/syncope/types/EntityViolationType.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FEntityViolationType.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -55,6 +55,8 @@ public enum EntityViolationType {\n     \"org.syncope.core.validation.synctask.invalid\"),\n     InvalidPassword(\n     \"org.syncope.core.validation.password.invalid\"),\n+    InvalidUsername(\n+    \"org.syncope.core.validation.username.invalid\"),\n     InvalidPolicy(// not throwable using rest interface because the TO is typed\n     \"org.syncope.core.validation.policy.invalid\"),\n     InvalidPasswordPolicy("},{"sha":"8917342c5dc25bec4575857ed341b9cb206413e2","filename":"client/src/main/java/org/syncope/types/PolicyType.java","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FPolicyType.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -30,7 +30,8 @@ public enum PolicyType {\n     /**\n      * SYNC policy regarding account conflicts resolution.\n      */\n-    SYNC(\"Synchronization Policy\");\n+    SYNC(\"Synchronization Policy\"),\n+    GLOBAL_SYNC(\"Synchronization Global Policy\");\n \n     private String description;\n "},{"sha":"89f0ac01753229473d1177631f179c8da47ac101","filename":"client/src/main/java/org/syncope/types/SyncPolicySpec.java","status":"modified","additions":3,"deletions":4,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncPolicySpec.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -18,14 +18,13 @@ public class SyncPolicySpec extends AbstractPolicySpec {\n \n     private static final long serialVersionUID = -3144027171719498127L;\n \n-    // TODO: To be defined\n-    private String fake;\n+    private boolean fake;\n \n-    public String getFake() {\n+    public boolean isFake() {\n         return fake;\n     }\n \n-    public void setFake(String fake) {\n+    public void setFake(boolean fake) {\n         this.fake = fake;\n     }\n }"},{"sha":"96e3044b2fabb5babc8c26b20ecc7bc56b87af90","filename":"console/src/main/java/org/syncope/console/pages/Configuration.java","status":"modified","additions":7,"deletions":3,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -54,14 +54,15 @@\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.commons.SortableDataProviderComparator;\n-import org.syncope.console.pages.panels.PasswordPoliciesPanel;\n import org.syncope.console.rest.ConfigurationRestClient;\n import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n import ch.qos.logback.classic.Level;\n import ch.qos.logback.classic.Logger;\n import ch.qos.logback.classic.LoggerContext;\n+import org.syncope.console.pages.panels.PoliciesPanel;\n+import org.syncope.types.PolicyType;\n import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n import org.apache.wicket.markup.html.form.TextArea;\n import org.apache.wicket.markup.html.link.Link;\n@@ -320,7 +321,11 @@ protected void onUpdate(final AjaxRequestTarget target) {\n         paginatorForm.add(rowsChooser);\n         add(paginatorForm);\n \n-        add(new PasswordPoliciesPanel(\"passwordPoliciesPanel\"));\n+        add(new PoliciesPanel(\"passwordPoliciesPanel\", PolicyType.PASSWORD));\n+\n+        add(new PoliciesPanel(\"accountPoliciesPanel\", PolicyType.ACCOUNT));\n+\n+        add(new PoliciesPanel(\"syncPoliciesPanel\", PolicyType.SYNC));\n \n         // Workflow definition stuff\n         final WorkflowDefinitionTO workflowDef =\n@@ -502,7 +507,6 @@ enum LoggerLevel {\n         DEBUG,\n         TRACE,\n         ALL\n-\n     }\n \n     private class LoggerPropertyList extends PropertyListView<LoggerTO> {"},{"sha":"69c35ee8b727dba5e3e0a48c909da15e692e74ae","filename":"console/src/main/java/org/syncope/console/pages/PasswordPolicyModalPage.java","status":"removed","additions":0,"deletions":129,"changes":129,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b4252cf57d8d45a815dec981356a6da71b88b3af/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPasswordPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b4252cf57d8d45a815dec981356a6da71b88b3af/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPasswordPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPasswordPolicyModalPage.java?ref=b4252cf57d8d45a815dec981356a6da71b88b3af","patch":"@@ -1,129 +0,0 @@\n-/*\n- * Licensed to the Apache Software Foundation (ASF) under one or more\n- * contributor license agreements.  See the NOTICE file distributed with\n- * this work for additional information regarding copyright ownership.\n- * The ASF licenses this file to You under the Apache License, Version 2.0\n- * (the \"License\"); you may not use this file except in compliance with\n- * the License.  You may obtain a copy of the License at\n- *\n- *      http://www.apache.org/licenses/LICENSE-2.0\n- *\n- * Unless required by applicable law or agreed to in writing, software\n- * distributed under the License is distributed on an \"AS IS\" BASIS,\n- * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n- * See the License for the specific language governing permissions and\n- * limitations under the License.\n- */\n-package org.syncope.console.pages;\n-\n-import java.util.Arrays;\n-import org.apache.wicket.ajax.AjaxRequestTarget;\n-import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n-import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n-import org.apache.wicket.markup.html.form.Form;\n-import org.apache.wicket.model.PropertyModel;\n-import org.apache.wicket.model.ResourceModel;\n-import org.apache.wicket.spring.injection.annot.SpringBean;\n-import org.syncope.client.mod.PasswordPolicyMod;\n-import org.syncope.client.to.PasswordPolicyTO;\n-import org.syncope.console.pages.panels.PolicyBeanPanel;\n-import org.syncope.console.rest.PolicyRestClient;\n-import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n-import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n-import org.syncope.types.PasswordPolicySpec;\n-import org.syncope.types.PolicyType;\n-\n-/**\n- * Modal window with Resource form.\n- */\n-public class PasswordPolicyModalPage extends BaseModalPage {\n-\n-    private static final long serialVersionUID = -7325772767481076679L;\n-\n-    @SpringBean\n-    private PolicyRestClient policyRestClient;\n-\n-    public PasswordPolicyModalPage(final ModalWindow window,\n-            final PasswordPolicyTO policyTO) {\n-\n-        super();\n-\n-        final Form form = new Form(\"form\");\n-        form.setOutputMarkupId(true);\n-        add(form);\n-\n-        final AjaxTextFieldPanel policyid = new AjaxTextFieldPanel(\n-                \"id\", \"id\",\n-                new PropertyModel<String>(policyTO, \"id\"), false);\n-        policyid.setEnabled(false);\n-        policyid.setStyleShet(\n-                \"ui-widget-content ui-corner-all short_fixedsize\");\n-        form.add(policyid);\n-\n-        final AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n-                \"description\", \"description\",\n-                new PropertyModel<String>(policyTO, \"description\"), false);\n-        description.addRequiredLabel();\n-        description.setStyleShet(\n-                \"ui-widget-content ui-corner-all medium_dynamicsize\");\n-        form.add(description);\n-\n-        final AjaxDropDownChoicePanel<PolicyType> type =\n-                new AjaxDropDownChoicePanel<PolicyType>(\n-                \"type\", \"type\",\n-                new PropertyModel<PolicyType>(policyTO, \"type\"), false);\n-\n-        type.setChoices(Arrays.asList(new PolicyType[]{\n-                    PolicyType.GLOBAL_PASSWORD, PolicyType.PASSWORD}));\n-        type.addRequiredLabel();\n-        form.add(type);\n-\n-        final PasswordPolicySpec policy = policyTO.getSpecification() != null\n-                ? policyTO.getSpecification() : new PasswordPolicySpec();\n-\n-        form.add(new PolicyBeanPanel(\"panel\", policy));\n-\n-        final IndicatingAjaxButton submit = new IndicatingAjaxButton(\n-                \"apply\", new ResourceModel(\"apply\")) {\n-\n-            private static final long serialVersionUID = -958724007591692537L;\n-\n-            @Override\n-            protected void onSubmit(\n-                    final AjaxRequestTarget target,\n-                    final Form form) {\n-\n-                policyTO.setSpecification(policy);\n-\n-                try {\n-                    if (policyTO.getId() > 0) {\n-                        final PasswordPolicyMod policyMod =\n-                                new PasswordPolicyMod();\n-                        policyMod.setId(policyTO.getId());\n-                        policyMod.setType(policyTO.getType());\n-                        policyMod.setSpecification(policyTO.getSpecification());\n-                        policyMod.setDescription(policyTO.getDescription());\n-\n-                        policyRestClient.updatePasswordPolicy(policyMod);\n-                    } else {\n-                        policyRestClient.createPasswordPolicy(policyTO);\n-                    }\n-\n-                    window.close(target);\n-                } catch (Exception e) {\n-                    LOG.error(\"While creating policy\", e);\n-\n-                    error(getString(\"operation_error\"));\n-                    target.add(getPage().get(\"feedback\"));\n-                }\n-            }\n-\n-            @Override\n-            protected void onError(AjaxRequestTarget target, Form form) {\n-                target.add(getPage().get(\"feedback\"));\n-            }\n-        };\n-\n-        form.add(submit);\n-    }\n-}"},{"sha":"21e23a37126c7c810cd5bfdbeef13af455b67134","filename":"console/src/main/java/org/syncope/console/pages/PolicyModalPage.java","status":"added","additions":247,"deletions":0,"changes":247,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -0,0 +1,247 @@\n+/*\n+ * Licensed to the Apache Software Foundation (ASF) under one or more\n+ * contributor license agreements.  See the NOTICE file distributed with\n+ * this work for additional information regarding copyright ownership.\n+ * The ASF licenses this file to You under the Apache License, Version 2.0\n+ * (the \"License\"); you may not use this file except in compliance with\n+ * the License.  You may obtain a copy of the License at\n+ *\n+ *      http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ * Unless required by applicable law or agreed to in writing, software\n+ * distributed under the License is distributed on an \"AS IS\" BASIS,\n+ * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ * See the License for the specific language governing permissions and\n+ * limitations under the License.\n+ */\n+package org.syncope.console.pages;\n+\n+import java.util.Arrays;\n+import org.apache.wicket.ajax.AjaxRequestTarget;\n+import org.apache.wicket.extensions.ajax.markup.html.IndicatingAjaxButton;\n+import org.apache.wicket.extensions.ajax.markup.html.modal.ModalWindow;\n+import org.apache.wicket.markup.html.form.Form;\n+import org.apache.wicket.model.PropertyModel;\n+import org.apache.wicket.model.ResourceModel;\n+import org.apache.wicket.spring.injection.annot.SpringBean;\n+import org.syncope.client.mod.AccountPolicyMod;\n+import org.syncope.client.mod.PasswordPolicyMod;\n+import org.syncope.client.mod.PolicyMod;\n+import org.syncope.client.mod.SyncPolicyMod;\n+import org.syncope.client.to.AccountPolicyTO;\n+import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n+import org.syncope.client.to.SyncPolicyTO;\n+import org.syncope.console.pages.panels.PolicyBeanPanel;\n+import org.syncope.console.rest.PolicyRestClient;\n+import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n+import org.syncope.console.wicket.markup.html.form.AjaxTextFieldPanel;\n+import org.syncope.types.AbstractPolicySpec;\n+import org.syncope.types.AccountPolicySpec;\n+import org.syncope.types.PasswordPolicySpec;\n+import org.syncope.types.PolicyType;\n+import org.syncope.types.SyncPolicySpec;\n+\n+/**\n+ * Modal window with Resource form.\n+ */\n+public class PolicyModalPage<T extends PolicyTO> extends BaseModalPage {\n+\n+    private static final long serialVersionUID = -7325772767481076679L;\n+\n+    @SpringBean\n+    private PolicyRestClient policyRestClient;\n+\n+    public PolicyModalPage(\n+            final ModalWindow window, final T policyTO) {\n+\n+        super();\n+\n+        final Form form = new Form(\"form\");\n+        form.setOutputMarkupId(true);\n+        add(form);\n+\n+        final AjaxTextFieldPanel policyid = new AjaxTextFieldPanel(\n+                \"id\", \"id\",\n+                new PropertyModel<String>(policyTO, \"id\"), false);\n+        policyid.setEnabled(false);\n+        policyid.setStyleShet(\n+                \"ui-widget-content ui-corner-all short_fixedsize\");\n+        form.add(policyid);\n+\n+        final AjaxTextFieldPanel description = new AjaxTextFieldPanel(\n+                \"description\", \"description\",\n+                new PropertyModel<String>(policyTO, \"description\"), false);\n+        description.addRequiredLabel();\n+        description.setStyleShet(\n+                \"ui-widget-content ui-corner-all medium_dynamicsize\");\n+        form.add(description);\n+\n+        final AjaxDropDownChoicePanel<PolicyType> type =\n+                new AjaxDropDownChoicePanel<PolicyType>(\n+                \"type\", \"type\",\n+                new PropertyModel<PolicyType>(policyTO, \"type\"), false);\n+\n+        switch (policyTO.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                type.setChoices(Arrays.asList(new PolicyType[]{\n+                            PolicyType.GLOBAL_ACCOUNT, PolicyType.ACCOUNT}));\n+                break;\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                type.setChoices(Arrays.asList(new PolicyType[]{\n+                            PolicyType.GLOBAL_PASSWORD, PolicyType.PASSWORD}));\n+                break;\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                type.setChoices(Arrays.asList(new PolicyType[]{\n+                            PolicyType.GLOBAL_SYNC, PolicyType.SYNC}));\n+        }\n+\n+        type.addRequiredLabel();\n+        form.add(type);\n+\n+        final AbstractPolicySpec policy = getPolicySpecification(policyTO);\n+\n+        form.add(new PolicyBeanPanel(\"panel\", policy));\n+\n+        final IndicatingAjaxButton submit = new IndicatingAjaxButton(\n+                \"apply\", new ResourceModel(\"apply\")) {\n+\n+            private static final long serialVersionUID = -958724007591692537L;\n+\n+            @Override\n+            protected void onSubmit(\n+                    final AjaxRequestTarget target,\n+                    final Form form) {\n+\n+                setPolicySpecification(policyTO, policy);\n+\n+                try {\n+                    if (policyTO.getId() > 0) {\n+                        final PolicyMod policyMod =\n+                                getPolicyModInstance(policyTO.getType());\n+                        policyMod.setId(policyTO.getId());\n+                        policyMod.setType(policyTO.getType());\n+                        setPolicySpecification(policyMod, policy);\n+                        policyMod.setDescription(policyTO.getDescription());\n+\n+                        policyRestClient.updatePolicy(policyMod);\n+                    } else {\n+                        policyRestClient.createPolicy(policyTO);\n+                    }\n+\n+                    window.close(target);\n+                } catch (Exception e) {\n+                    LOG.error(\"While creating policy\", e);\n+\n+                    error(getString(\"operation_error\"));\n+                    target.add(getPage().get(\"feedback\"));\n+                }\n+            }\n+\n+            @Override\n+            protected void onError(AjaxRequestTarget target, Form form) {\n+                target.add(getPage().get(\"feedback\"));\n+            }\n+        };\n+\n+        form.add(submit);\n+    }\n+\n+    private AbstractPolicySpec getPolicySpecification(final PolicyTO policyTO) {\n+\n+        AbstractPolicySpec spec = null;\n+\n+        switch (policyTO.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                spec = ((AccountPolicyTO) policyTO).getSpecification() != null\n+                        ? ((AccountPolicyTO) policyTO).getSpecification()\n+                        : new AccountPolicySpec();\n+                break;\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                spec = ((PasswordPolicyTO) policyTO).getSpecification() != null\n+                        ? ((PasswordPolicyTO) policyTO).getSpecification()\n+                        : new PasswordPolicySpec();\n+                break;\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                spec = ((SyncPolicyTO) policyTO).getSpecification() != null\n+                        ? ((SyncPolicyTO) policyTO).getSpecification()\n+                        : new SyncPolicySpec();\n+        }\n+\n+        return spec;\n+    }\n+\n+    private void setPolicySpecification(\n+            final PolicyTO policyTO, final AbstractPolicySpec specification) {\n+\n+        AbstractPolicySpec spec = null;\n+\n+        switch (policyTO.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                ((AccountPolicyTO) policyTO).setSpecification(\n+                        (AccountPolicySpec) specification);\n+                break;\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                ((PasswordPolicyTO) policyTO).setSpecification(\n+                        (PasswordPolicySpec) specification);\n+                break;\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                ((SyncPolicyTO) policyTO).setSpecification(\n+                        (SyncPolicySpec) specification);\n+        }\n+    }\n+\n+    private void setPolicySpecification(\n+            final PolicyMod policyMod, final AbstractPolicySpec specification) {\n+\n+        AbstractPolicySpec spec = null;\n+\n+        switch (policyMod.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                ((AccountPolicyMod) policyMod).setSpecification(\n+                        (AccountPolicySpec) specification);\n+                break;\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                ((PasswordPolicyMod) policyMod).setSpecification(\n+                        (PasswordPolicySpec) specification);\n+                break;\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                ((SyncPolicyMod) policyMod).setSpecification(\n+                        (SyncPolicySpec) specification);\n+        }\n+    }\n+\n+    private PolicyMod getPolicyModInstance(final PolicyType policyType) {\n+        PolicyMod policyMod = null;\n+        switch (policyType) {\n+            case ACCOUNT:\n+            case GLOBAL_ACCOUNT:\n+                policyMod = new AccountPolicyMod();\n+                policyMod.setType(policyType);\n+                break;\n+            case PASSWORD:\n+            case GLOBAL_PASSWORD:\n+                policyMod = new PasswordPolicyMod();\n+                policyMod.setType(policyType);\n+                break;\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                policyMod = new SyncPolicyMod();\n+                policyMod.setType(policyType);\n+        }\n+\n+        return policyMod;\n+    }\n+}"},{"sha":"cbd129d28c4dc50a2e6a78437e6fb42b503dd946","filename":"console/src/main/java/org/syncope/console/pages/panels/PoliciesPanel.java","status":"renamed","additions":60,"deletions":30,"changes":90,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -46,25 +46,29 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n+import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n+import org.syncope.client.to.SyncPolicyTO;\n import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n import org.syncope.console.commons.Constants;\n import org.syncope.console.commons.PreferenceManager;\n import org.syncope.console.commons.SortableDataProviderComparator;\n import org.syncope.console.commons.XMLRolesReader;\n-import org.syncope.console.pages.PasswordPolicyModalPage;\n+import org.syncope.console.pages.PolicyModalPage;\n import org.syncope.console.rest.PolicyRestClient;\n import org.syncope.console.wicket.ajax.markup.html.IndicatingDeleteOnConfirmAjaxLink;\n import org.syncope.console.wicket.markup.html.form.DeleteLinkPanel;\n import org.syncope.console.wicket.markup.html.form.EditLinkPanel;\n+import org.syncope.types.PolicyType;\n \n-public class PasswordPoliciesPanel extends Panel {\n+public class PoliciesPanel extends Panel {\n \n     /**\n      * Logger.\n      */\n     protected static final Logger LOG = LoggerFactory.getLogger(\n-            PasswordPoliciesPanel.class);\n+            PoliciesPanel.class);\n \n     private final static int MODAL_WIN_HEIGHT = 400;\n \n@@ -86,9 +90,13 @@ public class PasswordPoliciesPanel extends Panel {\n \n     protected boolean modalResult = false;\n \n-    public PasswordPoliciesPanel(final String id) {\n+    private PolicyType policyType;\n+\n+    public PoliciesPanel(final String id, final PolicyType policyType) {\n         super(id);\n \n+        this.policyType = policyType;\n+\n         // Modal window for editing user attributes\n         final ModalWindow mwindow =\n                 new ModalWindow(\"editModalWin\");\n@@ -116,18 +124,18 @@ public PasswordPoliciesPanel(final String id) {\n         columns.add(new PropertyColumn(\n                 new ResourceModel(\"type\"), \"type\", \"type\"));\n \n-        columns.add(new AbstractColumn<PasswordPolicyTO>(\n+        columns.add(new AbstractColumn<PolicyTO>(\n                 new ResourceModel(\"edit\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<PasswordPolicyTO>> cellItem,\n+                    final Item<ICellPopulator<PolicyTO>> cellItem,\n                     final String componentId,\n-                    final IModel<PasswordPolicyTO> model) {\n+                    final IModel<PolicyTO> model) {\n \n-                final PasswordPolicyTO passwordPolicyTO = model.getObject();\n+                final PolicyTO accountPolicyTO = model.getObject();\n \n                 AjaxLink editLink = new IndicatingAjaxLink(\"editLink\") {\n \n@@ -144,9 +152,9 @@ public void onClick(AjaxRequestTarget target) {\n \n                             @Override\n                             public Page createPage() {\n-                                final PasswordPolicyModalPage page =\n-                                        new PasswordPolicyModalPage(\n-                                        mwindow, passwordPolicyTO);\n+                                final PolicyModalPage page =\n+                                        new PolicyModalPage(\n+                                        mwindow, accountPolicyTO);\n                                 return page;\n                             }\n                         });\n@@ -167,17 +175,17 @@ public Page createPage() {\n             }\n         });\n \n-        columns.add(new AbstractColumn<PasswordPolicyTO>(\n+        columns.add(new AbstractColumn<PolicyTO>(\n                 new ResourceModel(\"delete\")) {\n \n             private static final long serialVersionUID = 2054811145491901166L;\n \n             @Override\n             public void populateItem(\n-                    final Item<ICellPopulator<PasswordPolicyTO>> cellItem,\n+                    final Item<ICellPopulator<PolicyTO>> cellItem,\n                     final String componentId,\n-                    final IModel<PasswordPolicyTO> model) {\n-                final PasswordPolicyTO passwordPolicyTO = model.getObject();\n+                    final IModel<PolicyTO> model) {\n+                final PolicyTO accountPolicyTO = model.getObject();\n \n                 AjaxLink deleteLink = new IndicatingDeleteOnConfirmAjaxLink(\n                         \"deleteLink\") {\n@@ -189,16 +197,16 @@ public void populateItem(\n                     public void onClick(final AjaxRequestTarget target) {\n                         try {\n \n-                            policyRestClient.delete(passwordPolicyTO.getId());\n+                            policyRestClient.delete(accountPolicyTO.getId());\n                             info(getString(\"operation_succeded\"));\n \n                         } catch (SyncopeClientCompositeErrorException e) {\n                             error(getString(\"operation_error\"));\n \n                             LOG.error(\"While deleting resource {}({})\",\n                                     new Object[]{\n-                                        passwordPolicyTO.getId(),\n-                                        passwordPolicyTO.getDescription()},\n+                                        accountPolicyTO.getId(),\n+                                        accountPolicyTO.getDescription()},\n                                     e);\n                         }\n \n@@ -241,9 +249,10 @@ public void onClick(final AjaxRequestTarget target) {\n \n                             @Override\n                             public Page createPage() {\n-                                final PasswordPolicyModalPage page =\n-                                        new PasswordPolicyModalPage(\n-                                        mwindow, new PasswordPolicyTO());\n+                                final PolicyModalPage page =\n+                                        new PolicyModalPage(\n+                                        mwindow,\n+                                        getPolicyTOInstance(policyType));\n                                 return page;\n                             }\n                         });\n@@ -306,7 +315,7 @@ public void onClose(AjaxRequestTarget target) {\n     }\n \n     private class PolicyDataProvider\n-            extends SortableDataProvider<PasswordPolicyTO> {\n+            extends SortableDataProvider<PolicyTO> {\n \n         private static final long serialVersionUID = -6976327453925166730L;\n \n@@ -318,30 +327,51 @@ public PolicyDataProvider() {\n             //Default sorting\n             setSort(\"description\", SortOrder.ASCENDING);\n \n-            comparator =\n-                    new SortableDataProviderComparator<PasswordPolicyTO>(this);\n+            comparator = new SortableDataProviderComparator<PolicyTO>(this);\n         }\n \n         @Override\n         public int size() {\n-            return policyRestClient.getPasswordPolicies().size();\n+            return policyRestClient.getPolicies(policyType).size();\n         }\n \n         @Override\n-        public Iterator<PasswordPolicyTO> iterator(\n+        public Iterator<PolicyTO> iterator(\n                 final int first, final int count) {\n \n-            final List<PasswordPolicyTO> policies =\n-                    policyRestClient.getPasswordPolicies();\n+            final List<PolicyTO> policies =\n+                    policyRestClient.getPolicies(policyType);\n \n             Collections.sort(policies, comparator);\n \n             return policies.subList(first, first + count).iterator();\n         }\n \n         @Override\n-        public IModel<PasswordPolicyTO> model(final PasswordPolicyTO object) {\n-            return new CompoundPropertyModel<PasswordPolicyTO>(object);\n+        public IModel<PolicyTO> model(final PolicyTO object) {\n+            return new CompoundPropertyModel<PolicyTO>(object);\n+        }\n+    }\n+\n+    private PolicyTO getPolicyTOInstance(final PolicyType policyType) {\n+        PolicyTO policyTO = null;\n+        switch (policyType) {\n+            case ACCOUNT:\n+            case GLOBAL_ACCOUNT:\n+                policyTO = new AccountPolicyTO();\n+                policyTO.setType(policyType);\n+                break;\n+            case PASSWORD:\n+            case GLOBAL_PASSWORD:\n+                policyTO = new PasswordPolicyTO();\n+                policyTO.setType(policyType);\n+                break;\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                policyTO = new SyncPolicyTO();\n+                policyTO.setType(policyType);\n         }\n+\n+        return policyTO;\n     }\n }","previous_filename":"console/src/main/java/org/syncope/console/pages/panels/PasswordPoliciesPanel.java"},{"sha":"9cadfc09022ab0203643685e561e0da0118a1ba1","filename":"console/src/main/java/org/syncope/console/pages/panels/ResourceSecurityPanel.java","status":"modified","additions":48,"deletions":6,"changes":54,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -29,8 +29,7 @@\n import org.apache.wicket.spring.injection.annot.SpringBean;\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n-import org.syncope.client.to.AccountPolicyTO;\n-import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n import org.syncope.client.to.ResourceTO;\n import org.syncope.console.rest.PolicyRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n@@ -53,6 +52,8 @@ public class ResourceSecurityPanel extends Panel {\n \n     IModel<Map<Long, String>> accountPolicies = null;\n \n+    IModel<Map<Long, String>> syncPolicies = null;\n+\n     public ResourceSecurityPanel(final String id, final ResourceTO resourceTO) {\n \n         super(id);\n@@ -66,8 +67,8 @@ public ResourceSecurityPanel(final String id, final ResourceTO resourceTO) {\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (PasswordPolicyTO policyTO :\n-                        policyRestClient.getPasswordPolicies()) {\n+                for (PolicyTO policyTO :\n+                        policyRestClient.getPolicies(PolicyType.PASSWORD)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;\n@@ -81,8 +82,23 @@ protected Map<Long, String> load() {\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (AccountPolicyTO policyTO :\n-                        policyRestClient.getAccountPolicies()) {\n+                for (PolicyTO policyTO :\n+                        policyRestClient.getPolicies(PolicyType.ACCOUNT)) {\n+                    res.put(policyTO.getId(), policyTO.getDescription());\n+                }\n+                return res;\n+            }\n+        };\n+\n+        syncPolicies = new LoadableDetachableModel<Map<Long, String>>() {\n+\n+            private static final long serialVersionUID = -2012833443695917883L;\n+\n+            @Override\n+            protected Map<Long, String> load() {\n+                Map<Long, String> res = new HashMap<Long, String>();\n+                for (PolicyTO policyTO :\n+                        policyRestClient.getPolicies(PolicyType.SYNC)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;\n@@ -136,6 +152,27 @@ protected Map<Long, String> load() {\n \n         securityContainer.add(accountPolicy);\n         // -------------------------------\n+\n+        // -------------------------------\n+        // Sync policy specification\n+        // -------------------------------\n+        final AjaxDropDownChoicePanel<Long> syncPolicy =\n+                new AjaxDropDownChoicePanel<Long>(\n+                \"syncPolicy\",\n+                getString(\"syncPolicy\"),\n+                new PropertyModel(resourceTO, \"syncPolicy\"),\n+                false);\n+\n+        syncPolicy.setChoiceRenderer(\n+                new PolicyRenderer(PolicyType.SYNC));\n+\n+        syncPolicy.setChoices(\n+                new ArrayList<Long>(syncPolicies.getObject().keySet()));\n+\n+        ((DropDownChoice) syncPolicy.getField()).setNullValid(true);\n+\n+        securityContainer.add(syncPolicy);\n+        // -------------------------------\n     }\n \n     private class PolicyRenderer extends ChoiceRenderer<Long> {\n@@ -152,10 +189,15 @@ public PolicyRenderer(final PolicyType type) {\n         @Override\n         public Object getDisplayValue(final Long object) {\n             switch (type) {\n+                case GLOBAL_ACCOUNT:\n                 case ACCOUNT:\n                     return accountPolicies.getObject().get(object);\n+                case GLOBAL_PASSWORD:\n                 case PASSWORD:\n                     return passwordPolicies.getObject().get(object);\n+                case GLOBAL_SYNC:\n+                case SYNC:\n+                    return syncPolicies.getObject().get(object);\n                 default:\n                     return \"\";\n             }"},{"sha":"423d73f27a23663348127726d68928950151787d","filename":"console/src/main/java/org/syncope/console/pages/panels/RoleSecurityPanel.java","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FRoleSecurityPanel.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -32,8 +32,7 @@\n import org.slf4j.Logger;\n import org.slf4j.LoggerFactory;\n import org.syncope.client.to.AbstractAttributableTO;\n-import org.syncope.client.to.AccountPolicyTO;\n-import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n import org.syncope.console.rest.PolicyRestClient;\n import org.syncope.console.wicket.markup.html.form.AjaxCheckBoxPanel;\n import org.syncope.console.wicket.markup.html.form.AjaxDropDownChoicePanel;\n@@ -70,8 +69,8 @@ public <T extends AbstractAttributableTO> RoleSecurityPanel(\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (PasswordPolicyTO policyTO :\n-                        policyRestClient.getPasswordPolicies()) {\n+                for (PolicyTO policyTO :\n+                        policyRestClient.getPolicies(PolicyType.PASSWORD)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;\n@@ -85,8 +84,8 @@ protected Map<Long, String> load() {\n             @Override\n             protected Map<Long, String> load() {\n                 Map<Long, String> res = new HashMap<Long, String>();\n-                for (AccountPolicyTO policyTO :\n-                        policyRestClient.getAccountPolicies()) {\n+                for (PolicyTO policyTO :\n+                        policyRestClient.getPolicies(PolicyType.ACCOUNT)) {\n                     res.put(policyTO.getId(), policyTO.getDescription());\n                 }\n                 return res;"},{"sha":"f500c9506ccb3018342dadaab6a7e2f80c25818b","filename":"console/src/main/java/org/syncope/console/rest/InvalidPolicyType.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FInvalidPolicyType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FInvalidPolicyType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FInvalidPolicyType.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -0,0 +1,27 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.console.rest;\n+\n+public class InvalidPolicyType extends Exception {\n+\n+    private static final long serialVersionUID = -1230154509336169378L;\n+\n+    public InvalidPolicyType() {\n+    }\n+\n+    public InvalidPolicyType(String msg) {\n+        super(msg);\n+    }\n+}"},{"sha":"d9bd6607cf658b40dea13a76d32c8dd1657edac2","filename":"console/src/main/java/org/syncope/console/rest/PolicyRestClient.java","status":"modified","additions":141,"deletions":84,"changes":225,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FPolicyRestClient.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -18,121 +18,178 @@\n import java.util.Arrays;\n import java.util.List;\n import org.springframework.stereotype.Component;\n-import org.syncope.client.mod.PasswordPolicyMod;\n+import org.syncope.client.mod.PolicyMod;\n import org.syncope.client.to.AccountPolicyTO;\n import org.syncope.client.to.PasswordPolicyTO;\n+import org.syncope.client.to.PolicyTO;\n+import org.syncope.client.to.SyncPolicyTO;\n+import org.syncope.types.PolicyType;\n \n /**\n  * Console client for invoking Rest Policy services.\n  */\n-@Component\n+ @Component\n public class PolicyRestClient extends AbstractBaseRestClient {\n \n-    public PasswordPolicyTO getGlobalPasswordPolicy() {\n-        try {\n-            return restTemplate.getForObject(\n-                    baseURL + \"policy/password/global/read\", PasswordPolicyTO.class);\n-        } catch (Exception e) {\n-            LOG.debug(\"No password policy found\", e);\n-            return new PasswordPolicyTO();\n-        }\n-    }\n-\n-    public List<PasswordPolicyTO> getPasswordPolicies() {\n-        final List<PasswordPolicyTO> policies =\n-                new ArrayList<PasswordPolicyTO>();\n+    public <T extends PolicyTO> T getGlobalPolicy(final PolicyType type) {\n \n-        PasswordPolicyTO[] passwordPolicies = null;\n+        T policy = null;\n \n         try {\n \n-            passwordPolicies = restTemplate.getForObject(\n-                    baseURL + \"policy/password/list\",\n-                    PasswordPolicyTO[].class);\n-        } catch (Exception ignore) {\n-            LOG.debug(\"No password policy found\", ignore);\n-        }\n+            switch (type) {\n+                case GLOBAL_ACCOUNT:\n+                    try {\n+                        policy = (T) restTemplate.getForObject(\n+                                baseURL + \"policy/account/global/read\",\n+                                AccountPolicyTO.class);\n+                    } catch (Exception e) {\n+                        LOG.debug(\"No account policy found\", e);\n+                        policy = (T) new AccountPolicyTO();\n+                    }\n+                    break;\n+                case GLOBAL_PASSWORD:\n+                    try {\n+                        policy = (T) restTemplate.getForObject(\n+                                baseURL + \"policy/password/global/read\",\n+                                PasswordPolicyTO.class);\n+                    } catch (Exception e) {\n+                        LOG.debug(\"No password policy found\", e);\n+                        policy = (T) new PasswordPolicyTO();\n+                    }\n+                    break;\n+                case GLOBAL_SYNC:\n+                    try {\n+                        policy = (T) restTemplate.getForObject(\n+                                baseURL + \"policy/sync/global/read\",\n+                                SyncPolicyTO.class);\n+                    } catch (Exception e) {\n+                        LOG.debug(\"No password policy found\", e);\n+                        policy = (T) new SyncPolicyTO();\n+                    }\n+                    break;\n+                default:\n+                    throw new Exception(\"Invalid policy type\");\n+            }\n \n-        if (passwordPolicies != null) {\n-            policies.addAll(Arrays.asList(passwordPolicies));\n-        }\n-\n-        PasswordPolicyTO globalPasswordPolicy = null;\n-\n-        try {\n-            globalPasswordPolicy =\n-                    restTemplate.getForObject(\n-                    baseURL + \"policy/password/global/read\",\n-                    PasswordPolicyTO.class);\n         } catch (Exception ignore) {\n-            LOG.debug(\"No global password policy found\", ignore);\n+            LOG.error(\"Invalid policy type\", ignore);\n         }\n \n-        if (globalPasswordPolicy != null) {\n-            policies.add(0, globalPasswordPolicy);\n-        }\n-\n-        return policies;\n+        return policy;\n     }\n \n-    public List<AccountPolicyTO> getAccountPolicies() {\n-        final List<AccountPolicyTO> policies =\n-                new ArrayList<AccountPolicyTO>();\n-\n-        AccountPolicyTO[] accountPolicies = null;\n+    public <T extends PolicyTO> List<T> getPolicies(final PolicyType type) {\n+        final List<T> res = new ArrayList<T>();\n \n-        try {\n+        T[] policies = null;\n \n-            accountPolicies = restTemplate.getForObject(\n-                    baseURL + \"policy/account/list\",\n-                    AccountPolicyTO[].class);\n-        } catch (Exception ignore) {\n-            LOG.debug(\"No password policy found\", ignore);\n-        }\n+        final Class reference;\n+        final Class globalReference;\n+        final String policy;\n \n-        if (accountPolicies != null) {\n-            policies.addAll(Arrays.asList(accountPolicies));\n-        }\n+        try {\n \n-        AccountPolicyTO globalAccountPolicy = null;\n+            switch (type) {\n+                case ACCOUNT:\n+                    reference = AccountPolicyTO[].class;\n+                    globalReference = AccountPolicyTO.class;\n+                    policy = \"account\";\n+                    break;\n+                case PASSWORD:\n+                    reference = PasswordPolicyTO[].class;\n+                    globalReference = PasswordPolicyTO.class;\n+                    policy = \"password\";\n+                    break;\n+                case SYNC:\n+                    reference = SyncPolicyTO[].class;\n+                    globalReference = SyncPolicyTO.class;\n+                    policy = \"sync\";\n+                    break;\n+                default:\n+                    throw new Exception(\"Invalid policy type\");\n+            }\n+\n+            try {\n+                policies = (T[]) restTemplate.getForObject(\n+                        baseURL + \"policy/\" + policy + \"/list\",\n+                        reference);\n+            } catch (Exception ignore) {\n+                LOG.debug(\"No policy found\", ignore);\n+            }\n+\n+            if (policies != null) {\n+                res.addAll(Arrays.asList(policies));\n+            }\n+\n+            PolicyTO globalPolicy = null;\n+\n+            try {\n+                globalPolicy = (T) restTemplate.getForObject(\n+                        baseURL + \"policy/\" + policy + \"/global/read\",\n+                        globalReference);\n+            } catch (Exception ignore) {\n+                LOG.warn(\"No global policy found\", ignore);\n+            }\n+\n+            if (globalPolicy != null) {\n+                res.add(0, (T) globalPolicy);\n+            }\n \n-        try {\n-            globalAccountPolicy =\n-                    restTemplate.getForObject(\n-                    baseURL + \"policy/account/global/read\",\n-                    AccountPolicyTO.class);\n         } catch (Exception ignore) {\n-            LOG.debug(\"No global password policy found\", ignore);\n+            LOG.error(\"No policy found\", ignore);\n         }\n \n-        if (globalAccountPolicy != null) {\n-            policies.add(0, globalAccountPolicy);\n-        }\n-\n-        return policies;\n+        return res;\n     }\n \n-    public AccountPolicyTO getGlobalAccountPolicy() {\n-        try {\n-            return restTemplate.getForObject(\n-                    baseURL + \"policy/acount/global/read\", AccountPolicyTO.class);\n-        } catch (Exception e) {\n-            LOG.debug(\"No account policy found\", e);\n-            return new AccountPolicyTO();\n+    public <T extends PolicyTO> T createPolicy(final T policy)\n+            throws InvalidPolicyType {\n+\n+        switch (policy.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                return (T) restTemplate.postForObject(\n+                        baseURL + \"policy/account/create\",\n+                        policy, AccountPolicyTO.class);\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                return (T) restTemplate.postForObject(\n+                        baseURL + \"policy/password/create\",\n+                        policy, PasswordPolicyTO.class);\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                return (T) restTemplate.postForObject(\n+                        baseURL + \"policy/sync/create\",\n+                        policy, SyncPolicyTO.class);\n+            default:\n+                throw new InvalidPolicyType(\"Invalid type \" + policy.getType());\n         }\n     }\n \n-    public PasswordPolicyTO createPasswordPolicy(\n-            final PasswordPolicyTO policy) {\n-        return restTemplate.postForObject(baseURL + \"policy/password/create\",\n-                policy, PasswordPolicyTO.class);\n-    }\n-\n-    public PasswordPolicyTO updatePasswordPolicy(\n-            final PasswordPolicyMod policy) {\n-\n-        return restTemplate.postForObject(baseURL + \"policy/password/update\",\n-                policy, PasswordPolicyTO.class);\n+    public <T extends PolicyMod, E extends PolicyTO> E updatePolicy(\n+            final T policy)\n+            throws InvalidPolicyType {\n+\n+        switch (policy.getType()) {\n+            case GLOBAL_ACCOUNT:\n+            case ACCOUNT:\n+                return (E) restTemplate.postForObject(\n+                        baseURL + \"policy/account/update\",\n+                        policy, AccountPolicyTO.class);\n+            case GLOBAL_PASSWORD:\n+            case PASSWORD:\n+                return (E) restTemplate.postForObject(\n+                        baseURL + \"policy/password/update\",\n+                        policy, PasswordPolicyTO.class);\n+            case GLOBAL_SYNC:\n+            case SYNC:\n+                return (E) restTemplate.postForObject(\n+                        baseURL + \"policy/sync/update\",\n+                        policy, SyncPolicyTO.class);\n+            default:\n+                throw new InvalidPolicyType(\"Invalid type \" + policy.getType());\n+        }\n     }\n \n     public void delete(final Long id) {"},{"sha":"77cc97d0b736a12b8b03005ab7a675771cba45e5","filename":"console/src/main/java/org/syncope/console/rest/RoleRestClient.java","status":"modified","additions":3,"deletions":6,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fconsole%2Frest%2FRoleRestClient.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -65,8 +65,7 @@ public RoleTO readRole(Long id) {\n \n         try {\n             roleTO = restTemplate.getForObject(\n-                    baseURL + \"role/read/{roleId}.json\",\n-                    RoleTO.class, id);\n+                    baseURL + \"role/read/{roleId}.json\", RoleTO.class, id);\n         } catch (SyncopeClientCompositeErrorException e) {\n             LOG.error(\"While reading a role\", e);\n         }\n@@ -80,8 +79,7 @@ public RoleTO readRole(Long id) {\n      */\n     public void updateRole(RoleMod roleMod) {\n         restTemplate.postForObject(\n-                baseURL + \"role/update\", roleMod,\n-                RoleTO.class);\n+                baseURL + \"role/update\", roleMod, RoleTO.class);\n     }\n \n     /**\n@@ -90,7 +88,6 @@ public void updateRole(RoleMod roleMod) {\n      * @return schemaTO\n      */\n     public void deleteRole(Long id) {\n-        restTemplate.delete(baseURL\n-                + \"role/delete/{roleId}.json\", id);\n+        restTemplate.delete(baseURL + \"role/delete/{roleId}.json\", id);\n     }\n }"},{"sha":"9e42c773d6ad219f35041f36ebc008276aabb2ce","filename":"console/src/main/resources/org/syncope/console/pages/Configuration.html","status":"modified","additions":12,"deletions":7,"changes":19,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.html?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -36,6 +36,8 @@\n             <li><a href=\"#tabs-3\"><span><wicket:message key=\"tab3\"/></span></a></li>\n             <li><a href=\"#tabs-4\"><span><wicket:message key=\"tab4\"/></span></a></li>\n             <li><a href=\"#tabs-5\"><span><wicket:message key=\"tab5\"/></span></a></li>\n+            <li><a href=\"#tabs-6\"><span><wicket:message key=\"tab6\"/></span></a></li>\n+            <li><a href=\"#tabs-7\"><span><wicket:message key=\"tab7\"/></span></a></li>\n         </ul>\n         <div id=\"tabs-1\">\n \n@@ -63,10 +65,15 @@\n             </a>\n         </div>\n         <div id=\"tabs-2\">\n-            <span wicket:id=\"passwordPoliciesPanel\">[passwordPolicies]</span>\n+            <span wicket:id=\"passwordPoliciesPanel\">[password policies]</span>\n         </div>\n         <div id=\"tabs-3\">\n-\n+            <span wicket:id=\"accountPoliciesPanel\">[account policies]</span>\n+        </div>\n+        <div id=\"tabs-4\">\n+            <span wicket:id=\"syncPoliciesPanel\">[sync policies]</span>\n+        </div>\n+        <div id=\"tabs-5\">\n             <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n                 <span wicket:id=\"workflowDefContainer\">\n                     <form wicket:id=\"workflowDefForm\">\n@@ -85,8 +92,7 @@\n                 </span>\n             </div>\n         </div>\n-        <div id=\"tabs-4\">\n-\n+        <div id=\"tabs-6\">\n             <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n                 <span wicket:id=\"coreLoggerContainer\">\n                     <table class=\"ui-widget ui-widget-content table-hover\">\n@@ -106,8 +112,7 @@\n                 </span>\n             </div>\n         </div>\n-        <div id=\"tabs-5\">\n-\n+        <div id=\"tabs-7\">\n             <div id=\"users-contain\" class=\"ui-widget\" style=\"width:inherit\">\n                 <span wicket:id=\"consoleLoggerContainer\">\n                     <table class=\"ui-widget ui-widget-content table-hover\">\n@@ -134,4 +139,4 @@\n         </div>    \n \n     </div>\n-</wicket:extend>\n\\ No newline at end of file\n+</wicket:extend>"},{"sha":"d7c2c1bce8818032a03f65b11ab7a0cbc13e3f7e","filename":"console/src/main/resources/org/syncope/console/pages/Configuration.properties","status":"modified","additions":6,"deletions":4,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration.properties?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -1,14 +1,16 @@\n key=Key\n value=Value\n tab1=Parameters\n-tab2=Password Policy\n-tab3=Workflow\n-tab4=Core Log\n+tab2=Password Policies\n+tab3=Account Policies\n+tab4=Sync Policies\n+tab5=Workflow\n+tab6=Core Log\n+tab7=Console Log\n edit=Edit\n delete=Delete\n create_configuration=Create new configuration\n db_export=DB export\n logger=Logger\n level=Level\n-tab5=Console Log\n submit=Save"},{"sha":"6ca2dbbb0562cf22fee7c688c1b7573cfc555f13","filename":"console/src/main/resources/org/syncope/console/pages/Configuration_it.properties","status":"modified","additions":5,"deletions":3,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FConfiguration_it.properties?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -2,13 +2,15 @@ key=Chiave\n value=Valore\n tab1=Parametri\n tab2=Password Policy\n-tab3=Workflow\n-tab4=Log Core\n+tab3=Account Policy\n+tab4=Sync Policy\n+tab5=Workflow\n+tab6=Log Core\n+tab7=Log Console\n edit=Modifica\n delete=Elimina\n create_configuration=Crea nuova configurazione\n db_export=Esportazione DB\n logger=Logger\n level=Livello\n-tab5=Log Console\n submit=Salva"},{"sha":"505e71a304ba766c35ed62b361ee96bc667d8e9c","filename":"console/src/main/resources/org/syncope/console/pages/PolicyModalPage.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.html?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","previous_filename":"console/src/main/resources/org/syncope/console/pages/PasswordPolicyModalPage.html"},{"sha":"b93e17d163d264e6170d9e35a8984ec30c646ec6","filename":"console/src/main/resources/org/syncope/console/pages/PolicyModalPage.properties","status":"renamed","additions":27,"deletions":2,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage.properties?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -1,4 +1,4 @@\n-title=Password policy management\n+title=Account policy management\n \n id=Id\n description=Description\n@@ -8,6 +8,9 @@ apply=Save\n policyDescription = Policy Description\n policySpecification = Policy Specification\n \n+#-----------------------------\n+# Password policy specification properties\n+#-----------------------------\n minLength=Minimum size\n maxLength=Maximum size\n historyLength=History length\n@@ -31,4 +34,26 @@ mustntStartWithAlpha=Mustn't start with digit alphanumeric character\n mustEndWithNonAlpha=Must end with non alphanumeric character\n mustEndWithAlpha=Must end with digit alphanumeric character\n mustntEndWithNonAlpha=Mustn't end with non alphanumeric character\n-mustntEndWithAlpha=Mustn't end with digit alphanumeric character\n\\ No newline at end of file\n+mustntEndWithAlpha=Mustn't end with digit alphanumeric character\n+#-----------------------------\n+\n+#-----------------------------\n+# Account policy specification properties\n+#-----------------------------\n+#minLength=Minimum size\n+#maxLength=Maximum size\n+#wordsNotPermitted=Substrings not permitted\n+#schemasNotPermitted=Mustn't contain value of the following attributes\n+#prefixesNotPermitted=Pefixes not permitted\n+#suffixesNotPermitted=Suffixes not permitted\n+allUpperCase=All upper case\n+allLowerCase=All lower case\n+propagateSuspension=Propagate suspension\n+permittedLoginRetries=Maximum number of subsequent failed logins\n+#-----------------------------\n+\n+#-----------------------------\n+# Sync policy specification properties\n+#-----------------------------\n+fake=toBeDefined\n+#-----------------------------\n\\ No newline at end of file","previous_filename":"console/src/main/resources/org/syncope/console/pages/PasswordPolicyModalPage.properties"},{"sha":"30ec6e0d7b81062eaf25a5bf34a2a68a4334b00f","filename":"console/src/main/resources/org/syncope/console/pages/PolicyModalPage_it.properties","status":"renamed","additions":27,"deletions":2,"changes":29,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2FPolicyModalPage_it.properties?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -1,4 +1,4 @@\n-title=Gestiona Password Policy\n+title=Gestiona Account Policy\n \n id=Id\n description=Descrizione\n@@ -8,6 +8,9 @@ apply=Salva\n policyDescription = Descrizione Policy\n policySpecification = Specifica Policy\n \n+#-----------------------------\n+# Password policy specification properties\n+#-----------------------------\n minLength=Lunghezza minima\n maxLength=Lunghezza massima\n historyLength=Lunghezza storico\n@@ -31,4 +34,26 @@ mustntStartWithAlpha=Non deve iniziare con un caratter alfanumerico\n mustEndWithNonAlpha=Deve terminare con un caratter non alfanumerico\n mustEndWithAlpha=Deve terminare con un caratter alfanumerico\n mustntEndWithNonAlpha=Non deve terminare con un caratter non alfanumerico\n-mustntEndWithAlpha=Non deve terminare con un caratter alfanumerico\n\\ No newline at end of file\n+mustntEndWithAlpha=Non deve terminare con un caratter alfanumerico\n+#-----------------------------\n+\n+#-----------------------------\n+# Account policy specification properties\n+#-----------------------------\n+#minLength=Lunghezza minima\n+#maxLength=Lunghezza massima\n+#wordsNotPermitted=Sottostringhe non permesse\n+#schemasNotPermitted=Non deve contenere i valore dei seguenti attributi\n+#prefixesNotPermitted=Prefissi non permessi\n+#suffixesNotPermitted=Suffissi non permessi\n+allUpperCase=Tutte maiuscole\n+allLowerCase=Tutte minuscole\n+propagateSuspension=Propagate sospensione\n+permittedLoginRetries=Numero massimo di login consecutivi falliti\n+#-----------------------------\n+\n+#-----------------------------\n+# Sync policy specification properties\n+#-----------------------------\n+fake=toBeDefined\n+#-----------------------------\n\\ No newline at end of file","previous_filename":"console/src/main/resources/org/syncope/console/pages/PasswordPolicyModalPage_it.properties"},{"sha":"fc5f326d23e23f240cb454a651de384e2a19d4f3","filename":"console/src/main/resources/org/syncope/console/pages/panels/PoliciesPanel.html","status":"renamed","additions":0,"deletions":0,"changes":0,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.html?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","previous_filename":"console/src/main/resources/org/syncope/console/pages/panels/PasswordPoliciesPanel.html"},{"sha":"f6addc30cbe37109a834d83748c3b19af87943a1","filename":"console/src/main/resources/org/syncope/console/pages/panels/PoliciesPanel.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel.properties?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -1,7 +1,7 @@\n id=Id\n description=Description\n type=Type\n-title=Password Policies\n+title=Account Policies\n delete=Delete\n edit=Edit\n create=Create","previous_filename":"console/src/main/resources/org/syncope/console/pages/panels/PasswordPoliciesPanel.properties"},{"sha":"450df25ccebfc72e9bc73f91754cac96e76d4fc3","filename":"console/src/main/resources/org/syncope/console/pages/panels/PoliciesPanel_it.properties","status":"renamed","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FPoliciesPanel_it.properties?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -1,7 +1,7 @@\n id=Id\n description=Descrizione\n type=Tipo\n-title=Password Policy\n+title=Account Policy\n delete=Rimuovi\n edit=Modifica\n create=Crea","previous_filename":"console/src/main/resources/org/syncope/console/pages/panels/PasswordPoliciesPanel_it.properties"},{"sha":"f0255b31f46982690e2c603ccd6d4523e8cd697b","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResourceSecurityPanel.html","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.html?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -36,6 +36,17 @@\n                     </span>\n                 </div>\n             </div>\n+\n+            <div class=\"tablerow\">\n+                <div class=\"tablecolumn_label short_dynamicsize\">\n+                    <label for=\"syncPolicy\"><wicket:message key=\"syncPolicy\"/></label>\n+                </div>\n+                <div class=\"tablecolumn_field medium_dynamicsize\">\n+                    <span wicket:id=\"syncPolicy\">\n+                        [panel for dynamic input type markup]\n+                    </span>\n+                </div>\n+            </div>\n         </div>\n     </wicket:panel>\n </html>"},{"sha":"04fb6a529bc3899672514e0300d9de670da710dc","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResourceSecurityPanel.properties","status":"modified","additions":2,"deletions":1,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel.properties?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -1,2 +1,3 @@\n passwordPolicy = Password Policy\n-accountPolicy = Account Policy\n\\ No newline at end of file\n+accountPolicy = Account Policy\n+syncPolicy = Sync Policy\n\\ No newline at end of file"},{"sha":"8d4fb68e454d220af186bda354164823b4cc2dcb","filename":"console/src/main/resources/org/syncope/console/pages/panels/ResourceSecurityPanel_it.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceSecurityPanel_it.properties?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -1,2 +1,3 @@\n passwordPolicy = Password Policy\n accountPolicy = Account Policy\n+syncPolicy = Sync Policy"},{"sha":"93e44f91ffc53fc9e7253b6c58347730f58077f3","filename":"console/src/test/java/org/syncope/console/ConfigurationTestITCase.java","status":"modified","additions":19,"deletions":4,"changes":23,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fconsole%2FConfigurationTestITCase.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -60,13 +60,28 @@ public void browsePasswordPolicy() {\n         assertTrue(selenium.isTextPresent(\"new description\"));\n     }\n \n+    @Test\n+    public void browseAccountPolicy() {\n+        selenium.setSpeed(\"1000\");\n+\n+        selenium.click(\"css=img[alt=\\\"Configuration\\\"]\");\n+        selenium.waitForPageToLoad(\"30000\");\n+        selenium.click(\"//div[3]/ul/li[3]/a\");\n+        selenium.click(\"//div[3]/div[3]/span/div/a\");\n+\n+        assertTrue(selenium.isElementPresent(\"//input[@name='id:textField']\"));\n+        selenium.type(\"name=description:textField\", \"new description\");\n+        selenium.click(\"//div[2]/form/div[3]/input\");\n+        assertTrue(selenium.isTextPresent(\"new description\"));\n+    }\n+\n     @Test\n     public void browseWorkflowDef() {\n         selenium.setSpeed(\"1000\");\n \n         selenium.click(\"css=img[alt=\\\"Configuration\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//div[@id='tabs']/ul/li[3]/a/span\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[5]/a/span\");\n         assertTrue(selenium.isElementPresent(\"//*[@id=\\\"workflowDefArea\\\"]\"));\n     }\n \n@@ -90,9 +105,9 @@ public void setLogLevel() {\n \n         selenium.click(\"css=img[alt=\\\"Configuration\\\"]\");\n         selenium.waitForPageToLoad(\"30000\");\n-        selenium.click(\"//div[@id='tabs']/ul/li[4]/a/span\");\n-        selenium.select(\"//div[4]/div/span/table/tbody/tr/td[2]/select\",\n-                \"label=ERROR\");\n+        selenium.click(\"//div[@id='tabs']/ul/li[6]/a/span\");\n+        selenium.select(\n+                \"//div[6]/div/span/table/tbody/tr/td[2]/select\", \"label=ERROR\");\n         assertTrue(selenium.isTextPresent(\"Operation executed successfully\"));\n     }\n }"},{"sha":"b5570553c892e6245085308af4e147767cd34079","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractBaseBean.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractBaseBean.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -49,7 +49,7 @@ public final Boolean isBooleanAsInteger(final Integer property) {\n      * @return the integer corresponding to the property param\n      */\n     public final Integer getBooleanAsInteger(final Boolean value) {\n-        return value.equals(Boolean.TRUE) ? 1 : 0;\n+        return Boolean.TRUE.equals(value) ? 1 : 0;\n     }\n \n     /**"},{"sha":"4c9cafcaae7a17c30b0961127dc7702344451557","filename":"core/src/main/java/org/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":13,"deletions":1,"changes":14,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -142,6 +142,9 @@ public class ExternalResource extends AbstractBaseBean {\n     @ManyToOne(fetch = FetchType.EAGER, optional = true)\n     private AccountPolicy accountPolicy;\n \n+    @ManyToOne(fetch = FetchType.EAGER, optional = true)\n+    private SyncPolicy syncPolicy;\n+\n     /**\n      * Configuration properties that are overridden from the connector instance.\n      */\n@@ -351,6 +354,14 @@ public void setPasswordPolicy(PasswordPolicy passwordPolicy) {\n         this.passwordPolicy = passwordPolicy;\n     }\n \n+    public SyncPolicy getSyncPolicy() {\n+        return syncPolicy;\n+    }\n+\n+    public void setSyncPolicy(SyncPolicy syncPolicy) {\n+        this.syncPolicy = syncPolicy;\n+    }\n+\n     public void setConnectorConfigurationProperties(\n             final Set<ConnConfProperty> properties) {\n \n@@ -364,7 +375,8 @@ public Set<ConnConfProperty> getConfiguration() {\n \n         Set<ConnConfProperty> deserializedSet;\n         if (StringUtils.isNotBlank(xmlConfiguration)) {\n-            deserializedSet = XmlSerializer.<HashSet<ConnConfProperty>>deserialize(xmlConfiguration);\n+            deserializedSet = XmlSerializer.<HashSet<ConnConfProperty>>\n+                    deserialize(xmlConfiguration);\n             if (deserializedSet != null) {\n                 result = deserializedSet;\n             }"},{"sha":"50aba5c4d12bd850f233148193451bbfdfac6fe4","filename":"core/src/main/java/org/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -33,6 +33,7 @@\n import java.util.TimeZone;\n import javax.crypto.Cipher;\n import javax.crypto.spec.SecretKeySpec;\n+import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n@@ -47,6 +48,8 @@\n import javax.persistence.TemporalType;\n import javax.persistence.Transient;\n import javax.validation.Valid;\n+import javax.validation.constraints.Max;\n+import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n import org.apache.commons.lang.RandomStringUtils;\n import org.hibernate.annotations.Type;\n@@ -160,6 +163,11 @@ public class SyncopeUser extends AbstractAttributable {\n     @Temporal(TemporalType.TIMESTAMP)\n     private Date changePwdDate;\n \n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer suspended;\n+\n     public SyncopeUser() {\n         super();\n \n@@ -168,6 +176,8 @@ public SyncopeUser() {\n         derivedAttributes = new ArrayList<UDerAttr>();\n         virtualAttributes = new ArrayList<UVirAttr>();\n         passwordHistory = new ArrayList<String>();\n+        failedLogins = 0;\n+        suspended = 0;\n     }\n \n     @Override\n@@ -432,7 +442,7 @@ public void setCreationDate(final Date creationDate) {\n     }\n \n     public Integer getFailedLogins() {\n-        return failedLogins;\n+        return failedLogins != null ? failedLogins : 0;\n     }\n \n     public void setFailedLogins(final Integer failedLogins) {\n@@ -455,6 +465,14 @@ public void setUsername(final String username) {\n         this.username = username;\n     }\n \n+    public void setSuspended(final Boolean suspended) {\n+        this.suspended = getBooleanAsInteger(suspended);\n+    }\n+\n+    public Boolean getSuspended() {\n+        return isBooleanAsInteger(suspended);\n+    }\n+\n     private String encodePassword(\n             final String password, final CipherAlgorithm cipherAlgoritm)\n             throws NoSuchAlgorithmException,"},{"sha":"d01288ba38fd4abc4f4df27b18b442eebcf0bc20","filename":"core/src/main/java/org/syncope/core/persistence/dao/PolicyDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FPolicyDAO.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -28,6 +28,8 @@ public interface PolicyDAO extends DAO {\n \n     Policy getGlobalAccountPolicy();\n \n+    Policy getGlobalSyncPolicy();\n+\n     List<Policy> findAll();\n \n     Policy save(Policy policy);"},{"sha":"0a7bf830a181c5cfef8b43d73c287f474a4f3840","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/PolicyDAOImpl.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FPolicyDAOImpl.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -62,6 +62,17 @@ public Policy getGlobalAccountPolicy() {\n \n     }\n \n+    @Override\n+    public Policy getGlobalSyncPolicy() {\n+        List<Policy> policies = find(PolicyType.GLOBAL_SYNC);\n+        if (policies != null && !policies.isEmpty()) {\n+            return policies.get(0);\n+        } else {\n+            return null;\n+        }\n+\n+    }\n+\n     @Override\n     public List<Policy> findAll() {\n         Query query = entityManager.createQuery(\"SELECT e FROM Policy e\");"},{"sha":"1a19f534a1936872b8525b4f378277d9c6b291bb","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/PolicyValidator.java","status":"modified","additions":23,"deletions":3,"changes":26,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FPolicyValidator.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -20,6 +20,7 @@\n import org.syncope.core.persistence.beans.AccountPolicy;\n import org.syncope.core.persistence.beans.PasswordPolicy;\n import org.syncope.core.persistence.beans.Policy;\n+import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.types.AccountPolicySpec;\n import org.syncope.types.EntityViolationType;\n@@ -51,7 +52,8 @@ public boolean isValid(\n                 || ((object.getType() == PolicyType.ACCOUNT\n                 || object.getType() == PolicyType.GLOBAL_ACCOUNT)\n                 && !(object.getSpecification() instanceof AccountPolicySpec))\n-                || (object.getType() == PolicyType.SYNC\n+                || ((object.getType() == PolicyType.SYNC\n+                || object.getType() == PolicyType.GLOBAL_SYNC)\n                 && !(object.getSpecification() instanceof SyncPolicySpec)))) {\n \n             context.buildConstraintViolationWithTemplate(\n@@ -86,15 +88,15 @@ public boolean isValid(\n \n             case GLOBAL_ACCOUNT:\n \n-                // just one policy with type ACCOUNT\n+                // just one GLOBAL_ACCOUNT policy\n                 final AccountPolicy accountPolicy =\n                         (AccountPolicy) policyDAO.getGlobalAccountPolicy();\n \n                 if (accountPolicy != null\n                         && !accountPolicy.getId().equals(object.getId())) {\n \n                     context.buildConstraintViolationWithTemplate(\n-                            \"Account policy already exists\").addNode(\n+                            \"Global Account policy already exists\").addNode(\n                             EntityViolationType.InvalidAccountPolicy.toString()).\n                             addConstraintViolation();\n \n@@ -105,6 +107,24 @@ public boolean isValid(\n             case ACCOUNT:\n                 break;\n \n+            case GLOBAL_SYNC:\n+\n+                // just one GLOBAL_SYNC policy\n+                final SyncPolicy syncPolicy =\n+                        (SyncPolicy) policyDAO.getGlobalSyncPolicy();\n+\n+                if (syncPolicy != null\n+                        && !syncPolicy.getId().equals(object.getId())) {\n+\n+                    context.buildConstraintViolationWithTemplate(\n+                            \"Global Sync policy already exists\").addNode(\n+                            EntityViolationType.InvalidSyncPolicy.toString()).\n+                            addConstraintViolation();\n+\n+                    return false;\n+                }\n+                break;\n+\n             case SYNC:\n             default:\n         }"},{"sha":"8bd5ca0dac9a6a3d8864f7bdcaec1b04d5b7466e","filename":"core/src/main/java/org/syncope/core/persistence/validation/entity/SyncopeUserValidator.java","status":"modified","additions":20,"deletions":18,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fvalidation%2Fentity%2FSyncopeUserValidator.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -27,8 +27,10 @@\n import org.syncope.core.persistence.beans.role.SyncopeRole;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.core.persistence.dao.PolicyDAO;\n+import org.syncope.core.policy.AccountPolicyEnforcer;\n import org.syncope.core.policy.PasswordPolicyEnforcer;\n import org.syncope.core.policy.PolicyEvaluator;\n+import org.syncope.types.AccountPolicySpec;\n import org.syncope.types.EntityViolationType;\n import org.syncope.types.PasswordPolicySpec;\n \n@@ -42,7 +44,10 @@ public class SyncopeUserValidator extends AbstractValidator\n     private PolicyEvaluator evaluator;\n \n     @Autowired\n-    private PasswordPolicyEnforcer enforcer;\n+    private PasswordPolicyEnforcer ppEnforcer;\n+\n+    @Autowired\n+    private AccountPolicyEnforcer apEnforcer;\n \n     @Override\n     public void initialize(final SyncopeUserCheck constraintAnnotation) {\n@@ -54,6 +59,7 @@ public boolean isValid(\n             final ConstraintValidatorContext context) {\n \n         context.disableDefaultConstraintViolation();\n+\n         // ------------------------------\n         // Verify password policies\n         // ------------------------------\n@@ -75,7 +81,7 @@ public boolean isValid(\n                             evaluator.evaluate(policy, object);\n \n                     // enforce policy\n-                    enforcer.enforce(\n+                    ppEnforcer.enforce(\n                             passwordPolicy, policy.getType(), password);\n                 }\n             }\n@@ -98,39 +104,35 @@ public boolean isValid(\n         // ------------------------------\n         // Verify account policies\n         // ------------------------------\n-        LOG.debug(\"Password Policy enforcement\");\n+        LOG.debug(\"Account Policy enforcement\");\n \n         final List<AccountPolicy> accountPolicies =\n                 getAccountPolicies((SyncopeUser) object);\n \n         try {\n             // username missed\n-//                for (Policy policy : accountPolicies) {\n-//                        // evaluate policy\n-//                        final PasswordPolicySpec passwordPolicy =\n-//                                evaluator.evaluate(policy, object);\n-//\n-//                        // enforce policy\n-//                        enforcer.enforce(\n-//                                passwordPolicy, policy.getType(), password);\n-//                }\n+            for (Policy policy : accountPolicies) {\n+\n+                // evaluate policy\n+                final AccountPolicySpec accountPolicy =\n+                        evaluator.evaluate(policy, object);\n+\n+                // enforce policy\n+                apEnforcer.enforce(\n+                        accountPolicy, policy.getType(), (SyncopeUser) object);\n+            }\n         } catch (Exception e) {\n             LOG.debug(\"Invalid username\");\n \n             context.buildConstraintViolationWithTemplate(\n                     e.getMessage()).addNode(\n-                    EntityViolationType.InvalidPassword.toString()).\n+                    EntityViolationType.InvalidUsername.toString()).\n                     addConstraintViolation();\n \n             return false;\n-        } finally {\n-            // password has been validated, let's remove its\n-            // clear version\n-            ((SyncopeUser) object).removeClearPassword();\n         }\n         // ------------------------------\n \n-        // Let's verify other policies ....\n         return true;\n     }\n "},{"sha":"ab485a396f73902e605143e97920e0d12dd17190","filename":"core/src/main/java/org/syncope/core/policy/AccountPolicyEnforcer.java","status":"added","additions":139,"deletions":0,"changes":139,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyEnforcer.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -0,0 +1,139 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.policy;\n+\n+import java.util.List;\n+import java.util.regex.Pattern;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.PropagationTask;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.propagation.PropagationManager;\n+import org.syncope.core.rest.data.UserDataBinder;\n+import org.syncope.core.workflow.UserWorkflowAdapter;\n+import org.syncope.types.AccountPolicySpec;\n+import org.syncope.types.PolicyType;\n+\n+@Component\n+public class AccountPolicyEnforcer\n+        extends PolicyEnforcer<AccountPolicySpec, SyncopeUser> {\n+\n+    @Autowired\n+    private UserWorkflowAdapter wfAdapter;\n+\n+    @Autowired\n+    private PropagationManager propagationManager;\n+\n+    @Autowired\n+    private UserDataBinder userDataBinder;\n+\n+    private static final Pattern PATTERN = Pattern.compile(\"[a-zA-Z0-9-_@.]+\");\n+\n+    private static final Pattern LCPATTERN = Pattern.compile(\"[a-z0-9-_@.]+\");\n+\n+    private static final Pattern UCPATTERN = Pattern.compile(\"[A-Z0-9-_@.]+\");\n+\n+    @Override\n+    public void enforce(\n+            final AccountPolicySpec policy,\n+            final PolicyType type,\n+            final SyncopeUser user)\n+            throws AccountPolicyException, PolicyEnforceException {\n+\n+        if (user.getUsername() == null) {\n+            throw new PolicyEnforceException(\"Invalid account\");\n+        }\n+\n+        if (policy == null) {\n+            throw new PolicyEnforceException(\"Invalid policy\");\n+        }\n+\n+        // check min length\n+        if (policy.getMinLength() > 0\n+                && policy.getMinLength() > user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too short\");\n+        }\n+\n+        // check max length\n+        if (policy.getMaxLength() > 0\n+                && policy.getMaxLength() < user.getUsername().length()) {\n+            throw new AccountPolicyException(\"Username too long\");\n+        }\n+\n+        // check words not permitted\n+        for (String word : policy.getWordsNotPermitted()) {\n+            if (user.getUsername().contains(word)) {\n+                throw new AccountPolicyException(\"Used word(s) not permitted\");\n+            }\n+        }\n+\n+        // check syntax\n+        if ((policy.isAllLowerCase()\n+                && !LCPATTERN.matcher(user.getUsername()).matches())\n+                || (policy.isAllUpperCase()\n+                && !UCPATTERN.matcher(user.getUsername()).matches())\n+                || !PATTERN.matcher(user.getUsername()).matches()) {\n+            throw new AccountPolicyException(\"Invalid username syntax\");\n+        }\n+\n+        // check prefix\n+        for (String prefix : policy.getPrefixesNotPermitted()) {\n+            if (user.getUsername().startsWith(prefix)) {\n+                throw new AccountPolicyException(\"Prefix not permitted\");\n+            }\n+        }\n+\n+        // check suffix\n+        for (String suffix : policy.getSuffixesNotPermitted()) {\n+            if (user.getUsername().endsWith(suffix)) {\n+                throw new AccountPolicyException(\"Suffix not permitted\");\n+            }\n+        }\n+\n+        // check for subsequent failed logins\n+        if (user.getFailedLogins() != null\n+                && policy.getPermittedLoginRetries() > 0\n+                && user.getFailedLogins() > policy.getPermittedLoginRetries()\n+                && !user.getSuspended()) {\n+            try {\n+                LOG.debug(\"User {}:{} is over to max failed logins\",\n+                        user.getId(), user.getUsername());\n+\n+                // reduce failed logins number to avoid multiple request\n+                user.setFailedLogins(user.getFailedLogins() - 1);\n+\n+                // disable user\n+                final Long updatedId = wfAdapter.suspend(user);\n+\n+                // propagate suspension if and only if it is required by policy\n+                if (policy.isPropagateSuspension()) {\n+                    final List<PropagationTask> tasks = propagationManager.\n+                            getUpdateTaskIds(updatedId,\n+                            null, null, null, Boolean.FALSE, null);\n+\n+                    propagationManager.execute(tasks);\n+                }\n+\n+                if (LOG.isDebugEnabled()) {\n+                    final UserTO savedTO = userDataBinder.getUserTO(updatedId);\n+                    LOG.debug(\"About to return suspended user\\n{}\", savedTO);\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Error during user suspension\", e);\n+            }\n+        }\n+    }\n+}"},{"sha":"1073f5679c9031b7990b1aef170ada61a7a7c9cb","filename":"core/src/main/java/org/syncope/core/policy/AccountPolicyException.java","status":"added","additions":27,"deletions":0,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyException.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyException.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FAccountPolicyException.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -0,0 +1,27 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.policy;\n+\n+public class AccountPolicyException extends Exception {\n+\n+    private static final long serialVersionUID = 2779416455067691813L;\n+\n+    public AccountPolicyException() {\n+    }\n+\n+    public AccountPolicyException(String msg) {\n+        super(msg);\n+    }\n+}"},{"sha":"30769200d8d2db31d117db10bdaf9ef29411289a","filename":"core/src/main/java/org/syncope/core/policy/PasswordPolicyEnforcer.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPasswordPolicyEnforcer.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -21,7 +21,7 @@\n \n @Component\n public class PasswordPolicyEnforcer\n-        implements PolicyEnforcer<PasswordPolicySpec, String> {\n+        extends PolicyEnforcer<PasswordPolicySpec, String> {\n \n     private static final Pattern DIGIT = Pattern.compile(\".*\\\\d+.*\");\n \n@@ -53,7 +53,7 @@ public void enforce(\n             throws PasswordPolicyException, PolicyEnforceException {\n \n         if (password == null) {\n-            throw new PolicyEnforceException(\"Invalid passwordì\");\n+            throw new PolicyEnforceException(\"Invalid password\");\n         }\n \n         if (policy == null) {"},{"sha":"441114b5b1587896250d150fc418ea7e0059e2cf","filename":"core/src/main/java/org/syncope/core/policy/PolicyEnforcer.java","status":"modified","additions":10,"deletions":2,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEnforcer.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -15,12 +15,20 @@\n package org.syncope.core.policy;\n \n import java.io.InvalidObjectException;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n import org.syncope.types.AbstractPolicySpec;\n import org.syncope.types.PolicyType;\n \n-public interface PolicyEnforcer<T extends AbstractPolicySpec, E> {\n+public abstract class PolicyEnforcer<T extends AbstractPolicySpec, E> {\n \n-    public void enforce(\n+    /**\n+     * Logger.\n+     */\n+    protected static final Logger LOG =\n+            LoggerFactory.getLogger(PolicyEnforcer.class);\n+\n+    public abstract void enforce(\n             final T policy, final PolicyType type, final E object)\n             throws InvalidObjectException, Exception;\n }"},{"sha":"b833bd3df26c2729d0e4b9466413a8f84c3f020d","filename":"core/src/main/java/org/syncope/core/policy/PolicyEvaluator.java","status":"modified","additions":33,"deletions":10,"changes":43,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpolicy%2FPolicyEvaluator.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -24,6 +24,7 @@\n import org.syncope.core.persistence.beans.Policy;\n import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.types.AbstractPolicySpec;\n+import org.syncope.types.AccountPolicySpec;\n import org.syncope.types.PasswordPolicySpec;\n \n @Component\n@@ -41,20 +42,21 @@ public <T extends AbstractPolicySpec> T evaluate(\n         T result = null;\n \n         if (policy != null) {\n+            AbstractAttr attribute;\n+            List<String> values;\n+\n             switch (policy.getType()) {\n                 case PASSWORD:\n                 case GLOBAL_PASSWORD:\n-                    final PasswordPolicySpec spec = policy.getSpecification();\n+                    final PasswordPolicySpec pspec = policy.getSpecification();\n                     final PasswordPolicySpec passwordPolicy = new PasswordPolicySpec();\n \n                     BeanUtils.copyProperties(\n-                            spec,\n+                            pspec,\n                             passwordPolicy,\n                             new String[]{\"schemasNotPermitted\"});\n \n-                    AbstractAttr attribute;\n-                    List<String> values;\n-                    for (String schema : spec.getSchemasNotPermitted()) {\n+                    for (String schema : pspec.getSchemasNotPermitted()) {\n                         attribute = attributable.getAttribute(schema);\n                         if (attribute != null) {\n                             values = attribute.getValuesAsStrings();\n@@ -74,18 +76,18 @@ public <T extends AbstractPolicySpec> T evaluate(\n \n                     if (((SyncopeUser) attributable).verifyPasswordHistory(\n                             ((SyncopeUser) attributable).getClearPassword(),\n-                            spec.getHistoryLength())) {\n+                            pspec.getHistoryLength())) {\n                         passwordPolicy.getWordsNotPermitted().add(\n                                 ((SyncopeUser) attributable).getClearPassword());\n                     } else {\n \n-                        if (spec.getHistoryLength() > 0 && password != null) {\n+                        if (pspec.getHistoryLength() > 0 && password != null) {\n                             passwordHistory.add(password);\n                         }\n \n-                        if (spec.getHistoryLength() < passwordHistory.size()) {\n+                        if (pspec.getHistoryLength() < passwordHistory.size()) {\n                             for (int i = 0; i < passwordHistory.size()\n-                                    - spec.getHistoryLength(); i++) {\n+                                    - pspec.getHistoryLength(); i++) {\n                                 passwordHistory.remove(i);\n                             }\n                         }\n@@ -95,9 +97,30 @@ public <T extends AbstractPolicySpec> T evaluate(\n                     break;\n                 case ACCOUNT:\n                 case GLOBAL_ACCOUNT:\n-                    result = null;\n+                    final AccountPolicySpec spec = policy.getSpecification();\n+                    final AccountPolicySpec accountPolicy = new AccountPolicySpec();\n+\n+                    BeanUtils.copyProperties(\n+                            spec,\n+                            accountPolicy,\n+                            new String[]{\"schemasNotPermitted\"});\n+\n+                    for (String schema : spec.getSchemasNotPermitted()) {\n+                        attribute = attributable.getAttribute(schema);\n+                        if (attribute != null) {\n+                            values = attribute.getValuesAsStrings();\n+                            if (values != null && !values.isEmpty()) {\n+                                accountPolicy.getWordsNotPermitted().add(\n+                                        values.get(0));\n+                            }\n+                        }\n+                    }\n+\n+                    result = (T) accountPolicy;\n                     break;\n                 case SYNC:\n+                case GLOBAL_SYNC:\n+                    result = null;\n                     break;\n                 default:\n                     result = null;"},{"sha":"dfa25747a0ab42759616da39487c3454d27c4bb2","filename":"core/src/main/java/org/syncope/core/rest/controller/PolicyController.java","status":"modified","additions":16,"deletions":0,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FPolicyController.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -207,6 +207,22 @@ public AccountPolicyTO getGlobalAccountPolicy(\n         return (AccountPolicyTO) policyDataBinder.getPolicyTO(policy);\n     }\n \n+    @PreAuthorize(\"hasRole('POLICY_READ')\")\n+    @RequestMapping(method = RequestMethod.GET, value = \"/sync/global/read\")\n+    public SyncPolicyTO getGlobalSyncPolicy(\n+            final HttpServletResponse response)\n+            throws NotFoundException {\n+\n+        LOG.debug(\"Reading sync policy\");\n+        Policy policy = policyDAO.getGlobalSyncPolicy();\n+\n+        if (policy == null) {\n+            throw new NotFoundException(\"No sync policy found\");\n+        }\n+\n+        return (SyncPolicyTO) policyDataBinder.getPolicyTO(policy);\n+    }\n+\n     @PreAuthorize(\"hasRole('POLICY_READ')\")\n     @RequestMapping(method = RequestMethod.GET, value = \"/read/{id}\")\n     public PolicyTO read("},{"sha":"b940780d29e1e40157ad891bcac15191896acb61","filename":"core/src/main/java/org/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":8,"deletions":0,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -34,6 +34,7 @@\n import org.syncope.core.persistence.beans.SchemaMapping;\n import org.syncope.core.persistence.beans.ExternalResource;\n import org.syncope.core.persistence.beans.PasswordPolicy;\n+import org.syncope.core.persistence.beans.SyncPolicy;\n import org.syncope.core.persistence.dao.ConnInstanceDAO;\n import org.syncope.core.persistence.dao.PolicyDAO;\n import org.syncope.core.util.JexlUtil;\n@@ -116,6 +117,10 @@ public ExternalResource getResource(final ExternalResource resource,\n                 ? (AccountPolicy) policyDAO.find(resourceTO.getAccountPolicy())\n                 : null);\n \n+        resource.setSyncPolicy(resourceTO.getSyncPolicy() != null\n+                ? (SyncPolicy) policyDAO.find(resourceTO.getSyncPolicy())\n+                : null);\n+\n         resource.setConnectorConfigurationProperties(\n                 new HashSet<ConnConfProperty>(\n                 resourceTO.getConnectorConfigurationProperties()));\n@@ -179,6 +184,9 @@ public ResourceTO getResourceTO(ExternalResource resource) {\n         resourceTO.setAccountPolicy(resource.getAccountPolicy() != null\n                 ? resource.getAccountPolicy().getId() : null);\n \n+        resourceTO.setSyncPolicy(resource.getSyncPolicy() != null\n+                ? resource.getSyncPolicy().getId() : null);\n+\n         resourceTO.setConnectorConfigurationProperties(\n                 resource.getConfiguration());\n         return resourceTO;"},{"sha":"5deaa81ae0957a7a3b853cf8dea4548e98979a3a","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"modified","additions":10,"deletions":8,"changes":18,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -182,16 +182,18 @@ public PropagationByResource update(SyncopeRole role, RoleMod roleMod)\n             }\n         }\n \n-        if (roleMod.getPasswordPolicy() != null\n-                && roleMod.getPasswordPolicy().getId() != null) {\n-            role.setPasswordPolicy((PasswordPolicy) policyDAO.find(\n-                    roleMod.getPasswordPolicy().getId()));\n+        if (roleMod.getPasswordPolicy() != null) {\n+            role.setPasswordPolicy(\n+                    roleMod.getPasswordPolicy().getId() != null\n+                    ? (PasswordPolicy) policyDAO.find(\n+                    roleMod.getPasswordPolicy().getId()) : null);\n         }\n \n-        if (roleMod.getAccountPolicy() != null\n-                && roleMod.getAccountPolicy().getId() != null) {\n-            role.setAccountPolicy((AccountPolicy) policyDAO.find(\n-                    roleMod.getAccountPolicy().getId()));\n+        if (roleMod.getAccountPolicy() != null) {\n+            role.setAccountPolicy(\n+                    roleMod.getAccountPolicy().getId() != null\n+                    ? (AccountPolicy) policyDAO.find(\n+                    roleMod.getAccountPolicy().getId()) : null);\n         }\n \n         // attributes, derived attributes, virtual attributes and resources"},{"sha":"b63de96f7deaa48c387ee3f8feb7d1fa956057fe","filename":"core/src/main/java/org/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -20,6 +20,7 @@\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.beans.factory.annotation.Configurable;\n import org.springframework.security.authentication.AuthenticationProvider;\n+import org.springframework.security.authentication.BadCredentialsException;\n import org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\n import org.springframework.security.core.Authentication;\n import org.springframework.security.core.AuthenticationException;\n@@ -74,7 +75,7 @@ public void setSyncopeUserDetailsService(\n     }\n \n     @Override\n-    @Transactional(rollbackFor = {Throwable.class})\n+    @Transactional(noRollbackFor= {BadCredentialsException.class})\n     public Authentication authenticate(final Authentication authentication)\n             throws AuthenticationException {\n \n@@ -113,7 +114,8 @@ public Authentication authenticate(final Authentication authentication)\n         }\n \n         Authentication result;\n-        if (authenticated) {\n+\n+        if ((user == null || !user.getSuspended()) && authenticated) {\n             UsernamePasswordAuthenticationToken token =\n                     new UsernamePasswordAuthenticationToken(\n                     authentication.getPrincipal(),\n@@ -136,13 +138,16 @@ public Authentication authenticate(final Authentication authentication)\n         } else {\n             result = authentication;\n \n-            if (user != null) {\n+            if (user != null && !user.getSuspended()) {\n                 user.setFailedLogins(user.getFailedLogins() + 1);\n                 userDAO.save(user);\n             }\n \n             LOG.debug(\"User {} not authenticated\",\n                     authentication.getPrincipal());\n+\n+            throw new BadCredentialsException(\"User \"\n+                    + authentication.getPrincipal() + \" not authenticated\");\n         }\n \n         return result;"},{"sha":"1a779d677ba2b4b78eadb492f7e1fc2fcb9ff3b9","filename":"core/src/main/java/org/syncope/core/workflow/AbstractUserWorkflowAdapter.java","status":"modified","additions":19,"deletions":1,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FAbstractUserWorkflowAdapter.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -71,6 +71,16 @@ public Long suspend(final Long userId)\n         return doSuspend(dataBinder.getUserFromId(userId));\n     }\n \n+    @Override\n+    public Long suspend(final SyncopeUser user)\n+            throws UnauthorizedRoleException, WorkflowException {\n+\n+        // set suspended flag\n+        user.setSuspended(Boolean.TRUE);\n+\n+        return doSuspend(user);\n+    }\n+\n     protected abstract Long doReactivate(SyncopeUser user)\n             throws WorkflowException;\n \n@@ -79,7 +89,15 @@ public Long reactivate(final Long userId)\n             throws UnauthorizedRoleException, NotFoundException,\n             WorkflowException {\n \n-        return doReactivate(dataBinder.getUserFromId(userId));\n+        final SyncopeUser user = dataBinder.getUserFromId(userId);\n+\n+        // reset failed logins\n+        user.setFailedLogins(0);\n+\n+        // reset suspended flag\n+        user.setSuspended(Boolean.FALSE);\n+\n+        return doReactivate(user);\n     }\n \n     protected abstract void doDelete(SyncopeUser user)"},{"sha":"6e139f3ebdf64676332149fcf5ec8b2c46f1fabf","filename":"core/src/main/java/org/syncope/core/workflow/ActivitiUserWorkflowAdapter.java","status":"modified","additions":3,"deletions":0,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FActivitiUserWorkflowAdapter.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -45,6 +45,7 @@\n import org.slf4j.LoggerFactory;\n import org.springframework.beans.BeanUtils;\n import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.transaction.annotation.Transactional;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.UserTO;\n import org.syncope.client.to.WorkflowDefinitionTO;\n@@ -199,6 +200,7 @@ protected Map.Entry<Long, PropagationByResource> doUpdate(\n     }\n \n     @Override\n+    @Transactional(rollbackFor = {Throwable.class})\n     protected Long doSuspend(final SyncopeUser user)\n             throws WorkflowException {\n \n@@ -215,6 +217,7 @@ protected Long doReactivate(final SyncopeUser user)\n \n         doExecuteAction(user, \"reactivate\", null);\n         updateStatus(user);\n+\n         SyncopeUser updated = userDAO.save(user);\n \n         return updated.getId();"},{"sha":"f7673c3ce904b82137204346bdf4e17f9ef1ba0f","filename":"core/src/main/java/org/syncope/core/workflow/UserWorkflowAdapter.java","status":"modified","additions":12,"deletions":0,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fworkflow%2FUserWorkflowAdapter.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -18,6 +18,7 @@\n import javassist.NotFoundException;\n import org.syncope.client.mod.UserMod;\n import org.syncope.client.to.UserTO;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n import org.syncope.client.to.WorkflowDefinitionTO;\n import org.syncope.client.to.WorkflowFormTO;\n import org.syncope.core.persistence.propagation.PropagationByResource;\n@@ -96,6 +97,17 @@ Long suspend(Long userId)\n     /**\n      * Suspend an user.\n      *\n+     * @param user to be suspended\n+     * @return user just suspended\n+     * @throws UnauthorizedRoleException authorization exception\n+     * @throws WorkflowException workflow exception\n+     */\n+    Long suspend(SyncopeUser user)\n+            throws UnauthorizedRoleException, WorkflowException;\n+\n+    /**\n+     * Reactivate an user.\n+     *\n      * @param userId user to be reactivated\n      * @return user just reactivated\n      * @throws UnauthorizedRoleException authorization exception"},{"sha":"cdc207a5a430b4ffe0d6e6713fd2e63f481a3993","filename":"core/src/test/java/org/syncope/core/persistence/dao/RoleTest.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FRoleTest.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -80,7 +80,7 @@ public final void inheritedPolicy() {\n \n         assertNotNull(role);\n \n-        assertNull(role.getAccountPolicy());\n+        assertNotNull(role.getAccountPolicy());\n         assertNotNull(role.getPasswordPolicy());\n \n         assertEquals(4L, (long) role.getPasswordPolicy().getId());"},{"sha":"d55dcee19da221fd7d01278588ec3add2bfbc67e","filename":"core/src/test/java/org/syncope/core/persistence/dao/UserTest.java","status":"modified","additions":24,"deletions":13,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2FUserTest.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -41,22 +41,22 @@ public class UserTest extends AbstractTest {\n     private EntitlementDAO entitlementDAO;\n \n     @Test\n-    public final void findAll() {\n+    public void findAll() {\n         List<SyncopeUser> list = userDAO.findAll(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()));\n         assertEquals(\"did not get expected number of users \", 4, list.size());\n     }\n \n     @Test\n-    public final void count() {\n+    public void count() {\n         Integer count = userDAO.count(\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll()));\n         assertNotNull(count);\n         assertEquals(4, count.intValue());\n     }\n \n     @Test\n-    public final void findAllByPageAndSize() {\n+    public void findAllByPageAndSize() {\n         Set<Long> allRoleIds =\n                 EntitlementUtil.getRoleIds(entitlementDAO.findAll());\n \n@@ -78,7 +78,7 @@ public final void findAllByPageAndSize() {\n     }\n \n     @Test\n-    public final void findByDerAttributeValue()\n+    public void findByDerAttributeValue()\n             throws InvalidSearchConditionException {\n         final List<SyncopeUser> list = userDAO.findByDerAttrValue(\n                 \"cn\", \"Doe, John\");\n@@ -87,20 +87,20 @@ public final void findByDerAttributeValue()\n \n     @Test\n     @ExpectedException(value = InvalidSearchConditionException.class)\n-    public final void findByInvalidDerAttrValue()\n+    public void findByInvalidDerAttrValue()\n             throws InvalidSearchConditionException {\n         userDAO.findByDerAttrValue(\"cn\", \"Antonio, Maria, Rossi\");\n     }\n \n     @Test\n     @ExpectedException(value = InvalidSearchConditionException.class)\n-    public final void findByInvalidDerAttrExpression()\n+    public void findByInvalidDerAttrExpression()\n             throws InvalidSearchConditionException {\n         userDAO.findByDerAttrValue(\"noschema\", \"Antonio, Maria\");\n     }\n \n     @Test\n-    public final void findByAttributeValue() {\n+    public void findByAttributeValue() {\n         final UAttrValue fullnameValue = new UAttrValue();\n         fullnameValue.setStringValue(\"chicchiricco\");\n \n@@ -110,7 +110,7 @@ public final void findByAttributeValue() {\n     }\n \n     @Test\n-    public final void findByAttributeBooleanValue() {\n+    public void findByAttributeBooleanValue() {\n         final UAttrValue coolValue = new UAttrValue();\n         coolValue.setBooleanValue(true);\n \n@@ -120,7 +120,7 @@ public final void findByAttributeBooleanValue() {\n     }\n \n     @Test\n-    public final void findById() {\n+    public void findById() {\n         SyncopeUser user = userDAO.find(1L);\n         assertNotNull(\"did not find expected user\", user);\n         user = userDAO.find(3L);\n@@ -130,7 +130,7 @@ public final void findById() {\n     }\n \n     @Test\n-    public final void findByUsername() {\n+    public void findByUsername() {\n         SyncopeUser user = userDAO.find(\"user1\");\n         assertNotNull(\"did not find expected user\", user);\n         user = userDAO.find(\"user3\");\n@@ -140,7 +140,7 @@ public final void findByUsername() {\n     }\n \n     @Test\n-    public final void save() {\n+    public void save() {\n         SyncopeUser user = new SyncopeUser();\n         user.setUsername(\"username\");\n         user.setCreationDate(new Date());\n@@ -153,18 +153,29 @@ public final void save() {\n         } catch (InvalidEntityException e) {\n             t = e;\n         }\n-\n         assertNotNull(t);\n \n         user.setPassword(\"password\", CipherAlgorithm.SHA256, 1);\n \n+        user.setUsername(\"username!\");\n+\n+        t = null;\n+        try {\n+            userDAO.save(user);\n+        } catch (InvalidEntityException e) {\n+            t = e;\n+        }\n+        assertNotNull(t);\n+\n+        user.setUsername(\"username\");\n+\n         SyncopeUser actual = userDAO.save(user);\n         assertNotNull(\"expected save to work\", actual);\n         assertEquals(1, actual.getPasswordHistory().size());\n     }\n \n     @Test\n-    public final void delete() {\n+    public void delete() {\n         SyncopeUser user = userDAO.find(3L);\n \n         userDAO.delete(user.getId());"},{"sha":"8697419dffd5ebcc5ec825f293a085d92ae2937d","filename":"core/src/test/java/org/syncope/core/rest/AuthenticationTestITCase.java","status":"modified","additions":155,"deletions":6,"changes":161,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FAuthenticationTestITCase.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -247,7 +247,8 @@ public void testUserSearch() {\n \n     @Test\n     public void checkFailedLogins() {\n-        UserTO userTO = UserTestITCase.getSampleTO(\"checkFailedLogin@test.org\");\n+        UserTO userTO =\n+                UserTestITCase.getSampleTO(\"checkFailedLogin@syncope-idm.org\");\n \n         MembershipTO membershipTO = new MembershipTO();\n         membershipTO.setRoleId(7L);\n@@ -295,11 +296,6 @@ public void checkFailedLogins() {\n         assertNotNull(t);\n         t = null;\n \n-        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n-                getHttpClient().getState().setCredentials(AuthScope.ANY,\n-                new UsernamePasswordCredentials(\n-                userTO.getUsername(), \"wrongpwd2\"));\n-\n         try {\n             restTemplate.getForObject(\n                     BASE_URL + \"user/read/{userId}.json\",\n@@ -331,4 +327,157 @@ public void checkFailedLogins() {\n         assertNotNull(readUserTO.getFailedLogins());\n         assertEquals(new Integer(0), readUserTO.getFailedLogins());\n     }\n+\n+    @Test\n+    public void checkUserSuspension() {\n+        UserTO userTO =\n+                UserTestITCase.getSampleTO(\"checkSuspension@syncope-idm.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        AttributeTO testAttributeTO = new AttributeTO();\n+        testAttributeTO.setSchema(\"testAttribute\");\n+        testAttributeTO.addValue(\"a value\");\n+        membershipTO.addAttribute(testAttributeTO);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+        assertNotNull(userTO);\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"password123\"));\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getFailedLogins());\n+        assertEquals(new Integer(0), userTO.getFailedLogins());\n+\n+        // authentications failed ...\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"wrongpwd1\"));\n+\n+        Throwable t = null;\n+\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/read/{userId}.json\",\n+                    UserTO.class, userTO.getId());\n+        } catch (Exception e) {\n+            t = e;\n+        }\n+\n+        assertNotNull(t);\n+        t = null;\n+\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/read/{userId}.json\",\n+                    UserTO.class, userTO.getId());\n+        } catch (Exception e) {\n+            t = e;\n+        }\n+\n+        assertNotNull(t);\n+        t = null;\n+\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/read/{userId}.json\",\n+                    UserTO.class, userTO.getId());\n+        } catch (Exception e) {\n+            t = e;\n+        }\n+\n+        assertNotNull(t);\n+        t = null;\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getFailedLogins());\n+        assertEquals(new Integer(3), userTO.getFailedLogins());\n+\n+        // last authentication before suspension\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"wrongpwd1\"));\n+\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/read/{userId}.json\",\n+                    UserTO.class, userTO.getId());\n+        } catch (Exception e) {\n+            t = e;\n+        }\n+\n+        assertNotNull(t);\n+        t = null;\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+\n+        assertNotNull(userTO);\n+        assertNotNull(userTO.getFailedLogins());\n+        assertEquals(new Integer(3), userTO.getFailedLogins());\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        // check for authentication\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"password123\"));\n+\n+        try {\n+            restTemplate.getForObject(\n+                    BASE_URL + \"user/read/{userId}.json\",\n+                    UserTO.class, userTO.getId());\n+            assertNotNull(userTO);\n+        } catch (Exception e) {\n+            t = e;\n+        }\n+\n+        assertNotNull(t);\n+        t = null;\n+\n+        // reset admin credentials for restTemplate\n+        super.setupRestTemplate();\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        ((CommonsClientHttpRequestFactory) restTemplate.getRequestFactory()).\n+                getHttpClient().getState().setCredentials(AuthScope.ANY,\n+                new UsernamePasswordCredentials(\n+                userTO.getUsername(), \"password123\"));\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/read/{userId}.json\",\n+                UserTO.class, userTO.getId());\n+\n+        assertNotNull(userTO);\n+        assertEquals(new Integer(0), userTO.getFailedLogins());\n+    }\n }"},{"sha":"f1336f062a26d5e60328d68e9fae9b2fd4d9b326","filename":"core/src/test/java/org/syncope/core/rest/UserTestITCase.java","status":"modified","additions":43,"deletions":1,"changes":44,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -378,13 +378,28 @@ public final void createUserWithDbPropagation() {\n     @Test\n     @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public final void createWithInvalidPassword() {\n-        UserTO userTO = getSampleTO(\"invalidpasswd@passwd.com\");\n+        UserTO userTO = getSampleTO(\"invalidpasswd@syncope-idm.org\");\n         userTO.setPassword(\"pass\");\n \n         restTemplate.postForObject(\n                 BASE_URL + \"user/create\", userTO, UserTO.class);\n     }\n \n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public final void createWithInvalidUsername() {\n+        UserTO userTO = getSampleTO(\"invalidusername@syncope-idm.org\");\n+        userTO.setUsername(\"us\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+\n+        userTO.addMembership(membershipTO);\n+\n+        restTemplate.postForObject(\n+                BASE_URL + \"user/create\", userTO, UserTO.class);\n+    }\n+\n     @Test\n     @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n     public final void createWithInvalidPasswordByRes() {\n@@ -1197,4 +1212,31 @@ public final void verifyTaskRegistration() {\n         // --> no more tasks/executions should be added\n         assertEquals(newMaxId, maxId);\n     }\n+\n+    @Test\n+    public final void suspendReactivate() {\n+        UserTO userTO = getSampleTO(\"suspendReactivate@syncope-idm.org\");\n+\n+        MembershipTO membershipTO = new MembershipTO();\n+        membershipTO.setRoleId(7L);\n+        userTO.addMembership(membershipTO);\n+\n+        userTO = restTemplate.postForObject(BASE_URL + \"user/create\",\n+                userTO, UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/suspend/\" + userTO.getId(), UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"suspended\", userTO.getStatus());\n+\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/reactivate/\" + userTO.getId(), UserTO.class);\n+\n+        assertNotNull(userTO);\n+        assertEquals(\"active\", userTO.getStatus());\n+    }\n }"},{"sha":"45dea1861bd8488eb0fbdd8f39a012a8a9652618","filename":"core/src/test/resources/content.xml","status":"modified","additions":4,"deletions":2,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=7fae22ef7aa2d8e8108a7fbb44dc27d4b088ee53","patch":"@@ -28,7 +28,8 @@\n     <Policy DTYPE=\"SyncPolicy\" id=\"3\" description=\"sync policy 2\" type=\"SYNC\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.SyncPolicySpec%22/%3E%0A%3C/java%3E+%0A\"/>\n     <Policy DTYPE=\"PasswordPolicy\" id=\"4\" description=\"sample password policy\" type=\"PASSWORD\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.PasswordPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22historyLength%22%3E+%0A+++%3Cint%3E0%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E10%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n     <Policy DTYPE=\"AccountPolicy\" id=\"5\" description=\"global account policy\" type=\"GLOBAL_ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n-    <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n+    <Policy DTYPE=\"AccountPolicy\" id=\"6\" description=\"sample account policy\" type=\"ACCOUNT\" specification=\"%3C%3Fxml+version%3D%221.0%22+encoding%3D%22UTF-8%22%3F%3E+%0A%3Cjava+version%3D%221.6.0_26%22+class%3D%22java.beans.XMLDecoder%22%3E+%0A+%3Cobject+class%3D%22org.syncope.types.AccountPolicySpec%22%3E+%0A++%3Cvoid+property%3D%22minLength%22%3E+%0A+++%3Cint%3E4%3C/int%3E+%0A++%3C/void%3E%0A++%3Cvoid+property%3D%22permittedLoginRetries%22%3E+%0A+++%3Cint%3E3%3C/int%3E+%0A++%3C/void%3E+%0A++%3Cvoid+property%3D%22prefixesNotPermitted%22%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted1%3C/string%3E+%0A+++%3C/void%3E+%0A+++%3Cvoid+method%3D%22add%22%3E+%0A++++%3Cstring%3Enotpermitted2%3C/string%3E+%0A+++%3C/void%3E+%0A++%3C/void%3E+%0A+%3C/object%3E+%0A%3C/java%3E+\"/>\n+\n     <SyncopeUser id=\"1\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n                  username=\"user1\" creationDate=\"2010-10-20 11:00:00\"/>\n     <SyncopeUser id=\"2\" workflowId=\"0\" status=\"active\" password=\"5f4dcc3b5aa765d61d8327deb882cf99\" cipherAlgorithm=\"MD5\"\n@@ -47,7 +48,8 @@\n                  name=\"director\" parent_id=\"4\"\n                  inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\"\n                  inheritPasswordPolicy=\"0\" inheritAccountPolicy=\"0\"\n-                 passwordPolicy_id=\"4\"/>\n+                 passwordPolicy_id=\"4\"\n+                 accountPolicy_id=\"6\"/>\n     <SyncopeRole id=\"7\"\n                  name=\"managingDirector\" parent_id=\"6\"\n                  inheritAttributes=\"1\" inheritDerivedAttributes=\"1\" inheritVirtualAttributes=\"1\""}]}