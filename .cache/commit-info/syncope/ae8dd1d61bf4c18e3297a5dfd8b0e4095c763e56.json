{"sha":"ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmFlOGRkMWQ2MWJmNGMxOGUzMjk3YTVkZmQ4YjBlNDA5NWM3NjNlNTY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-09-21T15:33:03Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2012-09-21T15:33:03Z"},"message":"Cleaning up and refactoring JexlUtil\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1388553 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"35a97a3344d10e761bab5a62f13967589b286c4d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/35a97a3344d10e761bab5a62f13967589b286c4d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/d5b62042b3cd8eae8a3d6049800f7ab6330d90fe"}],"stats":{"total":166,"additions":66,"deletions":100},"files":[{"sha":"d11b163cd49a6973356300c017da1e596d0fa6f0","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/AbstractDerAttr.java","status":"modified","additions":4,"deletions":36,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerAttr.java?ref=ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56","patch":"@@ -18,17 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.beans;\n \n-import java.lang.reflect.Field;\n-import java.util.Arrays;\n import java.util.Collection;\n-import java.util.Date;\n-import java.util.List;\n import javax.persistence.GeneratedValue;\n import javax.persistence.GenerationType;\n import javax.persistence.Id;\n import javax.persistence.MappedSuperclass;\n import org.apache.commons.jexl2.JexlContext;\n-import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.jexl2.MapContext;\n import org.apache.syncope.core.util.ApplicationContextProvider;\n import org.apache.syncope.core.util.JexlUtil;\n import org.springframework.context.ConfigurableApplicationContext;\n@@ -38,9 +34,6 @@ public abstract class AbstractDerAttr extends AbstractBaseBean {\n \n     private static final long serialVersionUID = 4740924251090424771L;\n \n-    private final List<String> ignoredFields = Arrays.asList(\n-            new String[]{\"password\", \"clearPassword\", \"serialVersionUID\"});\n-\n     @Id\n     @GeneratedValue(strategy = GenerationType.AUTO)\n     protected Long id;\n@@ -60,39 +53,14 @@ public String getValue(final Collection<? extends AbstractAttr> attributes) {\n         final JexlUtil jexlUtil = context.getBean(JexlUtil.class);\n \n         // Prepare context using user attributes\n-        final JexlContext jexlContext = jexlUtil.addAttrsToContext(attributes, null);\n-\n-        createJexlContext(jexlContext);\n+        final JexlContext jexlContext = new MapContext();\n+        jexlUtil.addAttrsToContext(attributes, jexlContext);\n+        jexlUtil.addFieldsToContext(getOwner(), jexlContext);\n \n         // Evaluate expression using the context prepared before\n         return jexlUtil.evaluate(getDerivedSchema().getExpression(), jexlContext);\n     }\n \n-    private void createJexlContext(final JexlContext jexlContext) {\n-        AbstractAttributable instance = getOwner();\n-        Field[] fields = instance.getClass().getDeclaredFields();\n-        for (int i = 0; i < fields.length; i++) {\n-            try {\n-                Field field = fields[i];\n-                field.setAccessible(true);\n-                if ((!field.isSynthetic()) && (!field.getName().startsWith(\"pc\"))\n-                        && (!ArrayUtils.contains(ignoredFields.toArray(), field.getName()))\n-                        && (!Iterable.class.isAssignableFrom(field.getType()))\n-                        && (!field.getType().isArray())) {\n-                    if (field.getType().equals(Date.class)) {\n-                        jexlContext.set(field.getName(), field.get(instance) != null\n-                                ? ((AbstractBaseBean) instance).getDateFormatter().format(field.get(instance)) : \"\");\n-                    } else {\n-                        jexlContext.set(field.getName(), field.get(instance) != null ? field.get(instance) : \"\");\n-                    }\n-                }\n-\n-            } catch (Exception ex) {\n-                LOG.error(\"Reading class attributes error\", ex);\n-            }\n-        }\n-    }\n-\n     public abstract <T extends AbstractAttributable> T getOwner();\n \n     public abstract <T extends AbstractAttributable> void setOwner(T owner);"},{"sha":"6faed17d4c2c21f7b90cdf970f60b55fbb11b8b3","filename":"core/src/main/java/org/apache/syncope/core/propagation/PropagationManager.java","status":"modified","additions":7,"deletions":1,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2FPropagationManager.java?ref=ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56","patch":"@@ -29,6 +29,8 @@\n import java.util.Map.Entry;\n import java.util.Set;\n import org.apache.commons.collections.keyvalue.DefaultMapEntry;\n+import org.apache.commons.jexl2.JexlContext;\n+import org.apache.commons.jexl2.MapContext;\n import org.apache.syncope.client.mod.AttributeMod;\n import org.apache.syncope.client.to.AttributeTO;\n import org.apache.syncope.core.init.ConnInstanceLoader;\n@@ -464,7 +466,11 @@ private Map.Entry<String, Set<Attribute>> prepareAttributes(final SyncopeUser us\n         }\n \n         // Evaluate AccountLink expression\n-        String evalAccountLink = jexlUtil.evaluate(resource.getAccountLink(), user);\n+        final JexlContext jexlContext = new MapContext();\n+        jexlUtil.addFieldsToContext(user, jexlContext);\n+        jexlUtil.addAttrsToContext(user.getAttributes(), jexlContext);\n+        jexlUtil.addDerAttrsToContext(user.getDerivedAttributes(), user.getAttributes(), jexlContext);\n+        String evalAccountLink = jexlUtil.evaluate(resource.getAccountLink(), jexlContext);\n \n         // AccountId must be propagated. It could be a simple attribute for\n         // the target resource or the key (depending on the accountLink)"},{"sha":"b7c00d75a4fef9ca71234003c86bef510e2b0e5e","filename":"core/src/main/java/org/apache/syncope/core/util/JexlUtil.java","status":"modified","additions":53,"deletions":61,"changes":114,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FJexlUtil.java?ref=ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56","patch":"@@ -18,23 +18,25 @@\n  */\n package org.apache.syncope.core.util;\n \n+import java.lang.reflect.Field;\n import java.util.Collection;\n+import java.util.Date;\n import java.util.List;\n import org.apache.commons.jexl2.Expression;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.JexlEngine;\n import org.apache.commons.jexl2.JexlException;\n import org.apache.commons.jexl2.MapContext;\n-import org.slf4j.Logger;\n-import org.slf4j.LoggerFactory;\n-import org.springframework.beans.factory.annotation.Autowired;\n+import org.apache.commons.lang.ArrayUtils;\n+import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.client.to.AbstractAttributableTO;\n import org.apache.syncope.client.to.AttributeTO;\n-import org.apache.syncope.client.to.UserTO;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n-import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n+import org.apache.syncope.core.persistence.beans.AbstractBaseBean;\n import org.apache.syncope.core.persistence.beans.AbstractDerAttr;\n-import org.apache.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n \n /**\n  * @see http://commons.apache.org/jexl/reference/index.html\n@@ -43,9 +45,12 @@ public class JexlUtil {\n \n     /**\n      * Logger.\n+     *\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(JexlUtil.class);\n \n+    private static final String[] IGNORE_FIELDS = {\"password\", \"clearPassword\", \"serialVersionUID\"};\n+\n     @Autowired\n     private JexlEngine jexlEngine;\n \n@@ -63,11 +68,9 @@ public boolean isExpressionValid(final String expression) {\n     }\n \n     public String evaluate(final String expression, final JexlContext jexlContext) {\n-\n         String result = \"\";\n \n-        if (expression != null && !expression.isEmpty() && jexlContext != null) {\n-\n+        if (StringUtils.isNotBlank(expression) && jexlContext != null) {\n             try {\n                 Expression jexlExpression = jexlEngine.createExpression(expression);\n                 Object evaluated = jexlExpression.evaluate(jexlContext);\n@@ -76,7 +79,6 @@ public String evaluate(final String expression, final JexlContext jexlContext) {\n                 }\n             } catch (JexlException e) {\n                 LOG.error(\"Invalid jexl expression: \" + expression, e);\n-                result = \"\";\n             }\n         } else {\n             LOG.debug(\"Expression not provided or invalid context\");\n@@ -85,36 +87,38 @@ public String evaluate(final String expression, final JexlContext jexlContext) {\n         return result;\n     }\n \n-    public String evaluate(final String expression, final AbstractAttributable attributable) {\n-\n-        final JexlContext jexlContext = new MapContext();\n-\n-        if (attributable instanceof SyncopeUser) {\n-            SyncopeUser user = (SyncopeUser) attributable;\n-\n-            jexlContext.set(\"username\", user.getUsername() != null\n-                    ? user.getUsername()\n-                    : \"\");\n-            jexlContext.set(\"creationDate\", user.getCreationDate() != null\n-                    ? user.getDateFormatter().format(user.getCreationDate())\n-                    : \"\");\n-            jexlContext.set(\"lastLoginDate\", user.getLastLoginDate() != null\n-                    ? user.getDateFormatter().format(user.getLastLoginDate())\n-                    : \"\");\n-            jexlContext.set(\"failedLogins\", user.getFailedLogins() != null\n-                    ? user.getFailedLogins()\n-                    : \"\");\n-            jexlContext.set(\"changePwdDate\", user.getChangePwdDate() != null\n-                    ? user.getDateFormatter().format(user.getChangePwdDate())\n-                    : \"\");\n-        }\n-\n-        addAttrsToContext(attributable.getAttributes(), jexlContext);\n+    public JexlContext addFieldsToContext(final Object attributable, final JexlContext jexlContext) {\n+        JexlContext context = jexlContext == null\n+                ? new MapContext()\n+                : jexlContext;\n \n-        addDerAttrsToContext(attributable.getDerivedAttributes(), attributable.getAttributes(), jexlContext);\n+        final Field[] fields = attributable.getClass().getDeclaredFields();\n+        for (int i = 0; i < fields.length; i++) {\n+            try {\n+                Field field = fields[i];\n+                field.setAccessible(true);\n+                final String fieldName = field.getName();\n+                if ((!field.isSynthetic()) && (!fieldName.startsWith(\"pc\"))\n+                        && (!ArrayUtils.contains(IGNORE_FIELDS, fieldName))\n+                        && (!Iterable.class.isAssignableFrom(field.getType()))\n+                        && (!field.getType().isArray())) {\n+\n+                    final Object fieldValue = field.get(attributable);\n+\n+                    context.set(fieldName, fieldValue == null\n+                            ? \"\"\n+                            : (field.getType().equals(Date.class)\n+                            ? ((AbstractBaseBean) attributable).getDateFormatter().format(fieldValue)\n+                            : fieldValue));\n+\n+                    LOG.debug(\"Add field {} with value {}\", fieldName, fieldValue);\n+                }\n+            } catch (Exception e) {\n+                LOG.error(\"Reading class attributes error\", e);\n+            }\n+        }\n \n-        // Evaluate expression using the context prepared before\n-        return evaluate(expression, jexlContext);\n+        return context;\n     }\n \n     public JexlContext addAttrsToContext(final Collection<? extends AbstractAttr> attributes,\n@@ -130,59 +134,47 @@ public JexlContext addAttrsToContext(final Collection<? extends AbstractAttr> at\n                     ? \"\"\n                     : attributeValues.get(0);\n \n-            LOG.debug(\"Add attribute {} with value {}\",\n-                    new Object[] { attribute.getSchema().getName(), expressionValue });\n+            LOG.debug(\"Add attribute {} with value {}\", attribute.getSchema().getName(), expressionValue);\n \n             context.set(attribute.getSchema().getName(), expressionValue);\n         }\n \n         return context;\n     }\n \n-    public JexlContext addDerAttrsToContext(final Collection<? extends AbstractDerAttr> derAttributes,\n-            final Collection<? extends AbstractAttr> attributes, final JexlContext jexlContext) {\n+    public JexlContext addDerAttrsToContext(final Collection<? extends AbstractDerAttr> derAttrs,\n+            final Collection<? extends AbstractAttr> attrs, final JexlContext jexlContext) {\n \n         JexlContext context = jexlContext == null\n                 ? new MapContext()\n                 : jexlContext;\n \n-        for (AbstractDerAttr attribute : derAttributes) {\n-            String expressionValue = attribute.getValue(attributes);\n+        for (AbstractDerAttr derAttr : derAttrs) {\n+            String expressionValue = derAttr.getValue(attrs);\n             if (expressionValue == null) {\n                 expressionValue = \"\";\n             }\n \n-            LOG.debug(\"Add derived attribute {} with value {}\", new Object[] { attribute.getDerivedSchema().getName(),\n-                    expressionValue });\n+            LOG.debug(\"Add derived attribute {} with value {}\", derAttr.getDerivedSchema().getName(), expressionValue);\n \n-            context.set(attribute.getDerivedSchema().getName(), expressionValue);\n+            context.set(derAttr.getDerivedSchema().getName(), expressionValue);\n         }\n \n         return context;\n     }\n \n     public String evaluate(final String expression, final AbstractAttributableTO attributableTO) {\n-\n         final JexlContext context = new MapContext();\n \n-        if (attributableTO instanceof UserTO) {\n-            UserTO user = (UserTO) attributableTO;\n-\n-            context.set(\"username\", user.getUsername() != null\n-                    ? user.getUsername()\n-                    : \"\");\n-            context.set(\"password\", user.getPassword() != null\n-                    ? user.getPassword()\n-                    : \"\");\n-        }\n+        addFieldsToContext(attributableTO, context);\n \n         for (AttributeTO attribute : attributableTO.getAttributes()) {\n             List<String> attributeValues = attribute.getValues();\n             String expressionValue = attributeValues.isEmpty()\n                     ? \"\"\n                     : attributeValues.get(0);\n \n-            LOG.debug(\"Add attribute {} with value {}\", new Object[] { attribute.getSchema(), expressionValue });\n+            LOG.debug(\"Add attribute {} with value {}\", attribute.getSchema(), expressionValue);\n \n             context.set(attribute.getSchema(), expressionValue);\n         }\n@@ -192,7 +184,7 @@ public String evaluate(final String expression, final AbstractAttributableTO att\n                     ? \"\"\n                     : attributeValues.get(0);\n \n-            LOG.debug(\"Add attribute {} with value {}\", new Object[] { attribute.getSchema(), expressionValue });\n+            LOG.debug(\"Add derived attribute {} with value {}\", attribute.getSchema(), expressionValue);\n \n             context.set(attribute.getSchema(), expressionValue);\n         }\n@@ -202,7 +194,7 @@ public String evaluate(final String expression, final AbstractAttributableTO att\n                     ? \"\"\n                     : attributeValues.get(0);\n \n-            LOG.debug(\"Add attribute {} with value {}\", new Object[] { attribute.getSchema(), expressionValue });\n+            LOG.debug(\"Add virtual attribute {} with value {}\", attribute.getSchema(), expressionValue);\n \n             context.set(attribute.getSchema(), expressionValue);\n         }"},{"sha":"f8d740666e20495908a2d1204da178bfb7d4fa6b","filename":"core/src/main/java/org/apache/syncope/core/workflow/NoOpUserWorkflowAdapter.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fworkflow%2FNoOpUserWorkflowAdapter.java?ref=ae8dd1d61bf4c18e3297a5dfd8b0e4095c763e56","patch":"@@ -40,8 +40,8 @@\n @Transactional(rollbackFor = {Throwable.class})\n public class NoOpUserWorkflowAdapter extends AbstractUserWorkflowAdapter {\n \n-    private static final List<String> TASKS = Arrays.asList(new String[]{\"create\", \"activate\", \"update\", \"suspend\",\n-                \"reactivate\", \"delete\"});\n+    private static final List<String> TASKS = Arrays.asList(new String[]{\n+                \"create\", \"activate\", \"update\", \"suspend\", \"reactivate\", \"delete\"});\n \n     public static final String ENABLED = \"enabled\";\n "}]}