{"sha":"986f2085d36a272737d852912456e2cb97356191","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjk4NmYyMDg1ZDM2YTI3MjczN2Q4NTI5MTI0NTZlMmNiOTczNTYxOTE=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-20T14:36:22Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2015-11-20T14:44:07Z"},"message":"[SYNCOPE-727] Adjusting test execution","tree":{"sha":"5be0f4c0e5097a6f0e4fc1a6b451a3e524586289","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/5be0f4c0e5097a6f0e4fc1a6b451a3e524586289"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/986f2085d36a272737d852912456e2cb97356191","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/986f2085d36a272737d852912456e2cb97356191","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/986f2085d36a272737d852912456e2cb97356191","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/986f2085d36a272737d852912456e2cb97356191/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"e6e2a4718f534240d97b64152b55041449f2ce90","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e6e2a4718f534240d97b64152b55041449f2ce90","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e6e2a4718f534240d97b64152b55041449f2ce90"}],"stats":{"total":310,"additions":97,"deletions":213},"files":[{"sha":"223c611c93de1ca70411e8c471275519b76fa791","filename":"fit/core-reference/pom.xml","status":"modified","additions":5,"deletions":22,"changes":27,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/986f2085d36a272737d852912456e2cb97356191/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/986f2085d36a272737d852912456e2cb97356191/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=986f2085d36a272737d852912456e2cb97356191","patch":"@@ -38,7 +38,7 @@ under the License.\n     <jdbcdriver.artifactId>h2</jdbcdriver.artifactId>\n     \n     <rootpom.basedir>${basedir}/../..</rootpom.basedir>\n-    <work.dir>${project.build.directory}/cli-test</work.dir>\n+    <cli-test.dir>${project.build.directory}/cli-test</cli-test.dir>\n   </properties>\n \n   <dependencies>\n@@ -151,26 +151,6 @@ under the License.\n \n   <build>\n     <plugins>\n-      <plugin>\n-        <groupId>org.apache.maven.plugins</groupId>\n-        <artifactId>maven-antrun-plugin</artifactId>\n-        <executions>\n-          <execution>\n-            <id>cli-test</id>\n-            <goals>\n-              <goal>run</goal>\n-            </goals>\n-            <phase>pre-integration-test</phase>\n-            <configuration>\n-              <target>\n-                <mkdir dir=\"${work.dir}\" />\n-                <unzip src=\"../../client/cli/target/syncope-client-cli-${project.version}.zip\" dest=\"${work.dir}\"/>\n-              </target>\n-            </configuration>\n-          </execution>\n-        </executions>\n-      </plugin>\n-      \n       <plugin>\n         <groupId>org.apache.maven.plugins</groupId>\n         <artifactId>maven-war-plugin</artifactId>\n@@ -201,11 +181,14 @@ under the License.\n         <inherited>true</inherited>\n         <executions>\n           <execution>\n-            <id>setupCSV</id>\n+            <id>setupCSV_CLI</id>\n             <phase>pre-integration-test</phase>\n             <configuration>\n               <target>\n                 <copy file=\"${project.build.directory}/test-classes/test.csv\" todir=\"${test.csvdir.path}\" overwrite=\"true\"/>\n+\n+                <mkdir dir=\"${cli-test.dir}\"/>\n+                <unzip src=\"${basedir}/../../client/cli/target/syncope-client-cli-${project.version}.zip\" dest=\"${cli-test.dir}\"/>\n               </target>\n             </configuration>\n             <goals>"},{"sha":"f2cbf1161b27b46207f60af611f702109bca5420","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/reference/CLIITCase.java","status":"modified","additions":75,"deletions":58,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/986f2085d36a272737d852912456e2cb97356191/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCLIITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/986f2085d36a272737d852912456e2cb97356191/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCLIITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2Freference%2FCLIITCase.java?ref=986f2085d36a272737d852912456e2cb97356191","patch":"@@ -22,11 +22,16 @@\n import static org.junit.Assert.assertTrue;\n import static org.junit.Assert.fail;\n \n-import java.io.BufferedReader;\n import java.io.File;\n import java.io.IOException;\n import java.io.InputStream;\n-import java.io.InputStreamReader;\n+import java.util.ArrayList;\n+import java.util.List;\n+import java.util.Properties;\n+import org.apache.commons.collections4.CollectionUtils;\n+import org.apache.commons.collections4.Predicate;\n+import org.apache.commons.io.IOUtils;\n+import org.apache.commons.lang3.SystemUtils;\n import org.junit.BeforeClass;\n import org.junit.FixMethodOrder;\n import org.junit.Test;\n@@ -35,93 +40,105 @@\n @FixMethodOrder(MethodSorters.JVM)\n public class CLIITCase extends AbstractITCase {\n \n-    private static final String LINUX_SCRIPT_DIR = \"/target/cli-test/syncope-client-cli-2.0.0-SNAPSHOT\";\n+    private static final String SCRIPT_FILENAME = \"syncopeadm\";\n \n-    private static final String LINUX_SCRIPT_FILENAME = \"syncopeadm.sh\";\n-\n-    private static ProcessBuilder processBuilder;\n+    private static ProcessBuilder PROCESS_BUILDER;\n \n     @BeforeClass\n     public static void install() {\n+        Properties props = new Properties();\n+        InputStream propStream = null;\n         try {\n-            final File f = new File(\".\");\n-            final File buildDirectory = new File(f.getCanonicalPath() + LINUX_SCRIPT_DIR);\n-            processBuilder = new ProcessBuilder();\n-            processBuilder.directory(buildDirectory);\n-            final String[] command = {\"/bin/bash\", LINUX_SCRIPT_FILENAME, \"install\", \"--setup-debug\"};\n-            processBuilder.command(command);\n-            final Process process = processBuilder.start();\n+            propStream = ExceptionMapperITCase.class.getResourceAsStream(\"/cli-test.properties\");\n+            props.load(propStream);\n+\n+            File workDir = new File(props.getProperty(\"cli-work.dir\"));\n+            PROCESS_BUILDER = new ProcessBuilder();\n+            PROCESS_BUILDER.directory(workDir);\n+\n+            PROCESS_BUILDER.command(getCommand(\"install\", \"--setup-debug\"));\n+            Process process = PROCESS_BUILDER.start();\n             process.waitFor();\n-            final File cliPropertiesFile = new File(buildDirectory + \"/cli.properties\");\n+\n+            File cliPropertiesFile = new File(workDir + File.separator + \"cli.properties\");\n             assertTrue(cliPropertiesFile.exists());\n-        } catch (final IOException | InterruptedException ex) {\n-            fail(ex.getMessage());\n+        } catch (IOException | InterruptedException e) {\n+            fail(e.getMessage());\n+        } finally {\n+            IOUtils.closeQuietly(propStream);\n+        }\n+    }\n+\n+    private static String[] getCommand(final String... arguments) {\n+        List<String> command = new ArrayList<>();\n+\n+        if (SystemUtils.IS_OS_WINDOWS) {\n+            command.add(\"cmd\");\n+            command.add(SCRIPT_FILENAME + \".bat\");\n+        } else {\n+            command.add(\"/bin/bash\");\n+            command.add(SCRIPT_FILENAME + \".sh\");\n         }\n+\n+        CollectionUtils.addAll(command, arguments);\n+\n+        return command.toArray(new String[command.size()]);\n     }\n \n     @Test\n     public void runScriptWithoutOptions() {\n         try {\n-            final String[] command = {\"/bin/bash\", LINUX_SCRIPT_FILENAME};\n-            processBuilder.command(command);\n-            final Process process = processBuilder.start();\n-            final String result = readScriptOutput(process.getInputStream());\n+            PROCESS_BUILDER.command(getCommand());\n+            Process process = PROCESS_BUILDER.start();\n+\n+            String result = IOUtils.toString(process.getInputStream());\n             assertTrue(result.startsWith(\"\\nUsage: Main [options]\"));\n             assertTrue(result.contains(\"entitlement --help\"));\n             assertTrue(result.contains(\"group --help\"));\n+\n             process.destroy();\n-        } catch (IOException ex) {\n-            fail(ex.getMessage());\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n         }\n     }\n \n     @Test\n     public void entitlementCount() {\n         try {\n-            final String[] command = {\"/bin/bash\", LINUX_SCRIPT_FILENAME, \"entitlement\", \"--list\"};\n-            processBuilder.command(command);\n-            final Process process = processBuilder.start();\n-            final BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n-            int entitlementsNumber = 0;\n-            String line;\n-            while ((line = br.readLine()) != null) {\n-                if (line.startsWith(\"-\")) {\n-                    entitlementsNumber++;\n+            PROCESS_BUILDER.command(getCommand(\"entitlement\", \"--list\"));\n+            Process process = PROCESS_BUILDER.start();\n+\n+            int entitlements = CollectionUtils.countMatches(IOUtils.readLines(process.getInputStream()),\n+                    new Predicate<String>() {\n+\n+                @Override\n+                public boolean evaluate(final String line) {\n+                    return line.startsWith(\"-\");\n                 }\n-            }\n-            assertEquals(112, entitlementsNumber);\n-        } catch (IOException ex) {\n-            fail(ex.getMessage());\n+            });\n+            assertEquals(syncopeService.info().getEntitlements().size(), entitlements);\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n         }\n     }\n \n     @Test\n     public void connectorCount() {\n         try {\n-            final String[] command = {\"/bin/bash\", LINUX_SCRIPT_FILENAME, \"connector\", \"--list-bundles\"};\n-            processBuilder.command(command);\n-            final Process process = processBuilder.start();\n-            final BufferedReader br = new BufferedReader(new InputStreamReader(process.getInputStream()));\n-            int bundlesNumber = 0;\n-            String line;\n-            while ((line = br.readLine()) != null) {\n-                if (line.startsWith(\" > BUNDLE NAME:\")) {\n-                    bundlesNumber++;\n-                }\n-            }\n-            assertEquals(8, bundlesNumber);\n-        } catch (IOException ex) {\n-            fail(ex.getMessage());\n-        }\n-    }\n+            PROCESS_BUILDER.command(getCommand(\"connector\", \"--list-bundles\"));\n+            Process process = PROCESS_BUILDER.start();\n \n-    private static String readScriptOutput(final InputStream inputStream) throws IOException {\n-        final BufferedReader br = new BufferedReader(new InputStreamReader(inputStream));\n-        final StringBuilder resultBuilder = new StringBuilder();\n-        String line;\n-        while ((line = br.readLine()) != null) {\n-            resultBuilder.append(line).append(\"\\n\");\n+            int bundles = CollectionUtils.countMatches(IOUtils.readLines(process.getInputStream()),\n+                    new Predicate<String>() {\n+\n+                @Override\n+                public boolean evaluate(final String line) {\n+                    return line.startsWith(\" > BUNDLE NAME:\");\n+                }\n+            });\n+            assertEquals(connectorService.getBundles(null).size(), bundles);\n+        } catch (IOException e) {\n+            fail(e.getMessage());\n         }\n-        return resultBuilder.toString();\n     }\n }"},{"sha":"3cc61fcbe02fee8669ecd1201f1ab37d66dd20cc","filename":"fit/core-reference/src/test/resources/cli-test.properties","status":"added","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/986f2085d36a272737d852912456e2cb97356191/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fcli-test.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/986f2085d36a272737d852912456e2cb97356191/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fcli-test.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Fcli-test.properties?ref=986f2085d36a272737d852912456e2cb97356191","patch":"@@ -0,0 +1,17 @@\n+# Licensed to the Apache Software Foundation (ASF) under one\n+# or more contributor license agreements.  See the NOTICE file\n+# distributed with this work for additional information\n+# regarding copyright ownership.  The ASF licenses this file\n+# to you under the Apache License, Version 2.0 (the\n+# \"License\"); you may not use this file except in compliance\n+# with the License.  You may obtain a copy of the License at\n+#\n+#   http://www.apache.org/licenses/LICENSE-2.0\n+#\n+# Unless required by applicable law or agreed to in writing,\n+# software distributed under the License is distributed on an\n+# \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n+# KIND, either express or implied.  See the License for the\n+# specific language governing permissions and limitations\n+# under the License.\n+cli-work.dir=${cli-test.dir}/syncope-client-cli-${project.version}"},{"sha":"4811c94f049e525ba4940ac86704eb9062608082","filename":"fit/core-reference/src/test/resources/log4j2.xml","status":"removed","additions":0,"deletions":133,"changes":133,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e6e2a4718f534240d97b64152b55041449f2ce90/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e6e2a4718f534240d97b64152b55041449f2ce90/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fresources%2Flog4j2.xml?ref=e6e2a4718f534240d97b64152b55041449f2ce90","patch":"@@ -1,133 +0,0 @@\n-<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n-<!--\n-Licensed to the Apache Software Foundation (ASF) under one\n-or more contributor license agreements.  See the NOTICE file\n-distributed with this work for additional information\n-regarding copyright ownership.  The ASF licenses this file\n-to you under the Apache License, Version 2.0 (the\n-\"License\"); you may not use this file except in compliance\n-with the License.  You may obtain a copy of the License at\n-\n-  http://www.apache.org/licenses/LICENSE-2.0\n-\n-Unless required by applicable law or agreed to in writing,\n-software distributed under the License is distributed on an\n-\"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n-KIND, either express or implied.  See the License for the\n-specific language governing permissions and limitations\n-under the License.\n--->\n-<configuration status=\"WARN\" shutdownHook=\"disable\">\n-\n-  <appenders>\n-    \n-    <RollingRandomAccessFile name=\"main\" fileName=\"${log.directory}/core.log\"\n-                             filePattern=\"${log.directory}/core-%d{yyyy-MM-dd}.log.gz\"\n-                             immediateFlush=\"false\" append=\"true\">\n-      <PatternLayout>\n-        <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n-      </PatternLayout>\n-      <Policies>\n-        <TimeBasedTriggeringPolicy/>\n-        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n-      </Policies>\n-    </RollingRandomAccessFile>\n-\n-    <RollingRandomAccessFile name=\"persistence\" fileName=\"${log.directory}/core-persistence.log\"\n-                             filePattern=\"${log.directory}/core-persistence-%d{yyyy-MM-dd}.log.gz\"\n-                             immediateFlush=\"false\" append=\"true\">\n-      <PatternLayout>\n-        <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n-      </PatternLayout>\n-      <Policies>\n-        <TimeBasedTriggeringPolicy/>\n-        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n-      </Policies>\n-    </RollingRandomAccessFile>\n-\n-    <RollingRandomAccessFile name=\"rest\" fileName=\"${log.directory}/core-rest.log\"\n-                             filePattern=\"${log.directory}/core-rest-%d{yyyy-MM-dd}.log.gz\"\n-                             immediateFlush=\"false\" append=\"true\">\n-      <PatternLayout>\n-        <pattern>%d{HH:mm:ss.SSS} %-5level %logger - %msg%n</pattern>\n-      </PatternLayout>\n-      <Policies>\n-        <TimeBasedTriggeringPolicy/>\n-        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n-      </Policies>\n-    </RollingRandomAccessFile>\n-\n-    <RollingRandomAccessFile name=\"connid\" fileName=\"${log.directory}/core-connid.log\"\n-                             filePattern=\"${log.directory}/core-connid-%d{yyyy-MM-dd}.log.gz\"\n-                             immediateFlush=\"false\" append=\"true\">\n-      <PatternLayout>\n-        <pattern>%d{HH:mm:ss.SSS} %-5level %msg%n</pattern>\n-      </PatternLayout>\n-      <Policies>\n-        <TimeBasedTriggeringPolicy/>\n-        <SizeBasedTriggeringPolicy size=\"250 MB\"/>\n-      </Policies>\n-    </RollingRandomAccessFile>\n-    \n-  </appenders>\n-  \n-  <loggers>\n-    \n-    <asyncLogger name=\"org.apache.syncope.core.persistence\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"persistence\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.springframework.orm\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"persistence\"/>\n-    </asyncLogger>\n-    \n-    <asyncLogger name=\"org.apache.syncope.core.rest\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"rest\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.springframework.web\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"rest\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.apache.http\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"rest\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.apache.cxf\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"rest\"/>\n-    </asyncLogger>\n-    \n-    <asyncLogger name=\"org.identityconnectors\" additivity=\"false\" level=\"DEBUG\">\n-      <appender-ref ref=\"connid\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"net.tirasa.connid\" additivity=\"false\" level=\"DEBUG\">\n-      <appender-ref ref=\"connid\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.apache.syncope.core.provisioning.api.ConnIdBundleManager\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"connid\"/>\n-    </asyncLogger>\n-    \n-    <asyncLogger name=\"org.apache.syncope\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.apache.syncope.core.provisioning\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.apache.syncope.core.logic\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.springframework\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.quartz\" additivity=\"false\" level=\"INFO\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.activiti\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n-    <asyncLogger name=\"org.apache.camel\" additivity=\"false\" level=\"ERROR\">\n-      <appender-ref ref=\"main\"/>\n-    </asyncLogger>\n-    \n-    <root level=\"INFO\">\n-      <appender-ref ref=\"main\"/>\n-    </root>\n-    \n-  </loggers>\n-</configuration>"}]}