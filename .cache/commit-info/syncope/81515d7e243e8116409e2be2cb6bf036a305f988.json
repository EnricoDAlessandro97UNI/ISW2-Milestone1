{"sha":"81515d7e243e8116409e2be2cb6bf036a305f988","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjgxNTE1ZDdlMjQzZTgxMTY0MDllMmJlMmNiNmJmMDM2YTMwNWY5ODg=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-11T14:06:42Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2017-08-11T14:06:54Z"},"message":"[SYNCOPE-1193] Now read, update and delete works both with key and (user)name for Users, Groups and Any Objects","tree":{"sha":"4d31c63760d077a7b95c17e78dc96fd24607ef28","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/4d31c63760d077a7b95c17e78dc96fd24607ef28"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/81515d7e243e8116409e2be2cb6bf036a305f988","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/81515d7e243e8116409e2be2cb6bf036a305f988","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/81515d7e243e8116409e2be2cb6bf036a305f988","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/81515d7e243e8116409e2be2cb6bf036a305f988/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"88391163320f5d73ca51e4c03b0edc5371ab6e1e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/88391163320f5d73ca51e4c03b0edc5371ab6e1e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/88391163320f5d73ca51e4c03b0edc5371ab6e1e"}],"stats":{"total":300,"additions":151,"deletions":149},"files":[{"sha":"ac2fc20b642898d5914ca132de07bc5a0a3023de","filename":"common/rest-api/src/main/java/org/apache/syncope/common/rest/api/service/AnyService.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Frest-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Frest%2Fapi%2Fservice%2FAnyService.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -50,7 +50,7 @@\n      * Note that for the UserService, GroupService and AnyObjectService subclasses, if the key parameter\n      * looks like a UUID then it is interpreted as as key, otherwise as a (user)name.\n      *\n-     * @param key any object key\n+     * @param key any object key or name\n      * @param schemaType schema type\n      * @return list of attributes, owned by the given any object, for the given schema type\n      */\n@@ -65,7 +65,7 @@\n      * Note that for the UserService, GroupService and AnyObjectService subclasses, if the key parameter\n      * looks like a UUID then it is interpreted as as key, otherwise as a (user)name.\n      *\n-     * @param key any object key\n+     * @param key any object key or name\n      * @param schemaType schema type\n      * @param schema schema\n      * @return attribute, owned by the given any object, for the given schema type and schema\n@@ -84,7 +84,7 @@ AttrTO read(\n      * Note that for the UserService, GroupService and AnyObjectService subclasses, if the key parameter\n      * looks like a UUID then it is interpreted as as key, otherwise as a (user)name.\n      *\n-     * @param key key of any object to be read\n+     * @param key any object key or name\n      * @return any object with matching key\n      */\n     @GET\n@@ -130,7 +130,7 @@ AttrTO read(\n     /**\n      * Adds or replaces the attribute, owned by the given any object, for the given schema type and schema.\n      *\n-     * @param key any object key\n+     * @param key any object key or name\n      * @param schemaType schema type\n      * @param attrTO attribute\n      * @return Response object featuring the updated any object attribute - as Entity\n@@ -160,7 +160,7 @@ Response update(\n     /**\n      * Deletes the attribute, owned by the given any object, for the given schema type and schema.\n      *\n-     * @param key any object key\n+     * @param key any object key or name\n      * @param schemaType schema type\n      * @param schema schema\n      */\n@@ -176,7 +176,7 @@ void delete(\n     /**\n      * Deletes any object matching provided key.\n      *\n-     * @param key key of any object to be deleted\n+     * @param key any object key or name\n      * @return Response object featuring the deleted any object enriched with propagation status information\n      * - ProvisioningResult as Entity\n      */"},{"sha":"fd7e5f2876c22348885ccd290b30a6bbfb10eb12","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AbstractAnyLogic.java","status":"modified","additions":0,"deletions":3,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAbstractAnyLogic.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -19,7 +19,6 @@\n package org.apache.syncope.core.logic;\n \n import java.util.ArrayList;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -259,8 +258,6 @@ public boolean evaluate(final String ownedRealm) {\n         return IterableUtils.matchesAny(effectiveRealms, new RealmUtils.DynRealmsPredicate());\n     }\n \n-    public abstract Date findLastChange(String key);\n-\n     public abstract TO read(String key);\n \n     public abstract ProvisioningResult<TO> create(TO anyTO, boolean nullPriorityAsync);"},{"sha":"e5621be8070da79973ac726ed5776530b1c71330","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/AnyObjectLogic.java","status":"modified","additions":0,"deletions":13,"changes":13,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FAnyObjectLogic.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -21,7 +21,6 @@\n import java.lang.reflect.Method;\n import java.util.ArrayList;\n import java.util.Collection;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -41,7 +40,6 @@\n import org.apache.syncope.common.lib.types.ClientExceptionType;\n import org.apache.syncope.common.lib.types.PatchOperation;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n@@ -71,17 +69,6 @@ public class AnyObjectLogic extends AbstractAnyLogic<AnyObjectTO, AnyObjectPatch\n     @Autowired\n     protected AnyObjectProvisioningManager provisioningManager;\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public Date findLastChange(final String key) {\n-        Date etag = anyObjectDAO.findLastChange(key);\n-        if (etag == null) {\n-            throw new NotFoundException(\"AnyObject \" + key);\n-        }\n-\n-        return etag;\n-    }\n-\n     @Transactional(readOnly = true)\n     @Override\n     public AnyObjectTO read(final String key) {"},{"sha":"898113d656d5563014c882b9357cc1ca8eae7dd3","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/GroupLogic.java","status":"modified","additions":0,"deletions":11,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FGroupLogic.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -127,17 +127,6 @@ public boolean evaluate(final String ownedRealm) {\n         return IterableUtils.matchesAny(effectiveRealms, new RealmUtils.DynRealmsPredicate());\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public Date findLastChange(final String key) {\n-        Date etag = groupDAO.findLastChange(key);\n-        if (etag == null) {\n-            throw new NotFoundException(\"Group \" + key);\n-        }\n-\n-        return etag;\n-    }\n-\n     @PreAuthorize(\"hasRole('\" + StandardEntitlement.GROUP_READ + \"')\")\n     @Transactional(readOnly = true)\n     @Override"},{"sha":"f8897807fb809652c53219890b39884fa21aa496","filename":"core/logic/src/main/java/org/apache/syncope/core/logic/UserLogic.java","status":"modified","additions":0,"deletions":12,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FUserLogic.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -22,7 +22,6 @@\n import java.util.ArrayList;\n import java.util.Collection;\n import java.util.Collections;\n-import java.util.Date;\n import java.util.HashSet;\n import java.util.List;\n import java.util.Set;\n@@ -81,17 +80,6 @@ public class UserLogic extends AbstractAnyLogic<UserTO, UserPatch> {\n     @Autowired\n     protected SyncopeLogic syncopeLogic;\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public Date findLastChange(final String key) {\n-        Date etag = userDAO.findLastChange(key);\n-        if (etag == null) {\n-            throw new NotFoundException(\"User \" + key);\n-        }\n-\n-        return etag;\n-    }\n-\n     @PreAuthorize(\"isAuthenticated()\")\n     @Transactional(readOnly = true)\n     public Pair<String, UserTO> selfRead() {"},{"sha":"3415377ed923fd9109e6ea52647cc54ab477f97f","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyDAO.java","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyDAO.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -31,6 +31,8 @@\n \n     int DEFAULT_PAGE_SIZE = 10;\n \n+    String findKey(String name);\n+\n     Date findLastChange(String key);\n \n     A authFind(String key);"},{"sha":"37494402c95f0b33d36c4212d7b4495f049ee6ec","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/AnyObjectDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FAnyObjectDAO.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -41,8 +41,6 @@ public interface AnyObjectDAO extends AnyDAO<AnyObject> {\n \n     AnyObject findByName(String name);\n \n-    AnyObject authFindByName(String name);\n-\n     List<Group> findDynGroups(String key);\n \n     List<ARelationship> findAllRelationships(AnyObject anyObject);"},{"sha":"580fe32305b43fb4a3beca93fce106037856c544","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/GroupDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FGroupDAO.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -34,8 +34,6 @@ public interface GroupDAO extends AnyDAO<Group> {\n \n     Group findByName(String name);\n \n-    Group authFindByName(String name);\n-\n     List<Group> findOwnedByUser(String userKey);\n \n     List<Group> findOwnedByGroup(String groupKey);"},{"sha":"7f1932a703113bf4263626054d57e2678c183eec","filename":"core/persistence-api/src/main/java/org/apache/syncope/core/persistence/api/dao/UserDAO.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fapi%2Fdao%2FUserDAO.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -34,8 +34,6 @@ public interface UserDAO extends AnyDAO<User> {\n \n     Map<String, Integer> countByStatus();\n \n-    User authFindByUsername(String username);\n-\n     User findByUsername(String username);\n \n     User findByToken(String token);"},{"sha":"15b79dae49c945a564420606cdb60f74950c8f80","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/AbstractAnyDAO.java","status":"modified","additions":17,"deletions":0,"changes":17,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FAbstractAnyDAO.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -63,6 +63,7 @@\n import org.apache.syncope.core.persistence.api.entity.user.UMembership;\n import org.apache.syncope.core.persistence.api.entity.user.User;\n import org.apache.syncope.core.persistence.jpa.entity.AbstractPlainAttrValue;\n+import org.apache.syncope.core.persistence.jpa.entity.user.JPAUser;\n import org.apache.syncope.core.spring.ApplicationContextProvider;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.context.ApplicationEventPublisher;\n@@ -120,6 +121,22 @@ protected AnyUtils anyUtils() {\n         return anyUtils;\n     }\n \n+    protected String findKey(final String name, final String table) {\n+        Query query = entityManager().createNativeQuery(\n+                \"SELECT id FROM \" + table + \" WHERE \" + (JPAUser.TABLE.equals(table) ? \"username\" : \"name\") + \"=?\");\n+        query.setParameter(1, name);\n+\n+        String key = null;\n+\n+        for (Object resultKey : query.getResultList()) {\n+            key = resultKey instanceof Object[]\n+                    ? (String) ((Object[]) resultKey)[0]\n+                    : ((String) resultKey);\n+        }\n+\n+        return key;\n+    }\n+\n     protected Date findLastChange(final String key, final String table) {\n         Query query = entityManager().createNativeQuery(\n                 \"SELECT creationDate, lastChangeDate FROM \" + table + \" WHERE id=?\");"},{"sha":"32c655c2d79f1a45f1173f59b9f1cb959e8d4729","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnyObjectDAO.java","status":"modified","additions":7,"deletions":17,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnyObjectDAO.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -43,7 +43,6 @@\n import org.apache.syncope.core.provisioning.api.utils.EntityUtils;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.apache.syncope.core.persistence.api.entity.AnyType;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -95,6 +94,13 @@ protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.ANY_OBJECT);\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public String findKey(final String username) {\n+        return findKey(username, JPAAnyObject.TABLE);\n+    }\n+\n+    @Transactional(readOnly = true)\n     @Override\n     public Date findLastChange(final String key) {\n         return findLastChange(key, JPAAnyObject.TABLE);\n@@ -169,22 +175,6 @@ public AnyObject findByName(final String name) {\n         return result;\n     }\n \n-    @Override\n-    public AnyObject authFindByName(final String name) {\n-        if (name == null) {\n-            throw new NotFoundException(\"Null name\");\n-        }\n-\n-        AnyObject anyObject = findByName(name);\n-        if (anyObject == null) {\n-            throw new NotFoundException(\"Any Object \" + name);\n-        }\n-\n-        securityChecks(anyObject);\n-\n-        return anyObject;\n-    }\n-\n     @Override\n     public List<ARelationship> findAllRelationships(final AnyObject anyObject) {\n         TypedQuery<ARelationship> query = entityManager().createQuery("},{"sha":"dca8d6987198b8326c3fe54de0fb5b02fe441b6b","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAGroupDAO.java","status":"modified","additions":7,"deletions":17,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAGroupDAO.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -46,7 +46,6 @@\n import org.apache.syncope.core.spring.security.DelegatedAdministrationException;\n import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.apache.syncope.core.persistence.api.dao.AnySearchDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PlainAttrDAO;\n import org.apache.syncope.core.persistence.api.dao.search.AssignableCond;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n@@ -142,6 +141,13 @@ protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.GROUP);\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public String findKey(final String username) {\n+        return findKey(username, JPAGroup.TABLE);\n+    }\n+\n+    @Transactional(readOnly = true)\n     @Override\n     public Date findLastChange(final String key) {\n         return findLastChange(key, JPAGroup.TABLE);\n@@ -207,22 +213,6 @@ public Group findByName(final String name) {\n         return result;\n     }\n \n-    @Override\n-    public Group authFindByName(final String name) {\n-        if (name == null) {\n-            throw new NotFoundException(\"Null name\");\n-        }\n-\n-        Group group = findByName(name);\n-        if (group == null) {\n-            throw new NotFoundException(\"Group \" + name);\n-        }\n-\n-        securityChecks(group);\n-\n-        return group;\n-    }\n-\n     @Transactional(readOnly = true)\n     @Override\n     public List<Group> findOwnedByUser(final String userKey) {"},{"sha":"e1bfaf148db54ec1c4f97ec0ecc6aac99e6f8a53","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAUserDAO.java","status":"modified","additions":7,"deletions":18,"changes":25,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAUserDAO.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -55,7 +55,6 @@\n import org.apache.syncope.core.persistence.api.dao.AccessTokenDAO;\n import org.apache.syncope.core.persistence.api.dao.AccountRule;\n import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n-import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.PasswordRule;\n import org.apache.syncope.core.persistence.api.dao.RealmDAO;\n import org.apache.syncope.core.persistence.api.dao.RoleDAO;\n@@ -130,6 +129,13 @@ protected AnyUtils init() {\n         return new JPAAnyUtilsFactory().getInstance(AnyTypeKind.USER);\n     }\n \n+    @Transactional(readOnly = true)\n+    @Override\n+    public String findKey(final String username) {\n+        return findKey(username, JPAUser.TABLE);\n+    }\n+\n+    @Transactional(readOnly = true)\n     @Override\n     public Date findLastChange(final String key) {\n         return findLastChange(key, JPAUser.TABLE);\n@@ -198,23 +204,6 @@ public boolean evaluate(final String realm) {\n         }\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public User authFindByUsername(final String username) {\n-        if (username == null) {\n-            throw new NotFoundException(\"Null username\");\n-        }\n-\n-        User user = findByUsername(username);\n-        if (user == null) {\n-            throw new NotFoundException(\"User \" + username);\n-        }\n-\n-        securityChecks(user);\n-\n-        return user;\n-    }\n-\n     @Override\n     public User findByUsername(final String username) {\n         TypedQuery<User> query = entityManager().createQuery(\"SELECT e FROM \" + JPAUser.class.getSimpleName()"},{"sha":"3f55a23017c011ace5111fd205fa7232076ed541","filename":"core/provisioning-api/src/main/java/org/apache/syncope/core/provisioning/api/data/UserDataBinder.java","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-api%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fapi%2Fdata%2FUserDataBinder.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -45,7 +45,5 @@ public interface UserDataBinder {\n      */\n     PropagationByResource update(User toBeUpdated, UserPatch userPatch);\n \n-    boolean verifyPassword(String username, String password);\n-\n     boolean verifyPassword(User user, String password);\n }"},{"sha":"d2d7314e6150dad51ac234b2120b22fdeb87b454","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/AnyObjectDataBinderImpl.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FAnyObjectDataBinderImpl.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -29,7 +29,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AnyObjectPatch;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n@@ -78,9 +77,7 @@ public class AnyObjectDataBinderImpl extends AbstractAnyDataBinder implements An\n     @Transactional(readOnly = true)\n     @Override\n     public AnyObjectTO getAnyObjectTO(final String key) {\n-        return SyncopeConstants.UUID_PATTERN.matcher(key).matches()\n-                ? getAnyObjectTO(anyObjectDAO.authFind(key), true)\n-                : getAnyObjectTO(anyObjectDAO.authFindByName(key), true);\n+        return getAnyObjectTO(anyObjectDAO.authFind(key), true);\n     }\n \n     @Override"},{"sha":"787353ca2e4faecf9c917d0a2d62a3f656f10d80","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/GroupDataBinderImpl.java","status":"modified","additions":1,"deletions":4,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FGroupDataBinderImpl.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -28,7 +28,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.GroupPatch;\n import org.apache.syncope.common.lib.to.GroupTO;\n import org.apache.syncope.common.lib.to.TypeExtensionTO;\n@@ -383,9 +382,7 @@ public GroupTO getGroupTO(final Group group, final boolean details) {\n     @Transactional(readOnly = true)\n     @Override\n     public GroupTO getGroupTO(final String key) {\n-        return SyncopeConstants.UUID_PATTERN.matcher(key).matches()\n-                ? getGroupTO(groupDAO.authFind(key), true)\n-                : getGroupTO(groupDAO.authFindByName(key), true);\n+        return getGroupTO(groupDAO.authFind(key), true);\n     }\n \n     private void populateTransitiveResources("},{"sha":"fa9fa5fcd8d1a72a5e6f0fcbd70b1f0c7ce8cadd","filename":"core/provisioning-java/src/main/java/org/apache/syncope/core/provisioning/java/data/UserDataBinderImpl.java","status":"modified","additions":1,"deletions":10,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fprovisioning-java%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fprovisioning%2Fjava%2Fdata%2FUserDataBinderImpl.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -33,7 +33,6 @@\n import org.apache.commons.lang3.StringUtils;\n import org.apache.syncope.common.lib.SyncopeClientCompositeException;\n import org.apache.syncope.common.lib.SyncopeClientException;\n-import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.patch.AttrPatch;\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n@@ -144,12 +143,6 @@ public UserTO getAuthenticatedUserTO() {\n         return authUserTO;\n     }\n \n-    @Transactional(readOnly = true)\n-    @Override\n-    public boolean verifyPassword(final String username, final String password) {\n-        return verifyPassword(userDAO.authFindByUsername(username), password);\n-    }\n-\n     @Transactional(readOnly = true)\n     @Override\n     public boolean verifyPassword(final User user, final String password) {\n@@ -636,9 +629,7 @@ public MembershipTO transform(final Group group) {\n     @Transactional(readOnly = true)\n     @Override\n     public UserTO getUserTO(final String key) {\n-        return SyncopeConstants.UUID_PATTERN.matcher(key).matches()\n-                ? getUserTO(userDAO.authFind(key), true)\n-                : getUserTO(userDAO.authFindByUsername(key), true);\n+        return getUserTO(userDAO.authFind(key), true);\n     }\n \n }"},{"sha":"1b7e7f23043f4bb228740dba9afd9cd956d82ddc","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AbstractAnyService.java","status":"modified","additions":40,"deletions":9,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAbstractAnyService.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -51,17 +51,32 @@\n import org.apache.syncope.common.rest.api.service.AnyService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.UserLogic;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n import org.apache.syncope.core.persistence.api.dao.NotFoundException;\n import org.apache.syncope.core.persistence.api.dao.search.SearchCond;\n \n public abstract class AbstractAnyService<TO extends AnyTO, P extends AnyPatch>\n         extends AbstractServiceImpl\n         implements AnyService<TO, P> {\n \n+    protected abstract AnyDAO<?> getAnyDAO();\n+\n     protected abstract AbstractAnyLogic<TO, P> getAnyLogic();\n \n     protected abstract P newPatch(String key);\n \n+    private String getActualKey(final String key) {\n+        String actualKey = key;\n+        if (!SyncopeConstants.UUID_PATTERN.matcher(key).matches()) {\n+            actualKey = getAnyDAO().findKey(key);\n+            if (actualKey == null) {\n+                throw new NotFoundException(\"User, Group or Any Object for \" + key);\n+            }\n+        }\n+\n+        return actualKey;\n+    }\n+\n     @Override\n     public Set<AttrTO> read(final String key, final SchemaType schemaType) {\n         TO any = read(key);\n@@ -110,7 +125,7 @@ public AttrTO read(final String key, final SchemaType schemaType, final String s\n \n     @Override\n     public TO read(final String key) {\n-        return getAnyLogic().read(key);\n+        return getAnyLogic().read(getActualKey(key));\n     }\n \n     @Override\n@@ -143,9 +158,19 @@ public Response create(final TO anyTO) {\n         return createResponse(created);\n     }\n \n+    protected Date findLastChange(final String key) {\n+        Date lastChange = getAnyDAO().findLastChange(key);\n+        if (lastChange == null) {\n+            throw new NotFoundException(\"User, Group or Any Object for \" + key);\n+        }\n+\n+        return lastChange;\n+    }\n+\n     @Override\n     public Response update(final P anyPatch) {\n-        Date etagDate = getAnyLogic().findLastChange(anyPatch.getKey());\n+        anyPatch.setKey(getActualKey(anyPatch.getKey()));\n+        Date etagDate = findLastChange(anyPatch.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> updated = getAnyLogic().update(anyPatch, isNullPriorityAsync());\n@@ -179,12 +204,14 @@ private void addUpdateOrReplaceAttr(\n \n     @Override\n     public Response update(final String key, final SchemaType schemaType, final AttrTO attrTO) {\n-        addUpdateOrReplaceAttr(key, schemaType, attrTO, PatchOperation.ADD_REPLACE);\n-        return modificationResponse(read(key, schemaType, attrTO.getSchema()));\n+        String actualKey = getActualKey(key);\n+        addUpdateOrReplaceAttr(actualKey, schemaType, attrTO, PatchOperation.ADD_REPLACE);\n+        return modificationResponse(read(actualKey, schemaType, attrTO.getSchema()));\n     }\n \n     @Override\n     public Response update(final TO anyTO) {\n+        anyTO.setKey(getActualKey(anyTO.getKey()));\n         TO before = getAnyLogic().read(anyTO.getKey());\n \n         checkETag(before.getETagValue());\n@@ -196,21 +223,25 @@ public Response update(final TO anyTO) {\n \n     @Override\n     public void delete(final String key, final SchemaType schemaType, final String schema) {\n-        addUpdateOrReplaceAttr(key, schemaType, new AttrTO.Builder().schema(schema).build(), PatchOperation.DELETE);\n+        String actualKey = getActualKey(key);\n+        addUpdateOrReplaceAttr(\n+                actualKey, schemaType, new AttrTO.Builder().schema(schema).build(), PatchOperation.DELETE);\n     }\n \n     @Override\n     public Response delete(final String key) {\n-        Date etagDate = getAnyLogic().findLastChange(key);\n+        String actualKey = getActualKey(key);\n+\n+        Date etagDate = findLastChange(actualKey);\n         checkETag(String.valueOf(etagDate.getTime()));\n \n-        ProvisioningResult<TO> deleted = getAnyLogic().delete(key, isNullPriorityAsync());\n+        ProvisioningResult<TO> deleted = getAnyLogic().delete(actualKey, isNullPriorityAsync());\n         return modificationResponse(deleted);\n     }\n \n     @Override\n     public Response deassociate(final DeassociationPatch patch) {\n-        Date etagDate = getAnyLogic().findLastChange(patch.getKey());\n+        Date etagDate = findLastChange(patch.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> updated;\n@@ -254,7 +285,7 @@ public Response deassociate(final DeassociationPatch patch) {\n \n     @Override\n     public Response associate(final AssociationPatch patch) {\n-        Date etagDate = getAnyLogic().findLastChange(patch.getKey());\n+        Date etagDate = findLastChange(patch.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<TO> updated;"},{"sha":"cf17f80976e725839b93f7f509552c5fa64d8cb4","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/AnyObjectServiceImpl.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FAnyObjectServiceImpl.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -29,15 +29,25 @@\n import org.apache.syncope.common.rest.api.service.AnyObjectService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.AnyObjectLogic;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.AnyObjectDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class AnyObjectServiceImpl extends AbstractAnyService<AnyObjectTO, AnyObjectPatch> implements AnyObjectService {\n \n+    @Autowired\n+    private AnyObjectDAO anyObjectDAO;\n+\n     @Autowired\n     private AnyObjectLogic logic;\n \n+    @Override\n+    protected AnyDAO<?> getAnyDAO() {\n+        return anyObjectDAO;\n+    }\n+\n     @Override\n     protected AbstractAnyLogic<AnyObjectTO, AnyObjectPatch> getAnyLogic() {\n         return logic;"},{"sha":"94c41c4fabc8914546147b88fd2a6e2b5f1c213e","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/GroupServiceImpl.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FGroupServiceImpl.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -26,15 +26,25 @@\n import org.apache.syncope.common.rest.api.service.GroupService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.GroupLogic;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.GroupDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class GroupServiceImpl extends AbstractAnyService<GroupTO, GroupPatch> implements GroupService {\n \n+    @Autowired\n+    private GroupDAO groupDAO;\n+\n     @Autowired\n     private GroupLogic logic;\n \n+    @Override\n+    protected AnyDAO<?> getAnyDAO() {\n+        return groupDAO;\n+    }\n+\n     @Override\n     protected AbstractAnyLogic<GroupTO, GroupPatch> getAnyLogic() {\n         return logic;"},{"sha":"90c706a725c4c6c8bd19ec4f4610975045f3ff68","filename":"core/rest-cxf/src/main/java/org/apache/syncope/core/rest/cxf/service/UserServiceImpl.java","status":"modified","additions":11,"deletions":1,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Frest-cxf%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fcxf%2Fservice%2FUserServiceImpl.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -27,15 +27,25 @@\n import org.apache.syncope.common.rest.api.service.UserService;\n import org.apache.syncope.core.logic.AbstractAnyLogic;\n import org.apache.syncope.core.logic.UserLogic;\n+import org.apache.syncope.core.persistence.api.dao.AnyDAO;\n+import org.apache.syncope.core.persistence.api.dao.UserDAO;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Service;\n \n @Service\n public class UserServiceImpl extends AbstractAnyService<UserTO, UserPatch> implements UserService {\n \n+    @Autowired\n+    private UserDAO userDAO;\n+\n     @Autowired\n     private UserLogic logic;\n \n+    @Override\n+    protected AnyDAO<?> getAnyDAO() {\n+        return userDAO;\n+    }\n+\n     @Override\n     protected AbstractAnyLogic<UserTO, UserPatch> getAnyLogic() {\n         return logic;\n@@ -56,7 +66,7 @@ public Response create(final UserTO userTO, final boolean storePassword) {\n \n     @Override\n     public Response status(final StatusPatch statusPatch) {\n-        Date etagDate = getAnyLogic().findLastChange(statusPatch.getKey());\n+        Date etagDate = findLastChange(statusPatch.getKey());\n         checkETag(String.valueOf(etagDate.getTime()));\n \n         ProvisioningResult<UserTO> updated = logic.status(statusPatch, isNullPriorityAsync());"},{"sha":"07e8e19eb31f8d954c9cee67c57bce34e8812153","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/SAML2SPLogic.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2FSAML2SPLogic.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -397,7 +397,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n         NameID nameID = assertion.getSubject().getNameID();\n         String keyValue = null;\n         if (StringUtils.isNotBlank(nameID.getValue())\n-            && idp.getConnObjectKeyItem().getExtAttrName().equals(\"NameID\")) {\n+                && idp.getConnObjectKeyItem().getExtAttrName().equals(\"NameID\")) {\n \n             keyValue = nameID.getValue();\n         }\n@@ -419,7 +419,7 @@ public SAML2LoginResponseTO validateLoginResponse(final SAML2ReceivedResponseTO\n                 if (!attr.getAttributeValues().isEmpty()) {\n                     String attrName = attr.getFriendlyName() == null ? attr.getName() : attr.getFriendlyName();\n                     if (attrName.equals(idp.getConnObjectKeyItem().getExtAttrName())\n-                        && attr.getAttributeValues().get(0) instanceof XSString) {\n+                            && attr.getAttributeValues().get(0) instanceof XSString) {\n \n                         keyValue = ((XSString) attr.getAttributeValues().get(0)).getValue();\n                     }"},{"sha":"4aebdbb4a6dd35c52e3f63e8eb3db55ede06335b","filename":"ext/saml2sp/logic/src/main/java/org/apache/syncope/core/logic/saml2/SAML2ReaderWriter.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/ext%2Fsaml2sp%2Flogic%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Flogic%2Fsaml2%2FSAML2ReaderWriter.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -227,7 +227,7 @@ public SSOValidatorResponse validate(\n         ssoResponseValidator.setRequestId(requestId);\n         ssoResponseValidator.setSpIdentifier(spEntityID);\n         SSOValidatorResponse validatorResponse =\n-            ssoResponseValidator.validateSamlResponse(samlResponse, idp.getBindingType() == SAML2BindingType.POST);\n+                ssoResponseValidator.validateSamlResponse(samlResponse, idp.getBindingType() == SAML2BindingType.POST);\n \n         if (LOG.isDebugEnabled()) {\n             try {"},{"sha":"a415b84612fa7298870f25bb7f4970ec55c6a7cb","filename":"fit/core-reference/pom.xml","status":"modified","additions":0,"deletions":2,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/fit%2Fcore-reference%2Fpom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/fit%2Fcore-reference%2Fpom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fpom.xml?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -179,10 +179,8 @@ under the License.\n     <dependency>\n       <groupId>org.bouncycastle</groupId>\n       <artifactId>bcpkix-jdk15on</artifactId>\n-      <version>${bouncycastle.version}</version>\n       <scope>test</scope>\n     </dependency>\n-\n   </dependencies>\n \n   <build>"},{"sha":"07ead35b9b0ee21b0436639f3bc5fbcd9deb9a99","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/SAML2ITCase.java","status":"modified","additions":11,"deletions":9,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FSAML2ITCase.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -47,7 +47,6 @@\n import javax.ws.rs.core.MediaType;\n import javax.ws.rs.core.Response;\n import javax.xml.namespace.QName;\n-\n import org.apache.commons.codec.binary.Base64;\n import org.apache.cxf.helpers.DOMUtils;\n import org.apache.cxf.jaxrs.client.WebClient;\n@@ -103,7 +102,9 @@\n public class SAML2ITCase extends AbstractITCase {\n \n     private static SyncopeClient anonymous;\n+\n     private static Path keystorePath;\n+\n     private static Path truststorePath;\n \n     @BeforeClass\n@@ -178,15 +179,14 @@ public void spMetadata() {\n             // Get the signature\n             QName signatureQName = new QName(SignatureConstants.XMLSIG_NS, \"Signature\");\n             Element signatureElement =\n-                DOMUtils.getFirstChildWithName(responseDoc.getDocumentElement(), signatureQName);\n+                    DOMUtils.getFirstChildWithName(responseDoc.getDocumentElement(), signatureQName);\n             assertNotNull(signatureElement);\n \n             // Validate the signature\n             XMLSignature signature = new XMLSignature(signatureElement, null);\n             KeyStore keystore = KeyStore.getInstance(\"JKS\");\n             keystore.load(Loader.getResourceAsStream(\"keystore\"), \"changeit\".toCharArray());\n-            assertTrue(signature.checkSignatureValue((X509Certificate)keystore.getCertificate(\"sp\")));\n-\n+            assertTrue(signature.checkSignatureValue((X509Certificate) keystore.getCertificate(\"sp\")));\n         } catch (Exception e) {\n             LOG.error(\"During SAML 2.0 SP metadata parsing\", e);\n             fail(e.getMessage());\n@@ -462,16 +462,18 @@ private static void createKeystores() throws Exception {\n         String subjectName = \"CN=Subject\";\n         BigInteger serial = new BigInteger(\"123456\");\n         X509v3CertificateBuilder certBuilder =\n-                        new X509v3CertificateBuilder(new X500Name(RFC4519Style.INSTANCE, issuerName), serial, currentDate, expiryDate,\n-                                        new X500Name(RFC4519Style.INSTANCE, subjectName),\n-                                        SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));\n+                new X509v3CertificateBuilder(new X500Name(RFC4519Style.INSTANCE, issuerName), serial, currentDate,\n+                        expiryDate,\n+                        new X500Name(RFC4519Style.INSTANCE, subjectName),\n+                        SubjectPublicKeyInfo.getInstance(keyPair.getPublic().getEncoded()));\n         ContentSigner contentSigner = new JcaContentSignerBuilder(\"SHA256WithRSAEncryption\").build(keyPair.getPrivate());\n         X509Certificate certificate = new JcaX509CertificateConverter().getCertificate(certBuilder.build(contentSigner));\n \n         // Store Private Key + Certificate in Keystore\n         KeyStore keystore = KeyStore.getInstance(\"JKS\");\n         keystore.load(null, \"security\".toCharArray());\n-        keystore.setKeyEntry(\"subject\", keyPair.getPrivate(), \"security\".toCharArray(), new Certificate[] {certificate});\n+        keystore.setKeyEntry(\"subject\", keyPair.getPrivate(), \"security\".toCharArray(),\n+                new Certificate[] { certificate });\n \n         File keystoreFile = File.createTempFile(\"samlkeystore\", \".jks\");\n         try (OutputStream output = Files.newOutputStream(keystoreFile.toPath())) {\n@@ -497,7 +499,7 @@ private static void updateMetadataWithCert() throws Exception {\n         KeyStore keyStore = KeyStore.getInstance(\"JKS\");\n         InputStream input = Files.newInputStream(truststorePath);\n         keyStore.load(input, \"security\".toCharArray());\n-        X509Certificate cert = (X509Certificate)keyStore.getCertificate(\"subject\");\n+        X509Certificate cert = (X509Certificate) keyStore.getCertificate(\"subject\");\n         String certEncoded = java.util.Base64.getMimeEncoder().encodeToString(cert.getEncoded());\n \n         // Replace the \"cert-placeholder\" string in the metadata with the actual cert"},{"sha":"3b2aa3b29b70035d51be090769d4944d3db0c987","filename":"fit/core-reference/src/test/java/org/apache/syncope/fit/core/UserITCase.java","status":"modified","additions":11,"deletions":0,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/fit%2Fcore-reference%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Ffit%2Fcore%2FUserITCase.java?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -50,6 +50,7 @@\n import org.apache.syncope.common.lib.patch.MembershipPatch;\n import org.apache.syncope.common.lib.patch.PasswordPatch;\n import org.apache.syncope.common.lib.patch.StatusPatch;\n+import org.apache.syncope.common.lib.patch.StringReplacePatchItem;\n import org.apache.syncope.common.lib.patch.UserPatch;\n import org.apache.syncope.common.lib.policy.AccountPolicyTO;\n import org.apache.syncope.common.lib.policy.PasswordPolicyTO;\n@@ -567,6 +568,16 @@ public void update() {\n \n         AttrTO fullNameAttr = userTO.getPlainAttr(\"fullname\");\n         assertEquals(Collections.singletonList(newFullName), fullNameAttr.getValues());\n+\n+        // update by username\n+        userPatch = new UserPatch();\n+        userPatch.setKey(userTO.getUsername());\n+        String newUsername = UUID.randomUUID().toString();\n+        userPatch.setUsername(new StringReplacePatchItem.Builder().value(newUsername).build());\n+\n+        userTO = updateUser(userPatch).getEntity();\n+        assertNotNull(userTO);\n+        assertEquals(newUsername, userTO.getUsername());\n     }\n \n     @Test"},{"sha":"9a57132dbffa6fc89e4416c4c97fc30ae8ab222a","filename":"pom.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/81515d7e243e8116409e2be2cb6bf036a305f988/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/81515d7e243e8116409e2be2cb6bf036a305f988/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=81515d7e243e8116409e2be2cb6bf036a305f988","patch":"@@ -356,8 +356,6 @@ under the License.\n   <properties>\n     <syncope.version>${project.version}</syncope.version>\n \n-    <bouncycastle.version>1.57</bouncycastle.version>\n-\n     <connid.version>1.4.3.0</connid.version>\n     <connid.soap.version>1.4.2-SNAPSHOT</connid.soap.version>\n     <connid.rest.version>1.0.1</connid.rest.version>\n@@ -1596,6 +1594,12 @@ under the License.\n         <version>1.5.5</version>\n         <scope>test</scope>\n       </dependency>\n+      <dependency>\n+        <groupId>org.bouncycastle</groupId>\n+        <artifactId>bcpkix-jdk15on</artifactId>\n+        <version>1.57</version>\n+        <scope>test</scope>\n+      </dependency>\n       <dependency>\n         <groupId>org.springframework</groupId>\n         <artifactId>spring-test</artifactId>"}]}