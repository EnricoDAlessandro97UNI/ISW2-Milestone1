{"sha":"b8114cf1cfadd6a9730adca4301663b4dd86db19","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmI4MTE0Y2YxY2ZhZGQ2YTk3MzBhZGNhNDMwMTY2M2I0ZGQ4NmRiMTk=","commit":{"author":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2018-12-20T22:52:09Z"},"committer":{"name":"fmartelli","email":"fabio.martelli@gmail.com","date":"2018-12-20T23:07:31Z"},"message":"[SYNCOPE-1419] provides the correct behavior in case of multivalue fields for json implementation as well","tree":{"sha":"2a9c0204677d87afcaa3dffb7dfda500a2b7af50","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/2a9c0204677d87afcaa3dffb7dfda500a2b7af50"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/b8114cf1cfadd6a9730adca4301663b4dd86db19","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b8114cf1cfadd6a9730adca4301663b4dd86db19","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/b8114cf1cfadd6a9730adca4301663b4dd86db19","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/b8114cf1cfadd6a9730adca4301663b4dd86db19/comments","author":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"committer":{"login":"fmartelli","id":1791932,"node_id":"MDQ6VXNlcjE3OTE5MzI=","avatar_url":"https://avatars.githubusercontent.com/u/1791932?v=4","gravatar_id":"","url":"https://api.github.com/users/fmartelli","html_url":"https://github.com/fmartelli","followers_url":"https://api.github.com/users/fmartelli/followers","following_url":"https://api.github.com/users/fmartelli/following{/other_user}","gists_url":"https://api.github.com/users/fmartelli/gists{/gist_id}","starred_url":"https://api.github.com/users/fmartelli/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/fmartelli/subscriptions","organizations_url":"https://api.github.com/users/fmartelli/orgs","repos_url":"https://api.github.com/users/fmartelli/repos","events_url":"https://api.github.com/users/fmartelli/events{/privacy}","received_events_url":"https://api.github.com/users/fmartelli/received_events","type":"User","site_admin":false},"parents":[{"sha":"614d81e2f058d26bfd648577c52d111a4508048e","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/614d81e2f058d26bfd648577c52d111a4508048e","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/614d81e2f058d26bfd648577c52d111a4508048e"}],"stats":{"total":201,"additions":111,"deletions":90},"files":[{"sha":"884a40b7b3130f4f029fcbe76f8c6e85ff88ab0f","filename":"core/persistence-jpa-json/src/main/java/org/apache/syncope/core/persistence/jpa/dao/PGJPAJSONAnySearchDAO.java","status":"modified","additions":97,"deletions":80,"changes":177,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8114cf1cfadd6a9730adca4301663b4dd86db19/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8114cf1cfadd6a9730adca4301663b4dd86db19/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa-json%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FPGJPAJSONAnySearchDAO.java?ref=b8114cf1cfadd6a9730adca4301663b4dd86db19","patch":"@@ -28,6 +28,7 @@\n import org.apache.syncope.common.lib.SyncopeConstants;\n import org.apache.syncope.common.lib.types.AnyTypeKind;\n import org.apache.syncope.common.lib.types.AttrSchemaType;\n+import org.apache.syncope.core.persistence.api.dao.search.AnyCond;\n import org.apache.syncope.core.persistence.api.dao.search.AttributeCond;\n import org.apache.syncope.core.persistence.api.dao.search.OrderByClause;\n import org.apache.syncope.core.persistence.api.entity.AnyUtils;\n@@ -153,94 +154,106 @@ private void fillAttrQuery(\n             final PlainSchema schema,\n             final AttributeCond cond,\n             final boolean not,\n-            final List<Object> parameters) {\n+            final List<Object> parameters,\n+            final SearchSupport svs) {\n \n-        String key = key(schema.getType());\n-        boolean lower = (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum)\n-                && (cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE);\n+        // This first branch is required for handling with not conditions given on multivalue fields (SYNCOPE-1419)\n+        if (not && !(cond instanceof AnyCond)\n+                && schema.isMultivalue()\n+                && cond.getType() != AttributeCond.Type.ISNULL\n+                && cond.getType() != AttributeCond.Type.ISNOTNULL) {\n+            query.append(\"id NOT IN (SELECT DISTINCT any_id FROM \");\n+            query.append(svs.field().name).append(\" WHERE \");\n+            fillAttrQuery(anyUtils, query, attrValue, schema, cond, false, parameters, svs);\n+            query.append(\")\");\n+        } else {\n+            String key = key(schema.getType());\n+            boolean lower = (schema.getType() == AttrSchemaType.String || schema.getType() == AttrSchemaType.Enum)\n+                    && (cond.getType() == AttributeCond.Type.IEQ || cond.getType() == AttributeCond.Type.ILIKE);\n+\n+            if (!not && cond.getType() == AttributeCond.Type.EQ) {\n+                PlainAttr<?> container = anyUtils.newPlainAttr();\n+                container.setSchema(schema);\n+                if (attrValue instanceof PlainAttrUniqueValue) {\n+                    container.setUniqueValue((PlainAttrUniqueValue) attrValue);\n+                } else {\n+                    ((JSONPlainAttr) container).add(attrValue);\n+                }\n \n-        if (!not && cond.getType() == AttributeCond.Type.EQ) {\n-            PlainAttr<?> container = anyUtils.newPlainAttr();\n-            container.setSchema(schema);\n-            if (attrValue instanceof PlainAttrUniqueValue) {\n-                container.setUniqueValue((PlainAttrUniqueValue) attrValue);\n+                query.append(\"plainAttrs @> '\").\n+                        append(POJOHelper.serialize(Arrays.asList(container))).\n+                        append(\"'::jsonb\");\n             } else {\n-                ((JSONPlainAttr) container).add(attrValue);\n-            }\n+                query.append(\"attrs ->> 'schema' = ?\").append(setParameter(parameters, cond.getSchema())).\n+                        append(\" AND \").\n+                        append(lower ? \"LOWER(\" : \"\").\n+                        append(schema.isUniqueConstraint()\n+                                ? \"attrs -> 'uniqueValue'\" : \"attrValues\").\n+                        append(\" ->> '\").append(key).append(\"'\").\n+                        append(lower ? \")\" : \"\");\n+\n+                switch (cond.getType()) {\n+                    case LIKE:\n+                    case ILIKE:\n+                        if (not) {\n+                            query.append(\"NOT \");\n+                        }\n+                        query.append(\" LIKE \");\n+                        break;\n \n-            query.append(\"plainAttrs @> '\").\n-                    append(POJOHelper.serialize(Arrays.asList(container))).\n-                    append(\"'::jsonb\");\n-        } else {\n-            query.append(\"attrs ->> 'schema' = ?\").append(setParameter(parameters, cond.getSchema())).\n-                    append(\" AND \").\n-                    append(lower ? \"LOWER(\" : \"\").\n-                    append(schema.isUniqueConstraint()\n-                            ? \"attrs -> 'uniqueValue'\" : \"attrValues\").\n-                    append(\" ->> '\").append(key).append(\"'\").\n-                    append(lower ? \")\" : \"\");\n-\n-            switch (cond.getType()) {\n-                case LIKE:\n-                case ILIKE:\n-                    if (not) {\n-                        query.append(\"NOT \");\n-                    }\n-                    query.append(\" LIKE \");\n-                    break;\n-\n-                case GE:\n-                    if (not) {\n-                        query.append('<');\n-                    } else {\n-                        query.append(\">=\");\n-                    }\n-                    break;\n+                    case GE:\n+                        if (not) {\n+                            query.append('<');\n+                        } else {\n+                            query.append(\">=\");\n+                        }\n+                        break;\n \n-                case GT:\n-                    if (not) {\n-                        query.append(\"<=\");\n-                    } else {\n-                        query.append('>');\n-                    }\n-                    break;\n+                    case GT:\n+                        if (not) {\n+                            query.append(\"<=\");\n+                        } else {\n+                            query.append('>');\n+                        }\n+                        break;\n \n-                case LE:\n-                    if (not) {\n-                        query.append('>');\n-                    } else {\n-                        query.append(\"<=\");\n-                    }\n-                    break;\n+                    case LE:\n+                        if (not) {\n+                            query.append('>');\n+                        } else {\n+                            query.append(\"<=\");\n+                        }\n+                        break;\n \n-                case LT:\n-                    if (not) {\n-                        query.append(\">=\");\n-                    } else {\n-                        query.append('<');\n-                    }\n-                    break;\n+                    case LT:\n+                        if (not) {\n+                            query.append(\">=\");\n+                        } else {\n+                            query.append('<');\n+                        }\n+                        break;\n \n-                case EQ:\n-                case IEQ:\n-                default:\n-                    if (not) {\n-                        query.append('!');\n-                    }\n-                    query.append('=');\n-            }\n+                    case EQ:\n+                    case IEQ:\n+                    default:\n+                        if (not) {\n+                            query.append('!');\n+                        }\n+                        query.append('=');\n+                }\n \n-            String value = cond.getExpression();\n-            if (schema.getType() == AttrSchemaType.Date) {\n-                try {\n-                    value = String.valueOf(DATE_FORMAT.parse(value).getTime());\n-                } catch (ParseException e) {\n-                    LOG.error(\"Could not parse {} as date\", value, e);\n+                String value = cond.getExpression();\n+                if (schema.getType() == AttrSchemaType.Date) {\n+                    try {\n+                        value = String.valueOf(DATE_FORMAT.parse(value).getTime());\n+                    } catch (ParseException e) {\n+                        LOG.error(\"Could not parse {} as date\", value, e);\n+                    }\n                 }\n+                query.append(lower ? \"LOWER(\" : \"\").\n+                        append(\"?\").append(setParameter(parameters, value)).\n+                        append(lower ? \")\" : \"\");\n             }\n-            query.append(lower ? \"LOWER(\" : \"\").\n-                    append(\"?\").append(setParameter(parameters, value)).\n-                    append(lower ? \")\" : \"\");\n         }\n     }\n \n@@ -267,8 +280,8 @@ protected String getQuery(\n             }\n         }\n \n-        StringBuilder query = new StringBuilder(\"SELECT DISTINCT any_id FROM \").\n-                append(svs.field().name).append(\" WHERE \");\n+        StringBuilder query = \n+                new StringBuilder(\"SELECT DISTINCT any_id FROM \").append(svs.field().name).append(\" WHERE \");\n         switch (cond.getType()) {\n             case ISNOTNULL:\n                 query.append(\"plainAttrs @> '[{\\\"schema\\\":\\\"\").\n@@ -285,8 +298,12 @@ protected String getQuery(\n                 break;\n \n             default:\n+                if (not && !(cond instanceof AnyCond) && checked.getLeft().isMultivalue()) {\n+                    query = new StringBuilder(\"SELECT DISTINCT id AS any_id FROM \").append(svs.table().name).\n+                            append(\" WHERE \");\n+                }\n                 fillAttrQuery(anyUtilsFactory.getInstance(svs.anyTypeKind),\n-                        query, checked.getRight(), checked.getLeft(), cond, not, parameters);\n+                        query, checked.getRight(), checked.getLeft(), cond, not, parameters, svs);\n         }\n \n         return query.toString();"},{"sha":"c669690ca7596687264896ee9f6f95dd885284a3","filename":"core/persistence-jpa/src/main/java/org/apache/syncope/core/persistence/jpa/dao/JPAAnySearchDAO.java","status":"modified","additions":14,"deletions":10,"changes":24,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/b8114cf1cfadd6a9730adca4301663b4dd86db19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/b8114cf1cfadd6a9730adca4301663b4dd86db19/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fpersistence-jpa%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fjpa%2Fdao%2FJPAAnySearchDAO.java?ref=b8114cf1cfadd6a9730adca4301663b4dd86db19","patch":"@@ -130,8 +130,8 @@ protected int doCount(final Set<String> adminRealms, final SearchCond cond, fina\n         Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n         // 1. get the query string from the search condition\n-        Pair<StringBuilder, Set<String>> queryInfo =\n-                getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n+        Pair<StringBuilder, Set<String>> queryInfo = getQuery(buildEffectiveCond(cond, filter.getRight()), parameters,\n+                svs);\n \n         StringBuilder queryString = queryInfo.getLeft();\n \n@@ -167,8 +167,8 @@ protected <T extends Any<?>> List<T> doSearch(\n             Pair<String, Set<String>> filter = getAdminRealmsFilter(adminRealms, svs, parameters);\n \n             // 1. get the query string from the search condition\n-            Pair<StringBuilder, Set<String>> queryInfo =\n-                    getQuery(buildEffectiveCond(cond, filter.getRight()), parameters, svs);\n+            Pair<StringBuilder, Set<String>> queryInfo = getQuery(buildEffectiveCond(cond, filter.getRight()),\n+                    parameters, svs);\n \n             StringBuilder queryString = queryInfo.getLeft();\n \n@@ -384,8 +384,8 @@ private OrderBySupport parseOrderBy(\n                         orderByNonUniquePlainSchemas.add(schema.getKey());\n                     }\n                     if (orderByUniquePlainSchemas.size() > 1 || orderByNonUniquePlainSchemas.size() > 1) {\n-                        SyncopeClientException invalidSearch =\n-                                SyncopeClientException.build(ClientExceptionType.InvalidSearchExpression);\n+                        SyncopeClientException invalidSearch = SyncopeClientException.build(\n+                                ClientExceptionType.InvalidSearchExpression);\n                         invalidSearch.getElements().add(\"Order by more than one attribute is not allowed; \"\n                                 + \"remove one from \" + (orderByUniquePlainSchemas.size() > 1\n                                 ? orderByUniquePlainSchemas : orderByNonUniquePlainSchemas));\n@@ -973,12 +973,16 @@ protected String getQuery(\n                 break;\n \n             default:\n-                if (checked.getLeft().isUniqueConstraint()) {\n-                    query.append(svs.asSearchViewSupport().uniqueAttr().name);\n+                if (not && !(cond instanceof AnyCond) && checked.getLeft().isMultivalue()) {\n+                    query.append(svs.field().name).append(\" WHERE \");\n                 } else {\n-                    query.append(svs.asSearchViewSupport().attr().name);\n+                    if (checked.getLeft().isUniqueConstraint()) {\n+                        query.append(svs.asSearchViewSupport().uniqueAttr().name);\n+                    } else {\n+                        query.append(svs.asSearchViewSupport().attr().name);\n+                    }\n+                    query.append(\" WHERE schema_id='\").append(checked.getLeft().getKey());\n                 }\n-                query.append(\" WHERE schema_id='\").append(checked.getLeft().getKey());\n                 fillAttrQuery(query, checked.getRight(), checked.getLeft(), cond, not, parameters, svs);\n         }\n "}]}