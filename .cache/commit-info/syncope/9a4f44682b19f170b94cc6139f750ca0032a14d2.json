{"sha":"9a4f44682b19f170b94cc6139f750ca0032a14d2","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjlhNGY0NDY4MmIxOWYxNzBiOTRjYzYxMzlmNzUwY2EwMDMyYTE0ZDI=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-18T14:29:07Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2012-01-18T14:29:07Z"},"message":"Update issue 238\nEHCache is onboard :-)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/branches/0_8_X_ASL@1247348 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"c13f976f2395693ab0908fbcc0dc144752149dc0","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/c13f976f2395693ab0908fbcc0dc144752149dc0"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/9a4f44682b19f170b94cc6139f750ca0032a14d2","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a4f44682b19f170b94cc6139f750ca0032a14d2","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/9a4f44682b19f170b94cc6139f750ca0032a14d2","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/9a4f44682b19f170b94cc6139f750ca0032a14d2/comments","author":null,"committer":null,"parents":[{"sha":"c7c1cd35b9af30e2e7fe1a1527db88fdfb949d55","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/c7c1cd35b9af30e2e7fe1a1527db88fdfb949d55","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/c7c1cd35b9af30e2e7fe1a1527db88fdfb949d55"}],"stats":{"total":854,"additions":787,"deletions":67},"files":[{"sha":"15f45c2058a07cfe6e7e514dd383c63087821274","filename":"TODO","status":"modified","additions":5,"deletions":6,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/TODO","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/TODO","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/TODO?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -1,13 +1,12 @@\n+=global=\n+\n+* POM refactoring: create release subproject (like as Cocoon 3 and Hippo CMS)\n+* POM refactoring: slim down core WAR size by removing dependencies from WAR itself and putting into cargo classpath\n+\n =console=\n \n * check Selenium\n \n =core=\n \n-* redirect OpenJPA plugin log somewhere\n-* verify Clob behavior on PostgreSQL (requires external deploy and restart)\n-* 2nd level cache\n * statistics?\n-* WARNING: javax.persistence.cache.retrieveMode\" is not a supported query hint. May be you meant \"javax.persistence.lock.timeout\"?\n-* WARN   [pool-2-thread-1] openjpa.Runtime - An error occurred while registering a ClassTransformer with PersistenceUnitInfo: name 'syncopePersistenceUnit', root URL [file:/home/ilgrosso/work/syncope-ASL/core/target/cargo/configurations/tomcat7x/webapps/syncope/WEB-INF/classes/]. The error has been consumed. To see it, set your openjpa.Runtime log level to TRACE. Load-time class transformation will not be available.\n-* WARN   [pool-2-thread-1] openjpa.Runtime - An error occurred while registering a ClassTransformer with PersistenceUnitInfo: name 'syncopePersistenceUnit', root URL [file:/home/ilgrosso/work/syncope-ASL/core/target/cargo/configurations/tomcat7x/webapps/syncope/WEB-INF/classes/]. The error has been consumed. To see it, set your openjpa.Runtime log level to TRACE. Load-time class transformation will not be available."},{"sha":"eec93bda01c20a8fcbb9e231b7e313e137a51794","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/AbstractDAOImpl.java","status":"modified","additions":34,"deletions":0,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FAbstractDAOImpl.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -14,6 +14,8 @@\n  */\n package org.syncope.core.persistence.dao.impl;\n \n+import javax.persistence.CacheRetrieveMode;\n+import javax.persistence.CacheStoreMode;\n import javax.persistence.EntityManager;\n import javax.persistence.PersistenceContext;\n import javax.persistence.PersistenceContextType;\n@@ -33,10 +35,42 @@ public abstract class AbstractDAOImpl implements DAO {\n     protected static final Logger LOG =\n             LoggerFactory.getLogger(AbstractDAOImpl.class);\n \n+    private String CACHE_STORE_MODE =\n+            \"javax.persistence.cache.storeMode\";\n+\n+    private String CACHE_RETRIEVE_MODE =\n+            \"javax.persistence.cache.retrieveMode\";\n+\n     @Value(\"#{entityManager}\")\n     @PersistenceContext(type = PersistenceContextType.TRANSACTION)\n     protected EntityManager entityManager;\n \n+    protected CacheRetrieveMode getCacheRetrieveMode() {\n+        return entityManager.getProperties().containsKey(CACHE_RETRIEVE_MODE)\n+                ? (CacheRetrieveMode) entityManager.getProperties().get(\n+                CACHE_RETRIEVE_MODE) : CacheRetrieveMode.BYPASS;\n+    }\n+\n+    protected void setCacheRetrieveMode(final CacheRetrieveMode retrieveMode) {\n+        if (retrieveMode != null) {\n+            entityManager.getProperties().\n+                    put(CACHE_RETRIEVE_MODE, retrieveMode);\n+        }\n+    }\n+\n+    protected CacheStoreMode getCacheStoreMode() {\n+        return entityManager.getProperties().containsKey(CACHE_STORE_MODE)\n+                ? (CacheStoreMode) entityManager.getProperties().get(\n+                CACHE_STORE_MODE) : CacheStoreMode.BYPASS;\n+    }\n+\n+    protected void setCacheStoreMode(final CacheStoreMode storeMode) {\n+        if (storeMode != null) {\n+            entityManager.getProperties().\n+                    put(CACHE_STORE_MODE, storeMode);\n+        }\n+    }\n+\n     @Override\n     public <T extends AbstractBaseBean> T refresh(final T entity) {\n         entityManager.refresh(entity);"},{"sha":"53dd618e5436308d49d2856312fd0b848badce0f","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/EntitlementDAOImpl.java","status":"modified","additions":13,"deletions":8,"changes":21,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FEntitlementDAOImpl.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -40,14 +40,19 @@ public Entitlement find(final String name) {\n \n     @Override\n     public List<Entitlement> findAll() {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM Entitlement e\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n-        query.setHint(\"javax.persistence.cache.storeMode\",\n-                CacheStoreMode.REFRESH);\n-\n-        return query.getResultList();\n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+        CacheStoreMode prevCSM = getCacheStoreMode();\n+        setCacheStoreMode(CacheStoreMode.REFRESH);\n+\n+        Query query = entityManager.createQuery(\"SELECT e FROM Entitlement e\");\n+\n+        List<Entitlement> result = query.getResultList();\n+\n+        setCacheRetrieveMode(prevCRM);\n+        setCacheStoreMode(prevCSM);\n+\n+        return result;\n     }\n \n     @Override"},{"sha":"19d634adb30d326113a918262f889e1036a38427","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/ResourceDAOImpl.java","status":"modified","additions":25,"deletions":13,"changes":38,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FResourceDAOImpl.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -17,10 +17,11 @@\n import java.util.List;\n \n import javassist.NotFoundException;\n-\n import javax.persistence.CacheRetrieveMode;\n+\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.springframework.transaction.annotation.Transactional;\n@@ -47,18 +48,24 @@ public class ResourceDAOImpl extends AbstractDAOImpl\n \n     @Override\n     public ExternalResource find(final String name) {\n-        Query query = entityManager.createQuery(\"SELECT e \"\n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+\n+        TypedQuery<ExternalResource> query =\n+                entityManager.createQuery(\"SELECT e \"\n                 + \"FROM \" + ExternalResource.class.getSimpleName() + \" e \"\n-                + \"WHERE e.name = :name\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n+                + \"WHERE e.name = :name\", ExternalResource.class);\n         query.setParameter(\"name\", name);\n \n+        ExternalResource result = null;\n         try {\n-            return (ExternalResource) query.getSingleResult();\n+            result = query.getSingleResult();\n         } catch (NoResultException e) {\n-            return null;\n         }\n+\n+        setCacheRetrieveMode(prevCRM);\n+\n+        return result;\n     }\n \n     @Override\n@@ -77,12 +84,12 @@ public List<ExternalResource> findAllByPriority() {\n     }\n \n     /**\n-     * This method has an explicit @Transactional annotation because it is \n+     * This method has an explicit @Transactional annotation because it is\n      * called by SyncJob.\n-     * \n+     *\n      * @see org.syncope.core.scheduling.SyncJob\n      *\n-     * @param resource  entity to be merged\n+     * @param resource entity to be merged\n      * @return the same entity, updated\n      */\n     @Override\n@@ -99,12 +106,17 @@ public ExternalResource save(final ExternalResource resource) {\n \n     @Override\n     public List<SchemaMapping> findAllMappings() {\n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+\n         Query query = entityManager.createQuery(\"SELECT e FROM \"\n                 + SchemaMapping.class.getSimpleName() + \" e\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n \n-        return query.getResultList();\n+        List<SchemaMapping> result = query.getResultList();\n+\n+        setCacheRetrieveMode(prevCRM);\n+\n+        return result;\n     }\n \n     @Override"},{"sha":"4fd79cfd0b4f02f4962687c28dced36354aab767","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/RoleDAOImpl.java","status":"modified","additions":21,"deletions":9,"changes":30,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FRoleDAOImpl.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -19,6 +19,7 @@\n import javax.persistence.CacheRetrieveMode;\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n+import javax.persistence.TypedQuery;\n import org.springframework.beans.factory.annotation.Autowired;\n import org.springframework.stereotype.Repository;\n import org.syncope.core.persistence.beans.Entitlement;\n@@ -36,28 +37,39 @@ public class RoleDAOImpl extends AbstractDAOImpl implements RoleDAO {\n \n     @Override\n     public SyncopeRole find(final Long id) {\n-        Query query = entityManager.createQuery(\n-                \"SELECT e FROM SyncopeRole e WHERE e.id = :id\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+\n+        TypedQuery<SyncopeRole> query = entityManager.createQuery(\n+                \"SELECT e FROM SyncopeRole e WHERE e.id = :id\",\n+                SyncopeRole.class);\n         query.setParameter(\"id\", id);\n \n+        SyncopeRole result = null;\n         try {\n-            return (SyncopeRole) query.getSingleResult();\n+            result = query.getSingleResult();\n         } catch (NoResultException e) {\n-            return null;\n         }\n+\n+        setCacheRetrieveMode(prevCRM);\n+\n+        return result;\n     }\n \n     @Override\n     public List<SyncopeRole> find(final String name) {\n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM SyncopeRole e WHERE e.name = :name\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n         query.setParameter(\"name\", name);\n \n-        return query.getResultList();\n+        List<SyncopeRole> result = query.getResultList();\n+\n+        setCacheRetrieveMode(prevCRM);\n+\n+        return result;\n     }\n \n     @Override"},{"sha":"8b5680e0e145bf1b0f14eaed8d0b4f02cce18124","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/SchemaDAOImpl.java","status":"modified","additions":8,"deletions":3,"changes":11,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FSchemaDAOImpl.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -49,12 +49,17 @@ public <T extends AbstractSchema> T find(final String name,\n     public <T extends AbstractSchema> List<T> findAll(\n             final Class<T> reference) {\n \n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+\n         Query query = entityManager.createQuery(\n                 \"SELECT e FROM \" + reference.getSimpleName() + \" e\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n \n-        return query.getResultList();\n+        List<T> result = query.getResultList();\n+\n+        setCacheRetrieveMode(prevCRM);\n+\n+        return result;\n     }\n \n     @Override"},{"sha":"7a1395d203c6b386c90ef0b9bc41c7bc00b7bc7b","filename":"core/src/main/java/org/syncope/core/persistence/dao/impl/UserDAOImpl.java","status":"modified","additions":43,"deletions":25,"changes":68,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fdao%2Fimpl%2FUserDAOImpl.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -26,6 +26,7 @@\n import javax.persistence.NoResultException;\n import javax.persistence.Query;\n import javax.persistence.TemporalType;\n+import javax.persistence.TypedQuery;\n import org.apache.commons.jexl2.parser.Parser;\n import org.apache.commons.jexl2.parser.ParserConstants;\n import org.apache.commons.jexl2.parser.Token;\n@@ -42,8 +43,8 @@\n import org.syncope.core.persistence.beans.user.UDerSchema;\n import org.syncope.core.persistence.beans.user.USchema;\n import org.syncope.core.persistence.dao.DerSchemaDAO;\n-import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.RoleDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n import org.syncope.core.persistence.dao.TaskDAO;\n import org.syncope.core.persistence.dao.UserDAO;\n import org.syncope.core.rest.controller.InvalidSearchConditionException;\n@@ -66,56 +67,71 @@ public class UserDAOImpl extends AbstractDAOImpl\n \n     @Override\n     public SyncopeUser find(final Long id) {\n-        Query query = entityManager.createQuery(\n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+\n+        TypedQuery<SyncopeUser> query = entityManager.createQuery(\n                 \"SELECT e FROM \" + SyncopeUser.class.getSimpleName() + \" e \"\n-                + \"WHERE e.id = :id\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n+                + \"WHERE e.id = :id\", SyncopeUser.class);\n         query.setParameter(\"id\", id);\n \n+        SyncopeUser result = null;\n         try {\n-            return (SyncopeUser) query.getSingleResult();\n+            return query.getSingleResult();\n         } catch (NoResultException e) {\n-            return null;\n         }\n+\n+        setCacheRetrieveMode(prevCRM);\n+\n+        return result;\n     }\n \n     @Override\n     public SyncopeUser find(final String username) {\n-        Query query = entityManager.createQuery(\n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+\n+        TypedQuery<SyncopeUser> query = entityManager.createQuery(\n                 \"SELECT e FROM \" + SyncopeUser.class.getSimpleName() + \" e \"\n-                + \"WHERE e.username = :username\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n+                + \"WHERE e.username = :username\", SyncopeUser.class);\n         query.setParameter(\"username\", username);\n \n+        SyncopeUser result = null;\n         try {\n-            return (SyncopeUser) query.getSingleResult();\n+            return query.getSingleResult();\n         } catch (NoResultException e) {\n-            return null;\n         }\n+\n+        setCacheRetrieveMode(prevCRM);\n+\n+        return result;\n     }\n \n     @Override\n     public SyncopeUser findByWorkflowId(final String workflowId) {\n-        Query query = entityManager.createQuery(\n+        CacheRetrieveMode prevCRM = getCacheRetrieveMode();\n+        setCacheRetrieveMode(CacheRetrieveMode.USE);\n+\n+        TypedQuery<SyncopeUser> query = entityManager.createQuery(\n                 \"SELECT e FROM \" + SyncopeUser.class.getSimpleName() + \" e \"\n-                + \"WHERE e.workflowId = :workflowId\");\n-        query.setHint(\"javax.persistence.cache.retrieveMode\",\n-                CacheRetrieveMode.USE);\n+                + \"WHERE e.workflowId = :workflowId\", SyncopeUser.class);\n         query.setParameter(\"workflowId\", workflowId);\n \n-        return (SyncopeUser) query.getSingleResult();\n+        SyncopeUser result = query.getSingleResult();\n+\n+        setCacheRetrieveMode(prevCRM);\n+\n+        return result;\n     }\n \n     /**\n-     * Find users by derived attribute value.\n-     * This method could fail if one or more string literals contained into the\n-     * derived attribute value provided derive from identifier (schema name)\n-     * replacement. When you are going to specify a derived attribute expression\n-     * you must be quite sure that string literals used to build the expression\n-     * cannot be found into the attribute values used to replace attribute\n-     * schema names used as identifiers.\n+     * Find users by derived attribute value. This method could fail if one or\n+     * more string literals contained into the derived attribute value provided\n+     * derive from identifier (schema name) replacement. When you are going to\n+     * specify a derived attribute expression you must be quite sure that string\n+     * literals used to build the expression cannot be found into the attribute\n+     * values used to replace attribute schema names used as identifiers.\n+     *\n      * @param schemaName derived schema name.\n      * @param value derived attribute value.\n      * @return list of users.\n@@ -385,6 +401,7 @@ public void delete(final SyncopeUser user) {\n     /**\n      * Generate one where clause for each different attribute schema into the\n      * derived schema expression provided.\n+     *\n      * @param expression derived schema expression.\n      * @param value derived attribute value.\n      * @return where clauses to use to build the query.\n@@ -533,6 +550,7 @@ public int compare(String t, String t1) {\n \n     /**\n      * Split an attribute value recurring on provided literals/tokens.\n+     *\n      * @param attrValue value to be splitted.\n      * @param literals literals/tokens.\n      * @return"},{"sha":"05b79e15d5cb137da8a78fd0ee80e8ef7a4cd124","filename":"core/src/main/java/org/syncope/core/persistence/openjpa/EhCacheDataCache.java","status":"added","additions":314,"deletions":0,"changes":314,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDataCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDataCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDataCache.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -0,0 +1,314 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.openjpa;\n+\n+import java.util.HashMap;\n+import java.util.Map;\n+import java.util.concurrent.locks.ReentrantLock;\n+import net.sf.ehcache.CacheManager;\n+import net.sf.ehcache.Ehcache;\n+import net.sf.ehcache.Element;\n+import org.apache.openjpa.datacache.AbstractDataCache;\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.DataCachePCData;\n+import org.apache.openjpa.lib.util.Localizer;\n+import org.apache.openjpa.meta.ClassMetaData;\n+import org.apache.openjpa.util.OpenJPAId;\n+\n+/**\n+ * A plug-in {@link DataCache L2 Cache} for OpenJPA to use EhCache.\n+ * <p/>\n+ * This cache maintains a set of Ehcaches per-class basis. The name of the\n+ * NamedCache for a persistence class C is determined by the\n+ * {@link org.apache.openjpa.persistence.DataCache @DataCache} annotation in the\n+ * class C. If no name is specified in @DataCache annotation then a default name\n+ * is used. The default name is\n+ * <code>openjpa</code> but can be configured via this plug-in's\n+ * <code>DefaultName</code> property unless\n+ * <code>UseDefaultForUnnamedCaches</code> is set to\n+ * <code>false</code>.\n+ *\n+ * @author Pinaki Poddar\n+ * @author Craig Andrews\n+ * @author Greg Luck\n+ */\n+public class EhCacheDataCache extends AbstractDataCache implements DataCache {\n+\n+    /**\n+     *\n+     */\n+    protected static final Localizer LOCALIZER =\n+            Localizer.forPackage(EhCacheDataCache.class);\n+\n+    private static final long serialVersionUID = -713343580941141830L;\n+\n+    /**\n+     *\n+     */\n+    protected final Map<Class, Ehcache> caches = new HashMap<Class, Ehcache>();\n+\n+    /**\n+     *\n+     */\n+    protected boolean useDefaultForUnnamedCaches;\n+\n+    /**\n+     *\n+     */\n+    protected String defaultName = \"openjpa\";\n+\n+    /**\n+     *\n+     */\n+    protected ReentrantLock writeLock = new ReentrantLock();\n+\n+    /**\n+     * Asserts if default name will be used for the Ehcache for classes which do\n+     * not specify explicitly a name in its @DataCache annotation. The default\n+     * value for this flag is\n+     * <code>true</code>\n+     */\n+    public boolean isUseDefaultForUnnamedCaches() {\n+        return useDefaultForUnnamedCaches;\n+    }\n+\n+    /**\n+     * Sets if default name will be used for the Ehcache for classes which do\n+     * not specify explicitly a name in its @DataCache annotation. The default\n+     * value for this flag is\n+     * <code>true</code>\n+     */\n+    public void setUseDefaultForUnnamedCaches(boolean flag) {\n+        this.useDefaultForUnnamedCaches = flag;\n+    }\n+\n+    /**\n+     * Gets the default name for the Ehcache used for classes which do not\n+     * specify explicitly a name in its @DataCache annotation. The default name\n+     * is\n+     * <code>openjpa</code>\n+     */\n+    public String getDefaultName() {\n+        return defaultName;\n+    }\n+\n+    /**\n+     * Sets the default name for the Ehcache used for classes which do not\n+     * specify explicitly a name in its @DataCache annotation. The default name\n+     * is\n+     * <code>openjpa</code>\n+     */\n+    public void setDefaultName(String defaultName) {\n+        this.defaultName = defaultName;\n+    }\n+\n+    /**\n+     * Clears all entries from the cache\n+     */\n+    @Override\n+    protected void clearInternal() {\n+        for (Ehcache cache : caches.values()) {\n+            cache.removeAll();\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param oid\n+     * @return\n+     */\n+    @Override\n+    protected DataCachePCData getInternal(Object oid) {\n+        Element result = null;\n+        if (oid instanceof OpenJPAId) {\n+            Class cls = ((OpenJPAId) oid).getType();\n+            Ehcache cache = findCache(cls);\n+            if (cache == null) {\n+                return null;\n+            } else {\n+                result = cache.get(oid);\n+            }\n+        } else {\n+            for (Ehcache cache : caches.values()) {\n+                result = cache.get(oid);\n+                if (result != null) {\n+                    break;\n+                }\n+            }\n+        }\n+        if (result == null) {\n+            return null;\n+        } else {\n+            return (DataCachePCData) result.getObjectValue();\n+        }\n+    }\n+\n+    /**\n+     * Pinning is is not implemented in this version\n+     *\n+     * @param oid\n+     * @return\n+     */\n+    @Override\n+    protected boolean pinInternal(Object oid) {\n+        return false;\n+    }\n+\n+    /**\n+     *\n+     * @param oid\n+     * @param pc\n+     * @return\n+     */\n+    @Override\n+    protected DataCachePCData putInternal(Object oid, DataCachePCData pc) {\n+        Ehcache cache = findCache(pc.getType());\n+        if (cache != null) {\n+            cache.put(new Element(oid, pc));\n+        }\n+        return pc;\n+    }\n+\n+    /**\n+     *\n+     * @param cls\n+     * @param subclasses\n+     */\n+    @Override\n+    protected void removeAllInternal(Class cls, boolean subclasses) {\n+        for (Map.Entry<Class, Ehcache> entry : caches.entrySet()) {\n+            if (subclasses) {\n+                if (cls.isAssignableFrom(entry.getKey())) {\n+                    entry.getValue().removeAll();\n+                }\n+            } else {\n+                if (entry.getKey() == cls) {\n+                    entry.getValue().removeAll();\n+                }\n+            }\n+        }\n+    }\n+\n+    /**\n+     *\n+     * @param oid\n+     * @return\n+     */\n+    @Override\n+    protected DataCachePCData removeInternal(Object oid) {\n+        DataCachePCData result = getInternal(oid);\n+        Class cls = determineClassFromObjectId(oid);\n+        if (caches.containsKey(cls)) {\n+            caches.get(cls).remove(oid);\n+        }\n+        return result;\n+    }\n+\n+    /**\n+     * Pinning and unpinning are not implemented in this version\n+     *\n+     * @param oid\n+     * @return\n+     */\n+    @Override\n+    protected boolean unpinInternal(Object oid) {\n+        return false;\n+    }\n+\n+    /**\n+     *\n+     */\n+    public void writeLock() {\n+        writeLock.lock();\n+    }\n+\n+    /**\n+     *\n+     */\n+    public void writeUnlock() {\n+        writeLock.unlock();\n+    }\n+\n+    /**\n+     * Find an Ehcache for the given Class. Makes all the following attempt in\n+     * order to find a cache and if every attempt fails returns null:\n+     * <p/>\n+     * <LI>NamedCache for the given class has been obtained before <LI>Meta-data\n+     * for the given class annotated for a\n+     * {@link org.apache.openjpa.persistence.DataCache DataCache}. <LI>{@link #setUseDefaultForUnnamedCaches(boolean) Configured}\n+     * to use default cache.\n+     */\n+    protected Ehcache findCache(Class clazz) {\n+        Ehcache cache = caches.get(clazz);\n+        if (cache == null) {\n+            ClassMetaData meta = conf.getMetaDataRepositoryInstance().\n+                    getCachedMetaData(clazz);\n+            String name = null;\n+            if (meta != null) {\n+                name = meta.getDataCacheName();\n+            }\n+            if ((name == null || \"default\".equals(name))\n+                    && !isUseDefaultForUnnamedCaches()) {\n+                name = clazz.getName();\n+            } else if (isUseDefaultForUnnamedCaches()) {\n+                name = getDefaultName();\n+            }\n+\n+            cache = CacheManager.getInstance().getEhcache(name);\n+            if (cache == null) {\n+                cache = getOrCreateCache(name);\n+            }\n+\n+            //if (cache != null) {\n+            caches.put(clazz, cache);\n+            /*\n+             * } else if (name == null) { throw new\n+             * UserException(LOCALIZER.get(\"no-cache-name\", clazz)); } else {\n+             * throw new UserException(LOCALIZER.get(\"no-cache\", clazz, name));\n+            }\n+             */\n+        }\n+        return cache;\n+    }\n+\n+    /**\n+     * Gets a cache. If the cache does not exist it is created using a hardcoded\n+     * default.\n+     *\n+     * @param name\n+     * @return\n+     */\n+    protected synchronized Ehcache getOrCreateCache(String name) {\n+        CacheManager cacheManager = CacheManager.getInstance();\n+        Ehcache ehCache = cacheManager.getEhcache(name);\n+        if (ehCache == null) {\n+            cacheManager.addCache(name);\n+            ehCache = cacheManager.getEhcache(name);\n+        }\n+        return ehCache;\n+    }\n+\n+    /**\n+     *\n+     * @param oid\n+     * @return\n+     */\n+    protected Class determineClassFromObjectId(Object oid) {\n+        if (oid instanceof OpenJPAId) {\n+            return ((OpenJPAId) oid).getType();\n+        }\n+        return null;\n+    }\n+}"},{"sha":"075e17fab8d40fe1aee5c50bbadeaa8b1fb5f81a","filename":"core/src/main/java/org/syncope/core/persistence/openjpa/EhCacheDataCacheManager.java","status":"added","additions":46,"deletions":0,"changes":46,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDataCacheManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDataCacheManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDataCacheManager.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -0,0 +1,46 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.openjpa;\n+\n+import net.sf.ehcache.Ehcache;\n+import org.apache.openjpa.datacache.DataCache;\n+import org.apache.openjpa.datacache.DataCacheManager;\n+import org.apache.openjpa.datacache.DataCacheManagerImpl;\n+\n+/**\n+ * @author Craig Andrews\n+ * @author Greg Luck\n+ */\n+public class EhCacheDataCacheManager\n+        extends DataCacheManagerImpl implements DataCacheManager {\n+\n+    @Override\n+    public DataCache getDataCache(String name, boolean create) {\n+        DataCache cache = super.getDataCache(name, create);\n+        if (cache == null) {\n+            cache = getSystemDataCache();\n+        }\n+        return cache;\n+    }\n+\n+    @Override\n+    public EhCacheDataCache getSystemDataCache() {\n+        return ((EhCacheDataCache) super.getSystemDataCache());\n+    }\n+\n+    public Ehcache getEhCache(Class cls) {\n+        return getSystemDataCache().findCache(cls);\n+    }\n+}\n\\ No newline at end of file"},{"sha":"093d97e914c100aec8d3cae9accc74d086608478","filename":"core/src/main/java/org/syncope/core/persistence/openjpa/EhCacheDerivation.java","status":"added","additions":118,"deletions":0,"changes":118,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDerivation.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDerivation.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheDerivation.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -0,0 +1,118 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.openjpa;\n+\n+import java.util.Map;\n+import org.apache.openjpa.conf.OpenJPAConfiguration;\n+import org.apache.openjpa.conf.OpenJPAConfigurationImpl;\n+import org.apache.openjpa.lib.conf.AbstractProductDerivation;\n+import org.apache.openjpa.lib.conf.Configuration;\n+import org.apache.openjpa.lib.conf.ConfigurationProvider;\n+import org.apache.openjpa.lib.conf.Configurations;\n+import org.apache.openjpa.lib.util.Localizer;\n+\n+/**\n+ * Introduces a DataCache specialized for EhCache. This derivation is activated\n+ * by setting\n+ * <code>openjpa.DataCacheManager</code> configuration property to\n+ * <code>\"ehcache\"</code>. <BR> This derivation also forces that\n+ * <code>openjpa.DataCache</code> and\n+ * <code>openjpa.RemoteCommitProvider</code> property is <em>not</em> specified\n+ * or specified as\n+ * <code>\"ehcache\"</code> and\n+ * <code>\"none\"</code> respectively.\n+ *\n+ * @author Pinaki Poddar\n+ * @author Craig Andrews\n+ * @author Greg Luck\n+ */\n+public class EhCacheDerivation extends AbstractProductDerivation {\n+\n+    public static final String EHCACHE = \"ehcache\";\n+\n+    public static final String NO_RCP = \"none\";\n+\n+    private static final Localizer LOCALIZER =\n+            Localizer.forPackage(EhCacheDerivation.class);\n+\n+    @Override\n+    public void validate()\n+            throws Exception {\n+        Class.forName(\"net.sf.ehcache.CacheManager\");\n+    }\n+\n+    @Override\n+    public int getType() {\n+        return TYPE_FEATURE;\n+    }\n+\n+    @Override\n+    public boolean beforeConfigurationLoad(Configuration conf) {\n+        if (conf instanceof OpenJPAConfiguration) {\n+            OpenJPAConfigurationImpl oconf = (OpenJPAConfigurationImpl) conf;\n+            oconf.dataCacheManagerPlugin.setAlias(EHCACHE,\n+                    EhCacheDataCacheManager.class.getName());\n+            oconf.dataCachePlugin.setAlias(EHCACHE,\n+                    EhCacheDataCache.class.getName());\n+            oconf.queryCachePlugin.setAlias(EHCACHE,\n+                    EhCacheQueryCache.class.getName());\n+            oconf.remoteProviderPlugin.setAlias(\"none\",\n+                    NoOpRemoteCommitProvider.class.getName());\n+        }\n+        return false;\n+    }\n+\n+    @Override\n+    public boolean beforeConfigurationConstruct(ConfigurationProvider cp) {\n+        Map props = cp.getProperties();\n+        Object dcm = Configurations.getProperty(\"DataCacheManager\", props);\n+        if (dcm != null && isCompliant(dcm, EhCacheDataCacheManager.class)) {\n+            Object dc = Configurations.getProperty(\"DataCache\", props);\n+            if (dc == null) {\n+                cp.addProperty(\"openjpa.DataCache\", EHCACHE);\n+            } else if (!isCompliant(dc, EhCacheDataCache.class)) {\n+                warn(\"incompatible-configuration\", \"DataCache\", dc, EHCACHE);\n+                cp.addProperty(\"openjpa.DataCache\", EHCACHE);\n+            }\n+            Object rcp = Configurations.getProperty(\"RemoteCommitProvider\",\n+                    props);\n+            if (rcp == null) {\n+                cp.addProperty(\"openjpa.RemoteCommitProvider\",\n+                        NoOpRemoteCommitProvider.class.getName());\n+            } else if (!isCompliant(rcp, NoOpRemoteCommitProvider.class)) {\n+                warn(\"incompatible-configuration\", \"RemoteCommitProvider\",\n+                        rcp, NO_RCP);\n+                cp.addProperty(\"openjpa.RemoteCommitProvider\", NO_RCP);\n+            }\n+            Object qc = Configurations.getProperty(\"QueryCache\", props);\n+            if (qc == null) {\n+                cp.addProperty(\"openjpa.QueryCache\", EHCACHE);\n+            }\n+            //using a non-ehcache query cache with an ehcache datacache is perfectly okay\n+            //so don't warn if that is the configuration\n+        }\n+        return false;\n+    }\n+\n+    boolean isCompliant(Object dcm, Class cls) {\n+        return dcm.equals(EHCACHE) || dcm.equals(cls.getName()) || cls.\n+                isAssignableFrom(dcm.getClass());\n+    }\n+\n+    void warn(String key, Object... args) {\n+        Localizer.Message message = LOCALIZER.get(key, args);\n+        System.err.println(\"*** WARN: \" + message);\n+    }\n+}"},{"sha":"9f31d02ce550aff60c6ff1cbad67adc684513304","filename":"core/src/main/java/org/syncope/core/persistence/openjpa/EhCacheQueryCache.java","status":"added","additions":109,"deletions":0,"changes":109,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheQueryCache.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheQueryCache.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FEhCacheQueryCache.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -0,0 +1,109 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.openjpa;\n+\n+import java.util.Collection;\n+import java.util.concurrent.locks.ReentrantLock;\n+import net.sf.ehcache.CacheManager;\n+import net.sf.ehcache.Ehcache;\n+import net.sf.ehcache.Element;\n+import org.apache.openjpa.datacache.AbstractQueryCache;\n+import org.apache.openjpa.datacache.QueryCache;\n+import org.apache.openjpa.datacache.QueryKey;\n+import org.apache.openjpa.datacache.QueryResult;\n+\n+/**\n+ * @author Craig Andrews\n+ * @author Greg Luck\n+ */\n+public class EhCacheQueryCache\n+        extends AbstractQueryCache implements QueryCache {\n+\n+    private static final long serialVersionUID = -8952383938053159033L;\n+\n+    protected boolean useDefaultForUnnamedCaches = true;\n+\n+    protected String cacheName = \"openjpa-querycache\";\n+\n+    protected ReentrantLock writeLock = new ReentrantLock();\n+\n+    @Override\n+    protected void clearInternal() {\n+        getOrCreateCache(cacheName).removeAll();\n+    }\n+\n+    @Override\n+    protected QueryResult getInternal(QueryKey qk) {\n+        Ehcache cache = getOrCreateCache(cacheName);\n+        Element result = cache.get(qk);\n+        if (result == null) {\n+            return null;\n+        } else {\n+            return (QueryResult) result.getValue();\n+        }\n+    }\n+\n+    @Override\n+    protected Collection keySet() {\n+        Ehcache cache = getOrCreateCache(cacheName);\n+        return cache.getKeys();\n+    }\n+\n+    @Override\n+    protected boolean pinInternal(QueryKey qk) {\n+        return false;\n+    }\n+\n+    @Override\n+    protected QueryResult putInternal(QueryKey qk, QueryResult oids) {\n+        Ehcache cache = getOrCreateCache(cacheName);\n+        Element element = new Element(qk, oids);\n+        cache.put(element);\n+        return oids;\n+    }\n+\n+    @Override\n+    protected QueryResult removeInternal(QueryKey qk) {\n+        Ehcache cache = getOrCreateCache(cacheName);\n+        QueryResult queryResult = getInternal(qk);\n+        cache.remove(qk);\n+        return queryResult;\n+    }\n+\n+    @Override\n+    protected boolean unpinInternal(QueryKey qk) {\n+        return false;\n+    }\n+\n+    @Override\n+    public void writeLock() {\n+        writeLock.lock();\n+    }\n+\n+    @Override\n+    public void writeUnlock() {\n+        writeLock.unlock();\n+    }\n+\n+    protected synchronized Ehcache getOrCreateCache(String name) {\n+        CacheManager cacheManager = CacheManager.getInstance();\n+        Ehcache ehCache = cacheManager.getEhcache(name);\n+        if (ehCache == null) {\n+            cacheManager.addCache(name);\n+            ehCache = cacheManager.getEhcache(name);\n+        }\n+        return ehCache;\n+    }\n+}"},{"sha":"ebf48e27c32d7228748c14de3c8af2c6a271f7ad","filename":"core/src/main/java/org/syncope/core/persistence/openjpa/NoOpRemoteCommitProvider.java","status":"added","additions":37,"deletions":0,"changes":37,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FNoOpRemoteCommitProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FNoOpRemoteCommitProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2FNoOpRemoteCommitProvider.java?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -0,0 +1,37 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.persistence.openjpa;\n+\n+import org.apache.openjpa.event.AbstractRemoteCommitProvider;\n+import org.apache.openjpa.event.RemoteCommitEvent;\n+import org.apache.openjpa.event.RemoteCommitProvider;\n+\n+/**\n+ * @author Craig Andrews\n+ * @author Greg Luck\n+ */\n+public class NoOpRemoteCommitProvider\n+        extends AbstractRemoteCommitProvider implements RemoteCommitProvider {\n+\n+    @Override\n+    public void broadcast(RemoteCommitEvent event) {\n+        //noop\n+    }\n+\n+    @Override\n+    public void close() {\n+        //noop\n+    }\n+}"},{"sha":"5ba6984891da95514b5278d63c77ecd8b8281983","filename":"core/src/main/java/org/syncope/core/persistence/openjpa/localizer.properties","status":"added","additions":7,"deletions":0,"changes":7,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2Flocalizer.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2Flocalizer.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fopenjpa%2Flocalizer.properties?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -0,0 +1,7 @@\n+incompatible-configuration: \"{0}\" property has been configured to incompatible \\\n+\tvalue \"{1}\". Forcing this value to \"{2}\".\n+no-cache: Can not find EhCache \"{1}\" to cache instance of class \\\n+\t\"{0}\". Make sure EhCache is configured for a cache named \"{1}\". \n+no-cache-name: No named cache is specified to cache  instance of class \"{0}\". \\\n+\tEither specify a name for @DataCache annotation in class \"{0}\" or \\\n+\tset \"UseDefaultForUnnamedCaches\" attribute of \"openjpa.DataCache\" to \"true\". \n\\ No newline at end of file"},{"sha":"095c0ddc66670e39023434428f1d3f3e620ad460","filename":"core/src/main/resources/persistenceContextEMFactory.xml","status":"modified","additions":6,"deletions":2,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2FpersistenceContextEMFactory.xml?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -33,8 +33,12 @@\n                 <entry key=\"openjpa.NontransactionalWrite\" value=\"false\"/>\n                 <entry key=\"openjpa.AutoDetach\" value=\"close, commit, nontx-read, rollback\"/>\n                 \n-                <entry key=\"openjpa.DataCache\" value=\"true(Lru=true)\"/>\n-                <entry key=\"openjpa.QueryCache\" value=\"true(Lru=true)\"/>\n+                <entry key=\"openjpa.DataCacheManager\"\n+                       value=\"org.syncope.core.persistence.openjpa.EhCacheDataCacheManager\"/>\n+                <entry key=\"openjpa.DataCache\"\n+                       value=\"org.syncope.core.persistence.openjpa.EhCacheDataCache\"/>\n+                <entry key=\"openjpa.QueryCache\"\n+                       value=\"org.syncope.core.persistence.openjpa.EhCacheQueryCache\"/>\n             </map>\n         </property>\n     </bean>"},{"sha":"4f0b77cd6b9b51307765b2798f5d9d8ec905521a","filename":"pom.xml","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/9a4f44682b19f170b94cc6139f750ca0032a14d2/pom.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/9a4f44682b19f170b94cc6139f750ca0032a14d2/pom.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/pom.xml?ref=9a4f44682b19f170b94cc6139f750ca0032a14d2","patch":"@@ -99,7 +99,7 @@\n         <quartz.version>1.8.5</quartz.version>\n \n         <openjpa.version>2.2.0-SNAPSHOT</openjpa.version>\n-        <ehcache.version>2.4.6</ehcache.version>\n+        <ehcache.version>2.4.7</ehcache.version>\n \n         <wicket.version>1.5.3</wicket.version>\n "}]}