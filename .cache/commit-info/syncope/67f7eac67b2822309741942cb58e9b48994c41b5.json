{"sha":"67f7eac67b2822309741942cb58e9b48994c41b5","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOjY3ZjdlYWM2N2IyODIyMzA5NzQxOTQyY2I1OGU5YjQ4OTk0YzQxYjU=","commit":{"author":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-16T14:52:20Z"},"committer":{"name":"Unknown","email":"unknown@apache.org","date":"2010-07-16T14:52:20Z"},"message":"Role REST controller\n\ngit-svn-id: https://svn.apache.org/repos/asf/incubator/syncope/trunk@1246394 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"828bb5296e97b83083c529b23532f411db4d24ee","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/828bb5296e97b83083c529b23532f411db4d24ee"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/67f7eac67b2822309741942cb58e9b48994c41b5","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/67f7eac67b2822309741942cb58e9b48994c41b5","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/67f7eac67b2822309741942cb58e9b48994c41b5","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/67f7eac67b2822309741942cb58e9b48994c41b5/comments","author":null,"committer":null,"parents":[{"sha":"7efed68ec2ff4bc9eb1fa4f37a4e214d971d83f3","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/7efed68ec2ff4bc9eb1fa4f37a4e214d971d83f3","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/7efed68ec2ff4bc9eb1fa4f37a4e214d971d83f3"}],"stats":{"total":894,"additions":829,"deletions":65},"files":[{"sha":"84c09c6309326d62adf2a8fa5a1b0a0a50d96dc8","filename":"client/src/main/java/org/syncope/client/to/AttributableTO.java","status":"added","additions":70,"deletions":0,"changes":70,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributableTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributableTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FAttributableTO.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -0,0 +1,70 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public abstract class AttributableTO extends AbstractBaseTO {\n+\n+    protected long id;\n+    protected Set<AttributeTO> attributes;\n+    protected Set<AttributeTO> derivedAttributes;\n+\n+    protected AttributableTO() {\n+        attributes = new HashSet<AttributeTO>();\n+        derivedAttributes = new HashSet<AttributeTO>();\n+    }\n+\n+    public long getId() {\n+        return id;\n+    }\n+\n+    public void setId(long id) {\n+        this.id = id;\n+    }\n+\n+    public boolean addAttribute(AttributeTO attribute) {\n+        return attributes.add(attribute);\n+    }\n+\n+    public boolean removeAttribute(AttributeTO attribute) {\n+        return attributes.remove(attribute);\n+    }\n+\n+    public Set<AttributeTO> getAttributes() {\n+        return attributes;\n+    }\n+\n+    public void setAttributes(Set<AttributeTO> attributes) {\n+        this.attributes = attributes;\n+    }\n+\n+    public boolean addDerivedAttribute(AttributeTO derivedAttribute) {\n+        return derivedAttributes.add(derivedAttribute);\n+    }\n+\n+    public boolean removeDerivedAttribute(AttributeTO derivedAttribute) {\n+        return derivedAttributes.remove(derivedAttribute);\n+    }\n+\n+    public Set<AttributeTO> getDerivedAttributes() {\n+        return derivedAttributes;\n+    }\n+\n+    public void setDerivedAttributes(Set<AttributeTO> derivedAttributes) {\n+        this.derivedAttributes = derivedAttributes;\n+    }\n+}"},{"sha":"8bfafb57748ce7f817a8e752d6b58895dd09e494","filename":"client/src/main/java/org/syncope/client/to/RoleTO.java","status":"added","additions":81,"deletions":0,"changes":81,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTO.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -0,0 +1,81 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.HashSet;\n+import java.util.Set;\n+\n+public class RoleTO extends AttributableTO {\n+\n+    private String name;\n+    private Long parent;\n+    private Set<Long> users;\n+    private Set<String> resources;\n+\n+    public RoleTO() {\n+        super();\n+\n+        users = new HashSet<Long>();\n+        resources = new HashSet<String>();\n+    }\n+\n+    public String getName() {\n+        return name;\n+    }\n+\n+    public void setName(String name) {\n+        this.name = name;\n+    }\n+\n+    public Long getParent() {\n+        return parent;\n+    }\n+\n+    public void setParent(Long parent) {\n+        this.parent = parent;\n+    }\n+\n+    public boolean addResource(String resource) {\n+        return resources.add(resource);\n+    }\n+\n+    public boolean removeResource(String resource) {\n+        return resources.remove(resource);\n+    }\n+\n+    public Set<String> getResources() {\n+        return resources;\n+    }\n+\n+    public void setResources(Set<String> resources) {\n+        this.resources = resources;\n+    }\n+\n+    public boolean addUser(Long user) {\n+        return users.add(user);\n+    }\n+\n+    public boolean removeUser(Long user) {\n+        return users.remove(user);\n+    }\n+\n+    public Set<Long> getUsers() {\n+        return users;\n+    }\n+\n+    public void setUsers(Set<Long> users) {\n+        this.users = users;\n+    }\n+}"},{"sha":"cbc52198a87034de0859978a2fe371504c138197","filename":"client/src/main/java/org/syncope/client/to/RoleTOs.java","status":"added","additions":41,"deletions":0,"changes":41,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTOs.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTOs.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FRoleTOs.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -0,0 +1,41 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.client.to;\n+\n+import java.util.ArrayList;\n+import java.util.Iterator;\n+import java.util.List;\n+\n+public class RoleTOs extends AbstractBaseTO implements Iterable<RoleTO> {\n+\n+    private List<RoleTO> roles;\n+\n+    public RoleTOs() {\n+        roles = new ArrayList<RoleTO>();\n+    }\n+\n+    public List<RoleTO> getRoles() {\n+        return roles;\n+    }\n+\n+    public void setRoles(List<RoleTO> roles) {\n+        this.roles = roles;\n+    }\n+\n+    @Override\n+    public Iterator<RoleTO> iterator() {\n+        return roles.iterator();\n+    }\n+}"},{"sha":"13092b389dab6602003242511c41c4c8cf173dd7","filename":"client/src/main/java/org/syncope/client/to/UserTO.java","status":"modified","additions":3,"deletions":46,"changes":49,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fclient%2Fto%2FUserTO.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -18,33 +18,22 @@\n import java.util.HashSet;\n import java.util.Set;\n \n-public class UserTO extends AbstractBaseTO {\n+public class UserTO extends AttributableTO {\n \n-    private long id;\n     private String password;\n     private Set<Long> roles;\n-    private Set<AttributeTO> attributes;\n-    private Set<AttributeTO> derivedAttributes;\n     private Set<String> resources;\n     private Date creationTime;\n     private String token;\n     private Date tokenExpireTime;\n \n     public UserTO() {\n+        super();\n+        \n         roles = new HashSet<Long>();\n-        attributes = new HashSet<AttributeTO>();\n-        derivedAttributes = new HashSet<AttributeTO>();\n         resources = new HashSet<String>();\n     }\n \n-    public long getId() {\n-        return id;\n-    }\n-\n-    public void setId(long id) {\n-        this.id = id;\n-    }\n-\n     public String getPassword() {\n         return password;\n     }\n@@ -69,38 +58,6 @@ public void setRoles(Set<Long> roles) {\n         this.roles = roles;\n     }\n \n-    public boolean addAttribute(AttributeTO attribute) {\n-        return attributes.add(attribute);\n-    }\n-\n-    public boolean removeAttribute(AttributeTO attribute) {\n-        return attributes.remove(attribute);\n-    }\n-\n-    public Set<AttributeTO> getAttributes() {\n-        return attributes;\n-    }\n-\n-    public void setAttributes(Set<AttributeTO> attributes) {\n-        this.attributes = attributes;\n-    }\n-\n-    public boolean addDerivedAttribute(AttributeTO derivedAttribute) {\n-        return derivedAttributes.add(derivedAttribute);\n-    }\n-\n-    public boolean removeDerivedAttribute(AttributeTO derivedAttribute) {\n-        return derivedAttributes.remove(derivedAttribute);\n-    }\n-\n-    public Set<AttributeTO> getDerivedAttributes() {\n-        return derivedAttributes;\n-    }\n-\n-    public void setDerivedAttributes(Set<AttributeTO> derivedAttributes) {\n-        this.derivedAttributes = derivedAttributes;\n-    }\n-\n     public boolean addResource(String resource) {\n         return resources.add(resource);\n     }"},{"sha":"628be34639eb0a8ee36247da1303e69acbd54616","filename":"client/src/main/java/org/syncope/types/SyncopeClientExceptionType.java","status":"modified","additions":6,"deletions":6,"changes":12,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/client%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Ftypes%2FSyncopeClientExceptionType.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -16,12 +16,15 @@\n \n public enum SyncopeClientExceptionType {\n \n-    InvalidDerivedSchemas(\n-    \"Syncope.InvalidDerivedSchemas\",\n-    \"Syncope.InvalidDerivedSchemas.derivedSchemaName\"),\n+    AlreadyExists(\n+    \"Syncope.AlreadyExists\",\n+    \"Syncope.AlreadyExists.name\"),\n     InvalidPassword(\n     \"Syncope.InvalidPassword\",\n     \"Syncope.InvalidPassword.reason\"),\n+    InvalidRoles(\n+    \"Syncope.InvalidRoles\",\n+    \"Syncope.InvalidRoles.name\"),\n     InvalidUpdate(\n     \"Syncope.InvalidUpdate\",\n     \"Syncope.InvalidUpdate.name\"),\n@@ -46,9 +49,6 @@ public enum SyncopeClientExceptionType {\n     RequiredValueMissing(\n     \"Syncope.RequiredValuesMissing\",\n     \"Syncope.RequiredValuesMissing.attributeName\"),\n-    AlreadyExists(\n-    \"Syncope.AlreadyExists\",\n-    \"Syncope.AlreadyExists.name\"),\n     Unknown(\n     \"Syncope.Unknown\",\n     \"\"),"},{"sha":"bf4ffdfaecbe0b08abf06bf6269ef8a0b6aba334","filename":"core/src/main/java/org/syncope/core/persistence/beans/AbstractDerivedAttribute.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FAbstractDerivedAttribute.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -71,7 +71,7 @@ public String getValue(Set<? extends AbstractAttribute> attributes) {\n                 expressionValue = \"\";\n             } else {\n                 attributeValue = attributeValues.iterator().next();\n-                expressionValue = attributeValue.getValue();\n+                expressionValue = attributeValue.getValueAsString();\n             }\n \n             jexlContext.set(attribute.getSchema().getName(), expressionValue);"},{"sha":"da189f314a2a8e7bd1da6f30cb2735e4d67635e3","filename":"core/src/main/java/org/syncope/core/rest/controller/RoleController.java","status":"added","additions":164,"deletions":0,"changes":164,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fcontroller%2FRoleController.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -0,0 +1,164 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.controller;\n+\n+import java.io.IOException;\n+import java.util.ArrayList;\n+import java.util.List;\n+import javax.servlet.http.HttpServletRequest;\n+import javax.servlet.http.HttpServletResponse;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.stereotype.Controller;\n+import org.springframework.transaction.annotation.Transactional;\n+import org.springframework.web.bind.annotation.PathVariable;\n+import org.springframework.web.bind.annotation.RequestBody;\n+import org.springframework.web.bind.annotation.RequestMapping;\n+import org.springframework.web.bind.annotation.RequestMethod;\n+import org.syncope.client.to.RoleTO;\n+import org.syncope.client.to.RoleTOs;\n+import org.syncope.client.to.SearchParameters;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.rest.data.RoleDataBinder;\n+\n+@Controller\n+@RequestMapping(\"/role\")\n+public class RoleController extends AbstractController {\n+\n+    @Autowired\n+    private SyncopeRoleDAO syncopeRoleDAO;\n+    @Autowired\n+    private RoleDataBinder roleDataBinder;\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/create\")\n+    public RoleTO create(HttpServletRequest request,\n+            HttpServletResponse response,\n+            @RequestBody RoleTO roleTO)\n+            throws IOException {\n+\n+        if (log.isDebugEnabled()) {\n+            log.debug(\"create called with parameters \" + roleTO);\n+        }\n+\n+        SyncopeRole syncopeRole = null;\n+        try {\n+            syncopeRole = roleDataBinder.createSyncopeRole(roleTO);\n+        } catch (SyncopeClientCompositeErrorException e) {\n+            log.error(\"Could not create for \" + roleTO, e);\n+\n+            return throwCompositeException(e, response);\n+        }\n+        syncopeRole = syncopeRoleDAO.save(syncopeRole);\n+\n+        response.setStatus(HttpServletResponse.SC_CREATED);\n+        return roleDataBinder.getRoleTO(syncopeRole);\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.DELETE,\n+    value = \"/delete/{roleId}\")\n+    public void delete(HttpServletResponse response,\n+            @PathVariable(\"roleId\") Long roleId)\n+            throws IOException {\n+\n+        SyncopeRole role = syncopeRoleDAO.find(roleId);\n+\n+        if (role == null) {\n+            log.error(\"Could not find role '\" + roleId + \"'\");\n+            throwNotFoundException(String.valueOf(roleId), response);\n+        } else {\n+            syncopeRoleDAO.delete(roleId);\n+        }\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/list\")\n+    public RoleTOs list(HttpServletRequest request) throws IOException {\n+        List<SyncopeRole> roles = syncopeRoleDAO.findAll();\n+        List<RoleTO> roleTOs = new ArrayList<RoleTO>(roles.size());\n+\n+        for (SyncopeRole role : roles) {\n+            roleTOs.add(roleDataBinder.getRoleTO(role));\n+        }\n+\n+        RoleTOs result = new RoleTOs();\n+        result.setRoles(roleTOs);\n+        return result;\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/parent/{roleId}\")\n+    public RoleTO parent(HttpServletResponse response,\n+            @PathVariable(\"roleId\") Long roleId)\n+            throws IOException {\n+\n+        SyncopeRole role = syncopeRoleDAO.find(roleId);\n+\n+        if (role == null) {\n+            log.error(\"Could not find role '\" + roleId + \"'\");\n+            return throwNotFoundException(String.valueOf(roleId), response);\n+        }\n+\n+        return role.getParent() == null ? null\n+                : roleDataBinder.getRoleTO(role.getParent());\n+    }\n+\n+    @RequestMapping(method = RequestMethod.GET,\n+    value = \"/read/{roleId}\")\n+    public RoleTO read(HttpServletResponse response,\n+            @PathVariable(\"roleId\") Long roleId)\n+            throws IOException {\n+\n+        SyncopeRole role = syncopeRoleDAO.find(roleId);\n+\n+        if (role == null) {\n+            log.error(\"Could not find role '\" + roleId + \"'\");\n+            return throwNotFoundException(String.valueOf(roleId), response);\n+        }\n+\n+        return roleDataBinder.getRoleTO(role);\n+    }\n+\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/search\")\n+    public RoleTOs search(HttpServletResponse response,\n+            @RequestBody SearchParameters searchParameters)\n+            throws IOException {\n+\n+        log.info(\"search called with parameter \" + searchParameters);\n+\n+        List<RoleTO> roleTOs = new ArrayList<RoleTO>();\n+        RoleTOs result = new RoleTOs();\n+\n+        result.setRoles(roleTOs);\n+\n+        return result;\n+    }\n+\n+    @Transactional\n+    @RequestMapping(method = RequestMethod.POST,\n+    value = \"/update\")\n+    public RoleTO update(HttpServletResponse response,\n+            @RequestBody RoleTO roleTO)\n+            throws IOException {\n+\n+        log.info(\"update called with parameter \" + roleTO);\n+\n+        return roleTO;\n+    }\n+}"},{"sha":"ee5462bd3bd3571d662c1919a19580ed77db25aa","filename":"core/src/main/java/org/syncope/core/rest/data/RoleDataBinder.java","status":"added","additions":317,"deletions":0,"changes":317,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fsyncope%2Fcore%2Frest%2Fdata%2FRoleDataBinder.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -0,0 +1,317 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ * \n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ * \n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.rest.data;\n+\n+import java.util.Collections;\n+import java.util.List;\n+import java.util.Set;\n+import org.slf4j.Logger;\n+import org.slf4j.LoggerFactory;\n+import org.springframework.beans.factory.annotation.Autowired;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.stereotype.Component;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.RoleTO;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+import org.syncope.client.validation.SyncopeClientException;\n+import org.syncope.core.persistence.beans.AbstractAttribute;\n+import org.syncope.core.persistence.beans.AbstractDerivedAttribute;\n+import org.syncope.core.persistence.beans.Resource;\n+import org.syncope.core.persistence.beans.role.RoleAttribute;\n+import org.syncope.core.persistence.beans.role.RoleAttributeValue;\n+import org.syncope.core.persistence.beans.role.RoleDerivedAttribute;\n+import org.syncope.core.persistence.beans.role.RoleDerivedSchema;\n+import org.syncope.core.persistence.beans.role.RoleSchema;\n+import org.syncope.core.persistence.beans.role.SyncopeRole;\n+import org.syncope.core.persistence.beans.user.SyncopeUser;\n+import org.syncope.core.persistence.dao.AttributeValueDAO;\n+import org.syncope.core.persistence.dao.DerivedSchemaDAO;\n+import org.syncope.core.persistence.dao.ResourceDAO;\n+import org.syncope.core.persistence.dao.SchemaDAO;\n+import org.syncope.core.persistence.dao.SyncopeRoleDAO;\n+import org.syncope.core.persistence.dao.SyncopeUserDAO;\n+import org.syncope.core.persistence.validation.ValidationException;\n+import org.syncope.types.SyncopeClientExceptionType;\n+\n+@Component\n+public class RoleDataBinder {\n+\n+    private static final Logger log = LoggerFactory.getLogger(\n+            RoleDataBinder.class);\n+    private SyncopeRoleDAO syncopeRoleDAO;\n+    private SchemaDAO schemaDAO;\n+    private DerivedSchemaDAO derivedSchemaDAO;\n+    private AttributeValueDAO attributeValueDAO;\n+    private SyncopeUserDAO syncopeUserDAO;\n+    private ResourceDAO resourceDAO;\n+\n+    @Autowired\n+    public RoleDataBinder(SyncopeRoleDAO syncopeRoleDAO,\n+            SchemaDAO schemaDAO,\n+            DerivedSchemaDAO derivedSchemaDAO,\n+            AttributeValueDAO attributeValueDAO,\n+            SyncopeUserDAO syncopeUserDAO,\n+            ResourceDAO resourceDAO) {\n+\n+        this.syncopeRoleDAO = syncopeRoleDAO;\n+        this.schemaDAO = schemaDAO;\n+        this.derivedSchemaDAO = derivedSchemaDAO;\n+        this.attributeValueDAO = attributeValueDAO;\n+        this.syncopeUserDAO = syncopeUserDAO;\n+        this.resourceDAO = resourceDAO;\n+    }\n+\n+    public SyncopeRole createSyncopeRole(RoleTO roleTO)\n+            throws SyncopeClientCompositeErrorException {\n+\n+        SyncopeClientCompositeErrorException compositeErrorException =\n+                new SyncopeClientCompositeErrorException(\n+                HttpStatus.BAD_REQUEST);\n+        SyncopeClientException invalidRoles =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidRoles);\n+        SyncopeClientException requiredValuesMissing =\n+                new SyncopeClientException(\n+                SyncopeClientExceptionType.RequiredValuesMissing);\n+        SyncopeClientException invalidValues = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidValues);\n+        SyncopeClientException invalidUniques = new SyncopeClientException(\n+                SyncopeClientExceptionType.InvalidUniques);\n+\n+        SyncopeRole syncopeRole = new SyncopeRole();\n+\n+        // 0. name and parent\n+        if (roleTO.getName() == null) {\n+            log.error(\"No name specified for this role\");\n+\n+            invalidRoles.addElement(null);\n+        } else {\n+            syncopeRole.setName(roleTO.getName());\n+        }\n+        Long parentRoleId = null;\n+        if (roleTO.getParent() != null) {\n+            SyncopeRole parentRole = syncopeRoleDAO.find(roleTO.getParent());\n+            if (parentRole == null) {\n+                log.error(\"Could not find role with id \" + roleTO.getParent());\n+\n+                invalidRoles.addElement(String.valueOf(roleTO.getParent()));\n+            } else {\n+                syncopeRole.setParent(parentRole);\n+                parentRoleId = syncopeRole.getParent().getId();\n+            }\n+        }\n+\n+        SyncopeRole otherRole = syncopeRoleDAO.find(\n+                roleTO.getName(), parentRoleId);\n+        if (otherRole != null) {\n+            log.error(\"Another role exists with the same name \"\n+                    + \"and the same parent role: \" + otherRole);\n+\n+            invalidRoles.addElement(roleTO.getName());\n+        }\n+\n+        // 1. attributes\n+        RoleSchema schema = null;\n+        RoleAttribute attribute = null;\n+        Set<String> valuesProvided = null;\n+        RoleAttributeValue attributeValue = null;\n+        for (AttributeTO attributeTO : roleTO.getAttributes()) {\n+            schema = schemaDAO.find(attributeTO.getSchema(), RoleSchema.class);\n+\n+            // safely ignore invalid schemas from AttributeTO\n+            // see http://code.google.com/p/syncope/issues/detail?id=17\n+            if (schema == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ignoring invalid schema \"\n+                            + attributeTO.getSchema());\n+                }\n+            } else {\n+                if (schema.isVirtual()) {\n+                    if (log.isDebugEnabled()) {\n+                        log.debug(\"Ignoring virtual schema\" + schema.getName());\n+                    }\n+                } else {\n+                    attribute = new RoleAttribute();\n+                    attribute.setSchema(schema);\n+                    attribute.setOwner(syncopeRole);\n+\n+                    // if the schema is multivale, all values are considered for\n+                    // addition, otherwise only the fist one - if provided - is\n+                    // considered\n+                    valuesProvided = schema.isMultivalue()\n+                            ? attributeTO.getValues()\n+                            : (attributeTO.getValues().isEmpty()\n+                            ? Collections.EMPTY_SET\n+                            : Collections.singleton(\n+                            attributeTO.getValues().iterator().next()));\n+                    for (String value : valuesProvided) {\n+                        attributeValue = new RoleAttributeValue();\n+\n+                        try {\n+                            attributeValue = attribute.addValue(value,\n+                                    attributeValue);\n+                        } catch (ValidationException e) {\n+                            log.error(\"Invalid value for attribute \"\n+                                    + schema.getName() + \": \" + value, e);\n+\n+                            invalidValues.addElement(schema.getName());\n+                        }\n+\n+                        // if the schema is uniquevalue, check the uniqueness\n+                        if (schema.isUniquevalue()\n+                                && attributeValueDAO.existingAttributeValue(\n+                                attributeValue)) {\n+\n+                            log.error(\"Unique value schema \" + schema.getName()\n+                                    + \" with no unique value: \"\n+                                    + attributeValue.getValueAsString());\n+\n+                            invalidUniques.addElement(schema.getName());\n+                            attribute.setAttributeValues(Collections.EMPTY_SET);\n+                        }\n+                    }\n+\n+                    if (!attribute.getAttributeValues().isEmpty()) {\n+                        syncopeRole.addAttribute(attribute);\n+                    }\n+                }\n+            }\n+        }\n+\n+        // 2. derived attributes\n+        RoleDerivedSchema derivedSchema = null;\n+        RoleDerivedAttribute derivedAttribute = null;\n+        for (AttributeTO attributeTO : roleTO.getDerivedAttributes()) {\n+            derivedSchema = derivedSchemaDAO.find(attributeTO.getSchema(),\n+                    RoleDerivedSchema.class);\n+\n+            if (derivedSchema == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ignoring invalid derivedschema \"\n+                            + attributeTO.getSchema());\n+                }\n+            } else {\n+                derivedAttribute = new RoleDerivedAttribute();\n+                derivedAttribute.setDerivedSchema(derivedSchema);\n+                derivedAttribute.setOwner(syncopeRole);\n+                syncopeRole.addDerivedAttribute(derivedAttribute);\n+            }\n+        }\n+\n+        // Check if there is some mandatory schema defined for which no value\n+        // has been provided\n+        List<RoleSchema> allRoleSchemas = schemaDAO.findAll(RoleSchema.class);\n+        for (RoleSchema roleSchema : allRoleSchemas) {\n+            if (syncopeRole.getAttribute(roleSchema.getName()) == null\n+                    && roleSchema.isMandatory()) {\n+\n+                log.error(\"Mandatory schema \" + roleSchema.getName()\n+                        + \" not provided with values\");\n+\n+                requiredValuesMissing.addElement(roleSchema.getName());\n+            }\n+        }\n+\n+        // 3. users\n+        SyncopeUser user = null;\n+        for (Long userId : roleTO.getUsers()) {\n+            user = syncopeUserDAO.find(userId);\n+\n+            if (user == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ignoring invalid user \" + userId);\n+                }\n+            } else {\n+                syncopeRole.addUser(user);\n+                user.addRole(syncopeRole);\n+            }\n+        }\n+\n+        // 4. resources\n+        Resource resource = null;\n+        for (String resourceName : roleTO.getResources()) {\n+            resource = resourceDAO.find(resourceName);\n+\n+            if (resource == null) {\n+                if (log.isDebugEnabled()) {\n+                    log.debug(\"Ignoring invalid resource \" + resourceName);\n+                }\n+            } else {\n+                syncopeRole.addResource(resource);\n+                resource.addRole(syncopeRole);\n+            }\n+        }\n+\n+        // Throw composite exception if there is at least one element set\n+        // in the composing exceptions\n+        if (!invalidRoles.getElements().isEmpty()) {\n+            compositeErrorException.addException(invalidRoles);\n+        }\n+        if (!requiredValuesMissing.getElements().isEmpty()) {\n+            compositeErrorException.addException(requiredValuesMissing);\n+        }\n+        if (!invalidValues.getElements().isEmpty()) {\n+            compositeErrorException.addException(invalidValues);\n+        }\n+        if (!invalidUniques.getElements().isEmpty()) {\n+            compositeErrorException.addException(invalidUniques);\n+        }\n+        if (compositeErrorException.hasExceptions()) {\n+            throw compositeErrorException;\n+        }\n+\n+        return syncopeRole;\n+    }\n+\n+    public RoleTO getRoleTO(SyncopeRole role) {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setId(role.getId());\n+        roleTO.setName(role.getName());\n+        if (role.getParent() != null) {\n+            roleTO.setParent(role.getParent().getId());\n+        }\n+\n+        AttributeTO attributeTO = null;\n+        for (AbstractAttribute attribute : role.getAttributes()) {\n+            attributeTO = new AttributeTO();\n+            attributeTO.setSchema(attribute.getSchema().getName());\n+            attributeTO.setValues(attribute.getAttributeValuesAsStrings());\n+\n+            roleTO.addAttribute(attributeTO);\n+        }\n+\n+        for (AbstractDerivedAttribute derivedAttribute :\n+                role.getDerivedAttributes()) {\n+\n+            attributeTO = new AttributeTO();\n+            attributeTO.setSchema(\n+                    derivedAttribute.getDerivedSchema().getName());\n+            attributeTO.setValues(Collections.singleton(\n+                    derivedAttribute.getValue(role.getAttributes())));\n+\n+            roleTO.addDerivedAttribute(attributeTO);\n+        }\n+\n+        for (SyncopeUser user : role.getUsers()) {\n+            roleTO.addUser(user.getId());\n+        }\n+\n+        for (Resource resource : role.getResources()) {\n+            roleTO.addResource(resource.getName());\n+        }\n+\n+        return roleTO;\n+    }\n+}"},{"sha":"9066e2234d738bbae6286c2858af515754623cc1","filename":"core/src/main/resources/org/syncope/core/persistence/content.xml","status":"modified","additions":4,"deletions":4,"changes":8,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fresources%2Forg%2Fsyncope%2Fcore%2Fpersistence%2Fcontent.xml?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -67,10 +67,10 @@\n                 mandatory=\"true\" multivalue=\"false\" uniquevalue=\"false\"/>\n \n     <SyncopeRole id=\"0\" name=\"/\"/>\n-    <SyncopeRole id=\"1\" name=\"applicationCluster1\" parent=\"/\"/>\n-    <SyncopeRole id=\"2\" name=\"applicationCluster2\" parent=\"/\"/>\n-    <SyncopeRole id=\"3\" name=\"application1\" parent=\"applicationCluster1\"/>\n-    <SyncopeRole id=\"4\" name=\"application2\" parent=\"applicationCluster1\"/>\n+    <SyncopeRole id=\"1\" name=\"applicationCluster1\" parent_id=\"0\"/>\n+    <SyncopeRole id=\"2\" name=\"applicationCluster2\" parent_id=\"0\"/>\n+    <SyncopeRole id=\"3\" name=\"application1\" parent_id=\"1\"/>\n+    <SyncopeRole id=\"4\" name=\"application2\" parent_id=\"1\"/>\n \n     <RoleAttribute id=\"10\" owner_id=\"4\" schema_name=\"applicationType\"/>\n     <RoleAttribute id=\"11\" owner_id=\"3\" schema_name=\"applicationType\"/>"},{"sha":"3081bfb9dfddfd07e8d1391648bc7b779568ff04","filename":"core/src/test/java/org/syncope/core/test/rest/RoleTestITCase.java","status":"added","additions":134,"deletions":0,"changes":134,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FRoleTestITCase.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -0,0 +1,134 @@\n+/*\n+ *  Licensed under the Apache License, Version 2.0 (the \"License\");\n+ *  you may not use this file except in compliance with the License.\n+ *  You may obtain a copy of the License at\n+ *\n+ *       http://www.apache.org/licenses/LICENSE-2.0\n+ *\n+ *  Unless required by applicable law or agreed to in writing, software\n+ *  distributed under the License is distributed on an \"AS IS\" BASIS,\n+ *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n+ *  See the License for the specific language governing permissions and\n+ *  limitations under the License.\n+ *  under the License.\n+ */\n+package org.syncope.core.test.rest;\n+\n+import static org.junit.Assert.*;\n+\n+import java.util.Collections;\n+import org.junit.Test;\n+import org.springframework.http.HttpStatus;\n+import org.springframework.test.annotation.ExpectedException;\n+import org.springframework.web.client.HttpStatusCodeException;\n+import org.syncope.client.to.AttributeTO;\n+import org.syncope.client.to.RoleTO;\n+import org.syncope.client.to.RoleTOs;\n+import org.syncope.client.to.SearchParameters;\n+import org.syncope.client.validation.SyncopeClientCompositeErrorException;\n+\n+public class RoleTestITCase extends AbstractTestITCase {\n+\n+    @Test\n+    @ExpectedException(value = SyncopeClientCompositeErrorException.class)\n+    public void createWithException() {\n+        AttributeTO attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"attr1\");\n+        attributeTO.addValue(\"value1\");\n+\n+        RoleTO newRoleTO = new RoleTO();\n+        newRoleTO.addAttribute(attributeTO);\n+\n+        restTemplate.postForObject(BASE_URL + \"role/create\",\n+                newRoleTO, RoleTO.class);\n+    }\n+\n+    @Test\n+    public void create() {\n+        RoleTO roleTO = new RoleTO();\n+        roleTO.setName(\"lastRole\");\n+        roleTO.setParent(8L);\n+\n+        AttributeTO icon = new AttributeTO();\n+        icon.setSchema(\"icon\");\n+        icon.addValue(\"anIcon\");\n+\n+        RoleTO newRoleTO = restTemplate.postForObject(BASE_URL + \"role/create\",\n+                roleTO, RoleTO.class);\n+\n+        roleTO.setId(newRoleTO.getId());\n+        assertEquals(roleTO, newRoleTO);\n+    }\n+\n+    @Test\n+    public void delete() {\n+        try {\n+            restTemplate.delete(BASE_URL + \"role/delete/{roleId}\", 0);\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+\n+        restTemplate.delete(BASE_URL + \"role/delete/{roleId}\", 7);\n+        try {\n+            restTemplate.getForObject(BASE_URL + \"role/read/{roleId}.json\",\n+                    RoleTO.class, 2);\n+        } catch (HttpStatusCodeException e) {\n+            assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n+        }\n+    }\n+\n+    @Test\n+    public void list() {\n+        RoleTOs roleTOs = restTemplate.getForObject(BASE_URL\n+                + \"role/list.json\", RoleTOs.class);\n+\n+        assertNotNull(roleTOs);\n+        assertEquals(8, roleTOs.getRoles().size());\n+    }\n+\n+    @Test\n+    public void parent() {\n+        RoleTO roleTO = restTemplate.getForObject(BASE_URL\n+                + \"role/parent/{roleId}.json\", RoleTO.class, 7);\n+\n+        assertNotNull(roleTO);\n+        assertEquals(roleTO.getId(), 6L);\n+    }\n+\n+    @Test\n+    public void read() {\n+        RoleTO roleTO = restTemplate.getForObject(BASE_URL\n+                + \"role/read/{roleId}.json\", RoleTO.class, 1);\n+\n+        assertNotNull(roleTO);\n+        assertNotNull(roleTO.getAttributes());\n+        assertFalse(roleTO.getAttributes().isEmpty());\n+    }\n+\n+    @Test\n+    public void search() {\n+        SearchParameters searchParameters = new SearchParameters();\n+\n+        RoleTOs matchedRoles = restTemplate.postForObject(\n+                BASE_URL + \"role/search\",\n+                searchParameters, RoleTOs.class);\n+\n+        assertNotNull(matchedRoles);\n+        assertTrue(matchedRoles.getRoles().isEmpty());\n+    }\n+\n+    @Test\n+    public void update() {\n+        AttributeTO attributeTO = new AttributeTO();\n+        attributeTO.setSchema(\"attr1\");\n+        attributeTO.setValues(Collections.singleton(\"value1\"));\n+\n+        RoleTO newRoleTO = new RoleTO();\n+        newRoleTO.addAttribute(attributeTO);\n+\n+        RoleTO userTO = restTemplate.postForObject(BASE_URL + \"role/update\",\n+                newRoleTO, RoleTO.class);\n+\n+        assertEquals(newRoleTO, userTO);\n+    }\n+}"},{"sha":"820565631e1f6e8d3840650662b3eb49d86827f3","filename":"core/src/test/java/org/syncope/core/test/rest/UserTestITCase.java","status":"modified","additions":8,"deletions":8,"changes":16,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/67f7eac67b2822309741942cb58e9b48994c41b5/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fsyncope%2Fcore%2Ftest%2Frest%2FUserTestITCase.java?ref=67f7eac67b2822309741942cb58e9b48994c41b5","patch":"@@ -18,7 +18,6 @@\n import java.text.SimpleDateFormat;\n import static org.junit.Assert.*;\n \n-import java.util.Collections;\n import java.util.Date;\n import org.junit.Test;\n import org.springframework.http.HttpStatus;\n@@ -72,7 +71,7 @@ private UserTO getSampleTO(String email) {\n     public void createWithException() {\n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"userId\");\n-        attributeTO.setValues(Collections.singleton(\"userId@nowhere.org\"));\n+        attributeTO.addValue(\"userId@nowhere.org\");\n \n         UserTO newUserTO = new UserTO();\n         newUserTO.addAttribute(attributeTO);\n@@ -134,15 +133,15 @@ public void create() {\n     @Test\n     public void delete() {\n         try {\n-            restTemplate.delete(BASE_URL + \"user/delete/{userId}\", \"0\");\n+            restTemplate.delete(BASE_URL + \"user/delete/{userId}\", 0);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n \n-        restTemplate.delete(BASE_URL + \"user/delete/{userId}\", \"2\");\n+        restTemplate.delete(BASE_URL + \"user/delete/{userId}\", 2);\n         try {\n             restTemplate.getForObject(BASE_URL + \"user/read/{userId}.json\",\n-                    UserTO.class, \"2\");\n+                    UserTO.class, 2);\n         } catch (HttpStatusCodeException e) {\n             assertEquals(e.getStatusCode(), HttpStatus.NOT_FOUND);\n         }\n@@ -177,8 +176,9 @@ public void token() {\n                 userTO, UserTO.class);\n         assertNull(userTO.getToken());\n \n-        userTO = restTemplate.getForObject(BASE_URL + \"user/generateToken/\"\n-                + String.valueOf(userTO.getId()), UserTO.class);\n+        userTO = restTemplate.getForObject(\n+                BASE_URL + \"user/generateToken/{userId}\",\n+                UserTO.class, userTO.getId());\n         assertNotNull(userTO.getToken());\n \n         userTO = restTemplate.postForObject(BASE_URL + \"user/verifyToken\",\n@@ -202,7 +202,7 @@ public void search() {\n     public void update() {\n         AttributeTO attributeTO = new AttributeTO();\n         attributeTO.setSchema(\"attr1\");\n-        attributeTO.setValues(Collections.singleton(\"value1\"));\n+        attributeTO.addValue(\"value1\");\n \n         UserTO newUserTO = new UserTO();\n         newUserTO.addAttribute(attributeTO);"}]}