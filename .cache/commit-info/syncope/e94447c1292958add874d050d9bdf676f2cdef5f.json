{"sha":"e94447c1292958add874d050d9bdf676f2cdef5f","node_id":"MDY6Q29tbWl0NjM2ODc5MDYyOmU5NDQ0N2MxMjkyOTU4YWRkODc0ZDA1MGQ5YmRmNjc2ZjJjZGVmNWY=","commit":{"author":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-01T15:24:44Z"},"committer":{"name":"Francesco Chicchiriccò","email":"ilgrosso@apache.org","date":"2013-02-01T15:24:44Z"},"message":"[SYNCOPE-136] Feature implemented, test cases added\n\ngit-svn-id: https://svn.apache.org/repos/asf/syncope/trunk@1441482 13f79535-47bb-0310-9956-ffa450edef68","tree":{"sha":"be71050a2186a7ed00c42bf91e1f85c69ac2e92d","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/trees/be71050a2186a7ed00c42bf91e1f85c69ac2e92d"},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/git/commits/e94447c1292958add874d050d9bdf676f2cdef5f","comment_count":0,"verification":{"verified":false,"reason":"unsigned","signature":null,"payload":null}},"url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e94447c1292958add874d050d9bdf676f2cdef5f","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/e94447c1292958add874d050d9bdf676f2cdef5f","comments_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/e94447c1292958add874d050d9bdf676f2cdef5f/comments","author":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"committer":{"login":"ilgrosso","id":1064664,"node_id":"MDQ6VXNlcjEwNjQ2NjQ=","avatar_url":"https://avatars.githubusercontent.com/u/1064664?v=4","gravatar_id":"","url":"https://api.github.com/users/ilgrosso","html_url":"https://github.com/ilgrosso","followers_url":"https://api.github.com/users/ilgrosso/followers","following_url":"https://api.github.com/users/ilgrosso/following{/other_user}","gists_url":"https://api.github.com/users/ilgrosso/gists{/gist_id}","starred_url":"https://api.github.com/users/ilgrosso/starred{/owner}{/repo}","subscriptions_url":"https://api.github.com/users/ilgrosso/subscriptions","organizations_url":"https://api.github.com/users/ilgrosso/orgs","repos_url":"https://api.github.com/users/ilgrosso/repos","events_url":"https://api.github.com/users/ilgrosso/events{/privacy}","received_events_url":"https://api.github.com/users/ilgrosso/received_events","type":"User","site_admin":false},"parents":[{"sha":"04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/commits/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb","html_url":"https://github.com/EnricoDAlessandro97UNI/syncope/commit/04a87b68a1893fd53283dfffeb6d2747fd0bb0fb"}],"stats":{"total":364,"additions":248,"deletions":116},"files":[{"sha":"940e734901cbf1ece3b8a73973642eda7fbdf867","filename":"common/src/main/java/org/apache/syncope/common/to/ResourceTO.java","status":"modified","additions":10,"deletions":0,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Fto%2FResourceTO.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -56,6 +56,8 @@ public class ResourceTO extends AbstractBaseBean {\n \r\n     private int propagationPriority;\r\n \r\n+    private boolean randomPwdIfNotProvided;\r\n+\r\n     private PropagationMode propagationMode;\r\n \r\n     private boolean enforceMandatoryCondition;\r\n@@ -159,6 +161,14 @@ public void setPropagationPriority(int propagationPriority) {\n         this.propagationPriority = propagationPriority;\r\n     }\r\n \r\n+    public boolean isRandomPwdIfNotProvided() {\r\n+        return randomPwdIfNotProvided;\r\n+    }\r\n+\r\n+    public void setRandomPwdIfNotProvided(boolean randomPwdIfNotProvided) {\r\n+        this.randomPwdIfNotProvided = randomPwdIfNotProvided;\r\n+    }\r\n+\r\n     public PropagationMode getPropagationMode() {\r\n         return propagationMode;\r\n     }\r"},{"sha":"bf95c568ccea1758769a485aa0f52d571087685d","filename":"common/src/main/java/org/apache/syncope/common/types/CipherAlgorithm.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/common%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcommon%2Ftypes%2FCipherAlgorithm.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -33,15 +33,15 @@ public enum CipherAlgorithm {\n \r\n     final private String algorithm;\r\n \r\n-    CipherAlgorithm(String algorithm) {\r\n+    CipherAlgorithm(final String algorithm) {\r\n         this.algorithm = algorithm;\r\n     }\r\n \r\n     public final String getAlgorithm() {\r\n         return algorithm;\r\n     }\r\n \r\n-    public static CipherAlgorithm fromString(String value) {\r\n+    public static CipherAlgorithm fromString(final String value) {\r\n         return CipherAlgorithm.valueOf(value.toUpperCase());\r\n     }\r\n }\r"},{"sha":"76e34cb734829eac2965b77be7f06f0bb2ec4823","filename":"console/src/main/java/org/apache/syncope/console/pages/panels/ResourceDetailsPanel.java","status":"modified","additions":5,"deletions":0,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -104,6 +104,11 @@ protected List<ConnInstanceTO> load() {\n         propagationMode.setChoices(Arrays.asList(PropagationMode.values()));\n         add(propagationMode);\n \n+        final AjaxCheckBoxPanel randomPwdIfNotProvided = new AjaxCheckBoxPanel(\"randomPwdIfNotProvided\",\n+                new ResourceModel(\"randomPwdIfNotProvided\", \"randomPwdIfNotProvided\").getObject(),\n+                new PropertyModel<Boolean>(resourceTO, \"randomPwdIfNotProvided\"));\n+        add(randomPwdIfNotProvided);\n+\n         final AjaxDropDownChoicePanel<String> actionsClassName = new AjaxDropDownChoicePanel<String>(\n                 \"propagationActionsClassName\", new ResourceModel(\"actionsClass\", \"actionsClass\").getObject(),\n                 new PropertyModel<String>(resourceTO, \"propagationActionsClassName\"));"},{"sha":"5bd67a23fab808e7f1f34d66ad15aba8dd1212f6","filename":"console/src/main/resources/org/apache/syncope/console/pages/ResourceModalPage.properties","status":"modified","additions":1,"deletions":0,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage.properties?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -58,3 +58,4 @@ check=Check connection\n actionsClass=Actions class\n rmapping=Role mapping\n new=New\n+randomPwdIfNotProvided=Generate random passwords when missing"},{"sha":"6b441057de10e4b2eb5b6bd4d204e6fa5c2d6916","filename":"console/src/main/resources/org/apache/syncope/console/pages/ResourceModalPage_it.properties","status":"modified","additions":2,"deletions":0,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2FResourceModalPage_it.properties?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -59,3 +59,5 @@ check=Verifica connessione\n actionsClass=Classe azioni\n rmapping=Mapping ruoli\n new=Nuova\n+randomPwdIfNotProvided=GGenera password casuali se mancanti\n+enera password casuali se mancanti"},{"sha":"098688d8130106fb3c54cde3fcadbb3987f9ecf8","filename":"console/src/main/resources/org/apache/syncope/console/pages/panels/ResourceDetailsPanel.html","status":"modified","additions":9,"deletions":0,"changes":9,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.html","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.html","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/console%2Fsrc%2Fmain%2Fresources%2Forg%2Fapache%2Fsyncope%2Fconsole%2Fpages%2Fpanels%2FResourceDetailsPanel.html?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -73,6 +73,15 @@\n         </div>\n       </div>\n \n+      <div class=\"tablerow\">\n+        <div class=\"tablecolumn_label medium_fixedsize\">\n+          <label for=\"randomPwdIfNotProvided\"><wicket:message key=\"randomPwdIfNotProvided\"/></label>\n+        </div>\n+        <div class=\"tablecolumn_field medium_dynamicsize\">\n+          <span wicket:id=\"randomPwdIfNotProvided\">[randomPwdIfNotProvided]</span>\n+        </div>\n+      </div>\n+\n       <div class=\"tablerow\">\n         <div class=\"tablecolumn_label short_dynamicsize\">\n           <label for=\"propagationActionsClassName\"><wicket:message key=\"actionsClass\"/></label>"},{"sha":"341517d53907518403a45b88484a150e9e615fcb","filename":"core/src/main/java/org/apache/syncope/core/connid/PasswordGenerator.java","status":"modified","additions":1,"deletions":2,"changes":3,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fconnid%2FPasswordGenerator.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -21,7 +21,6 @@\n import java.util.ArrayList;\n import java.util.Iterator;\n import java.util.List;\n-\n import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.types.PasswordPolicySpec;\n@@ -298,7 +297,7 @@ private void checkEndChar(final String[] generatedPassword, final PasswordPolicy\n \n         }\n     }\n-    \n+\n     private int firstEmptyChar(String[] generatedPStrings) {\n         int index = 0;\n         while (!generatedPStrings[index].isEmpty()) {"},{"sha":"0c715f9e739bebc91de150237177251f6d9e9b23","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/ExternalResource.java","status":"modified","additions":18,"deletions":2,"changes":20,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FExternalResource.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -21,7 +21,6 @@\n import java.util.Collections;\n import java.util.HashSet;\n import java.util.Set;\n-\n import javax.persistence.Basic;\n import javax.persistence.CascadeType;\n import javax.persistence.Column;\n@@ -36,7 +35,6 @@\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n import javax.validation.constraints.NotNull;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.types.ConnConfProperty;\n import org.apache.syncope.common.types.PropagationMode;\n@@ -105,6 +103,15 @@ public class ExternalResource extends AbstractBaseBean {\n     @Column(nullable = false)\n     private Integer propagationPriority;\n \n+    /**\n+     * Generate random password for propagation, if not provided?\n+     */\n+    @Column(nullable = false)\n+    @Basic\n+    @Min(0)\n+    @Max(1)\n+    private Integer randomPwdIfNotProvided;\n+\n     @Enumerated(EnumType.STRING)\n     @Column(nullable = false)\n     private PropagationMode propagationMode;\n@@ -166,6 +173,7 @@ public ExternalResource() {\n         enforceMandatoryCondition = getBooleanAsInteger(false);\n         propagationPrimary = 0;\n         propagationPriority = 0;\n+        randomPwdIfNotProvided = 0;\n         propagationMode = PropagationMode.TWO_PHASES;\n \n         createTraceLevel = TraceLevel.FAILURES;\n@@ -224,6 +232,14 @@ public void setPropagationPriority(Integer propagationPriority) {\n         }\n     }\n \n+    public boolean isRandomPwdIfNotProvided() {\n+        return isBooleanAsInteger(randomPwdIfNotProvided);\n+    }\n+\n+    public void setRandomPwdIfNotProvided(boolean randomPwdIfNotProvided) {\n+        this.randomPwdIfNotProvided = getBooleanAsInteger(randomPwdIfNotProvided);\n+    }\n+\n     public PropagationMode getPropagationMode() {\n         return propagationMode;\n     }"},{"sha":"dd9e04b3b84603aa3aeca6a3ba5a49fd5c9975d5","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/SyncTask.java","status":"modified","additions":0,"deletions":1,"changes":1,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2FSyncTask.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -24,7 +24,6 @@\n import javax.persistence.ManyToOne;\n import javax.validation.constraints.Max;\n import javax.validation.constraints.Min;\n-\n import org.apache.syncope.common.to.RoleTO;\n import org.apache.syncope.common.to.UserTO;\n import org.apache.syncope.core.persistence.validation.entity.SyncTaskCheck;"},{"sha":"eb02d4011175bb96918971011f1ae65d67b880b2","filename":"core/src/main/java/org/apache/syncope/core/persistence/beans/user/SyncopeUser.java","status":"modified","additions":12,"deletions":22,"changes":34,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpersistence%2Fbeans%2Fuser%2FSyncopeUser.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -18,19 +18,13 @@\n  */\n package org.apache.syncope.core.persistence.beans.user;\n \n-import java.io.UnsupportedEncodingException;\n-import java.security.InvalidKeyException;\n-import java.security.NoSuchAlgorithmException;\n import java.util.ArrayList;\n import java.util.Calendar;\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Iterator;\n import java.util.List;\n import java.util.Set;\n-import javax.crypto.BadPaddingException;\n-import javax.crypto.IllegalBlockSizeException;\n-import javax.crypto.NoSuchPaddingException;\n import javax.persistence.Basic;\n import javax.persistence.Cacheable;\n import javax.persistence.CascadeType;\n@@ -273,14 +267,22 @@ public void setPassword(final String password, final CipherAlgorithm cipherAlgor\n         this.clearPassword = password;\n \n         try {\n-            this.password = encodePassword(password, cipherAlgoritm);\n+            this.password = PasswordEncoder.encode(password, cipherAlgoritm);\n             this.cipherAlgorithm = cipherAlgoritm;\n         } catch (Exception e) {\n             LOG.error(\"Could not encode password\", e);\n             this.password = null;\n         }\n     }\n \n+    public CipherAlgorithm getCipherAlgorithm() {\n+        return cipherAlgorithm;\n+    }\n+\n+    public boolean canDecodePassword() {\n+        return CipherAlgorithm.AES == this.cipherAlgorithm;\n+    }\n+\n     @Override\n     public <T extends AbstractAttr> boolean addAttribute(final T attribute) {\n         if (!(attribute instanceof UAttr)) {\n@@ -423,10 +425,6 @@ public boolean hasTokenExpired() {\n                 : tokenExpireTime.before(new Date());\n     }\n \n-    public CipherAlgorithm getCipherAlgorithm() {\n-        return cipherAlgorithm;\n-    }\n-\n     public void setCipherAlgorithm(final CipherAlgorithm cipherAlgorithm) {\n         this.cipherAlgorithm = cipherAlgorithm;\n     }\n@@ -495,24 +493,16 @@ public Boolean isSuspended() {\n         return suspended == null ? null : isBooleanAsInteger(suspended);\n     }\n \n-    private String encodePassword(final String password, final CipherAlgorithm cipherAlgoritm)\n-            throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n-            IllegalBlockSizeException, BadPaddingException {\n-\n-        return PasswordEncoder.encodePassword(password, cipherAlgoritm);\n-    }\n-\n     public boolean verifyPasswordHistory(final String password, final int size) {\n-\n         boolean res = false;\n \n         if (size > 0) {\n             try {\n                 res = passwordHistory.subList(size >= passwordHistory.size()\n                         ? 0\n-                        : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm != null\n-                        ? encodePassword(password, cipherAlgorithm)\n-                        : password);\n+                        : passwordHistory.size() - size, passwordHistory.size()).contains(cipherAlgorithm == null\n+                        ? password\n+                        : PasswordEncoder.encode(password, cipherAlgorithm));\n             } catch (Exception e) {\n                 LOG.error(\"Error evaluating password history\", e);\n             }"},{"sha":"69cfe4e49ed23c951db4b2eafce53118c7b2971a","filename":"core/src/main/java/org/apache/syncope/core/propagation/impl/PropagationManager.java","status":"modified","additions":5,"deletions":1,"changes":6,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fpropagation%2Fimpl%2FPropagationManager.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -31,6 +31,7 @@\n import org.apache.syncope.common.types.AttributableType;\n import org.apache.syncope.common.types.ResourceOperation;\n import org.apache.syncope.core.connid.ConnObjectUtil;\n+import org.apache.syncope.core.connid.PasswordGenerator;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n import org.apache.syncope.core.persistence.beans.AbstractMappingItem;\n import org.apache.syncope.core.persistence.beans.ExternalResource;\n@@ -90,6 +91,9 @@ public class PropagationManager {\n     @Autowired\n     private ConnObjectUtil connObjectUtil;\n \n+    @Autowired\n+    private PasswordGenerator passwordGenerator;\n+\n     /**\n      * Create the user on every associated resource.\n      *\n@@ -442,7 +446,7 @@ protected <T extends AbstractAttributable> Map.Entry<String, Set<Attribute>> pre\n \n             try {\n                 Map.Entry<String, Attribute> preparedAttribute = MappingUtil.prepareAttribute(\n-                        resource, mapping, subject, password, vAttrsToBeRemoved, vAttrsToBeUpdated);\n+                        resource, mapping, subject, password, passwordGenerator, vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n                 if (preparedAttribute.getKey() != null) {\n                     accountId = preparedAttribute.getKey();"},{"sha":"b906ca9e526f2c594ffd0db68d3112cca1ddfadc","filename":"core/src/main/java/org/apache/syncope/core/rest/data/ResourceDataBinder.java","status":"modified","additions":4,"deletions":1,"changes":5,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FResourceDataBinder.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -25,7 +25,6 @@\n import java.util.List;\n import java.util.Map;\n import java.util.Set;\n-\n import org.apache.commons.lang.SerializationUtils;\n import org.apache.syncope.common.to.MappingItemTO;\n import org.apache.syncope.common.to.MappingTO;\n@@ -106,6 +105,8 @@ public ExternalResource update(final ExternalResource resource, final ResourceTO\n \n         resource.setPropagationPriority(resourceTO.getPropagationPriority());\n \n+        resource.setRandomPwdIfNotProvided(resourceTO.isRandomPwdIfNotProvided());\n+\n         resource.setPropagationMode(resourceTO.getPropagationMode());\n \n         if (resourceTO.getUmapping() != null) {\n@@ -315,6 +316,8 @@ public ResourceTO getResourceTO(final ExternalResource resource) {\n \n         resourceTO.setPropagationPriority(resource.getPropagationPriority());\n \n+        resourceTO.setRandomPwdIfNotProvided(resource.isRandomPwdIfNotProvided());\n+\n         resourceTO.setPropagationMode(resource.getPropagationMode());\n \n         resourceTO.setCreateTraceLevel(resource.getCreateTraceLevel());"},{"sha":"e28334659366588e51ab5a907620f80eef9d80db","filename":"core/src/main/java/org/apache/syncope/core/rest/data/UserDataBinder.java","status":"modified","additions":11,"deletions":11,"changes":22,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2Fdata%2FUserDataBinder.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -21,7 +21,6 @@\n import java.util.Date;\n import java.util.HashSet;\n import java.util.Set;\n-\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.mod.MembershipMod;\n import org.apache.syncope.common.mod.UserMod;\n@@ -114,7 +113,7 @@ public boolean verifyPassword(final String username, final String password)\n     public boolean verifyPassword(final SyncopeUser user, final String password)\n             throws NotFoundException, UnauthorizedRoleException {\n \n-        return PasswordEncoder.verifyPassword(password, user.getCipherAlgorithm(), user.getPassword());\n+        return PasswordEncoder.verify(password, user.getCipherAlgorithm(), user.getPassword());\n     }\n \n     @Transactional(readOnly = true)\n@@ -142,12 +141,12 @@ public SyncopeUser getUserFromUsername(final String username)\n     }\n \n     /**\n-     * Get pre-configured password cipher algorithm.\n+     * Get predefined password cipher algorithm from SyncopeConf.\n      *\n      * @return cipher algorithm.\n      * @throws NotFoundException in case of algorithm not included into <code>CipherAlgorithm</code>.\n      */\n-    private CipherAlgorithm getCipherAlgoritm()\n+    private CipherAlgorithm getPredefinedCipherAlgoritm()\n             throws NotFoundException {\n \n         final String algorithm = confDAO.find(\"password.cipher.algorithm\", \"AES\").getValue();\n@@ -210,7 +209,7 @@ public void create(final SyncopeUser user, final UserTO userTO)\n             LOG.error(\"No password provided\");\n         } else {\n             try {\n-                user.setPassword(userTO.getPassword(), getCipherAlgoritm(), passwordHistorySize);\n+                user.setPassword(userTO.getPassword(), getPredefinedCipherAlgoritm(), passwordHistorySize);\n             } catch (NotFoundException e) {\n                 final SyncopeClientException invalidAlgorith =\n                         new SyncopeClientException(SyncopeClientExceptionType.NotFound);\n@@ -261,7 +260,7 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n             }\n \n             try {\n-                user.setPassword(userMod.getPassword(), getCipherAlgoritm(), passwordHistorySize);\n+                user.setPassword(userMod.getPassword(), getPredefinedCipherAlgoritm(), passwordHistorySize);\n             } catch (NotFoundException e) {\n                 final SyncopeClientException invalidAlgorith =\n                         new SyncopeClientException(SyncopeClientExceptionType.NotFound);\n@@ -388,15 +387,16 @@ public PropagationByResource update(final SyncopeUser user, final UserMod userMo\n             Set<String> updatedResources = user.getResourceNames();\n             updatedResources.removeAll(currentResources);\n \n-            for (String res : updatedResources) {\n-                final ExternalResource extRes = resourceDAO.find(res);\n+            for (String resourceName : updatedResources) {\n+                final ExternalResource resource = resourceDAO.find(resourceName);\n \n-                if (extRes != null && extRes.getUmapping() != null && !MappingUtil.getMatchingMappingItems(\n-                        extRes.getUmapping().getItems(), \"password\", IntMappingType.Password).isEmpty()) {\n+                if (!user.canDecodePassword() && resource != null && !resource.isRandomPwdIfNotProvided()\n+                        && resource.getUmapping() != null && !MappingUtil.getMatchingMappingItems(\n+                        resource.getUmapping().getItems(), \"password\", IntMappingType.Password).isEmpty()) {\n \n                     SyncopeClientException sce =\n                             new SyncopeClientException(SyncopeClientExceptionType.RequiredValuesMissing);\n-                    sce.addElement(\"password cannot be empty \" + \"when subscribing to new resources\");\n+                    sce.addElement(\"Password cannot be empty when subscribing to new resources\");\n                     scce.addException(sce);\n \n                     throw scce;"},{"sha":"a583796eaaa1e86a370c3739e991266b720c10a8","filename":"core/src/main/java/org/apache/syncope/core/security/EncodePasswordCLI.java","status":"modified","additions":1,"deletions":1,"changes":2,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FEncodePasswordCLI.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -43,7 +43,7 @@ public static void main(final String[] args)\n         }\n \n         System.out.println(\"Encoding password '\" + args[0] + \"' with \" + args[1]);\n-        System.out.println(PasswordEncoder.encodePassword(args[0], CipherAlgorithm.valueOf(args[1])));\n+        System.out.println(PasswordEncoder.encode(args[0], CipherAlgorithm.valueOf(args[1])));\n     }\n \n     private static void usage() {"},{"sha":"2e9a1daa7366bfd5c60c377b2f76ec661f944d70","filename":"core/src/main/java/org/apache/syncope/core/security/SyncopeAuthenticationProvider.java","status":"modified","additions":2,"deletions":2,"changes":4,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FSyncopeAuthenticationProvider.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -115,7 +115,7 @@ public Authentication authenticate(final Authentication authentication)\n \n         String username = authentication.getName();\n         if (adminUser.equals(username)) {\n-            authenticated = PasswordEncoder.verifyPassword(\n+            authenticated = PasswordEncoder.verify(\n                     authentication.getCredentials().toString(),\n                     CipherAlgorithm.valueOf(adminPasswordAlgorithm),\n                     adminPassword);\n@@ -126,7 +126,7 @@ public Authentication authenticate(final Authentication authentication)\n                 if (user.isSuspended()) {\n                     throw new DisabledException(\"User \" + user.getUsername() + \" is suspended\");\n                 }\n-                authenticated = PasswordEncoder.verifyPassword(\n+                authenticated = PasswordEncoder.verify(\n                         authentication.getCredentials().toString(),\n                         user.getCipherAlgorithm(),\n                         user.getPassword());"},{"sha":"912adcd2fbbaa30d6f9af5237a0074ed41e4ce32","filename":"core/src/main/java/org/apache/syncope/core/util/MappingUtil.java","status":"modified","additions":41,"deletions":24,"changes":65,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FMappingUtil.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -28,10 +28,12 @@\n import java.util.Set;\n import org.apache.commons.jexl2.JexlContext;\n import org.apache.commons.jexl2.MapContext;\n+import org.apache.commons.lang.RandomStringUtils;\n import org.apache.commons.lang.StringUtils;\n import org.apache.syncope.common.mod.AttributeMod;\n import org.apache.syncope.common.types.IntMappingType;\n import org.apache.syncope.common.types.AttributeSchemaType;\n+import org.apache.syncope.core.connid.PasswordGenerator;\n import org.apache.syncope.core.persistence.beans.AbstractAttr;\n import org.apache.syncope.core.persistence.beans.AbstractAttrValue;\n import org.apache.syncope.core.persistence.beans.AbstractAttributable;\n@@ -69,9 +71,6 @@ public final class MappingUtil {\n      */\n     private static final Logger LOG = LoggerFactory.getLogger(MappingUtil.class);\n \n-    private MappingUtil() {\n-    }\n-\n     public static <T extends AbstractMappingItem> List<T> getMatchingMappingItems(final Collection<T> items,\n             final String intAttrName, final IntMappingType type) {\n \n@@ -108,6 +107,7 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n      * @param mapItem mapping item for the given attribute\n      * @param subject given user\n      * @param password clear-text password\n+     * @param passwordGenerator password generator\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @return account link + prepared attribute\n@@ -116,7 +116,7 @@ public static <T extends AbstractMappingItem> Set<T> getMatchingMappingItems(fin\n     @SuppressWarnings(\"unchecked\")\n     public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prepareAttribute(\n             final ExternalResource resource, final AbstractMappingItem mapItem,\n-            final T subject, final String password,\n+            final T subject, final String password, final PasswordGenerator passwordGenerator,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated)\n             throws ClassNotFoundException {\n \n@@ -147,7 +147,7 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n             default:\n         }\n \n-        final List<AbstractAttrValue> values = MappingUtil.getIntValues(resource, mapItem, attributables, password,\n+        final List<AbstractAttrValue> values = MappingUtil.getIntValues(resource, mapItem, attributables,\n                 vAttrsToBeRemoved, vAttrsToBeUpdated);\n \n         AbstractSchema schema = null;\n@@ -193,9 +193,29 @@ public static <T extends AbstractAttributable> Map.Entry<String, Attribute> prep\n \n         if (mapItem.isAccountid()) {\n             result = new AbstractMap.SimpleEntry<String, Attribute>(objValues.iterator().next().toString(), null);\n-        } else if (mapItem.isPassword()) {\n+        } else if (mapItem.isPassword() && subject instanceof SyncopeUser) {\n+            String passwordAttrValue = password;\n+            if (StringUtils.isBlank(passwordAttrValue)) {\n+                SyncopeUser user = (SyncopeUser) subject;\n+                if (user.canDecodePassword()) {\n+                    try {\n+                        passwordAttrValue = PasswordEncoder.decode(user.getPassword(), user.getCipherAlgorithm());\n+                    } catch (Exception e) {\n+                        LOG.error(\"Could not decode password for {}\", user, e);\n+                    }\n+                } else if (resource.isRandomPwdIfNotProvided()) {\n+                    try {\n+                        passwordAttrValue = passwordGenerator.generateUserPassword(user);\n+                    } catch (IncompatiblePolicyException e) {\n+                        LOG.error(\"Could not generate policy-compliant random password for {}\", user, e);\n+\n+                        passwordAttrValue = RandomStringUtils.randomAlphanumeric(16);\n+                    }\n+                }\n+            }\n+\n             result = new AbstractMap.SimpleEntry<String, Attribute>(null,\n-                    AttributeBuilder.buildPassword(objValues.iterator().next().toString().toCharArray()));\n+                    AttributeBuilder.buildPassword(passwordAttrValue.toCharArray()));\n         } else {\n             if (schema != null && schema.isMultivalue()) {\n                 result = new AbstractMap.SimpleEntry<String, Attribute>(null, AttributeBuilder.build(extAttrName,\n@@ -269,7 +289,7 @@ private static <T extends AbstractAttributable> String getRoleOwnerValue(final E\n         String accountId = null;\n         try {\n             Map.Entry<String, Attribute> preparedAttr = prepareAttribute(\n-                    resource, attrUtil.getAccountIdItem(resource), subject, null,\n+                    resource, attrUtil.getAccountIdItem(resource), subject, null, null,\n                     Collections.<String>emptySet(), Collections.<String, AttributeMod>emptyMap());\n             accountId = preparedAttr.getKey();\n         } catch (ClassNotFoundException e) {\n@@ -286,19 +306,18 @@ private static <T extends AbstractAttributable> String getRoleOwnerValue(final E\n      * @param resource target resource\n      * @param mappingItem mapping item\n      * @param attributables list of attributables\n-     * @param pwd password\n      * @param vAttrsToBeRemoved virtual attributes to be removed\n      * @param vAttrsToBeUpdated virtual attributes to be added\n      * @return attribute values.\n      */\n     public static List<AbstractAttrValue> getIntValues(final ExternalResource resource,\n-            final AbstractMappingItem mappingItem, final List<AbstractAttributable> attributables, final String pwd,\n+            final AbstractMappingItem mappingItem, final List<AbstractAttributable> attributables,\n             final Set<String> vAttrsToBeRemoved, final Map<String, AttributeMod> vAttrsToBeUpdated) {\n \n         LOG.debug(\"Get attributes for '{}' and mapping type '{}'\", attributables, mappingItem.getIntMappingType());\n \n         List<AbstractAttrValue> values = new ArrayList<AbstractAttrValue>();\n-\n+        AbstractAttrValue attrValue;\n         switch (mappingItem.getIntMappingType()) {\n             case UserSchema:\n             case RoleSchema:\n@@ -330,7 +349,7 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n                     if (virAttr != null) {\n                         if (virAttr.getValues() != null) {\n                             for (String value : virAttr.getValues()) {\n-                                AbstractAttrValue attrValue = new UAttrValue();\n+                                attrValue = new UAttrValue();\n                                 attrValue.setStringValue(value);\n                                 values.add(attrValue);\n                             }\n@@ -361,7 +380,7 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n                 for (AbstractAttributable attributable : attributables) {\n                     AbstractDerAttr derAttr = attributable.getDerivedAttribute(mappingItem.getIntAttrName());\n                     if (derAttr != null) {\n-                        AbstractAttrValue attrValue = (attributable instanceof SyncopeRole)\n+                        attrValue = (attributable instanceof SyncopeRole)\n                                 ? new RAttrValue() : new UAttrValue();\n                         attrValue.setStringValue(derAttr.getValue(attributable.getAttributes()));\n                         values.add(attrValue);\n@@ -379,7 +398,7 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n             case RoleId:\n             case MembershipId:\n                 for (AbstractAttributable attributable : attributables) {\n-                    AbstractAttrValue attrValue = new UAttrValue();\n+                    attrValue = new UAttrValue();\n                     attrValue.setStringValue(attributable.getId().toString());\n                     values.add(attrValue);\n                 }\n@@ -388,21 +407,13 @@ public static List<AbstractAttrValue> getIntValues(final ExternalResource resour\n             case Username:\n                 for (AbstractAttributable attributable : attributables) {\n                     if (attributable instanceof SyncopeUser) {\n-                        AbstractAttrValue attrValue = new UAttrValue();\n+                        attrValue = new UAttrValue();\n                         attrValue.setStringValue(((SyncopeUser) attributable).getUsername());\n                         values.add(attrValue);\n                     }\n                 }\n                 break;\n \n-            case Password:\n-                AbstractAttrValue attrValue = new UAttrValue();\n-                if (pwd != null) {\n-                    attrValue.setStringValue(pwd);\n-                }\n-                values.add(attrValue);\n-                break;\n-\n             case RoleName:\n                 for (AbstractAttributable attributable : attributables) {\n                     if (attributable instanceof SyncopeRole) {\n@@ -453,7 +464,7 @@ public static String getAccountIdValue(final AbstractAttributable attributable,\n             final AbstractMappingItem accountIdItem) {\n \n         List<AbstractAttrValue> values = getIntValues(resource, accountIdItem,\n-                Collections.<AbstractAttributable>singletonList(attributable), null, null, null);\n+                Collections.<AbstractAttributable>singletonList(attributable), null, null);\n         return values == null || values.isEmpty()\n                 ? null\n                 : values.get(0).getValueAsString();\n@@ -511,4 +522,10 @@ public static Class getIntMappingTypeClass(final IntMappingType intMappingType)\n \n         return result;\n     }\n+\n+    /**\n+     * Private default constructor, for static-only classes.\n+     */\n+    private MappingUtil() {\n+    }\n }"},{"sha":"57be16c8752b82b33c68e8eb5567f22fb6c0ac37","filename":"core/src/main/java/org/apache/syncope/core/util/PasswordEncoder.java","status":"modified","additions":24,"deletions":16,"changes":40,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordEncoder.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordEncoder.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Fmain%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Futil%2FPasswordEncoder.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -24,13 +24,11 @@\n import java.security.InvalidKeyException;\n import java.security.NoSuchAlgorithmException;\n import java.util.Properties;\n-\n import javax.crypto.BadPaddingException;\n import javax.crypto.Cipher;\n import javax.crypto.IllegalBlockSizeException;\n import javax.crypto.NoSuchPaddingException;\n import javax.crypto.spec.SecretKeySpec;\n-\n import org.apache.commons.lang.ArrayUtils;\n import org.apache.syncope.common.types.CipherAlgorithm;\n import org.jasypt.digest.StandardStringDigester;\n@@ -86,7 +84,7 @@ public final class PasswordEncoder {\n         }\n     }\n \n-    public static String encodePassword(final String password, final CipherAlgorithm cipherAlgorithm)\n+    public static String encode(final String password, final CipherAlgorithm cipherAlgorithm)\n             throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n             IllegalBlockSizeException, BadPaddingException {\n \n@@ -98,10 +96,9 @@ public static String encodePassword(final String password, final CipherAlgorithm\n \n                 final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n                 cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n-                byte[] encoded = cipher.doFinal(cleartext);\n \n-                encodedPassword = new String(Base64.encode(encoded));\n-            } else if (cipherAlgorithm.getAlgorithm().equals(\"BCRYPT\")) {\n+                encodedPassword = new String(Base64.encode(cipher.doFinal(cleartext)));\n+            } else if (cipherAlgorithm == CipherAlgorithm.BCRYPT) {\n                 encodedPassword = BCrypt.hashpw(password, BCrypt.gensalt());\n             } else {\n                 encodedPassword = getDigester(cipherAlgorithm).digest(password);\n@@ -111,23 +108,16 @@ public static String encodePassword(final String password, final CipherAlgorithm\n         return encodedPassword;\n     }\n \n-    public static boolean verifyPassword(final String password, final CipherAlgorithm cipherAlgorithm,\n+    public static boolean verify(final String password, final CipherAlgorithm cipherAlgorithm,\n             final String digestedPassword) {\n \n         boolean res = false;\n \n         try {\n             if (password != null) {\n                 if (cipherAlgorithm == null || cipherAlgorithm == CipherAlgorithm.AES) {\n-\n-                    final byte[] cleartext = password.getBytes(\"UTF8\");\n-\n-                    final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n-                    cipher.init(Cipher.ENCRYPT_MODE, keySpec);\n-                    byte[] encoded = cipher.doFinal(cleartext);\n-\n-                    res = new String(Base64.encode(encoded)).equals(digestedPassword);\n-                } else if (cipherAlgorithm.getAlgorithm().equals(\"BCRYPT\")) {\n+                    res = encode(password, cipherAlgorithm).equals(digestedPassword);\n+                } else if (cipherAlgorithm == CipherAlgorithm.BCRYPT) {\n                     res = BCrypt.checkpw(password, digestedPassword);\n                 } else {\n                     res = getDigester(cipherAlgorithm).matches(password, digestedPassword);\n@@ -140,6 +130,24 @@ public static boolean verifyPassword(final String password, final CipherAlgorith\n         return res;\n     }\n \n+    public static String decode(final String encodedPassword, final CipherAlgorithm cipherAlgorithm)\n+            throws UnsupportedEncodingException, NoSuchAlgorithmException, NoSuchPaddingException, InvalidKeyException,\n+            IllegalBlockSizeException, BadPaddingException {\n+\n+        String password = null;\n+\n+        if (encodedPassword != null && cipherAlgorithm == CipherAlgorithm.AES) {\n+            final byte[] encoded = encodedPassword.getBytes(\"UTF8\");\n+\n+            final Cipher cipher = Cipher.getInstance(CipherAlgorithm.AES.getAlgorithm());\n+            cipher.init(Cipher.DECRYPT_MODE, keySpec);\n+\n+            password = new String(cipher.doFinal(Base64.decode(encoded)));\n+        }\n+\n+        return password;\n+    }\n+\n     private static StandardStringDigester getDigester(final CipherAlgorithm cipherAlgorithm) {\n         StandardStringDigester digester = new StandardStringDigester();\n "},{"sha":"482ac68de461e53bdcc4e72de7418969b0336dfe","filename":"core/src/test/java/org/apache/syncope/core/rest/UserTestITCase.java","status":"modified","additions":74,"deletions":5,"changes":79,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Frest%2FUserTestITCase.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -212,8 +212,7 @@ public void issue186() {\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().isEmpty());\n \n-        // 2. update assigning a resource forcing mandatory constraints: must\n-        // fail with RequiredValuesMissing\n+        // 2. update assigning a resource forcing mandatory constraints: must fail with RequiredValuesMissing\n         UserMod userMod = new UserMod();\n         userMod.setId(userTO.getId());\n         userMod.setPassword(\"newPassword\");\n@@ -1896,9 +1895,9 @@ public void issueSYNCOPE122() {\n         } catch (SyncopeClientCompositeErrorException scce) {\n             // TODO Dirty workaround for AUTO generation Id strategy problem in AbstractVirAttr.\n             // Must be removed after fix of SYNCOPE-298\n-        \tSyncopeClientException sce = scce.getException(SyncopeClientExceptionType.DataIntegrityViolation);\n-        \tassertNotNull(sce);\n-        \treturn;\n+            SyncopeClientException sce = scce.getException(SyncopeClientExceptionType.DataIntegrityViolation);\n+            assertNotNull(sce);\n+            return;\n         }\n         assertNotNull(userTO);\n         assertTrue(userTO.getResources().contains(\"resource-testdb\"));\n@@ -1956,4 +1955,74 @@ public void issueSYNCOPE122() {\n         assertFalse(pwdOnTestDb2AttrAfter.getValues().isEmpty());\n         assertEquals(pwdOnTestDb2, pwdOnTestDb2AttrAfter.getValues().iterator().next());\n     }\n+\n+    @Test\n+    public void isseSYNCOPE136AES() {\n+        // 1. read configured cipher algorithm in order to be able to restore it at the end of test\n+        ConfigurationTO pwdCipherAlgo = configurationService.read(\"password.cipher.algorithm\");\n+        final String origpwdCipherAlgo = pwdCipherAlgo.getValue();\n+\n+        // 2. set AES password cipher algorithm\n+        pwdCipherAlgo.setValue(\"AES\");\n+        configurationService.update(pwdCipherAlgo.getKey(), pwdCipherAlgo);\n+\n+        try {\n+            // 3. create user with no resources\n+            UserTO userTO = getUniqueSampleTO(\"syncope136_AES@apache.org\");\n+            userTO.getResources().clear();\n+\n+            userTO = userService.create(userTO).readEntity(UserTO.class);\n+            assertNotNull(userTO);\n+\n+            // 4. update user, assign a propagation primary resource but don't provide any password\n+            UserMod userMod = new UserMod();\n+            userMod.setId(userTO.getId());\n+            userMod.addResourceToBeAdded(\"ws-target-resource-2\");\n+\n+            userTO = userService.update(userMod.getId(), userMod);\n+            assertNotNull(userTO);\n+\n+            // 5. verify that propagation was successful\n+            List<PropagationStatusTO> props = userTO.getPropagationStatusTOs();\n+            assertNotNull(props);\n+            assertEquals(1, props.size());\n+            PropagationStatusTO prop = props.iterator().next();\n+            assertNotNull(prop);\n+            assertEquals(\"ws-target-resource-2\", prop.getResource());\n+            assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+        } catch (Exception e) {\n+            LOG.error(\"Unexpected exception\", e);\n+        } finally {\n+            // 6. restore initial cipher algorithm\n+            pwdCipherAlgo.setValue(origpwdCipherAlgo);\n+            configurationService.update(pwdCipherAlgo.getKey(), pwdCipherAlgo);\n+        }\n+    }\n+\n+    @Test\n+    public void isseSYNCOPE136Random() {\n+        // 1. create user with no resources\n+        UserTO userTO = getUniqueSampleTO(\"syncope136_Random@apache.org\");\n+        userTO.getResources().clear();\n+\n+        userTO = userService.create(userTO).readEntity(UserTO.class);\n+        assertNotNull(userTO);\n+\n+        // 2. update user, assign a propagation primary resource but don't provide any password\n+        UserMod userMod = new UserMod();\n+        userMod.setId(userTO.getId());\n+        userMod.addResourceToBeAdded(\"resource-ldap\");\n+\n+        userTO = userService.update(userMod.getId(), userMod);\n+        assertNotNull(userTO);\n+\n+        // 3. verify that propagation was successful\n+        List<PropagationStatusTO> props = userTO.getPropagationStatusTOs();\n+        assertNotNull(props);\n+        assertEquals(1, props.size());\n+        PropagationStatusTO prop = props.iterator().next();\n+        assertNotNull(prop);\n+        assertEquals(\"resource-ldap\", prop.getResource());\n+        assertEquals(PropagationTaskExecStatus.SUCCESS, prop.getStatus());\n+    }\n }"},{"sha":"7ad0e74e22b194d7c5f4d04fa65ea87c516d3d2a","filename":"core/src/test/java/org/apache/syncope/core/security/PasswordEncoderTest.java","status":"modified","additions":5,"deletions":5,"changes":10,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fjava%2Forg%2Fapache%2Fsyncope%2Fcore%2Fsecurity%2FPasswordEncoderTest.java?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -41,18 +41,18 @@ public void testEncoder()\n             throws Exception {\n \n         for (CipherAlgorithm cipherAlgorithm : CipherAlgorithm.values()) {\n-            final String encPassword = PasswordEncoder.encodePassword(password, cipherAlgorithm);\n+            final String encPassword = PasswordEncoder.encode(password, cipherAlgorithm);\n \n             assertNotNull(encPassword);\n-            assertTrue(PasswordEncoder.verifyPassword(password, cipherAlgorithm, encPassword));\n-            assertFalse(PasswordEncoder.verifyPassword(\"pass\", cipherAlgorithm, encPassword));\n+            assertTrue(PasswordEncoder.verify(password, cipherAlgorithm, encPassword));\n+            assertFalse(PasswordEncoder.verify(\"pass\", cipherAlgorithm, encPassword));\n \n             // check that same password encoded with BCRYPT or Salted versions results in different digest\n             if (cipherAlgorithm.equals(CipherAlgorithm.BCRYPT) || cipherAlgorithm.getAlgorithm().startsWith(\"S-\")) {\n-                final String encSamePassword = PasswordEncoder.encodePassword(password, cipherAlgorithm);\n+                final String encSamePassword = PasswordEncoder.encode(password, cipherAlgorithm);\n                 assertNotNull(encSamePassword);\n                 assertFalse(encSamePassword.equals(encPassword));\n-                assertTrue(PasswordEncoder.verifyPassword(password, cipherAlgorithm, encSamePassword));\n+                assertTrue(PasswordEncoder.verify(password, cipherAlgorithm, encSamePassword));\n             }\n         }\n "},{"sha":"a3afd30630e964bf2eb3dbee78907828130b658c","filename":"core/src/test/resources/content.xml","status":"modified","additions":21,"deletions":21,"changes":42,"blob_url":"https://github.com/EnricoDAlessandro97UNI/syncope/blob/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","raw_url":"https://github.com/EnricoDAlessandro97UNI/syncope/raw/e94447c1292958add874d050d9bdf676f2cdef5f/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml","contents_url":"https://api.github.com/repos/EnricoDAlessandro97UNI/syncope/contents/core%2Fsrc%2Ftest%2Fresources%2Fcontent.xml?ref=e94447c1292958add874d050d9bdf676f2cdef5f","patch":"@@ -339,66 +339,66 @@ under the License.\n   <ConnInstance_capabilities ConnInstance_id=\"107\" capabilities=\"TWO_PHASES_UPDATE\"/>\n \n   <ExternalResource name=\"ws-target-resource-1\" connector_id=\"100\"\n-                    enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-2\" connector_id=\"100\"\n-                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-3\" connector_id=\"102\"\n-                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\" createTraceLevel=\"FAILURES\" deleteTraceLevel=\"NONE\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     xmlConfiguration=\"%3Cset%3E%0A++%3Corg.apache.syncope.common.types.ConnConfProperty%3E%0A++++%3Cschema%3E%0A++++++%3Cname%3Eendpoint%3C/name%3E%0A++++++%3Ctype%3Ejava.lang.String%3C/type%3E%0A++++++%3Crequired%3Etrue%3C/required%3E%0A++++%3C/schema%3E%0A++++%3Cvalues%3E%0A++++++%3Cjava.lang.String%3Ehttp%3A//localhost%3A9080/syncope-build-tools/services/provisioning%3C/java.lang.String%3E%0A++++%3C/values%3E%0A++++%3Coverridable%3Etrue%3C/overridable%3E%0A++%3C/org.apache.syncope.common.types.ConnConfProperty%3E%0A%3C/set%3E\"/>\n   <ExternalResource name=\"ws-target-resource-list-mappings-1\" connector_id=\"100\"\n-                    enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-list-mappings-2\" connector_id=\"100\"\n-                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-delete\" connector_id=\"102\"\n-                    enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"2\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-update\" connector_id=\"100\"\n-                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"resource-testdb\" connector_id=\"101\"\n-                    enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"resource-testdb2\" connector_id=\"106\"\n-                    enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"resource-csv\" connector_id=\"104\"\n-                    enforceMandatoryCondition=\"0\" propagationMode=\"ONE_PHASE\" syncPolicy_id=\"3\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"0\" propagationMode=\"ONE_PHASE\" syncPolicy_id=\"3\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-update-resetsynctoken\" connector_id=\"100\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n+                    randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"\n                     userializedSyncToken=\"%3Corg.identityconnectors.framework.common.objects.SyncToken%2F%3E\"/>\n   <ExternalResource name=\"resource-ldap\" connector_id=\"105\"\n-                    enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n+                    randomPwdIfNotProvided=\"1\" enforceMandatoryCondition=\"1\" propagationMode=\"ONE_PHASE\"\n                     propagationPriority=\"0\" propagationPrimary=\"1\"\n                     propagationActionsClassName=\"org.apache.syncope.core.propagation.impl.LDAPMembershipPropagationActions\"\n                     createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\"/>\n   <ExternalResource name=\"ws-target-resource-nopropagation\" connector_id=\"103\"\n-                    enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n+                    randomPwdIfNotProvided=\"0\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n                     propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" \n                     passwordPolicy_id=\"4\"/>\n   \n   <!-- The following three resources has been added to verify the issue SYNCOPE-68 -->\n   <ExternalResource name=\"ws-target-resource-nopropagation2\" connector_id=\"103\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" />\n+                    randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" />\n   <ExternalResource name=\"ws-target-resource-nopropagation3\" connector_id=\"103\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" />\n+                    randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" />\n   <ExternalResource name=\"ws-target-resource-nopropagation4\" connector_id=\"103\" enforceMandatoryCondition=\"1\" propagationMode=\"TWO_PHASES\"\n-                    propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" />\n+                    randomPwdIfNotProvided=\"0\" propagationPriority=\"0\" propagationPrimary=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" updateTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" />\n                     \n   <!-- External resource for issue SYNCOPE-230 -->\n   <ExternalResource name=\"resource-db-sync\" connector_id=\"107\"\n-                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n+                    randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\" \n                     propagationMode=\"TWO_PHASES\" propagationPrimary=\"0\" propagationPriority=\"0\"/>\n                     \n   <!-- External resource for issue SYNCOPE-267 -->\n   <ExternalResource name=\"resource-db-virattr\" connector_id=\"107\"\n-                    createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n+                    randomPwdIfNotProvided=\"0\" createTraceLevel=\"ALL\" deleteTraceLevel=\"ALL\" syncTraceLevel=\"ALL\" updateTraceLevel=\"ALL\"\n                     enforceMandatoryCondition=\"0\" \n                     propagationMode=\"TWO_PHASES\" propagationPrimary=\"0\" propagationPriority=\"0\"/>\n   \n@@ -763,9 +763,9 @@ under the License.\n                 xmlRecipients=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++%3CmembershipCond%3E%0A++++%3CroleId%3E7%3C%2FroleId%3E%0A++%3C%2FmembershipCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n                 recipientAttrType=\"UserSchema\" recipientAttrName=\"email\"/>\n   <!--Notification id=\"101\" sender=\"test@syncope.apache.org\" subject=\"Test subject\" template=\"test\" selfAsRecipient=\"0\" traceLevel=\"ALL\"\n-                xmlAbout=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3EAND%3C%2Ftype%3E%0A++%3CleftNodeCond%3E%0A++++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++++%3CattributeCond%3E%0A++++++%3Ctype%3ELIKE%3C%2Ftype%3E%0A++++++%3Cschema%3Efullname%3C%2Fschema%3E%0A++++++%3Cexpression%3E%25o%25%3C%2Fexpression%3E%0A++++%3C%2FattributeCond%3E%0A++%3C%2FleftNodeCond%3E%0A++%3CrightNodeCond%3E%0A++++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++++%3CattributeCond%3E%0A++++++%3Ctype%3ELIKE%3C%2Ftype%3E%0A++++++%3Cschema%3Efullname%3C%2Fschema%3E%0A++++++%3Cexpression%3E%25i%25%3C%2Fexpression%3E%0A++++%3C%2FattributeCond%3E%0A++%3C%2FrightNodeCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n-                xmlRecipients=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++%3CmembershipCond%3E%0A++++%3CroleId%3E7%3C%2FroleId%3E%0A++%3C%2FmembershipCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n-                recipientAttrType=\"UserSchema\" recipientAttrName=\"email\"/-->\n+  xmlAbout=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3EAND%3C%2Ftype%3E%0A++%3CleftNodeCond%3E%0A++++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++++%3CattributeCond%3E%0A++++++%3Ctype%3ELIKE%3C%2Ftype%3E%0A++++++%3Cschema%3Efullname%3C%2Fschema%3E%0A++++++%3Cexpression%3E%25o%25%3C%2Fexpression%3E%0A++++%3C%2FattributeCond%3E%0A++%3C%2FleftNodeCond%3E%0A++%3CrightNodeCond%3E%0A++++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++++%3CattributeCond%3E%0A++++++%3Ctype%3ELIKE%3C%2Ftype%3E%0A++++++%3Cschema%3Efullname%3C%2Fschema%3E%0A++++++%3Cexpression%3E%25i%25%3C%2Fexpression%3E%0A++++%3C%2FattributeCond%3E%0A++%3C%2FrightNodeCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n+  xmlRecipients=\"%3Corg.apache.syncope.common.search.NodeCond%3E%0A++%3Ctype%3ELEAF%3C%2Ftype%3E%0A++%3CmembershipCond%3E%0A++++%3CroleId%3E7%3C%2FroleId%3E%0A++%3C%2FmembershipCond%3E%0A%3C%2Forg.apache.syncope.common.search.NodeCond%3E\"\n+  recipientAttrType=\"UserSchema\" recipientAttrName=\"email\"/-->\n   <Notification_events Notification_id=\"100\" events=\"unexisting1\"/>\n   <Notification_events Notification_id=\"100\" events=\"unexisting2\"/>\n   <!--Notification_events Notification_id=\"101\" events=\"unexisting1\"/-->"}]}